(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('path'), require('fs'), require('child_process'), require('util'), require('events'), require('stream'), require('buffer'), require('os'), require('assert'), require('http'), require('https'), require('url'), require('zlib'), require('constants'), require('tty'), require('readline'), require('string_decoder'), require('crypto')) :
    typeof define === 'function' && define.amd ? define(['exports', 'path', 'fs', 'child_process', 'util', 'events', 'stream', 'buffer', 'os', 'assert', 'http', 'https', 'url', 'zlib', 'constants', 'tty', 'readline', 'string_decoder', 'crypto'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global["@js-cli/init"] = {}, global.path$l, global.require$$0$a, global.require$$1$5, global.require$$0$4, global.require$$2$2, global.require$$0$5, global.require$$0$6, global.require$$0$7, global.require$$0$8, global.require$$1$4, global.require$$2$3, global.require$$0$9, global.require$$8, global.require$$0$b, global.require$$0$c, global.require$$3$3, global.require$$1$6, global.require$$2$4));
})(this, (function (exports, path$l, require$$0$a, require$$1$5, require$$0$4, require$$2$2, require$$0$5, require$$0$6, require$$0$7, require$$0$8, require$$1$4, require$$2$3, require$$0$9, require$$8, require$$0$b, require$$0$c, require$$3$3, require$$1$6, require$$2$4) { 'use strict';

    function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

    var path__default = /*#__PURE__*/_interopDefaultLegacy(path$l);
    var require$$0__default$6 = /*#__PURE__*/_interopDefaultLegacy(require$$0$a);
    var require$$1__default$1 = /*#__PURE__*/_interopDefaultLegacy(require$$1$5);
    var require$$0__default = /*#__PURE__*/_interopDefaultLegacy(require$$0$4);
    var require$$2__default = /*#__PURE__*/_interopDefaultLegacy(require$$2$2);
    var require$$0__default$1 = /*#__PURE__*/_interopDefaultLegacy(require$$0$5);
    var require$$0__default$2 = /*#__PURE__*/_interopDefaultLegacy(require$$0$6);
    var require$$0__default$3 = /*#__PURE__*/_interopDefaultLegacy(require$$0$7);
    var require$$0__default$4 = /*#__PURE__*/_interopDefaultLegacy(require$$0$8);
    var require$$1__default = /*#__PURE__*/_interopDefaultLegacy(require$$1$4);
    var require$$2__default$1 = /*#__PURE__*/_interopDefaultLegacy(require$$2$3);
    var require$$0__default$5 = /*#__PURE__*/_interopDefaultLegacy(require$$0$9);
    var require$$8__default = /*#__PURE__*/_interopDefaultLegacy(require$$8);
    var require$$0__default$7 = /*#__PURE__*/_interopDefaultLegacy(require$$0$b);
    var require$$0__default$8 = /*#__PURE__*/_interopDefaultLegacy(require$$0$c);
    var require$$3__default = /*#__PURE__*/_interopDefaultLegacy(require$$3$3);
    var require$$1__default$2 = /*#__PURE__*/_interopDefaultLegacy(require$$1$6);
    var require$$2__default$2 = /*#__PURE__*/_interopDefaultLegacy(require$$2$4);

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */

    function __awaiter$4(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

    function getAugmentedNamespace(n) {
    	if (n.__esModule) return n;
    	var a = Object.defineProperty({}, '__esModule', {value: true});
    	Object.keys(n).forEach(function (k) {
    		var d = Object.getOwnPropertyDescriptor(n, k);
    		Object.defineProperty(a, k, d.get ? d : {
    			enumerable: true,
    			get: function () {
    				return n[k];
    			}
    		});
    	});
    	return a;
    }

    var log$1 = {exports: {}};

    var lib$3 = {};

    var trackerGroup = {exports: {}};

    var trackerBase = {exports: {}};

    var EventEmitter = require$$2__default["default"].EventEmitter;
    var util$c = require$$0__default["default"];

    var trackerId = 0;
    var TrackerBase$2 = trackerBase.exports = function (name) {
      EventEmitter.call(this);
      this.id = ++trackerId;
      this.name = name;
    };
    util$c.inherits(TrackerBase$2, EventEmitter);

    var tracker = {exports: {}};

    var util$b = require$$0__default["default"];
    var TrackerBase$1 = trackerBase.exports;

    var Tracker$2 = tracker.exports = function (name, todo) {
      TrackerBase$1.call(this, name);
      this.workDone = 0;
      this.workTodo = todo || 0;
    };
    util$b.inherits(Tracker$2, TrackerBase$1);

    Tracker$2.prototype.completed = function () {
      return this.workTodo === 0 ? 0 : this.workDone / this.workTodo
    };

    Tracker$2.prototype.addWork = function (work) {
      this.workTodo += work;
      this.emit('change', this.name, this.completed(), this);
    };

    Tracker$2.prototype.completeWork = function (work) {
      this.workDone += work;
      if (this.workDone > this.workTodo) {
        this.workDone = this.workTodo;
      }
      this.emit('change', this.name, this.completed(), this);
    };

    Tracker$2.prototype.finish = function () {
      this.workTodo = this.workDone = 1;
      this.emit('change', this.name, 1, this);
    };

    var trackerStream = {exports: {}};

    var readable$1 = {exports: {}};

    var stream$2 = require$$0__default$1["default"];

    function ownKeys$3(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

    function _objectSpread$3(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$3(Object(source), true).forEach(function (key) { _defineProperty$7(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$3(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

    function _defineProperty$7(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

    function _classCallCheck$1(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    function _defineProperties$1(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

    function _createClass$1(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties$1(Constructor.prototype, protoProps); if (staticProps) _defineProperties$1(Constructor, staticProps); return Constructor; }

    var _require$5 = require$$0__default$2["default"],
        Buffer$q = _require$5.Buffer;

    var _require2$1 = require$$0__default["default"],
        inspect$1 = _require2$1.inspect;

    var custom$1 = inspect$1 && inspect$1.custom || 'inspect';

    function copyBuffer$1(src, target, offset) {
      Buffer$q.prototype.copy.call(src, target, offset);
    }

    var buffer_list$1 =
    /*#__PURE__*/
    function () {
      function BufferList() {
        _classCallCheck$1(this, BufferList);

        this.head = null;
        this.tail = null;
        this.length = 0;
      }

      _createClass$1(BufferList, [{
        key: "push",
        value: function push(v) {
          var entry = {
            data: v,
            next: null
          };
          if (this.length > 0) this.tail.next = entry;else this.head = entry;
          this.tail = entry;
          ++this.length;
        }
      }, {
        key: "unshift",
        value: function unshift(v) {
          var entry = {
            data: v,
            next: this.head
          };
          if (this.length === 0) this.tail = entry;
          this.head = entry;
          ++this.length;
        }
      }, {
        key: "shift",
        value: function shift() {
          if (this.length === 0) return;
          var ret = this.head.data;
          if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
          --this.length;
          return ret;
        }
      }, {
        key: "clear",
        value: function clear() {
          this.head = this.tail = null;
          this.length = 0;
        }
      }, {
        key: "join",
        value: function join(s) {
          if (this.length === 0) return '';
          var p = this.head;
          var ret = '' + p.data;

          while (p = p.next) {
            ret += s + p.data;
          }

          return ret;
        }
      }, {
        key: "concat",
        value: function concat(n) {
          if (this.length === 0) return Buffer$q.alloc(0);
          var ret = Buffer$q.allocUnsafe(n >>> 0);
          var p = this.head;
          var i = 0;

          while (p) {
            copyBuffer$1(p.data, ret, i);
            i += p.data.length;
            p = p.next;
          }

          return ret;
        } // Consumes a specified amount of bytes or characters from the buffered data.

      }, {
        key: "consume",
        value: function consume(n, hasStrings) {
          var ret;

          if (n < this.head.data.length) {
            // `slice` is the same for buffers and strings.
            ret = this.head.data.slice(0, n);
            this.head.data = this.head.data.slice(n);
          } else if (n === this.head.data.length) {
            // First chunk is a perfect match.
            ret = this.shift();
          } else {
            // Result spans more than one buffer.
            ret = hasStrings ? this._getString(n) : this._getBuffer(n);
          }

          return ret;
        }
      }, {
        key: "first",
        value: function first() {
          return this.head.data;
        } // Consumes a specified amount of characters from the buffered data.

      }, {
        key: "_getString",
        value: function _getString(n) {
          var p = this.head;
          var c = 1;
          var ret = p.data;
          n -= ret.length;

          while (p = p.next) {
            var str = p.data;
            var nb = n > str.length ? str.length : n;
            if (nb === str.length) ret += str;else ret += str.slice(0, n);
            n -= nb;

            if (n === 0) {
              if (nb === str.length) {
                ++c;
                if (p.next) this.head = p.next;else this.head = this.tail = null;
              } else {
                this.head = p;
                p.data = str.slice(nb);
              }

              break;
            }

            ++c;
          }

          this.length -= c;
          return ret;
        } // Consumes a specified amount of bytes from the buffered data.

      }, {
        key: "_getBuffer",
        value: function _getBuffer(n) {
          var ret = Buffer$q.allocUnsafe(n);
          var p = this.head;
          var c = 1;
          p.data.copy(ret);
          n -= p.data.length;

          while (p = p.next) {
            var buf = p.data;
            var nb = n > buf.length ? buf.length : n;
            buf.copy(ret, ret.length - n, 0, nb);
            n -= nb;

            if (n === 0) {
              if (nb === buf.length) {
                ++c;
                if (p.next) this.head = p.next;else this.head = this.tail = null;
              } else {
                this.head = p;
                p.data = buf.slice(nb);
              }

              break;
            }

            ++c;
          }

          this.length -= c;
          return ret;
        } // Make sure the linked list only shows the minimal necessary information.

      }, {
        key: custom$1,
        value: function value(_, options) {
          return inspect$1(this, _objectSpread$3({}, options, {
            // Only inspect one level.
            depth: 0,
            // It should not recurse.
            customInspect: false
          }));
        }
      }]);

      return BufferList;
    }();

    function destroy$1(err, cb) {
      var _this = this;

      var readableDestroyed = this._readableState && this._readableState.destroyed;
      var writableDestroyed = this._writableState && this._writableState.destroyed;

      if (readableDestroyed || writableDestroyed) {
        if (cb) {
          cb(err);
        } else if (err) {
          if (!this._writableState) {
            process.nextTick(emitErrorNT$1, this, err);
          } else if (!this._writableState.errorEmitted) {
            this._writableState.errorEmitted = true;
            process.nextTick(emitErrorNT$1, this, err);
          }
        }

        return this;
      } // we set destroyed to true before firing error callbacks in order
      // to make it re-entrance safe in case destroy() is called within callbacks


      if (this._readableState) {
        this._readableState.destroyed = true;
      } // if this is a duplex stream mark the writable part as destroyed as well


      if (this._writableState) {
        this._writableState.destroyed = true;
      }

      this._destroy(err || null, function (err) {
        if (!cb && err) {
          if (!_this._writableState) {
            process.nextTick(emitErrorAndCloseNT$1, _this, err);
          } else if (!_this._writableState.errorEmitted) {
            _this._writableState.errorEmitted = true;
            process.nextTick(emitErrorAndCloseNT$1, _this, err);
          } else {
            process.nextTick(emitCloseNT$1, _this);
          }
        } else if (cb) {
          process.nextTick(emitCloseNT$1, _this);
          cb(err);
        } else {
          process.nextTick(emitCloseNT$1, _this);
        }
      });

      return this;
    }

    function emitErrorAndCloseNT$1(self, err) {
      emitErrorNT$1(self, err);
      emitCloseNT$1(self);
    }

    function emitCloseNT$1(self) {
      if (self._writableState && !self._writableState.emitClose) return;
      if (self._readableState && !self._readableState.emitClose) return;
      self.emit('close');
    }

    function undestroy$1() {
      if (this._readableState) {
        this._readableState.destroyed = false;
        this._readableState.reading = false;
        this._readableState.ended = false;
        this._readableState.endEmitted = false;
      }

      if (this._writableState) {
        this._writableState.destroyed = false;
        this._writableState.ended = false;
        this._writableState.ending = false;
        this._writableState.finalCalled = false;
        this._writableState.prefinished = false;
        this._writableState.finished = false;
        this._writableState.errorEmitted = false;
      }
    }

    function emitErrorNT$1(self, err) {
      self.emit('error', err);
    }

    function errorOrDestroy$5(stream, err) {
      // We have tests that rely on errors being emitted
      // in the same tick, so changing this is semver major.
      // For now when you opt-in to autoDestroy we allow
      // the error to be emitted nextTick. In a future
      // semver major update we should change the default to this.
      var rState = stream._readableState;
      var wState = stream._writableState;
      if (rState && rState.autoDestroy || wState && wState.autoDestroy) stream.destroy(err);else stream.emit('error', err);
    }

    var destroy_1$1 = {
      destroy: destroy$1,
      undestroy: undestroy$1,
      errorOrDestroy: errorOrDestroy$5
    };

    var errors$1 = {};

    const codes$1 = {};

    function createErrorType$3(code, message, Base) {
      if (!Base) {
        Base = Error;
      }

      function getMessage (arg1, arg2, arg3) {
        if (typeof message === 'string') {
          return message
        } else {
          return message(arg1, arg2, arg3)
        }
      }

      class NodeError extends Base {
        constructor (arg1, arg2, arg3) {
          super(getMessage(arg1, arg2, arg3));
        }
      }

      NodeError.prototype.name = Base.name;
      NodeError.prototype.code = code;

      codes$1[code] = NodeError;
    }

    // https://github.com/nodejs/node/blob/v10.8.0/lib/internal/errors.js
    function oneOf$1(expected, thing) {
      if (Array.isArray(expected)) {
        const len = expected.length;
        expected = expected.map((i) => String(i));
        if (len > 2) {
          return `one of ${thing} ${expected.slice(0, len - 1).join(', ')}, or ` +
                 expected[len - 1];
        } else if (len === 2) {
          return `one of ${thing} ${expected[0]} or ${expected[1]}`;
        } else {
          return `of ${thing} ${expected[0]}`;
        }
      } else {
        return `of ${thing} ${String(expected)}`;
      }
    }

    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith
    function startsWith$1(str, search, pos) {
    	return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;
    }

    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith
    function endsWith$1(str, search, this_len) {
    	if (this_len === undefined || this_len > str.length) {
    		this_len = str.length;
    	}
    	return str.substring(this_len - search.length, this_len) === search;
    }

    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes
    function includes$1(str, search, start) {
      if (typeof start !== 'number') {
        start = 0;
      }

      if (start + search.length > str.length) {
        return false;
      } else {
        return str.indexOf(search, start) !== -1;
      }
    }

    createErrorType$3('ERR_INVALID_OPT_VALUE', function (name, value) {
      return 'The value "' + value + '" is invalid for option "' + name + '"'
    }, TypeError);
    createErrorType$3('ERR_INVALID_ARG_TYPE', function (name, expected, actual) {
      // determiner: 'must be' or 'must not be'
      let determiner;
      if (typeof expected === 'string' && startsWith$1(expected, 'not ')) {
        determiner = 'must not be';
        expected = expected.replace(/^not /, '');
      } else {
        determiner = 'must be';
      }

      let msg;
      if (endsWith$1(name, ' argument')) {
        // For cases like 'first argument'
        msg = `The ${name} ${determiner} ${oneOf$1(expected, 'type')}`;
      } else {
        const type = includes$1(name, '.') ? 'property' : 'argument';
        msg = `The "${name}" ${type} ${determiner} ${oneOf$1(expected, 'type')}`;
      }

      msg += `. Received type ${typeof actual}`;
      return msg;
    }, TypeError);
    createErrorType$3('ERR_STREAM_PUSH_AFTER_EOF', 'stream.push() after EOF');
    createErrorType$3('ERR_METHOD_NOT_IMPLEMENTED', function (name) {
      return 'The ' + name + ' method is not implemented'
    });
    createErrorType$3('ERR_STREAM_PREMATURE_CLOSE', 'Premature close');
    createErrorType$3('ERR_STREAM_DESTROYED', function (name) {
      return 'Cannot call ' + name + ' after a stream was destroyed';
    });
    createErrorType$3('ERR_MULTIPLE_CALLBACK', 'Callback called multiple times');
    createErrorType$3('ERR_STREAM_CANNOT_PIPE', 'Cannot pipe, not readable');
    createErrorType$3('ERR_STREAM_WRITE_AFTER_END', 'write after end');
    createErrorType$3('ERR_STREAM_NULL_VALUES', 'May not write null values to stream', TypeError);
    createErrorType$3('ERR_UNKNOWN_ENCODING', function (arg) {
      return 'Unknown encoding: ' + arg
    }, TypeError);
    createErrorType$3('ERR_STREAM_UNSHIFT_AFTER_END_EVENT', 'stream.unshift() after end event');

    errors$1.codes = codes$1;

    var ERR_INVALID_OPT_VALUE$1 = errors$1.codes.ERR_INVALID_OPT_VALUE;

    function highWaterMarkFrom$1(options, isDuplex, duplexKey) {
      return options.highWaterMark != null ? options.highWaterMark : isDuplex ? options[duplexKey] : null;
    }

    function getHighWaterMark$5(state, options, duplexKey, isDuplex) {
      var hwm = highWaterMarkFrom$1(options, isDuplex, duplexKey);

      if (hwm != null) {
        if (!(isFinite(hwm) && Math.floor(hwm) === hwm) || hwm < 0) {
          var name = isDuplex ? duplexKey : 'highWaterMark';
          throw new ERR_INVALID_OPT_VALUE$1(name, hwm);
        }

        return Math.floor(hwm);
      } // Default value


      return state.objectMode ? 16 : 16 * 1024;
    }

    var state$1 = {
      getHighWaterMark: getHighWaterMark$5
    };

    var inherits$4 = {exports: {}};

    var inherits_browser$1 = {exports: {}};

    if (typeof Object.create === 'function') {
      // implementation from standard node.js 'util' module
      inherits_browser$1.exports = function inherits(ctor, superCtor) {
        if (superCtor) {
          ctor.super_ = superCtor;
          ctor.prototype = Object.create(superCtor.prototype, {
            constructor: {
              value: ctor,
              enumerable: false,
              writable: true,
              configurable: true
            }
          });
        }
      };
    } else {
      // old school shim for old browsers
      inherits_browser$1.exports = function inherits(ctor, superCtor) {
        if (superCtor) {
          ctor.super_ = superCtor;
          var TempCtor = function () {};
          TempCtor.prototype = superCtor.prototype;
          ctor.prototype = new TempCtor();
          ctor.prototype.constructor = ctor;
        }
      };
    }

    try {
      var util$a = require('util');
      /* istanbul ignore next */
      if (typeof util$a.inherits !== 'function') throw '';
      inherits$4.exports = util$a.inherits;
    } catch (e) {
      /* istanbul ignore next */
      inherits$4.exports = inherits_browser$1.exports;
    }

    /**
     * For Node.js, simply re-export the core `util.deprecate` function.
     */

    var node$2 = require$$0__default["default"].deprecate;

    var _stream_writable$1 = Writable$5;
    // there will be only 2 of these for each stream


    function CorkedRequest$1(state) {
      var _this = this;

      this.next = null;
      this.entry = null;

      this.finish = function () {
        onCorkedFinish$1(_this, state);
      };
    }
    /* </replacement> */

    /*<replacement>*/


    var Duplex$7;
    /*</replacement>*/

    Writable$5.WritableState = WritableState$1;
    /*<replacement>*/

    var internalUtil$1 = {
      deprecate: node$2
    };
    /*</replacement>*/

    /*<replacement>*/

    var Stream$6 = stream$2;
    /*</replacement>*/


    var Buffer$p = require$$0__default$2["default"].Buffer;

    var OurUint8Array$3 = commonjsGlobal.Uint8Array || function () {};

    function _uint8ArrayToBuffer$3(chunk) {
      return Buffer$p.from(chunk);
    }

    function _isUint8Array$3(obj) {
      return Buffer$p.isBuffer(obj) || obj instanceof OurUint8Array$3;
    }

    var destroyImpl$3 = destroy_1$1;

    var _require$4 = state$1,
        getHighWaterMark$4 = _require$4.getHighWaterMark;

    var _require$codes$7 = errors$1.codes,
        ERR_INVALID_ARG_TYPE$5 = _require$codes$7.ERR_INVALID_ARG_TYPE,
        ERR_METHOD_NOT_IMPLEMENTED$5 = _require$codes$7.ERR_METHOD_NOT_IMPLEMENTED,
        ERR_MULTIPLE_CALLBACK$3 = _require$codes$7.ERR_MULTIPLE_CALLBACK,
        ERR_STREAM_CANNOT_PIPE$1 = _require$codes$7.ERR_STREAM_CANNOT_PIPE,
        ERR_STREAM_DESTROYED$3 = _require$codes$7.ERR_STREAM_DESTROYED,
        ERR_STREAM_NULL_VALUES$1 = _require$codes$7.ERR_STREAM_NULL_VALUES,
        ERR_STREAM_WRITE_AFTER_END$1 = _require$codes$7.ERR_STREAM_WRITE_AFTER_END,
        ERR_UNKNOWN_ENCODING$1 = _require$codes$7.ERR_UNKNOWN_ENCODING;

    var errorOrDestroy$4 = destroyImpl$3.errorOrDestroy;

    inherits$4.exports(Writable$5, Stream$6);

    function nop$1() {}

    function WritableState$1(options, stream, isDuplex) {
      Duplex$7 = Duplex$7 || _stream_duplex$1;
      options = options || {}; // Duplex streams are both readable and writable, but share
      // the same options object.
      // However, some cases require setting options to different
      // values for the readable and the writable sides of the duplex stream,
      // e.g. options.readableObjectMode vs. options.writableObjectMode, etc.

      if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof Duplex$7; // object stream flag to indicate whether or not this stream
      // contains buffers or objects.

      this.objectMode = !!options.objectMode;
      if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode; // the point at which write() starts returning false
      // Note: 0 is a valid value, means that we always return false if
      // the entire buffer is not flushed immediately on write()

      this.highWaterMark = getHighWaterMark$4(this, options, 'writableHighWaterMark', isDuplex); // if _final has been called

      this.finalCalled = false; // drain event flag.

      this.needDrain = false; // at the start of calling end()

      this.ending = false; // when end() has been called, and returned

      this.ended = false; // when 'finish' is emitted

      this.finished = false; // has it been destroyed

      this.destroyed = false; // should we decode strings into buffers before passing to _write?
      // this is here so that some node-core streams can optimize string
      // handling at a lower level.

      var noDecode = options.decodeStrings === false;
      this.decodeStrings = !noDecode; // Crypto is kind of old and crusty.  Historically, its default string
      // encoding is 'binary' so we have to make this configurable.
      // Everything else in the universe uses 'utf8', though.

      this.defaultEncoding = options.defaultEncoding || 'utf8'; // not an actual buffer we keep track of, but a measurement
      // of how much we're waiting to get pushed to some underlying
      // socket or file.

      this.length = 0; // a flag to see when we're in the middle of a write.

      this.writing = false; // when true all writes will be buffered until .uncork() call

      this.corked = 0; // a flag to be able to tell if the onwrite cb is called immediately,
      // or on a later tick.  We set this to true at first, because any
      // actions that shouldn't happen until "later" should generally also
      // not happen before the first write call.

      this.sync = true; // a flag to know if we're processing previously buffered items, which
      // may call the _write() callback in the same tick, so that we don't
      // end up in an overlapped onwrite situation.

      this.bufferProcessing = false; // the callback that's passed to _write(chunk,cb)

      this.onwrite = function (er) {
        onwrite$1(stream, er);
      }; // the callback that the user supplies to write(chunk,encoding,cb)


      this.writecb = null; // the amount that is being written when _write is called.

      this.writelen = 0;
      this.bufferedRequest = null;
      this.lastBufferedRequest = null; // number of pending user-supplied write callbacks
      // this must be 0 before 'finish' can be emitted

      this.pendingcb = 0; // emit prefinish if the only thing we're waiting for is _write cbs
      // This is relevant for synchronous Transform streams

      this.prefinished = false; // True if the error was already emitted and should not be thrown again

      this.errorEmitted = false; // Should close be emitted on destroy. Defaults to true.

      this.emitClose = options.emitClose !== false; // Should .destroy() be called after 'finish' (and potentially 'end')

      this.autoDestroy = !!options.autoDestroy; // count buffered requests

      this.bufferedRequestCount = 0; // allocate the first CorkedRequest, there is always
      // one allocated and free to use, and we maintain at most two

      this.corkedRequestsFree = new CorkedRequest$1(this);
    }

    WritableState$1.prototype.getBuffer = function getBuffer() {
      var current = this.bufferedRequest;
      var out = [];

      while (current) {
        out.push(current);
        current = current.next;
      }

      return out;
    };

    (function () {
      try {
        Object.defineProperty(WritableState$1.prototype, 'buffer', {
          get: internalUtil$1.deprecate(function writableStateBufferGetter() {
            return this.getBuffer();
          }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')
        });
      } catch (_) {}
    })(); // Test _writableState for inheritance to account for Duplex streams,
    // whose prototype chain only points to Readable.


    var realHasInstance$1;

    if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
      realHasInstance$1 = Function.prototype[Symbol.hasInstance];
      Object.defineProperty(Writable$5, Symbol.hasInstance, {
        value: function value(object) {
          if (realHasInstance$1.call(this, object)) return true;
          if (this !== Writable$5) return false;
          return object && object._writableState instanceof WritableState$1;
        }
      });
    } else {
      realHasInstance$1 = function realHasInstance(object) {
        return object instanceof this;
      };
    }

    function Writable$5(options) {
      Duplex$7 = Duplex$7 || _stream_duplex$1; // Writable ctor is applied to Duplexes, too.
      // `realHasInstance` is necessary because using plain `instanceof`
      // would return false, as no `_writableState` property is attached.
      // Trying to use the custom `instanceof` for Writable here will also break the
      // Node.js LazyTransform implementation, which has a non-trivial getter for
      // `_writableState` that would lead to infinite recursion.
      // Checking for a Stream.Duplex instance is faster here instead of inside
      // the WritableState constructor, at least with V8 6.5

      var isDuplex = this instanceof Duplex$7;
      if (!isDuplex && !realHasInstance$1.call(Writable$5, this)) return new Writable$5(options);
      this._writableState = new WritableState$1(options, this, isDuplex); // legacy.

      this.writable = true;

      if (options) {
        if (typeof options.write === 'function') this._write = options.write;
        if (typeof options.writev === 'function') this._writev = options.writev;
        if (typeof options.destroy === 'function') this._destroy = options.destroy;
        if (typeof options.final === 'function') this._final = options.final;
      }

      Stream$6.call(this);
    } // Otherwise people can pipe Writable streams, which is just wrong.


    Writable$5.prototype.pipe = function () {
      errorOrDestroy$4(this, new ERR_STREAM_CANNOT_PIPE$1());
    };

    function writeAfterEnd$1(stream, cb) {
      var er = new ERR_STREAM_WRITE_AFTER_END$1(); // TODO: defer error events consistently everywhere, not just the cb

      errorOrDestroy$4(stream, er);
      process.nextTick(cb, er);
    } // Checks that a user-supplied chunk is valid, especially for the particular
    // mode the stream is in. Currently this means that `null` is never accepted
    // and undefined/non-string values are only allowed in object mode.


    function validChunk$1(stream, state, chunk, cb) {
      var er;

      if (chunk === null) {
        er = new ERR_STREAM_NULL_VALUES$1();
      } else if (typeof chunk !== 'string' && !state.objectMode) {
        er = new ERR_INVALID_ARG_TYPE$5('chunk', ['string', 'Buffer'], chunk);
      }

      if (er) {
        errorOrDestroy$4(stream, er);
        process.nextTick(cb, er);
        return false;
      }

      return true;
    }

    Writable$5.prototype.write = function (chunk, encoding, cb) {
      var state = this._writableState;
      var ret = false;

      var isBuf = !state.objectMode && _isUint8Array$3(chunk);

      if (isBuf && !Buffer$p.isBuffer(chunk)) {
        chunk = _uint8ArrayToBuffer$3(chunk);
      }

      if (typeof encoding === 'function') {
        cb = encoding;
        encoding = null;
      }

      if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;
      if (typeof cb !== 'function') cb = nop$1;
      if (state.ending) writeAfterEnd$1(this, cb);else if (isBuf || validChunk$1(this, state, chunk, cb)) {
        state.pendingcb++;
        ret = writeOrBuffer$1(this, state, isBuf, chunk, encoding, cb);
      }
      return ret;
    };

    Writable$5.prototype.cork = function () {
      this._writableState.corked++;
    };

    Writable$5.prototype.uncork = function () {
      var state = this._writableState;

      if (state.corked) {
        state.corked--;
        if (!state.writing && !state.corked && !state.bufferProcessing && state.bufferedRequest) clearBuffer$1(this, state);
      }
    };

    Writable$5.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
      // node::ParseEncoding() requires lower case.
      if (typeof encoding === 'string') encoding = encoding.toLowerCase();
      if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new ERR_UNKNOWN_ENCODING$1(encoding);
      this._writableState.defaultEncoding = encoding;
      return this;
    };

    Object.defineProperty(Writable$5.prototype, 'writableBuffer', {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get() {
        return this._writableState && this._writableState.getBuffer();
      }
    });

    function decodeChunk$1(state, chunk, encoding) {
      if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
        chunk = Buffer$p.from(chunk, encoding);
      }

      return chunk;
    }

    Object.defineProperty(Writable$5.prototype, 'writableHighWaterMark', {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get() {
        return this._writableState.highWaterMark;
      }
    }); // if we're already writing something, then just put this
    // in the queue, and wait our turn.  Otherwise, call _write
    // If we return false, then we need a drain event, so set that flag.

    function writeOrBuffer$1(stream, state, isBuf, chunk, encoding, cb) {
      if (!isBuf) {
        var newChunk = decodeChunk$1(state, chunk, encoding);

        if (chunk !== newChunk) {
          isBuf = true;
          encoding = 'buffer';
          chunk = newChunk;
        }
      }

      var len = state.objectMode ? 1 : chunk.length;
      state.length += len;
      var ret = state.length < state.highWaterMark; // we must ensure that previous needDrain will not be reset to false.

      if (!ret) state.needDrain = true;

      if (state.writing || state.corked) {
        var last = state.lastBufferedRequest;
        state.lastBufferedRequest = {
          chunk: chunk,
          encoding: encoding,
          isBuf: isBuf,
          callback: cb,
          next: null
        };

        if (last) {
          last.next = state.lastBufferedRequest;
        } else {
          state.bufferedRequest = state.lastBufferedRequest;
        }

        state.bufferedRequestCount += 1;
      } else {
        doWrite$1(stream, state, false, len, chunk, encoding, cb);
      }

      return ret;
    }

    function doWrite$1(stream, state, writev, len, chunk, encoding, cb) {
      state.writelen = len;
      state.writecb = cb;
      state.writing = true;
      state.sync = true;
      if (state.destroyed) state.onwrite(new ERR_STREAM_DESTROYED$3('write'));else if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
      state.sync = false;
    }

    function onwriteError$1(stream, state, sync, er, cb) {
      --state.pendingcb;

      if (sync) {
        // defer the callback if we are being called synchronously
        // to avoid piling up things on the stack
        process.nextTick(cb, er); // this can emit finish, and it will always happen
        // after error

        process.nextTick(finishMaybe$1, stream, state);
        stream._writableState.errorEmitted = true;
        errorOrDestroy$4(stream, er);
      } else {
        // the caller expect this to happen before if
        // it is async
        cb(er);
        stream._writableState.errorEmitted = true;
        errorOrDestroy$4(stream, er); // this can emit finish, but finish must
        // always follow error

        finishMaybe$1(stream, state);
      }
    }

    function onwriteStateUpdate$1(state) {
      state.writing = false;
      state.writecb = null;
      state.length -= state.writelen;
      state.writelen = 0;
    }

    function onwrite$1(stream, er) {
      var state = stream._writableState;
      var sync = state.sync;
      var cb = state.writecb;
      if (typeof cb !== 'function') throw new ERR_MULTIPLE_CALLBACK$3();
      onwriteStateUpdate$1(state);
      if (er) onwriteError$1(stream, state, sync, er, cb);else {
        // Check if we're actually ready to finish, but don't emit yet
        var finished = needFinish$1(state) || stream.destroyed;

        if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
          clearBuffer$1(stream, state);
        }

        if (sync) {
          process.nextTick(afterWrite$1, stream, state, finished, cb);
        } else {
          afterWrite$1(stream, state, finished, cb);
        }
      }
    }

    function afterWrite$1(stream, state, finished, cb) {
      if (!finished) onwriteDrain$1(stream, state);
      state.pendingcb--;
      cb();
      finishMaybe$1(stream, state);
    } // Must force callback to be called on nextTick, so that we don't
    // emit 'drain' before the write() consumer gets the 'false' return
    // value, and has a chance to attach a 'drain' listener.


    function onwriteDrain$1(stream, state) {
      if (state.length === 0 && state.needDrain) {
        state.needDrain = false;
        stream.emit('drain');
      }
    } // if there's something in the buffer waiting, then process it


    function clearBuffer$1(stream, state) {
      state.bufferProcessing = true;
      var entry = state.bufferedRequest;

      if (stream._writev && entry && entry.next) {
        // Fast case, write everything using _writev()
        var l = state.bufferedRequestCount;
        var buffer = new Array(l);
        var holder = state.corkedRequestsFree;
        holder.entry = entry;
        var count = 0;
        var allBuffers = true;

        while (entry) {
          buffer[count] = entry;
          if (!entry.isBuf) allBuffers = false;
          entry = entry.next;
          count += 1;
        }

        buffer.allBuffers = allBuffers;
        doWrite$1(stream, state, true, state.length, buffer, '', holder.finish); // doWrite is almost always async, defer these to save a bit of time
        // as the hot path ends with doWrite

        state.pendingcb++;
        state.lastBufferedRequest = null;

        if (holder.next) {
          state.corkedRequestsFree = holder.next;
          holder.next = null;
        } else {
          state.corkedRequestsFree = new CorkedRequest$1(state);
        }

        state.bufferedRequestCount = 0;
      } else {
        // Slow case, write chunks one-by-one
        while (entry) {
          var chunk = entry.chunk;
          var encoding = entry.encoding;
          var cb = entry.callback;
          var len = state.objectMode ? 1 : chunk.length;
          doWrite$1(stream, state, false, len, chunk, encoding, cb);
          entry = entry.next;
          state.bufferedRequestCount--; // if we didn't call the onwrite immediately, then
          // it means that we need to wait until it does.
          // also, that means that the chunk and cb are currently
          // being processed, so move the buffer counter past them.

          if (state.writing) {
            break;
          }
        }

        if (entry === null) state.lastBufferedRequest = null;
      }

      state.bufferedRequest = entry;
      state.bufferProcessing = false;
    }

    Writable$5.prototype._write = function (chunk, encoding, cb) {
      cb(new ERR_METHOD_NOT_IMPLEMENTED$5('_write()'));
    };

    Writable$5.prototype._writev = null;

    Writable$5.prototype.end = function (chunk, encoding, cb) {
      var state = this._writableState;

      if (typeof chunk === 'function') {
        cb = chunk;
        chunk = null;
        encoding = null;
      } else if (typeof encoding === 'function') {
        cb = encoding;
        encoding = null;
      }

      if (chunk !== null && chunk !== undefined) this.write(chunk, encoding); // .end() fully uncorks

      if (state.corked) {
        state.corked = 1;
        this.uncork();
      } // ignore unnecessary end() calls.


      if (!state.ending) endWritable$1(this, state, cb);
      return this;
    };

    Object.defineProperty(Writable$5.prototype, 'writableLength', {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get() {
        return this._writableState.length;
      }
    });

    function needFinish$1(state) {
      return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
    }

    function callFinal$1(stream, state) {
      stream._final(function (err) {
        state.pendingcb--;

        if (err) {
          errorOrDestroy$4(stream, err);
        }

        state.prefinished = true;
        stream.emit('prefinish');
        finishMaybe$1(stream, state);
      });
    }

    function prefinish$3(stream, state) {
      if (!state.prefinished && !state.finalCalled) {
        if (typeof stream._final === 'function' && !state.destroyed) {
          state.pendingcb++;
          state.finalCalled = true;
          process.nextTick(callFinal$1, stream, state);
        } else {
          state.prefinished = true;
          stream.emit('prefinish');
        }
      }
    }

    function finishMaybe$1(stream, state) {
      var need = needFinish$1(state);

      if (need) {
        prefinish$3(stream, state);

        if (state.pendingcb === 0) {
          state.finished = true;
          stream.emit('finish');

          if (state.autoDestroy) {
            // In case of duplex streams we need a way to detect
            // if the readable side is ready for autoDestroy as well
            var rState = stream._readableState;

            if (!rState || rState.autoDestroy && rState.endEmitted) {
              stream.destroy();
            }
          }
        }
      }

      return need;
    }

    function endWritable$1(stream, state, cb) {
      state.ending = true;
      finishMaybe$1(stream, state);

      if (cb) {
        if (state.finished) process.nextTick(cb);else stream.once('finish', cb);
      }

      state.ended = true;
      stream.writable = false;
    }

    function onCorkedFinish$1(corkReq, state, err) {
      var entry = corkReq.entry;
      corkReq.entry = null;

      while (entry) {
        var cb = entry.callback;
        state.pendingcb--;
        cb(err);
        entry = entry.next;
      } // reuse the free corkReq.


      state.corkedRequestsFree.next = corkReq;
    }

    Object.defineProperty(Writable$5.prototype, 'destroyed', {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get() {
        if (this._writableState === undefined) {
          return false;
        }

        return this._writableState.destroyed;
      },
      set: function set(value) {
        // we ignore the value if the stream
        // has not been initialized yet
        if (!this._writableState) {
          return;
        } // backward compatibility, the user is explicitly
        // managing destroyed


        this._writableState.destroyed = value;
      }
    });
    Writable$5.prototype.destroy = destroyImpl$3.destroy;
    Writable$5.prototype._undestroy = destroyImpl$3.undestroy;

    Writable$5.prototype._destroy = function (err, cb) {
      cb(err);
    };

    /*<replacement>*/

    var objectKeys$1 = Object.keys || function (obj) {
      var keys = [];

      for (var key in obj) {
        keys.push(key);
      }

      return keys;
    };
    /*</replacement>*/


    var _stream_duplex$1 = Duplex$6;

    var Readable$3 = _stream_readable$1;

    var Writable$4 = _stream_writable$1;

    inherits$4.exports(Duplex$6, Readable$3);

    {
      // Allow the keys array to be GC'ed.
      var keys$h = objectKeys$1(Writable$4.prototype);

      for (var v$1 = 0; v$1 < keys$h.length; v$1++) {
        var method$1 = keys$h[v$1];
        if (!Duplex$6.prototype[method$1]) Duplex$6.prototype[method$1] = Writable$4.prototype[method$1];
      }
    }

    function Duplex$6(options) {
      if (!(this instanceof Duplex$6)) return new Duplex$6(options);
      Readable$3.call(this, options);
      Writable$4.call(this, options);
      this.allowHalfOpen = true;

      if (options) {
        if (options.readable === false) this.readable = false;
        if (options.writable === false) this.writable = false;

        if (options.allowHalfOpen === false) {
          this.allowHalfOpen = false;
          this.once('end', onend$1);
        }
      }
    }

    Object.defineProperty(Duplex$6.prototype, 'writableHighWaterMark', {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get() {
        return this._writableState.highWaterMark;
      }
    });
    Object.defineProperty(Duplex$6.prototype, 'writableBuffer', {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get() {
        return this._writableState && this._writableState.getBuffer();
      }
    });
    Object.defineProperty(Duplex$6.prototype, 'writableLength', {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get() {
        return this._writableState.length;
      }
    }); // the no-half-open enforcer

    function onend$1() {
      // If the writable side ended, then we're ok.
      if (this._writableState.ended) return; // no more data can be written.
      // But allow more writes to happen in this tick.

      process.nextTick(onEndNT$1, this);
    }

    function onEndNT$1(self) {
      self.end();
    }

    Object.defineProperty(Duplex$6.prototype, 'destroyed', {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get() {
        if (this._readableState === undefined || this._writableState === undefined) {
          return false;
        }

        return this._readableState.destroyed && this._writableState.destroyed;
      },
      set: function set(value) {
        // we ignore the value if the stream
        // has not been initialized yet
        if (this._readableState === undefined || this._writableState === undefined) {
          return;
        } // backward compatibility, the user is explicitly
        // managing destroyed


        this._readableState.destroyed = value;
        this._writableState.destroyed = value;
      }
    });

    var string_decoder$1 = {};

    var safeBuffer$1 = {exports: {}};

    /*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */

    (function (module, exports) {
    /* eslint-disable node/no-deprecated-api */
    var buffer = require$$0__default$2["default"];
    var Buffer = buffer.Buffer;

    // alternative to using Object.keys for old browsers
    function copyProps (src, dst) {
      for (var key in src) {
        dst[key] = src[key];
      }
    }
    if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
      module.exports = buffer;
    } else {
      // Copy properties from require('buffer')
      copyProps(buffer, exports);
      exports.Buffer = SafeBuffer;
    }

    function SafeBuffer (arg, encodingOrOffset, length) {
      return Buffer(arg, encodingOrOffset, length)
    }

    SafeBuffer.prototype = Object.create(Buffer.prototype);

    // Copy static methods from Buffer
    copyProps(Buffer, SafeBuffer);

    SafeBuffer.from = function (arg, encodingOrOffset, length) {
      if (typeof arg === 'number') {
        throw new TypeError('Argument must not be a number')
      }
      return Buffer(arg, encodingOrOffset, length)
    };

    SafeBuffer.alloc = function (size, fill, encoding) {
      if (typeof size !== 'number') {
        throw new TypeError('Argument must be a number')
      }
      var buf = Buffer(size);
      if (fill !== undefined) {
        if (typeof encoding === 'string') {
          buf.fill(fill, encoding);
        } else {
          buf.fill(fill);
        }
      } else {
        buf.fill(0);
      }
      return buf
    };

    SafeBuffer.allocUnsafe = function (size) {
      if (typeof size !== 'number') {
        throw new TypeError('Argument must be a number')
      }
      return Buffer(size)
    };

    SafeBuffer.allocUnsafeSlow = function (size) {
      if (typeof size !== 'number') {
        throw new TypeError('Argument must be a number')
      }
      return buffer.SlowBuffer(size)
    };
    }(safeBuffer$1, safeBuffer$1.exports));

    /*<replacement>*/

    var Buffer$o = safeBuffer$1.exports.Buffer;
    /*</replacement>*/

    var isEncoding$1 = Buffer$o.isEncoding || function (encoding) {
      encoding = '' + encoding;
      switch (encoding && encoding.toLowerCase()) {
        case 'hex':case 'utf8':case 'utf-8':case 'ascii':case 'binary':case 'base64':case 'ucs2':case 'ucs-2':case 'utf16le':case 'utf-16le':case 'raw':
          return true;
        default:
          return false;
      }
    };

    function _normalizeEncoding$1(enc) {
      if (!enc) return 'utf8';
      var retried;
      while (true) {
        switch (enc) {
          case 'utf8':
          case 'utf-8':
            return 'utf8';
          case 'ucs2':
          case 'ucs-2':
          case 'utf16le':
          case 'utf-16le':
            return 'utf16le';
          case 'latin1':
          case 'binary':
            return 'latin1';
          case 'base64':
          case 'ascii':
          case 'hex':
            return enc;
          default:
            if (retried) return; // undefined
            enc = ('' + enc).toLowerCase();
            retried = true;
        }
      }
    }
    // Do not cache `Buffer.isEncoding` when checking encoding names as some
    // modules monkey-patch it to support additional encodings
    function normalizeEncoding$1(enc) {
      var nenc = _normalizeEncoding$1(enc);
      if (typeof nenc !== 'string' && (Buffer$o.isEncoding === isEncoding$1 || !isEncoding$1(enc))) throw new Error('Unknown encoding: ' + enc);
      return nenc || enc;
    }

    // StringDecoder provides an interface for efficiently splitting a series of
    // buffers into a series of JS strings without breaking apart multi-byte
    // characters.
    string_decoder$1.StringDecoder = StringDecoder$5;
    function StringDecoder$5(encoding) {
      this.encoding = normalizeEncoding$1(encoding);
      var nb;
      switch (this.encoding) {
        case 'utf16le':
          this.text = utf16Text$1;
          this.end = utf16End$1;
          nb = 4;
          break;
        case 'utf8':
          this.fillLast = utf8FillLast$1;
          nb = 4;
          break;
        case 'base64':
          this.text = base64Text$1;
          this.end = base64End$1;
          nb = 3;
          break;
        default:
          this.write = simpleWrite$1;
          this.end = simpleEnd$1;
          return;
      }
      this.lastNeed = 0;
      this.lastTotal = 0;
      this.lastChar = Buffer$o.allocUnsafe(nb);
    }

    StringDecoder$5.prototype.write = function (buf) {
      if (buf.length === 0) return '';
      var r;
      var i;
      if (this.lastNeed) {
        r = this.fillLast(buf);
        if (r === undefined) return '';
        i = this.lastNeed;
        this.lastNeed = 0;
      } else {
        i = 0;
      }
      if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);
      return r || '';
    };

    StringDecoder$5.prototype.end = utf8End$1;

    // Returns only complete characters in a Buffer
    StringDecoder$5.prototype.text = utf8Text$1;

    // Attempts to complete a partial non-UTF-8 character using bytes from a Buffer
    StringDecoder$5.prototype.fillLast = function (buf) {
      if (this.lastNeed <= buf.length) {
        buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
        return this.lastChar.toString(this.encoding, 0, this.lastTotal);
      }
      buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
      this.lastNeed -= buf.length;
    };

    // Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a
    // continuation byte. If an invalid byte is detected, -2 is returned.
    function utf8CheckByte$1(byte) {
      if (byte <= 0x7F) return 0;else if (byte >> 5 === 0x06) return 2;else if (byte >> 4 === 0x0E) return 3;else if (byte >> 3 === 0x1E) return 4;
      return byte >> 6 === 0x02 ? -1 : -2;
    }

    // Checks at most 3 bytes at the end of a Buffer in order to detect an
    // incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)
    // needed to complete the UTF-8 character (if applicable) are returned.
    function utf8CheckIncomplete$1(self, buf, i) {
      var j = buf.length - 1;
      if (j < i) return 0;
      var nb = utf8CheckByte$1(buf[j]);
      if (nb >= 0) {
        if (nb > 0) self.lastNeed = nb - 1;
        return nb;
      }
      if (--j < i || nb === -2) return 0;
      nb = utf8CheckByte$1(buf[j]);
      if (nb >= 0) {
        if (nb > 0) self.lastNeed = nb - 2;
        return nb;
      }
      if (--j < i || nb === -2) return 0;
      nb = utf8CheckByte$1(buf[j]);
      if (nb >= 0) {
        if (nb > 0) {
          if (nb === 2) nb = 0;else self.lastNeed = nb - 3;
        }
        return nb;
      }
      return 0;
    }

    // Validates as many continuation bytes for a multi-byte UTF-8 character as
    // needed or are available. If we see a non-continuation byte where we expect
    // one, we "replace" the validated continuation bytes we've seen so far with
    // a single UTF-8 replacement character ('\ufffd'), to match v8's UTF-8 decoding
    // behavior. The continuation byte check is included three times in the case
    // where all of the continuation bytes for a character exist in the same buffer.
    // It is also done this way as a slight performance increase instead of using a
    // loop.
    function utf8CheckExtraBytes$1(self, buf, p) {
      if ((buf[0] & 0xC0) !== 0x80) {
        self.lastNeed = 0;
        return '\ufffd';
      }
      if (self.lastNeed > 1 && buf.length > 1) {
        if ((buf[1] & 0xC0) !== 0x80) {
          self.lastNeed = 1;
          return '\ufffd';
        }
        if (self.lastNeed > 2 && buf.length > 2) {
          if ((buf[2] & 0xC0) !== 0x80) {
            self.lastNeed = 2;
            return '\ufffd';
          }
        }
      }
    }

    // Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.
    function utf8FillLast$1(buf) {
      var p = this.lastTotal - this.lastNeed;
      var r = utf8CheckExtraBytes$1(this, buf);
      if (r !== undefined) return r;
      if (this.lastNeed <= buf.length) {
        buf.copy(this.lastChar, p, 0, this.lastNeed);
        return this.lastChar.toString(this.encoding, 0, this.lastTotal);
      }
      buf.copy(this.lastChar, p, 0, buf.length);
      this.lastNeed -= buf.length;
    }

    // Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a
    // partial character, the character's bytes are buffered until the required
    // number of bytes are available.
    function utf8Text$1(buf, i) {
      var total = utf8CheckIncomplete$1(this, buf, i);
      if (!this.lastNeed) return buf.toString('utf8', i);
      this.lastTotal = total;
      var end = buf.length - (total - this.lastNeed);
      buf.copy(this.lastChar, 0, end);
      return buf.toString('utf8', i, end);
    }

    // For UTF-8, a replacement character is added when ending on a partial
    // character.
    function utf8End$1(buf) {
      var r = buf && buf.length ? this.write(buf) : '';
      if (this.lastNeed) return r + '\ufffd';
      return r;
    }

    // UTF-16LE typically needs two bytes per character, but even if we have an even
    // number of bytes available, we need to check if we end on a leading/high
    // surrogate. In that case, we need to wait for the next two bytes in order to
    // decode the last character properly.
    function utf16Text$1(buf, i) {
      if ((buf.length - i) % 2 === 0) {
        var r = buf.toString('utf16le', i);
        if (r) {
          var c = r.charCodeAt(r.length - 1);
          if (c >= 0xD800 && c <= 0xDBFF) {
            this.lastNeed = 2;
            this.lastTotal = 4;
            this.lastChar[0] = buf[buf.length - 2];
            this.lastChar[1] = buf[buf.length - 1];
            return r.slice(0, -1);
          }
        }
        return r;
      }
      this.lastNeed = 1;
      this.lastTotal = 2;
      this.lastChar[0] = buf[buf.length - 1];
      return buf.toString('utf16le', i, buf.length - 1);
    }

    // For UTF-16LE we do not explicitly append special replacement characters if we
    // end on a partial character, we simply let v8 handle that.
    function utf16End$1(buf) {
      var r = buf && buf.length ? this.write(buf) : '';
      if (this.lastNeed) {
        var end = this.lastTotal - this.lastNeed;
        return r + this.lastChar.toString('utf16le', 0, end);
      }
      return r;
    }

    function base64Text$1(buf, i) {
      var n = (buf.length - i) % 3;
      if (n === 0) return buf.toString('base64', i);
      this.lastNeed = 3 - n;
      this.lastTotal = 3;
      if (n === 1) {
        this.lastChar[0] = buf[buf.length - 1];
      } else {
        this.lastChar[0] = buf[buf.length - 2];
        this.lastChar[1] = buf[buf.length - 1];
      }
      return buf.toString('base64', i, buf.length - n);
    }

    function base64End$1(buf) {
      var r = buf && buf.length ? this.write(buf) : '';
      if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);
      return r;
    }

    // Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)
    function simpleWrite$1(buf) {
      return buf.toString(this.encoding);
    }

    function simpleEnd$1(buf) {
      return buf && buf.length ? this.write(buf) : '';
    }

    var ERR_STREAM_PREMATURE_CLOSE$1 = errors$1.codes.ERR_STREAM_PREMATURE_CLOSE;

    function once$7(callback) {
      var called = false;
      return function () {
        if (called) return;
        called = true;

        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        callback.apply(this, args);
      };
    }

    function noop$c() {}

    function isRequest$3(stream) {
      return stream.setHeader && typeof stream.abort === 'function';
    }

    function eos$3(stream, opts, callback) {
      if (typeof opts === 'function') return eos$3(stream, null, opts);
      if (!opts) opts = {};
      callback = once$7(callback || noop$c);
      var readable = opts.readable || opts.readable !== false && stream.readable;
      var writable = opts.writable || opts.writable !== false && stream.writable;

      var onlegacyfinish = function onlegacyfinish() {
        if (!stream.writable) onfinish();
      };

      var writableEnded = stream._writableState && stream._writableState.finished;

      var onfinish = function onfinish() {
        writable = false;
        writableEnded = true;
        if (!readable) callback.call(stream);
      };

      var readableEnded = stream._readableState && stream._readableState.endEmitted;

      var onend = function onend() {
        readable = false;
        readableEnded = true;
        if (!writable) callback.call(stream);
      };

      var onerror = function onerror(err) {
        callback.call(stream, err);
      };

      var onclose = function onclose() {
        var err;

        if (readable && !readableEnded) {
          if (!stream._readableState || !stream._readableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE$1();
          return callback.call(stream, err);
        }

        if (writable && !writableEnded) {
          if (!stream._writableState || !stream._writableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE$1();
          return callback.call(stream, err);
        }
      };

      var onrequest = function onrequest() {
        stream.req.on('finish', onfinish);
      };

      if (isRequest$3(stream)) {
        stream.on('complete', onfinish);
        stream.on('abort', onclose);
        if (stream.req) onrequest();else stream.on('request', onrequest);
      } else if (writable && !stream._writableState) {
        // legacy streams
        stream.on('end', onlegacyfinish);
        stream.on('close', onlegacyfinish);
      }

      stream.on('end', onend);
      stream.on('finish', onfinish);
      if (opts.error !== false) stream.on('error', onerror);
      stream.on('close', onclose);
      return function () {
        stream.removeListener('complete', onfinish);
        stream.removeListener('abort', onclose);
        stream.removeListener('request', onrequest);
        if (stream.req) stream.req.removeListener('finish', onfinish);
        stream.removeListener('end', onlegacyfinish);
        stream.removeListener('close', onlegacyfinish);
        stream.removeListener('finish', onfinish);
        stream.removeListener('end', onend);
        stream.removeListener('error', onerror);
        stream.removeListener('close', onclose);
      };
    }

    var endOfStream$1 = eos$3;

    var _Object$setPrototypeO$1;

    function _defineProperty$6(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

    var finished$1 = endOfStream$1;

    var kLastResolve$1 = Symbol('lastResolve');
    var kLastReject$1 = Symbol('lastReject');
    var kError$1 = Symbol('error');
    var kEnded$1 = Symbol('ended');
    var kLastPromise$1 = Symbol('lastPromise');
    var kHandlePromise$1 = Symbol('handlePromise');
    var kStream$1 = Symbol('stream');

    function createIterResult$1(value, done) {
      return {
        value: value,
        done: done
      };
    }

    function readAndResolve$1(iter) {
      var resolve = iter[kLastResolve$1];

      if (resolve !== null) {
        var data = iter[kStream$1].read(); // we defer if data is null
        // we can be expecting either 'end' or
        // 'error'

        if (data !== null) {
          iter[kLastPromise$1] = null;
          iter[kLastResolve$1] = null;
          iter[kLastReject$1] = null;
          resolve(createIterResult$1(data, false));
        }
      }
    }

    function onReadable$1(iter) {
      // we wait for the next tick, because it might
      // emit an error with process.nextTick
      process.nextTick(readAndResolve$1, iter);
    }

    function wrapForNext$1(lastPromise, iter) {
      return function (resolve, reject) {
        lastPromise.then(function () {
          if (iter[kEnded$1]) {
            resolve(createIterResult$1(undefined, true));
            return;
          }

          iter[kHandlePromise$1](resolve, reject);
        }, reject);
      };
    }

    var AsyncIteratorPrototype$1 = Object.getPrototypeOf(function () {});
    var ReadableStreamAsyncIteratorPrototype$1 = Object.setPrototypeOf((_Object$setPrototypeO$1 = {
      get stream() {
        return this[kStream$1];
      },

      next: function next() {
        var _this = this;

        // if we have detected an error in the meanwhile
        // reject straight away
        var error = this[kError$1];

        if (error !== null) {
          return Promise.reject(error);
        }

        if (this[kEnded$1]) {
          return Promise.resolve(createIterResult$1(undefined, true));
        }

        if (this[kStream$1].destroyed) {
          // We need to defer via nextTick because if .destroy(err) is
          // called, the error will be emitted via nextTick, and
          // we cannot guarantee that there is no error lingering around
          // waiting to be emitted.
          return new Promise(function (resolve, reject) {
            process.nextTick(function () {
              if (_this[kError$1]) {
                reject(_this[kError$1]);
              } else {
                resolve(createIterResult$1(undefined, true));
              }
            });
          });
        } // if we have multiple next() calls
        // we will wait for the previous Promise to finish
        // this logic is optimized to support for await loops,
        // where next() is only called once at a time


        var lastPromise = this[kLastPromise$1];
        var promise;

        if (lastPromise) {
          promise = new Promise(wrapForNext$1(lastPromise, this));
        } else {
          // fast path needed to support multiple this.push()
          // without triggering the next() queue
          var data = this[kStream$1].read();

          if (data !== null) {
            return Promise.resolve(createIterResult$1(data, false));
          }

          promise = new Promise(this[kHandlePromise$1]);
        }

        this[kLastPromise$1] = promise;
        return promise;
      }
    }, _defineProperty$6(_Object$setPrototypeO$1, Symbol.asyncIterator, function () {
      return this;
    }), _defineProperty$6(_Object$setPrototypeO$1, "return", function _return() {
      var _this2 = this;

      // destroy(err, cb) is a private API
      // we can guarantee we have that here, because we control the
      // Readable class this is attached to
      return new Promise(function (resolve, reject) {
        _this2[kStream$1].destroy(null, function (err) {
          if (err) {
            reject(err);
            return;
          }

          resolve(createIterResult$1(undefined, true));
        });
      });
    }), _Object$setPrototypeO$1), AsyncIteratorPrototype$1);

    var createReadableStreamAsyncIterator$3 = function createReadableStreamAsyncIterator(stream) {
      var _Object$create;

      var iterator = Object.create(ReadableStreamAsyncIteratorPrototype$1, (_Object$create = {}, _defineProperty$6(_Object$create, kStream$1, {
        value: stream,
        writable: true
      }), _defineProperty$6(_Object$create, kLastResolve$1, {
        value: null,
        writable: true
      }), _defineProperty$6(_Object$create, kLastReject$1, {
        value: null,
        writable: true
      }), _defineProperty$6(_Object$create, kError$1, {
        value: null,
        writable: true
      }), _defineProperty$6(_Object$create, kEnded$1, {
        value: stream._readableState.endEmitted,
        writable: true
      }), _defineProperty$6(_Object$create, kHandlePromise$1, {
        value: function value(resolve, reject) {
          var data = iterator[kStream$1].read();

          if (data) {
            iterator[kLastPromise$1] = null;
            iterator[kLastResolve$1] = null;
            iterator[kLastReject$1] = null;
            resolve(createIterResult$1(data, false));
          } else {
            iterator[kLastResolve$1] = resolve;
            iterator[kLastReject$1] = reject;
          }
        },
        writable: true
      }), _Object$create));
      iterator[kLastPromise$1] = null;
      finished$1(stream, function (err) {
        if (err && err.code !== 'ERR_STREAM_PREMATURE_CLOSE') {
          var reject = iterator[kLastReject$1]; // reject if we are waiting for data in the Promise
          // returned by next() and store the error

          if (reject !== null) {
            iterator[kLastPromise$1] = null;
            iterator[kLastResolve$1] = null;
            iterator[kLastReject$1] = null;
            reject(err);
          }

          iterator[kError$1] = err;
          return;
        }

        var resolve = iterator[kLastResolve$1];

        if (resolve !== null) {
          iterator[kLastPromise$1] = null;
          iterator[kLastResolve$1] = null;
          iterator[kLastReject$1] = null;
          resolve(createIterResult$1(undefined, true));
        }

        iterator[kEnded$1] = true;
      });
      stream.on('readable', onReadable$1.bind(null, iterator));
      return iterator;
    };

    var async_iterator$1 = createReadableStreamAsyncIterator$3;

    function asyncGeneratorStep$1(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

    function _asyncToGenerator$1(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep$1(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep$1(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

    function ownKeys$2(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

    function _objectSpread$2(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$2(Object(source), true).forEach(function (key) { _defineProperty$5(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$2(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

    function _defineProperty$5(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

    var ERR_INVALID_ARG_TYPE$4 = errors$1.codes.ERR_INVALID_ARG_TYPE;

    function from$9(Readable, iterable, opts) {
      var iterator;

      if (iterable && typeof iterable.next === 'function') {
        iterator = iterable;
      } else if (iterable && iterable[Symbol.asyncIterator]) iterator = iterable[Symbol.asyncIterator]();else if (iterable && iterable[Symbol.iterator]) iterator = iterable[Symbol.iterator]();else throw new ERR_INVALID_ARG_TYPE$4('iterable', ['Iterable'], iterable);

      var readable = new Readable(_objectSpread$2({
        objectMode: true
      }, opts)); // Reading boolean to protect against _read
      // being called before last iteration completion.

      var reading = false;

      readable._read = function () {
        if (!reading) {
          reading = true;
          next();
        }
      };

      function next() {
        return _next2.apply(this, arguments);
      }

      function _next2() {
        _next2 = _asyncToGenerator$1(function* () {
          try {
            var _ref = yield iterator.next(),
                value = _ref.value,
                done = _ref.done;

            if (done) {
              readable.push(null);
            } else if (readable.push((yield value))) {
              next();
            } else {
              reading = false;
            }
          } catch (err) {
            readable.destroy(err);
          }
        });
        return _next2.apply(this, arguments);
      }

      return readable;
    }

    var from_1$1 = from$9;

    var _stream_readable$1 = Readable$2;
    /*<replacement>*/

    var Duplex$5;
    /*</replacement>*/

    Readable$2.ReadableState = ReadableState$1;
    /*<replacement>*/

    require$$2__default["default"].EventEmitter;

    var EElistenerCount$1 = function EElistenerCount(emitter, type) {
      return emitter.listeners(type).length;
    };
    /*</replacement>*/

    /*<replacement>*/


    var Stream$5 = stream$2;
    /*</replacement>*/


    var Buffer$n = require$$0__default$2["default"].Buffer;

    var OurUint8Array$2 = commonjsGlobal.Uint8Array || function () {};

    function _uint8ArrayToBuffer$2(chunk) {
      return Buffer$n.from(chunk);
    }

    function _isUint8Array$2(obj) {
      return Buffer$n.isBuffer(obj) || obj instanceof OurUint8Array$2;
    }
    /*<replacement>*/


    var debugUtil$1 = require$$0__default["default"];

    var debug$b;

    if (debugUtil$1 && debugUtil$1.debuglog) {
      debug$b = debugUtil$1.debuglog('stream');
    } else {
      debug$b = function debug() {};
    }
    /*</replacement>*/


    var BufferList$5 = buffer_list$1;

    var destroyImpl$2 = destroy_1$1;

    var _require$3 = state$1,
        getHighWaterMark$3 = _require$3.getHighWaterMark;

    var _require$codes$6 = errors$1.codes,
        ERR_INVALID_ARG_TYPE$3 = _require$codes$6.ERR_INVALID_ARG_TYPE,
        ERR_STREAM_PUSH_AFTER_EOF$1 = _require$codes$6.ERR_STREAM_PUSH_AFTER_EOF,
        ERR_METHOD_NOT_IMPLEMENTED$4 = _require$codes$6.ERR_METHOD_NOT_IMPLEMENTED,
        ERR_STREAM_UNSHIFT_AFTER_END_EVENT$1 = _require$codes$6.ERR_STREAM_UNSHIFT_AFTER_END_EVENT; // Lazy loaded to improve the startup performance.


    var StringDecoder$4;
    var createReadableStreamAsyncIterator$2;
    var from$8;

    inherits$4.exports(Readable$2, Stream$5);

    var errorOrDestroy$3 = destroyImpl$2.errorOrDestroy;
    var kProxyEvents$1 = ['error', 'close', 'destroy', 'pause', 'resume'];

    function prependListener$1(emitter, event, fn) {
      // Sadly this is not cacheable as some libraries bundle their own
      // event emitter implementation with them.
      if (typeof emitter.prependListener === 'function') return emitter.prependListener(event, fn); // This is a hack to make sure that our error handler is attached before any
      // userland ones.  NEVER DO THIS. This is here only because this code needs
      // to continue to work with older versions of Node.js that do not include
      // the prependListener() method. The goal is to eventually remove this hack.

      if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (Array.isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];
    }

    function ReadableState$1(options, stream, isDuplex) {
      Duplex$5 = Duplex$5 || _stream_duplex$1;
      options = options || {}; // Duplex streams are both readable and writable, but share
      // the same options object.
      // However, some cases require setting options to different
      // values for the readable and the writable sides of the duplex stream.
      // These options can be provided separately as readableXXX and writableXXX.

      if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof Duplex$5; // object stream flag. Used to make read(n) ignore n and to
      // make all the buffer merging and length checks go away

      this.objectMode = !!options.objectMode;
      if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode; // the point at which it stops calling _read() to fill the buffer
      // Note: 0 is a valid value, means "don't call _read preemptively ever"

      this.highWaterMark = getHighWaterMark$3(this, options, 'readableHighWaterMark', isDuplex); // A linked list is used to store data chunks instead of an array because the
      // linked list can remove elements from the beginning faster than
      // array.shift()

      this.buffer = new BufferList$5();
      this.length = 0;
      this.pipes = null;
      this.pipesCount = 0;
      this.flowing = null;
      this.ended = false;
      this.endEmitted = false;
      this.reading = false; // a flag to be able to tell if the event 'readable'/'data' is emitted
      // immediately, or on a later tick.  We set this to true at first, because
      // any actions that shouldn't happen until "later" should generally also
      // not happen before the first read call.

      this.sync = true; // whenever we return null, then we set a flag to say
      // that we're awaiting a 'readable' event emission.

      this.needReadable = false;
      this.emittedReadable = false;
      this.readableListening = false;
      this.resumeScheduled = false;
      this.paused = true; // Should close be emitted on destroy. Defaults to true.

      this.emitClose = options.emitClose !== false; // Should .destroy() be called after 'end' (and potentially 'finish')

      this.autoDestroy = !!options.autoDestroy; // has it been destroyed

      this.destroyed = false; // Crypto is kind of old and crusty.  Historically, its default string
      // encoding is 'binary' so we have to make this configurable.
      // Everything else in the universe uses 'utf8', though.

      this.defaultEncoding = options.defaultEncoding || 'utf8'; // the number of writers that are awaiting a drain event in .pipe()s

      this.awaitDrain = 0; // if true, a maybeReadMore has been scheduled

      this.readingMore = false;
      this.decoder = null;
      this.encoding = null;

      if (options.encoding) {
        if (!StringDecoder$4) StringDecoder$4 = string_decoder$1.StringDecoder;
        this.decoder = new StringDecoder$4(options.encoding);
        this.encoding = options.encoding;
      }
    }

    function Readable$2(options) {
      Duplex$5 = Duplex$5 || _stream_duplex$1;
      if (!(this instanceof Readable$2)) return new Readable$2(options); // Checking for a Stream.Duplex instance is faster here instead of inside
      // the ReadableState constructor, at least with V8 6.5

      var isDuplex = this instanceof Duplex$5;
      this._readableState = new ReadableState$1(options, this, isDuplex); // legacy

      this.readable = true;

      if (options) {
        if (typeof options.read === 'function') this._read = options.read;
        if (typeof options.destroy === 'function') this._destroy = options.destroy;
      }

      Stream$5.call(this);
    }

    Object.defineProperty(Readable$2.prototype, 'destroyed', {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get() {
        if (this._readableState === undefined) {
          return false;
        }

        return this._readableState.destroyed;
      },
      set: function set(value) {
        // we ignore the value if the stream
        // has not been initialized yet
        if (!this._readableState) {
          return;
        } // backward compatibility, the user is explicitly
        // managing destroyed


        this._readableState.destroyed = value;
      }
    });
    Readable$2.prototype.destroy = destroyImpl$2.destroy;
    Readable$2.prototype._undestroy = destroyImpl$2.undestroy;

    Readable$2.prototype._destroy = function (err, cb) {
      cb(err);
    }; // Manually shove something into the read() buffer.
    // This returns true if the highWaterMark has not been hit yet,
    // similar to how Writable.write() returns true if you should
    // write() some more.


    Readable$2.prototype.push = function (chunk, encoding) {
      var state = this._readableState;
      var skipChunkCheck;

      if (!state.objectMode) {
        if (typeof chunk === 'string') {
          encoding = encoding || state.defaultEncoding;

          if (encoding !== state.encoding) {
            chunk = Buffer$n.from(chunk, encoding);
            encoding = '';
          }

          skipChunkCheck = true;
        }
      } else {
        skipChunkCheck = true;
      }

      return readableAddChunk$1(this, chunk, encoding, false, skipChunkCheck);
    }; // Unshift should *always* be something directly out of read()


    Readable$2.prototype.unshift = function (chunk) {
      return readableAddChunk$1(this, chunk, null, true, false);
    };

    function readableAddChunk$1(stream, chunk, encoding, addToFront, skipChunkCheck) {
      debug$b('readableAddChunk', chunk);
      var state = stream._readableState;

      if (chunk === null) {
        state.reading = false;
        onEofChunk$1(stream, state);
      } else {
        var er;
        if (!skipChunkCheck) er = chunkInvalid$1(state, chunk);

        if (er) {
          errorOrDestroy$3(stream, er);
        } else if (state.objectMode || chunk && chunk.length > 0) {
          if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer$n.prototype) {
            chunk = _uint8ArrayToBuffer$2(chunk);
          }

          if (addToFront) {
            if (state.endEmitted) errorOrDestroy$3(stream, new ERR_STREAM_UNSHIFT_AFTER_END_EVENT$1());else addChunk$1(stream, state, chunk, true);
          } else if (state.ended) {
            errorOrDestroy$3(stream, new ERR_STREAM_PUSH_AFTER_EOF$1());
          } else if (state.destroyed) {
            return false;
          } else {
            state.reading = false;

            if (state.decoder && !encoding) {
              chunk = state.decoder.write(chunk);
              if (state.objectMode || chunk.length !== 0) addChunk$1(stream, state, chunk, false);else maybeReadMore$1(stream, state);
            } else {
              addChunk$1(stream, state, chunk, false);
            }
          }
        } else if (!addToFront) {
          state.reading = false;
          maybeReadMore$1(stream, state);
        }
      } // We can push more data if we are below the highWaterMark.
      // Also, if we have no data yet, we can stand some more bytes.
      // This is to work around cases where hwm=0, such as the repl.


      return !state.ended && (state.length < state.highWaterMark || state.length === 0);
    }

    function addChunk$1(stream, state, chunk, addToFront) {
      if (state.flowing && state.length === 0 && !state.sync) {
        state.awaitDrain = 0;
        stream.emit('data', chunk);
      } else {
        // update the buffer info.
        state.length += state.objectMode ? 1 : chunk.length;
        if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);
        if (state.needReadable) emitReadable$1(stream);
      }

      maybeReadMore$1(stream, state);
    }

    function chunkInvalid$1(state, chunk) {
      var er;

      if (!_isUint8Array$2(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
        er = new ERR_INVALID_ARG_TYPE$3('chunk', ['string', 'Buffer', 'Uint8Array'], chunk);
      }

      return er;
    }

    Readable$2.prototype.isPaused = function () {
      return this._readableState.flowing === false;
    }; // backwards compatibility.


    Readable$2.prototype.setEncoding = function (enc) {
      if (!StringDecoder$4) StringDecoder$4 = string_decoder$1.StringDecoder;
      var decoder = new StringDecoder$4(enc);
      this._readableState.decoder = decoder; // If setEncoding(null), decoder.encoding equals utf8

      this._readableState.encoding = this._readableState.decoder.encoding; // Iterate over current buffer to convert already stored Buffers:

      var p = this._readableState.buffer.head;
      var content = '';

      while (p !== null) {
        content += decoder.write(p.data);
        p = p.next;
      }

      this._readableState.buffer.clear();

      if (content !== '') this._readableState.buffer.push(content);
      this._readableState.length = content.length;
      return this;
    }; // Don't raise the hwm > 1GB


    var MAX_HWM$1 = 0x40000000;

    function computeNewHighWaterMark$1(n) {
      if (n >= MAX_HWM$1) {
        // TODO(ronag): Throw ERR_VALUE_OUT_OF_RANGE.
        n = MAX_HWM$1;
      } else {
        // Get the next highest power of 2 to prevent increasing hwm excessively in
        // tiny amounts
        n--;
        n |= n >>> 1;
        n |= n >>> 2;
        n |= n >>> 4;
        n |= n >>> 8;
        n |= n >>> 16;
        n++;
      }

      return n;
    } // This function is designed to be inlinable, so please take care when making
    // changes to the function body.


    function howMuchToRead$1(n, state) {
      if (n <= 0 || state.length === 0 && state.ended) return 0;
      if (state.objectMode) return 1;

      if (n !== n) {
        // Only flow one buffer at a time
        if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
      } // If we're asking for more than the current hwm, then raise the hwm.


      if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark$1(n);
      if (n <= state.length) return n; // Don't have enough

      if (!state.ended) {
        state.needReadable = true;
        return 0;
      }

      return state.length;
    } // you can override either this method, or the async _read(n) below.


    Readable$2.prototype.read = function (n) {
      debug$b('read', n);
      n = parseInt(n, 10);
      var state = this._readableState;
      var nOrig = n;
      if (n !== 0) state.emittedReadable = false; // if we're doing read(0) to trigger a readable event, but we
      // already have a bunch of data in the buffer, then just trigger
      // the 'readable' event and move on.

      if (n === 0 && state.needReadable && ((state.highWaterMark !== 0 ? state.length >= state.highWaterMark : state.length > 0) || state.ended)) {
        debug$b('read: emitReadable', state.length, state.ended);
        if (state.length === 0 && state.ended) endReadable$1(this);else emitReadable$1(this);
        return null;
      }

      n = howMuchToRead$1(n, state); // if we've ended, and we're now clear, then finish it up.

      if (n === 0 && state.ended) {
        if (state.length === 0) endReadable$1(this);
        return null;
      } // All the actual chunk generation logic needs to be
      // *below* the call to _read.  The reason is that in certain
      // synthetic stream cases, such as passthrough streams, _read
      // may be a completely synchronous operation which may change
      // the state of the read buffer, providing enough data when
      // before there was *not* enough.
      //
      // So, the steps are:
      // 1. Figure out what the state of things will be after we do
      // a read from the buffer.
      //
      // 2. If that resulting state will trigger a _read, then call _read.
      // Note that this may be asynchronous, or synchronous.  Yes, it is
      // deeply ugly to write APIs this way, but that still doesn't mean
      // that the Readable class should behave improperly, as streams are
      // designed to be sync/async agnostic.
      // Take note if the _read call is sync or async (ie, if the read call
      // has returned yet), so that we know whether or not it's safe to emit
      // 'readable' etc.
      //
      // 3. Actually pull the requested chunks out of the buffer and return.
      // if we need a readable event, then we need to do some reading.


      var doRead = state.needReadable;
      debug$b('need readable', doRead); // if we currently have less than the highWaterMark, then also read some

      if (state.length === 0 || state.length - n < state.highWaterMark) {
        doRead = true;
        debug$b('length less than watermark', doRead);
      } // however, if we've ended, then there's no point, and if we're already
      // reading, then it's unnecessary.


      if (state.ended || state.reading) {
        doRead = false;
        debug$b('reading or ended', doRead);
      } else if (doRead) {
        debug$b('do read');
        state.reading = true;
        state.sync = true; // if the length is currently zero, then we *need* a readable event.

        if (state.length === 0) state.needReadable = true; // call internal read method

        this._read(state.highWaterMark);

        state.sync = false; // If _read pushed data synchronously, then `reading` will be false,
        // and we need to re-evaluate how much data we can return to the user.

        if (!state.reading) n = howMuchToRead$1(nOrig, state);
      }

      var ret;
      if (n > 0) ret = fromList$1(n, state);else ret = null;

      if (ret === null) {
        state.needReadable = state.length <= state.highWaterMark;
        n = 0;
      } else {
        state.length -= n;
        state.awaitDrain = 0;
      }

      if (state.length === 0) {
        // If we have nothing in the buffer, then we want to know
        // as soon as we *do* get something into the buffer.
        if (!state.ended) state.needReadable = true; // If we tried to read() past the EOF, then emit end on the next tick.

        if (nOrig !== n && state.ended) endReadable$1(this);
      }

      if (ret !== null) this.emit('data', ret);
      return ret;
    };

    function onEofChunk$1(stream, state) {
      debug$b('onEofChunk');
      if (state.ended) return;

      if (state.decoder) {
        var chunk = state.decoder.end();

        if (chunk && chunk.length) {
          state.buffer.push(chunk);
          state.length += state.objectMode ? 1 : chunk.length;
        }
      }

      state.ended = true;

      if (state.sync) {
        // if we are sync, wait until next tick to emit the data.
        // Otherwise we risk emitting data in the flow()
        // the readable code triggers during a read() call
        emitReadable$1(stream);
      } else {
        // emit 'readable' now to make sure it gets picked up.
        state.needReadable = false;

        if (!state.emittedReadable) {
          state.emittedReadable = true;
          emitReadable_$1(stream);
        }
      }
    } // Don't emit readable right away in sync mode, because this can trigger
    // another read() call => stack overflow.  This way, it might trigger
    // a nextTick recursion warning, but that's not so bad.


    function emitReadable$1(stream) {
      var state = stream._readableState;
      debug$b('emitReadable', state.needReadable, state.emittedReadable);
      state.needReadable = false;

      if (!state.emittedReadable) {
        debug$b('emitReadable', state.flowing);
        state.emittedReadable = true;
        process.nextTick(emitReadable_$1, stream);
      }
    }

    function emitReadable_$1(stream) {
      var state = stream._readableState;
      debug$b('emitReadable_', state.destroyed, state.length, state.ended);

      if (!state.destroyed && (state.length || state.ended)) {
        stream.emit('readable');
        state.emittedReadable = false;
      } // The stream needs another readable event if
      // 1. It is not flowing, as the flow mechanism will take
      //    care of it.
      // 2. It is not ended.
      // 3. It is below the highWaterMark, so we can schedule
      //    another readable later.


      state.needReadable = !state.flowing && !state.ended && state.length <= state.highWaterMark;
      flow$1(stream);
    } // at this point, the user has presumably seen the 'readable' event,
    // and called read() to consume some data.  that may have triggered
    // in turn another _read(n) call, in which case reading = true if
    // it's in progress.
    // However, if we're not ended, or reading, and the length < hwm,
    // then go ahead and try to read some more preemptively.


    function maybeReadMore$1(stream, state) {
      if (!state.readingMore) {
        state.readingMore = true;
        process.nextTick(maybeReadMore_$1, stream, state);
      }
    }

    function maybeReadMore_$1(stream, state) {
      // Attempt to read more data if we should.
      //
      // The conditions for reading more data are (one of):
      // - Not enough data buffered (state.length < state.highWaterMark). The loop
      //   is responsible for filling the buffer with enough data if such data
      //   is available. If highWaterMark is 0 and we are not in the flowing mode
      //   we should _not_ attempt to buffer any extra data. We'll get more data
      //   when the stream consumer calls read() instead.
      // - No data in the buffer, and the stream is in flowing mode. In this mode
      //   the loop below is responsible for ensuring read() is called. Failing to
      //   call read here would abort the flow and there's no other mechanism for
      //   continuing the flow if the stream consumer has just subscribed to the
      //   'data' event.
      //
      // In addition to the above conditions to keep reading data, the following
      // conditions prevent the data from being read:
      // - The stream has ended (state.ended).
      // - There is already a pending 'read' operation (state.reading). This is a
      //   case where the the stream has called the implementation defined _read()
      //   method, but they are processing the call asynchronously and have _not_
      //   called push() with new data. In this case we skip performing more
      //   read()s. The execution ends in this method again after the _read() ends
      //   up calling push() with more data.
      while (!state.reading && !state.ended && (state.length < state.highWaterMark || state.flowing && state.length === 0)) {
        var len = state.length;
        debug$b('maybeReadMore read 0');
        stream.read(0);
        if (len === state.length) // didn't get any data, stop spinning.
          break;
      }

      state.readingMore = false;
    } // abstract method.  to be overridden in specific implementation classes.
    // call cb(er, data) where data is <= n in length.
    // for virtual (non-string, non-buffer) streams, "length" is somewhat
    // arbitrary, and perhaps not very meaningful.


    Readable$2.prototype._read = function (n) {
      errorOrDestroy$3(this, new ERR_METHOD_NOT_IMPLEMENTED$4('_read()'));
    };

    Readable$2.prototype.pipe = function (dest, pipeOpts) {
      var src = this;
      var state = this._readableState;

      switch (state.pipesCount) {
        case 0:
          state.pipes = dest;
          break;

        case 1:
          state.pipes = [state.pipes, dest];
          break;

        default:
          state.pipes.push(dest);
          break;
      }

      state.pipesCount += 1;
      debug$b('pipe count=%d opts=%j', state.pipesCount, pipeOpts);
      var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;
      var endFn = doEnd ? onend : unpipe;
      if (state.endEmitted) process.nextTick(endFn);else src.once('end', endFn);
      dest.on('unpipe', onunpipe);

      function onunpipe(readable, unpipeInfo) {
        debug$b('onunpipe');

        if (readable === src) {
          if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
            unpipeInfo.hasUnpiped = true;
            cleanup();
          }
        }
      }

      function onend() {
        debug$b('onend');
        dest.end();
      } // when the dest drains, it reduces the awaitDrain counter
      // on the source.  This would be more elegant with a .once()
      // handler in flow(), but adding and removing repeatedly is
      // too slow.


      var ondrain = pipeOnDrain$1(src);
      dest.on('drain', ondrain);
      var cleanedUp = false;

      function cleanup() {
        debug$b('cleanup'); // cleanup event handlers once the pipe is broken

        dest.removeListener('close', onclose);
        dest.removeListener('finish', onfinish);
        dest.removeListener('drain', ondrain);
        dest.removeListener('error', onerror);
        dest.removeListener('unpipe', onunpipe);
        src.removeListener('end', onend);
        src.removeListener('end', unpipe);
        src.removeListener('data', ondata);
        cleanedUp = true; // if the reader is waiting for a drain event from this
        // specific writer, then it would cause it to never start
        // flowing again.
        // So, if this is awaiting a drain, then we just call it now.
        // If we don't know, then assume that we are waiting for one.

        if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
      }

      src.on('data', ondata);

      function ondata(chunk) {
        debug$b('ondata');
        var ret = dest.write(chunk);
        debug$b('dest.write', ret);

        if (ret === false) {
          // If the user unpiped during `dest.write()`, it is possible
          // to get stuck in a permanently paused state if that write
          // also returned false.
          // => Check whether `dest` is still a piping destination.
          if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf$1(state.pipes, dest) !== -1) && !cleanedUp) {
            debug$b('false write response, pause', state.awaitDrain);
            state.awaitDrain++;
          }

          src.pause();
        }
      } // if the dest has an error, then stop piping into it.
      // however, don't suppress the throwing behavior for this.


      function onerror(er) {
        debug$b('onerror', er);
        unpipe();
        dest.removeListener('error', onerror);
        if (EElistenerCount$1(dest, 'error') === 0) errorOrDestroy$3(dest, er);
      } // Make sure our error handler is attached before userland ones.


      prependListener$1(dest, 'error', onerror); // Both close and finish should trigger unpipe, but only once.

      function onclose() {
        dest.removeListener('finish', onfinish);
        unpipe();
      }

      dest.once('close', onclose);

      function onfinish() {
        debug$b('onfinish');
        dest.removeListener('close', onclose);
        unpipe();
      }

      dest.once('finish', onfinish);

      function unpipe() {
        debug$b('unpipe');
        src.unpipe(dest);
      } // tell the dest that it's being piped to


      dest.emit('pipe', src); // start the flow if it hasn't been started already.

      if (!state.flowing) {
        debug$b('pipe resume');
        src.resume();
      }

      return dest;
    };

    function pipeOnDrain$1(src) {
      return function pipeOnDrainFunctionResult() {
        var state = src._readableState;
        debug$b('pipeOnDrain', state.awaitDrain);
        if (state.awaitDrain) state.awaitDrain--;

        if (state.awaitDrain === 0 && EElistenerCount$1(src, 'data')) {
          state.flowing = true;
          flow$1(src);
        }
      };
    }

    Readable$2.prototype.unpipe = function (dest) {
      var state = this._readableState;
      var unpipeInfo = {
        hasUnpiped: false
      }; // if we're not piping anywhere, then do nothing.

      if (state.pipesCount === 0) return this; // just one destination.  most common case.

      if (state.pipesCount === 1) {
        // passed in one, but it's not the right one.
        if (dest && dest !== state.pipes) return this;
        if (!dest) dest = state.pipes; // got a match.

        state.pipes = null;
        state.pipesCount = 0;
        state.flowing = false;
        if (dest) dest.emit('unpipe', this, unpipeInfo);
        return this;
      } // slow case. multiple pipe destinations.


      if (!dest) {
        // remove all.
        var dests = state.pipes;
        var len = state.pipesCount;
        state.pipes = null;
        state.pipesCount = 0;
        state.flowing = false;

        for (var i = 0; i < len; i++) {
          dests[i].emit('unpipe', this, {
            hasUnpiped: false
          });
        }

        return this;
      } // try to find the right one.


      var index = indexOf$1(state.pipes, dest);
      if (index === -1) return this;
      state.pipes.splice(index, 1);
      state.pipesCount -= 1;
      if (state.pipesCount === 1) state.pipes = state.pipes[0];
      dest.emit('unpipe', this, unpipeInfo);
      return this;
    }; // set up data events if they are asked for
    // Ensure readable listeners eventually get something


    Readable$2.prototype.on = function (ev, fn) {
      var res = Stream$5.prototype.on.call(this, ev, fn);
      var state = this._readableState;

      if (ev === 'data') {
        // update readableListening so that resume() may be a no-op
        // a few lines down. This is needed to support once('readable').
        state.readableListening = this.listenerCount('readable') > 0; // Try start flowing on next tick if stream isn't explicitly paused

        if (state.flowing !== false) this.resume();
      } else if (ev === 'readable') {
        if (!state.endEmitted && !state.readableListening) {
          state.readableListening = state.needReadable = true;
          state.flowing = false;
          state.emittedReadable = false;
          debug$b('on readable', state.length, state.reading);

          if (state.length) {
            emitReadable$1(this);
          } else if (!state.reading) {
            process.nextTick(nReadingNextTick$1, this);
          }
        }
      }

      return res;
    };

    Readable$2.prototype.addListener = Readable$2.prototype.on;

    Readable$2.prototype.removeListener = function (ev, fn) {
      var res = Stream$5.prototype.removeListener.call(this, ev, fn);

      if (ev === 'readable') {
        // We need to check if there is someone still listening to
        // readable and reset the state. However this needs to happen
        // after readable has been emitted but before I/O (nextTick) to
        // support once('readable', fn) cycles. This means that calling
        // resume within the same tick will have no
        // effect.
        process.nextTick(updateReadableListening$1, this);
      }

      return res;
    };

    Readable$2.prototype.removeAllListeners = function (ev) {
      var res = Stream$5.prototype.removeAllListeners.apply(this, arguments);

      if (ev === 'readable' || ev === undefined) {
        // We need to check if there is someone still listening to
        // readable and reset the state. However this needs to happen
        // after readable has been emitted but before I/O (nextTick) to
        // support once('readable', fn) cycles. This means that calling
        // resume within the same tick will have no
        // effect.
        process.nextTick(updateReadableListening$1, this);
      }

      return res;
    };

    function updateReadableListening$1(self) {
      var state = self._readableState;
      state.readableListening = self.listenerCount('readable') > 0;

      if (state.resumeScheduled && !state.paused) {
        // flowing needs to be set to true now, otherwise
        // the upcoming resume will not flow.
        state.flowing = true; // crude way to check if we should resume
      } else if (self.listenerCount('data') > 0) {
        self.resume();
      }
    }

    function nReadingNextTick$1(self) {
      debug$b('readable nexttick read 0');
      self.read(0);
    } // pause() and resume() are remnants of the legacy readable stream API
    // If the user uses them, then switch into old mode.


    Readable$2.prototype.resume = function () {
      var state = this._readableState;

      if (!state.flowing) {
        debug$b('resume'); // we flow only if there is no one listening
        // for readable, but we still have to call
        // resume()

        state.flowing = !state.readableListening;
        resume$1(this, state);
      }

      state.paused = false;
      return this;
    };

    function resume$1(stream, state) {
      if (!state.resumeScheduled) {
        state.resumeScheduled = true;
        process.nextTick(resume_$1, stream, state);
      }
    }

    function resume_$1(stream, state) {
      debug$b('resume', state.reading);

      if (!state.reading) {
        stream.read(0);
      }

      state.resumeScheduled = false;
      stream.emit('resume');
      flow$1(stream);
      if (state.flowing && !state.reading) stream.read(0);
    }

    Readable$2.prototype.pause = function () {
      debug$b('call pause flowing=%j', this._readableState.flowing);

      if (this._readableState.flowing !== false) {
        debug$b('pause');
        this._readableState.flowing = false;
        this.emit('pause');
      }

      this._readableState.paused = true;
      return this;
    };

    function flow$1(stream) {
      var state = stream._readableState;
      debug$b('flow', state.flowing);

      while (state.flowing && stream.read() !== null) {
      }
    } // wrap an old-style stream as the async data source.
    // This is *not* part of the readable stream interface.
    // It is an ugly unfortunate mess of history.


    Readable$2.prototype.wrap = function (stream) {
      var _this = this;

      var state = this._readableState;
      var paused = false;
      stream.on('end', function () {
        debug$b('wrapped end');

        if (state.decoder && !state.ended) {
          var chunk = state.decoder.end();
          if (chunk && chunk.length) _this.push(chunk);
        }

        _this.push(null);
      });
      stream.on('data', function (chunk) {
        debug$b('wrapped data');
        if (state.decoder) chunk = state.decoder.write(chunk); // don't skip over falsy values in objectMode

        if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;

        var ret = _this.push(chunk);

        if (!ret) {
          paused = true;
          stream.pause();
        }
      }); // proxy all the other methods.
      // important when wrapping filters and duplexes.

      for (var i in stream) {
        if (this[i] === undefined && typeof stream[i] === 'function') {
          this[i] = function methodWrap(method) {
            return function methodWrapReturnFunction() {
              return stream[method].apply(stream, arguments);
            };
          }(i);
        }
      } // proxy certain important events.


      for (var n = 0; n < kProxyEvents$1.length; n++) {
        stream.on(kProxyEvents$1[n], this.emit.bind(this, kProxyEvents$1[n]));
      } // when we try to consume some more bytes, simply unpause the
      // underlying stream.


      this._read = function (n) {
        debug$b('wrapped _read', n);

        if (paused) {
          paused = false;
          stream.resume();
        }
      };

      return this;
    };

    if (typeof Symbol === 'function') {
      Readable$2.prototype[Symbol.asyncIterator] = function () {
        if (createReadableStreamAsyncIterator$2 === undefined) {
          createReadableStreamAsyncIterator$2 = async_iterator$1;
        }

        return createReadableStreamAsyncIterator$2(this);
      };
    }

    Object.defineProperty(Readable$2.prototype, 'readableHighWaterMark', {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get() {
        return this._readableState.highWaterMark;
      }
    });
    Object.defineProperty(Readable$2.prototype, 'readableBuffer', {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get() {
        return this._readableState && this._readableState.buffer;
      }
    });
    Object.defineProperty(Readable$2.prototype, 'readableFlowing', {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get() {
        return this._readableState.flowing;
      },
      set: function set(state) {
        if (this._readableState) {
          this._readableState.flowing = state;
        }
      }
    }); // exposed for testing purposes only.

    Readable$2._fromList = fromList$1;
    Object.defineProperty(Readable$2.prototype, 'readableLength', {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get() {
        return this._readableState.length;
      }
    }); // Pluck off n bytes from an array of buffers.
    // Length is the combined lengths of all the buffers in the list.
    // This function is designed to be inlinable, so please take care when making
    // changes to the function body.

    function fromList$1(n, state) {
      // nothing buffered
      if (state.length === 0) return null;
      var ret;
      if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
        // read it all, truncate the list
        if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.first();else ret = state.buffer.concat(state.length);
        state.buffer.clear();
      } else {
        // read part of list
        ret = state.buffer.consume(n, state.decoder);
      }
      return ret;
    }

    function endReadable$1(stream) {
      var state = stream._readableState;
      debug$b('endReadable', state.endEmitted);

      if (!state.endEmitted) {
        state.ended = true;
        process.nextTick(endReadableNT$1, state, stream);
      }
    }

    function endReadableNT$1(state, stream) {
      debug$b('endReadableNT', state.endEmitted, state.length); // Check that we didn't get one last unshift.

      if (!state.endEmitted && state.length === 0) {
        state.endEmitted = true;
        stream.readable = false;
        stream.emit('end');

        if (state.autoDestroy) {
          // In case of duplex streams we need a way to detect
          // if the writable side is ready for autoDestroy as well
          var wState = stream._writableState;

          if (!wState || wState.autoDestroy && wState.finished) {
            stream.destroy();
          }
        }
      }
    }

    if (typeof Symbol === 'function') {
      Readable$2.from = function (iterable, opts) {
        if (from$8 === undefined) {
          from$8 = from_1$1;
        }

        return from$8(Readable$2, iterable, opts);
      };
    }

    function indexOf$1(xs, x) {
      for (var i = 0, l = xs.length; i < l; i++) {
        if (xs[i] === x) return i;
      }

      return -1;
    }

    var _stream_transform$1 = Transform$5;

    var _require$codes$5 = errors$1.codes,
        ERR_METHOD_NOT_IMPLEMENTED$3 = _require$codes$5.ERR_METHOD_NOT_IMPLEMENTED,
        ERR_MULTIPLE_CALLBACK$2 = _require$codes$5.ERR_MULTIPLE_CALLBACK,
        ERR_TRANSFORM_ALREADY_TRANSFORMING$1 = _require$codes$5.ERR_TRANSFORM_ALREADY_TRANSFORMING,
        ERR_TRANSFORM_WITH_LENGTH_0$1 = _require$codes$5.ERR_TRANSFORM_WITH_LENGTH_0;

    var Duplex$4 = _stream_duplex$1;

    inherits$4.exports(Transform$5, Duplex$4);

    function afterTransform$1(er, data) {
      var ts = this._transformState;
      ts.transforming = false;
      var cb = ts.writecb;

      if (cb === null) {
        return this.emit('error', new ERR_MULTIPLE_CALLBACK$2());
      }

      ts.writechunk = null;
      ts.writecb = null;
      if (data != null) // single equals check for both `null` and `undefined`
        this.push(data);
      cb(er);
      var rs = this._readableState;
      rs.reading = false;

      if (rs.needReadable || rs.length < rs.highWaterMark) {
        this._read(rs.highWaterMark);
      }
    }

    function Transform$5(options) {
      if (!(this instanceof Transform$5)) return new Transform$5(options);
      Duplex$4.call(this, options);
      this._transformState = {
        afterTransform: afterTransform$1.bind(this),
        needTransform: false,
        transforming: false,
        writecb: null,
        writechunk: null,
        writeencoding: null
      }; // start out asking for a readable event once data is transformed.

      this._readableState.needReadable = true; // we have implemented the _read method, and done the other things
      // that Readable wants before the first _read call, so unset the
      // sync guard flag.

      this._readableState.sync = false;

      if (options) {
        if (typeof options.transform === 'function') this._transform = options.transform;
        if (typeof options.flush === 'function') this._flush = options.flush;
      } // When the writable side finishes, then flush out anything remaining.


      this.on('prefinish', prefinish$2);
    }

    function prefinish$2() {
      var _this = this;

      if (typeof this._flush === 'function' && !this._readableState.destroyed) {
        this._flush(function (er, data) {
          done$1(_this, er, data);
        });
      } else {
        done$1(this, null, null);
      }
    }

    Transform$5.prototype.push = function (chunk, encoding) {
      this._transformState.needTransform = false;
      return Duplex$4.prototype.push.call(this, chunk, encoding);
    }; // This is the part where you do stuff!
    // override this function in implementation classes.
    // 'chunk' is an input chunk.
    //
    // Call `push(newChunk)` to pass along transformed output
    // to the readable side.  You may call 'push' zero or more times.
    //
    // Call `cb(err)` when you are done with this chunk.  If you pass
    // an error, then that'll put the hurt on the whole operation.  If you
    // never call cb(), then you'll never get another chunk.


    Transform$5.prototype._transform = function (chunk, encoding, cb) {
      cb(new ERR_METHOD_NOT_IMPLEMENTED$3('_transform()'));
    };

    Transform$5.prototype._write = function (chunk, encoding, cb) {
      var ts = this._transformState;
      ts.writecb = cb;
      ts.writechunk = chunk;
      ts.writeencoding = encoding;

      if (!ts.transforming) {
        var rs = this._readableState;
        if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
      }
    }; // Doesn't matter what the args are here.
    // _transform does all the work.
    // That we got here means that the readable side wants more data.


    Transform$5.prototype._read = function (n) {
      var ts = this._transformState;

      if (ts.writechunk !== null && !ts.transforming) {
        ts.transforming = true;

        this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
      } else {
        // mark that we need a transform, so that any data that comes in
        // will get processed, now that we've asked for it.
        ts.needTransform = true;
      }
    };

    Transform$5.prototype._destroy = function (err, cb) {
      Duplex$4.prototype._destroy.call(this, err, function (err2) {
        cb(err2);
      });
    };

    function done$1(stream, er, data) {
      if (er) return stream.emit('error', er);
      if (data != null) // single equals check for both `null` and `undefined`
        stream.push(data); // TODO(BridgeAR): Write a test for these two error cases
      // if there's nothing in the write buffer, then that means
      // that nothing more will ever be provided

      if (stream._writableState.length) throw new ERR_TRANSFORM_WITH_LENGTH_0$1();
      if (stream._transformState.transforming) throw new ERR_TRANSFORM_ALREADY_TRANSFORMING$1();
      return stream.push(null);
    }

    var _stream_passthrough$1 = PassThrough$1;

    var Transform$4 = _stream_transform$1;

    inherits$4.exports(PassThrough$1, Transform$4);

    function PassThrough$1(options) {
      if (!(this instanceof PassThrough$1)) return new PassThrough$1(options);
      Transform$4.call(this, options);
    }

    PassThrough$1.prototype._transform = function (chunk, encoding, cb) {
      cb(null, chunk);
    };

    var eos$2;

    function once$6(callback) {
      var called = false;
      return function () {
        if (called) return;
        called = true;
        callback.apply(void 0, arguments);
      };
    }

    var _require$codes$4 = errors$1.codes,
        ERR_MISSING_ARGS$1 = _require$codes$4.ERR_MISSING_ARGS,
        ERR_STREAM_DESTROYED$2 = _require$codes$4.ERR_STREAM_DESTROYED;

    function noop$b(err) {
      // Rethrow the error if it exists to avoid swallowing it
      if (err) throw err;
    }

    function isRequest$2(stream) {
      return stream.setHeader && typeof stream.abort === 'function';
    }

    function destroyer$1(stream, reading, writing, callback) {
      callback = once$6(callback);
      var closed = false;
      stream.on('close', function () {
        closed = true;
      });
      if (eos$2 === undefined) eos$2 = endOfStream$1;
      eos$2(stream, {
        readable: reading,
        writable: writing
      }, function (err) {
        if (err) return callback(err);
        closed = true;
        callback();
      });
      var destroyed = false;
      return function (err) {
        if (closed) return;
        if (destroyed) return;
        destroyed = true; // request.destroy just do .end - .abort is what we want

        if (isRequest$2(stream)) return stream.abort();
        if (typeof stream.destroy === 'function') return stream.destroy();
        callback(err || new ERR_STREAM_DESTROYED$2('pipe'));
      };
    }

    function call$1(fn) {
      fn();
    }

    function pipe$5(from, to) {
      return from.pipe(to);
    }

    function popCallback$1(streams) {
      if (!streams.length) return noop$b;
      if (typeof streams[streams.length - 1] !== 'function') return noop$b;
      return streams.pop();
    }

    function pipeline$1() {
      for (var _len = arguments.length, streams = new Array(_len), _key = 0; _key < _len; _key++) {
        streams[_key] = arguments[_key];
      }

      var callback = popCallback$1(streams);
      if (Array.isArray(streams[0])) streams = streams[0];

      if (streams.length < 2) {
        throw new ERR_MISSING_ARGS$1('streams');
      }

      var error;
      var destroys = streams.map(function (stream, i) {
        var reading = i < streams.length - 1;
        var writing = i > 0;
        return destroyer$1(stream, reading, writing, function (err) {
          if (!error) error = err;
          if (err) destroys.forEach(call$1);
          if (reading) return;
          destroys.forEach(call$1);
          callback(error);
        });
      });
      return streams.reduce(pipe$5);
    }

    var pipeline_1$1 = pipeline$1;

    (function (module, exports) {
    var Stream = require$$0__default$1["default"];
    if (process.env.READABLE_STREAM === 'disable' && Stream) {
      module.exports = Stream.Readable;
      Object.assign(module.exports, Stream);
      module.exports.Stream = Stream;
    } else {
      exports = module.exports = _stream_readable$1;
      exports.Stream = Stream || exports;
      exports.Readable = exports;
      exports.Writable = _stream_writable$1;
      exports.Duplex = _stream_duplex$1;
      exports.Transform = _stream_transform$1;
      exports.PassThrough = _stream_passthrough$1;
      exports.finished = endOfStream$1;
      exports.pipeline = pipeline_1$1;
    }
    }(readable$1, readable$1.exports));

    /**
     * Expose `Delegator`.
     */

    var delegates = Delegator;

    /**
     * Initialize a delegator.
     *
     * @param {Object} proto
     * @param {String} target
     * @api public
     */

    function Delegator(proto, target) {
      if (!(this instanceof Delegator)) return new Delegator(proto, target);
      this.proto = proto;
      this.target = target;
      this.methods = [];
      this.getters = [];
      this.setters = [];
      this.fluents = [];
    }

    /**
     * Delegate method `name`.
     *
     * @param {String} name
     * @return {Delegator} self
     * @api public
     */

    Delegator.prototype.method = function(name){
      var proto = this.proto;
      var target = this.target;
      this.methods.push(name);

      proto[name] = function(){
        return this[target][name].apply(this[target], arguments);
      };

      return this;
    };

    /**
     * Delegator accessor `name`.
     *
     * @param {String} name
     * @return {Delegator} self
     * @api public
     */

    Delegator.prototype.access = function(name){
      return this.getter(name).setter(name);
    };

    /**
     * Delegator getter `name`.
     *
     * @param {String} name
     * @return {Delegator} self
     * @api public
     */

    Delegator.prototype.getter = function(name){
      var proto = this.proto;
      var target = this.target;
      this.getters.push(name);

      proto.__defineGetter__(name, function(){
        return this[target][name];
      });

      return this;
    };

    /**
     * Delegator setter `name`.
     *
     * @param {String} name
     * @return {Delegator} self
     * @api public
     */

    Delegator.prototype.setter = function(name){
      var proto = this.proto;
      var target = this.target;
      this.setters.push(name);

      proto.__defineSetter__(name, function(val){
        return this[target][name] = val;
      });

      return this;
    };

    /**
     * Delegator fluent accessor
     *
     * @param {String} name
     * @return {Delegator} self
     * @api public
     */

    Delegator.prototype.fluent = function (name) {
      var proto = this.proto;
      var target = this.target;
      this.fluents.push(name);

      proto[name] = function(val){
        if ('undefined' != typeof val) {
          this[target][name] = val;
          return this;
        } else {
          return this[target][name];
        }
      };

      return this;
    };

    var util$9 = require$$0__default["default"];
    var stream$1 = readable$1.exports;
    var delegate = delegates;
    var Tracker$1 = tracker.exports;

    var TrackerStream$1 = trackerStream.exports = function (name, size, options) {
      stream$1.Transform.call(this, options);
      this.tracker = new Tracker$1(name, size);
      this.name = name;
      this.id = this.tracker.id;
      this.tracker.on('change', delegateChange(this));
    };
    util$9.inherits(TrackerStream$1, stream$1.Transform);

    function delegateChange (trackerStream) {
      return function (name, completion, tracker) {
        trackerStream.emit('change', name, completion, trackerStream);
      }
    }

    TrackerStream$1.prototype._transform = function (data, encoding, cb) {
      this.tracker.completeWork(data.length ? data.length : 1);
      this.push(data);
      cb();
    };

    TrackerStream$1.prototype._flush = function (cb) {
      this.tracker.finish();
      cb();
    };

    delegate(TrackerStream$1.prototype, 'tracker')
      .method('completed')
      .method('addWork')
      .method('finish');

    var util$8 = require$$0__default["default"];
    var TrackerBase = trackerBase.exports;
    var Tracker = tracker.exports;
    var TrackerStream = trackerStream.exports;

    var TrackerGroup = trackerGroup.exports = function (name) {
      TrackerBase.call(this, name);
      this.parentGroup = null;
      this.trackers = [];
      this.completion = {};
      this.weight = {};
      this.totalWeight = 0;
      this.finished = false;
      this.bubbleChange = bubbleChange(this);
    };
    util$8.inherits(TrackerGroup, TrackerBase);

    function bubbleChange (trackerGroup) {
      return function (name, completed, tracker) {
        trackerGroup.completion[tracker.id] = completed;
        if (trackerGroup.finished) {
          return
        }
        trackerGroup.emit('change', name || trackerGroup.name, trackerGroup.completed(), trackerGroup);
      }
    }

    TrackerGroup.prototype.nameInTree = function () {
      var names = [];
      var from = this;
      while (from) {
        names.unshift(from.name);
        from = from.parentGroup;
      }
      return names.join('/')
    };

    TrackerGroup.prototype.addUnit = function (unit, weight) {
      if (unit.addUnit) {
        var toTest = this;
        while (toTest) {
          if (unit === toTest) {
            throw new Error(
              'Attempted to add tracker group ' +
              unit.name + ' to tree that already includes it ' +
              this.nameInTree(this))
          }
          toTest = toTest.parentGroup;
        }
        unit.parentGroup = this;
      }
      this.weight[unit.id] = weight || 1;
      this.totalWeight += this.weight[unit.id];
      this.trackers.push(unit);
      this.completion[unit.id] = unit.completed();
      unit.on('change', this.bubbleChange);
      if (!this.finished) {
        this.emit('change', unit.name, this.completion[unit.id], unit);
      }
      return unit
    };

    TrackerGroup.prototype.completed = function () {
      if (this.trackers.length === 0) {
        return 0
      }
      var valPerWeight = 1 / this.totalWeight;
      var completed = 0;
      for (var ii = 0; ii < this.trackers.length; ii++) {
        var trackerId = this.trackers[ii].id;
        completed +=
          valPerWeight * this.weight[trackerId] * this.completion[trackerId];
      }
      return completed
    };

    TrackerGroup.prototype.newGroup = function (name, weight) {
      return this.addUnit(new TrackerGroup(name), weight)
    };

    TrackerGroup.prototype.newItem = function (name, todo, weight) {
      return this.addUnit(new Tracker(name, todo), weight)
    };

    TrackerGroup.prototype.newStream = function (name, todo, weight) {
      return this.addUnit(new TrackerStream(name, todo), weight)
    };

    TrackerGroup.prototype.finish = function () {
      this.finished = true;
      if (!this.trackers.length) {
        this.addUnit(new Tracker(), 1, true);
      }
      for (var ii = 0; ii < this.trackers.length; ii++) {
        var tracker = this.trackers[ii];
        tracker.finish();
        tracker.removeListener('change', this.bubbleChange);
      }
      this.emit('change', this.name, 1, this);
    };

    var buffer$4 = '                                  ';
    TrackerGroup.prototype.debug = function (depth) {
      depth = depth || 0;
      var indent = depth ? buffer$4.substr(0, depth) : '';
      var output = indent + (this.name || 'top') + ': ' + this.completed() + '\n';
      this.trackers.forEach(function (tracker) {
        if (tracker instanceof TrackerGroup) {
          output += tracker.debug(depth + 1);
        } else {
          output += indent + ' ' + tracker.name + ': ' + tracker.completed() + '\n';
        }
      });
      return output
    };

    lib$3.TrackerGroup = trackerGroup.exports;
    lib$3.Tracker = tracker.exports;
    lib$3.TrackerStream = trackerStream.exports;

    var plumbing = {exports: {}};

    var consoleControlStrings = {};

    // These tables borrowed from `ansi`

    var prefix = '\x1b[';

    consoleControlStrings.up = function up (num) {
      return prefix + (num || '') + 'A'
    };

    consoleControlStrings.down = function down (num) {
      return prefix + (num || '') + 'B'
    };

    consoleControlStrings.forward = function forward (num) {
      return prefix + (num || '') + 'C'
    };

    consoleControlStrings.back = function back (num) {
      return prefix + (num || '') + 'D'
    };

    consoleControlStrings.nextLine = function nextLine (num) {
      return prefix + (num || '') + 'E'
    };

    consoleControlStrings.previousLine = function previousLine (num) {
      return prefix + (num || '') + 'F'
    };

    consoleControlStrings.horizontalAbsolute = function horizontalAbsolute (num) {
      if (num == null) throw new Error('horizontalAboslute requires a column to position to')
      return prefix + num + 'G'
    };

    consoleControlStrings.eraseData = function eraseData () {
      return prefix + 'J'
    };

    consoleControlStrings.eraseLine = function eraseLine () {
      return prefix + 'K'
    };

    consoleControlStrings.goto = function (x, y) {
      return prefix + y + ';' + x + 'H'
    };

    consoleControlStrings.gotoSOL = function () {
      return '\r'
    };

    consoleControlStrings.beep = function () {
      return '\x07'
    };

    consoleControlStrings.hideCursor = function hideCursor () {
      return prefix + '?25l'
    };

    consoleControlStrings.showCursor = function showCursor () {
      return prefix + '?25h'
    };

    var colors = {
      reset: 0,
    // styles
      bold: 1,
      italic: 3,
      underline: 4,
      inverse: 7,
    // resets
      stopBold: 22,
      stopItalic: 23,
      stopUnderline: 24,
      stopInverse: 27,
    // colors
      white: 37,
      black: 30,
      blue: 34,
      cyan: 36,
      green: 32,
      magenta: 35,
      red: 31,
      yellow: 33,
      bgWhite: 47,
      bgBlack: 40,
      bgBlue: 44,
      bgCyan: 46,
      bgGreen: 42,
      bgMagenta: 45,
      bgRed: 41,
      bgYellow: 43,

      grey: 90,
      brightBlack: 90,
      brightRed: 91,
      brightGreen: 92,
      brightYellow: 93,
      brightBlue: 94,
      brightMagenta: 95,
      brightCyan: 96,
      brightWhite: 97,

      bgGrey: 100,
      bgBrightBlack: 100,
      bgBrightRed: 101,
      bgBrightGreen: 102,
      bgBrightYellow: 103,
      bgBrightBlue: 104,
      bgBrightMagenta: 105,
      bgBrightCyan: 106,
      bgBrightWhite: 107
    };

    consoleControlStrings.color = function color (colorWith) {
      if (arguments.length !== 1 || !Array.isArray(colorWith)) {
        colorWith = Array.prototype.slice.call(arguments);
      }
      return prefix + colorWith.map(colorNameToCode).join(';') + 'm'
    };

    function colorNameToCode (color) {
      if (colors[color] != null) return colors[color]
      throw new Error('Unknown color or style name: ' + color)
    }

    var renderTemplate$3 = {exports: {}};

    var align$1 = {};

    var ansiRegex$5 = () => {
    	const pattern = [
    		'[\\u001B\\u009B][[\\]()#;?]*(?:(?:(?:[a-zA-Z\\d]*(?:;[a-zA-Z\\d]*)*)?\\u0007)',
    		'(?:(?:\\d{1,4}(?:;\\d{0,4})*)?[\\dA-PRZcf-ntqry=><~]))'
    	].join('|');

    	return new RegExp(pattern, 'g');
    };

    const ansiRegex$4 = ansiRegex$5;

    var stripAnsi$a = input => typeof input === 'string' ? input.replace(ansiRegex$4(), '') : input;

    /* eslint-disable yoda */
    var isFullwidthCodePoint$7 = x => {
    	if (Number.isNaN(x)) {
    		return false;
    	}

    	// code points are derived from:
    	// http://www.unix.org/Public/UNIDATA/EastAsianWidth.txt
    	if (
    		x >= 0x1100 && (
    			x <= 0x115f ||  // Hangul Jamo
    			x === 0x2329 || // LEFT-POINTING ANGLE BRACKET
    			x === 0x232a || // RIGHT-POINTING ANGLE BRACKET
    			// CJK Radicals Supplement .. Enclosed CJK Letters and Months
    			(0x2e80 <= x && x <= 0x3247 && x !== 0x303f) ||
    			// Enclosed CJK Letters and Months .. CJK Unified Ideographs Extension A
    			(0x3250 <= x && x <= 0x4dbf) ||
    			// CJK Unified Ideographs .. Yi Radicals
    			(0x4e00 <= x && x <= 0xa4c6) ||
    			// Hangul Jamo Extended-A
    			(0xa960 <= x && x <= 0xa97c) ||
    			// Hangul Syllables
    			(0xac00 <= x && x <= 0xd7a3) ||
    			// CJK Compatibility Ideographs
    			(0xf900 <= x && x <= 0xfaff) ||
    			// Vertical Forms
    			(0xfe10 <= x && x <= 0xfe19) ||
    			// CJK Compatibility Forms .. Small Form Variants
    			(0xfe30 <= x && x <= 0xfe6b) ||
    			// Halfwidth and Fullwidth Forms
    			(0xff01 <= x && x <= 0xff60) ||
    			(0xffe0 <= x && x <= 0xffe6) ||
    			// Kana Supplement
    			(0x1b000 <= x && x <= 0x1b001) ||
    			// Enclosed Ideographic Supplement
    			(0x1f200 <= x && x <= 0x1f251) ||
    			// CJK Unified Ideographs Extension B .. Tertiary Ideographic Plane
    			(0x20000 <= x && x <= 0x3fffd)
    		)
    	) {
    		return true;
    	}

    	return false;
    };

    const stripAnsi$9 = stripAnsi$a;
    const isFullwidthCodePoint$6 = isFullwidthCodePoint$7;

    var stringWidth$a = str => {
    	if (typeof str !== 'string' || str.length === 0) {
    		return 0;
    	}

    	str = stripAnsi$9(str);

    	let width = 0;

    	for (let i = 0; i < str.length; i++) {
    		const code = str.codePointAt(i);

    		// Ignore control characters
    		if (code <= 0x1F || (code >= 0x7F && code <= 0x9F)) {
    			continue;
    		}

    		// Ignore combining characters
    		if (code >= 0x300 && code <= 0x36F) {
    			continue;
    		}

    		// Surrogates
    		if (code > 0xFFFF) {
    			i++;
    		}

    		width += isFullwidthCodePoint$6(code) ? 2 : 1;
    	}

    	return width;
    };

    var stringWidth$9 = stringWidth$a;

    align$1.center = alignCenter;
    align$1.left = alignLeft;
    align$1.right = alignRight;

    // lodash's way of generating pad characters.

    function createPadding (width) {
      var result = '';
      var string = ' ';
      var n = width;
      do {
        if (n % 2) {
          result += string;
        }
        n = Math.floor(n / 2);
        string += string;
      } while (n);

      return result;
    }

    function alignLeft (str, width) {
      var trimmed = str.trimRight();
      if (trimmed.length === 0 && str.length >= width) return str
      var padding = '';
      var strWidth = stringWidth$9(trimmed);

      if (strWidth < width) {
        padding = createPadding(width - strWidth);
      }

      return trimmed + padding
    }

    function alignRight (str, width) {
      var trimmed = str.trimLeft();
      if (trimmed.length === 0 && str.length >= width) return str
      var padding = '';
      var strWidth = stringWidth$9(trimmed);

      if (strWidth < width) {
        padding = createPadding(width - strWidth);
      }

      return padding + trimmed
    }

    function alignCenter (str, width) {
      var trimmed = str.trim();
      if (trimmed.length === 0 && str.length >= width) return str
      var padLeft = '';
      var padRight = '';
      var strWidth = stringWidth$9(trimmed);

      if (strWidth < width) {
        var padLeftBy = parseInt((width - strWidth) / 2, 10); 
        padLeft = createPadding(padLeftBy);
        padRight = createPadding(width - (strWidth + padLeftBy));
      }

      return padLeft + trimmed + padRight
    }

    var aproba = validate$3;

    function isArguments$8 (thingy) {
      return thingy != null && typeof thingy === 'object' && thingy.hasOwnProperty('callee')
    }

    const types = {
      '*': {label: 'any', check: () => true},
      A: {label: 'array', check: _ => Array.isArray(_) || isArguments$8(_)},
      S: {label: 'string', check: _ => typeof _ === 'string'},
      N: {label: 'number', check: _ => typeof _ === 'number'},
      F: {label: 'function', check: _ => typeof _ === 'function'},
      O: {label: 'object', check: _ => typeof _ === 'object' && _ != null && !types.A.check(_) && !types.E.check(_)},
      B: {label: 'boolean', check: _ => typeof _ === 'boolean'},
      E: {label: 'error', check: _ => _ instanceof Error},
      Z: {label: 'null', check: _ => _ == null}
    };

    function addSchema (schema, arity) {
      const group = arity[schema.length] = arity[schema.length] || [];
      if (group.indexOf(schema) === -1) group.push(schema);
    }

    function validate$3 (rawSchemas, args) {
      if (arguments.length !== 2) throw wrongNumberOfArgs(['SA'], arguments.length)
      if (!rawSchemas) throw missingRequiredArg(0)
      if (!args) throw missingRequiredArg(1)
      if (!types.S.check(rawSchemas)) throw invalidType(0, ['string'], rawSchemas)
      if (!types.A.check(args)) throw invalidType(1, ['array'], args)
      const schemas = rawSchemas.split('|');
      const arity = {};

      schemas.forEach(schema => {
        for (let ii = 0; ii < schema.length; ++ii) {
          const type = schema[ii];
          if (!types[type]) throw unknownType(ii, type)
        }
        if (/E.*E/.test(schema)) throw moreThanOneError(schema)
        addSchema(schema, arity);
        if (/E/.test(schema)) {
          addSchema(schema.replace(/E.*$/, 'E'), arity);
          addSchema(schema.replace(/E/, 'Z'), arity);
          if (schema.length === 1) addSchema('', arity);
        }
      });
      let matching = arity[args.length];
      if (!matching) {
        throw wrongNumberOfArgs(Object.keys(arity), args.length)
      }
      for (let ii = 0; ii < args.length; ++ii) {
        let newMatching = matching.filter(schema => {
          const type = schema[ii];
          const typeCheck = types[type].check;
          return typeCheck(args[ii])
        });
        if (!newMatching.length) {
          const labels = matching.map(_ => types[_[ii]].label).filter(_ => _ != null);
          throw invalidType(ii, labels, args[ii])
        }
        matching = newMatching;
      }
    }

    function missingRequiredArg (num) {
      return newException('EMISSINGARG', 'Missing required argument #' + (num + 1))
    }

    function unknownType (num, type) {
      return newException('EUNKNOWNTYPE', 'Unknown type ' + type + ' in argument #' + (num + 1))
    }

    function invalidType (num, expectedTypes, value) {
      let valueType;
      Object.keys(types).forEach(typeCode => {
        if (types[typeCode].check(value)) valueType = types[typeCode].label;
      });
      return newException('EINVALIDTYPE', 'Argument #' + (num + 1) + ': Expected ' +
        englishList(expectedTypes) + ' but got ' + valueType)
    }

    function englishList (list) {
      return list.join(', ').replace(/, ([^,]+)$/, ' or $1')
    }

    function wrongNumberOfArgs (expected, got) {
      const english = englishList(expected);
      const args = expected.every(ex => ex.length === 1)
        ? 'argument'
        : 'arguments';
      return newException('EWRONGARGCOUNT', 'Expected ' + english + ' ' + args + ' but got ' + got)
    }

    function moreThanOneError (schema) {
      return newException('ETOOMANYERRORTYPES',
        'Only one error type per argument signature is allowed, more than one found in "' + schema + '"')
    }

    function newException (code, msg) {
      const err = new Error(msg);
      err.code = code;
      /* istanbul ignore else */
      if (Error.captureStackTrace) Error.captureStackTrace(err, validate$3);
      return err
    }

    var stringWidth$8 = stringWidth$a;
    var stripAnsi$8 = stripAnsi$a;

    var wideTruncate_1 = wideTruncate$2;

    function wideTruncate$2 (str, target) {
      if (stringWidth$8(str) === 0) return str
      if (target <= 0) return ''
      if (stringWidth$8(str) <= target) return str

      // We compute the number of bytes of ansi sequences here and add
      // that to our initial truncation to ensure that we don't slice one
      // that we want to keep in half.
      var noAnsi = stripAnsi$8(str);
      var ansiSize = str.length + noAnsi.length;
      var truncated = str.slice(0, target + ansiSize);

      // we have to shrink the result to account for our ansi sequence buffer
      // (if an ansi sequence was truncated) and double width characters.
      while (stringWidth$8(truncated) > target) {
        truncated = truncated.slice(0, -1);
      }
      return truncated
    }

    var error$1 = {};

    var util$7 = require$$0__default["default"];

    var User = error$1.User = function User (msg) {
      var err = new Error(msg);
      Error.captureStackTrace(err, User);
      err.code = 'EGAUGE';
      return err
    };

    error$1.MissingTemplateValue = function MissingTemplateValue (item, values) {
      var err = new User(util$7.format('Missing template value "%s"', item.type));
      Error.captureStackTrace(err, MissingTemplateValue);
      err.template = item;
      err.values = values;
      return err
    };

    error$1.Internal = function Internal (msg) {
      var err = new Error(msg);
      Error.captureStackTrace(err, Internal);
      err.code = 'EGAUGEINTERNAL';
      return err
    };

    var stringWidth$7 = stringWidth$a;

    var templateItem = TemplateItem$1;

    function isPercent (num) {
      if (typeof num !== 'string') return false
      return num.slice(-1) === '%'
    }

    function percent (num) {
      return Number(num.slice(0, -1)) / 100
    }

    function TemplateItem$1 (values, outputLength) {
      this.overallOutputLength = outputLength;
      this.finished = false;
      this.type = null;
      this.value = null;
      this.length = null;
      this.maxLength = null;
      this.minLength = null;
      this.kerning = null;
      this.align = 'left';
      this.padLeft = 0;
      this.padRight = 0;
      this.index = null;
      this.first = null;
      this.last = null;
      if (typeof values === 'string') {
        this.value = values;
      } else {
        for (var prop in values) this[prop] = values[prop];
      }
      // Realize percents
      if (isPercent(this.length)) {
        this.length = Math.round(this.overallOutputLength * percent(this.length));
      }
      if (isPercent(this.minLength)) {
        this.minLength = Math.round(this.overallOutputLength * percent(this.minLength));
      }
      if (isPercent(this.maxLength)) {
        this.maxLength = Math.round(this.overallOutputLength * percent(this.maxLength));
      }
      return this
    }

    TemplateItem$1.prototype = {};

    TemplateItem$1.prototype.getBaseLength = function () {
      var length = this.length;
      if (length == null && typeof this.value === 'string' && this.maxLength == null && this.minLength == null) {
        length = stringWidth$7(this.value);
      }
      return length
    };

    TemplateItem$1.prototype.getLength = function () {
      var length = this.getBaseLength();
      if (length == null) return null
      return length + this.padLeft + this.padRight
    };

    TemplateItem$1.prototype.getMaxLength = function () {
      if (this.maxLength == null) return null
      return this.maxLength + this.padLeft + this.padRight
    };

    TemplateItem$1.prototype.getMinLength = function () {
      if (this.minLength == null) return null
      return this.minLength + this.padLeft + this.padRight
    };

    var align = align$1;
    var validate$2 = aproba;
    var wideTruncate$1 = wideTruncate_1;
    var error = error$1;
    var TemplateItem = templateItem;

    function renderValueWithValues (values) {
      return function (item) {
        return renderValue(item, values)
      }
    }

    var renderTemplate$2 = renderTemplate$3.exports = function (width, template, values) {
      var items = prepareItems(width, template, values);
      var rendered = items.map(renderValueWithValues(values)).join('');
      return align.left(wideTruncate$1(rendered, width), width)
    };

    function preType (item) {
      var cappedTypeName = item.type[0].toUpperCase() + item.type.slice(1);
      return 'pre' + cappedTypeName
    }

    function postType (item) {
      var cappedTypeName = item.type[0].toUpperCase() + item.type.slice(1);
      return 'post' + cappedTypeName
    }

    function hasPreOrPost (item, values) {
      if (!item.type) return
      return values[preType(item)] || values[postType(item)]
    }

    function generatePreAndPost (baseItem, parentValues) {
      var item = Object.assign({}, baseItem);
      var values = Object.create(parentValues);
      var template = [];
      var pre = preType(item);
      var post = postType(item);
      if (values[pre]) {
        template.push({value: values[pre]});
        values[pre] = null;
      }
      item.minLength = null;
      item.length = null;
      item.maxLength = null;
      template.push(item);
      values[item.type] = values[item.type];
      if (values[post]) {
        template.push({value: values[post]});
        values[post] = null;
      }
      return function ($1, $2, length) {
        return renderTemplate$2(length, template, values)
      }
    }

    function prepareItems (width, template, values) {
      function cloneAndObjectify (item, index, arr) {
        var cloned = new TemplateItem(item, width);
        var type = cloned.type;
        if (cloned.value == null) {
          if (!(type in values)) {
            if (cloned.default == null) {
              throw new error.MissingTemplateValue(cloned, values)
            } else {
              cloned.value = cloned.default;
            }
          } else {
            cloned.value = values[type];
          }
        }
        if (cloned.value == null || cloned.value === '') return null
        cloned.index = index;
        cloned.first = index === 0;
        cloned.last = index === arr.length - 1;
        if (hasPreOrPost(cloned, values)) cloned.value = generatePreAndPost(cloned, values);
        return cloned
      }

      var output = template.map(cloneAndObjectify).filter(function (item) { return item != null });

      var remainingSpace = width;
      var variableCount = output.length;

      function consumeSpace (length) {
        if (length > remainingSpace) length = remainingSpace;
        remainingSpace -= length;
      }

      function finishSizing (item, length) {
        if (item.finished) throw new error.Internal('Tried to finish template item that was already finished')
        if (length === Infinity) throw new error.Internal('Length of template item cannot be infinity')
        if (length != null) item.length = length;
        item.minLength = null;
        item.maxLength = null;
        --variableCount;
        item.finished = true;
        if (item.length == null) item.length = item.getBaseLength();
        if (item.length == null) throw new error.Internal('Finished template items must have a length')
        consumeSpace(item.getLength());
      }

      output.forEach(function (item) {
        if (!item.kerning) return
        var prevPadRight = item.first ? 0 : output[item.index - 1].padRight;
        if (!item.first && prevPadRight < item.kerning) item.padLeft = item.kerning - prevPadRight;
        if (!item.last) item.padRight = item.kerning;
      });

      // Finish any that have a fixed (literal or intuited) length
      output.forEach(function (item) {
        if (item.getBaseLength() == null) return
        finishSizing(item);
      });

      var resized = 0;
      var resizing;
      var hunkSize;
      do {
        resizing = false;
        hunkSize = Math.round(remainingSpace / variableCount);
        output.forEach(function (item) {
          if (item.finished) return
          if (!item.maxLength) return
          if (item.getMaxLength() < hunkSize) {
            finishSizing(item, item.maxLength);
            resizing = true;
          }
        });
      } while (resizing && resized++ < output.length)
      if (resizing) throw new error.Internal('Resize loop iterated too many times while determining maxLength')

      resized = 0;
      do {
        resizing = false;
        hunkSize = Math.round(remainingSpace / variableCount);
        output.forEach(function (item) {
          if (item.finished) return
          if (!item.minLength) return
          if (item.getMinLength() >= hunkSize) {
            finishSizing(item, item.minLength);
            resizing = true;
          }
        });
      } while (resizing && resized++ < output.length)
      if (resizing) throw new error.Internal('Resize loop iterated too many times while determining minLength')

      hunkSize = Math.round(remainingSpace / variableCount);
      output.forEach(function (item) {
        if (item.finished) return
        finishSizing(item, hunkSize);
      });

      return output
    }

    function renderFunction (item, values, length) {
      validate$2('OON', arguments);
      if (item.type) {
        return item.value(values, values[item.type + 'Theme'] || {}, length)
      } else {
        return item.value(values, {}, length)
      }
    }

    function renderValue (item, values) {
      var length = item.getBaseLength();
      var value = typeof item.value === 'function' ? renderFunction(item, values, length) : item.value;
      if (value == null || value === '') return ''
      var alignWith = align[item.align] || align.left;
      var leftPadding = item.padLeft ? align.left('', item.padLeft) : '';
      var rightPadding = item.padRight ? align.right('', item.padRight) : '';
      var truncated = wideTruncate$1(String(value), length);
      var aligned = alignWith(truncated, length);
      return leftPadding + aligned + rightPadding
    }

    var consoleControl = consoleControlStrings;
    var renderTemplate$1 = renderTemplate$3.exports;
    var validate$1 = aproba;

    var Plumbing$1 = plumbing.exports = function (theme, template, width) {
      if (!width) width = 80;
      validate$1('OAN', [theme, template, width]);
      this.showing = false;
      this.theme = theme;
      this.width = width;
      this.template = template;
    };
    Plumbing$1.prototype = {};

    Plumbing$1.prototype.setTheme = function (theme) {
      validate$1('O', [theme]);
      this.theme = theme;
    };

    Plumbing$1.prototype.setTemplate = function (template) {
      validate$1('A', [template]);
      this.template = template;
    };

    Plumbing$1.prototype.setWidth = function (width) {
      validate$1('N', [width]);
      this.width = width;
    };

    Plumbing$1.prototype.hide = function () {
      return consoleControl.gotoSOL() + consoleControl.eraseLine()
    };

    Plumbing$1.prototype.hideCursor = consoleControl.hideCursor;

    Plumbing$1.prototype.showCursor = consoleControl.showCursor;

    Plumbing$1.prototype.show = function (status) {
      var values = Object.create(this.theme);
      for (var key in status) {
        values[key] = status[key];
      }

      return renderTemplate$1(this.width, this.template, values).trim() +
             consoleControl.color('reset') +
             consoleControl.eraseLine() + consoleControl.gotoSOL()
    };

    var hasUnicode$1 = {exports: {}};

    var os$3 = require$$0__default$3["default"];

    hasUnicode$1.exports = function () {
      // Recent Win32 platforms (>XP) CAN support unicode in the console but
      // don't have to, and in non-english locales often use traditional local
      // code pages. There's no way, short of windows system calls or execing
      // the chcp command line program to figure this out. As such, we default
      // this to false and encourage your users to override it via config if
      // appropriate.
      if (os$3.type() == "Windows_NT") { return false }

      var isUTF8 = /UTF-?8$/i;
      var ctype = process.env.LC_ALL || process.env.LC_CTYPE || process.env.LANG;
      return isUTF8.test(ctype)
    };

    // call it on itself so we can test the export val for basic stuff
    var colorSupport_1 = colorSupport$1({ alwaysReturn: true }, colorSupport$1);

    function hasNone (obj, options) {
      obj.level = 0;
      obj.hasBasic = false;
      obj.has256 = false;
      obj.has16m = false;
      if (!options.alwaysReturn) {
        return false
      }
      return obj
    }

    function hasBasic (obj) {
      obj.hasBasic = true;
      obj.has256 = false;
      obj.has16m = false;
      obj.level = 1;
      return obj
    }

    function has256 (obj) {
      obj.hasBasic = true;
      obj.has256 = true;
      obj.has16m = false;
      obj.level = 2;
      return obj
    }

    function has16m (obj) {
      obj.hasBasic = true;
      obj.has256 = true;
      obj.has16m = true;
      obj.level = 3;
      return obj
    }

    function colorSupport$1 (options, obj) {
      options = options || {};

      obj = obj || {};

      // if just requesting a specific level, then return that.
      if (typeof options.level === 'number') {
        switch (options.level) {
          case 0:
            return hasNone(obj, options)
          case 1:
            return hasBasic(obj)
          case 2:
            return has256(obj)
          case 3:
            return has16m(obj)
        }
      }

      obj.level = 0;
      obj.hasBasic = false;
      obj.has256 = false;
      obj.has16m = false;

      if (typeof process === 'undefined' ||
          !process ||
          !process.stdout ||
          !process.env ||
          !process.platform) {
        return hasNone(obj, options)
      }

      var env = options.env || process.env;
      var stream = options.stream || process.stdout;
      var term = options.term || env.TERM || '';
      var platform = options.platform || process.platform;

      if (!options.ignoreTTY && !stream.isTTY) {
        return hasNone(obj, options)
      }

      if (!options.ignoreDumb && term === 'dumb' && !env.COLORTERM) {
        return hasNone(obj, options)
      }

      if (platform === 'win32') {
        return hasBasic(obj)
      }

      if (env.TMUX) {
        return has256(obj)
      }

      if (!options.ignoreCI && (env.CI || env.TEAMCITY_VERSION)) {
        if (env.TRAVIS) {
          return has256(obj)
        } else {
          return hasNone(obj, options)
        }
      }

      // TODO: add more term programs
      switch (env.TERM_PROGRAM) {
        case 'iTerm.app':
          var ver = env.TERM_PROGRAM_VERSION || '0.';
          if (/^[0-2]\./.test(ver)) {
            return has256(obj)
          } else {
            return has16m(obj)
          }

        case 'HyperTerm':
        case 'Hyper':
          return has16m(obj)

        case 'MacTerm':
          return has16m(obj)

        case 'Apple_Terminal':
          return has256(obj)
      }

      if (/^xterm-256/.test(term)) {
        return has256(obj)
      }

      if (/^screen|^xterm|^vt100|color|ansi|cygwin|linux/i.test(term)) {
        return hasBasic(obj)
      }

      if (env.COLORTERM) {
        return hasBasic(obj)
      }

      return hasNone(obj, options)
    }

    var colorSupport = colorSupport_1;

    var hasColor$1 = colorSupport().hasBasic;

    var signalExit$3 = {exports: {}};

    var signals$3 = {exports: {}};

    (function (module) {
    // This is not the set of all possible signals.
    //
    // It IS, however, the set of all signals that trigger
    // an exit on either Linux or BSD systems.  Linux is a
    // superset of the signal names supported on BSD, and
    // the unknown signals just fail to register, so we can
    // catch that easily enough.
    //
    // Don't bother with SIGKILL.  It's uncatchable, which
    // means that we can't fire any callbacks anyway.
    //
    // If a user does happen to register a handler on a non-
    // fatal signal like SIGWINCH or something, and then
    // exit, it'll end up firing `process.emit('exit')`, so
    // the handler will be fired anyway.
    //
    // SIGBUS, SIGFPE, SIGSEGV and SIGILL, when not raised
    // artificially, inherently leave the process in a
    // state from which it is not safe to try and enter JS
    // listeners.
    module.exports = [
      'SIGABRT',
      'SIGALRM',
      'SIGHUP',
      'SIGINT',
      'SIGTERM'
    ];

    if (process.platform !== 'win32') {
      module.exports.push(
        'SIGVTALRM',
        'SIGXCPU',
        'SIGXFSZ',
        'SIGUSR2',
        'SIGTRAP',
        'SIGSYS',
        'SIGQUIT',
        'SIGIOT'
        // should detect profiler and enable/disable accordingly.
        // see #21
        // 'SIGPROF'
      );
    }

    if (process.platform === 'linux') {
      module.exports.push(
        'SIGIO',
        'SIGPOLL',
        'SIGPWR',
        'SIGSTKFLT',
        'SIGUNUSED'
      );
    }
    }(signals$3));

    // Note: since nyc uses this module to output coverage, any lines
    // that are in the direct sync flow of nyc's outputCoverage are
    // ignored, since we can never get coverage for them.
    // grab a reference to node's real process object right away
    var process$6 = commonjsGlobal.process;

    const processOk$1 = function (process) {
      return process &&
        typeof process === 'object' &&
        typeof process.removeListener === 'function' &&
        typeof process.emit === 'function' &&
        typeof process.reallyExit === 'function' &&
        typeof process.listeners === 'function' &&
        typeof process.kill === 'function' &&
        typeof process.pid === 'number' &&
        typeof process.on === 'function'
    };

    // some kind of non-node environment, just no-op
    /* istanbul ignore if */
    if (!processOk$1(process$6)) {
      signalExit$3.exports = function () {};
    } else {
      var assert$8 = require$$0__default$4["default"];
      var signals$2 = signals$3.exports;
      var isWin$1 = /^win/i.test(process$6.platform);

      var EE$2 = require$$2__default["default"];
      /* istanbul ignore if */
      if (typeof EE$2 !== 'function') {
        EE$2 = EE$2.EventEmitter;
      }

      var emitter$1;
      if (process$6.__signal_exit_emitter__) {
        emitter$1 = process$6.__signal_exit_emitter__;
      } else {
        emitter$1 = process$6.__signal_exit_emitter__ = new EE$2();
        emitter$1.count = 0;
        emitter$1.emitted = {};
      }

      // Because this emitter is a global, we have to check to see if a
      // previous version of this library failed to enable infinite listeners.
      // I know what you're about to say.  But literally everything about
      // signal-exit is a compromise with evil.  Get used to it.
      if (!emitter$1.infinite) {
        emitter$1.setMaxListeners(Infinity);
        emitter$1.infinite = true;
      }

      signalExit$3.exports = function (cb, opts) {
        /* istanbul ignore if */
        if (!processOk$1(commonjsGlobal.process)) {
          return
        }
        assert$8.equal(typeof cb, 'function', 'a callback must be provided for exit handler');

        if (loaded$1 === false) {
          load$1();
        }

        var ev = 'exit';
        if (opts && opts.alwaysLast) {
          ev = 'afterexit';
        }

        var remove = function () {
          emitter$1.removeListener(ev, cb);
          if (emitter$1.listeners('exit').length === 0 &&
              emitter$1.listeners('afterexit').length === 0) {
            unload$1();
          }
        };
        emitter$1.on(ev, cb);

        return remove
      };

      var unload$1 = function unload () {
        if (!loaded$1 || !processOk$1(commonjsGlobal.process)) {
          return
        }
        loaded$1 = false;

        signals$2.forEach(function (sig) {
          try {
            process$6.removeListener(sig, sigListeners$1[sig]);
          } catch (er) {}
        });
        process$6.emit = originalProcessEmit$1;
        process$6.reallyExit = originalProcessReallyExit$1;
        emitter$1.count -= 1;
      };
      signalExit$3.exports.unload = unload$1;

      var emit$1 = function emit (event, code, signal) {
        /* istanbul ignore if */
        if (emitter$1.emitted[event]) {
          return
        }
        emitter$1.emitted[event] = true;
        emitter$1.emit(event, code, signal);
      };

      // { <signal>: <listener fn>, ... }
      var sigListeners$1 = {};
      signals$2.forEach(function (sig) {
        sigListeners$1[sig] = function listener () {
          /* istanbul ignore if */
          if (!processOk$1(commonjsGlobal.process)) {
            return
          }
          // If there are no other listeners, an exit is coming!
          // Simplest way: remove us and then re-send the signal.
          // We know that this will kill the process, so we can
          // safely emit now.
          var listeners = process$6.listeners(sig);
          if (listeners.length === emitter$1.count) {
            unload$1();
            emit$1('exit', null, sig);
            /* istanbul ignore next */
            emit$1('afterexit', null, sig);
            /* istanbul ignore next */
            if (isWin$1 && sig === 'SIGHUP') {
              // "SIGHUP" throws an `ENOSYS` error on Windows,
              // so use a supported signal instead
              sig = 'SIGINT';
            }
            /* istanbul ignore next */
            process$6.kill(process$6.pid, sig);
          }
        };
      });

      signalExit$3.exports.signals = function () {
        return signals$2
      };

      var loaded$1 = false;

      var load$1 = function load () {
        if (loaded$1 || !processOk$1(commonjsGlobal.process)) {
          return
        }
        loaded$1 = true;

        // This is the number of onSignalExit's that are in play.
        // It's important so that we can count the correct number of
        // listeners on signals, and don't wait for the other one to
        // handle it instead of us.
        emitter$1.count += 1;

        signals$2 = signals$2.filter(function (sig) {
          try {
            process$6.on(sig, sigListeners$1[sig]);
            return true
          } catch (er) {
            return false
          }
        });

        process$6.emit = processEmit$1;
        process$6.reallyExit = processReallyExit$1;
      };
      signalExit$3.exports.load = load$1;

      var originalProcessReallyExit$1 = process$6.reallyExit;
      var processReallyExit$1 = function processReallyExit (code) {
        /* istanbul ignore if */
        if (!processOk$1(commonjsGlobal.process)) {
          return
        }
        process$6.exitCode = code || /* istanbul ignore next */ 0;
        emit$1('exit', process$6.exitCode, null);
        /* istanbul ignore next */
        emit$1('afterexit', process$6.exitCode, null);
        /* istanbul ignore next */
        originalProcessReallyExit$1.call(process$6, process$6.exitCode);
      };

      var originalProcessEmit$1 = process$6.emit;
      var processEmit$1 = function processEmit (ev, arg) {
        if (ev === 'exit' && processOk$1(commonjsGlobal.process)) {
          /* istanbul ignore else */
          if (arg !== undefined) {
            process$6.exitCode = arg;
          }
          var ret = originalProcessEmit$1.apply(this, arguments);
          /* istanbul ignore next */
          emit$1('exit', process$6.exitCode, null);
          /* istanbul ignore next */
          emit$1('afterexit', process$6.exitCode, null);
          /* istanbul ignore next */
          return ret
        } else {
          return originalProcessEmit$1.apply(this, arguments)
        }
      };
    }

    var themes$1 = {exports: {}};

    /*
    object-assign
    (c) Sindre Sorhus
    @license MIT
    */
    /* eslint-disable no-unused-vars */
    var getOwnPropertySymbols = Object.getOwnPropertySymbols;
    var hasOwnProperty$u = Object.prototype.hasOwnProperty;
    var propIsEnumerable = Object.prototype.propertyIsEnumerable;

    function toObject(val) {
    	if (val === null || val === undefined) {
    		throw new TypeError('Object.assign cannot be called with null or undefined');
    	}

    	return Object(val);
    }

    function shouldUseNative() {
    	try {
    		if (!Object.assign) {
    			return false;
    		}

    		// Detect buggy property enumeration order in older V8 versions.

    		// https://bugs.chromium.org/p/v8/issues/detail?id=4118
    		var test1 = new String('abc');  // eslint-disable-line no-new-wrappers
    		test1[5] = 'de';
    		if (Object.getOwnPropertyNames(test1)[0] === '5') {
    			return false;
    		}

    		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
    		var test2 = {};
    		for (var i = 0; i < 10; i++) {
    			test2['_' + String.fromCharCode(i)] = i;
    		}
    		var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
    			return test2[n];
    		});
    		if (order2.join('') !== '0123456789') {
    			return false;
    		}

    		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
    		var test3 = {};
    		'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
    			test3[letter] = letter;
    		});
    		if (Object.keys(Object.assign({}, test3)).join('') !==
    				'abcdefghijklmnopqrst') {
    			return false;
    		}

    		return true;
    	} catch (err) {
    		// We don't expect any of the above to throw, but better to be safe.
    		return false;
    	}
    }

    var objectAssign$1 = shouldUseNative() ? Object.assign : function (target, source) {
    	var from;
    	var to = toObject(target);
    	var symbols;

    	for (var s = 1; s < arguments.length; s++) {
    		from = Object(arguments[s]);

    		for (var key in from) {
    			if (hasOwnProperty$u.call(from, key)) {
    				to[key] = from[key];
    			}
    		}

    		if (getOwnPropertySymbols) {
    			symbols = getOwnPropertySymbols(from);
    			for (var i = 0; i < symbols.length; i++) {
    				if (propIsEnumerable.call(from, symbols[i])) {
    					to[symbols[i]] = from[symbols[i]];
    				}
    			}
    		}
    	}

    	return to;
    };

    var spin$1 = function spin (spinstr, spun) {
      return spinstr[spun % spinstr.length]
    };

    var validate = aproba;
    var renderTemplate = renderTemplate$3.exports;
    var wideTruncate = wideTruncate_1;
    var stringWidth$6 = stringWidth$a;

    var progressBar$1 = function (theme, width, completed) {
      validate('ONN', [theme, width, completed]);
      if (completed < 0) completed = 0;
      if (completed > 1) completed = 1;
      if (width <= 0) return ''
      var sofar = Math.round(width * completed);
      var rest = width - sofar;
      var template = [
        {type: 'complete', value: repeat$2(theme.complete, sofar), length: sofar},
        {type: 'remaining', value: repeat$2(theme.remaining, rest), length: rest}
      ];
      return renderTemplate(width, template, theme)
    };

    // lodash's way of repeating
    function repeat$2 (string, width) {
      var result = '';
      var n = width;
      do {
        if (n % 2) {
          result += string;
        }
        n = Math.floor(n / 2);
        /* eslint no-self-assign: 0 */
        string += string;
      } while (n && stringWidth$6(result) < width)

      return wideTruncate(result, width)
    }

    var spin = spin$1;
    var progressBar = progressBar$1;

    var baseTheme = {
      activityIndicator: function (values, theme, width) {
        if (values.spun == null) return
        return spin(theme, values.spun)
      },
      progressbar: function (values, theme, width) {
        if (values.completed == null) return
        return progressBar(theme, width, values.completed)
      }
    };

    var objectAssign = objectAssign$1;

    var themeSet = function () {
      return ThemeSetProto.newThemeSet()
    };

    var ThemeSetProto = {};

    ThemeSetProto.baseTheme = baseTheme;

    ThemeSetProto.newTheme = function (parent, theme) {
      if (!theme) {
        theme = parent;
        parent = this.baseTheme;
      }
      return objectAssign({}, parent, theme)
    };

    ThemeSetProto.getThemeNames = function () {
      return Object.keys(this.themes)
    };

    ThemeSetProto.addTheme = function (name, parent, theme) {
      this.themes[name] = this.newTheme(parent, theme);
    };

    ThemeSetProto.addToAllThemes = function (theme) {
      var themes = this.themes;
      Object.keys(themes).forEach(function (name) {
        objectAssign(themes[name], theme);
      });
      objectAssign(this.baseTheme, theme);
    };

    ThemeSetProto.getTheme = function (name) {
      if (!this.themes[name]) throw this.newMissingThemeError(name)
      return this.themes[name]
    };

    ThemeSetProto.setDefault = function (opts, name) {
      if (name == null) {
        name = opts;
        opts = {};
      }
      var platform = opts.platform == null ? 'fallback' : opts.platform;
      var hasUnicode = !!opts.hasUnicode;
      var hasColor = !!opts.hasColor;
      if (!this.defaults[platform]) this.defaults[platform] = {true: {}, false: {}};
      this.defaults[platform][hasUnicode][hasColor] = name;
    };

    ThemeSetProto.getDefault = function (opts) {
      if (!opts) opts = {};
      var platformName = opts.platform || process.platform;
      var platform = this.defaults[platformName] || this.defaults.fallback;
      var hasUnicode = !!opts.hasUnicode;
      var hasColor = !!opts.hasColor;
      if (!platform) throw this.newMissingDefaultThemeError(platformName, hasUnicode, hasColor)
      if (!platform[hasUnicode][hasColor]) {
        if (hasUnicode && hasColor && platform[!hasUnicode][hasColor]) {
          hasUnicode = false;
        } else if (hasUnicode && hasColor && platform[hasUnicode][!hasColor]) {
          hasColor = false;
        } else if (hasUnicode && hasColor && platform[!hasUnicode][!hasColor]) {
          hasUnicode = false;
          hasColor = false;
        } else if (hasUnicode && !hasColor && platform[!hasUnicode][hasColor]) {
          hasUnicode = false;
        } else if (!hasUnicode && hasColor && platform[hasUnicode][!hasColor]) {
          hasColor = false;
        } else if (platform === this.defaults.fallback) {
          throw this.newMissingDefaultThemeError(platformName, hasUnicode, hasColor)
        }
      }
      if (platform[hasUnicode][hasColor]) {
        return this.getTheme(platform[hasUnicode][hasColor])
      } else {
        return this.getDefault(objectAssign({}, opts, {platform: 'fallback'}))
      }
    };

    ThemeSetProto.newMissingThemeError = function newMissingThemeError (name) {
      var err = new Error('Could not find a gauge theme named "' + name + '"');
      Error.captureStackTrace.call(err, newMissingThemeError);
      err.theme = name;
      err.code = 'EMISSINGTHEME';
      return err
    };

    ThemeSetProto.newMissingDefaultThemeError = function newMissingDefaultThemeError (platformName, hasUnicode, hasColor) {
      var err = new Error(
        'Could not find a gauge theme for your platform/unicode/color use combo:\n' +
        '    platform = ' + platformName + '\n' +
        '    hasUnicode = ' + hasUnicode + '\n' +
        '    hasColor = ' + hasColor);
      Error.captureStackTrace.call(err, newMissingDefaultThemeError);
      err.platform = platformName;
      err.hasUnicode = hasUnicode;
      err.hasColor = hasColor;
      err.code = 'EMISSINGTHEME';
      return err
    };

    ThemeSetProto.newThemeSet = function () {
      var themeset = function (opts) {
        return themeset.getDefault(opts)
      };
      return objectAssign(themeset, ThemeSetProto, {
        themes: objectAssign({}, this.themes),
        baseTheme: objectAssign({}, this.baseTheme),
        defaults: JSON.parse(JSON.stringify(this.defaults || {}))
      })
    };

    var color = consoleControlStrings.color;
    var ThemeSet = themeSet;

    var themes = themes$1.exports = new ThemeSet();

    themes.addTheme('ASCII', {
      preProgressbar: '[',
      postProgressbar: ']',
      progressbarTheme: {
        complete: '#',
        remaining: '.'
      },
      activityIndicatorTheme: '-\\|/',
      preSubsection: '>'
    });

    themes.addTheme('colorASCII', themes.getTheme('ASCII'), {
      progressbarTheme: {
        preComplete: color('bgBrightWhite', 'brightWhite'),
        complete: '#',
        postComplete: color('reset'),
        preRemaining: color('bgBrightBlack', 'brightBlack'),
        remaining: '.',
        postRemaining: color('reset')
      }
    });

    themes.addTheme('brailleSpinner', {
      preProgressbar: '⸨',
      postProgressbar: '⸩',
      progressbarTheme: {
        complete: '#',
        remaining: '⠂'
      },
      activityIndicatorTheme: '⠋⠙⠹⠸⠼⠴⠦⠧⠇⠏',
      preSubsection: '>'
    });

    themes.addTheme('colorBrailleSpinner', themes.getTheme('brailleSpinner'), {
      progressbarTheme: {
        preComplete: color('bgBrightWhite', 'brightWhite'),
        complete: '#',
        postComplete: color('reset'),
        preRemaining: color('bgBrightBlack', 'brightBlack'),
        remaining: '⠂',
        postRemaining: color('reset')
      }
    });

    themes.setDefault({}, 'ASCII');
    themes.setDefault({hasColor: true}, 'colorASCII');
    themes.setDefault({platform: 'darwin', hasUnicode: true}, 'brailleSpinner');
    themes.setDefault({platform: 'darwin', hasUnicode: true, hasColor: true}, 'colorBrailleSpinner');
    themes.setDefault({platform: 'linux', hasUnicode: true}, 'brailleSpinner');
    themes.setDefault({platform: 'linux', hasUnicode: true, hasColor: true}, 'colorBrailleSpinner');

    // this exists so we can replace it during testing
    var setInterval_1 = setInterval;

    // this exists so we can replace it during testing
    var process_1 = process;

    var setImmediate$4 = {exports: {}};

    var process$5 = process_1;
    try {
      setImmediate$4.exports = setImmediate;
    } catch (ex) {
      setImmediate$4.exports = process$5.nextTick;
    }

    var Plumbing = plumbing.exports;
    var hasUnicode = hasUnicode$1.exports;
    var hasColor = hasColor$1;
    var onExit = signalExit$3.exports;
    var defaultThemes = themes$1.exports;
    var setInterval$1 = setInterval_1;
    var process$4 = process_1;
    var setImmediate$3 = setImmediate$4.exports;

    var gauge = Gauge;

    function callWith (obj, method) {
      return function () {
        return method.call(obj)
      }
    }

    function Gauge (arg1, arg2) {
      var options, writeTo;
      if (arg1 && arg1.write) {
        writeTo = arg1;
        options = arg2 || {};
      } else if (arg2 && arg2.write) {
        writeTo = arg2;
        options = arg1 || {};
      } else {
        writeTo = process$4.stderr;
        options = arg1 || arg2 || {};
      }

      this._status = {
        spun: 0,
        section: '',
        subsection: ''
      };
      this._paused = false; // are we paused for back pressure?
      this._disabled = true; // are all progress bar updates disabled?
      this._showing = false; // do we WANT the progress bar on screen
      this._onScreen = false; // IS the progress bar on screen
      this._needsRedraw = false; // should we print something at next tick?
      this._hideCursor = options.hideCursor == null ? true : options.hideCursor;
      this._fixedFramerate = options.fixedFramerate == null
        ? !(/^v0\.8\./.test(process$4.version))
        : options.fixedFramerate;
      this._lastUpdateAt = null;
      this._updateInterval = options.updateInterval == null ? 50 : options.updateInterval;

      this._themes = options.themes || defaultThemes;
      this._theme = options.theme;
      var theme = this._computeTheme(options.theme);
      var template = options.template || [
        {type: 'progressbar', length: 20},
        {type: 'activityIndicator', kerning: 1, length: 1},
        {type: 'section', kerning: 1, default: ''},
        {type: 'subsection', kerning: 1, default: ''}
      ];
      this.setWriteTo(writeTo, options.tty);
      var PlumbingClass = options.Plumbing || Plumbing;
      this._gauge = new PlumbingClass(theme, template, this.getWidth());

      this._$$doRedraw = callWith(this, this._doRedraw);
      this._$$handleSizeChange = callWith(this, this._handleSizeChange);

      this._cleanupOnExit = options.cleanupOnExit == null || options.cleanupOnExit;
      this._removeOnExit = null;

      if (options.enabled || (options.enabled == null && this._tty && this._tty.isTTY)) {
        this.enable();
      } else {
        this.disable();
      }
    }
    Gauge.prototype = {};

    Gauge.prototype.isEnabled = function () {
      return !this._disabled
    };

    Gauge.prototype.setTemplate = function (template) {
      this._gauge.setTemplate(template);
      if (this._showing) this._requestRedraw();
    };

    Gauge.prototype._computeTheme = function (theme) {
      if (!theme) theme = {};
      if (typeof theme === 'string') {
        theme = this._themes.getTheme(theme);
      } else if (theme && (Object.keys(theme).length === 0 || theme.hasUnicode != null || theme.hasColor != null)) {
        var useUnicode = theme.hasUnicode == null ? hasUnicode() : theme.hasUnicode;
        var useColor = theme.hasColor == null ? hasColor : theme.hasColor;
        theme = this._themes.getDefault({hasUnicode: useUnicode, hasColor: useColor, platform: theme.platform});
      }
      return theme
    };

    Gauge.prototype.setThemeset = function (themes) {
      this._themes = themes;
      this.setTheme(this._theme);
    };

    Gauge.prototype.setTheme = function (theme) {
      this._gauge.setTheme(this._computeTheme(theme));
      if (this._showing) this._requestRedraw();
      this._theme = theme;
    };

    Gauge.prototype._requestRedraw = function () {
      this._needsRedraw = true;
      if (!this._fixedFramerate) this._doRedraw();
    };

    Gauge.prototype.getWidth = function () {
      return ((this._tty && this._tty.columns) || 80) - 1
    };

    Gauge.prototype.setWriteTo = function (writeTo, tty) {
      var enabled = !this._disabled;
      if (enabled) this.disable();
      this._writeTo = writeTo;
      this._tty = tty ||
        (writeTo === process$4.stderr && process$4.stdout.isTTY && process$4.stdout) ||
        (writeTo.isTTY && writeTo) ||
        this._tty;
      if (this._gauge) this._gauge.setWidth(this.getWidth());
      if (enabled) this.enable();
    };

    Gauge.prototype.enable = function () {
      if (!this._disabled) return
      this._disabled = false;
      if (this._tty) this._enableEvents();
      if (this._showing) this.show();
    };

    Gauge.prototype.disable = function () {
      if (this._disabled) return
      if (this._showing) {
        this._lastUpdateAt = null;
        this._showing = false;
        this._doRedraw();
        this._showing = true;
      }
      this._disabled = true;
      if (this._tty) this._disableEvents();
    };

    Gauge.prototype._enableEvents = function () {
      if (this._cleanupOnExit) {
        this._removeOnExit = onExit(callWith(this, this.disable));
      }
      this._tty.on('resize', this._$$handleSizeChange);
      if (this._fixedFramerate) {
        this.redrawTracker = setInterval$1(this._$$doRedraw, this._updateInterval);
        if (this.redrawTracker.unref) this.redrawTracker.unref();
      }
    };

    Gauge.prototype._disableEvents = function () {
      this._tty.removeListener('resize', this._$$handleSizeChange);
      if (this._fixedFramerate) clearInterval(this.redrawTracker);
      if (this._removeOnExit) this._removeOnExit();
    };

    Gauge.prototype.hide = function (cb) {
      if (this._disabled) return cb && process$4.nextTick(cb)
      if (!this._showing) return cb && process$4.nextTick(cb)
      this._showing = false;
      this._doRedraw();
      cb && setImmediate$3(cb);
    };

    Gauge.prototype.show = function (section, completed) {
      this._showing = true;
      if (typeof section === 'string') {
        this._status.section = section;
      } else if (typeof section === 'object') {
        var sectionKeys = Object.keys(section);
        for (var ii = 0; ii < sectionKeys.length; ++ii) {
          var key = sectionKeys[ii];
          this._status[key] = section[key];
        }
      }
      if (completed != null) this._status.completed = completed;
      if (this._disabled) return
      this._requestRedraw();
    };

    Gauge.prototype.pulse = function (subsection) {
      this._status.subsection = subsection || '';
      this._status.spun++;
      if (this._disabled) return
      if (!this._showing) return
      this._requestRedraw();
    };

    Gauge.prototype._handleSizeChange = function () {
      this._gauge.setWidth(this._tty.columns - 1);
      this._requestRedraw();
    };

    Gauge.prototype._doRedraw = function () {
      if (this._disabled || this._paused) return
      if (!this._fixedFramerate) {
        var now = Date.now();
        if (this._lastUpdateAt && now - this._lastUpdateAt < this._updateInterval) return
        this._lastUpdateAt = now;
      }
      if (!this._showing && this._onScreen) {
        this._onScreen = false;
        var result = this._gauge.hide();
        if (this._hideCursor) {
          result += this._gauge.showCursor();
        }
        return this._writeTo.write(result)
      }
      if (!this._showing && !this._onScreen) return
      if (this._showing && !this._onScreen) {
        this._onScreen = true;
        this._needsRedraw = true;
        if (this._hideCursor) {
          this._writeTo.write(this._gauge.hideCursor());
        }
      }
      if (!this._needsRedraw) return
      if (!this._writeTo.write(this._gauge.show(this._status))) {
        this._paused = true;
        this._writeTo.on('drain', callWith(this, function () {
          this._paused = false;
          this._doRedraw();
        }));
      }
    };

    var setBlocking = function (blocking) {
      [process.stdout, process.stderr].forEach(function (stream) {
        if (stream._handle && stream.isTTY && typeof stream._handle.setBlocking === 'function') {
          stream._handle.setBlocking(blocking);
        }
      });
    };

    (function (module, exports) {
    var Progress = lib$3;
    var Gauge = gauge;
    var EE = require$$2__default["default"].EventEmitter;
    var log = module.exports = new EE();
    var util = require$$0__default["default"];

    var setBlocking$1 = setBlocking;
    var consoleControl = consoleControlStrings;

    setBlocking$1(true);
    var stream = process.stderr;
    Object.defineProperty(log, 'stream', {
      set: function (newStream) {
        stream = newStream;
        if (this.gauge) {
          this.gauge.setWriteTo(stream, stream);
        }
      },
      get: function () {
        return stream
      },
    });

    // by default, decide based on tty-ness.
    var colorEnabled;
    log.useColor = function () {
      return colorEnabled != null ? colorEnabled : stream.isTTY
    };

    log.enableColor = function () {
      colorEnabled = true;
      this.gauge.setTheme({hasColor: colorEnabled, hasUnicode: unicodeEnabled});
    };
    log.disableColor = function () {
      colorEnabled = false;
      this.gauge.setTheme({hasColor: colorEnabled, hasUnicode: unicodeEnabled});
    };

    // default level
    log.level = 'info';

    log.gauge = new Gauge(stream, {
      enabled: false, // no progress bars unless asked
      theme: {hasColor: log.useColor()},
      template: [
        {type: 'progressbar', length: 20},
        {type: 'activityIndicator', kerning: 1, length: 1},
        {type: 'section', default: ''},
        ':',
        {type: 'logline', kerning: 1, default: ''},
      ],
    });

    log.tracker = new Progress.TrackerGroup();

    // we track this separately as we may need to temporarily disable the
    // display of the status bar for our own loggy purposes.
    log.progressEnabled = log.gauge.isEnabled();

    var unicodeEnabled;

    log.enableUnicode = function () {
      unicodeEnabled = true;
      this.gauge.setTheme({hasColor: this.useColor(), hasUnicode: unicodeEnabled});
    };

    log.disableUnicode = function () {
      unicodeEnabled = false;
      this.gauge.setTheme({hasColor: this.useColor(), hasUnicode: unicodeEnabled});
    };

    log.setGaugeThemeset = function (themes) {
      this.gauge.setThemeset(themes);
    };

    log.setGaugeTemplate = function (template) {
      this.gauge.setTemplate(template);
    };

    log.enableProgress = function () {
      if (this.progressEnabled) {
        return
      }

      this.progressEnabled = true;
      this.tracker.on('change', this.showProgress);
      if (this._paused) {
        return
      }

      this.gauge.enable();
    };

    log.disableProgress = function () {
      if (!this.progressEnabled) {
        return
      }
      this.progressEnabled = false;
      this.tracker.removeListener('change', this.showProgress);
      this.gauge.disable();
    };

    var trackerConstructors = ['newGroup', 'newItem', 'newStream'];

    var mixinLog = function (tracker) {
      // mixin the public methods from log into the tracker
      // (except: conflicts and one's we handle specially)
      Object.keys(log).forEach(function (P) {
        if (P[0] === '_') {
          return
        }

        if (trackerConstructors.filter(function (C) {
          return C === P
        }).length) {
          return
        }

        if (tracker[P]) {
          return
        }

        if (typeof log[P] !== 'function') {
          return
        }

        var func = log[P];
        tracker[P] = function () {
          return func.apply(log, arguments)
        };
      });
      // if the new tracker is a group, make sure any subtrackers get
      // mixed in too
      if (tracker instanceof Progress.TrackerGroup) {
        trackerConstructors.forEach(function (C) {
          var func = tracker[C];
          tracker[C] = function () {
            return mixinLog(func.apply(tracker, arguments))
          };
        });
      }
      return tracker
    };

    // Add tracker constructors to the top level log object
    trackerConstructors.forEach(function (C) {
      log[C] = function () {
        return mixinLog(this.tracker[C].apply(this.tracker, arguments))
      };
    });

    log.clearProgress = function (cb) {
      if (!this.progressEnabled) {
        return cb && process.nextTick(cb)
      }

      this.gauge.hide(cb);
    };

    log.showProgress = function (name, completed) {
      if (!this.progressEnabled) {
        return
      }

      var values = {};
      if (name) {
        values.section = name;
      }

      var last = log.record[log.record.length - 1];
      if (last) {
        values.subsection = last.prefix;
        var disp = log.disp[last.level] || last.level;
        var logline = this._format(disp, log.style[last.level]);
        if (last.prefix) {
          logline += ' ' + this._format(last.prefix, this.prefixStyle);
        }

        logline += ' ' + last.message.split(/\r?\n/)[0];
        values.logline = logline;
      }
      values.completed = completed || this.tracker.completed();
      this.gauge.show(values);
    }.bind(log); // bind for use in tracker's on-change listener

    // temporarily stop emitting, but don't drop
    log.pause = function () {
      this._paused = true;
      if (this.progressEnabled) {
        this.gauge.disable();
      }
    };

    log.resume = function () {
      if (!this._paused) {
        return
      }

      this._paused = false;

      var b = this._buffer;
      this._buffer = [];
      b.forEach(function (m) {
        this.emitLog(m);
      }, this);
      if (this.progressEnabled) {
        this.gauge.enable();
      }
    };

    log._buffer = [];

    var id = 0;
    log.record = [];
    log.maxRecordSize = 10000;
    log.log = function (lvl, prefix, message) {
      var l = this.levels[lvl];
      if (l === undefined) {
        return this.emit('error', new Error(util.format(
          'Undefined log level: %j', lvl)))
      }

      var a = new Array(arguments.length - 2);
      var stack = null;
      for (var i = 2; i < arguments.length; i++) {
        var arg = a[i - 2] = arguments[i];

        // resolve stack traces to a plain string.
        if (typeof arg === 'object' && arg instanceof Error && arg.stack) {
          Object.defineProperty(arg, 'stack', {
            value: stack = arg.stack + '',
            enumerable: true,
            writable: true,
          });
        }
      }
      if (stack) {
        a.unshift(stack + '\n');
      }
      message = util.format.apply(util, a);

      var m = {
        id: id++,
        level: lvl,
        prefix: String(prefix || ''),
        message: message,
        messageRaw: a,
      };

      this.emit('log', m);
      this.emit('log.' + lvl, m);
      if (m.prefix) {
        this.emit(m.prefix, m);
      }

      this.record.push(m);
      var mrs = this.maxRecordSize;
      var n = this.record.length - mrs;
      if (n > mrs / 10) {
        var newSize = Math.floor(mrs * 0.9);
        this.record = this.record.slice(-1 * newSize);
      }

      this.emitLog(m);
    }.bind(log);

    log.emitLog = function (m) {
      if (this._paused) {
        this._buffer.push(m);
        return
      }
      if (this.progressEnabled) {
        this.gauge.pulse(m.prefix);
      }

      var l = this.levels[m.level];
      if (l === undefined) {
        return
      }

      if (l < this.levels[this.level]) {
        return
      }

      if (l > 0 && !isFinite(l)) {
        return
      }

      // If 'disp' is null or undefined, use the lvl as a default
      // Allows: '', 0 as valid disp
      var disp = log.disp[m.level] != null ? log.disp[m.level] : m.level;
      this.clearProgress();
      m.message.split(/\r?\n/).forEach(function (line) {
        if (this.heading) {
          this.write(this.heading, this.headingStyle);
          this.write(' ');
        }
        this.write(disp, log.style[m.level]);
        var p = m.prefix || '';
        if (p) {
          this.write(' ');
        }

        this.write(p, this.prefixStyle);
        this.write(' ' + line + '\n');
      }, this);
      this.showProgress();
    };

    log._format = function (msg, style) {
      if (!stream) {
        return
      }

      var output = '';
      if (this.useColor()) {
        style = style || {};
        var settings = [];
        if (style.fg) {
          settings.push(style.fg);
        }

        if (style.bg) {
          settings.push('bg' + style.bg[0].toUpperCase() + style.bg.slice(1));
        }

        if (style.bold) {
          settings.push('bold');
        }

        if (style.underline) {
          settings.push('underline');
        }

        if (style.inverse) {
          settings.push('inverse');
        }

        if (settings.length) {
          output += consoleControl.color(settings);
        }

        if (style.beep) {
          output += consoleControl.beep();
        }
      }
      output += msg;
      if (this.useColor()) {
        output += consoleControl.color('reset');
      }

      return output
    };

    log.write = function (msg, style) {
      if (!stream) {
        return
      }

      stream.write(this._format(msg, style));
    };

    log.addLevel = function (lvl, n, style, disp) {
      // If 'disp' is null or undefined, use the lvl as a default
      if (disp == null) {
        disp = lvl;
      }

      this.levels[lvl] = n;
      this.style[lvl] = style;
      if (!this[lvl]) {
        this[lvl] = function () {
          var a = new Array(arguments.length + 1);
          a[0] = lvl;
          for (var i = 0; i < arguments.length; i++) {
            a[i + 1] = arguments[i];
          }

          return this.log.apply(this, a)
        }.bind(this);
      }
      this.disp[lvl] = disp;
    };

    log.prefixStyle = { fg: 'magenta' };
    log.headingStyle = { fg: 'white', bg: 'black' };

    log.style = {};
    log.levels = {};
    log.disp = {};
    log.addLevel('silly', -Infinity, { inverse: true }, 'sill');
    log.addLevel('verbose', 1000, { fg: 'blue', bg: 'black' }, 'verb');
    log.addLevel('info', 2000, { fg: 'green' });
    log.addLevel('timing', 2500, { fg: 'green', bg: 'black' });
    log.addLevel('http', 3000, { fg: 'green', bg: 'black' });
    log.addLevel('notice', 3500, { fg: 'blue', bg: 'black' });
    log.addLevel('warn', 4000, { fg: 'black', bg: 'yellow' }, 'WARN');
    log.addLevel('error', 5000, { fg: 'red', bg: 'black' }, 'ERR!');
    log.addLevel('silent', Infinity);

    // allow 'error' prefix
    log.on('error', function () {});
    }(log$1));

    var log = log$1.exports;

    var axios$4 = {exports: {}};

    var bind$5 = function bind(fn, thisArg) {
      return function wrap() {
        var args = new Array(arguments.length);
        for (var i = 0; i < args.length; i++) {
          args[i] = arguments[i];
        }
        return fn.apply(thisArg, args);
      };
    };

    var bind$4 = bind$5;

    // utils is a library of generic helper functions non-specific to axios

    var toString$5 = Object.prototype.toString;

    /**
     * Determine if a value is an Array
     *
     * @param {Object} val The value to test
     * @returns {boolean} True if value is an Array, otherwise false
     */
    function isArray$C(val) {
      return toString$5.call(val) === '[object Array]';
    }

    /**
     * Determine if a value is undefined
     *
     * @param {Object} val The value to test
     * @returns {boolean} True if the value is undefined, otherwise false
     */
    function isUndefined$1(val) {
      return typeof val === 'undefined';
    }

    /**
     * Determine if a value is a Buffer
     *
     * @param {Object} val The value to test
     * @returns {boolean} True if value is a Buffer, otherwise false
     */
    function isBuffer$9(val) {
      return val !== null && !isUndefined$1(val) && val.constructor !== null && !isUndefined$1(val.constructor)
        && typeof val.constructor.isBuffer === 'function' && val.constructor.isBuffer(val);
    }

    /**
     * Determine if a value is an ArrayBuffer
     *
     * @param {Object} val The value to test
     * @returns {boolean} True if value is an ArrayBuffer, otherwise false
     */
    function isArrayBuffer$1(val) {
      return toString$5.call(val) === '[object ArrayBuffer]';
    }

    /**
     * Determine if a value is a FormData
     *
     * @param {Object} val The value to test
     * @returns {boolean} True if value is an FormData, otherwise false
     */
    function isFormData$1(val) {
      return (typeof FormData !== 'undefined') && (val instanceof FormData);
    }

    /**
     * Determine if a value is a view on an ArrayBuffer
     *
     * @param {Object} val The value to test
     * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false
     */
    function isArrayBufferView$1(val) {
      var result;
      if ((typeof ArrayBuffer !== 'undefined') && (ArrayBuffer.isView)) {
        result = ArrayBuffer.isView(val);
      } else {
        result = (val) && (val.buffer) && (val.buffer instanceof ArrayBuffer);
      }
      return result;
    }

    /**
     * Determine if a value is a String
     *
     * @param {Object} val The value to test
     * @returns {boolean} True if value is a String, otherwise false
     */
    function isString$3(val) {
      return typeof val === 'string';
    }

    /**
     * Determine if a value is a Number
     *
     * @param {Object} val The value to test
     * @returns {boolean} True if value is a Number, otherwise false
     */
    function isNumber$3(val) {
      return typeof val === 'number';
    }

    /**
     * Determine if a value is an Object
     *
     * @param {Object} val The value to test
     * @returns {boolean} True if value is an Object, otherwise false
     */
    function isObject$m(val) {
      return val !== null && typeof val === 'object';
    }

    /**
     * Determine if a value is a plain Object
     *
     * @param {Object} val The value to test
     * @return {boolean} True if value is a plain Object, otherwise false
     */
    function isPlainObject$5(val) {
      if (toString$5.call(val) !== '[object Object]') {
        return false;
      }

      var prototype = Object.getPrototypeOf(val);
      return prototype === null || prototype === Object.prototype;
    }

    /**
     * Determine if a value is a Date
     *
     * @param {Object} val The value to test
     * @returns {boolean} True if value is a Date, otherwise false
     */
    function isDate$1(val) {
      return toString$5.call(val) === '[object Date]';
    }

    /**
     * Determine if a value is a File
     *
     * @param {Object} val The value to test
     * @returns {boolean} True if value is a File, otherwise false
     */
    function isFile$1(val) {
      return toString$5.call(val) === '[object File]';
    }

    /**
     * Determine if a value is a Blob
     *
     * @param {Object} val The value to test
     * @returns {boolean} True if value is a Blob, otherwise false
     */
    function isBlob$1(val) {
      return toString$5.call(val) === '[object Blob]';
    }

    /**
     * Determine if a value is a Function
     *
     * @param {Object} val The value to test
     * @returns {boolean} True if value is a Function, otherwise false
     */
    function isFunction$9(val) {
      return toString$5.call(val) === '[object Function]';
    }

    /**
     * Determine if a value is a Stream
     *
     * @param {Object} val The value to test
     * @returns {boolean} True if value is a Stream, otherwise false
     */
    function isStream$1(val) {
      return isObject$m(val) && isFunction$9(val.pipe);
    }

    /**
     * Determine if a value is a URLSearchParams object
     *
     * @param {Object} val The value to test
     * @returns {boolean} True if value is a URLSearchParams object, otherwise false
     */
    function isURLSearchParams$1(val) {
      return typeof URLSearchParams !== 'undefined' && val instanceof URLSearchParams;
    }

    /**
     * Trim excess whitespace off the beginning and end of a string
     *
     * @param {String} str The String to trim
     * @returns {String} The String freed of excess whitespace
     */
    function trim$2(str) {
      return str.trim ? str.trim() : str.replace(/^\s+|\s+$/g, '');
    }

    /**
     * Determine if we're running in a standard browser environment
     *
     * This allows axios to run in a web worker, and react-native.
     * Both environments support XMLHttpRequest, but not fully standard globals.
     *
     * web workers:
     *  typeof window -> undefined
     *  typeof document -> undefined
     *
     * react-native:
     *  navigator.product -> 'ReactNative'
     * nativescript
     *  navigator.product -> 'NativeScript' or 'NS'
     */
    function isStandardBrowserEnv$1() {
      if (typeof navigator !== 'undefined' && (navigator.product === 'ReactNative' ||
                                               navigator.product === 'NativeScript' ||
                                               navigator.product === 'NS')) {
        return false;
      }
      return (
        typeof window !== 'undefined' &&
        typeof document !== 'undefined'
      );
    }

    /**
     * Iterate over an Array or an Object invoking a function for each item.
     *
     * If `obj` is an Array callback will be called passing
     * the value, index, and complete array for each item.
     *
     * If 'obj' is an Object callback will be called passing
     * the value, key, and complete object for each property.
     *
     * @param {Object|Array} obj The object to iterate
     * @param {Function} fn The callback to invoke for each item
     */
    function forEach$2(obj, fn) {
      // Don't bother if no value provided
      if (obj === null || typeof obj === 'undefined') {
        return;
      }

      // Force an array if not already something iterable
      if (typeof obj !== 'object') {
        /*eslint no-param-reassign:0*/
        obj = [obj];
      }

      if (isArray$C(obj)) {
        // Iterate over array values
        for (var i = 0, l = obj.length; i < l; i++) {
          fn.call(null, obj[i], i, obj);
        }
      } else {
        // Iterate over object keys
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) {
            fn.call(null, obj[key], key, obj);
          }
        }
      }
    }

    /**
     * Accepts varargs expecting each argument to be an object, then
     * immutably merges the properties of each object and returns result.
     *
     * When multiple objects contain the same key the later object in
     * the arguments list will take precedence.
     *
     * Example:
     *
     * ```js
     * var result = merge({foo: 123}, {foo: 456});
     * console.log(result.foo); // outputs 456
     * ```
     *
     * @param {Object} obj1 Object to merge
     * @returns {Object} Result of all merge properties
     */
    function merge$5(/* obj1, obj2, obj3, ... */) {
      var result = {};
      function assignValue(val, key) {
        if (isPlainObject$5(result[key]) && isPlainObject$5(val)) {
          result[key] = merge$5(result[key], val);
        } else if (isPlainObject$5(val)) {
          result[key] = merge$5({}, val);
        } else if (isArray$C(val)) {
          result[key] = val.slice();
        } else {
          result[key] = val;
        }
      }

      for (var i = 0, l = arguments.length; i < l; i++) {
        forEach$2(arguments[i], assignValue);
      }
      return result;
    }

    /**
     * Extends object a by mutably adding to it the properties of object b.
     *
     * @param {Object} a The object to be extended
     * @param {Object} b The object to copy properties from
     * @param {Object} thisArg The object to bind function to
     * @return {Object} The resulting value of object a
     */
    function extend$4(a, b, thisArg) {
      forEach$2(b, function assignValue(val, key) {
        if (thisArg && typeof val === 'function') {
          a[key] = bind$4(val, thisArg);
        } else {
          a[key] = val;
        }
      });
      return a;
    }

    /**
     * Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)
     *
     * @param {string} content with BOM
     * @return {string} content value without BOM
     */
    function stripBOM$1(content) {
      if (content.charCodeAt(0) === 0xFEFF) {
        content = content.slice(1);
      }
      return content;
    }

    var utils$B = {
      isArray: isArray$C,
      isArrayBuffer: isArrayBuffer$1,
      isBuffer: isBuffer$9,
      isFormData: isFormData$1,
      isArrayBufferView: isArrayBufferView$1,
      isString: isString$3,
      isNumber: isNumber$3,
      isObject: isObject$m,
      isPlainObject: isPlainObject$5,
      isUndefined: isUndefined$1,
      isDate: isDate$1,
      isFile: isFile$1,
      isBlob: isBlob$1,
      isFunction: isFunction$9,
      isStream: isStream$1,
      isURLSearchParams: isURLSearchParams$1,
      isStandardBrowserEnv: isStandardBrowserEnv$1,
      forEach: forEach$2,
      merge: merge$5,
      extend: extend$4,
      trim: trim$2,
      stripBOM: stripBOM$1
    };

    var utils$A = utils$B;

    function encode$1(val) {
      return encodeURIComponent(val).
        replace(/%3A/gi, ':').
        replace(/%24/g, '$').
        replace(/%2C/gi, ',').
        replace(/%20/g, '+').
        replace(/%5B/gi, '[').
        replace(/%5D/gi, ']');
    }

    /**
     * Build a URL by appending params to the end
     *
     * @param {string} url The base of the url (e.g., http://www.google.com)
     * @param {object} [params] The params to be appended
     * @returns {string} The formatted url
     */
    var buildURL$7 = function buildURL(url, params, paramsSerializer) {
      /*eslint no-param-reassign:0*/
      if (!params) {
        return url;
      }

      var serializedParams;
      if (paramsSerializer) {
        serializedParams = paramsSerializer(params);
      } else if (utils$A.isURLSearchParams(params)) {
        serializedParams = params.toString();
      } else {
        var parts = [];

        utils$A.forEach(params, function serialize(val, key) {
          if (val === null || typeof val === 'undefined') {
            return;
          }

          if (utils$A.isArray(val)) {
            key = key + '[]';
          } else {
            val = [val];
          }

          utils$A.forEach(val, function parseValue(v) {
            if (utils$A.isDate(v)) {
              v = v.toISOString();
            } else if (utils$A.isObject(v)) {
              v = JSON.stringify(v);
            }
            parts.push(encode$1(key) + '=' + encode$1(v));
          });
        });

        serializedParams = parts.join('&');
      }

      if (serializedParams) {
        var hashmarkIndex = url.indexOf('#');
        if (hashmarkIndex !== -1) {
          url = url.slice(0, hashmarkIndex);
        }

        url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;
      }

      return url;
    };

    var utils$z = utils$B;

    function InterceptorManager$3() {
      this.handlers = [];
    }

    /**
     * Add a new interceptor to the stack
     *
     * @param {Function} fulfilled The function to handle `then` for a `Promise`
     * @param {Function} rejected The function to handle `reject` for a `Promise`
     *
     * @return {Number} An ID used to remove interceptor later
     */
    InterceptorManager$3.prototype.use = function use(fulfilled, rejected, options) {
      this.handlers.push({
        fulfilled: fulfilled,
        rejected: rejected,
        synchronous: options ? options.synchronous : false,
        runWhen: options ? options.runWhen : null
      });
      return this.handlers.length - 1;
    };

    /**
     * Remove an interceptor from the stack
     *
     * @param {Number} id The ID that was returned by `use`
     */
    InterceptorManager$3.prototype.eject = function eject(id) {
      if (this.handlers[id]) {
        this.handlers[id] = null;
      }
    };

    /**
     * Iterate over all the registered interceptors
     *
     * This method is particularly useful for skipping over any
     * interceptors that may have become `null` calling `eject`.
     *
     * @param {Function} fn The function to call for each interceptor
     */
    InterceptorManager$3.prototype.forEach = function forEach(fn) {
      utils$z.forEach(this.handlers, function forEachHandler(h) {
        if (h !== null) {
          fn(h);
        }
      });
    };

    var InterceptorManager_1$1 = InterceptorManager$3;

    var utils$y = utils$B;

    var normalizeHeaderName$3 = function normalizeHeaderName(headers, normalizedName) {
      utils$y.forEach(headers, function processHeader(value, name) {
        if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {
          headers[normalizedName] = value;
          delete headers[name];
        }
      });
    };

    /**
     * Update an Error with the specified config, error code, and response.
     *
     * @param {Error} error The error to update.
     * @param {Object} config The config.
     * @param {string} [code] The error code (for example, 'ECONNABORTED').
     * @param {Object} [request] The request.
     * @param {Object} [response] The response.
     * @returns {Error} The error.
     */
    var enhanceError$7 = function enhanceError(error, config, code, request, response) {
      error.config = config;
      if (code) {
        error.code = code;
      }

      error.request = request;
      error.response = response;
      error.isAxiosError = true;

      error.toJSON = function toJSON() {
        return {
          // Standard
          message: this.message,
          name: this.name,
          // Microsoft
          description: this.description,
          number: this.number,
          // Mozilla
          fileName: this.fileName,
          lineNumber: this.lineNumber,
          columnNumber: this.columnNumber,
          stack: this.stack,
          // Axios
          config: this.config,
          code: this.code,
          status: this.response && this.response.status ? this.response.status : null
        };
      };
      return error;
    };

    var enhanceError$6 = enhanceError$7;

    /**
     * Create an Error with the specified message, config, error code, request and response.
     *
     * @param {string} message The error message.
     * @param {Object} config The config.
     * @param {string} [code] The error code (for example, 'ECONNABORTED').
     * @param {Object} [request] The request.
     * @param {Object} [response] The response.
     * @returns {Error} The created error.
     */
    var createError$7 = function createError(message, config, code, request, response) {
      var error = new Error(message);
      return enhanceError$6(error, config, code, request, response);
    };

    var createError$6 = createError$7;

    /**
     * Resolve or reject a Promise based on response status.
     *
     * @param {Function} resolve A function that resolves the promise.
     * @param {Function} reject A function that rejects the promise.
     * @param {object} response The response.
     */
    var settle$5 = function settle(resolve, reject, response) {
      var validateStatus = response.config.validateStatus;
      if (!response.status || !validateStatus || validateStatus(response.status)) {
        resolve(response);
      } else {
        reject(createError$6(
          'Request failed with status code ' + response.status,
          response.config,
          null,
          response.request,
          response
        ));
      }
    };

    var utils$x = utils$B;

    var cookies$3 = (
      utils$x.isStandardBrowserEnv() ?

      // Standard browser envs support document.cookie
        (function standardBrowserEnv() {
          return {
            write: function write(name, value, expires, path, domain, secure) {
              var cookie = [];
              cookie.push(name + '=' + encodeURIComponent(value));

              if (utils$x.isNumber(expires)) {
                cookie.push('expires=' + new Date(expires).toGMTString());
              }

              if (utils$x.isString(path)) {
                cookie.push('path=' + path);
              }

              if (utils$x.isString(domain)) {
                cookie.push('domain=' + domain);
              }

              if (secure === true) {
                cookie.push('secure');
              }

              document.cookie = cookie.join('; ');
            },

            read: function read(name) {
              var match = document.cookie.match(new RegExp('(^|;\\s*)(' + name + ')=([^;]*)'));
              return (match ? decodeURIComponent(match[3]) : null);
            },

            remove: function remove(name) {
              this.write(name, '', Date.now() - 86400000);
            }
          };
        })() :

      // Non standard browser env (web workers, react-native) lack needed support.
        (function nonStandardBrowserEnv() {
          return {
            write: function write() {},
            read: function read() { return null; },
            remove: function remove() {}
          };
        })()
    );

    /**
     * Determines whether the specified URL is absolute
     *
     * @param {string} url The URL to test
     * @returns {boolean} True if the specified URL is absolute, otherwise false
     */
    var isAbsoluteURL$3 = function isAbsoluteURL(url) {
      // A URL is considered absolute if it begins with "<scheme>://" or "//" (protocol-relative URL).
      // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed
      // by any combination of letters, digits, plus, period, or hyphen.
      return /^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(url);
    };

    /**
     * Creates a new URL by combining the specified URLs
     *
     * @param {string} baseURL The base URL
     * @param {string} relativeURL The relative URL
     * @returns {string} The combined URL
     */
    var combineURLs$3 = function combineURLs(baseURL, relativeURL) {
      return relativeURL
        ? baseURL.replace(/\/+$/, '') + '/' + relativeURL.replace(/^\/+/, '')
        : baseURL;
    };

    var isAbsoluteURL$2 = isAbsoluteURL$3;
    var combineURLs$2 = combineURLs$3;

    /**
     * Creates a new URL by combining the baseURL with the requestedURL,
     * only when the requestedURL is not already an absolute URL.
     * If the requestURL is absolute, this function returns the requestedURL untouched.
     *
     * @param {string} baseURL The base URL
     * @param {string} requestedURL Absolute or relative URL to combine
     * @returns {string} The combined full path
     */
    var buildFullPath$5 = function buildFullPath(baseURL, requestedURL) {
      if (baseURL && !isAbsoluteURL$2(requestedURL)) {
        return combineURLs$2(baseURL, requestedURL);
      }
      return requestedURL;
    };

    var utils$w = utils$B;

    // Headers whose duplicates are ignored by node
    // c.f. https://nodejs.org/api/http.html#http_message_headers
    var ignoreDuplicateOf$1 = [
      'age', 'authorization', 'content-length', 'content-type', 'etag',
      'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since',
      'last-modified', 'location', 'max-forwards', 'proxy-authorization',
      'referer', 'retry-after', 'user-agent'
    ];

    /**
     * Parse headers into an object
     *
     * ```
     * Date: Wed, 27 Aug 2014 08:58:49 GMT
     * Content-Type: application/json
     * Connection: keep-alive
     * Transfer-Encoding: chunked
     * ```
     *
     * @param {String} headers Headers needing to be parsed
     * @returns {Object} Headers parsed into an object
     */
    var parseHeaders$3 = function parseHeaders(headers) {
      var parsed = {};
      var key;
      var val;
      var i;

      if (!headers) { return parsed; }

      utils$w.forEach(headers.split('\n'), function parser(line) {
        i = line.indexOf(':');
        key = utils$w.trim(line.substr(0, i)).toLowerCase();
        val = utils$w.trim(line.substr(i + 1));

        if (key) {
          if (parsed[key] && ignoreDuplicateOf$1.indexOf(key) >= 0) {
            return;
          }
          if (key === 'set-cookie') {
            parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);
          } else {
            parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;
          }
        }
      });

      return parsed;
    };

    var utils$v = utils$B;

    var isURLSameOrigin$3 = (
      utils$v.isStandardBrowserEnv() ?

      // Standard browser envs have full support of the APIs needed to test
      // whether the request URL is of the same origin as current location.
        (function standardBrowserEnv() {
          var msie = /(msie|trident)/i.test(navigator.userAgent);
          var urlParsingNode = document.createElement('a');
          var originURL;

          /**
        * Parse a URL to discover it's components
        *
        * @param {String} url The URL to be parsed
        * @returns {Object}
        */
          function resolveURL(url) {
            var href = url;

            if (msie) {
            // IE needs attribute set twice to normalize properties
              urlParsingNode.setAttribute('href', href);
              href = urlParsingNode.href;
            }

            urlParsingNode.setAttribute('href', href);

            // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils
            return {
              href: urlParsingNode.href,
              protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',
              host: urlParsingNode.host,
              search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, '') : '',
              hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',
              hostname: urlParsingNode.hostname,
              port: urlParsingNode.port,
              pathname: (urlParsingNode.pathname.charAt(0) === '/') ?
                urlParsingNode.pathname :
                '/' + urlParsingNode.pathname
            };
          }

          originURL = resolveURL(window.location.href);

          /**
        * Determine if a URL shares the same origin as the current location
        *
        * @param {String} requestURL The URL to test
        * @returns {boolean} True if URL shares the same origin, otherwise false
        */
          return function isURLSameOrigin(requestURL) {
            var parsed = (utils$v.isString(requestURL)) ? resolveURL(requestURL) : requestURL;
            return (parsed.protocol === originURL.protocol &&
                parsed.host === originURL.host);
          };
        })() :

      // Non standard browser envs (web workers, react-native) lack needed support.
        (function nonStandardBrowserEnv() {
          return function isURLSameOrigin() {
            return true;
          };
        })()
    );

    /**
     * A `Cancel` is an object that is thrown when an operation is canceled.
     *
     * @class
     * @param {string=} message The message.
     */
    function Cancel$9(message) {
      this.message = message;
    }

    Cancel$9.prototype.toString = function toString() {
      return 'Cancel' + (this.message ? ': ' + this.message : '');
    };

    Cancel$9.prototype.__CANCEL__ = true;

    var Cancel_1$1 = Cancel$9;

    var utils$u = utils$B;
    var settle$4 = settle$5;
    var cookies$2 = cookies$3;
    var buildURL$6 = buildURL$7;
    var buildFullPath$4 = buildFullPath$5;
    var parseHeaders$2 = parseHeaders$3;
    var isURLSameOrigin$2 = isURLSameOrigin$3;
    var createError$5 = createError$7;
    var defaults$i = defaults_1$3;
    var Cancel$8 = Cancel_1$1;

    var xhr$1 = function xhrAdapter(config) {
      return new Promise(function dispatchXhrRequest(resolve, reject) {
        var requestData = config.data;
        var requestHeaders = config.headers;
        var responseType = config.responseType;
        var onCanceled;
        function done() {
          if (config.cancelToken) {
            config.cancelToken.unsubscribe(onCanceled);
          }

          if (config.signal) {
            config.signal.removeEventListener('abort', onCanceled);
          }
        }

        if (utils$u.isFormData(requestData)) {
          delete requestHeaders['Content-Type']; // Let the browser set it
        }

        var request = new XMLHttpRequest();

        // HTTP basic authentication
        if (config.auth) {
          var username = config.auth.username || '';
          var password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : '';
          requestHeaders.Authorization = 'Basic ' + btoa(username + ':' + password);
        }

        var fullPath = buildFullPath$4(config.baseURL, config.url);
        request.open(config.method.toUpperCase(), buildURL$6(fullPath, config.params, config.paramsSerializer), true);

        // Set the request timeout in MS
        request.timeout = config.timeout;

        function onloadend() {
          if (!request) {
            return;
          }
          // Prepare the response
          var responseHeaders = 'getAllResponseHeaders' in request ? parseHeaders$2(request.getAllResponseHeaders()) : null;
          var responseData = !responseType || responseType === 'text' ||  responseType === 'json' ?
            request.responseText : request.response;
          var response = {
            data: responseData,
            status: request.status,
            statusText: request.statusText,
            headers: responseHeaders,
            config: config,
            request: request
          };

          settle$4(function _resolve(value) {
            resolve(value);
            done();
          }, function _reject(err) {
            reject(err);
            done();
          }, response);

          // Clean up request
          request = null;
        }

        if ('onloadend' in request) {
          // Use onloadend if available
          request.onloadend = onloadend;
        } else {
          // Listen for ready state to emulate onloadend
          request.onreadystatechange = function handleLoad() {
            if (!request || request.readyState !== 4) {
              return;
            }

            // The request errored out and we didn't get a response, this will be
            // handled by onerror instead
            // With one exception: request that using file: protocol, most browsers
            // will return status as 0 even though it's a successful request
            if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {
              return;
            }
            // readystate handler is calling before onerror or ontimeout handlers,
            // so we should call onloadend on the next 'tick'
            setTimeout(onloadend);
          };
        }

        // Handle browser request cancellation (as opposed to a manual cancellation)
        request.onabort = function handleAbort() {
          if (!request) {
            return;
          }

          reject(createError$5('Request aborted', config, 'ECONNABORTED', request));

          // Clean up request
          request = null;
        };

        // Handle low level network errors
        request.onerror = function handleError() {
          // Real errors are hidden from us by the browser
          // onerror should only fire if it's a network error
          reject(createError$5('Network Error', config, null, request));

          // Clean up request
          request = null;
        };

        // Handle timeout
        request.ontimeout = function handleTimeout() {
          var timeoutErrorMessage = config.timeout ? 'timeout of ' + config.timeout + 'ms exceeded' : 'timeout exceeded';
          var transitional = config.transitional || defaults$i.transitional;
          if (config.timeoutErrorMessage) {
            timeoutErrorMessage = config.timeoutErrorMessage;
          }
          reject(createError$5(
            timeoutErrorMessage,
            config,
            transitional.clarifyTimeoutError ? 'ETIMEDOUT' : 'ECONNABORTED',
            request));

          // Clean up request
          request = null;
        };

        // Add xsrf header
        // This is only done if running in a standard browser environment.
        // Specifically not if we're in a web worker, or react-native.
        if (utils$u.isStandardBrowserEnv()) {
          // Add xsrf header
          var xsrfValue = (config.withCredentials || isURLSameOrigin$2(fullPath)) && config.xsrfCookieName ?
            cookies$2.read(config.xsrfCookieName) :
            undefined;

          if (xsrfValue) {
            requestHeaders[config.xsrfHeaderName] = xsrfValue;
          }
        }

        // Add headers to the request
        if ('setRequestHeader' in request) {
          utils$u.forEach(requestHeaders, function setRequestHeader(val, key) {
            if (typeof requestData === 'undefined' && key.toLowerCase() === 'content-type') {
              // Remove Content-Type if data is undefined
              delete requestHeaders[key];
            } else {
              // Otherwise add header to the request
              request.setRequestHeader(key, val);
            }
          });
        }

        // Add withCredentials to request if needed
        if (!utils$u.isUndefined(config.withCredentials)) {
          request.withCredentials = !!config.withCredentials;
        }

        // Add responseType to request if needed
        if (responseType && responseType !== 'json') {
          request.responseType = config.responseType;
        }

        // Handle progress if needed
        if (typeof config.onDownloadProgress === 'function') {
          request.addEventListener('progress', config.onDownloadProgress);
        }

        // Not all browsers support upload events
        if (typeof config.onUploadProgress === 'function' && request.upload) {
          request.upload.addEventListener('progress', config.onUploadProgress);
        }

        if (config.cancelToken || config.signal) {
          // Handle cancellation
          // eslint-disable-next-line func-names
          onCanceled = function(cancel) {
            if (!request) {
              return;
            }
            reject(!cancel || (cancel && cancel.type) ? new Cancel$8('canceled') : cancel);
            request.abort();
            request = null;
          };

          config.cancelToken && config.cancelToken.subscribe(onCanceled);
          if (config.signal) {
            config.signal.aborted ? onCanceled() : config.signal.addEventListener('abort', onCanceled);
          }
        }

        if (!requestData) {
          requestData = null;
        }

        // Send the request
        request.send(requestData);
      });
    };

    var followRedirects$1 = {exports: {}};

    var debug$a;

    var debug_1$2 = function () {
      if (!debug$a) {
        try {
          /* eslint global-require: off */
          debug$a = require("debug")("follow-redirects");
        }
        catch (error) { /* */ }
        if (typeof debug$a !== "function") {
          debug$a = function () { /* */ };
        }
      }
      debug$a.apply(null, arguments);
    };

    var url$3 = require$$0__default$5["default"];
    var URL$1 = url$3.URL;
    var http$3 = require$$1__default["default"];
    var https$3 = require$$2__default$1["default"];
    var Writable$3 = require$$0__default$1["default"].Writable;
    var assert$7 = require$$0__default$4["default"];
    var debug$9 = debug_1$2;

    // Create handlers that pass events from native requests
    var events$3 = ["abort", "aborted", "connect", "error", "socket", "timeout"];
    var eventHandlers$1 = Object.create(null);
    events$3.forEach(function (event) {
      eventHandlers$1[event] = function (arg1, arg2, arg3) {
        this._redirectable.emit(event, arg1, arg2, arg3);
      };
    });

    // Error types with codes
    var RedirectionError$1 = createErrorType$2(
      "ERR_FR_REDIRECTION_FAILURE",
      "Redirected request failed"
    );
    var TooManyRedirectsError$1 = createErrorType$2(
      "ERR_FR_TOO_MANY_REDIRECTS",
      "Maximum number of redirects exceeded"
    );
    var MaxBodyLengthExceededError$1 = createErrorType$2(
      "ERR_FR_MAX_BODY_LENGTH_EXCEEDED",
      "Request body larger than maxBodyLength limit"
    );
    var WriteAfterEndError$1 = createErrorType$2(
      "ERR_STREAM_WRITE_AFTER_END",
      "write after end"
    );

    // An HTTP(S) request that can be redirected
    function RedirectableRequest$1(options, responseCallback) {
      // Initialize the request
      Writable$3.call(this);
      this._sanitizeOptions(options);
      this._options = options;
      this._ended = false;
      this._ending = false;
      this._redirectCount = 0;
      this._redirects = [];
      this._requestBodyLength = 0;
      this._requestBodyBuffers = [];

      // Attach a callback if passed
      if (responseCallback) {
        this.on("response", responseCallback);
      }

      // React to responses of native requests
      var self = this;
      this._onNativeResponse = function (response) {
        self._processResponse(response);
      };

      // Perform the first request
      this._performRequest();
    }
    RedirectableRequest$1.prototype = Object.create(Writable$3.prototype);

    RedirectableRequest$1.prototype.abort = function () {
      abortRequest$1(this._currentRequest);
      this.emit("abort");
    };

    // Writes buffered data to the current native request
    RedirectableRequest$1.prototype.write = function (data, encoding, callback) {
      // Writing is not allowed if end has been called
      if (this._ending) {
        throw new WriteAfterEndError$1();
      }

      // Validate input and shift parameters if necessary
      if (!(typeof data === "string" || typeof data === "object" && ("length" in data))) {
        throw new TypeError("data should be a string, Buffer or Uint8Array");
      }
      if (typeof encoding === "function") {
        callback = encoding;
        encoding = null;
      }

      // Ignore empty buffers, since writing them doesn't invoke the callback
      // https://github.com/nodejs/node/issues/22066
      if (data.length === 0) {
        if (callback) {
          callback();
        }
        return;
      }
      // Only write when we don't exceed the maximum body length
      if (this._requestBodyLength + data.length <= this._options.maxBodyLength) {
        this._requestBodyLength += data.length;
        this._requestBodyBuffers.push({ data: data, encoding: encoding });
        this._currentRequest.write(data, encoding, callback);
      }
      // Error when we exceed the maximum body length
      else {
        this.emit("error", new MaxBodyLengthExceededError$1());
        this.abort();
      }
    };

    // Ends the current native request
    RedirectableRequest$1.prototype.end = function (data, encoding, callback) {
      // Shift parameters if necessary
      if (typeof data === "function") {
        callback = data;
        data = encoding = null;
      }
      else if (typeof encoding === "function") {
        callback = encoding;
        encoding = null;
      }

      // Write data if needed and end
      if (!data) {
        this._ended = this._ending = true;
        this._currentRequest.end(null, null, callback);
      }
      else {
        var self = this;
        var currentRequest = this._currentRequest;
        this.write(data, encoding, function () {
          self._ended = true;
          currentRequest.end(null, null, callback);
        });
        this._ending = true;
      }
    };

    // Sets a header value on the current native request
    RedirectableRequest$1.prototype.setHeader = function (name, value) {
      this._options.headers[name] = value;
      this._currentRequest.setHeader(name, value);
    };

    // Clears a header value on the current native request
    RedirectableRequest$1.prototype.removeHeader = function (name) {
      delete this._options.headers[name];
      this._currentRequest.removeHeader(name);
    };

    // Global timeout for all underlying requests
    RedirectableRequest$1.prototype.setTimeout = function (msecs, callback) {
      var self = this;

      // Destroys the socket on timeout
      function destroyOnTimeout(socket) {
        socket.setTimeout(msecs);
        socket.removeListener("timeout", socket.destroy);
        socket.addListener("timeout", socket.destroy);
      }

      // Sets up a timer to trigger a timeout event
      function startTimer(socket) {
        if (self._timeout) {
          clearTimeout(self._timeout);
        }
        self._timeout = setTimeout(function () {
          self.emit("timeout");
          clearTimer();
        }, msecs);
        destroyOnTimeout(socket);
      }

      // Stops a timeout from triggering
      function clearTimer() {
        // Clear the timeout
        if (self._timeout) {
          clearTimeout(self._timeout);
          self._timeout = null;
        }

        // Clean up all attached listeners
        self.removeListener("abort", clearTimer);
        self.removeListener("error", clearTimer);
        self.removeListener("response", clearTimer);
        if (callback) {
          self.removeListener("timeout", callback);
        }
        if (!self.socket) {
          self._currentRequest.removeListener("socket", startTimer);
        }
      }

      // Attach callback if passed
      if (callback) {
        this.on("timeout", callback);
      }

      // Start the timer if or when the socket is opened
      if (this.socket) {
        startTimer(this.socket);
      }
      else {
        this._currentRequest.once("socket", startTimer);
      }

      // Clean up on events
      this.on("socket", destroyOnTimeout);
      this.on("abort", clearTimer);
      this.on("error", clearTimer);
      this.on("response", clearTimer);

      return this;
    };

    // Proxy all other public ClientRequest methods
    [
      "flushHeaders", "getHeader",
      "setNoDelay", "setSocketKeepAlive",
    ].forEach(function (method) {
      RedirectableRequest$1.prototype[method] = function (a, b) {
        return this._currentRequest[method](a, b);
      };
    });

    // Proxy all public ClientRequest properties
    ["aborted", "connection", "socket"].forEach(function (property) {
      Object.defineProperty(RedirectableRequest$1.prototype, property, {
        get: function () { return this._currentRequest[property]; },
      });
    });

    RedirectableRequest$1.prototype._sanitizeOptions = function (options) {
      // Ensure headers are always present
      if (!options.headers) {
        options.headers = {};
      }

      // Since http.request treats host as an alias of hostname,
      // but the url module interprets host as hostname plus port,
      // eliminate the host property to avoid confusion.
      if (options.host) {
        // Use hostname if set, because it has precedence
        if (!options.hostname) {
          options.hostname = options.host;
        }
        delete options.host;
      }

      // Complete the URL object when necessary
      if (!options.pathname && options.path) {
        var searchPos = options.path.indexOf("?");
        if (searchPos < 0) {
          options.pathname = options.path;
        }
        else {
          options.pathname = options.path.substring(0, searchPos);
          options.search = options.path.substring(searchPos);
        }
      }
    };


    // Executes the next native request (initial or redirect)
    RedirectableRequest$1.prototype._performRequest = function () {
      // Load the native protocol
      var protocol = this._options.protocol;
      var nativeProtocol = this._options.nativeProtocols[protocol];
      if (!nativeProtocol) {
        this.emit("error", new TypeError("Unsupported protocol " + protocol));
        return;
      }

      // If specified, use the agent corresponding to the protocol
      // (HTTP and HTTPS use different types of agents)
      if (this._options.agents) {
        var scheme = protocol.substr(0, protocol.length - 1);
        this._options.agent = this._options.agents[scheme];
      }

      // Create the native request
      var request = this._currentRequest =
            nativeProtocol.request(this._options, this._onNativeResponse);
      this._currentUrl = url$3.format(this._options);

      // Set up event handlers
      request._redirectable = this;
      for (var e = 0; e < events$3.length; e++) {
        request.on(events$3[e], eventHandlers$1[events$3[e]]);
      }

      // End a redirected request
      // (The first request must be ended explicitly with RedirectableRequest#end)
      if (this._isRedirect) {
        // Write the request entity and end.
        var i = 0;
        var self = this;
        var buffers = this._requestBodyBuffers;
        (function writeNext(error) {
          // Only write if this request has not been redirected yet
          /* istanbul ignore else */
          if (request === self._currentRequest) {
            // Report any write errors
            /* istanbul ignore if */
            if (error) {
              self.emit("error", error);
            }
            // Write the next buffer if there are still left
            else if (i < buffers.length) {
              var buffer = buffers[i++];
              /* istanbul ignore else */
              if (!request.finished) {
                request.write(buffer.data, buffer.encoding, writeNext);
              }
            }
            // End the request if `end` has been called on us
            else if (self._ended) {
              request.end();
            }
          }
        }());
      }
    };

    // Processes a response from the current native request
    RedirectableRequest$1.prototype._processResponse = function (response) {
      // Store the redirected response
      var statusCode = response.statusCode;
      if (this._options.trackRedirects) {
        this._redirects.push({
          url: this._currentUrl,
          headers: response.headers,
          statusCode: statusCode,
        });
      }

      // RFC7231§6.4: The 3xx (Redirection) class of status code indicates
      // that further action needs to be taken by the user agent in order to
      // fulfill the request. If a Location header field is provided,
      // the user agent MAY automatically redirect its request to the URI
      // referenced by the Location field value,
      // even if the specific status code is not understood.
      var location = response.headers.location;
      if (location && this._options.followRedirects !== false &&
          statusCode >= 300 && statusCode < 400) {
        // Abort the current request
        abortRequest$1(this._currentRequest);
        // Discard the remainder of the response to avoid waiting for data
        response.destroy();

        // RFC7231§6.4: A client SHOULD detect and intervene
        // in cyclical redirections (i.e., "infinite" redirection loops).
        if (++this._redirectCount > this._options.maxRedirects) {
          this.emit("error", new TooManyRedirectsError$1());
          return;
        }

        // RFC7231§6.4: Automatic redirection needs to done with
        // care for methods not known to be safe, […]
        // RFC7231§6.4.2–3: For historical reasons, a user agent MAY change
        // the request method from POST to GET for the subsequent request.
        if ((statusCode === 301 || statusCode === 302) && this._options.method === "POST" ||
            // RFC7231§6.4.4: The 303 (See Other) status code indicates that
            // the server is redirecting the user agent to a different resource […]
            // A user agent can perform a retrieval request targeting that URI
            // (a GET or HEAD request if using HTTP) […]
            (statusCode === 303) && !/^(?:GET|HEAD)$/.test(this._options.method)) {
          this._options.method = "GET";
          // Drop a possible entity and headers related to it
          this._requestBodyBuffers = [];
          removeMatchingHeaders$1(/^content-/i, this._options.headers);
        }

        // Drop the Host header, as the redirect might lead to a different host
        var currentHostHeader = removeMatchingHeaders$1(/^host$/i, this._options.headers);

        // If the redirect is relative, carry over the host of the last request
        var currentUrlParts = url$3.parse(this._currentUrl);
        var currentHost = currentHostHeader || currentUrlParts.host;
        var currentUrl = /^\w+:/.test(location) ? this._currentUrl :
          url$3.format(Object.assign(currentUrlParts, { host: currentHost }));

        // Determine the URL of the redirection
        var redirectUrl;
        try {
          redirectUrl = url$3.resolve(currentUrl, location);
        }
        catch (cause) {
          this.emit("error", new RedirectionError$1(cause));
          return;
        }

        // Create the redirected request
        debug$9("redirecting to", redirectUrl);
        this._isRedirect = true;
        var redirectUrlParts = url$3.parse(redirectUrl);
        Object.assign(this._options, redirectUrlParts);

        // Drop the Authorization header if redirecting to another domain
        if (!(redirectUrlParts.host === currentHost || isSubdomainOf$1(redirectUrlParts.host, currentHost))) {
          removeMatchingHeaders$1(/^authorization$/i, this._options.headers);
        }

        // Evaluate the beforeRedirect callback
        if (typeof this._options.beforeRedirect === "function") {
          var responseDetails = { headers: response.headers };
          try {
            this._options.beforeRedirect.call(null, this._options, responseDetails);
          }
          catch (err) {
            this.emit("error", err);
            return;
          }
          this._sanitizeOptions(this._options);
        }

        // Perform the redirected request
        try {
          this._performRequest();
        }
        catch (cause) {
          this.emit("error", new RedirectionError$1(cause));
        }
      }
      else {
        // The response is not a redirect; return it as-is
        response.responseUrl = this._currentUrl;
        response.redirects = this._redirects;
        this.emit("response", response);

        // Clean up
        this._requestBodyBuffers = [];
      }
    };

    // Wraps the key/value object of protocols with redirect functionality
    function wrap$1(protocols) {
      // Default settings
      var exports = {
        maxRedirects: 21,
        maxBodyLength: 10 * 1024 * 1024,
      };

      // Wrap each protocol
      var nativeProtocols = {};
      Object.keys(protocols).forEach(function (scheme) {
        var protocol = scheme + ":";
        var nativeProtocol = nativeProtocols[protocol] = protocols[scheme];
        var wrappedProtocol = exports[scheme] = Object.create(nativeProtocol);

        // Executes a request, following redirects
        function request(input, options, callback) {
          // Parse parameters
          if (typeof input === "string") {
            var urlStr = input;
            try {
              input = urlToOptions$1(new URL$1(urlStr));
            }
            catch (err) {
              /* istanbul ignore next */
              input = url$3.parse(urlStr);
            }
          }
          else if (URL$1 && (input instanceof URL$1)) {
            input = urlToOptions$1(input);
          }
          else {
            callback = options;
            options = input;
            input = { protocol: protocol };
          }
          if (typeof options === "function") {
            callback = options;
            options = null;
          }

          // Set defaults
          options = Object.assign({
            maxRedirects: exports.maxRedirects,
            maxBodyLength: exports.maxBodyLength,
          }, input, options);
          options.nativeProtocols = nativeProtocols;

          assert$7.equal(options.protocol, protocol, "protocol mismatch");
          debug$9("options", options);
          return new RedirectableRequest$1(options, callback);
        }

        // Executes a GET request, following redirects
        function get(input, options, callback) {
          var wrappedRequest = wrappedProtocol.request(input, options, callback);
          wrappedRequest.end();
          return wrappedRequest;
        }

        // Expose the properties on the wrapped protocol
        Object.defineProperties(wrappedProtocol, {
          request: { value: request, configurable: true, enumerable: true, writable: true },
          get: { value: get, configurable: true, enumerable: true, writable: true },
        });
      });
      return exports;
    }

    /* istanbul ignore next */
    function noop$a() { /* empty */ }

    // from https://github.com/nodejs/node/blob/master/lib/internal/url.js
    function urlToOptions$1(urlObject) {
      var options = {
        protocol: urlObject.protocol,
        hostname: urlObject.hostname.startsWith("[") ?
          /* istanbul ignore next */
          urlObject.hostname.slice(1, -1) :
          urlObject.hostname,
        hash: urlObject.hash,
        search: urlObject.search,
        pathname: urlObject.pathname,
        path: urlObject.pathname + urlObject.search,
        href: urlObject.href,
      };
      if (urlObject.port !== "") {
        options.port = Number(urlObject.port);
      }
      return options;
    }

    function removeMatchingHeaders$1(regex, headers) {
      var lastValue;
      for (var header in headers) {
        if (regex.test(header)) {
          lastValue = headers[header].toString().trim();
          delete headers[header];
        }
      }
      return lastValue;
    }

    function createErrorType$2(code, defaultMessage) {
      function CustomError(cause) {
        Error.captureStackTrace(this, this.constructor);
        if (!cause) {
          this.message = defaultMessage;
        }
        else {
          this.message = defaultMessage + ": " + cause.message;
          this.cause = cause;
        }
      }
      CustomError.prototype = new Error();
      CustomError.prototype.constructor = CustomError;
      CustomError.prototype.name = "Error [" + code + "]";
      CustomError.prototype.code = code;
      return CustomError;
    }

    function abortRequest$1(request) {
      for (var e = 0; e < events$3.length; e++) {
        request.removeListener(events$3[e], eventHandlers$1[events$3[e]]);
      }
      request.on("error", noop$a);
      request.abort();
    }

    function isSubdomainOf$1(subdomain, domain) {
      const dot = subdomain.length - domain.length - 1;
      return dot > 0 && subdomain[dot] === "." && subdomain.endsWith(domain);
    }

    // Exports
    followRedirects$1.exports = wrap$1({ http: http$3, https: https$3 });
    followRedirects$1.exports.wrap = wrap$1;

    var data$1 = {
      "version": "0.24.0"
    };

    var utils$t = utils$B;
    var settle$3 = settle$5;
    var buildFullPath$3 = buildFullPath$5;
    var buildURL$5 = buildURL$7;
    var http$2 = require$$1__default["default"];
    var https$2 = require$$2__default$1["default"];
    var httpFollow$1 = followRedirects$1.exports.http;
    var httpsFollow$1 = followRedirects$1.exports.https;
    var url$2 = require$$0__default$5["default"];
    var zlib$1 = require$$8__default["default"];
    var VERSION$3 = data$1.version;
    var createError$4 = createError$7;
    var enhanceError$5 = enhanceError$7;
    var defaults$h = defaults_1$3;
    var Cancel$7 = Cancel_1$1;

    var isHttps$1 = /https:?/;

    /**
     *
     * @param {http.ClientRequestArgs} options
     * @param {AxiosProxyConfig} proxy
     * @param {string} location
     */
    function setProxy$1(options, proxy, location) {
      options.hostname = proxy.host;
      options.host = proxy.host;
      options.port = proxy.port;
      options.path = location;

      // Basic proxy authorization
      if (proxy.auth) {
        var base64 = Buffer.from(proxy.auth.username + ':' + proxy.auth.password, 'utf8').toString('base64');
        options.headers['Proxy-Authorization'] = 'Basic ' + base64;
      }

      // If a proxy is used, any redirects must also pass through the proxy
      options.beforeRedirect = function beforeRedirect(redirection) {
        redirection.headers.host = redirection.host;
        setProxy$1(redirection, proxy, redirection.href);
      };
    }

    /*eslint consistent-return:0*/
    var http_1$1 = function httpAdapter(config) {
      return new Promise(function dispatchHttpRequest(resolvePromise, rejectPromise) {
        var onCanceled;
        function done() {
          if (config.cancelToken) {
            config.cancelToken.unsubscribe(onCanceled);
          }

          if (config.signal) {
            config.signal.removeEventListener('abort', onCanceled);
          }
        }
        var resolve = function resolve(value) {
          done();
          resolvePromise(value);
        };
        var reject = function reject(value) {
          done();
          rejectPromise(value);
        };
        var data = config.data;
        var headers = config.headers;
        var headerNames = {};

        Object.keys(headers).forEach(function storeLowerName(name) {
          headerNames[name.toLowerCase()] = name;
        });

        // Set User-Agent (required by some servers)
        // See https://github.com/axios/axios/issues/69
        if ('user-agent' in headerNames) {
          // User-Agent is specified; handle case where no UA header is desired
          if (!headers[headerNames['user-agent']]) {
            delete headers[headerNames['user-agent']];
          }
          // Otherwise, use specified value
        } else {
          // Only set header if it hasn't been set in config
          headers['User-Agent'] = 'axios/' + VERSION$3;
        }

        if (data && !utils$t.isStream(data)) {
          if (Buffer.isBuffer(data)) ; else if (utils$t.isArrayBuffer(data)) {
            data = Buffer.from(new Uint8Array(data));
          } else if (utils$t.isString(data)) {
            data = Buffer.from(data, 'utf-8');
          } else {
            return reject(createError$4(
              'Data after transformation must be a string, an ArrayBuffer, a Buffer, or a Stream',
              config
            ));
          }

          // Add Content-Length header if data exists
          if (!headerNames['content-length']) {
            headers['Content-Length'] = data.length;
          }
        }

        // HTTP basic authentication
        var auth = undefined;
        if (config.auth) {
          var username = config.auth.username || '';
          var password = config.auth.password || '';
          auth = username + ':' + password;
        }

        // Parse url
        var fullPath = buildFullPath$3(config.baseURL, config.url);
        var parsed = url$2.parse(fullPath);
        var protocol = parsed.protocol || 'http:';

        if (!auth && parsed.auth) {
          var urlAuth = parsed.auth.split(':');
          var urlUsername = urlAuth[0] || '';
          var urlPassword = urlAuth[1] || '';
          auth = urlUsername + ':' + urlPassword;
        }

        if (auth && headerNames.authorization) {
          delete headers[headerNames.authorization];
        }

        var isHttpsRequest = isHttps$1.test(protocol);
        var agent = isHttpsRequest ? config.httpsAgent : config.httpAgent;

        var options = {
          path: buildURL$5(parsed.path, config.params, config.paramsSerializer).replace(/^\?/, ''),
          method: config.method.toUpperCase(),
          headers: headers,
          agent: agent,
          agents: { http: config.httpAgent, https: config.httpsAgent },
          auth: auth
        };

        if (config.socketPath) {
          options.socketPath = config.socketPath;
        } else {
          options.hostname = parsed.hostname;
          options.port = parsed.port;
        }

        var proxy = config.proxy;
        if (!proxy && proxy !== false) {
          var proxyEnv = protocol.slice(0, -1) + '_proxy';
          var proxyUrl = process.env[proxyEnv] || process.env[proxyEnv.toUpperCase()];
          if (proxyUrl) {
            var parsedProxyUrl = url$2.parse(proxyUrl);
            var noProxyEnv = process.env.no_proxy || process.env.NO_PROXY;
            var shouldProxy = true;

            if (noProxyEnv) {
              var noProxy = noProxyEnv.split(',').map(function trim(s) {
                return s.trim();
              });

              shouldProxy = !noProxy.some(function proxyMatch(proxyElement) {
                if (!proxyElement) {
                  return false;
                }
                if (proxyElement === '*') {
                  return true;
                }
                if (proxyElement[0] === '.' &&
                    parsed.hostname.substr(parsed.hostname.length - proxyElement.length) === proxyElement) {
                  return true;
                }

                return parsed.hostname === proxyElement;
              });
            }

            if (shouldProxy) {
              proxy = {
                host: parsedProxyUrl.hostname,
                port: parsedProxyUrl.port,
                protocol: parsedProxyUrl.protocol
              };

              if (parsedProxyUrl.auth) {
                var proxyUrlAuth = parsedProxyUrl.auth.split(':');
                proxy.auth = {
                  username: proxyUrlAuth[0],
                  password: proxyUrlAuth[1]
                };
              }
            }
          }
        }

        if (proxy) {
          options.headers.host = parsed.hostname + (parsed.port ? ':' + parsed.port : '');
          setProxy$1(options, proxy, protocol + '//' + parsed.hostname + (parsed.port ? ':' + parsed.port : '') + options.path);
        }

        var transport;
        var isHttpsProxy = isHttpsRequest && (proxy ? isHttps$1.test(proxy.protocol) : true);
        if (config.transport) {
          transport = config.transport;
        } else if (config.maxRedirects === 0) {
          transport = isHttpsProxy ? https$2 : http$2;
        } else {
          if (config.maxRedirects) {
            options.maxRedirects = config.maxRedirects;
          }
          transport = isHttpsProxy ? httpsFollow$1 : httpFollow$1;
        }

        if (config.maxBodyLength > -1) {
          options.maxBodyLength = config.maxBodyLength;
        }

        if (config.insecureHTTPParser) {
          options.insecureHTTPParser = config.insecureHTTPParser;
        }

        // Create the request
        var req = transport.request(options, function handleResponse(res) {
          if (req.aborted) return;

          // uncompress the response body transparently if required
          var stream = res;

          // return the last request in case of redirects
          var lastRequest = res.req || req;


          // if no content, is HEAD request or decompress disabled we should not decompress
          if (res.statusCode !== 204 && lastRequest.method !== 'HEAD' && config.decompress !== false) {
            switch (res.headers['content-encoding']) {
            /*eslint default-case:0*/
            case 'gzip':
            case 'compress':
            case 'deflate':
            // add the unzipper to the body stream processing pipeline
              stream = stream.pipe(zlib$1.createUnzip());

              // remove the content-encoding in order to not confuse downstream operations
              delete res.headers['content-encoding'];
              break;
            }
          }

          var response = {
            status: res.statusCode,
            statusText: res.statusMessage,
            headers: res.headers,
            config: config,
            request: lastRequest
          };

          if (config.responseType === 'stream') {
            response.data = stream;
            settle$3(resolve, reject, response);
          } else {
            var responseBuffer = [];
            var totalResponseBytes = 0;
            stream.on('data', function handleStreamData(chunk) {
              responseBuffer.push(chunk);
              totalResponseBytes += chunk.length;

              // make sure the content length is not over the maxContentLength if specified
              if (config.maxContentLength > -1 && totalResponseBytes > config.maxContentLength) {
                stream.destroy();
                reject(createError$4('maxContentLength size of ' + config.maxContentLength + ' exceeded',
                  config, null, lastRequest));
              }
            });

            stream.on('error', function handleStreamError(err) {
              if (req.aborted) return;
              reject(enhanceError$5(err, config, null, lastRequest));
            });

            stream.on('end', function handleStreamEnd() {
              var responseData = Buffer.concat(responseBuffer);
              if (config.responseType !== 'arraybuffer') {
                responseData = responseData.toString(config.responseEncoding);
                if (!config.responseEncoding || config.responseEncoding === 'utf8') {
                  responseData = utils$t.stripBOM(responseData);
                }
              }

              response.data = responseData;
              settle$3(resolve, reject, response);
            });
          }
        });

        // Handle errors
        req.on('error', function handleRequestError(err) {
          if (req.aborted && err.code !== 'ERR_FR_TOO_MANY_REDIRECTS') return;
          reject(enhanceError$5(err, config, null, req));
        });

        // Handle request timeout
        if (config.timeout) {
          // This is forcing a int timeout to avoid problems if the `req` interface doesn't handle other types.
          var timeout = parseInt(config.timeout, 10);

          if (isNaN(timeout)) {
            reject(createError$4(
              'error trying to parse `config.timeout` to int',
              config,
              'ERR_PARSE_TIMEOUT',
              req
            ));

            return;
          }

          // Sometime, the response will be very slow, and does not respond, the connect event will be block by event loop system.
          // And timer callback will be fired, and abort() will be invoked before connection, then get "socket hang up" and code ECONNRESET.
          // At this time, if we have a large number of request, nodejs will hang up some socket on background. and the number will up and up.
          // And then these socket which be hang up will devoring CPU little by little.
          // ClientRequest.setTimeout will be fired on the specify milliseconds, and can make sure that abort() will be fired after connect.
          req.setTimeout(timeout, function handleRequestTimeout() {
            req.abort();
            var transitional = config.transitional || defaults$h.transitional;
            reject(createError$4(
              'timeout of ' + timeout + 'ms exceeded',
              config,
              transitional.clarifyTimeoutError ? 'ETIMEDOUT' : 'ECONNABORTED',
              req
            ));
          });
        }

        if (config.cancelToken || config.signal) {
          // Handle cancellation
          // eslint-disable-next-line func-names
          onCanceled = function(cancel) {
            if (req.aborted) return;

            req.abort();
            reject(!cancel || (cancel && cancel.type) ? new Cancel$7('canceled') : cancel);
          };

          config.cancelToken && config.cancelToken.subscribe(onCanceled);
          if (config.signal) {
            config.signal.aborted ? onCanceled() : config.signal.addEventListener('abort', onCanceled);
          }
        }


        // Send the request
        if (utils$t.isStream(data)) {
          data.on('error', function handleStreamError(err) {
            reject(enhanceError$5(err, config, null, req));
          }).pipe(req);
        } else {
          req.end(data);
        }
      });
    };

    var utils$s = utils$B;
    var normalizeHeaderName$2 = normalizeHeaderName$3;
    var enhanceError$4 = enhanceError$7;

    var DEFAULT_CONTENT_TYPE$1 = {
      'Content-Type': 'application/x-www-form-urlencoded'
    };

    function setContentTypeIfUnset$1(headers, value) {
      if (!utils$s.isUndefined(headers) && utils$s.isUndefined(headers['Content-Type'])) {
        headers['Content-Type'] = value;
      }
    }

    function getDefaultAdapter$1() {
      var adapter;
      if (typeof XMLHttpRequest !== 'undefined') {
        // For browsers use XHR adapter
        adapter = xhr$1;
      } else if (typeof process !== 'undefined' && Object.prototype.toString.call(process) === '[object process]') {
        // For node use HTTP adapter
        adapter = http_1$1;
      }
      return adapter;
    }

    function stringifySafely$1(rawValue, parser, encoder) {
      if (utils$s.isString(rawValue)) {
        try {
          (parser || JSON.parse)(rawValue);
          return utils$s.trim(rawValue);
        } catch (e) {
          if (e.name !== 'SyntaxError') {
            throw e;
          }
        }
      }

      return (encoder || JSON.stringify)(rawValue);
    }

    var defaults$g = {

      transitional: {
        silentJSONParsing: true,
        forcedJSONParsing: true,
        clarifyTimeoutError: false
      },

      adapter: getDefaultAdapter$1(),

      transformRequest: [function transformRequest(data, headers) {
        normalizeHeaderName$2(headers, 'Accept');
        normalizeHeaderName$2(headers, 'Content-Type');

        if (utils$s.isFormData(data) ||
          utils$s.isArrayBuffer(data) ||
          utils$s.isBuffer(data) ||
          utils$s.isStream(data) ||
          utils$s.isFile(data) ||
          utils$s.isBlob(data)
        ) {
          return data;
        }
        if (utils$s.isArrayBufferView(data)) {
          return data.buffer;
        }
        if (utils$s.isURLSearchParams(data)) {
          setContentTypeIfUnset$1(headers, 'application/x-www-form-urlencoded;charset=utf-8');
          return data.toString();
        }
        if (utils$s.isObject(data) || (headers && headers['Content-Type'] === 'application/json')) {
          setContentTypeIfUnset$1(headers, 'application/json');
          return stringifySafely$1(data);
        }
        return data;
      }],

      transformResponse: [function transformResponse(data) {
        var transitional = this.transitional || defaults$g.transitional;
        var silentJSONParsing = transitional && transitional.silentJSONParsing;
        var forcedJSONParsing = transitional && transitional.forcedJSONParsing;
        var strictJSONParsing = !silentJSONParsing && this.responseType === 'json';

        if (strictJSONParsing || (forcedJSONParsing && utils$s.isString(data) && data.length)) {
          try {
            return JSON.parse(data);
          } catch (e) {
            if (strictJSONParsing) {
              if (e.name === 'SyntaxError') {
                throw enhanceError$4(e, this, 'E_JSON_PARSE');
              }
              throw e;
            }
          }
        }

        return data;
      }],

      /**
       * A timeout in milliseconds to abort a request. If set to 0 (default) a
       * timeout is not created.
       */
      timeout: 0,

      xsrfCookieName: 'XSRF-TOKEN',
      xsrfHeaderName: 'X-XSRF-TOKEN',

      maxContentLength: -1,
      maxBodyLength: -1,

      validateStatus: function validateStatus(status) {
        return status >= 200 && status < 300;
      },

      headers: {
        common: {
          'Accept': 'application/json, text/plain, */*'
        }
      }
    };

    utils$s.forEach(['delete', 'get', 'head'], function forEachMethodNoData(method) {
      defaults$g.headers[method] = {};
    });

    utils$s.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
      defaults$g.headers[method] = utils$s.merge(DEFAULT_CONTENT_TYPE$1);
    });

    var defaults_1$3 = defaults$g;

    var utils$r = utils$B;
    var defaults$f = defaults_1$3;

    /**
     * Transform the data for a request or a response
     *
     * @param {Object|String} data The data to be transformed
     * @param {Array} headers The headers for the request or response
     * @param {Array|Function} fns A single function or Array of functions
     * @returns {*} The resulting transformed data
     */
    var transformData$3 = function transformData(data, headers, fns) {
      var context = this || defaults$f;
      /*eslint no-param-reassign:0*/
      utils$r.forEach(fns, function transform(fn) {
        data = fn.call(context, data, headers);
      });

      return data;
    };

    var isCancel$3 = function isCancel(value) {
      return !!(value && value.__CANCEL__);
    };

    var utils$q = utils$B;
    var transformData$2 = transformData$3;
    var isCancel$2 = isCancel$3;
    var defaults$e = defaults_1$3;
    var Cancel$6 = Cancel_1$1;

    /**
     * Throws a `Cancel` if cancellation has been requested.
     */
    function throwIfCancellationRequested$1(config) {
      if (config.cancelToken) {
        config.cancelToken.throwIfRequested();
      }

      if (config.signal && config.signal.aborted) {
        throw new Cancel$6('canceled');
      }
    }

    /**
     * Dispatch a request to the server using the configured adapter.
     *
     * @param {object} config The config that is to be used for the request
     * @returns {Promise} The Promise to be fulfilled
     */
    var dispatchRequest$3 = function dispatchRequest(config) {
      throwIfCancellationRequested$1(config);

      // Ensure headers exist
      config.headers = config.headers || {};

      // Transform request data
      config.data = transformData$2.call(
        config,
        config.data,
        config.headers,
        config.transformRequest
      );

      // Flatten headers
      config.headers = utils$q.merge(
        config.headers.common || {},
        config.headers[config.method] || {},
        config.headers
      );

      utils$q.forEach(
        ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],
        function cleanHeaderConfig(method) {
          delete config.headers[method];
        }
      );

      var adapter = config.adapter || defaults$e.adapter;

      return adapter(config).then(function onAdapterResolution(response) {
        throwIfCancellationRequested$1(config);

        // Transform response data
        response.data = transformData$2.call(
          config,
          response.data,
          response.headers,
          config.transformResponse
        );

        return response;
      }, function onAdapterRejection(reason) {
        if (!isCancel$2(reason)) {
          throwIfCancellationRequested$1(config);

          // Transform response data
          if (reason && reason.response) {
            reason.response.data = transformData$2.call(
              config,
              reason.response.data,
              reason.response.headers,
              config.transformResponse
            );
          }
        }

        return Promise.reject(reason);
      });
    };

    var utils$p = utils$B;

    /**
     * Config-specific merge-function which creates a new config-object
     * by merging two configuration objects together.
     *
     * @param {Object} config1
     * @param {Object} config2
     * @returns {Object} New object resulting from merging config2 to config1
     */
    var mergeConfig$5 = function mergeConfig(config1, config2) {
      // eslint-disable-next-line no-param-reassign
      config2 = config2 || {};
      var config = {};

      function getMergedValue(target, source) {
        if (utils$p.isPlainObject(target) && utils$p.isPlainObject(source)) {
          return utils$p.merge(target, source);
        } else if (utils$p.isPlainObject(source)) {
          return utils$p.merge({}, source);
        } else if (utils$p.isArray(source)) {
          return source.slice();
        }
        return source;
      }

      // eslint-disable-next-line consistent-return
      function mergeDeepProperties(prop) {
        if (!utils$p.isUndefined(config2[prop])) {
          return getMergedValue(config1[prop], config2[prop]);
        } else if (!utils$p.isUndefined(config1[prop])) {
          return getMergedValue(undefined, config1[prop]);
        }
      }

      // eslint-disable-next-line consistent-return
      function valueFromConfig2(prop) {
        if (!utils$p.isUndefined(config2[prop])) {
          return getMergedValue(undefined, config2[prop]);
        }
      }

      // eslint-disable-next-line consistent-return
      function defaultToConfig2(prop) {
        if (!utils$p.isUndefined(config2[prop])) {
          return getMergedValue(undefined, config2[prop]);
        } else if (!utils$p.isUndefined(config1[prop])) {
          return getMergedValue(undefined, config1[prop]);
        }
      }

      // eslint-disable-next-line consistent-return
      function mergeDirectKeys(prop) {
        if (prop in config2) {
          return getMergedValue(config1[prop], config2[prop]);
        } else if (prop in config1) {
          return getMergedValue(undefined, config1[prop]);
        }
      }

      var mergeMap = {
        'url': valueFromConfig2,
        'method': valueFromConfig2,
        'data': valueFromConfig2,
        'baseURL': defaultToConfig2,
        'transformRequest': defaultToConfig2,
        'transformResponse': defaultToConfig2,
        'paramsSerializer': defaultToConfig2,
        'timeout': defaultToConfig2,
        'timeoutMessage': defaultToConfig2,
        'withCredentials': defaultToConfig2,
        'adapter': defaultToConfig2,
        'responseType': defaultToConfig2,
        'xsrfCookieName': defaultToConfig2,
        'xsrfHeaderName': defaultToConfig2,
        'onUploadProgress': defaultToConfig2,
        'onDownloadProgress': defaultToConfig2,
        'decompress': defaultToConfig2,
        'maxContentLength': defaultToConfig2,
        'maxBodyLength': defaultToConfig2,
        'transport': defaultToConfig2,
        'httpAgent': defaultToConfig2,
        'httpsAgent': defaultToConfig2,
        'cancelToken': defaultToConfig2,
        'socketPath': defaultToConfig2,
        'responseEncoding': defaultToConfig2,
        'validateStatus': mergeDirectKeys
      };

      utils$p.forEach(Object.keys(config1).concat(Object.keys(config2)), function computeConfigValue(prop) {
        var merge = mergeMap[prop] || mergeDeepProperties;
        var configValue = merge(prop);
        (utils$p.isUndefined(configValue) && merge !== mergeDirectKeys) || (config[prop] = configValue);
      });

      return config;
    };

    var VERSION$2 = data$1.version;

    var validators$3 = {};

    // eslint-disable-next-line func-names
    ['object', 'boolean', 'number', 'function', 'string', 'symbol'].forEach(function(type, i) {
      validators$3[type] = function validator(thing) {
        return typeof thing === type || 'a' + (i < 1 ? 'n ' : ' ') + type;
      };
    });

    var deprecatedWarnings$1 = {};

    /**
     * Transitional option validator
     * @param {function|boolean?} validator - set to false if the transitional option has been removed
     * @param {string?} version - deprecated version / removed since version
     * @param {string?} message - some message with additional info
     * @returns {function}
     */
    validators$3.transitional = function transitional(validator, version, message) {
      function formatMessage(opt, desc) {
        return '[Axios v' + VERSION$2 + '] Transitional option \'' + opt + '\'' + desc + (message ? '. ' + message : '');
      }

      // eslint-disable-next-line func-names
      return function(value, opt, opts) {
        if (validator === false) {
          throw new Error(formatMessage(opt, ' has been removed' + (version ? ' in ' + version : '')));
        }

        if (version && !deprecatedWarnings$1[opt]) {
          deprecatedWarnings$1[opt] = true;
          // eslint-disable-next-line no-console
          console.warn(
            formatMessage(
              opt,
              ' has been deprecated since v' + version + ' and will be removed in the near future'
            )
          );
        }

        return validator ? validator(value, opt, opts) : true;
      };
    };

    /**
     * Assert object's properties type
     * @param {object} options
     * @param {object} schema
     * @param {boolean?} allowUnknown
     */

    function assertOptions$1(options, schema, allowUnknown) {
      if (typeof options !== 'object') {
        throw new TypeError('options must be an object');
      }
      var keys = Object.keys(options);
      var i = keys.length;
      while (i-- > 0) {
        var opt = keys[i];
        var validator = schema[opt];
        if (validator) {
          var value = options[opt];
          var result = value === undefined || validator(value, opt, options);
          if (result !== true) {
            throw new TypeError('option ' + opt + ' must be ' + result);
          }
          continue;
        }
        if (allowUnknown !== true) {
          throw Error('Unknown option ' + opt);
        }
      }
    }

    var validator$3 = {
      assertOptions: assertOptions$1,
      validators: validators$3
    };

    var utils$o = utils$B;
    var buildURL$4 = buildURL$7;
    var InterceptorManager$2 = InterceptorManager_1$1;
    var dispatchRequest$2 = dispatchRequest$3;
    var mergeConfig$4 = mergeConfig$5;
    var validator$2 = validator$3;

    var validators$2 = validator$2.validators;
    /**
     * Create a new instance of Axios
     *
     * @param {Object} instanceConfig The default config for the instance
     */
    function Axios$3(instanceConfig) {
      this.defaults = instanceConfig;
      this.interceptors = {
        request: new InterceptorManager$2(),
        response: new InterceptorManager$2()
      };
    }

    /**
     * Dispatch a request
     *
     * @param {Object} config The config specific for this request (merged with this.defaults)
     */
    Axios$3.prototype.request = function request(config) {
      /*eslint no-param-reassign:0*/
      // Allow for axios('example/url'[, config]) a la fetch API
      if (typeof config === 'string') {
        config = arguments[1] || {};
        config.url = arguments[0];
      } else {
        config = config || {};
      }

      config = mergeConfig$4(this.defaults, config);

      // Set config.method
      if (config.method) {
        config.method = config.method.toLowerCase();
      } else if (this.defaults.method) {
        config.method = this.defaults.method.toLowerCase();
      } else {
        config.method = 'get';
      }

      var transitional = config.transitional;

      if (transitional !== undefined) {
        validator$2.assertOptions(transitional, {
          silentJSONParsing: validators$2.transitional(validators$2.boolean),
          forcedJSONParsing: validators$2.transitional(validators$2.boolean),
          clarifyTimeoutError: validators$2.transitional(validators$2.boolean)
        }, false);
      }

      // filter out skipped interceptors
      var requestInterceptorChain = [];
      var synchronousRequestInterceptors = true;
      this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
        if (typeof interceptor.runWhen === 'function' && interceptor.runWhen(config) === false) {
          return;
        }

        synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;

        requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
      });

      var responseInterceptorChain = [];
      this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
        responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
      });

      var promise;

      if (!synchronousRequestInterceptors) {
        var chain = [dispatchRequest$2, undefined];

        Array.prototype.unshift.apply(chain, requestInterceptorChain);
        chain = chain.concat(responseInterceptorChain);

        promise = Promise.resolve(config);
        while (chain.length) {
          promise = promise.then(chain.shift(), chain.shift());
        }

        return promise;
      }


      var newConfig = config;
      while (requestInterceptorChain.length) {
        var onFulfilled = requestInterceptorChain.shift();
        var onRejected = requestInterceptorChain.shift();
        try {
          newConfig = onFulfilled(newConfig);
        } catch (error) {
          onRejected(error);
          break;
        }
      }

      try {
        promise = dispatchRequest$2(newConfig);
      } catch (error) {
        return Promise.reject(error);
      }

      while (responseInterceptorChain.length) {
        promise = promise.then(responseInterceptorChain.shift(), responseInterceptorChain.shift());
      }

      return promise;
    };

    Axios$3.prototype.getUri = function getUri(config) {
      config = mergeConfig$4(this.defaults, config);
      return buildURL$4(config.url, config.params, config.paramsSerializer).replace(/^\?/, '');
    };

    // Provide aliases for supported request methods
    utils$o.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {
      /*eslint func-names:0*/
      Axios$3.prototype[method] = function(url, config) {
        return this.request(mergeConfig$4(config || {}, {
          method: method,
          url: url,
          data: (config || {}).data
        }));
      };
    });

    utils$o.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
      /*eslint func-names:0*/
      Axios$3.prototype[method] = function(url, data, config) {
        return this.request(mergeConfig$4(config || {}, {
          method: method,
          url: url,
          data: data
        }));
      };
    });

    var Axios_1$1 = Axios$3;

    var Cancel$5 = Cancel_1$1;

    /**
     * A `CancelToken` is an object that can be used to request cancellation of an operation.
     *
     * @class
     * @param {Function} executor The executor function.
     */
    function CancelToken$1(executor) {
      if (typeof executor !== 'function') {
        throw new TypeError('executor must be a function.');
      }

      var resolvePromise;

      this.promise = new Promise(function promiseExecutor(resolve) {
        resolvePromise = resolve;
      });

      var token = this;

      // eslint-disable-next-line func-names
      this.promise.then(function(cancel) {
        if (!token._listeners) return;

        var i;
        var l = token._listeners.length;

        for (i = 0; i < l; i++) {
          token._listeners[i](cancel);
        }
        token._listeners = null;
      });

      // eslint-disable-next-line func-names
      this.promise.then = function(onfulfilled) {
        var _resolve;
        // eslint-disable-next-line func-names
        var promise = new Promise(function(resolve) {
          token.subscribe(resolve);
          _resolve = resolve;
        }).then(onfulfilled);

        promise.cancel = function reject() {
          token.unsubscribe(_resolve);
        };

        return promise;
      };

      executor(function cancel(message) {
        if (token.reason) {
          // Cancellation has already been requested
          return;
        }

        token.reason = new Cancel$5(message);
        resolvePromise(token.reason);
      });
    }

    /**
     * Throws a `Cancel` if cancellation has been requested.
     */
    CancelToken$1.prototype.throwIfRequested = function throwIfRequested() {
      if (this.reason) {
        throw this.reason;
      }
    };

    /**
     * Subscribe to the cancel signal
     */

    CancelToken$1.prototype.subscribe = function subscribe(listener) {
      if (this.reason) {
        listener(this.reason);
        return;
      }

      if (this._listeners) {
        this._listeners.push(listener);
      } else {
        this._listeners = [listener];
      }
    };

    /**
     * Unsubscribe from the cancel signal
     */

    CancelToken$1.prototype.unsubscribe = function unsubscribe(listener) {
      if (!this._listeners) {
        return;
      }
      var index = this._listeners.indexOf(listener);
      if (index !== -1) {
        this._listeners.splice(index, 1);
      }
    };

    /**
     * Returns an object that contains a new `CancelToken` and a function that, when called,
     * cancels the `CancelToken`.
     */
    CancelToken$1.source = function source() {
      var cancel;
      var token = new CancelToken$1(function executor(c) {
        cancel = c;
      });
      return {
        token: token,
        cancel: cancel
      };
    };

    var CancelToken_1$1 = CancelToken$1;

    /**
     * Syntactic sugar for invoking a function and expanding an array for arguments.
     *
     * Common use case would be to use `Function.prototype.apply`.
     *
     *  ```js
     *  function f(x, y, z) {}
     *  var args = [1, 2, 3];
     *  f.apply(null, args);
     *  ```
     *
     * With `spread` this example can be re-written.
     *
     *  ```js
     *  spread(function(x, y, z) {})([1, 2, 3]);
     *  ```
     *
     * @param {Function} callback
     * @returns {Function}
     */
    var spread$1 = function spread(callback) {
      return function wrap(arr) {
        return callback.apply(null, arr);
      };
    };

    /**
     * Determines whether the payload is an error thrown by Axios
     *
     * @param {*} payload The value to test
     * @returns {boolean} True if the payload is an error thrown by Axios, otherwise false
     */
    var isAxiosError$1 = function isAxiosError(payload) {
      return (typeof payload === 'object') && (payload.isAxiosError === true);
    };

    var utils$n = utils$B;
    var bind$3 = bind$5;
    var Axios$2 = Axios_1$1;
    var mergeConfig$3 = mergeConfig$5;
    var defaults$d = defaults_1$3;

    /**
     * Create an instance of Axios
     *
     * @param {Object} defaultConfig The default config for the instance
     * @return {Axios} A new instance of Axios
     */
    function createInstance$1(defaultConfig) {
      var context = new Axios$2(defaultConfig);
      var instance = bind$3(Axios$2.prototype.request, context);

      // Copy axios.prototype to instance
      utils$n.extend(instance, Axios$2.prototype, context);

      // Copy context to instance
      utils$n.extend(instance, context);

      // Factory for creating new instances
      instance.create = function create(instanceConfig) {
        return createInstance$1(mergeConfig$3(defaultConfig, instanceConfig));
      };

      return instance;
    }

    // Create the default instance to be exported
    var axios$3 = createInstance$1(defaults$d);

    // Expose Axios class to allow class inheritance
    axios$3.Axios = Axios$2;

    // Expose Cancel & CancelToken
    axios$3.Cancel = Cancel_1$1;
    axios$3.CancelToken = CancelToken_1$1;
    axios$3.isCancel = isCancel$3;
    axios$3.VERSION = data$1.version;

    // Expose all/spread
    axios$3.all = function all(promises) {
      return Promise.all(promises);
    };
    axios$3.spread = spread$1;

    // Expose isAxiosError
    axios$3.isAxiosError = isAxiosError$1;

    axios$4.exports = axios$3;

    // Allow use of default import syntax in TypeScript
    axios$4.exports.default = axios$3;

    var axios$2 = axios$4.exports;

    var urlJoin$1 = {exports: {}};

    (function (module) {
    (function (name, context, definition) {
      if (module.exports) module.exports = definition();
      else context[name] = definition();
    })('urljoin', commonjsGlobal, function () {

      function normalize (strArray) {
        var resultArray = [];
        if (strArray.length === 0) { return ''; }

        if (typeof strArray[0] !== 'string') {
          throw new TypeError('Url must be a string. Received ' + strArray[0]);
        }

        // If the first part is a plain protocol, we combine it with the next part.
        if (strArray[0].match(/^[^/:]+:\/*$/) && strArray.length > 1) {
          var first = strArray.shift();
          strArray[0] = first + strArray[0];
        }

        // There must be two or three slashes in the file protocol, two slashes in anything else.
        if (strArray[0].match(/^file:\/\/\//)) {
          strArray[0] = strArray[0].replace(/^([^/:]+):\/*/, '$1:///');
        } else {
          strArray[0] = strArray[0].replace(/^([^/:]+):\/*/, '$1://');
        }

        for (var i = 0; i < strArray.length; i++) {
          var component = strArray[i];

          if (typeof component !== 'string') {
            throw new TypeError('Url must be a string. Received ' + component);
          }

          if (component === '') { continue; }

          if (i > 0) {
            // Removing the starting slashes for each component but the first.
            component = component.replace(/^[\/]+/, '');
          }
          if (i < strArray.length - 1) {
            // Removing the ending slashes for each component but the last.
            component = component.replace(/[\/]+$/, '');
          } else {
            // For the last component we will combine multiple slashes to a single one.
            component = component.replace(/[\/]+$/, '/');
          }

          resultArray.push(component);

        }

        var str = resultArray.join('/');
        // Each input component is now separated by a single slash except the possible first plain protocol part.

        // remove trailing slash before parameters or hash
        str = str.replace(/\/(\?|&|#[^!])/g, '$1');

        // replace ? in parameters with &
        var parts = str.split('?');
        str = parts.shift() + (parts.length > 0 ? '?': '') + parts.join('&');

        return str;
      }

      return function () {
        var input;

        if (typeof arguments[0] === 'object') {
          input = arguments[0];
        } else {
          input = [].slice.call(arguments);
        }

        return normalize(input);
      };

    });
    }(urlJoin$1));

    var urlJoin = urlJoin$1.exports;

    var re$5 = {exports: {}};

    // Note: this is the semver.org version of the spec that it implements
    // Not necessarily the package version of this code.
    const SEMVER_SPEC_VERSION = '2.0.0';

    const MAX_LENGTH$2 = 256;
    const MAX_SAFE_INTEGER$5 = Number.MAX_SAFE_INTEGER ||
      /* istanbul ignore next */ 9007199254740991;

    // Max safe segment length for coercion.
    const MAX_SAFE_COMPONENT_LENGTH = 16;

    var constants$1 = {
      SEMVER_SPEC_VERSION,
      MAX_LENGTH: MAX_LENGTH$2,
      MAX_SAFE_INTEGER: MAX_SAFE_INTEGER$5,
      MAX_SAFE_COMPONENT_LENGTH
    };

    const debug$8 = (
      typeof process === 'object' &&
      process.env &&
      process.env.NODE_DEBUG &&
      /\bsemver\b/i.test(process.env.NODE_DEBUG)
    ) ? (...args) => console.error('SEMVER', ...args)
      : () => {};

    var debug_1$1 = debug$8;

    (function (module, exports) {
    const { MAX_SAFE_COMPONENT_LENGTH } = constants$1;
    const debug = debug_1$1;
    exports = module.exports = {};

    // The actual regexps go on exports.re
    const re = exports.re = [];
    const src = exports.src = [];
    const t = exports.t = {};
    let R = 0;

    const createToken = (name, value, isGlobal) => {
      const index = R++;
      debug(index, value);
      t[name] = index;
      src[index] = value;
      re[index] = new RegExp(value, isGlobal ? 'g' : undefined);
    };

    // The following Regular Expressions can be used for tokenizing,
    // validating, and parsing SemVer version strings.

    // ## Numeric Identifier
    // A single `0`, or a non-zero digit followed by zero or more digits.

    createToken('NUMERICIDENTIFIER', '0|[1-9]\\d*');
    createToken('NUMERICIDENTIFIERLOOSE', '[0-9]+');

    // ## Non-numeric Identifier
    // Zero or more digits, followed by a letter or hyphen, and then zero or
    // more letters, digits, or hyphens.

    createToken('NONNUMERICIDENTIFIER', '\\d*[a-zA-Z-][a-zA-Z0-9-]*');

    // ## Main Version
    // Three dot-separated numeric identifiers.

    createToken('MAINVERSION', `(${src[t.NUMERICIDENTIFIER]})\\.` +
                       `(${src[t.NUMERICIDENTIFIER]})\\.` +
                       `(${src[t.NUMERICIDENTIFIER]})`);

    createToken('MAINVERSIONLOOSE', `(${src[t.NUMERICIDENTIFIERLOOSE]})\\.` +
                            `(${src[t.NUMERICIDENTIFIERLOOSE]})\\.` +
                            `(${src[t.NUMERICIDENTIFIERLOOSE]})`);

    // ## Pre-release Version Identifier
    // A numeric identifier, or a non-numeric identifier.

    createToken('PRERELEASEIDENTIFIER', `(?:${src[t.NUMERICIDENTIFIER]
}|${src[t.NONNUMERICIDENTIFIER]})`);

    createToken('PRERELEASEIDENTIFIERLOOSE', `(?:${src[t.NUMERICIDENTIFIERLOOSE]
}|${src[t.NONNUMERICIDENTIFIER]})`);

    // ## Pre-release Version
    // Hyphen, followed by one or more dot-separated pre-release version
    // identifiers.

    createToken('PRERELEASE', `(?:-(${src[t.PRERELEASEIDENTIFIER]
}(?:\\.${src[t.PRERELEASEIDENTIFIER]})*))`);

    createToken('PRERELEASELOOSE', `(?:-?(${src[t.PRERELEASEIDENTIFIERLOOSE]
}(?:\\.${src[t.PRERELEASEIDENTIFIERLOOSE]})*))`);

    // ## Build Metadata Identifier
    // Any combination of digits, letters, or hyphens.

    createToken('BUILDIDENTIFIER', '[0-9A-Za-z-]+');

    // ## Build Metadata
    // Plus sign, followed by one or more period-separated build metadata
    // identifiers.

    createToken('BUILD', `(?:\\+(${src[t.BUILDIDENTIFIER]
}(?:\\.${src[t.BUILDIDENTIFIER]})*))`);

    // ## Full Version String
    // A main version, followed optionally by a pre-release version and
    // build metadata.

    // Note that the only major, minor, patch, and pre-release sections of
    // the version string are capturing groups.  The build metadata is not a
    // capturing group, because it should not ever be used in version
    // comparison.

    createToken('FULLPLAIN', `v?${src[t.MAINVERSION]
}${src[t.PRERELEASE]}?${
  src[t.BUILD]}?`);

    createToken('FULL', `^${src[t.FULLPLAIN]}$`);

    // like full, but allows v1.2.3 and =1.2.3, which people do sometimes.
    // also, 1.0.0alpha1 (prerelease without the hyphen) which is pretty
    // common in the npm registry.
    createToken('LOOSEPLAIN', `[v=\\s]*${src[t.MAINVERSIONLOOSE]
}${src[t.PRERELEASELOOSE]}?${
  src[t.BUILD]}?`);

    createToken('LOOSE', `^${src[t.LOOSEPLAIN]}$`);

    createToken('GTLT', '((?:<|>)?=?)');

    // Something like "2.*" or "1.2.x".
    // Note that "x.x" is a valid xRange identifer, meaning "any version"
    // Only the first item is strictly required.
    createToken('XRANGEIDENTIFIERLOOSE', `${src[t.NUMERICIDENTIFIERLOOSE]}|x|X|\\*`);
    createToken('XRANGEIDENTIFIER', `${src[t.NUMERICIDENTIFIER]}|x|X|\\*`);

    createToken('XRANGEPLAIN', `[v=\\s]*(${src[t.XRANGEIDENTIFIER]})` +
                       `(?:\\.(${src[t.XRANGEIDENTIFIER]})` +
                       `(?:\\.(${src[t.XRANGEIDENTIFIER]})` +
                       `(?:${src[t.PRERELEASE]})?${
                     src[t.BUILD]}?` +
                       `)?)?`);

    createToken('XRANGEPLAINLOOSE', `[v=\\s]*(${src[t.XRANGEIDENTIFIERLOOSE]})` +
                            `(?:\\.(${src[t.XRANGEIDENTIFIERLOOSE]})` +
                            `(?:\\.(${src[t.XRANGEIDENTIFIERLOOSE]})` +
                            `(?:${src[t.PRERELEASELOOSE]})?${
                          src[t.BUILD]}?` +
                            `)?)?`);

    createToken('XRANGE', `^${src[t.GTLT]}\\s*${src[t.XRANGEPLAIN]}$`);
    createToken('XRANGELOOSE', `^${src[t.GTLT]}\\s*${src[t.XRANGEPLAINLOOSE]}$`);

    // Coercion.
    // Extract anything that could conceivably be a part of a valid semver
    createToken('COERCE', `${'(^|[^\\d])' +
              '(\\d{1,'}${MAX_SAFE_COMPONENT_LENGTH}})` +
                  `(?:\\.(\\d{1,${MAX_SAFE_COMPONENT_LENGTH}}))?` +
                  `(?:\\.(\\d{1,${MAX_SAFE_COMPONENT_LENGTH}}))?` +
                  `(?:$|[^\\d])`);
    createToken('COERCERTL', src[t.COERCE], true);

    // Tilde ranges.
    // Meaning is "reasonably at or greater than"
    createToken('LONETILDE', '(?:~>?)');

    createToken('TILDETRIM', `(\\s*)${src[t.LONETILDE]}\\s+`, true);
    exports.tildeTrimReplace = '$1~';

    createToken('TILDE', `^${src[t.LONETILDE]}${src[t.XRANGEPLAIN]}$`);
    createToken('TILDELOOSE', `^${src[t.LONETILDE]}${src[t.XRANGEPLAINLOOSE]}$`);

    // Caret ranges.
    // Meaning is "at least and backwards compatible with"
    createToken('LONECARET', '(?:\\^)');

    createToken('CARETTRIM', `(\\s*)${src[t.LONECARET]}\\s+`, true);
    exports.caretTrimReplace = '$1^';

    createToken('CARET', `^${src[t.LONECARET]}${src[t.XRANGEPLAIN]}$`);
    createToken('CARETLOOSE', `^${src[t.LONECARET]}${src[t.XRANGEPLAINLOOSE]}$`);

    // A simple gt/lt/eq thing, or just "" to indicate "any version"
    createToken('COMPARATORLOOSE', `^${src[t.GTLT]}\\s*(${src[t.LOOSEPLAIN]})$|^$`);
    createToken('COMPARATOR', `^${src[t.GTLT]}\\s*(${src[t.FULLPLAIN]})$|^$`);

    // An expression to strip any whitespace between the gtlt and the thing
    // it modifies, so that `> 1.2.3` ==> `>1.2.3`
    createToken('COMPARATORTRIM', `(\\s*)${src[t.GTLT]
}\\s*(${src[t.LOOSEPLAIN]}|${src[t.XRANGEPLAIN]})`, true);
    exports.comparatorTrimReplace = '$1$2$3';

    // Something like `1.2.3 - 1.2.4`
    // Note that these all use the loose form, because they'll be
    // checked against either the strict or loose comparator form
    // later.
    createToken('HYPHENRANGE', `^\\s*(${src[t.XRANGEPLAIN]})` +
                       `\\s+-\\s+` +
                       `(${src[t.XRANGEPLAIN]})` +
                       `\\s*$`);

    createToken('HYPHENRANGELOOSE', `^\\s*(${src[t.XRANGEPLAINLOOSE]})` +
                            `\\s+-\\s+` +
                            `(${src[t.XRANGEPLAINLOOSE]})` +
                            `\\s*$`);

    // Star ranges basically just allow anything at all.
    createToken('STAR', '(<|>)?=?\\s*\\*');
    // >=0.0.0 is like a star
    createToken('GTE0', '^\\s*>=\\s*0\.0\.0\\s*$');
    createToken('GTE0PRE', '^\\s*>=\\s*0\.0\.0-0\\s*$');
    }(re$5, re$5.exports));

    // parse out just the options we care about so we always get a consistent
    // obj with keys in a consistent order.
    const opts = ['includePrerelease', 'loose', 'rtl'];
    const parseOptions$4 = options =>
      !options ? {}
      : typeof options !== 'object' ? { loose: true }
      : opts.filter(k => options[k]).reduce((options, k) => {
        options[k] = true;
        return options
      }, {});
    var parseOptions_1 = parseOptions$4;

    const numeric$1 = /^[0-9]+$/;
    const compareIdentifiers$1 = (a, b) => {
      const anum = numeric$1.test(a);
      const bnum = numeric$1.test(b);

      if (anum && bnum) {
        a = +a;
        b = +b;
      }

      return a === b ? 0
        : (anum && !bnum) ? -1
        : (bnum && !anum) ? 1
        : a < b ? -1
        : 1
    };

    const rcompareIdentifiers = (a, b) => compareIdentifiers$1(b, a);

    var identifiers = {
      compareIdentifiers: compareIdentifiers$1,
      rcompareIdentifiers
    };

    const debug$7 = debug_1$1;
    const { MAX_LENGTH: MAX_LENGTH$1, MAX_SAFE_INTEGER: MAX_SAFE_INTEGER$4 } = constants$1;
    const { re: re$4, t: t$4 } = re$5.exports;

    const parseOptions$3 = parseOptions_1;
    const { compareIdentifiers } = identifiers;
    class SemVer$e {
      constructor (version, options) {
        options = parseOptions$3(options);

        if (version instanceof SemVer$e) {
          if (version.loose === !!options.loose &&
              version.includePrerelease === !!options.includePrerelease) {
            return version
          } else {
            version = version.version;
          }
        } else if (typeof version !== 'string') {
          throw new TypeError(`Invalid Version: ${version}`)
        }

        if (version.length > MAX_LENGTH$1) {
          throw new TypeError(
            `version is longer than ${MAX_LENGTH$1} characters`
          )
        }

        debug$7('SemVer', version, options);
        this.options = options;
        this.loose = !!options.loose;
        // this isn't actually relevant for versions, but keep it so that we
        // don't run into trouble passing this.options around.
        this.includePrerelease = !!options.includePrerelease;

        const m = version.trim().match(options.loose ? re$4[t$4.LOOSE] : re$4[t$4.FULL]);

        if (!m) {
          throw new TypeError(`Invalid Version: ${version}`)
        }

        this.raw = version;

        // these are actually numbers
        this.major = +m[1];
        this.minor = +m[2];
        this.patch = +m[3];

        if (this.major > MAX_SAFE_INTEGER$4 || this.major < 0) {
          throw new TypeError('Invalid major version')
        }

        if (this.minor > MAX_SAFE_INTEGER$4 || this.minor < 0) {
          throw new TypeError('Invalid minor version')
        }

        if (this.patch > MAX_SAFE_INTEGER$4 || this.patch < 0) {
          throw new TypeError('Invalid patch version')
        }

        // numberify any prerelease numeric ids
        if (!m[4]) {
          this.prerelease = [];
        } else {
          this.prerelease = m[4].split('.').map((id) => {
            if (/^[0-9]+$/.test(id)) {
              const num = +id;
              if (num >= 0 && num < MAX_SAFE_INTEGER$4) {
                return num
              }
            }
            return id
          });
        }

        this.build = m[5] ? m[5].split('.') : [];
        this.format();
      }

      format () {
        this.version = `${this.major}.${this.minor}.${this.patch}`;
        if (this.prerelease.length) {
          this.version += `-${this.prerelease.join('.')}`;
        }
        return this.version
      }

      toString () {
        return this.version
      }

      compare (other) {
        debug$7('SemVer.compare', this.version, this.options, other);
        if (!(other instanceof SemVer$e)) {
          if (typeof other === 'string' && other === this.version) {
            return 0
          }
          other = new SemVer$e(other, this.options);
        }

        if (other.version === this.version) {
          return 0
        }

        return this.compareMain(other) || this.comparePre(other)
      }

      compareMain (other) {
        if (!(other instanceof SemVer$e)) {
          other = new SemVer$e(other, this.options);
        }

        return (
          compareIdentifiers(this.major, other.major) ||
          compareIdentifiers(this.minor, other.minor) ||
          compareIdentifiers(this.patch, other.patch)
        )
      }

      comparePre (other) {
        if (!(other instanceof SemVer$e)) {
          other = new SemVer$e(other, this.options);
        }

        // NOT having a prerelease is > having one
        if (this.prerelease.length && !other.prerelease.length) {
          return -1
        } else if (!this.prerelease.length && other.prerelease.length) {
          return 1
        } else if (!this.prerelease.length && !other.prerelease.length) {
          return 0
        }

        let i = 0;
        do {
          const a = this.prerelease[i];
          const b = other.prerelease[i];
          debug$7('prerelease compare', i, a, b);
          if (a === undefined && b === undefined) {
            return 0
          } else if (b === undefined) {
            return 1
          } else if (a === undefined) {
            return -1
          } else if (a === b) {
            continue
          } else {
            return compareIdentifiers(a, b)
          }
        } while (++i)
      }

      compareBuild (other) {
        if (!(other instanceof SemVer$e)) {
          other = new SemVer$e(other, this.options);
        }

        let i = 0;
        do {
          const a = this.build[i];
          const b = other.build[i];
          debug$7('prerelease compare', i, a, b);
          if (a === undefined && b === undefined) {
            return 0
          } else if (b === undefined) {
            return 1
          } else if (a === undefined) {
            return -1
          } else if (a === b) {
            continue
          } else {
            return compareIdentifiers(a, b)
          }
        } while (++i)
      }

      // preminor will bump the version up to the next minor release, and immediately
      // down to pre-release. premajor and prepatch work the same way.
      inc (release, identifier) {
        switch (release) {
          case 'premajor':
            this.prerelease.length = 0;
            this.patch = 0;
            this.minor = 0;
            this.major++;
            this.inc('pre', identifier);
            break
          case 'preminor':
            this.prerelease.length = 0;
            this.patch = 0;
            this.minor++;
            this.inc('pre', identifier);
            break
          case 'prepatch':
            // If this is already a prerelease, it will bump to the next version
            // drop any prereleases that might already exist, since they are not
            // relevant at this point.
            this.prerelease.length = 0;
            this.inc('patch', identifier);
            this.inc('pre', identifier);
            break
          // If the input is a non-prerelease version, this acts the same as
          // prepatch.
          case 'prerelease':
            if (this.prerelease.length === 0) {
              this.inc('patch', identifier);
            }
            this.inc('pre', identifier);
            break

          case 'major':
            // If this is a pre-major version, bump up to the same major version.
            // Otherwise increment major.
            // 1.0.0-5 bumps to 1.0.0
            // 1.1.0 bumps to 2.0.0
            if (
              this.minor !== 0 ||
              this.patch !== 0 ||
              this.prerelease.length === 0
            ) {
              this.major++;
            }
            this.minor = 0;
            this.patch = 0;
            this.prerelease = [];
            break
          case 'minor':
            // If this is a pre-minor version, bump up to the same minor version.
            // Otherwise increment minor.
            // 1.2.0-5 bumps to 1.2.0
            // 1.2.1 bumps to 1.3.0
            if (this.patch !== 0 || this.prerelease.length === 0) {
              this.minor++;
            }
            this.patch = 0;
            this.prerelease = [];
            break
          case 'patch':
            // If this is not a pre-release version, it will increment the patch.
            // If it is a pre-release it will bump up to the same patch version.
            // 1.2.0-5 patches to 1.2.0
            // 1.2.0 patches to 1.2.1
            if (this.prerelease.length === 0) {
              this.patch++;
            }
            this.prerelease = [];
            break
          // This probably shouldn't be used publicly.
          // 1.0.0 'pre' would become 1.0.0-0 which is the wrong direction.
          case 'pre':
            if (this.prerelease.length === 0) {
              this.prerelease = [0];
            } else {
              let i = this.prerelease.length;
              while (--i >= 0) {
                if (typeof this.prerelease[i] === 'number') {
                  this.prerelease[i]++;
                  i = -2;
                }
              }
              if (i === -1) {
                // didn't increment anything
                this.prerelease.push(0);
              }
            }
            if (identifier) {
              // 1.2.0-beta.1 bumps to 1.2.0-beta.2,
              // 1.2.0-beta.fooblz or 1.2.0-beta bumps to 1.2.0-beta.0
              if (this.prerelease[0] === identifier) {
                if (isNaN(this.prerelease[1])) {
                  this.prerelease = [identifier, 0];
                }
              } else {
                this.prerelease = [identifier, 0];
              }
            }
            break

          default:
            throw new Error(`invalid increment argument: ${release}`)
        }
        this.format();
        this.raw = this.version;
        return this
      }
    }

    var semver$3 = SemVer$e;

    const {MAX_LENGTH} = constants$1;
    const { re: re$3, t: t$3 } = re$5.exports;
    const SemVer$d = semver$3;

    const parseOptions$2 = parseOptions_1;
    const parse$7 = (version, options) => {
      options = parseOptions$2(options);

      if (version instanceof SemVer$d) {
        return version
      }

      if (typeof version !== 'string') {
        return null
      }

      if (version.length > MAX_LENGTH) {
        return null
      }

      const r = options.loose ? re$3[t$3.LOOSE] : re$3[t$3.FULL];
      if (!r.test(version)) {
        return null
      }

      try {
        return new SemVer$d(version, options)
      } catch (er) {
        return null
      }
    };

    var parse_1 = parse$7;

    const parse$6 = parse_1;
    const valid$1 = (version, options) => {
      const v = parse$6(version, options);
      return v ? v.version : null
    };
    var valid_1 = valid$1;

    const parse$5 = parse_1;
    const clean = (version, options) => {
      const s = parse$5(version.trim().replace(/^[=v]+/, ''), options);
      return s ? s.version : null
    };
    var clean_1 = clean;

    const SemVer$c = semver$3;

    const inc = (version, release, options, identifier) => {
      if (typeof (options) === 'string') {
        identifier = options;
        options = undefined;
      }

      try {
        return new SemVer$c(version, options).inc(release, identifier).version
      } catch (er) {
        return null
      }
    };
    var inc_1 = inc;

    const SemVer$b = semver$3;
    const compare$a = (a, b, loose) =>
      new SemVer$b(a, loose).compare(new SemVer$b(b, loose));

    var compare_1 = compare$a;

    const compare$9 = compare_1;
    const eq$e = (a, b, loose) => compare$9(a, b, loose) === 0;
    var eq_1$2 = eq$e;

    const parse$4 = parse_1;
    const eq$d = eq_1$2;

    const diff = (version1, version2) => {
      if (eq$d(version1, version2)) {
        return null
      } else {
        const v1 = parse$4(version1);
        const v2 = parse$4(version2);
        const hasPre = v1.prerelease.length || v2.prerelease.length;
        const prefix = hasPre ? 'pre' : '';
        const defaultResult = hasPre ? 'prerelease' : '';
        for (const key in v1) {
          if (key === 'major' || key === 'minor' || key === 'patch') {
            if (v1[key] !== v2[key]) {
              return prefix + key
            }
          }
        }
        return defaultResult // may be undefined
      }
    };
    var diff_1 = diff;

    const SemVer$a = semver$3;
    const major = (a, loose) => new SemVer$a(a, loose).major;
    var major_1 = major;

    const SemVer$9 = semver$3;
    const minor = (a, loose) => new SemVer$9(a, loose).minor;
    var minor_1 = minor;

    const SemVer$8 = semver$3;
    const patch$2 = (a, loose) => new SemVer$8(a, loose).patch;
    var patch_1 = patch$2;

    const parse$3 = parse_1;
    const prerelease = (version, options) => {
      const parsed = parse$3(version, options);
      return (parsed && parsed.prerelease.length) ? parsed.prerelease : null
    };
    var prerelease_1 = prerelease;

    const compare$8 = compare_1;
    const rcompare = (a, b, loose) => compare$8(b, a, loose);
    var rcompare_1 = rcompare;

    const compare$7 = compare_1;
    const compareLoose = (a, b) => compare$7(a, b, true);
    var compareLoose_1 = compareLoose;

    const SemVer$7 = semver$3;
    const compareBuild$2 = (a, b, loose) => {
      const versionA = new SemVer$7(a, loose);
      const versionB = new SemVer$7(b, loose);
      return versionA.compare(versionB) || versionA.compareBuild(versionB)
    };
    var compareBuild_1 = compareBuild$2;

    const compareBuild$1 = compareBuild_1;
    const sort$1 = (list, loose) => list.sort((a, b) => compareBuild$1(a, b, loose));
    var sort_1 = sort$1;

    const compareBuild = compareBuild_1;
    const rsort = (list, loose) => list.sort((a, b) => compareBuild(b, a, loose));
    var rsort_1 = rsort;

    const compare$6 = compare_1;
    const gt$3 = (a, b, loose) => compare$6(a, b, loose) > 0;
    var gt_1 = gt$3;

    const compare$5 = compare_1;
    const lt$2 = (a, b, loose) => compare$5(a, b, loose) < 0;
    var lt_1 = lt$2;

    const compare$4 = compare_1;
    const neq$1 = (a, b, loose) => compare$4(a, b, loose) !== 0;
    var neq_1 = neq$1;

    const compare$3 = compare_1;
    const gte$3 = (a, b, loose) => compare$3(a, b, loose) >= 0;
    var gte_1 = gte$3;

    const compare$2 = compare_1;
    const lte$3 = (a, b, loose) => compare$2(a, b, loose) <= 0;
    var lte_1 = lte$3;

    const eq$c = eq_1$2;
    const neq = neq_1;
    const gt$2 = gt_1;
    const gte$2 = gte_1;
    const lt$1 = lt_1;
    const lte$2 = lte_1;

    const cmp$1 = (a, op, b, loose) => {
      switch (op) {
        case '===':
          if (typeof a === 'object')
            a = a.version;
          if (typeof b === 'object')
            b = b.version;
          return a === b

        case '!==':
          if (typeof a === 'object')
            a = a.version;
          if (typeof b === 'object')
            b = b.version;
          return a !== b

        case '':
        case '=':
        case '==':
          return eq$c(a, b, loose)

        case '!=':
          return neq(a, b, loose)

        case '>':
          return gt$2(a, b, loose)

        case '>=':
          return gte$2(a, b, loose)

        case '<':
          return lt$1(a, b, loose)

        case '<=':
          return lte$2(a, b, loose)

        default:
          throw new TypeError(`Invalid operator: ${op}`)
      }
    };
    var cmp_1 = cmp$1;

    const SemVer$6 = semver$3;
    const parse$2 = parse_1;
    const {re: re$2, t: t$2} = re$5.exports;

    const coerce = (version, options) => {
      if (version instanceof SemVer$6) {
        return version
      }

      if (typeof version === 'number') {
        version = String(version);
      }

      if (typeof version !== 'string') {
        return null
      }

      options = options || {};

      let match = null;
      if (!options.rtl) {
        match = version.match(re$2[t$2.COERCE]);
      } else {
        // Find the right-most coercible string that does not share
        // a terminus with a more left-ward coercible string.
        // Eg, '1.2.3.4' wants to coerce '2.3.4', not '3.4' or '4'
        //
        // Walk through the string checking with a /g regexp
        // Manually set the index so as to pick up overlapping matches.
        // Stop when we get a match that ends at the string end, since no
        // coercible string can be more right-ward without the same terminus.
        let next;
        while ((next = re$2[t$2.COERCERTL].exec(version)) &&
            (!match || match.index + match[0].length !== version.length)
        ) {
          if (!match ||
                next.index + next[0].length !== match.index + match[0].length) {
            match = next;
          }
          re$2[t$2.COERCERTL].lastIndex = next.index + next[1].length + next[2].length;
        }
        // leave it in a clean state
        re$2[t$2.COERCERTL].lastIndex = -1;
      }

      if (match === null)
        return null

      return parse$2(`${match[2]}.${match[3] || '0'}.${match[4] || '0'}`, options)
    };
    var coerce_1 = coerce;

    var yallist = Yallist$1;

    Yallist$1.Node = Node$1;
    Yallist$1.create = Yallist$1;

    function Yallist$1 (list) {
      var self = this;
      if (!(self instanceof Yallist$1)) {
        self = new Yallist$1();
      }

      self.tail = null;
      self.head = null;
      self.length = 0;

      if (list && typeof list.forEach === 'function') {
        list.forEach(function (item) {
          self.push(item);
        });
      } else if (arguments.length > 0) {
        for (var i = 0, l = arguments.length; i < l; i++) {
          self.push(arguments[i]);
        }
      }

      return self
    }

    Yallist$1.prototype.removeNode = function (node) {
      if (node.list !== this) {
        throw new Error('removing node which does not belong to this list')
      }

      var next = node.next;
      var prev = node.prev;

      if (next) {
        next.prev = prev;
      }

      if (prev) {
        prev.next = next;
      }

      if (node === this.head) {
        this.head = next;
      }
      if (node === this.tail) {
        this.tail = prev;
      }

      node.list.length--;
      node.next = null;
      node.prev = null;
      node.list = null;

      return next
    };

    Yallist$1.prototype.unshiftNode = function (node) {
      if (node === this.head) {
        return
      }

      if (node.list) {
        node.list.removeNode(node);
      }

      var head = this.head;
      node.list = this;
      node.next = head;
      if (head) {
        head.prev = node;
      }

      this.head = node;
      if (!this.tail) {
        this.tail = node;
      }
      this.length++;
    };

    Yallist$1.prototype.pushNode = function (node) {
      if (node === this.tail) {
        return
      }

      if (node.list) {
        node.list.removeNode(node);
      }

      var tail = this.tail;
      node.list = this;
      node.prev = tail;
      if (tail) {
        tail.next = node;
      }

      this.tail = node;
      if (!this.head) {
        this.head = node;
      }
      this.length++;
    };

    Yallist$1.prototype.push = function () {
      for (var i = 0, l = arguments.length; i < l; i++) {
        push(this, arguments[i]);
      }
      return this.length
    };

    Yallist$1.prototype.unshift = function () {
      for (var i = 0, l = arguments.length; i < l; i++) {
        unshift(this, arguments[i]);
      }
      return this.length
    };

    Yallist$1.prototype.pop = function () {
      if (!this.tail) {
        return undefined
      }

      var res = this.tail.value;
      this.tail = this.tail.prev;
      if (this.tail) {
        this.tail.next = null;
      } else {
        this.head = null;
      }
      this.length--;
      return res
    };

    Yallist$1.prototype.shift = function () {
      if (!this.head) {
        return undefined
      }

      var res = this.head.value;
      this.head = this.head.next;
      if (this.head) {
        this.head.prev = null;
      } else {
        this.tail = null;
      }
      this.length--;
      return res
    };

    Yallist$1.prototype.forEach = function (fn, thisp) {
      thisp = thisp || this;
      for (var walker = this.head, i = 0; walker !== null; i++) {
        fn.call(thisp, walker.value, i, this);
        walker = walker.next;
      }
    };

    Yallist$1.prototype.forEachReverse = function (fn, thisp) {
      thisp = thisp || this;
      for (var walker = this.tail, i = this.length - 1; walker !== null; i--) {
        fn.call(thisp, walker.value, i, this);
        walker = walker.prev;
      }
    };

    Yallist$1.prototype.get = function (n) {
      for (var i = 0, walker = this.head; walker !== null && i < n; i++) {
        // abort out of the list early if we hit a cycle
        walker = walker.next;
      }
      if (i === n && walker !== null) {
        return walker.value
      }
    };

    Yallist$1.prototype.getReverse = function (n) {
      for (var i = 0, walker = this.tail; walker !== null && i < n; i++) {
        // abort out of the list early if we hit a cycle
        walker = walker.prev;
      }
      if (i === n && walker !== null) {
        return walker.value
      }
    };

    Yallist$1.prototype.map = function (fn, thisp) {
      thisp = thisp || this;
      var res = new Yallist$1();
      for (var walker = this.head; walker !== null;) {
        res.push(fn.call(thisp, walker.value, this));
        walker = walker.next;
      }
      return res
    };

    Yallist$1.prototype.mapReverse = function (fn, thisp) {
      thisp = thisp || this;
      var res = new Yallist$1();
      for (var walker = this.tail; walker !== null;) {
        res.push(fn.call(thisp, walker.value, this));
        walker = walker.prev;
      }
      return res
    };

    Yallist$1.prototype.reduce = function (fn, initial) {
      var acc;
      var walker = this.head;
      if (arguments.length > 1) {
        acc = initial;
      } else if (this.head) {
        walker = this.head.next;
        acc = this.head.value;
      } else {
        throw new TypeError('Reduce of empty list with no initial value')
      }

      for (var i = 0; walker !== null; i++) {
        acc = fn(acc, walker.value, i);
        walker = walker.next;
      }

      return acc
    };

    Yallist$1.prototype.reduceReverse = function (fn, initial) {
      var acc;
      var walker = this.tail;
      if (arguments.length > 1) {
        acc = initial;
      } else if (this.tail) {
        walker = this.tail.prev;
        acc = this.tail.value;
      } else {
        throw new TypeError('Reduce of empty list with no initial value')
      }

      for (var i = this.length - 1; walker !== null; i--) {
        acc = fn(acc, walker.value, i);
        walker = walker.prev;
      }

      return acc
    };

    Yallist$1.prototype.toArray = function () {
      var arr = new Array(this.length);
      for (var i = 0, walker = this.head; walker !== null; i++) {
        arr[i] = walker.value;
        walker = walker.next;
      }
      return arr
    };

    Yallist$1.prototype.toArrayReverse = function () {
      var arr = new Array(this.length);
      for (var i = 0, walker = this.tail; walker !== null; i++) {
        arr[i] = walker.value;
        walker = walker.prev;
      }
      return arr
    };

    Yallist$1.prototype.slice = function (from, to) {
      to = to || this.length;
      if (to < 0) {
        to += this.length;
      }
      from = from || 0;
      if (from < 0) {
        from += this.length;
      }
      var ret = new Yallist$1();
      if (to < from || to < 0) {
        return ret
      }
      if (from < 0) {
        from = 0;
      }
      if (to > this.length) {
        to = this.length;
      }
      for (var i = 0, walker = this.head; walker !== null && i < from; i++) {
        walker = walker.next;
      }
      for (; walker !== null && i < to; i++, walker = walker.next) {
        ret.push(walker.value);
      }
      return ret
    };

    Yallist$1.prototype.sliceReverse = function (from, to) {
      to = to || this.length;
      if (to < 0) {
        to += this.length;
      }
      from = from || 0;
      if (from < 0) {
        from += this.length;
      }
      var ret = new Yallist$1();
      if (to < from || to < 0) {
        return ret
      }
      if (from < 0) {
        from = 0;
      }
      if (to > this.length) {
        to = this.length;
      }
      for (var i = this.length, walker = this.tail; walker !== null && i > to; i--) {
        walker = walker.prev;
      }
      for (; walker !== null && i > from; i--, walker = walker.prev) {
        ret.push(walker.value);
      }
      return ret
    };

    Yallist$1.prototype.splice = function (start, deleteCount, ...nodes) {
      if (start > this.length) {
        start = this.length - 1;
      }
      if (start < 0) {
        start = this.length + start;
      }

      for (var i = 0, walker = this.head; walker !== null && i < start; i++) {
        walker = walker.next;
      }

      var ret = [];
      for (var i = 0; walker && i < deleteCount; i++) {
        ret.push(walker.value);
        walker = this.removeNode(walker);
      }
      if (walker === null) {
        walker = this.tail;
      }

      if (walker !== this.head && walker !== this.tail) {
        walker = walker.prev;
      }

      for (var i = 0; i < nodes.length; i++) {
        walker = insert(this, walker, nodes[i]);
      }
      return ret;
    };

    Yallist$1.prototype.reverse = function () {
      var head = this.head;
      var tail = this.tail;
      for (var walker = head; walker !== null; walker = walker.prev) {
        var p = walker.prev;
        walker.prev = walker.next;
        walker.next = p;
      }
      this.head = tail;
      this.tail = head;
      return this
    };

    function insert (self, node, value) {
      var inserted = node === self.head ?
        new Node$1(value, null, node, self) :
        new Node$1(value, node, node.next, self);

      if (inserted.next === null) {
        self.tail = inserted;
      }
      if (inserted.prev === null) {
        self.head = inserted;
      }

      self.length++;

      return inserted
    }

    function push (self, item) {
      self.tail = new Node$1(item, self.tail, null, self);
      if (!self.head) {
        self.head = self.tail;
      }
      self.length++;
    }

    function unshift (self, item) {
      self.head = new Node$1(item, null, self.head, self);
      if (!self.tail) {
        self.tail = self.head;
      }
      self.length++;
    }

    function Node$1 (value, prev, next, list) {
      if (!(this instanceof Node$1)) {
        return new Node$1(value, prev, next, list)
      }

      this.list = list;
      this.value = value;

      if (prev) {
        prev.next = this;
        this.prev = prev;
      } else {
        this.prev = null;
      }

      if (next) {
        next.prev = this;
        this.next = next;
      } else {
        this.next = null;
      }
    }

    try {
      // add if support for Symbol.iterator is present
      require('./iterator.js')(Yallist$1);
    } catch (er) {}

    // A linked list to keep track of recently-used-ness
    const Yallist = yallist;

    const MAX = Symbol('max');
    const LENGTH = Symbol('length');
    const LENGTH_CALCULATOR = Symbol('lengthCalculator');
    const ALLOW_STALE = Symbol('allowStale');
    const MAX_AGE = Symbol('maxAge');
    const DISPOSE = Symbol('dispose');
    const NO_DISPOSE_ON_SET = Symbol('noDisposeOnSet');
    const LRU_LIST = Symbol('lruList');
    const CACHE = Symbol('cache');
    const UPDATE_AGE_ON_GET = Symbol('updateAgeOnGet');

    const naiveLength = () => 1;

    // lruList is a yallist where the head is the youngest
    // item, and the tail is the oldest.  the list contains the Hit
    // objects as the entries.
    // Each Hit object has a reference to its Yallist.Node.  This
    // never changes.
    //
    // cache is a Map (or PseudoMap) that matches the keys to
    // the Yallist.Node object.
    class LRUCache {
      constructor (options) {
        if (typeof options === 'number')
          options = { max: options };

        if (!options)
          options = {};

        if (options.max && (typeof options.max !== 'number' || options.max < 0))
          throw new TypeError('max must be a non-negative number')
        // Kind of weird to have a default max of Infinity, but oh well.
        this[MAX] = options.max || Infinity;

        const lc = options.length || naiveLength;
        this[LENGTH_CALCULATOR] = (typeof lc !== 'function') ? naiveLength : lc;
        this[ALLOW_STALE] = options.stale || false;
        if (options.maxAge && typeof options.maxAge !== 'number')
          throw new TypeError('maxAge must be a number')
        this[MAX_AGE] = options.maxAge || 0;
        this[DISPOSE] = options.dispose;
        this[NO_DISPOSE_ON_SET] = options.noDisposeOnSet || false;
        this[UPDATE_AGE_ON_GET] = options.updateAgeOnGet || false;
        this.reset();
      }

      // resize the cache when the max changes.
      set max (mL) {
        if (typeof mL !== 'number' || mL < 0)
          throw new TypeError('max must be a non-negative number')

        this[MAX] = mL || Infinity;
        trim$1(this);
      }
      get max () {
        return this[MAX]
      }

      set allowStale (allowStale) {
        this[ALLOW_STALE] = !!allowStale;
      }
      get allowStale () {
        return this[ALLOW_STALE]
      }

      set maxAge (mA) {
        if (typeof mA !== 'number')
          throw new TypeError('maxAge must be a non-negative number')

        this[MAX_AGE] = mA;
        trim$1(this);
      }
      get maxAge () {
        return this[MAX_AGE]
      }

      // resize the cache when the lengthCalculator changes.
      set lengthCalculator (lC) {
        if (typeof lC !== 'function')
          lC = naiveLength;

        if (lC !== this[LENGTH_CALCULATOR]) {
          this[LENGTH_CALCULATOR] = lC;
          this[LENGTH] = 0;
          this[LRU_LIST].forEach(hit => {
            hit.length = this[LENGTH_CALCULATOR](hit.value, hit.key);
            this[LENGTH] += hit.length;
          });
        }
        trim$1(this);
      }
      get lengthCalculator () { return this[LENGTH_CALCULATOR] }

      get length () { return this[LENGTH] }
      get itemCount () { return this[LRU_LIST].length }

      rforEach (fn, thisp) {
        thisp = thisp || this;
        for (let walker = this[LRU_LIST].tail; walker !== null;) {
          const prev = walker.prev;
          forEachStep(this, fn, walker, thisp);
          walker = prev;
        }
      }

      forEach (fn, thisp) {
        thisp = thisp || this;
        for (let walker = this[LRU_LIST].head; walker !== null;) {
          const next = walker.next;
          forEachStep(this, fn, walker, thisp);
          walker = next;
        }
      }

      keys () {
        return this[LRU_LIST].toArray().map(k => k.key)
      }

      values () {
        return this[LRU_LIST].toArray().map(k => k.value)
      }

      reset () {
        if (this[DISPOSE] &&
            this[LRU_LIST] &&
            this[LRU_LIST].length) {
          this[LRU_LIST].forEach(hit => this[DISPOSE](hit.key, hit.value));
        }

        this[CACHE] = new Map(); // hash of items by key
        this[LRU_LIST] = new Yallist(); // list of items in order of use recency
        this[LENGTH] = 0; // length of items in the list
      }

      dump () {
        return this[LRU_LIST].map(hit =>
          isStale(this, hit) ? false : {
            k: hit.key,
            v: hit.value,
            e: hit.now + (hit.maxAge || 0)
          }).toArray().filter(h => h)
      }

      dumpLru () {
        return this[LRU_LIST]
      }

      set (key, value, maxAge) {
        maxAge = maxAge || this[MAX_AGE];

        if (maxAge && typeof maxAge !== 'number')
          throw new TypeError('maxAge must be a number')

        const now = maxAge ? Date.now() : 0;
        const len = this[LENGTH_CALCULATOR](value, key);

        if (this[CACHE].has(key)) {
          if (len > this[MAX]) {
            del(this, this[CACHE].get(key));
            return false
          }

          const node = this[CACHE].get(key);
          const item = node.value;

          // dispose of the old one before overwriting
          // split out into 2 ifs for better coverage tracking
          if (this[DISPOSE]) {
            if (!this[NO_DISPOSE_ON_SET])
              this[DISPOSE](key, item.value);
          }

          item.now = now;
          item.maxAge = maxAge;
          item.value = value;
          this[LENGTH] += len - item.length;
          item.length = len;
          this.get(key);
          trim$1(this);
          return true
        }

        const hit = new Entry(key, value, len, now, maxAge);

        // oversized objects fall out of cache automatically.
        if (hit.length > this[MAX]) {
          if (this[DISPOSE])
            this[DISPOSE](key, value);

          return false
        }

        this[LENGTH] += hit.length;
        this[LRU_LIST].unshift(hit);
        this[CACHE].set(key, this[LRU_LIST].head);
        trim$1(this);
        return true
      }

      has (key) {
        if (!this[CACHE].has(key)) return false
        const hit = this[CACHE].get(key).value;
        return !isStale(this, hit)
      }

      get (key) {
        return get$4(this, key, true)
      }

      peek (key) {
        return get$4(this, key, false)
      }

      pop () {
        const node = this[LRU_LIST].tail;
        if (!node)
          return null

        del(this, node);
        return node.value
      }

      del (key) {
        del(this, this[CACHE].get(key));
      }

      load (arr) {
        // reset the cache
        this.reset();

        const now = Date.now();
        // A previous serialized cache has the most recent items first
        for (let l = arr.length - 1; l >= 0; l--) {
          const hit = arr[l];
          const expiresAt = hit.e || 0;
          if (expiresAt === 0)
            // the item was created without expiration in a non aged cache
            this.set(hit.k, hit.v);
          else {
            const maxAge = expiresAt - now;
            // dont add already expired items
            if (maxAge > 0) {
              this.set(hit.k, hit.v, maxAge);
            }
          }
        }
      }

      prune () {
        this[CACHE].forEach((value, key) => get$4(this, key, false));
      }
    }

    const get$4 = (self, key, doUse) => {
      const node = self[CACHE].get(key);
      if (node) {
        const hit = node.value;
        if (isStale(self, hit)) {
          del(self, node);
          if (!self[ALLOW_STALE])
            return undefined
        } else {
          if (doUse) {
            if (self[UPDATE_AGE_ON_GET])
              node.value.now = Date.now();
            self[LRU_LIST].unshiftNode(node);
          }
        }
        return hit.value
      }
    };

    const isStale = (self, hit) => {
      if (!hit || (!hit.maxAge && !self[MAX_AGE]))
        return false

      const diff = Date.now() - hit.now;
      return hit.maxAge ? diff > hit.maxAge
        : self[MAX_AGE] && (diff > self[MAX_AGE])
    };

    const trim$1 = self => {
      if (self[LENGTH] > self[MAX]) {
        for (let walker = self[LRU_LIST].tail;
          self[LENGTH] > self[MAX] && walker !== null;) {
          // We know that we're about to delete this one, and also
          // what the next least recently used key will be, so just
          // go ahead and set it now.
          const prev = walker.prev;
          del(self, walker);
          walker = prev;
        }
      }
    };

    const del = (self, node) => {
      if (node) {
        const hit = node.value;
        if (self[DISPOSE])
          self[DISPOSE](hit.key, hit.value);

        self[LENGTH] -= hit.length;
        self[CACHE].delete(hit.key);
        self[LRU_LIST].removeNode(node);
      }
    };

    class Entry {
      constructor (key, value, length, now, maxAge) {
        this.key = key;
        this.value = value;
        this.length = length;
        this.now = now;
        this.maxAge = maxAge || 0;
      }
    }

    const forEachStep = (self, fn, node, thisp) => {
      let hit = node.value;
      if (isStale(self, hit)) {
        del(self, node);
        if (!self[ALLOW_STALE])
          hit = undefined;
      }
      if (hit)
        fn.call(thisp, hit.value, hit.key, self);
    };

    var lruCache = LRUCache;

    // hoisted class for cyclic dependency
    class Range$a {
      constructor (range, options) {
        options = parseOptions$1(options);

        if (range instanceof Range$a) {
          if (
            range.loose === !!options.loose &&
            range.includePrerelease === !!options.includePrerelease
          ) {
            return range
          } else {
            return new Range$a(range.raw, options)
          }
        }

        if (range instanceof Comparator$3) {
          // just put it in the set and return
          this.raw = range.value;
          this.set = [[range]];
          this.format();
          return this
        }

        this.options = options;
        this.loose = !!options.loose;
        this.includePrerelease = !!options.includePrerelease;

        // First, split based on boolean or ||
        this.raw = range;
        this.set = range
          .split(/\s*\|\|\s*/)
          // map the range to a 2d array of comparators
          .map(range => this.parseRange(range.trim()))
          // throw out any comparator lists that are empty
          // this generally means that it was not a valid range, which is allowed
          // in loose mode, but will still throw if the WHOLE range is invalid.
          .filter(c => c.length);

        if (!this.set.length) {
          throw new TypeError(`Invalid SemVer Range: ${range}`)
        }

        // if we have any that are not the null set, throw out null sets.
        if (this.set.length > 1) {
          // keep the first one, in case they're all null sets
          const first = this.set[0];
          this.set = this.set.filter(c => !isNullSet(c[0]));
          if (this.set.length === 0)
            this.set = [first];
          else if (this.set.length > 1) {
            // if we have any that are *, then the range is just *
            for (const c of this.set) {
              if (c.length === 1 && isAny(c[0])) {
                this.set = [c];
                break
              }
            }
          }
        }

        this.format();
      }

      format () {
        this.range = this.set
          .map((comps) => {
            return comps.join(' ').trim()
          })
          .join('||')
          .trim();
        return this.range
      }

      toString () {
        return this.range
      }

      parseRange (range) {
        range = range.trim();

        // memoize range parsing for performance.
        // this is a very hot path, and fully deterministic.
        const memoOpts = Object.keys(this.options).join(',');
        const memoKey = `parseRange:${memoOpts}:${range}`;
        const cached = cache.get(memoKey);
        if (cached)
          return cached

        const loose = this.options.loose;
        // `1.2.3 - 1.2.4` => `>=1.2.3 <=1.2.4`
        const hr = loose ? re$1[t$1.HYPHENRANGELOOSE] : re$1[t$1.HYPHENRANGE];
        range = range.replace(hr, hyphenReplace(this.options.includePrerelease));
        debug$6('hyphen replace', range);
        // `> 1.2.3 < 1.2.5` => `>1.2.3 <1.2.5`
        range = range.replace(re$1[t$1.COMPARATORTRIM], comparatorTrimReplace);
        debug$6('comparator trim', range, re$1[t$1.COMPARATORTRIM]);

        // `~ 1.2.3` => `~1.2.3`
        range = range.replace(re$1[t$1.TILDETRIM], tildeTrimReplace);

        // `^ 1.2.3` => `^1.2.3`
        range = range.replace(re$1[t$1.CARETTRIM], caretTrimReplace);

        // normalize spaces
        range = range.split(/\s+/).join(' ');

        // At this point, the range is completely trimmed and
        // ready to be split into comparators.

        const compRe = loose ? re$1[t$1.COMPARATORLOOSE] : re$1[t$1.COMPARATOR];
        const rangeList = range
          .split(' ')
          .map(comp => parseComparator(comp, this.options))
          .join(' ')
          .split(/\s+/)
          // >=0.0.0 is equivalent to *
          .map(comp => replaceGTE0(comp, this.options))
          // in loose mode, throw out any that are not valid comparators
          .filter(this.options.loose ? comp => !!comp.match(compRe) : () => true)
          .map(comp => new Comparator$3(comp, this.options));

        // if any comparators are the null set, then replace with JUST null set
        // if more than one comparator, remove any * comparators
        // also, don't include the same comparator more than once
        rangeList.length;
        const rangeMap = new Map();
        for (const comp of rangeList) {
          if (isNullSet(comp))
            return [comp]
          rangeMap.set(comp.value, comp);
        }
        if (rangeMap.size > 1 && rangeMap.has(''))
          rangeMap.delete('');

        const result = [...rangeMap.values()];
        cache.set(memoKey, result);
        return result
      }

      intersects (range, options) {
        if (!(range instanceof Range$a)) {
          throw new TypeError('a Range is required')
        }

        return this.set.some((thisComparators) => {
          return (
            isSatisfiable(thisComparators, options) &&
            range.set.some((rangeComparators) => {
              return (
                isSatisfiable(rangeComparators, options) &&
                thisComparators.every((thisComparator) => {
                  return rangeComparators.every((rangeComparator) => {
                    return thisComparator.intersects(rangeComparator, options)
                  })
                })
              )
            })
          )
        })
      }

      // if ANY of the sets match ALL of its comparators, then pass
      test (version) {
        if (!version) {
          return false
        }

        if (typeof version === 'string') {
          try {
            version = new SemVer$5(version, this.options);
          } catch (er) {
            return false
          }
        }

        for (let i = 0; i < this.set.length; i++) {
          if (testSet(this.set[i], version, this.options)) {
            return true
          }
        }
        return false
      }
    }
    var range$3 = Range$a;

    const LRU = lruCache;
    const cache = new LRU({ max: 1000 });

    const parseOptions$1 = parseOptions_1;
    const Comparator$3 = comparator;
    const debug$6 = debug_1$1;
    const SemVer$5 = semver$3;
    const {
      re: re$1,
      t: t$1,
      comparatorTrimReplace,
      tildeTrimReplace,
      caretTrimReplace
    } = re$5.exports;

    const isNullSet = c => c.value === '<0.0.0-0';
    const isAny = c => c.value === '';

    // take a set of comparators and determine whether there
    // exists a version which can satisfy it
    const isSatisfiable = (comparators, options) => {
      let result = true;
      const remainingComparators = comparators.slice();
      let testComparator = remainingComparators.pop();

      while (result && remainingComparators.length) {
        result = remainingComparators.every((otherComparator) => {
          return testComparator.intersects(otherComparator, options)
        });

        testComparator = remainingComparators.pop();
      }

      return result
    };

    // comprised of xranges, tildes, stars, and gtlt's at this point.
    // already replaced the hyphen ranges
    // turn into a set of JUST comparators.
    const parseComparator = (comp, options) => {
      debug$6('comp', comp, options);
      comp = replaceCarets(comp, options);
      debug$6('caret', comp);
      comp = replaceTildes(comp, options);
      debug$6('tildes', comp);
      comp = replaceXRanges(comp, options);
      debug$6('xrange', comp);
      comp = replaceStars(comp, options);
      debug$6('stars', comp);
      return comp
    };

    const isX = id => !id || id.toLowerCase() === 'x' || id === '*';

    // ~, ~> --> * (any, kinda silly)
    // ~2, ~2.x, ~2.x.x, ~>2, ~>2.x ~>2.x.x --> >=2.0.0 <3.0.0-0
    // ~2.0, ~2.0.x, ~>2.0, ~>2.0.x --> >=2.0.0 <2.1.0-0
    // ~1.2, ~1.2.x, ~>1.2, ~>1.2.x --> >=1.2.0 <1.3.0-0
    // ~1.2.3, ~>1.2.3 --> >=1.2.3 <1.3.0-0
    // ~1.2.0, ~>1.2.0 --> >=1.2.0 <1.3.0-0
    const replaceTildes = (comp, options) =>
      comp.trim().split(/\s+/).map((comp) => {
        return replaceTilde(comp, options)
      }).join(' ');

    const replaceTilde = (comp, options) => {
      const r = options.loose ? re$1[t$1.TILDELOOSE] : re$1[t$1.TILDE];
      return comp.replace(r, (_, M, m, p, pr) => {
        debug$6('tilde', comp, _, M, m, p, pr);
        let ret;

        if (isX(M)) {
          ret = '';
        } else if (isX(m)) {
          ret = `>=${M}.0.0 <${+M + 1}.0.0-0`;
        } else if (isX(p)) {
          // ~1.2 == >=1.2.0 <1.3.0-0
          ret = `>=${M}.${m}.0 <${M}.${+m + 1}.0-0`;
        } else if (pr) {
          debug$6('replaceTilde pr', pr);
          ret = `>=${M}.${m}.${p}-${pr
      } <${M}.${+m + 1}.0-0`;
        } else {
          // ~1.2.3 == >=1.2.3 <1.3.0-0
          ret = `>=${M}.${m}.${p
      } <${M}.${+m + 1}.0-0`;
        }

        debug$6('tilde return', ret);
        return ret
      })
    };

    // ^ --> * (any, kinda silly)
    // ^2, ^2.x, ^2.x.x --> >=2.0.0 <3.0.0-0
    // ^2.0, ^2.0.x --> >=2.0.0 <3.0.0-0
    // ^1.2, ^1.2.x --> >=1.2.0 <2.0.0-0
    // ^1.2.3 --> >=1.2.3 <2.0.0-0
    // ^1.2.0 --> >=1.2.0 <2.0.0-0
    const replaceCarets = (comp, options) =>
      comp.trim().split(/\s+/).map((comp) => {
        return replaceCaret(comp, options)
      }).join(' ');

    const replaceCaret = (comp, options) => {
      debug$6('caret', comp, options);
      const r = options.loose ? re$1[t$1.CARETLOOSE] : re$1[t$1.CARET];
      const z = options.includePrerelease ? '-0' : '';
      return comp.replace(r, (_, M, m, p, pr) => {
        debug$6('caret', comp, _, M, m, p, pr);
        let ret;

        if (isX(M)) {
          ret = '';
        } else if (isX(m)) {
          ret = `>=${M}.0.0${z} <${+M + 1}.0.0-0`;
        } else if (isX(p)) {
          if (M === '0') {
            ret = `>=${M}.${m}.0${z} <${M}.${+m + 1}.0-0`;
          } else {
            ret = `>=${M}.${m}.0${z} <${+M + 1}.0.0-0`;
          }
        } else if (pr) {
          debug$6('replaceCaret pr', pr);
          if (M === '0') {
            if (m === '0') {
              ret = `>=${M}.${m}.${p}-${pr
          } <${M}.${m}.${+p + 1}-0`;
            } else {
              ret = `>=${M}.${m}.${p}-${pr
          } <${M}.${+m + 1}.0-0`;
            }
          } else {
            ret = `>=${M}.${m}.${p}-${pr
        } <${+M + 1}.0.0-0`;
          }
        } else {
          debug$6('no pr');
          if (M === '0') {
            if (m === '0') {
              ret = `>=${M}.${m}.${p
          }${z} <${M}.${m}.${+p + 1}-0`;
            } else {
              ret = `>=${M}.${m}.${p
          }${z} <${M}.${+m + 1}.0-0`;
            }
          } else {
            ret = `>=${M}.${m}.${p
        } <${+M + 1}.0.0-0`;
          }
        }

        debug$6('caret return', ret);
        return ret
      })
    };

    const replaceXRanges = (comp, options) => {
      debug$6('replaceXRanges', comp, options);
      return comp.split(/\s+/).map((comp) => {
        return replaceXRange(comp, options)
      }).join(' ')
    };

    const replaceXRange = (comp, options) => {
      comp = comp.trim();
      const r = options.loose ? re$1[t$1.XRANGELOOSE] : re$1[t$1.XRANGE];
      return comp.replace(r, (ret, gtlt, M, m, p, pr) => {
        debug$6('xRange', comp, ret, gtlt, M, m, p, pr);
        const xM = isX(M);
        const xm = xM || isX(m);
        const xp = xm || isX(p);
        const anyX = xp;

        if (gtlt === '=' && anyX) {
          gtlt = '';
        }

        // if we're including prereleases in the match, then we need
        // to fix this to -0, the lowest possible prerelease value
        pr = options.includePrerelease ? '-0' : '';

        if (xM) {
          if (gtlt === '>' || gtlt === '<') {
            // nothing is allowed
            ret = '<0.0.0-0';
          } else {
            // nothing is forbidden
            ret = '*';
          }
        } else if (gtlt && anyX) {
          // we know patch is an x, because we have any x at all.
          // replace X with 0
          if (xm) {
            m = 0;
          }
          p = 0;

          if (gtlt === '>') {
            // >1 => >=2.0.0
            // >1.2 => >=1.3.0
            gtlt = '>=';
            if (xm) {
              M = +M + 1;
              m = 0;
              p = 0;
            } else {
              m = +m + 1;
              p = 0;
            }
          } else if (gtlt === '<=') {
            // <=0.7.x is actually <0.8.0, since any 0.7.x should
            // pass.  Similarly, <=7.x is actually <8.0.0, etc.
            gtlt = '<';
            if (xm) {
              M = +M + 1;
            } else {
              m = +m + 1;
            }
          }

          if (gtlt === '<')
            pr = '-0';

          ret = `${gtlt + M}.${m}.${p}${pr}`;
        } else if (xm) {
          ret = `>=${M}.0.0${pr} <${+M + 1}.0.0-0`;
        } else if (xp) {
          ret = `>=${M}.${m}.0${pr
      } <${M}.${+m + 1}.0-0`;
        }

        debug$6('xRange return', ret);

        return ret
      })
    };

    // Because * is AND-ed with everything else in the comparator,
    // and '' means "any version", just remove the *s entirely.
    const replaceStars = (comp, options) => {
      debug$6('replaceStars', comp, options);
      // Looseness is ignored here.  star is always as loose as it gets!
      return comp.trim().replace(re$1[t$1.STAR], '')
    };

    const replaceGTE0 = (comp, options) => {
      debug$6('replaceGTE0', comp, options);
      return comp.trim()
        .replace(re$1[options.includePrerelease ? t$1.GTE0PRE : t$1.GTE0], '')
    };

    // This function is passed to string.replace(re[t.HYPHENRANGE])
    // M, m, patch, prerelease, build
    // 1.2 - 3.4.5 => >=1.2.0 <=3.4.5
    // 1.2.3 - 3.4 => >=1.2.0 <3.5.0-0 Any 3.4.x will do
    // 1.2 - 3.4 => >=1.2.0 <3.5.0-0
    const hyphenReplace = incPr => ($0,
      from, fM, fm, fp, fpr, fb,
      to, tM, tm, tp, tpr, tb) => {
      if (isX(fM)) {
        from = '';
      } else if (isX(fm)) {
        from = `>=${fM}.0.0${incPr ? '-0' : ''}`;
      } else if (isX(fp)) {
        from = `>=${fM}.${fm}.0${incPr ? '-0' : ''}`;
      } else if (fpr) {
        from = `>=${from}`;
      } else {
        from = `>=${from}${incPr ? '-0' : ''}`;
      }

      if (isX(tM)) {
        to = '';
      } else if (isX(tm)) {
        to = `<${+tM + 1}.0.0-0`;
      } else if (isX(tp)) {
        to = `<${tM}.${+tm + 1}.0-0`;
      } else if (tpr) {
        to = `<=${tM}.${tm}.${tp}-${tpr}`;
      } else if (incPr) {
        to = `<${tM}.${tm}.${+tp + 1}-0`;
      } else {
        to = `<=${to}`;
      }

      return (`${from} ${to}`).trim()
    };

    const testSet = (set, version, options) => {
      for (let i = 0; i < set.length; i++) {
        if (!set[i].test(version)) {
          return false
        }
      }

      if (version.prerelease.length && !options.includePrerelease) {
        // Find the set of versions that are allowed to have prereleases
        // For example, ^1.2.3-pr.1 desugars to >=1.2.3-pr.1 <2.0.0
        // That should allow `1.2.3-pr.2` to pass.
        // However, `1.2.4-alpha.notready` should NOT be allowed,
        // even though it's within the range set by the comparators.
        for (let i = 0; i < set.length; i++) {
          debug$6(set[i].semver);
          if (set[i].semver === Comparator$3.ANY) {
            continue
          }

          if (set[i].semver.prerelease.length > 0) {
            const allowed = set[i].semver;
            if (allowed.major === version.major &&
                allowed.minor === version.minor &&
                allowed.patch === version.patch) {
              return true
            }
          }
        }

        // Version has a -pre, but it's not one of the ones we like.
        return false
      }

      return true
    };

    const ANY$2 = Symbol('SemVer ANY');
    // hoisted class for cyclic dependency
    class Comparator$2 {
      static get ANY () {
        return ANY$2
      }
      constructor (comp, options) {
        options = parseOptions(options);

        if (comp instanceof Comparator$2) {
          if (comp.loose === !!options.loose) {
            return comp
          } else {
            comp = comp.value;
          }
        }

        debug$5('comparator', comp, options);
        this.options = options;
        this.loose = !!options.loose;
        this.parse(comp);

        if (this.semver === ANY$2) {
          this.value = '';
        } else {
          this.value = this.operator + this.semver.version;
        }

        debug$5('comp', this);
      }

      parse (comp) {
        const r = this.options.loose ? re[t.COMPARATORLOOSE] : re[t.COMPARATOR];
        const m = comp.match(r);

        if (!m) {
          throw new TypeError(`Invalid comparator: ${comp}`)
        }

        this.operator = m[1] !== undefined ? m[1] : '';
        if (this.operator === '=') {
          this.operator = '';
        }

        // if it literally is just '>' or '' then allow anything.
        if (!m[2]) {
          this.semver = ANY$2;
        } else {
          this.semver = new SemVer$4(m[2], this.options.loose);
        }
      }

      toString () {
        return this.value
      }

      test (version) {
        debug$5('Comparator.test', version, this.options.loose);

        if (this.semver === ANY$2 || version === ANY$2) {
          return true
        }

        if (typeof version === 'string') {
          try {
            version = new SemVer$4(version, this.options);
          } catch (er) {
            return false
          }
        }

        return cmp(version, this.operator, this.semver, this.options)
      }

      intersects (comp, options) {
        if (!(comp instanceof Comparator$2)) {
          throw new TypeError('a Comparator is required')
        }

        if (!options || typeof options !== 'object') {
          options = {
            loose: !!options,
            includePrerelease: false
          };
        }

        if (this.operator === '') {
          if (this.value === '') {
            return true
          }
          return new Range$9(comp.value, options).test(this.value)
        } else if (comp.operator === '') {
          if (comp.value === '') {
            return true
          }
          return new Range$9(this.value, options).test(comp.semver)
        }

        const sameDirectionIncreasing =
          (this.operator === '>=' || this.operator === '>') &&
          (comp.operator === '>=' || comp.operator === '>');
        const sameDirectionDecreasing =
          (this.operator === '<=' || this.operator === '<') &&
          (comp.operator === '<=' || comp.operator === '<');
        const sameSemVer = this.semver.version === comp.semver.version;
        const differentDirectionsInclusive =
          (this.operator === '>=' || this.operator === '<=') &&
          (comp.operator === '>=' || comp.operator === '<=');
        const oppositeDirectionsLessThan =
          cmp(this.semver, '<', comp.semver, options) &&
          (this.operator === '>=' || this.operator === '>') &&
            (comp.operator === '<=' || comp.operator === '<');
        const oppositeDirectionsGreaterThan =
          cmp(this.semver, '>', comp.semver, options) &&
          (this.operator === '<=' || this.operator === '<') &&
            (comp.operator === '>=' || comp.operator === '>');

        return (
          sameDirectionIncreasing ||
          sameDirectionDecreasing ||
          (sameSemVer && differentDirectionsInclusive) ||
          oppositeDirectionsLessThan ||
          oppositeDirectionsGreaterThan
        )
      }
    }

    var comparator = Comparator$2;

    const parseOptions = parseOptions_1;
    const {re, t} = re$5.exports;
    const cmp = cmp_1;
    const debug$5 = debug_1$1;
    const SemVer$4 = semver$3;
    const Range$9 = range$3;

    const Range$8 = range$3;
    const satisfies$3 = (version, range, options) => {
      try {
        range = new Range$8(range, options);
      } catch (er) {
        return false
      }
      return range.test(version)
    };
    var satisfies_1 = satisfies$3;

    const Range$7 = range$3;

    // Mostly just for testing and legacy API reasons
    const toComparators = (range, options) =>
      new Range$7(range, options).set
        .map(comp => comp.map(c => c.value).join(' ').trim().split(' '));

    var toComparators_1 = toComparators;

    const SemVer$3 = semver$3;
    const Range$6 = range$3;

    const maxSatisfying = (versions, range, options) => {
      let max = null;
      let maxSV = null;
      let rangeObj = null;
      try {
        rangeObj = new Range$6(range, options);
      } catch (er) {
        return null
      }
      versions.forEach((v) => {
        if (rangeObj.test(v)) {
          // satisfies(v, range, options)
          if (!max || maxSV.compare(v) === -1) {
            // compare(max, v, true)
            max = v;
            maxSV = new SemVer$3(max, options);
          }
        }
      });
      return max
    };
    var maxSatisfying_1 = maxSatisfying;

    const SemVer$2 = semver$3;
    const Range$5 = range$3;
    const minSatisfying = (versions, range, options) => {
      let min = null;
      let minSV = null;
      let rangeObj = null;
      try {
        rangeObj = new Range$5(range, options);
      } catch (er) {
        return null
      }
      versions.forEach((v) => {
        if (rangeObj.test(v)) {
          // satisfies(v, range, options)
          if (!min || minSV.compare(v) === 1) {
            // compare(min, v, true)
            min = v;
            minSV = new SemVer$2(min, options);
          }
        }
      });
      return min
    };
    var minSatisfying_1 = minSatisfying;

    const SemVer$1 = semver$3;
    const Range$4 = range$3;
    const gt$1 = gt_1;

    const minVersion = (range, loose) => {
      range = new Range$4(range, loose);

      let minver = new SemVer$1('0.0.0');
      if (range.test(minver)) {
        return minver
      }

      minver = new SemVer$1('0.0.0-0');
      if (range.test(minver)) {
        return minver
      }

      minver = null;
      for (let i = 0; i < range.set.length; ++i) {
        const comparators = range.set[i];

        let setMin = null;
        comparators.forEach((comparator) => {
          // Clone to avoid manipulating the comparator's semver object.
          const compver = new SemVer$1(comparator.semver.version);
          switch (comparator.operator) {
            case '>':
              if (compver.prerelease.length === 0) {
                compver.patch++;
              } else {
                compver.prerelease.push(0);
              }
              compver.raw = compver.format();
              /* fallthrough */
            case '':
            case '>=':
              if (!setMin || gt$1(compver, setMin)) {
                setMin = compver;
              }
              break
            case '<':
            case '<=':
              /* Ignore maximum versions */
              break
            /* istanbul ignore next */
            default:
              throw new Error(`Unexpected operation: ${comparator.operator}`)
          }
        });
        if (setMin && (!minver || gt$1(minver, setMin)))
          minver = setMin;
      }

      if (minver && range.test(minver)) {
        return minver
      }

      return null
    };
    var minVersion_1 = minVersion;

    const Range$3 = range$3;
    const validRange = (range, options) => {
      try {
        // Return '*' instead of '' so that truthiness works.
        // This will throw if it's invalid anyway
        return new Range$3(range, options).range || '*'
      } catch (er) {
        return null
      }
    };
    var valid = validRange;

    const SemVer = semver$3;
    const Comparator$1 = comparator;
    const {ANY: ANY$1} = Comparator$1;
    const Range$2 = range$3;
    const satisfies$2 = satisfies_1;
    const gt = gt_1;
    const lt = lt_1;
    const lte$1 = lte_1;
    const gte$1 = gte_1;

    const outside$2 = (version, range, hilo, options) => {
      version = new SemVer(version, options);
      range = new Range$2(range, options);

      let gtfn, ltefn, ltfn, comp, ecomp;
      switch (hilo) {
        case '>':
          gtfn = gt;
          ltefn = lte$1;
          ltfn = lt;
          comp = '>';
          ecomp = '>=';
          break
        case '<':
          gtfn = lt;
          ltefn = gte$1;
          ltfn = gt;
          comp = '<';
          ecomp = '<=';
          break
        default:
          throw new TypeError('Must provide a hilo val of "<" or ">"')
      }

      // If it satisfies the range it is not outside
      if (satisfies$2(version, range, options)) {
        return false
      }

      // From now on, variable terms are as if we're in "gtr" mode.
      // but note that everything is flipped for the "ltr" function.

      for (let i = 0; i < range.set.length; ++i) {
        const comparators = range.set[i];

        let high = null;
        let low = null;

        comparators.forEach((comparator) => {
          if (comparator.semver === ANY$1) {
            comparator = new Comparator$1('>=0.0.0');
          }
          high = high || comparator;
          low = low || comparator;
          if (gtfn(comparator.semver, high.semver, options)) {
            high = comparator;
          } else if (ltfn(comparator.semver, low.semver, options)) {
            low = comparator;
          }
        });

        // If the edge version comparator has a operator then our version
        // isn't outside it
        if (high.operator === comp || high.operator === ecomp) {
          return false
        }

        // If the lowest version comparator has an operator and our version
        // is less than it then it isn't higher than the range
        if ((!low.operator || low.operator === comp) &&
            ltefn(version, low.semver)) {
          return false
        } else if (low.operator === ecomp && ltfn(version, low.semver)) {
          return false
        }
      }
      return true
    };

    var outside_1 = outside$2;

    // Determine if version is greater than all the versions possible in the range.
    const outside$1 = outside_1;
    const gtr = (version, range, options) => outside$1(version, range, '>', options);
    var gtr_1 = gtr;

    const outside = outside_1;
    // Determine if version is less than all the versions possible in the range
    const ltr = (version, range, options) => outside(version, range, '<', options);
    var ltr_1 = ltr;

    const Range$1 = range$3;
    const intersects = (r1, r2, options) => {
      r1 = new Range$1(r1, options);
      r2 = new Range$1(r2, options);
      return r1.intersects(r2)
    };
    var intersects_1 = intersects;

    // given a set of versions and a range, create a "simplified" range
    // that includes the same versions that the original range does
    // If the original range is shorter than the simplified one, return that.
    const satisfies$1 = satisfies_1;
    const compare$1 = compare_1;
    var simplify = (versions, range, options) => {
      const set = [];
      let min = null;
      let prev = null;
      const v = versions.sort((a, b) => compare$1(a, b, options));
      for (const version of v) {
        const included = satisfies$1(version, range, options);
        if (included) {
          prev = version;
          if (!min)
            min = version;
        } else {
          if (prev) {
            set.push([min, prev]);
          }
          prev = null;
          min = null;
        }
      }
      if (min)
        set.push([min, null]);

      const ranges = [];
      for (const [min, max] of set) {
        if (min === max)
          ranges.push(min);
        else if (!max && min === v[0])
          ranges.push('*');
        else if (!max)
          ranges.push(`>=${min}`);
        else if (min === v[0])
          ranges.push(`<=${max}`);
        else
          ranges.push(`${min} - ${max}`);
      }
      const simplified = ranges.join(' || ');
      const original = typeof range.raw === 'string' ? range.raw : String(range);
      return simplified.length < original.length ? simplified : range
    };

    const Range = range$3;
    const Comparator = comparator;
    const { ANY } = Comparator;
    const satisfies = satisfies_1;
    const compare = compare_1;

    // Complex range `r1 || r2 || ...` is a subset of `R1 || R2 || ...` iff:
    // - Every simple range `r1, r2, ...` is a null set, OR
    // - Every simple range `r1, r2, ...` which is not a null set is a subset of
    //   some `R1, R2, ...`
    //
    // Simple range `c1 c2 ...` is a subset of simple range `C1 C2 ...` iff:
    // - If c is only the ANY comparator
    //   - If C is only the ANY comparator, return true
    //   - Else if in prerelease mode, return false
    //   - else replace c with `[>=0.0.0]`
    // - If C is only the ANY comparator
    //   - if in prerelease mode, return true
    //   - else replace C with `[>=0.0.0]`
    // - Let EQ be the set of = comparators in c
    // - If EQ is more than one, return true (null set)
    // - Let GT be the highest > or >= comparator in c
    // - Let LT be the lowest < or <= comparator in c
    // - If GT and LT, and GT.semver > LT.semver, return true (null set)
    // - If any C is a = range, and GT or LT are set, return false
    // - If EQ
    //   - If GT, and EQ does not satisfy GT, return true (null set)
    //   - If LT, and EQ does not satisfy LT, return true (null set)
    //   - If EQ satisfies every C, return true
    //   - Else return false
    // - If GT
    //   - If GT.semver is lower than any > or >= comp in C, return false
    //   - If GT is >=, and GT.semver does not satisfy every C, return false
    //   - If GT.semver has a prerelease, and not in prerelease mode
    //     - If no C has a prerelease and the GT.semver tuple, return false
    // - If LT
    //   - If LT.semver is greater than any < or <= comp in C, return false
    //   - If LT is <=, and LT.semver does not satisfy every C, return false
    //   - If GT.semver has a prerelease, and not in prerelease mode
    //     - If no C has a prerelease and the LT.semver tuple, return false
    // - Else return true

    const subset = (sub, dom, options = {}) => {
      if (sub === dom)
        return true

      sub = new Range(sub, options);
      dom = new Range(dom, options);
      let sawNonNull = false;

      OUTER: for (const simpleSub of sub.set) {
        for (const simpleDom of dom.set) {
          const isSub = simpleSubset(simpleSub, simpleDom, options);
          sawNonNull = sawNonNull || isSub !== null;
          if (isSub)
            continue OUTER
        }
        // the null set is a subset of everything, but null simple ranges in
        // a complex range should be ignored.  so if we saw a non-null range,
        // then we know this isn't a subset, but if EVERY simple range was null,
        // then it is a subset.
        if (sawNonNull)
          return false
      }
      return true
    };

    const simpleSubset = (sub, dom, options) => {
      if (sub === dom)
        return true

      if (sub.length === 1 && sub[0].semver === ANY) {
        if (dom.length === 1 && dom[0].semver === ANY)
          return true
        else if (options.includePrerelease)
          sub = [ new Comparator('>=0.0.0-0') ];
        else
          sub = [ new Comparator('>=0.0.0') ];
      }

      if (dom.length === 1 && dom[0].semver === ANY) {
        if (options.includePrerelease)
          return true
        else
          dom = [ new Comparator('>=0.0.0') ];
      }

      const eqSet = new Set();
      let gt, lt;
      for (const c of sub) {
        if (c.operator === '>' || c.operator === '>=')
          gt = higherGT(gt, c, options);
        else if (c.operator === '<' || c.operator === '<=')
          lt = lowerLT(lt, c, options);
        else
          eqSet.add(c.semver);
      }

      if (eqSet.size > 1)
        return null

      let gtltComp;
      if (gt && lt) {
        gtltComp = compare(gt.semver, lt.semver, options);
        if (gtltComp > 0)
          return null
        else if (gtltComp === 0 && (gt.operator !== '>=' || lt.operator !== '<='))
          return null
      }

      // will iterate one or zero times
      for (const eq of eqSet) {
        if (gt && !satisfies(eq, String(gt), options))
          return null

        if (lt && !satisfies(eq, String(lt), options))
          return null

        for (const c of dom) {
          if (!satisfies(eq, String(c), options))
            return false
        }

        return true
      }

      let higher, lower;
      let hasDomLT, hasDomGT;
      // if the subset has a prerelease, we need a comparator in the superset
      // with the same tuple and a prerelease, or it's not a subset
      let needDomLTPre = lt &&
        !options.includePrerelease &&
        lt.semver.prerelease.length ? lt.semver : false;
      let needDomGTPre = gt &&
        !options.includePrerelease &&
        gt.semver.prerelease.length ? gt.semver : false;
      // exception: <1.2.3-0 is the same as <1.2.3
      if (needDomLTPre && needDomLTPre.prerelease.length === 1 &&
          lt.operator === '<' && needDomLTPre.prerelease[0] === 0) {
        needDomLTPre = false;
      }

      for (const c of dom) {
        hasDomGT = hasDomGT || c.operator === '>' || c.operator === '>=';
        hasDomLT = hasDomLT || c.operator === '<' || c.operator === '<=';
        if (gt) {
          if (needDomGTPre) {
            if (c.semver.prerelease && c.semver.prerelease.length &&
                c.semver.major === needDomGTPre.major &&
                c.semver.minor === needDomGTPre.minor &&
                c.semver.patch === needDomGTPre.patch) {
              needDomGTPre = false;
            }
          }
          if (c.operator === '>' || c.operator === '>=') {
            higher = higherGT(gt, c, options);
            if (higher === c && higher !== gt)
              return false
          } else if (gt.operator === '>=' && !satisfies(gt.semver, String(c), options))
            return false
        }
        if (lt) {
          if (needDomLTPre) {
            if (c.semver.prerelease && c.semver.prerelease.length &&
                c.semver.major === needDomLTPre.major &&
                c.semver.minor === needDomLTPre.minor &&
                c.semver.patch === needDomLTPre.patch) {
              needDomLTPre = false;
            }
          }
          if (c.operator === '<' || c.operator === '<=') {
            lower = lowerLT(lt, c, options);
            if (lower === c && lower !== lt)
              return false
          } else if (lt.operator === '<=' && !satisfies(lt.semver, String(c), options))
            return false
        }
        if (!c.operator && (lt || gt) && gtltComp !== 0)
          return false
      }

      // if there was a < or >, and nothing in the dom, then must be false
      // UNLESS it was limited by another range in the other direction.
      // Eg, >1.0.0 <1.0.1 is still a subset of <2.0.0
      if (gt && hasDomLT && !lt && gtltComp !== 0)
        return false

      if (lt && hasDomGT && !gt && gtltComp !== 0)
        return false

      // we needed a prerelease range in a specific tuple, but didn't get one
      // then this isn't a subset.  eg >=1.2.3-pre is not a subset of >=1.0.0,
      // because it includes prereleases in the 1.2.3 tuple
      if (needDomGTPre || needDomLTPre)
        return false

      return true
    };

    // >=1.2.3 is lower than >1.2.3
    const higherGT = (a, b, options) => {
      if (!a)
        return b
      const comp = compare(a.semver, b.semver, options);
      return comp > 0 ? a
        : comp < 0 ? b
        : b.operator === '>' && a.operator === '>=' ? b
        : a
    };

    // <=1.2.3 is higher than <1.2.3
    const lowerLT = (a, b, options) => {
      if (!a)
        return b
      const comp = compare(a.semver, b.semver, options);
      return comp < 0 ? a
        : comp > 0 ? b
        : b.operator === '<' && a.operator === '<=' ? b
        : a
    };

    var subset_1 = subset;

    // just pre-load all the stuff that index.js lazily exports
    const internalRe = re$5.exports;
    var semver$2 = {
      re: internalRe.re,
      src: internalRe.src,
      tokens: internalRe.t,
      SEMVER_SPEC_VERSION: constants$1.SEMVER_SPEC_VERSION,
      SemVer: semver$3,
      compareIdentifiers: identifiers.compareIdentifiers,
      rcompareIdentifiers: identifiers.rcompareIdentifiers,
      parse: parse_1,
      valid: valid_1,
      clean: clean_1,
      inc: inc_1,
      diff: diff_1,
      major: major_1,
      minor: minor_1,
      patch: patch_1,
      prerelease: prerelease_1,
      compare: compare_1,
      rcompare: rcompare_1,
      compareLoose: compareLoose_1,
      compareBuild: compareBuild_1,
      sort: sort_1,
      rsort: rsort_1,
      gt: gt_1,
      lt: lt_1,
      eq: eq_1$2,
      neq: neq_1,
      gte: gte_1,
      lte: lte_1,
      cmp: cmp_1,
      coerce: coerce_1,
      Comparator: comparator,
      Range: range$3,
      satisfies: satisfies_1,
      toComparators: toComparators_1,
      maxSatisfying: maxSatisfying_1,
      minSatisfying: minSatisfying_1,
      minVersion: minVersion_1,
      validRange: valid,
      outside: outside_1,
      gtr: gtr_1,
      ltr: ltr_1,
      intersects: intersects_1,
      simplifyRange: simplify,
      subset: subset_1,
    };

    var semver$1 = {exports: {}};

    (function (module, exports) {
    exports = module.exports = SemVer;

    var debug;
    /* istanbul ignore next */
    if (typeof process === 'object' &&
        process.env &&
        process.env.NODE_DEBUG &&
        /\bsemver\b/i.test(process.env.NODE_DEBUG)) {
      debug = function () {
        var args = Array.prototype.slice.call(arguments, 0);
        args.unshift('SEMVER');
        console.log.apply(console, args);
      };
    } else {
      debug = function () {};
    }

    // Note: this is the semver.org version of the spec that it implements
    // Not necessarily the package version of this code.
    exports.SEMVER_SPEC_VERSION = '2.0.0';

    var MAX_LENGTH = 256;
    var MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER ||
      /* istanbul ignore next */ 9007199254740991;

    // Max safe segment length for coercion.
    var MAX_SAFE_COMPONENT_LENGTH = 16;

    // The actual regexps go on exports.re
    var re = exports.re = [];
    var src = exports.src = [];
    var R = 0;

    // The following Regular Expressions can be used for tokenizing,
    // validating, and parsing SemVer version strings.

    // ## Numeric Identifier
    // A single `0`, or a non-zero digit followed by zero or more digits.

    var NUMERICIDENTIFIER = R++;
    src[NUMERICIDENTIFIER] = '0|[1-9]\\d*';
    var NUMERICIDENTIFIERLOOSE = R++;
    src[NUMERICIDENTIFIERLOOSE] = '[0-9]+';

    // ## Non-numeric Identifier
    // Zero or more digits, followed by a letter or hyphen, and then zero or
    // more letters, digits, or hyphens.

    var NONNUMERICIDENTIFIER = R++;
    src[NONNUMERICIDENTIFIER] = '\\d*[a-zA-Z-][a-zA-Z0-9-]*';

    // ## Main Version
    // Three dot-separated numeric identifiers.

    var MAINVERSION = R++;
    src[MAINVERSION] = '(' + src[NUMERICIDENTIFIER] + ')\\.' +
                       '(' + src[NUMERICIDENTIFIER] + ')\\.' +
                       '(' + src[NUMERICIDENTIFIER] + ')';

    var MAINVERSIONLOOSE = R++;
    src[MAINVERSIONLOOSE] = '(' + src[NUMERICIDENTIFIERLOOSE] + ')\\.' +
                            '(' + src[NUMERICIDENTIFIERLOOSE] + ')\\.' +
                            '(' + src[NUMERICIDENTIFIERLOOSE] + ')';

    // ## Pre-release Version Identifier
    // A numeric identifier, or a non-numeric identifier.

    var PRERELEASEIDENTIFIER = R++;
    src[PRERELEASEIDENTIFIER] = '(?:' + src[NUMERICIDENTIFIER] +
                                '|' + src[NONNUMERICIDENTIFIER] + ')';

    var PRERELEASEIDENTIFIERLOOSE = R++;
    src[PRERELEASEIDENTIFIERLOOSE] = '(?:' + src[NUMERICIDENTIFIERLOOSE] +
                                     '|' + src[NONNUMERICIDENTIFIER] + ')';

    // ## Pre-release Version
    // Hyphen, followed by one or more dot-separated pre-release version
    // identifiers.

    var PRERELEASE = R++;
    src[PRERELEASE] = '(?:-(' + src[PRERELEASEIDENTIFIER] +
                      '(?:\\.' + src[PRERELEASEIDENTIFIER] + ')*))';

    var PRERELEASELOOSE = R++;
    src[PRERELEASELOOSE] = '(?:-?(' + src[PRERELEASEIDENTIFIERLOOSE] +
                           '(?:\\.' + src[PRERELEASEIDENTIFIERLOOSE] + ')*))';

    // ## Build Metadata Identifier
    // Any combination of digits, letters, or hyphens.

    var BUILDIDENTIFIER = R++;
    src[BUILDIDENTIFIER] = '[0-9A-Za-z-]+';

    // ## Build Metadata
    // Plus sign, followed by one or more period-separated build metadata
    // identifiers.

    var BUILD = R++;
    src[BUILD] = '(?:\\+(' + src[BUILDIDENTIFIER] +
                 '(?:\\.' + src[BUILDIDENTIFIER] + ')*))';

    // ## Full Version String
    // A main version, followed optionally by a pre-release version and
    // build metadata.

    // Note that the only major, minor, patch, and pre-release sections of
    // the version string are capturing groups.  The build metadata is not a
    // capturing group, because it should not ever be used in version
    // comparison.

    var FULL = R++;
    var FULLPLAIN = 'v?' + src[MAINVERSION] +
                    src[PRERELEASE] + '?' +
                    src[BUILD] + '?';

    src[FULL] = '^' + FULLPLAIN + '$';

    // like full, but allows v1.2.3 and =1.2.3, which people do sometimes.
    // also, 1.0.0alpha1 (prerelease without the hyphen) which is pretty
    // common in the npm registry.
    var LOOSEPLAIN = '[v=\\s]*' + src[MAINVERSIONLOOSE] +
                     src[PRERELEASELOOSE] + '?' +
                     src[BUILD] + '?';

    var LOOSE = R++;
    src[LOOSE] = '^' + LOOSEPLAIN + '$';

    var GTLT = R++;
    src[GTLT] = '((?:<|>)?=?)';

    // Something like "2.*" or "1.2.x".
    // Note that "x.x" is a valid xRange identifer, meaning "any version"
    // Only the first item is strictly required.
    var XRANGEIDENTIFIERLOOSE = R++;
    src[XRANGEIDENTIFIERLOOSE] = src[NUMERICIDENTIFIERLOOSE] + '|x|X|\\*';
    var XRANGEIDENTIFIER = R++;
    src[XRANGEIDENTIFIER] = src[NUMERICIDENTIFIER] + '|x|X|\\*';

    var XRANGEPLAIN = R++;
    src[XRANGEPLAIN] = '[v=\\s]*(' + src[XRANGEIDENTIFIER] + ')' +
                       '(?:\\.(' + src[XRANGEIDENTIFIER] + ')' +
                       '(?:\\.(' + src[XRANGEIDENTIFIER] + ')' +
                       '(?:' + src[PRERELEASE] + ')?' +
                       src[BUILD] + '?' +
                       ')?)?';

    var XRANGEPLAINLOOSE = R++;
    src[XRANGEPLAINLOOSE] = '[v=\\s]*(' + src[XRANGEIDENTIFIERLOOSE] + ')' +
                            '(?:\\.(' + src[XRANGEIDENTIFIERLOOSE] + ')' +
                            '(?:\\.(' + src[XRANGEIDENTIFIERLOOSE] + ')' +
                            '(?:' + src[PRERELEASELOOSE] + ')?' +
                            src[BUILD] + '?' +
                            ')?)?';

    var XRANGE = R++;
    src[XRANGE] = '^' + src[GTLT] + '\\s*' + src[XRANGEPLAIN] + '$';
    var XRANGELOOSE = R++;
    src[XRANGELOOSE] = '^' + src[GTLT] + '\\s*' + src[XRANGEPLAINLOOSE] + '$';

    // Coercion.
    // Extract anything that could conceivably be a part of a valid semver
    var COERCE = R++;
    src[COERCE] = '(?:^|[^\\d])' +
                  '(\\d{1,' + MAX_SAFE_COMPONENT_LENGTH + '})' +
                  '(?:\\.(\\d{1,' + MAX_SAFE_COMPONENT_LENGTH + '}))?' +
                  '(?:\\.(\\d{1,' + MAX_SAFE_COMPONENT_LENGTH + '}))?' +
                  '(?:$|[^\\d])';

    // Tilde ranges.
    // Meaning is "reasonably at or greater than"
    var LONETILDE = R++;
    src[LONETILDE] = '(?:~>?)';

    var TILDETRIM = R++;
    src[TILDETRIM] = '(\\s*)' + src[LONETILDE] + '\\s+';
    re[TILDETRIM] = new RegExp(src[TILDETRIM], 'g');
    var tildeTrimReplace = '$1~';

    var TILDE = R++;
    src[TILDE] = '^' + src[LONETILDE] + src[XRANGEPLAIN] + '$';
    var TILDELOOSE = R++;
    src[TILDELOOSE] = '^' + src[LONETILDE] + src[XRANGEPLAINLOOSE] + '$';

    // Caret ranges.
    // Meaning is "at least and backwards compatible with"
    var LONECARET = R++;
    src[LONECARET] = '(?:\\^)';

    var CARETTRIM = R++;
    src[CARETTRIM] = '(\\s*)' + src[LONECARET] + '\\s+';
    re[CARETTRIM] = new RegExp(src[CARETTRIM], 'g');
    var caretTrimReplace = '$1^';

    var CARET = R++;
    src[CARET] = '^' + src[LONECARET] + src[XRANGEPLAIN] + '$';
    var CARETLOOSE = R++;
    src[CARETLOOSE] = '^' + src[LONECARET] + src[XRANGEPLAINLOOSE] + '$';

    // A simple gt/lt/eq thing, or just "" to indicate "any version"
    var COMPARATORLOOSE = R++;
    src[COMPARATORLOOSE] = '^' + src[GTLT] + '\\s*(' + LOOSEPLAIN + ')$|^$';
    var COMPARATOR = R++;
    src[COMPARATOR] = '^' + src[GTLT] + '\\s*(' + FULLPLAIN + ')$|^$';

    // An expression to strip any whitespace between the gtlt and the thing
    // it modifies, so that `> 1.2.3` ==> `>1.2.3`
    var COMPARATORTRIM = R++;
    src[COMPARATORTRIM] = '(\\s*)' + src[GTLT] +
                          '\\s*(' + LOOSEPLAIN + '|' + src[XRANGEPLAIN] + ')';

    // this one has to use the /g flag
    re[COMPARATORTRIM] = new RegExp(src[COMPARATORTRIM], 'g');
    var comparatorTrimReplace = '$1$2$3';

    // Something like `1.2.3 - 1.2.4`
    // Note that these all use the loose form, because they'll be
    // checked against either the strict or loose comparator form
    // later.
    var HYPHENRANGE = R++;
    src[HYPHENRANGE] = '^\\s*(' + src[XRANGEPLAIN] + ')' +
                       '\\s+-\\s+' +
                       '(' + src[XRANGEPLAIN] + ')' +
                       '\\s*$';

    var HYPHENRANGELOOSE = R++;
    src[HYPHENRANGELOOSE] = '^\\s*(' + src[XRANGEPLAINLOOSE] + ')' +
                            '\\s+-\\s+' +
                            '(' + src[XRANGEPLAINLOOSE] + ')' +
                            '\\s*$';

    // Star ranges basically just allow anything at all.
    var STAR = R++;
    src[STAR] = '(<|>)?=?\\s*\\*';

    // Compile to actual regexp objects.
    // All are flag-free, unless they were created above with a flag.
    for (var i = 0; i < R; i++) {
      debug(i, src[i]);
      if (!re[i]) {
        re[i] = new RegExp(src[i]);
      }
    }

    exports.parse = parse;
    function parse (version, options) {
      if (!options || typeof options !== 'object') {
        options = {
          loose: !!options,
          includePrerelease: false
        };
      }

      if (version instanceof SemVer) {
        return version
      }

      if (typeof version !== 'string') {
        return null
      }

      if (version.length > MAX_LENGTH) {
        return null
      }

      var r = options.loose ? re[LOOSE] : re[FULL];
      if (!r.test(version)) {
        return null
      }

      try {
        return new SemVer(version, options)
      } catch (er) {
        return null
      }
    }

    exports.valid = valid;
    function valid (version, options) {
      var v = parse(version, options);
      return v ? v.version : null
    }

    exports.clean = clean;
    function clean (version, options) {
      var s = parse(version.trim().replace(/^[=v]+/, ''), options);
      return s ? s.version : null
    }

    exports.SemVer = SemVer;

    function SemVer (version, options) {
      if (!options || typeof options !== 'object') {
        options = {
          loose: !!options,
          includePrerelease: false
        };
      }
      if (version instanceof SemVer) {
        if (version.loose === options.loose) {
          return version
        } else {
          version = version.version;
        }
      } else if (typeof version !== 'string') {
        throw new TypeError('Invalid Version: ' + version)
      }

      if (version.length > MAX_LENGTH) {
        throw new TypeError('version is longer than ' + MAX_LENGTH + ' characters')
      }

      if (!(this instanceof SemVer)) {
        return new SemVer(version, options)
      }

      debug('SemVer', version, options);
      this.options = options;
      this.loose = !!options.loose;

      var m = version.trim().match(options.loose ? re[LOOSE] : re[FULL]);

      if (!m) {
        throw new TypeError('Invalid Version: ' + version)
      }

      this.raw = version;

      // these are actually numbers
      this.major = +m[1];
      this.minor = +m[2];
      this.patch = +m[3];

      if (this.major > MAX_SAFE_INTEGER || this.major < 0) {
        throw new TypeError('Invalid major version')
      }

      if (this.minor > MAX_SAFE_INTEGER || this.minor < 0) {
        throw new TypeError('Invalid minor version')
      }

      if (this.patch > MAX_SAFE_INTEGER || this.patch < 0) {
        throw new TypeError('Invalid patch version')
      }

      // numberify any prerelease numeric ids
      if (!m[4]) {
        this.prerelease = [];
      } else {
        this.prerelease = m[4].split('.').map(function (id) {
          if (/^[0-9]+$/.test(id)) {
            var num = +id;
            if (num >= 0 && num < MAX_SAFE_INTEGER) {
              return num
            }
          }
          return id
        });
      }

      this.build = m[5] ? m[5].split('.') : [];
      this.format();
    }

    SemVer.prototype.format = function () {
      this.version = this.major + '.' + this.minor + '.' + this.patch;
      if (this.prerelease.length) {
        this.version += '-' + this.prerelease.join('.');
      }
      return this.version
    };

    SemVer.prototype.toString = function () {
      return this.version
    };

    SemVer.prototype.compare = function (other) {
      debug('SemVer.compare', this.version, this.options, other);
      if (!(other instanceof SemVer)) {
        other = new SemVer(other, this.options);
      }

      return this.compareMain(other) || this.comparePre(other)
    };

    SemVer.prototype.compareMain = function (other) {
      if (!(other instanceof SemVer)) {
        other = new SemVer(other, this.options);
      }

      return compareIdentifiers(this.major, other.major) ||
             compareIdentifiers(this.minor, other.minor) ||
             compareIdentifiers(this.patch, other.patch)
    };

    SemVer.prototype.comparePre = function (other) {
      if (!(other instanceof SemVer)) {
        other = new SemVer(other, this.options);
      }

      // NOT having a prerelease is > having one
      if (this.prerelease.length && !other.prerelease.length) {
        return -1
      } else if (!this.prerelease.length && other.prerelease.length) {
        return 1
      } else if (!this.prerelease.length && !other.prerelease.length) {
        return 0
      }

      var i = 0;
      do {
        var a = this.prerelease[i];
        var b = other.prerelease[i];
        debug('prerelease compare', i, a, b);
        if (a === undefined && b === undefined) {
          return 0
        } else if (b === undefined) {
          return 1
        } else if (a === undefined) {
          return -1
        } else if (a === b) {
          continue
        } else {
          return compareIdentifiers(a, b)
        }
      } while (++i)
    };

    // preminor will bump the version up to the next minor release, and immediately
    // down to pre-release. premajor and prepatch work the same way.
    SemVer.prototype.inc = function (release, identifier) {
      switch (release) {
        case 'premajor':
          this.prerelease.length = 0;
          this.patch = 0;
          this.minor = 0;
          this.major++;
          this.inc('pre', identifier);
          break
        case 'preminor':
          this.prerelease.length = 0;
          this.patch = 0;
          this.minor++;
          this.inc('pre', identifier);
          break
        case 'prepatch':
          // If this is already a prerelease, it will bump to the next version
          // drop any prereleases that might already exist, since they are not
          // relevant at this point.
          this.prerelease.length = 0;
          this.inc('patch', identifier);
          this.inc('pre', identifier);
          break
        // If the input is a non-prerelease version, this acts the same as
        // prepatch.
        case 'prerelease':
          if (this.prerelease.length === 0) {
            this.inc('patch', identifier);
          }
          this.inc('pre', identifier);
          break

        case 'major':
          // If this is a pre-major version, bump up to the same major version.
          // Otherwise increment major.
          // 1.0.0-5 bumps to 1.0.0
          // 1.1.0 bumps to 2.0.0
          if (this.minor !== 0 ||
              this.patch !== 0 ||
              this.prerelease.length === 0) {
            this.major++;
          }
          this.minor = 0;
          this.patch = 0;
          this.prerelease = [];
          break
        case 'minor':
          // If this is a pre-minor version, bump up to the same minor version.
          // Otherwise increment minor.
          // 1.2.0-5 bumps to 1.2.0
          // 1.2.1 bumps to 1.3.0
          if (this.patch !== 0 || this.prerelease.length === 0) {
            this.minor++;
          }
          this.patch = 0;
          this.prerelease = [];
          break
        case 'patch':
          // If this is not a pre-release version, it will increment the patch.
          // If it is a pre-release it will bump up to the same patch version.
          // 1.2.0-5 patches to 1.2.0
          // 1.2.0 patches to 1.2.1
          if (this.prerelease.length === 0) {
            this.patch++;
          }
          this.prerelease = [];
          break
        // This probably shouldn't be used publicly.
        // 1.0.0 "pre" would become 1.0.0-0 which is the wrong direction.
        case 'pre':
          if (this.prerelease.length === 0) {
            this.prerelease = [0];
          } else {
            var i = this.prerelease.length;
            while (--i >= 0) {
              if (typeof this.prerelease[i] === 'number') {
                this.prerelease[i]++;
                i = -2;
              }
            }
            if (i === -1) {
              // didn't increment anything
              this.prerelease.push(0);
            }
          }
          if (identifier) {
            // 1.2.0-beta.1 bumps to 1.2.0-beta.2,
            // 1.2.0-beta.fooblz or 1.2.0-beta bumps to 1.2.0-beta.0
            if (this.prerelease[0] === identifier) {
              if (isNaN(this.prerelease[1])) {
                this.prerelease = [identifier, 0];
              }
            } else {
              this.prerelease = [identifier, 0];
            }
          }
          break

        default:
          throw new Error('invalid increment argument: ' + release)
      }
      this.format();
      this.raw = this.version;
      return this
    };

    exports.inc = inc;
    function inc (version, release, loose, identifier) {
      if (typeof (loose) === 'string') {
        identifier = loose;
        loose = undefined;
      }

      try {
        return new SemVer(version, loose).inc(release, identifier).version
      } catch (er) {
        return null
      }
    }

    exports.diff = diff;
    function diff (version1, version2) {
      if (eq(version1, version2)) {
        return null
      } else {
        var v1 = parse(version1);
        var v2 = parse(version2);
        var prefix = '';
        if (v1.prerelease.length || v2.prerelease.length) {
          prefix = 'pre';
          var defaultResult = 'prerelease';
        }
        for (var key in v1) {
          if (key === 'major' || key === 'minor' || key === 'patch') {
            if (v1[key] !== v2[key]) {
              return prefix + key
            }
          }
        }
        return defaultResult // may be undefined
      }
    }

    exports.compareIdentifiers = compareIdentifiers;

    var numeric = /^[0-9]+$/;
    function compareIdentifiers (a, b) {
      var anum = numeric.test(a);
      var bnum = numeric.test(b);

      if (anum && bnum) {
        a = +a;
        b = +b;
      }

      return a === b ? 0
        : (anum && !bnum) ? -1
        : (bnum && !anum) ? 1
        : a < b ? -1
        : 1
    }

    exports.rcompareIdentifiers = rcompareIdentifiers;
    function rcompareIdentifiers (a, b) {
      return compareIdentifiers(b, a)
    }

    exports.major = major;
    function major (a, loose) {
      return new SemVer(a, loose).major
    }

    exports.minor = minor;
    function minor (a, loose) {
      return new SemVer(a, loose).minor
    }

    exports.patch = patch;
    function patch (a, loose) {
      return new SemVer(a, loose).patch
    }

    exports.compare = compare;
    function compare (a, b, loose) {
      return new SemVer(a, loose).compare(new SemVer(b, loose))
    }

    exports.compareLoose = compareLoose;
    function compareLoose (a, b) {
      return compare(a, b, true)
    }

    exports.rcompare = rcompare;
    function rcompare (a, b, loose) {
      return compare(b, a, loose)
    }

    exports.sort = sort;
    function sort (list, loose) {
      return list.sort(function (a, b) {
        return exports.compare(a, b, loose)
      })
    }

    exports.rsort = rsort;
    function rsort (list, loose) {
      return list.sort(function (a, b) {
        return exports.rcompare(a, b, loose)
      })
    }

    exports.gt = gt;
    function gt (a, b, loose) {
      return compare(a, b, loose) > 0
    }

    exports.lt = lt;
    function lt (a, b, loose) {
      return compare(a, b, loose) < 0
    }

    exports.eq = eq;
    function eq (a, b, loose) {
      return compare(a, b, loose) === 0
    }

    exports.neq = neq;
    function neq (a, b, loose) {
      return compare(a, b, loose) !== 0
    }

    exports.gte = gte;
    function gte (a, b, loose) {
      return compare(a, b, loose) >= 0
    }

    exports.lte = lte;
    function lte (a, b, loose) {
      return compare(a, b, loose) <= 0
    }

    exports.cmp = cmp;
    function cmp (a, op, b, loose) {
      switch (op) {
        case '===':
          if (typeof a === 'object')
            a = a.version;
          if (typeof b === 'object')
            b = b.version;
          return a === b

        case '!==':
          if (typeof a === 'object')
            a = a.version;
          if (typeof b === 'object')
            b = b.version;
          return a !== b

        case '':
        case '=':
        case '==':
          return eq(a, b, loose)

        case '!=':
          return neq(a, b, loose)

        case '>':
          return gt(a, b, loose)

        case '>=':
          return gte(a, b, loose)

        case '<':
          return lt(a, b, loose)

        case '<=':
          return lte(a, b, loose)

        default:
          throw new TypeError('Invalid operator: ' + op)
      }
    }

    exports.Comparator = Comparator;
    function Comparator (comp, options) {
      if (!options || typeof options !== 'object') {
        options = {
          loose: !!options,
          includePrerelease: false
        };
      }

      if (comp instanceof Comparator) {
        if (comp.loose === !!options.loose) {
          return comp
        } else {
          comp = comp.value;
        }
      }

      if (!(this instanceof Comparator)) {
        return new Comparator(comp, options)
      }

      debug('comparator', comp, options);
      this.options = options;
      this.loose = !!options.loose;
      this.parse(comp);

      if (this.semver === ANY) {
        this.value = '';
      } else {
        this.value = this.operator + this.semver.version;
      }

      debug('comp', this);
    }

    var ANY = {};
    Comparator.prototype.parse = function (comp) {
      var r = this.options.loose ? re[COMPARATORLOOSE] : re[COMPARATOR];
      var m = comp.match(r);

      if (!m) {
        throw new TypeError('Invalid comparator: ' + comp)
      }

      this.operator = m[1];
      if (this.operator === '=') {
        this.operator = '';
      }

      // if it literally is just '>' or '' then allow anything.
      if (!m[2]) {
        this.semver = ANY;
      } else {
        this.semver = new SemVer(m[2], this.options.loose);
      }
    };

    Comparator.prototype.toString = function () {
      return this.value
    };

    Comparator.prototype.test = function (version) {
      debug('Comparator.test', version, this.options.loose);

      if (this.semver === ANY) {
        return true
      }

      if (typeof version === 'string') {
        version = new SemVer(version, this.options);
      }

      return cmp(version, this.operator, this.semver, this.options)
    };

    Comparator.prototype.intersects = function (comp, options) {
      if (!(comp instanceof Comparator)) {
        throw new TypeError('a Comparator is required')
      }

      if (!options || typeof options !== 'object') {
        options = {
          loose: !!options,
          includePrerelease: false
        };
      }

      var rangeTmp;

      if (this.operator === '') {
        rangeTmp = new Range(comp.value, options);
        return satisfies(this.value, rangeTmp, options)
      } else if (comp.operator === '') {
        rangeTmp = new Range(this.value, options);
        return satisfies(comp.semver, rangeTmp, options)
      }

      var sameDirectionIncreasing =
        (this.operator === '>=' || this.operator === '>') &&
        (comp.operator === '>=' || comp.operator === '>');
      var sameDirectionDecreasing =
        (this.operator === '<=' || this.operator === '<') &&
        (comp.operator === '<=' || comp.operator === '<');
      var sameSemVer = this.semver.version === comp.semver.version;
      var differentDirectionsInclusive =
        (this.operator === '>=' || this.operator === '<=') &&
        (comp.operator === '>=' || comp.operator === '<=');
      var oppositeDirectionsLessThan =
        cmp(this.semver, '<', comp.semver, options) &&
        ((this.operator === '>=' || this.operator === '>') &&
        (comp.operator === '<=' || comp.operator === '<'));
      var oppositeDirectionsGreaterThan =
        cmp(this.semver, '>', comp.semver, options) &&
        ((this.operator === '<=' || this.operator === '<') &&
        (comp.operator === '>=' || comp.operator === '>'));

      return sameDirectionIncreasing || sameDirectionDecreasing ||
        (sameSemVer && differentDirectionsInclusive) ||
        oppositeDirectionsLessThan || oppositeDirectionsGreaterThan
    };

    exports.Range = Range;
    function Range (range, options) {
      if (!options || typeof options !== 'object') {
        options = {
          loose: !!options,
          includePrerelease: false
        };
      }

      if (range instanceof Range) {
        if (range.loose === !!options.loose &&
            range.includePrerelease === !!options.includePrerelease) {
          return range
        } else {
          return new Range(range.raw, options)
        }
      }

      if (range instanceof Comparator) {
        return new Range(range.value, options)
      }

      if (!(this instanceof Range)) {
        return new Range(range, options)
      }

      this.options = options;
      this.loose = !!options.loose;
      this.includePrerelease = !!options.includePrerelease;

      // First, split based on boolean or ||
      this.raw = range;
      this.set = range.split(/\s*\|\|\s*/).map(function (range) {
        return this.parseRange(range.trim())
      }, this).filter(function (c) {
        // throw out any that are not relevant for whatever reason
        return c.length
      });

      if (!this.set.length) {
        throw new TypeError('Invalid SemVer Range: ' + range)
      }

      this.format();
    }

    Range.prototype.format = function () {
      this.range = this.set.map(function (comps) {
        return comps.join(' ').trim()
      }).join('||').trim();
      return this.range
    };

    Range.prototype.toString = function () {
      return this.range
    };

    Range.prototype.parseRange = function (range) {
      var loose = this.options.loose;
      range = range.trim();
      // `1.2.3 - 1.2.4` => `>=1.2.3 <=1.2.4`
      var hr = loose ? re[HYPHENRANGELOOSE] : re[HYPHENRANGE];
      range = range.replace(hr, hyphenReplace);
      debug('hyphen replace', range);
      // `> 1.2.3 < 1.2.5` => `>1.2.3 <1.2.5`
      range = range.replace(re[COMPARATORTRIM], comparatorTrimReplace);
      debug('comparator trim', range, re[COMPARATORTRIM]);

      // `~ 1.2.3` => `~1.2.3`
      range = range.replace(re[TILDETRIM], tildeTrimReplace);

      // `^ 1.2.3` => `^1.2.3`
      range = range.replace(re[CARETTRIM], caretTrimReplace);

      // normalize spaces
      range = range.split(/\s+/).join(' ');

      // At this point, the range is completely trimmed and
      // ready to be split into comparators.

      var compRe = loose ? re[COMPARATORLOOSE] : re[COMPARATOR];
      var set = range.split(' ').map(function (comp) {
        return parseComparator(comp, this.options)
      }, this).join(' ').split(/\s+/);
      if (this.options.loose) {
        // in loose mode, throw out any that are not valid comparators
        set = set.filter(function (comp) {
          return !!comp.match(compRe)
        });
      }
      set = set.map(function (comp) {
        return new Comparator(comp, this.options)
      }, this);

      return set
    };

    Range.prototype.intersects = function (range, options) {
      if (!(range instanceof Range)) {
        throw new TypeError('a Range is required')
      }

      return this.set.some(function (thisComparators) {
        return thisComparators.every(function (thisComparator) {
          return range.set.some(function (rangeComparators) {
            return rangeComparators.every(function (rangeComparator) {
              return thisComparator.intersects(rangeComparator, options)
            })
          })
        })
      })
    };

    // Mostly just for testing and legacy API reasons
    exports.toComparators = toComparators;
    function toComparators (range, options) {
      return new Range(range, options).set.map(function (comp) {
        return comp.map(function (c) {
          return c.value
        }).join(' ').trim().split(' ')
      })
    }

    // comprised of xranges, tildes, stars, and gtlt's at this point.
    // already replaced the hyphen ranges
    // turn into a set of JUST comparators.
    function parseComparator (comp, options) {
      debug('comp', comp, options);
      comp = replaceCarets(comp, options);
      debug('caret', comp);
      comp = replaceTildes(comp, options);
      debug('tildes', comp);
      comp = replaceXRanges(comp, options);
      debug('xrange', comp);
      comp = replaceStars(comp, options);
      debug('stars', comp);
      return comp
    }

    function isX (id) {
      return !id || id.toLowerCase() === 'x' || id === '*'
    }

    // ~, ~> --> * (any, kinda silly)
    // ~2, ~2.x, ~2.x.x, ~>2, ~>2.x ~>2.x.x --> >=2.0.0 <3.0.0
    // ~2.0, ~2.0.x, ~>2.0, ~>2.0.x --> >=2.0.0 <2.1.0
    // ~1.2, ~1.2.x, ~>1.2, ~>1.2.x --> >=1.2.0 <1.3.0
    // ~1.2.3, ~>1.2.3 --> >=1.2.3 <1.3.0
    // ~1.2.0, ~>1.2.0 --> >=1.2.0 <1.3.0
    function replaceTildes (comp, options) {
      return comp.trim().split(/\s+/).map(function (comp) {
        return replaceTilde(comp, options)
      }).join(' ')
    }

    function replaceTilde (comp, options) {
      var r = options.loose ? re[TILDELOOSE] : re[TILDE];
      return comp.replace(r, function (_, M, m, p, pr) {
        debug('tilde', comp, _, M, m, p, pr);
        var ret;

        if (isX(M)) {
          ret = '';
        } else if (isX(m)) {
          ret = '>=' + M + '.0.0 <' + (+M + 1) + '.0.0';
        } else if (isX(p)) {
          // ~1.2 == >=1.2.0 <1.3.0
          ret = '>=' + M + '.' + m + '.0 <' + M + '.' + (+m + 1) + '.0';
        } else if (pr) {
          debug('replaceTilde pr', pr);
          ret = '>=' + M + '.' + m + '.' + p + '-' + pr +
                ' <' + M + '.' + (+m + 1) + '.0';
        } else {
          // ~1.2.3 == >=1.2.3 <1.3.0
          ret = '>=' + M + '.' + m + '.' + p +
                ' <' + M + '.' + (+m + 1) + '.0';
        }

        debug('tilde return', ret);
        return ret
      })
    }

    // ^ --> * (any, kinda silly)
    // ^2, ^2.x, ^2.x.x --> >=2.0.0 <3.0.0
    // ^2.0, ^2.0.x --> >=2.0.0 <3.0.0
    // ^1.2, ^1.2.x --> >=1.2.0 <2.0.0
    // ^1.2.3 --> >=1.2.3 <2.0.0
    // ^1.2.0 --> >=1.2.0 <2.0.0
    function replaceCarets (comp, options) {
      return comp.trim().split(/\s+/).map(function (comp) {
        return replaceCaret(comp, options)
      }).join(' ')
    }

    function replaceCaret (comp, options) {
      debug('caret', comp, options);
      var r = options.loose ? re[CARETLOOSE] : re[CARET];
      return comp.replace(r, function (_, M, m, p, pr) {
        debug('caret', comp, _, M, m, p, pr);
        var ret;

        if (isX(M)) {
          ret = '';
        } else if (isX(m)) {
          ret = '>=' + M + '.0.0 <' + (+M + 1) + '.0.0';
        } else if (isX(p)) {
          if (M === '0') {
            ret = '>=' + M + '.' + m + '.0 <' + M + '.' + (+m + 1) + '.0';
          } else {
            ret = '>=' + M + '.' + m + '.0 <' + (+M + 1) + '.0.0';
          }
        } else if (pr) {
          debug('replaceCaret pr', pr);
          if (M === '0') {
            if (m === '0') {
              ret = '>=' + M + '.' + m + '.' + p + '-' + pr +
                    ' <' + M + '.' + m + '.' + (+p + 1);
            } else {
              ret = '>=' + M + '.' + m + '.' + p + '-' + pr +
                    ' <' + M + '.' + (+m + 1) + '.0';
            }
          } else {
            ret = '>=' + M + '.' + m + '.' + p + '-' + pr +
                  ' <' + (+M + 1) + '.0.0';
          }
        } else {
          debug('no pr');
          if (M === '0') {
            if (m === '0') {
              ret = '>=' + M + '.' + m + '.' + p +
                    ' <' + M + '.' + m + '.' + (+p + 1);
            } else {
              ret = '>=' + M + '.' + m + '.' + p +
                    ' <' + M + '.' + (+m + 1) + '.0';
            }
          } else {
            ret = '>=' + M + '.' + m + '.' + p +
                  ' <' + (+M + 1) + '.0.0';
          }
        }

        debug('caret return', ret);
        return ret
      })
    }

    function replaceXRanges (comp, options) {
      debug('replaceXRanges', comp, options);
      return comp.split(/\s+/).map(function (comp) {
        return replaceXRange(comp, options)
      }).join(' ')
    }

    function replaceXRange (comp, options) {
      comp = comp.trim();
      var r = options.loose ? re[XRANGELOOSE] : re[XRANGE];
      return comp.replace(r, function (ret, gtlt, M, m, p, pr) {
        debug('xRange', comp, ret, gtlt, M, m, p, pr);
        var xM = isX(M);
        var xm = xM || isX(m);
        var xp = xm || isX(p);
        var anyX = xp;

        if (gtlt === '=' && anyX) {
          gtlt = '';
        }

        if (xM) {
          if (gtlt === '>' || gtlt === '<') {
            // nothing is allowed
            ret = '<0.0.0';
          } else {
            // nothing is forbidden
            ret = '*';
          }
        } else if (gtlt && anyX) {
          // we know patch is an x, because we have any x at all.
          // replace X with 0
          if (xm) {
            m = 0;
          }
          p = 0;

          if (gtlt === '>') {
            // >1 => >=2.0.0
            // >1.2 => >=1.3.0
            // >1.2.3 => >= 1.2.4
            gtlt = '>=';
            if (xm) {
              M = +M + 1;
              m = 0;
              p = 0;
            } else {
              m = +m + 1;
              p = 0;
            }
          } else if (gtlt === '<=') {
            // <=0.7.x is actually <0.8.0, since any 0.7.x should
            // pass.  Similarly, <=7.x is actually <8.0.0, etc.
            gtlt = '<';
            if (xm) {
              M = +M + 1;
            } else {
              m = +m + 1;
            }
          }

          ret = gtlt + M + '.' + m + '.' + p;
        } else if (xm) {
          ret = '>=' + M + '.0.0 <' + (+M + 1) + '.0.0';
        } else if (xp) {
          ret = '>=' + M + '.' + m + '.0 <' + M + '.' + (+m + 1) + '.0';
        }

        debug('xRange return', ret);

        return ret
      })
    }

    // Because * is AND-ed with everything else in the comparator,
    // and '' means "any version", just remove the *s entirely.
    function replaceStars (comp, options) {
      debug('replaceStars', comp, options);
      // Looseness is ignored here.  star is always as loose as it gets!
      return comp.trim().replace(re[STAR], '')
    }

    // This function is passed to string.replace(re[HYPHENRANGE])
    // M, m, patch, prerelease, build
    // 1.2 - 3.4.5 => >=1.2.0 <=3.4.5
    // 1.2.3 - 3.4 => >=1.2.0 <3.5.0 Any 3.4.x will do
    // 1.2 - 3.4 => >=1.2.0 <3.5.0
    function hyphenReplace ($0,
      from, fM, fm, fp, fpr, fb,
      to, tM, tm, tp, tpr, tb) {
      if (isX(fM)) {
        from = '';
      } else if (isX(fm)) {
        from = '>=' + fM + '.0.0';
      } else if (isX(fp)) {
        from = '>=' + fM + '.' + fm + '.0';
      } else {
        from = '>=' + from;
      }

      if (isX(tM)) {
        to = '';
      } else if (isX(tm)) {
        to = '<' + (+tM + 1) + '.0.0';
      } else if (isX(tp)) {
        to = '<' + tM + '.' + (+tm + 1) + '.0';
      } else if (tpr) {
        to = '<=' + tM + '.' + tm + '.' + tp + '-' + tpr;
      } else {
        to = '<=' + to;
      }

      return (from + ' ' + to).trim()
    }

    // if ANY of the sets match ALL of its comparators, then pass
    Range.prototype.test = function (version) {
      if (!version) {
        return false
      }

      if (typeof version === 'string') {
        version = new SemVer(version, this.options);
      }

      for (var i = 0; i < this.set.length; i++) {
        if (testSet(this.set[i], version, this.options)) {
          return true
        }
      }
      return false
    };

    function testSet (set, version, options) {
      for (var i = 0; i < set.length; i++) {
        if (!set[i].test(version)) {
          return false
        }
      }

      if (version.prerelease.length && !options.includePrerelease) {
        // Find the set of versions that are allowed to have prereleases
        // For example, ^1.2.3-pr.1 desugars to >=1.2.3-pr.1 <2.0.0
        // That should allow `1.2.3-pr.2` to pass.
        // However, `1.2.4-alpha.notready` should NOT be allowed,
        // even though it's within the range set by the comparators.
        for (i = 0; i < set.length; i++) {
          debug(set[i].semver);
          if (set[i].semver === ANY) {
            continue
          }

          if (set[i].semver.prerelease.length > 0) {
            var allowed = set[i].semver;
            if (allowed.major === version.major &&
                allowed.minor === version.minor &&
                allowed.patch === version.patch) {
              return true
            }
          }
        }

        // Version has a -pre, but it's not one of the ones we like.
        return false
      }

      return true
    }

    exports.satisfies = satisfies;
    function satisfies (version, range, options) {
      try {
        range = new Range(range, options);
      } catch (er) {
        return false
      }
      return range.test(version)
    }

    exports.maxSatisfying = maxSatisfying;
    function maxSatisfying (versions, range, options) {
      var max = null;
      var maxSV = null;
      try {
        var rangeObj = new Range(range, options);
      } catch (er) {
        return null
      }
      versions.forEach(function (v) {
        if (rangeObj.test(v)) {
          // satisfies(v, range, options)
          if (!max || maxSV.compare(v) === -1) {
            // compare(max, v, true)
            max = v;
            maxSV = new SemVer(max, options);
          }
        }
      });
      return max
    }

    exports.minSatisfying = minSatisfying;
    function minSatisfying (versions, range, options) {
      var min = null;
      var minSV = null;
      try {
        var rangeObj = new Range(range, options);
      } catch (er) {
        return null
      }
      versions.forEach(function (v) {
        if (rangeObj.test(v)) {
          // satisfies(v, range, options)
          if (!min || minSV.compare(v) === 1) {
            // compare(min, v, true)
            min = v;
            minSV = new SemVer(min, options);
          }
        }
      });
      return min
    }

    exports.minVersion = minVersion;
    function minVersion (range, loose) {
      range = new Range(range, loose);

      var minver = new SemVer('0.0.0');
      if (range.test(minver)) {
        return minver
      }

      minver = new SemVer('0.0.0-0');
      if (range.test(minver)) {
        return minver
      }

      minver = null;
      for (var i = 0; i < range.set.length; ++i) {
        var comparators = range.set[i];

        comparators.forEach(function (comparator) {
          // Clone to avoid manipulating the comparator's semver object.
          var compver = new SemVer(comparator.semver.version);
          switch (comparator.operator) {
            case '>':
              if (compver.prerelease.length === 0) {
                compver.patch++;
              } else {
                compver.prerelease.push(0);
              }
              compver.raw = compver.format();
              /* fallthrough */
            case '':
            case '>=':
              if (!minver || gt(minver, compver)) {
                minver = compver;
              }
              break
            case '<':
            case '<=':
              /* Ignore maximum versions */
              break
            /* istanbul ignore next */
            default:
              throw new Error('Unexpected operation: ' + comparator.operator)
          }
        });
      }

      if (minver && range.test(minver)) {
        return minver
      }

      return null
    }

    exports.validRange = validRange;
    function validRange (range, options) {
      try {
        // Return '*' instead of '' so that truthiness works.
        // This will throw if it's invalid anyway
        return new Range(range, options).range || '*'
      } catch (er) {
        return null
      }
    }

    // Determine if version is less than all the versions possible in the range
    exports.ltr = ltr;
    function ltr (version, range, options) {
      return outside(version, range, '<', options)
    }

    // Determine if version is greater than all the versions possible in the range.
    exports.gtr = gtr;
    function gtr (version, range, options) {
      return outside(version, range, '>', options)
    }

    exports.outside = outside;
    function outside (version, range, hilo, options) {
      version = new SemVer(version, options);
      range = new Range(range, options);

      var gtfn, ltefn, ltfn, comp, ecomp;
      switch (hilo) {
        case '>':
          gtfn = gt;
          ltefn = lte;
          ltfn = lt;
          comp = '>';
          ecomp = '>=';
          break
        case '<':
          gtfn = lt;
          ltefn = gte;
          ltfn = gt;
          comp = '<';
          ecomp = '<=';
          break
        default:
          throw new TypeError('Must provide a hilo val of "<" or ">"')
      }

      // If it satisifes the range it is not outside
      if (satisfies(version, range, options)) {
        return false
      }

      // From now on, variable terms are as if we're in "gtr" mode.
      // but note that everything is flipped for the "ltr" function.

      for (var i = 0; i < range.set.length; ++i) {
        var comparators = range.set[i];

        var high = null;
        var low = null;

        comparators.forEach(function (comparator) {
          if (comparator.semver === ANY) {
            comparator = new Comparator('>=0.0.0');
          }
          high = high || comparator;
          low = low || comparator;
          if (gtfn(comparator.semver, high.semver, options)) {
            high = comparator;
          } else if (ltfn(comparator.semver, low.semver, options)) {
            low = comparator;
          }
        });

        // If the edge version comparator has a operator then our version
        // isn't outside it
        if (high.operator === comp || high.operator === ecomp) {
          return false
        }

        // If the lowest version comparator has an operator and our version
        // is less than it then it isn't higher than the range
        if ((!low.operator || low.operator === comp) &&
            ltefn(version, low.semver)) {
          return false
        } else if (low.operator === ecomp && ltfn(version, low.semver)) {
          return false
        }
      }
      return true
    }

    exports.prerelease = prerelease;
    function prerelease (version, options) {
      var parsed = parse(version, options);
      return (parsed && parsed.prerelease.length) ? parsed.prerelease : null
    }

    exports.intersects = intersects;
    function intersects (r1, r2, options) {
      r1 = new Range(r1, options);
      r2 = new Range(r2, options);
      return r1.intersects(r2)
    }

    exports.coerce = coerce;
    function coerce (version) {
      if (version instanceof SemVer) {
        return version
      }

      if (typeof version !== 'string') {
        return null
      }

      var match = version.match(re[COERCE]);

      if (match == null) {
        return null
      }

      return parse(match[1] +
        '.' + (match[2] || '0') +
        '.' + (match[3] || '0'))
    }
    }(semver$1, semver$1.exports));

    var semverRegex$1 = function () {
    	return /\bv?(?:0|[1-9][0-9]*)\.(?:0|[1-9][0-9]*)\.(?:0|[1-9][0-9]*)(?:-[\da-z\-]+(?:\.[\da-z\-]+)*)?(?:\+[\da-z\-]+(?:\.[\da-z\-]+)*)?\b/ig;
    };

    var semver = semver$1.exports;
    var semverRegex = semverRegex$1;

    function sort(semvers, compare) {
    	if (!semvers instanceof Array) {
    		throw new Error('It is not an array');
    	}

    	return semvers.sort(function (v1, v2) {
    		var sv1 = semverRegex().exec(v1)[0] || v1;
    		var sv2 = semverRegex().exec(v2)[0] || v2;

    		return compare(sv1, sv2);
    	});
    }

    var semverSort = {
    	asc: function (semvers) {
    		return sort(semvers, semver.compare);
    	},

    	desc: function (semvers) {
    		return sort(semvers, semver.rcompare);
    	}
    };

    log.level = process.env.LOG_LEVEL ? process.env.LOG_LEVEL : 'info';
    log.heading = 'js-cli';
    log.addLevel('success', 2000, { fg: 'green', bold: true });
    const info = log.info;
    log.info = (message, prefix = '') => {
        info(prefix, message);
    };

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */

    function __awaiter$3(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    const getNpmInfo = (npmName, registry) => {
        if (!npmName) {
            return null;
        }
        const registryUrl = registry || getDefaultRegistry();
        const npmInfoUrl = urlJoin(registryUrl, npmName);
        return axios$2.get(npmInfoUrl).then(response => {
            if (response.status === 200) {
                return response.data;
            }
        }).catch((err) => {
            return Promise.reject(err);
        });
    };
    const getDefaultRegistry = (isOriginal = false) => {
        return isOriginal ? 'https://registry.npm.taobao.org' : 'https://registry.npmjs.org';
    };
    const getNpmVersions = (appName, registry = '') => __awaiter$3(void 0, void 0, void 0, function* () {
        const data = yield getNpmInfo(appName, registry);
        if (data) {
            return Object.keys(data.versions);
        }
        else {
            return [];
        }
    });
    const getNpmSemverVersion = (baseVersion, npmName, registry = '') => __awaiter$3(void 0, void 0, void 0, function* () {
        const versions = yield getNpmVersions(npmName, registry);
        const newVersions = getSemverVersions(baseVersion, versions);
        if (newVersions && newVersions.length > 0) {
            return newVersions[0];
        }
        return null;
    });
    const getSemverVersions = (baseVersion, versions) => {
        return semverSort.desc(versions.filter(version => semver$2.satisfies(version, `^${baseVersion}`)));
    };
    const getNpmLatestVersion = (npmName, registry = '') => __awaiter$3(void 0, void 0, void 0, function* () {
        const versions = yield getNpmVersions(npmName);
        if (versions) {
            return semverSort.desc(versions)[0];
        }
        return '';
    });

    var getNpmInfo$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        getDefaultRegistry: getDefaultRegistry,
        getNpmSemverVersion: getNpmSemverVersion,
        getNpmLatestVersion: getNpmLatestVersion
    });

    const BASE_URL = process.env.JS_CLI_BASE_URL ? process.env.JS_CLI_BASE_URL : 'http://1.116.156.44:8085';
    const request = axios$2.create({
        baseURL: BASE_URL,
        timeout: 30000,
    });
    request.interceptors.response.use((response) => {
        if (response.status === 200) {
            return response.data;
        }
    }, (error) => {
        return Promise.reject(error);
    });

    var KEBAB_REGEX = /[A-Z\u00C0-\u00D6\u00D8-\u00DE]/g;
    const isObject$l = (o) => {
        return Object.prototype.toString.call(o) === '[object Object]';
    };
    const spawn = (command, args, options = {}) => {
        const win32 = process.platform === 'win32';
        const cmd = win32 ? 'cmd' : command;
        const cmdArgs = win32 ? ['/c'].concat(command, args) : args;
        return require$$1__default$1["default"].spawn(cmd, cmdArgs, options || {});
    };
    const execSpawn = (command, args, options = {}) => {
        return new Promise(((resolve, reject) => {
            const p = spawn(command, args, options);
            p.on('error', e => {
                reject(e);
            });
            p.on('exit', c => {
                resolve(c);
            });
        }));
    };
    const spinnerStart = (msg = 'loading', spinnerString = '|/-\\') => {
        const Spinner = require('cli-spinner').Spinner;
        const spinner = new Spinner(msg + '%s');
        spinner.setSpinnerString(spinnerString);
        spinner.start();
        return spinner;
    };
    const sleep = () => {
        new Promise(resolve => setTimeout(resolve, 1000));
    };
    const kebabCase = (str) => {
        return str.replace(KEBAB_REGEX, function (match) {
            return '-' + match.toLowerCase();
        });
    };

    var pkgDir$2 = {exports: {}};

    var findUp$1 = {exports: {}};

    var locatePath = {exports: {}};

    class Node {
    	/// value;
    	/// next;

    	constructor(value) {
    		this.value = value;

    		// TODO: Remove this when targeting Node.js 12.
    		this.next = undefined;
    	}
    }

    class Queue$1 {
    	// TODO: Use private class fields when targeting Node.js 12.
    	// #_head;
    	// #_tail;
    	// #_size;

    	constructor() {
    		this.clear();
    	}

    	enqueue(value) {
    		const node = new Node(value);

    		if (this._head) {
    			this._tail.next = node;
    			this._tail = node;
    		} else {
    			this._head = node;
    			this._tail = node;
    		}

    		this._size++;
    	}

    	dequeue() {
    		const current = this._head;
    		if (!current) {
    			return;
    		}

    		this._head = this._head.next;
    		this._size--;
    		return current.value;
    	}

    	clear() {
    		this._head = undefined;
    		this._tail = undefined;
    		this._size = 0;
    	}

    	get size() {
    		return this._size;
    	}

    	* [Symbol.iterator]() {
    		let current = this._head;

    		while (current) {
    			yield current.value;
    			current = current.next;
    		}
    	}
    }

    var yoctoQueue = Queue$1;

    const Queue = yoctoQueue;

    const pLimit$1 = concurrency => {
    	if (!((Number.isInteger(concurrency) || concurrency === Infinity) && concurrency > 0)) {
    		throw new TypeError('Expected `concurrency` to be a number from 1 and up');
    	}

    	const queue = new Queue();
    	let activeCount = 0;

    	const next = () => {
    		activeCount--;

    		if (queue.size > 0) {
    			queue.dequeue()();
    		}
    	};

    	const run = async (fn, resolve, ...args) => {
    		activeCount++;

    		const result = (async () => fn(...args))();

    		resolve(result);

    		try {
    			await result;
    		} catch {}

    		next();
    	};

    	const enqueue = (fn, resolve, ...args) => {
    		queue.enqueue(run.bind(null, fn, resolve, ...args));

    		(async () => {
    			// This function needs to wait until the next microtask before comparing
    			// `activeCount` to `concurrency`, because `activeCount` is updated asynchronously
    			// when the run function is dequeued and called. The comparison in the if-statement
    			// needs to happen asynchronously as well to get an up-to-date value for `activeCount`.
    			await Promise.resolve();

    			if (activeCount < concurrency && queue.size > 0) {
    				queue.dequeue()();
    			}
    		})();
    	};

    	const generator = (fn, ...args) => new Promise(resolve => {
    		enqueue(fn, resolve, ...args);
    	});

    	Object.defineProperties(generator, {
    		activeCount: {
    			get: () => activeCount
    		},
    		pendingCount: {
    			get: () => queue.size
    		},
    		clearQueue: {
    			value: () => {
    				queue.clear();
    			}
    		}
    	});

    	return generator;
    };

    var pLimit_1 = pLimit$1;

    const pLimit = pLimit_1;

    class EndError extends Error {
    	constructor(value) {
    		super();
    		this.value = value;
    	}
    }

    // The input can also be a promise, so we await it
    const testElement = async (element, tester) => tester(await element);

    // The input can also be a promise, so we `Promise.all()` them both
    const finder = async element => {
    	const values = await Promise.all(element);
    	if (values[1] === true) {
    		throw new EndError(values[0]);
    	}

    	return false;
    };

    const pLocate$1 = async (iterable, tester, options) => {
    	options = {
    		concurrency: Infinity,
    		preserveOrder: true,
    		...options
    	};

    	const limit = pLimit(options.concurrency);

    	// Start all the promises concurrently with optional limit
    	const items = [...iterable].map(element => [element, limit(testElement, element, tester)]);

    	// Check the promises either serially or concurrently
    	const checkLimit = pLimit(options.preserveOrder ? 1 : Infinity);

    	try {
    		await Promise.all(items.map(element => checkLimit(finder, element)));
    	} catch (error) {
    		if (error instanceof EndError) {
    			return error.value;
    		}

    		throw error;
    	}
    };

    var pLocate_1 = pLocate$1;

    const path$k = path__default["default"];
    const fs$r = require$$0__default$6["default"];
    const {promisify: promisify$1} = require$$0__default["default"];
    const pLocate = pLocate_1;

    const fsStat = promisify$1(fs$r.stat);
    const fsLStat = promisify$1(fs$r.lstat);

    const typeMappings = {
    	directory: 'isDirectory',
    	file: 'isFile'
    };

    function checkType({type}) {
    	if (type in typeMappings) {
    		return;
    	}

    	throw new Error(`Invalid type specified: ${type}`);
    }

    const matchType = (type, stat) => type === undefined || stat[typeMappings[type]]();

    locatePath.exports = async (paths, options) => {
    	options = {
    		cwd: process.cwd(),
    		type: 'file',
    		allowSymlinks: true,
    		...options
    	};

    	checkType(options);

    	const statFn = options.allowSymlinks ? fsStat : fsLStat;

    	return pLocate(paths, async path_ => {
    		try {
    			const stat = await statFn(path$k.resolve(options.cwd, path_));
    			return matchType(options.type, stat);
    		} catch {
    			return false;
    		}
    	}, options);
    };

    locatePath.exports.sync = (paths, options) => {
    	options = {
    		cwd: process.cwd(),
    		allowSymlinks: true,
    		type: 'file',
    		...options
    	};

    	checkType(options);

    	const statFn = options.allowSymlinks ? fs$r.statSync : fs$r.lstatSync;

    	for (const path_ of paths) {
    		try {
    			const stat = statFn(path$k.resolve(options.cwd, path_));

    			if (matchType(options.type, stat)) {
    				return path_;
    			}
    		} catch {}
    	}
    };

    var pathExists$8 = {exports: {}};

    const fs$q = require$$0__default$6["default"];
    const {promisify} = require$$0__default["default"];

    const pAccess = promisify(fs$q.access);

    pathExists$8.exports = async path => {
    	try {
    		await pAccess(path);
    		return true;
    	} catch (_) {
    		return false;
    	}
    };

    pathExists$8.exports.sync = path => {
    	try {
    		fs$q.accessSync(path);
    		return true;
    	} catch (_) {
    		return false;
    	}
    };

    var _pathExists = pathExists$8.exports;

    (function (module) {
    const path = path__default["default"];
    const locatePath$1 = locatePath.exports;
    const pathExists = pathExists$8.exports;

    const stop = Symbol('findUp.stop');

    module.exports = async (name, options = {}) => {
    	let directory = path.resolve(options.cwd || '');
    	const {root} = path.parse(directory);
    	const paths = [].concat(name);

    	const runMatcher = async locateOptions => {
    		if (typeof name !== 'function') {
    			return locatePath$1(paths, locateOptions);
    		}

    		const foundPath = await name(locateOptions.cwd);
    		if (typeof foundPath === 'string') {
    			return locatePath$1([foundPath], locateOptions);
    		}

    		return foundPath;
    	};

    	// eslint-disable-next-line no-constant-condition
    	while (true) {
    		// eslint-disable-next-line no-await-in-loop
    		const foundPath = await runMatcher({...options, cwd: directory});

    		if (foundPath === stop) {
    			return;
    		}

    		if (foundPath) {
    			return path.resolve(directory, foundPath);
    		}

    		if (directory === root) {
    			return;
    		}

    		directory = path.dirname(directory);
    	}
    };

    module.exports.sync = (name, options = {}) => {
    	let directory = path.resolve(options.cwd || '');
    	const {root} = path.parse(directory);
    	const paths = [].concat(name);

    	const runMatcher = locateOptions => {
    		if (typeof name !== 'function') {
    			return locatePath$1.sync(paths, locateOptions);
    		}

    		const foundPath = name(locateOptions.cwd);
    		if (typeof foundPath === 'string') {
    			return locatePath$1.sync([foundPath], locateOptions);
    		}

    		return foundPath;
    	};

    	// eslint-disable-next-line no-constant-condition
    	while (true) {
    		const foundPath = runMatcher({...options, cwd: directory});

    		if (foundPath === stop) {
    			return;
    		}

    		if (foundPath) {
    			return path.resolve(directory, foundPath);
    		}

    		if (directory === root) {
    			return;
    		}

    		directory = path.dirname(directory);
    	}
    };

    module.exports.exists = pathExists;

    module.exports.sync.exists = pathExists.sync;

    module.exports.stop = stop;
    }(findUp$1));

    const path$j = path__default["default"];
    const findUp = findUp$1.exports;

    const pkgDir = async cwd => {
    	const filePath = await findUp('package.json', {cwd});
    	return filePath && path$j.dirname(filePath);
    };

    pkgDir$2.exports = pkgDir;

    pkgDir$2.exports.sync = cwd => {
    	const filePath = findUp.sync('package.json', {cwd});
    	return filePath && path$j.dirname(filePath);
    };

    var pkgDir$1 = pkgDir$2.exports;

    var fs$p = {};

    var universalify$1 = {};

    universalify$1.fromCallback = function (fn) {
      return Object.defineProperty(function (...args) {
        if (typeof args[args.length - 1] === 'function') fn.apply(this, args);
        else {
          return new Promise((resolve, reject) => {
            fn.call(
              this,
              ...args,
              (err, res) => (err != null) ? reject(err) : resolve(res)
            );
          })
        }
      }, 'name', { value: fn.name })
    };

    universalify$1.fromPromise = function (fn) {
      return Object.defineProperty(function (...args) {
        const cb = args[args.length - 1];
        if (typeof cb !== 'function') return fn.apply(this, args)
        else fn.apply(this, args.slice(0, -1)).then(r => cb(null, r), cb);
      }, 'name', { value: fn.name })
    };

    var constants = require$$0__default$7["default"];

    var origCwd = process.cwd;
    var cwd = null;

    var platform$2 = process.env.GRACEFUL_FS_PLATFORM || process.platform;

    process.cwd = function() {
      if (!cwd)
        cwd = origCwd.call(process);
      return cwd
    };
    try {
      process.cwd();
    } catch (er) {}

    // This check is needed until node.js 12 is required
    if (typeof process.chdir === 'function') {
      var chdir = process.chdir;
      process.chdir = function (d) {
        cwd = null;
        chdir.call(process, d);
      };
      if (Object.setPrototypeOf) Object.setPrototypeOf(process.chdir, chdir);
    }

    var polyfills$1 = patch$1;

    function patch$1 (fs) {
      // (re-)implement some things that are known busted or missing.

      // lchmod, broken prior to 0.6.2
      // back-port the fix here.
      if (constants.hasOwnProperty('O_SYMLINK') &&
          process.version.match(/^v0\.6\.[0-2]|^v0\.5\./)) {
        patchLchmod(fs);
      }

      // lutimes implementation, or no-op
      if (!fs.lutimes) {
        patchLutimes(fs);
      }

      // https://github.com/isaacs/node-graceful-fs/issues/4
      // Chown should not fail on einval or eperm if non-root.
      // It should not fail on enosys ever, as this just indicates
      // that a fs doesn't support the intended operation.

      fs.chown = chownFix(fs.chown);
      fs.fchown = chownFix(fs.fchown);
      fs.lchown = chownFix(fs.lchown);

      fs.chmod = chmodFix(fs.chmod);
      fs.fchmod = chmodFix(fs.fchmod);
      fs.lchmod = chmodFix(fs.lchmod);

      fs.chownSync = chownFixSync(fs.chownSync);
      fs.fchownSync = chownFixSync(fs.fchownSync);
      fs.lchownSync = chownFixSync(fs.lchownSync);

      fs.chmodSync = chmodFixSync(fs.chmodSync);
      fs.fchmodSync = chmodFixSync(fs.fchmodSync);
      fs.lchmodSync = chmodFixSync(fs.lchmodSync);

      fs.stat = statFix(fs.stat);
      fs.fstat = statFix(fs.fstat);
      fs.lstat = statFix(fs.lstat);

      fs.statSync = statFixSync(fs.statSync);
      fs.fstatSync = statFixSync(fs.fstatSync);
      fs.lstatSync = statFixSync(fs.lstatSync);

      // if lchmod/lchown do not exist, then make them no-ops
      if (!fs.lchmod) {
        fs.lchmod = function (path, mode, cb) {
          if (cb) process.nextTick(cb);
        };
        fs.lchmodSync = function () {};
      }
      if (!fs.lchown) {
        fs.lchown = function (path, uid, gid, cb) {
          if (cb) process.nextTick(cb);
        };
        fs.lchownSync = function () {};
      }

      // on Windows, A/V software can lock the directory, causing this
      // to fail with an EACCES or EPERM if the directory contains newly
      // created files.  Try again on failure, for up to 60 seconds.

      // Set the timeout this long because some Windows Anti-Virus, such as Parity
      // bit9, may lock files for up to a minute, causing npm package install
      // failures. Also, take care to yield the scheduler. Windows scheduling gives
      // CPU to a busy looping process, which can cause the program causing the lock
      // contention to be starved of CPU by node, so the contention doesn't resolve.
      if (platform$2 === "win32") {
        fs.rename = (function (fs$rename) { return function (from, to, cb) {
          var start = Date.now();
          var backoff = 0;
          fs$rename(from, to, function CB (er) {
            if (er
                && (er.code === "EACCES" || er.code === "EPERM")
                && Date.now() - start < 60000) {
              setTimeout(function() {
                fs.stat(to, function (stater, st) {
                  if (stater && stater.code === "ENOENT")
                    fs$rename(from, to, CB);
                  else
                    cb(er);
                });
              }, backoff);
              if (backoff < 100)
                backoff += 10;
              return;
            }
            if (cb) cb(er);
          });
        }})(fs.rename);
      }

      // if read() returns EAGAIN, then just try it again.
      fs.read = (function (fs$read) {
        function read (fd, buffer, offset, length, position, callback_) {
          var callback;
          if (callback_ && typeof callback_ === 'function') {
            var eagCounter = 0;
            callback = function (er, _, __) {
              if (er && er.code === 'EAGAIN' && eagCounter < 10) {
                eagCounter ++;
                return fs$read.call(fs, fd, buffer, offset, length, position, callback)
              }
              callback_.apply(this, arguments);
            };
          }
          return fs$read.call(fs, fd, buffer, offset, length, position, callback)
        }

        // This ensures `util.promisify` works as it does for native `fs.read`.
        if (Object.setPrototypeOf) Object.setPrototypeOf(read, fs$read);
        return read
      })(fs.read);

      fs.readSync = (function (fs$readSync) { return function (fd, buffer, offset, length, position) {
        var eagCounter = 0;
        while (true) {
          try {
            return fs$readSync.call(fs, fd, buffer, offset, length, position)
          } catch (er) {
            if (er.code === 'EAGAIN' && eagCounter < 10) {
              eagCounter ++;
              continue
            }
            throw er
          }
        }
      }})(fs.readSync);

      function patchLchmod (fs) {
        fs.lchmod = function (path, mode, callback) {
          fs.open( path
                 , constants.O_WRONLY | constants.O_SYMLINK
                 , mode
                 , function (err, fd) {
            if (err) {
              if (callback) callback(err);
              return
            }
            // prefer to return the chmod error, if one occurs,
            // but still try to close, and report closing errors if they occur.
            fs.fchmod(fd, mode, function (err) {
              fs.close(fd, function(err2) {
                if (callback) callback(err || err2);
              });
            });
          });
        };

        fs.lchmodSync = function (path, mode) {
          var fd = fs.openSync(path, constants.O_WRONLY | constants.O_SYMLINK, mode);

          // prefer to return the chmod error, if one occurs,
          // but still try to close, and report closing errors if they occur.
          var threw = true;
          var ret;
          try {
            ret = fs.fchmodSync(fd, mode);
            threw = false;
          } finally {
            if (threw) {
              try {
                fs.closeSync(fd);
              } catch (er) {}
            } else {
              fs.closeSync(fd);
            }
          }
          return ret
        };
      }

      function patchLutimes (fs) {
        if (constants.hasOwnProperty("O_SYMLINK")) {
          fs.lutimes = function (path, at, mt, cb) {
            fs.open(path, constants.O_SYMLINK, function (er, fd) {
              if (er) {
                if (cb) cb(er);
                return
              }
              fs.futimes(fd, at, mt, function (er) {
                fs.close(fd, function (er2) {
                  if (cb) cb(er || er2);
                });
              });
            });
          };

          fs.lutimesSync = function (path, at, mt) {
            var fd = fs.openSync(path, constants.O_SYMLINK);
            var ret;
            var threw = true;
            try {
              ret = fs.futimesSync(fd, at, mt);
              threw = false;
            } finally {
              if (threw) {
                try {
                  fs.closeSync(fd);
                } catch (er) {}
              } else {
                fs.closeSync(fd);
              }
            }
            return ret
          };

        } else {
          fs.lutimes = function (_a, _b, _c, cb) { if (cb) process.nextTick(cb); };
          fs.lutimesSync = function () {};
        }
      }

      function chmodFix (orig) {
        if (!orig) return orig
        return function (target, mode, cb) {
          return orig.call(fs, target, mode, function (er) {
            if (chownErOk(er)) er = null;
            if (cb) cb.apply(this, arguments);
          })
        }
      }

      function chmodFixSync (orig) {
        if (!orig) return orig
        return function (target, mode) {
          try {
            return orig.call(fs, target, mode)
          } catch (er) {
            if (!chownErOk(er)) throw er
          }
        }
      }


      function chownFix (orig) {
        if (!orig) return orig
        return function (target, uid, gid, cb) {
          return orig.call(fs, target, uid, gid, function (er) {
            if (chownErOk(er)) er = null;
            if (cb) cb.apply(this, arguments);
          })
        }
      }

      function chownFixSync (orig) {
        if (!orig) return orig
        return function (target, uid, gid) {
          try {
            return orig.call(fs, target, uid, gid)
          } catch (er) {
            if (!chownErOk(er)) throw er
          }
        }
      }

      function statFix (orig) {
        if (!orig) return orig
        // Older versions of Node erroneously returned signed integers for
        // uid + gid.
        return function (target, options, cb) {
          if (typeof options === 'function') {
            cb = options;
            options = null;
          }
          function callback (er, stats) {
            if (stats) {
              if (stats.uid < 0) stats.uid += 0x100000000;
              if (stats.gid < 0) stats.gid += 0x100000000;
            }
            if (cb) cb.apply(this, arguments);
          }
          return options ? orig.call(fs, target, options, callback)
            : orig.call(fs, target, callback)
        }
      }

      function statFixSync (orig) {
        if (!orig) return orig
        // Older versions of Node erroneously returned signed integers for
        // uid + gid.
        return function (target, options) {
          var stats = options ? orig.call(fs, target, options)
            : orig.call(fs, target);
          if (stats.uid < 0) stats.uid += 0x100000000;
          if (stats.gid < 0) stats.gid += 0x100000000;
          return stats;
        }
      }

      // ENOSYS means that the fs doesn't support the op. Just ignore
      // that, because it doesn't matter.
      //
      // if there's no getuid, or if getuid() is something other
      // than 0, and the error is EINVAL or EPERM, then just ignore
      // it.
      //
      // This specific case is a silent failure in cp, install, tar,
      // and most other unix tools that manage permissions.
      //
      // When running as root, or if other types of errors are
      // encountered, then it's strict.
      function chownErOk (er) {
        if (!er)
          return true

        if (er.code === "ENOSYS")
          return true

        var nonroot = !process.getuid || process.getuid() !== 0;
        if (nonroot) {
          if (er.code === "EINVAL" || er.code === "EPERM")
            return true
        }

        return false
      }
    }

    var Stream$4 = require$$0__default$1["default"].Stream;

    var legacyStreams = legacy$1;

    function legacy$1 (fs) {
      return {
        ReadStream: ReadStream,
        WriteStream: WriteStream
      }

      function ReadStream (path, options) {
        if (!(this instanceof ReadStream)) return new ReadStream(path, options);

        Stream$4.call(this);

        var self = this;

        this.path = path;
        this.fd = null;
        this.readable = true;
        this.paused = false;

        this.flags = 'r';
        this.mode = 438; /*=0666*/
        this.bufferSize = 64 * 1024;

        options = options || {};

        // Mixin options into this
        var keys = Object.keys(options);
        for (var index = 0, length = keys.length; index < length; index++) {
          var key = keys[index];
          this[key] = options[key];
        }

        if (this.encoding) this.setEncoding(this.encoding);

        if (this.start !== undefined) {
          if ('number' !== typeof this.start) {
            throw TypeError('start must be a Number');
          }
          if (this.end === undefined) {
            this.end = Infinity;
          } else if ('number' !== typeof this.end) {
            throw TypeError('end must be a Number');
          }

          if (this.start > this.end) {
            throw new Error('start must be <= end');
          }

          this.pos = this.start;
        }

        if (this.fd !== null) {
          process.nextTick(function() {
            self._read();
          });
          return;
        }

        fs.open(this.path, this.flags, this.mode, function (err, fd) {
          if (err) {
            self.emit('error', err);
            self.readable = false;
            return;
          }

          self.fd = fd;
          self.emit('open', fd);
          self._read();
        });
      }

      function WriteStream (path, options) {
        if (!(this instanceof WriteStream)) return new WriteStream(path, options);

        Stream$4.call(this);

        this.path = path;
        this.fd = null;
        this.writable = true;

        this.flags = 'w';
        this.encoding = 'binary';
        this.mode = 438; /*=0666*/
        this.bytesWritten = 0;

        options = options || {};

        // Mixin options into this
        var keys = Object.keys(options);
        for (var index = 0, length = keys.length; index < length; index++) {
          var key = keys[index];
          this[key] = options[key];
        }

        if (this.start !== undefined) {
          if ('number' !== typeof this.start) {
            throw TypeError('start must be a Number');
          }
          if (this.start < 0) {
            throw new Error('start must be >= zero');
          }

          this.pos = this.start;
        }

        this.busy = false;
        this._queue = [];

        if (this.fd === null) {
          this._open = fs.open;
          this._queue.push([this._open, this.path, this.flags, this.mode, undefined]);
          this.flush();
        }
      }
    }

    var clone_1$2 = clone$7;

    var getPrototypeOf$2 = Object.getPrototypeOf || function (obj) {
      return obj.__proto__
    };

    function clone$7 (obj) {
      if (obj === null || typeof obj !== 'object')
        return obj

      if (obj instanceof Object)
        var copy = { __proto__: getPrototypeOf$2(obj) };
      else
        var copy = Object.create(null);

      Object.getOwnPropertyNames(obj).forEach(function (key) {
        Object.defineProperty(copy, key, Object.getOwnPropertyDescriptor(obj, key));
      });

      return copy
    }

    var fs$o = require$$0__default$6["default"];
    var polyfills = polyfills$1;
    var legacy = legacyStreams;
    var clone$6 = clone_1$2;

    var util$6 = require$$0__default["default"];

    /* istanbul ignore next - node 0.x polyfill */
    var gracefulQueue;
    var previousSymbol;

    /* istanbul ignore else - node 0.x polyfill */
    if (typeof Symbol === 'function' && typeof Symbol.for === 'function') {
      gracefulQueue = Symbol.for('graceful-fs.queue');
      // This is used in testing by future versions
      previousSymbol = Symbol.for('graceful-fs.previous');
    } else {
      gracefulQueue = '___graceful-fs.queue';
      previousSymbol = '___graceful-fs.previous';
    }

    function noop$9 () {}

    function publishQueue(context, queue) {
      Object.defineProperty(context, gracefulQueue, {
        get: function() {
          return queue
        }
      });
    }

    var debug$4 = noop$9;
    if (util$6.debuglog)
      debug$4 = util$6.debuglog('gfs4');
    else if (/\bgfs4\b/i.test(process.env.NODE_DEBUG || ''))
      debug$4 = function() {
        var m = util$6.format.apply(util$6, arguments);
        m = 'GFS4: ' + m.split(/\n/).join('\nGFS4: ');
        console.error(m);
      };

    // Once time initialization
    if (!fs$o[gracefulQueue]) {
      // This queue can be shared by multiple loaded instances
      var queue$2 = commonjsGlobal[gracefulQueue] || [];
      publishQueue(fs$o, queue$2);

      // Patch fs.close/closeSync to shared queue version, because we need
      // to retry() whenever a close happens *anywhere* in the program.
      // This is essential when multiple graceful-fs instances are
      // in play at the same time.
      fs$o.close = (function (fs$close) {
        function close (fd, cb) {
          return fs$close.call(fs$o, fd, function (err) {
            // This function uses the graceful-fs shared queue
            if (!err) {
              resetQueue();
            }

            if (typeof cb === 'function')
              cb.apply(this, arguments);
          })
        }

        Object.defineProperty(close, previousSymbol, {
          value: fs$close
        });
        return close
      })(fs$o.close);

      fs$o.closeSync = (function (fs$closeSync) {
        function closeSync (fd) {
          // This function uses the graceful-fs shared queue
          fs$closeSync.apply(fs$o, arguments);
          resetQueue();
        }

        Object.defineProperty(closeSync, previousSymbol, {
          value: fs$closeSync
        });
        return closeSync
      })(fs$o.closeSync);

      if (/\bgfs4\b/i.test(process.env.NODE_DEBUG || '')) {
        process.on('exit', function() {
          debug$4(fs$o[gracefulQueue]);
          require$$0__default$4["default"].equal(fs$o[gracefulQueue].length, 0);
        });
      }
    }

    if (!commonjsGlobal[gracefulQueue]) {
      publishQueue(commonjsGlobal, fs$o[gracefulQueue]);
    }

    var gracefulFs = patch(clone$6(fs$o));
    if (process.env.TEST_GRACEFUL_FS_GLOBAL_PATCH && !fs$o.__patched) {
        gracefulFs = patch(fs$o);
        fs$o.__patched = true;
    }

    function patch (fs) {
      // Everything that references the open() function needs to be in here
      polyfills(fs);
      fs.gracefulify = patch;

      fs.createReadStream = createReadStream;
      fs.createWriteStream = createWriteStream;
      var fs$readFile = fs.readFile;
      fs.readFile = readFile;
      function readFile (path, options, cb) {
        if (typeof options === 'function')
          cb = options, options = null;

        return go$readFile(path, options, cb)

        function go$readFile (path, options, cb, startTime) {
          return fs$readFile(path, options, function (err) {
            if (err && (err.code === 'EMFILE' || err.code === 'ENFILE'))
              enqueue([go$readFile, [path, options, cb], err, startTime || Date.now(), Date.now()]);
            else {
              if (typeof cb === 'function')
                cb.apply(this, arguments);
            }
          })
        }
      }

      var fs$writeFile = fs.writeFile;
      fs.writeFile = writeFile;
      function writeFile (path, data, options, cb) {
        if (typeof options === 'function')
          cb = options, options = null;

        return go$writeFile(path, data, options, cb)

        function go$writeFile (path, data, options, cb, startTime) {
          return fs$writeFile(path, data, options, function (err) {
            if (err && (err.code === 'EMFILE' || err.code === 'ENFILE'))
              enqueue([go$writeFile, [path, data, options, cb], err, startTime || Date.now(), Date.now()]);
            else {
              if (typeof cb === 'function')
                cb.apply(this, arguments);
            }
          })
        }
      }

      var fs$appendFile = fs.appendFile;
      if (fs$appendFile)
        fs.appendFile = appendFile;
      function appendFile (path, data, options, cb) {
        if (typeof options === 'function')
          cb = options, options = null;

        return go$appendFile(path, data, options, cb)

        function go$appendFile (path, data, options, cb, startTime) {
          return fs$appendFile(path, data, options, function (err) {
            if (err && (err.code === 'EMFILE' || err.code === 'ENFILE'))
              enqueue([go$appendFile, [path, data, options, cb], err, startTime || Date.now(), Date.now()]);
            else {
              if (typeof cb === 'function')
                cb.apply(this, arguments);
            }
          })
        }
      }

      var fs$copyFile = fs.copyFile;
      if (fs$copyFile)
        fs.copyFile = copyFile;
      function copyFile (src, dest, flags, cb) {
        if (typeof flags === 'function') {
          cb = flags;
          flags = 0;
        }
        return go$copyFile(src, dest, flags, cb)

        function go$copyFile (src, dest, flags, cb, startTime) {
          return fs$copyFile(src, dest, flags, function (err) {
            if (err && (err.code === 'EMFILE' || err.code === 'ENFILE'))
              enqueue([go$copyFile, [src, dest, flags, cb], err, startTime || Date.now(), Date.now()]);
            else {
              if (typeof cb === 'function')
                cb.apply(this, arguments);
            }
          })
        }
      }

      var fs$readdir = fs.readdir;
      fs.readdir = readdir;
      function readdir (path, options, cb) {
        if (typeof options === 'function')
          cb = options, options = null;

        return go$readdir(path, options, cb)

        function go$readdir (path, options, cb, startTime) {
          return fs$readdir(path, options, function (err, files) {
            if (err && (err.code === 'EMFILE' || err.code === 'ENFILE'))
              enqueue([go$readdir, [path, options, cb], err, startTime || Date.now(), Date.now()]);
            else {
              if (files && files.sort)
                files.sort();

              if (typeof cb === 'function')
                cb.call(this, err, files);
            }
          })
        }
      }

      if (process.version.substr(0, 4) === 'v0.8') {
        var legStreams = legacy(fs);
        ReadStream = legStreams.ReadStream;
        WriteStream = legStreams.WriteStream;
      }

      var fs$ReadStream = fs.ReadStream;
      if (fs$ReadStream) {
        ReadStream.prototype = Object.create(fs$ReadStream.prototype);
        ReadStream.prototype.open = ReadStream$open;
      }

      var fs$WriteStream = fs.WriteStream;
      if (fs$WriteStream) {
        WriteStream.prototype = Object.create(fs$WriteStream.prototype);
        WriteStream.prototype.open = WriteStream$open;
      }

      Object.defineProperty(fs, 'ReadStream', {
        get: function () {
          return ReadStream
        },
        set: function (val) {
          ReadStream = val;
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(fs, 'WriteStream', {
        get: function () {
          return WriteStream
        },
        set: function (val) {
          WriteStream = val;
        },
        enumerable: true,
        configurable: true
      });

      // legacy names
      var FileReadStream = ReadStream;
      Object.defineProperty(fs, 'FileReadStream', {
        get: function () {
          return FileReadStream
        },
        set: function (val) {
          FileReadStream = val;
        },
        enumerable: true,
        configurable: true
      });
      var FileWriteStream = WriteStream;
      Object.defineProperty(fs, 'FileWriteStream', {
        get: function () {
          return FileWriteStream
        },
        set: function (val) {
          FileWriteStream = val;
        },
        enumerable: true,
        configurable: true
      });

      function ReadStream (path, options) {
        if (this instanceof ReadStream)
          return fs$ReadStream.apply(this, arguments), this
        else
          return ReadStream.apply(Object.create(ReadStream.prototype), arguments)
      }

      function ReadStream$open () {
        var that = this;
        open(that.path, that.flags, that.mode, function (err, fd) {
          if (err) {
            if (that.autoClose)
              that.destroy();

            that.emit('error', err);
          } else {
            that.fd = fd;
            that.emit('open', fd);
            that.read();
          }
        });
      }

      function WriteStream (path, options) {
        if (this instanceof WriteStream)
          return fs$WriteStream.apply(this, arguments), this
        else
          return WriteStream.apply(Object.create(WriteStream.prototype), arguments)
      }

      function WriteStream$open () {
        var that = this;
        open(that.path, that.flags, that.mode, function (err, fd) {
          if (err) {
            that.destroy();
            that.emit('error', err);
          } else {
            that.fd = fd;
            that.emit('open', fd);
          }
        });
      }

      function createReadStream (path, options) {
        return new fs.ReadStream(path, options)
      }

      function createWriteStream (path, options) {
        return new fs.WriteStream(path, options)
      }

      var fs$open = fs.open;
      fs.open = open;
      function open (path, flags, mode, cb) {
        if (typeof mode === 'function')
          cb = mode, mode = null;

        return go$open(path, flags, mode, cb)

        function go$open (path, flags, mode, cb, startTime) {
          return fs$open(path, flags, mode, function (err, fd) {
            if (err && (err.code === 'EMFILE' || err.code === 'ENFILE'))
              enqueue([go$open, [path, flags, mode, cb], err, startTime || Date.now(), Date.now()]);
            else {
              if (typeof cb === 'function')
                cb.apply(this, arguments);
            }
          })
        }
      }

      return fs
    }

    function enqueue (elem) {
      debug$4('ENQUEUE', elem[0].name, elem[1]);
      fs$o[gracefulQueue].push(elem);
      retry$2();
    }

    // keep track of the timeout between retry() calls
    var retryTimer;

    // reset the startTime and lastTime to now
    // this resets the start of the 60 second overall timeout as well as the
    // delay between attempts so that we'll retry these jobs sooner
    function resetQueue () {
      var now = Date.now();
      for (var i = 0; i < fs$o[gracefulQueue].length; ++i) {
        // entries that are only a length of 2 are from an older version, don't
        // bother modifying those since they'll be retried anyway.
        if (fs$o[gracefulQueue][i].length > 2) {
          fs$o[gracefulQueue][i][3] = now; // startTime
          fs$o[gracefulQueue][i][4] = now; // lastTime
        }
      }
      // call retry to make sure we're actively processing the queue
      retry$2();
    }

    function retry$2 () {
      // clear the timer and remove it to help prevent unintended concurrency
      clearTimeout(retryTimer);
      retryTimer = undefined;

      if (fs$o[gracefulQueue].length === 0)
        return

      var elem = fs$o[gracefulQueue].shift();
      var fn = elem[0];
      var args = elem[1];
      // these items may be unset if they were added by an older graceful-fs
      var err = elem[2];
      var startTime = elem[3];
      var lastTime = elem[4];

      // if we don't have a startTime we have no way of knowing if we've waited
      // long enough, so go ahead and retry this item now
      if (startTime === undefined) {
        debug$4('RETRY', fn.name, args);
        fn.apply(null, args);
      } else if (Date.now() - startTime >= 60000) {
        // it's been more than 60 seconds total, bail now
        debug$4('TIMEOUT', fn.name, args);
        var cb = args.pop();
        if (typeof cb === 'function')
          cb.call(null, err);
      } else {
        // the amount of time between the last attempt and right now
        var sinceAttempt = Date.now() - lastTime;
        // the amount of time between when we first tried, and when we last tried
        // rounded up to at least 1
        var sinceStart = Math.max(lastTime - startTime, 1);
        // backoff. wait longer than the total time we've been retrying, but only
        // up to a maximum of 100ms
        var desiredDelay = Math.min(sinceStart * 1.2, 100);
        // it's been long enough since the last retry, do it again
        if (sinceAttempt >= desiredDelay) {
          debug$4('RETRY', fn.name, args);
          fn.apply(null, args.concat([startTime]));
        } else {
          // if we can't do this job yet, push it to the end of the queue
          // and let the next iteration check again
          fs$o[gracefulQueue].push(elem);
        }
      }

      // schedule our next run if one isn't already scheduled
      if (retryTimer === undefined) {
        retryTimer = setTimeout(retry$2, 0);
      }
    }

    (function (exports) {
    // This is adapted from https://github.com/normalize/mz
    // Copyright (c) 2014-2016 Jonathan Ong me@jongleberry.com and Contributors
    const u = universalify$1.fromCallback;
    const fs = gracefulFs;

    const api = [
      'access',
      'appendFile',
      'chmod',
      'chown',
      'close',
      'copyFile',
      'fchmod',
      'fchown',
      'fdatasync',
      'fstat',
      'fsync',
      'ftruncate',
      'futimes',
      'lchmod',
      'lchown',
      'link',
      'lstat',
      'mkdir',
      'mkdtemp',
      'open',
      'opendir',
      'readdir',
      'readFile',
      'readlink',
      'realpath',
      'rename',
      'rm',
      'rmdir',
      'stat',
      'symlink',
      'truncate',
      'unlink',
      'utimes',
      'writeFile'
    ].filter(key => {
      // Some commands are not available on some systems. Ex:
      // fs.opendir was added in Node.js v12.12.0
      // fs.rm was added in Node.js v14.14.0
      // fs.lchown is not available on at least some Linux
      return typeof fs[key] === 'function'
    });

    // Export cloned fs:
    Object.assign(exports, fs);

    // Universalify async methods:
    api.forEach(method => {
      exports[method] = u(fs[method]);
    });
    exports.realpath.native = u(fs.realpath.native);

    // We differ from mz/fs in that we still ship the old, broken, fs.exists()
    // since we are a drop-in replacement for the native module
    exports.exists = function (filename, callback) {
      if (typeof callback === 'function') {
        return fs.exists(filename, callback)
      }
      return new Promise(resolve => {
        return fs.exists(filename, resolve)
      })
    };

    // fs.read(), fs.write(), & fs.writev() need special treatment due to multiple callback args

    exports.read = function (fd, buffer, offset, length, position, callback) {
      if (typeof callback === 'function') {
        return fs.read(fd, buffer, offset, length, position, callback)
      }
      return new Promise((resolve, reject) => {
        fs.read(fd, buffer, offset, length, position, (err, bytesRead, buffer) => {
          if (err) return reject(err)
          resolve({ bytesRead, buffer });
        });
      })
    };

    // Function signature can be
    // fs.write(fd, buffer[, offset[, length[, position]]], callback)
    // OR
    // fs.write(fd, string[, position[, encoding]], callback)
    // We need to handle both cases, so we use ...args
    exports.write = function (fd, buffer, ...args) {
      if (typeof args[args.length - 1] === 'function') {
        return fs.write(fd, buffer, ...args)
      }

      return new Promise((resolve, reject) => {
        fs.write(fd, buffer, ...args, (err, bytesWritten, buffer) => {
          if (err) return reject(err)
          resolve({ bytesWritten, buffer });
        });
      })
    };

    // fs.writev only available in Node v12.9.0+
    if (typeof fs.writev === 'function') {
      // Function signature is
      // s.writev(fd, buffers[, position], callback)
      // We need to handle the optional arg, so we use ...args
      exports.writev = function (fd, buffers, ...args) {
        if (typeof args[args.length - 1] === 'function') {
          return fs.writev(fd, buffers, ...args)
        }

        return new Promise((resolve, reject) => {
          fs.writev(fd, buffers, ...args, (err, bytesWritten, buffers) => {
            if (err) return reject(err)
            resolve({ bytesWritten, buffers });
          });
        })
      };
    }
    }(fs$p));

    var makeDir$1 = {};

    var utils$m = {};

    const path$i = path__default["default"];

    // https://github.com/nodejs/node/issues/8987
    // https://github.com/libuv/libuv/pull/1088
    utils$m.checkPath = function checkPath (pth) {
      if (process.platform === 'win32') {
        const pathHasInvalidWinCharacters = /[<>:"|?*]/.test(pth.replace(path$i.parse(pth).root, ''));

        if (pathHasInvalidWinCharacters) {
          const error = new Error(`Path contains invalid characters: ${pth}`);
          error.code = 'EINVAL';
          throw error
        }
      }
    };

    const fs$n = fs$p;
    const { checkPath } = utils$m;

    const getMode = options => {
      const defaults = { mode: 0o777 };
      if (typeof options === 'number') return options
      return ({ ...defaults, ...options }).mode
    };

    makeDir$1.makeDir = async (dir, options) => {
      checkPath(dir);

      return fs$n.mkdir(dir, {
        mode: getMode(options),
        recursive: true
      })
    };

    makeDir$1.makeDirSync = (dir, options) => {
      checkPath(dir);

      return fs$n.mkdirSync(dir, {
        mode: getMode(options),
        recursive: true
      })
    };

    const u$a = universalify$1.fromPromise;
    const { makeDir: _makeDir, makeDirSync } = makeDir$1;
    const makeDir = u$a(_makeDir);

    var mkdirs$2 = {
      mkdirs: makeDir,
      mkdirsSync: makeDirSync,
      // alias
      mkdirp: makeDir,
      mkdirpSync: makeDirSync,
      ensureDir: makeDir,
      ensureDirSync: makeDirSync
    };

    const fs$m = gracefulFs;

    function utimesMillis$1 (path, atime, mtime, callback) {
      // if (!HAS_MILLIS_RES) return fs.utimes(path, atime, mtime, callback)
      fs$m.open(path, 'r+', (err, fd) => {
        if (err) return callback(err)
        fs$m.futimes(fd, atime, mtime, futimesErr => {
          fs$m.close(fd, closeErr => {
            if (callback) callback(futimesErr || closeErr);
          });
        });
      });
    }

    function utimesMillisSync$1 (path, atime, mtime) {
      const fd = fs$m.openSync(path, 'r+');
      fs$m.futimesSync(fd, atime, mtime);
      return fs$m.closeSync(fd)
    }

    var utimes = {
      utimesMillis: utimesMillis$1,
      utimesMillisSync: utimesMillisSync$1
    };

    const fs$l = fs$p;
    const path$h = path__default["default"];
    const util$5 = require$$0__default["default"];

    function getStats$2 (src, dest, opts) {
      const statFunc = opts.dereference
        ? (file) => fs$l.stat(file, { bigint: true })
        : (file) => fs$l.lstat(file, { bigint: true });
      return Promise.all([
        statFunc(src),
        statFunc(dest).catch(err => {
          if (err.code === 'ENOENT') return null
          throw err
        })
      ]).then(([srcStat, destStat]) => ({ srcStat, destStat }))
    }

    function getStatsSync (src, dest, opts) {
      let destStat;
      const statFunc = opts.dereference
        ? (file) => fs$l.statSync(file, { bigint: true })
        : (file) => fs$l.lstatSync(file, { bigint: true });
      const srcStat = statFunc(src);
      try {
        destStat = statFunc(dest);
      } catch (err) {
        if (err.code === 'ENOENT') return { srcStat, destStat: null }
        throw err
      }
      return { srcStat, destStat }
    }

    function checkPaths (src, dest, funcName, opts, cb) {
      util$5.callbackify(getStats$2)(src, dest, opts, (err, stats) => {
        if (err) return cb(err)
        const { srcStat, destStat } = stats;

        if (destStat) {
          if (areIdentical$2(srcStat, destStat)) {
            const srcBaseName = path$h.basename(src);
            const destBaseName = path$h.basename(dest);
            if (funcName === 'move' &&
              srcBaseName !== destBaseName &&
              srcBaseName.toLowerCase() === destBaseName.toLowerCase()) {
              return cb(null, { srcStat, destStat, isChangingCase: true })
            }
            return cb(new Error('Source and destination must not be the same.'))
          }
          if (srcStat.isDirectory() && !destStat.isDirectory()) {
            return cb(new Error(`Cannot overwrite non-directory '${dest}' with directory '${src}'.`))
          }
          if (!srcStat.isDirectory() && destStat.isDirectory()) {
            return cb(new Error(`Cannot overwrite directory '${dest}' with non-directory '${src}'.`))
          }
        }

        if (srcStat.isDirectory() && isSrcSubdir(src, dest)) {
          return cb(new Error(errMsg(src, dest, funcName)))
        }
        return cb(null, { srcStat, destStat })
      });
    }

    function checkPathsSync (src, dest, funcName, opts) {
      const { srcStat, destStat } = getStatsSync(src, dest, opts);

      if (destStat) {
        if (areIdentical$2(srcStat, destStat)) {
          const srcBaseName = path$h.basename(src);
          const destBaseName = path$h.basename(dest);
          if (funcName === 'move' &&
            srcBaseName !== destBaseName &&
            srcBaseName.toLowerCase() === destBaseName.toLowerCase()) {
            return { srcStat, destStat, isChangingCase: true }
          }
          throw new Error('Source and destination must not be the same.')
        }
        if (srcStat.isDirectory() && !destStat.isDirectory()) {
          throw new Error(`Cannot overwrite non-directory '${dest}' with directory '${src}'.`)
        }
        if (!srcStat.isDirectory() && destStat.isDirectory()) {
          throw new Error(`Cannot overwrite directory '${dest}' with non-directory '${src}'.`)
        }
      }

      if (srcStat.isDirectory() && isSrcSubdir(src, dest)) {
        throw new Error(errMsg(src, dest, funcName))
      }
      return { srcStat, destStat }
    }

    // recursively check if dest parent is a subdirectory of src.
    // It works for all file types including symlinks since it
    // checks the src and dest inodes. It starts from the deepest
    // parent and stops once it reaches the src parent or the root path.
    function checkParentPaths (src, srcStat, dest, funcName, cb) {
      const srcParent = path$h.resolve(path$h.dirname(src));
      const destParent = path$h.resolve(path$h.dirname(dest));
      if (destParent === srcParent || destParent === path$h.parse(destParent).root) return cb()
      fs$l.stat(destParent, { bigint: true }, (err, destStat) => {
        if (err) {
          if (err.code === 'ENOENT') return cb()
          return cb(err)
        }
        if (areIdentical$2(srcStat, destStat)) {
          return cb(new Error(errMsg(src, dest, funcName)))
        }
        return checkParentPaths(src, srcStat, destParent, funcName, cb)
      });
    }

    function checkParentPathsSync (src, srcStat, dest, funcName) {
      const srcParent = path$h.resolve(path$h.dirname(src));
      const destParent = path$h.resolve(path$h.dirname(dest));
      if (destParent === srcParent || destParent === path$h.parse(destParent).root) return
      let destStat;
      try {
        destStat = fs$l.statSync(destParent, { bigint: true });
      } catch (err) {
        if (err.code === 'ENOENT') return
        throw err
      }
      if (areIdentical$2(srcStat, destStat)) {
        throw new Error(errMsg(src, dest, funcName))
      }
      return checkParentPathsSync(src, srcStat, destParent, funcName)
    }

    function areIdentical$2 (srcStat, destStat) {
      return destStat.ino && destStat.dev && destStat.ino === srcStat.ino && destStat.dev === srcStat.dev
    }

    // return true if dest is a subdir of src, otherwise false.
    // It only checks the path strings.
    function isSrcSubdir (src, dest) {
      const srcArr = path$h.resolve(src).split(path$h.sep).filter(i => i);
      const destArr = path$h.resolve(dest).split(path$h.sep).filter(i => i);
      return srcArr.reduce((acc, cur, i) => acc && destArr[i] === cur, true)
    }

    function errMsg (src, dest, funcName) {
      return `Cannot ${funcName} '${src}' to a subdirectory of itself, '${dest}'.`
    }

    var stat$4 = {
      checkPaths,
      checkPathsSync,
      checkParentPaths,
      checkParentPathsSync,
      isSrcSubdir,
      areIdentical: areIdentical$2
    };

    const fs$k = gracefulFs;
    const path$g = path__default["default"];
    const mkdirsSync$1 = mkdirs$2.mkdirsSync;
    const utimesMillisSync = utimes.utimesMillisSync;
    const stat$3 = stat$4;

    function copySync$2 (src, dest, opts) {
      if (typeof opts === 'function') {
        opts = { filter: opts };
      }

      opts = opts || {};
      opts.clobber = 'clobber' in opts ? !!opts.clobber : true; // default to true for now
      opts.overwrite = 'overwrite' in opts ? !!opts.overwrite : opts.clobber; // overwrite falls back to clobber

      // Warn about using preserveTimestamps on 32-bit node
      if (opts.preserveTimestamps && process.arch === 'ia32') {
        console.warn(`fs-extra: Using the preserveTimestamps option in 32-bit node is not recommended;\n
    see https://github.com/jprichardson/node-fs-extra/issues/269`);
      }

      const { srcStat, destStat } = stat$3.checkPathsSync(src, dest, 'copy', opts);
      stat$3.checkParentPathsSync(src, srcStat, dest, 'copy');
      return handleFilterAndCopy(destStat, src, dest, opts)
    }

    function handleFilterAndCopy (destStat, src, dest, opts) {
      if (opts.filter && !opts.filter(src, dest)) return
      const destParent = path$g.dirname(dest);
      if (!fs$k.existsSync(destParent)) mkdirsSync$1(destParent);
      return getStats$1(destStat, src, dest, opts)
    }

    function startCopy$1 (destStat, src, dest, opts) {
      if (opts.filter && !opts.filter(src, dest)) return
      return getStats$1(destStat, src, dest, opts)
    }

    function getStats$1 (destStat, src, dest, opts) {
      const statSync = opts.dereference ? fs$k.statSync : fs$k.lstatSync;
      const srcStat = statSync(src);

      if (srcStat.isDirectory()) return onDir$1(srcStat, destStat, src, dest, opts)
      else if (srcStat.isFile() ||
               srcStat.isCharacterDevice() ||
               srcStat.isBlockDevice()) return onFile$1(srcStat, destStat, src, dest, opts)
      else if (srcStat.isSymbolicLink()) return onLink$1(destStat, src, dest, opts)
      else if (srcStat.isSocket()) throw new Error(`Cannot copy a socket file: ${src}`)
      else if (srcStat.isFIFO()) throw new Error(`Cannot copy a FIFO pipe: ${src}`)
      throw new Error(`Unknown file: ${src}`)
    }

    function onFile$1 (srcStat, destStat, src, dest, opts) {
      if (!destStat) return copyFile$1(srcStat, src, dest, opts)
      return mayCopyFile$1(srcStat, src, dest, opts)
    }

    function mayCopyFile$1 (srcStat, src, dest, opts) {
      if (opts.overwrite) {
        fs$k.unlinkSync(dest);
        return copyFile$1(srcStat, src, dest, opts)
      } else if (opts.errorOnExist) {
        throw new Error(`'${dest}' already exists`)
      }
    }

    function copyFile$1 (srcStat, src, dest, opts) {
      fs$k.copyFileSync(src, dest);
      if (opts.preserveTimestamps) handleTimestamps(srcStat.mode, src, dest);
      return setDestMode$1(dest, srcStat.mode)
    }

    function handleTimestamps (srcMode, src, dest) {
      // Make sure the file is writable before setting the timestamp
      // otherwise open fails with EPERM when invoked with 'r+'
      // (through utimes call)
      if (fileIsNotWritable$1(srcMode)) makeFileWritable$1(dest, srcMode);
      return setDestTimestamps$1(src, dest)
    }

    function fileIsNotWritable$1 (srcMode) {
      return (srcMode & 0o200) === 0
    }

    function makeFileWritable$1 (dest, srcMode) {
      return setDestMode$1(dest, srcMode | 0o200)
    }

    function setDestMode$1 (dest, srcMode) {
      return fs$k.chmodSync(dest, srcMode)
    }

    function setDestTimestamps$1 (src, dest) {
      // The initial srcStat.atime cannot be trusted
      // because it is modified by the read(2) system call
      // (See https://nodejs.org/api/fs.html#fs_stat_time_values)
      const updatedSrcStat = fs$k.statSync(src);
      return utimesMillisSync(dest, updatedSrcStat.atime, updatedSrcStat.mtime)
    }

    function onDir$1 (srcStat, destStat, src, dest, opts) {
      if (!destStat) return mkDirAndCopy$1(srcStat.mode, src, dest, opts)
      return copyDir$1(src, dest, opts)
    }

    function mkDirAndCopy$1 (srcMode, src, dest, opts) {
      fs$k.mkdirSync(dest);
      copyDir$1(src, dest, opts);
      return setDestMode$1(dest, srcMode)
    }

    function copyDir$1 (src, dest, opts) {
      fs$k.readdirSync(src).forEach(item => copyDirItem$1(item, src, dest, opts));
    }

    function copyDirItem$1 (item, src, dest, opts) {
      const srcItem = path$g.join(src, item);
      const destItem = path$g.join(dest, item);
      const { destStat } = stat$3.checkPathsSync(srcItem, destItem, 'copy', opts);
      return startCopy$1(destStat, srcItem, destItem, opts)
    }

    function onLink$1 (destStat, src, dest, opts) {
      let resolvedSrc = fs$k.readlinkSync(src);
      if (opts.dereference) {
        resolvedSrc = path$g.resolve(process.cwd(), resolvedSrc);
      }

      if (!destStat) {
        return fs$k.symlinkSync(resolvedSrc, dest)
      } else {
        let resolvedDest;
        try {
          resolvedDest = fs$k.readlinkSync(dest);
        } catch (err) {
          // dest exists and is a regular file or directory,
          // Windows may throw UNKNOWN error. If dest already exists,
          // fs throws error anyway, so no need to guard against it here.
          if (err.code === 'EINVAL' || err.code === 'UNKNOWN') return fs$k.symlinkSync(resolvedSrc, dest)
          throw err
        }
        if (opts.dereference) {
          resolvedDest = path$g.resolve(process.cwd(), resolvedDest);
        }
        if (stat$3.isSrcSubdir(resolvedSrc, resolvedDest)) {
          throw new Error(`Cannot copy '${resolvedSrc}' to a subdirectory of itself, '${resolvedDest}'.`)
        }

        // prevent copy if src is a subdir of dest since unlinking
        // dest in this case would result in removing src contents
        // and therefore a broken symlink would be created.
        if (fs$k.statSync(dest).isDirectory() && stat$3.isSrcSubdir(resolvedDest, resolvedSrc)) {
          throw new Error(`Cannot overwrite '${resolvedDest}' with '${resolvedSrc}'.`)
        }
        return copyLink$1(resolvedSrc, dest)
      }
    }

    function copyLink$1 (resolvedSrc, dest) {
      fs$k.unlinkSync(dest);
      return fs$k.symlinkSync(resolvedSrc, dest)
    }

    var copySync_1 = copySync$2;

    var copySync$1 = {
      copySync: copySync_1
    };

    const u$9 = universalify$1.fromPromise;
    const fs$j = fs$p;

    function pathExists$7 (path) {
      return fs$j.access(path).then(() => true).catch(() => false)
    }

    var pathExists_1 = {
      pathExists: u$9(pathExists$7),
      pathExistsSync: fs$j.existsSync
    };

    const fs$i = gracefulFs;
    const path$f = path__default["default"];
    const mkdirs$1 = mkdirs$2.mkdirs;
    const pathExists$6 = pathExists_1.pathExists;
    const utimesMillis = utimes.utimesMillis;
    const stat$2 = stat$4;

    function copy$2 (src, dest, opts, cb) {
      if (typeof opts === 'function' && !cb) {
        cb = opts;
        opts = {};
      } else if (typeof opts === 'function') {
        opts = { filter: opts };
      }

      cb = cb || function () {};
      opts = opts || {};

      opts.clobber = 'clobber' in opts ? !!opts.clobber : true; // default to true for now
      opts.overwrite = 'overwrite' in opts ? !!opts.overwrite : opts.clobber; // overwrite falls back to clobber

      // Warn about using preserveTimestamps on 32-bit node
      if (opts.preserveTimestamps && process.arch === 'ia32') {
        console.warn(`fs-extra: Using the preserveTimestamps option in 32-bit node is not recommended;\n
    see https://github.com/jprichardson/node-fs-extra/issues/269`);
      }

      stat$2.checkPaths(src, dest, 'copy', opts, (err, stats) => {
        if (err) return cb(err)
        const { srcStat, destStat } = stats;
        stat$2.checkParentPaths(src, srcStat, dest, 'copy', err => {
          if (err) return cb(err)
          if (opts.filter) return handleFilter(checkParentDir, destStat, src, dest, opts, cb)
          return checkParentDir(destStat, src, dest, opts, cb)
        });
      });
    }

    function checkParentDir (destStat, src, dest, opts, cb) {
      const destParent = path$f.dirname(dest);
      pathExists$6(destParent, (err, dirExists) => {
        if (err) return cb(err)
        if (dirExists) return getStats(destStat, src, dest, opts, cb)
        mkdirs$1(destParent, err => {
          if (err) return cb(err)
          return getStats(destStat, src, dest, opts, cb)
        });
      });
    }

    function handleFilter (onInclude, destStat, src, dest, opts, cb) {
      Promise.resolve(opts.filter(src, dest)).then(include => {
        if (include) return onInclude(destStat, src, dest, opts, cb)
        return cb()
      }, error => cb(error));
    }

    function startCopy (destStat, src, dest, opts, cb) {
      if (opts.filter) return handleFilter(getStats, destStat, src, dest, opts, cb)
      return getStats(destStat, src, dest, opts, cb)
    }

    function getStats (destStat, src, dest, opts, cb) {
      const stat = opts.dereference ? fs$i.stat : fs$i.lstat;
      stat(src, (err, srcStat) => {
        if (err) return cb(err)

        if (srcStat.isDirectory()) return onDir(srcStat, destStat, src, dest, opts, cb)
        else if (srcStat.isFile() ||
                 srcStat.isCharacterDevice() ||
                 srcStat.isBlockDevice()) return onFile(srcStat, destStat, src, dest, opts, cb)
        else if (srcStat.isSymbolicLink()) return onLink(destStat, src, dest, opts, cb)
        else if (srcStat.isSocket()) return cb(new Error(`Cannot copy a socket file: ${src}`))
        else if (srcStat.isFIFO()) return cb(new Error(`Cannot copy a FIFO pipe: ${src}`))
        return cb(new Error(`Unknown file: ${src}`))
      });
    }

    function onFile (srcStat, destStat, src, dest, opts, cb) {
      if (!destStat) return copyFile(srcStat, src, dest, opts, cb)
      return mayCopyFile(srcStat, src, dest, opts, cb)
    }

    function mayCopyFile (srcStat, src, dest, opts, cb) {
      if (opts.overwrite) {
        fs$i.unlink(dest, err => {
          if (err) return cb(err)
          return copyFile(srcStat, src, dest, opts, cb)
        });
      } else if (opts.errorOnExist) {
        return cb(new Error(`'${dest}' already exists`))
      } else return cb()
    }

    function copyFile (srcStat, src, dest, opts, cb) {
      fs$i.copyFile(src, dest, err => {
        if (err) return cb(err)
        if (opts.preserveTimestamps) return handleTimestampsAndMode(srcStat.mode, src, dest, cb)
        return setDestMode(dest, srcStat.mode, cb)
      });
    }

    function handleTimestampsAndMode (srcMode, src, dest, cb) {
      // Make sure the file is writable before setting the timestamp
      // otherwise open fails with EPERM when invoked with 'r+'
      // (through utimes call)
      if (fileIsNotWritable(srcMode)) {
        return makeFileWritable(dest, srcMode, err => {
          if (err) return cb(err)
          return setDestTimestampsAndMode(srcMode, src, dest, cb)
        })
      }
      return setDestTimestampsAndMode(srcMode, src, dest, cb)
    }

    function fileIsNotWritable (srcMode) {
      return (srcMode & 0o200) === 0
    }

    function makeFileWritable (dest, srcMode, cb) {
      return setDestMode(dest, srcMode | 0o200, cb)
    }

    function setDestTimestampsAndMode (srcMode, src, dest, cb) {
      setDestTimestamps(src, dest, err => {
        if (err) return cb(err)
        return setDestMode(dest, srcMode, cb)
      });
    }

    function setDestMode (dest, srcMode, cb) {
      return fs$i.chmod(dest, srcMode, cb)
    }

    function setDestTimestamps (src, dest, cb) {
      // The initial srcStat.atime cannot be trusted
      // because it is modified by the read(2) system call
      // (See https://nodejs.org/api/fs.html#fs_stat_time_values)
      fs$i.stat(src, (err, updatedSrcStat) => {
        if (err) return cb(err)
        return utimesMillis(dest, updatedSrcStat.atime, updatedSrcStat.mtime, cb)
      });
    }

    function onDir (srcStat, destStat, src, dest, opts, cb) {
      if (!destStat) return mkDirAndCopy(srcStat.mode, src, dest, opts, cb)
      return copyDir(src, dest, opts, cb)
    }

    function mkDirAndCopy (srcMode, src, dest, opts, cb) {
      fs$i.mkdir(dest, err => {
        if (err) return cb(err)
        copyDir(src, dest, opts, err => {
          if (err) return cb(err)
          return setDestMode(dest, srcMode, cb)
        });
      });
    }

    function copyDir (src, dest, opts, cb) {
      fs$i.readdir(src, (err, items) => {
        if (err) return cb(err)
        return copyDirItems(items, src, dest, opts, cb)
      });
    }

    function copyDirItems (items, src, dest, opts, cb) {
      const item = items.pop();
      if (!item) return cb()
      return copyDirItem(items, item, src, dest, opts, cb)
    }

    function copyDirItem (items, item, src, dest, opts, cb) {
      const srcItem = path$f.join(src, item);
      const destItem = path$f.join(dest, item);
      stat$2.checkPaths(srcItem, destItem, 'copy', opts, (err, stats) => {
        if (err) return cb(err)
        const { destStat } = stats;
        startCopy(destStat, srcItem, destItem, opts, err => {
          if (err) return cb(err)
          return copyDirItems(items, src, dest, opts, cb)
        });
      });
    }

    function onLink (destStat, src, dest, opts, cb) {
      fs$i.readlink(src, (err, resolvedSrc) => {
        if (err) return cb(err)
        if (opts.dereference) {
          resolvedSrc = path$f.resolve(process.cwd(), resolvedSrc);
        }

        if (!destStat) {
          return fs$i.symlink(resolvedSrc, dest, cb)
        } else {
          fs$i.readlink(dest, (err, resolvedDest) => {
            if (err) {
              // dest exists and is a regular file or directory,
              // Windows may throw UNKNOWN error. If dest already exists,
              // fs throws error anyway, so no need to guard against it here.
              if (err.code === 'EINVAL' || err.code === 'UNKNOWN') return fs$i.symlink(resolvedSrc, dest, cb)
              return cb(err)
            }
            if (opts.dereference) {
              resolvedDest = path$f.resolve(process.cwd(), resolvedDest);
            }
            if (stat$2.isSrcSubdir(resolvedSrc, resolvedDest)) {
              return cb(new Error(`Cannot copy '${resolvedSrc}' to a subdirectory of itself, '${resolvedDest}'.`))
            }

            // do not copy if src is a subdir of dest since unlinking
            // dest in this case would result in removing src contents
            // and therefore a broken symlink would be created.
            if (destStat.isDirectory() && stat$2.isSrcSubdir(resolvedDest, resolvedSrc)) {
              return cb(new Error(`Cannot overwrite '${resolvedDest}' with '${resolvedSrc}'.`))
            }
            return copyLink(resolvedSrc, dest, cb)
          });
        }
      });
    }

    function copyLink (resolvedSrc, dest, cb) {
      fs$i.unlink(dest, err => {
        if (err) return cb(err)
        return fs$i.symlink(resolvedSrc, dest, cb)
      });
    }

    var copy_1 = copy$2;

    const u$8 = universalify$1.fromCallback;
    var copy$1 = {
      copy: u$8(copy_1)
    };

    const fs$h = gracefulFs;
    const path$e = path__default["default"];
    const assert$6 = require$$0__default$4["default"];

    const isWindows$3 = (process.platform === 'win32');

    function defaults$c (options) {
      const methods = [
        'unlink',
        'chmod',
        'stat',
        'lstat',
        'rmdir',
        'readdir'
      ];
      methods.forEach(m => {
        options[m] = options[m] || fs$h[m];
        m = m + 'Sync';
        options[m] = options[m] || fs$h[m];
      });

      options.maxBusyTries = options.maxBusyTries || 3;
    }

    function rimraf$1 (p, options, cb) {
      let busyTries = 0;

      if (typeof options === 'function') {
        cb = options;
        options = {};
      }

      assert$6(p, 'rimraf: missing path');
      assert$6.strictEqual(typeof p, 'string', 'rimraf: path should be a string');
      assert$6.strictEqual(typeof cb, 'function', 'rimraf: callback function required');
      assert$6(options, 'rimraf: invalid options argument provided');
      assert$6.strictEqual(typeof options, 'object', 'rimraf: options should be object');

      defaults$c(options);

      rimraf_(p, options, function CB (er) {
        if (er) {
          if ((er.code === 'EBUSY' || er.code === 'ENOTEMPTY' || er.code === 'EPERM') &&
              busyTries < options.maxBusyTries) {
            busyTries++;
            const time = busyTries * 100;
            // try again, with the same exact callback as this one.
            return setTimeout(() => rimraf_(p, options, CB), time)
          }

          // already gone
          if (er.code === 'ENOENT') er = null;
        }

        cb(er);
      });
    }

    // Two possible strategies.
    // 1. Assume it's a file.  unlink it, then do the dir stuff on EPERM or EISDIR
    // 2. Assume it's a directory.  readdir, then do the file stuff on ENOTDIR
    //
    // Both result in an extra syscall when you guess wrong.  However, there
    // are likely far more normal files in the world than directories.  This
    // is based on the assumption that a the average number of files per
    // directory is >= 1.
    //
    // If anyone ever complains about this, then I guess the strategy could
    // be made configurable somehow.  But until then, YAGNI.
    function rimraf_ (p, options, cb) {
      assert$6(p);
      assert$6(options);
      assert$6(typeof cb === 'function');

      // sunos lets the root user unlink directories, which is... weird.
      // so we have to lstat here and make sure it's not a dir.
      options.lstat(p, (er, st) => {
        if (er && er.code === 'ENOENT') {
          return cb(null)
        }

        // Windows can EPERM on stat.  Life is suffering.
        if (er && er.code === 'EPERM' && isWindows$3) {
          return fixWinEPERM(p, options, er, cb)
        }

        if (st && st.isDirectory()) {
          return rmdir(p, options, er, cb)
        }

        options.unlink(p, er => {
          if (er) {
            if (er.code === 'ENOENT') {
              return cb(null)
            }
            if (er.code === 'EPERM') {
              return (isWindows$3)
                ? fixWinEPERM(p, options, er, cb)
                : rmdir(p, options, er, cb)
            }
            if (er.code === 'EISDIR') {
              return rmdir(p, options, er, cb)
            }
          }
          return cb(er)
        });
      });
    }

    function fixWinEPERM (p, options, er, cb) {
      assert$6(p);
      assert$6(options);
      assert$6(typeof cb === 'function');

      options.chmod(p, 0o666, er2 => {
        if (er2) {
          cb(er2.code === 'ENOENT' ? null : er);
        } else {
          options.stat(p, (er3, stats) => {
            if (er3) {
              cb(er3.code === 'ENOENT' ? null : er);
            } else if (stats.isDirectory()) {
              rmdir(p, options, er, cb);
            } else {
              options.unlink(p, cb);
            }
          });
        }
      });
    }

    function fixWinEPERMSync (p, options, er) {
      let stats;

      assert$6(p);
      assert$6(options);

      try {
        options.chmodSync(p, 0o666);
      } catch (er2) {
        if (er2.code === 'ENOENT') {
          return
        } else {
          throw er
        }
      }

      try {
        stats = options.statSync(p);
      } catch (er3) {
        if (er3.code === 'ENOENT') {
          return
        } else {
          throw er
        }
      }

      if (stats.isDirectory()) {
        rmdirSync(p, options, er);
      } else {
        options.unlinkSync(p);
      }
    }

    function rmdir (p, options, originalEr, cb) {
      assert$6(p);
      assert$6(options);
      assert$6(typeof cb === 'function');

      // try to rmdir first, and only readdir on ENOTEMPTY or EEXIST (SunOS)
      // if we guessed wrong, and it's not a directory, then
      // raise the original error.
      options.rmdir(p, er => {
        if (er && (er.code === 'ENOTEMPTY' || er.code === 'EEXIST' || er.code === 'EPERM')) {
          rmkids(p, options, cb);
        } else if (er && er.code === 'ENOTDIR') {
          cb(originalEr);
        } else {
          cb(er);
        }
      });
    }

    function rmkids (p, options, cb) {
      assert$6(p);
      assert$6(options);
      assert$6(typeof cb === 'function');

      options.readdir(p, (er, files) => {
        if (er) return cb(er)

        let n = files.length;
        let errState;

        if (n === 0) return options.rmdir(p, cb)

        files.forEach(f => {
          rimraf$1(path$e.join(p, f), options, er => {
            if (errState) {
              return
            }
            if (er) return cb(errState = er)
            if (--n === 0) {
              options.rmdir(p, cb);
            }
          });
        });
      });
    }

    // this looks simpler, and is strictly *faster*, but will
    // tie up the JavaScript thread and fail on excessively
    // deep directory trees.
    function rimrafSync (p, options) {
      let st;

      options = options || {};
      defaults$c(options);

      assert$6(p, 'rimraf: missing path');
      assert$6.strictEqual(typeof p, 'string', 'rimraf: path should be a string');
      assert$6(options, 'rimraf: missing options');
      assert$6.strictEqual(typeof options, 'object', 'rimraf: options should be object');

      try {
        st = options.lstatSync(p);
      } catch (er) {
        if (er.code === 'ENOENT') {
          return
        }

        // Windows can EPERM on stat.  Life is suffering.
        if (er.code === 'EPERM' && isWindows$3) {
          fixWinEPERMSync(p, options, er);
        }
      }

      try {
        // sunos lets the root user unlink directories, which is... weird.
        if (st && st.isDirectory()) {
          rmdirSync(p, options, null);
        } else {
          options.unlinkSync(p);
        }
      } catch (er) {
        if (er.code === 'ENOENT') {
          return
        } else if (er.code === 'EPERM') {
          return isWindows$3 ? fixWinEPERMSync(p, options, er) : rmdirSync(p, options, er)
        } else if (er.code !== 'EISDIR') {
          throw er
        }
        rmdirSync(p, options, er);
      }
    }

    function rmdirSync (p, options, originalEr) {
      assert$6(p);
      assert$6(options);

      try {
        options.rmdirSync(p);
      } catch (er) {
        if (er.code === 'ENOTDIR') {
          throw originalEr
        } else if (er.code === 'ENOTEMPTY' || er.code === 'EEXIST' || er.code === 'EPERM') {
          rmkidsSync(p, options);
        } else if (er.code !== 'ENOENT') {
          throw er
        }
      }
    }

    function rmkidsSync (p, options) {
      assert$6(p);
      assert$6(options);
      options.readdirSync(p).forEach(f => rimrafSync(path$e.join(p, f), options));

      if (isWindows$3) {
        // We only end up here once we got ENOTEMPTY at least once, and
        // at this point, we are guaranteed to have removed all the kids.
        // So, we know that it won't be ENOENT or ENOTDIR or anything else.
        // try really hard to delete stuff on windows, because it has a
        // PROFOUNDLY annoying habit of not closing handles promptly when
        // files are deleted, resulting in spurious ENOTEMPTY errors.
        const startTime = Date.now();
        do {
          try {
            const ret = options.rmdirSync(p, options);
            return ret
          } catch {}
        } while (Date.now() - startTime < 500) // give up after 500ms
      } else {
        const ret = options.rmdirSync(p, options);
        return ret
      }
    }

    var rimraf_1 = rimraf$1;
    rimraf$1.sync = rimrafSync;

    const fs$g = gracefulFs;
    const u$7 = universalify$1.fromCallback;
    const rimraf = rimraf_1;

    function remove$3 (path, callback) {
      // Node 14.14.0+
      if (fs$g.rm) return fs$g.rm(path, { recursive: true, force: true }, callback)
      rimraf(path, callback);
    }

    function removeSync$1 (path) {
      // Node 14.14.0+
      if (fs$g.rmSync) return fs$g.rmSync(path, { recursive: true, force: true })
      rimraf.sync(path);
    }

    var remove_1 = {
      remove: u$7(remove$3),
      removeSync: removeSync$1
    };

    const u$6 = universalify$1.fromPromise;
    const fs$f = fs$p;
    const path$d = path__default["default"];
    const mkdir$3 = mkdirs$2;
    const remove$2 = remove_1;

    const emptyDir = u$6(async function emptyDir (dir) {
      let items;
      try {
        items = await fs$f.readdir(dir);
      } catch {
        return mkdir$3.mkdirs(dir)
      }

      return Promise.all(items.map(item => remove$2.remove(path$d.join(dir, item))))
    });

    function emptyDirSync (dir) {
      let items;
      try {
        items = fs$f.readdirSync(dir);
      } catch {
        return mkdir$3.mkdirsSync(dir)
      }

      items.forEach(item => {
        item = path$d.join(dir, item);
        remove$2.removeSync(item);
      });
    }

    var empty$4 = {
      emptyDirSync,
      emptydirSync: emptyDirSync,
      emptyDir,
      emptydir: emptyDir
    };

    const u$5 = universalify$1.fromCallback;
    const path$c = path__default["default"];
    const fs$e = gracefulFs;
    const mkdir$2 = mkdirs$2;

    function createFile (file, callback) {
      function makeFile () {
        fs$e.writeFile(file, '', err => {
          if (err) return callback(err)
          callback();
        });
      }

      fs$e.stat(file, (err, stats) => { // eslint-disable-line handle-callback-err
        if (!err && stats.isFile()) return callback()
        const dir = path$c.dirname(file);
        fs$e.stat(dir, (err, stats) => {
          if (err) {
            // if the directory doesn't exist, make it
            if (err.code === 'ENOENT') {
              return mkdir$2.mkdirs(dir, err => {
                if (err) return callback(err)
                makeFile();
              })
            }
            return callback(err)
          }

          if (stats.isDirectory()) makeFile();
          else {
            // parent is not a directory
            // This is just to cause an internal ENOTDIR error to be thrown
            fs$e.readdir(dir, err => {
              if (err) return callback(err)
            });
          }
        });
      });
    }

    function createFileSync (file) {
      let stats;
      try {
        stats = fs$e.statSync(file);
      } catch {}
      if (stats && stats.isFile()) return

      const dir = path$c.dirname(file);
      try {
        if (!fs$e.statSync(dir).isDirectory()) {
          // parent is not a directory
          // This is just to cause an internal ENOTDIR error to be thrown
          fs$e.readdirSync(dir);
        }
      } catch (err) {
        // If the stat call above failed because the directory doesn't exist, create it
        if (err && err.code === 'ENOENT') mkdir$2.mkdirsSync(dir);
        else throw err
      }

      fs$e.writeFileSync(file, '');
    }

    var file$3 = {
      createFile: u$5(createFile),
      createFileSync
    };

    const u$4 = universalify$1.fromCallback;
    const path$b = path__default["default"];
    const fs$d = gracefulFs;
    const mkdir$1 = mkdirs$2;
    const pathExists$5 = pathExists_1.pathExists;
    const { areIdentical: areIdentical$1 } = stat$4;

    function createLink (srcpath, dstpath, callback) {
      function makeLink (srcpath, dstpath) {
        fs$d.link(srcpath, dstpath, err => {
          if (err) return callback(err)
          callback(null);
        });
      }

      fs$d.lstat(dstpath, (_, dstStat) => {
        fs$d.lstat(srcpath, (err, srcStat) => {
          if (err) {
            err.message = err.message.replace('lstat', 'ensureLink');
            return callback(err)
          }
          if (dstStat && areIdentical$1(srcStat, dstStat)) return callback(null)

          const dir = path$b.dirname(dstpath);
          pathExists$5(dir, (err, dirExists) => {
            if (err) return callback(err)
            if (dirExists) return makeLink(srcpath, dstpath)
            mkdir$1.mkdirs(dir, err => {
              if (err) return callback(err)
              makeLink(srcpath, dstpath);
            });
          });
        });
      });
    }

    function createLinkSync (srcpath, dstpath) {
      let dstStat;
      try {
        dstStat = fs$d.lstatSync(dstpath);
      } catch {}

      try {
        const srcStat = fs$d.lstatSync(srcpath);
        if (dstStat && areIdentical$1(srcStat, dstStat)) return
      } catch (err) {
        err.message = err.message.replace('lstat', 'ensureLink');
        throw err
      }

      const dir = path$b.dirname(dstpath);
      const dirExists = fs$d.existsSync(dir);
      if (dirExists) return fs$d.linkSync(srcpath, dstpath)
      mkdir$1.mkdirsSync(dir);

      return fs$d.linkSync(srcpath, dstpath)
    }

    var link$3 = {
      createLink: u$4(createLink),
      createLinkSync
    };

    const path$a = path__default["default"];
    const fs$c = gracefulFs;
    const pathExists$4 = pathExists_1.pathExists;

    /**
     * Function that returns two types of paths, one relative to symlink, and one
     * relative to the current working directory. Checks if path is absolute or
     * relative. If the path is relative, this function checks if the path is
     * relative to symlink or relative to current working directory. This is an
     * initiative to find a smarter `srcpath` to supply when building symlinks.
     * This allows you to determine which path to use out of one of three possible
     * types of source paths. The first is an absolute path. This is detected by
     * `path.isAbsolute()`. When an absolute path is provided, it is checked to
     * see if it exists. If it does it's used, if not an error is returned
     * (callback)/ thrown (sync). The other two options for `srcpath` are a
     * relative url. By default Node's `fs.symlink` works by creating a symlink
     * using `dstpath` and expects the `srcpath` to be relative to the newly
     * created symlink. If you provide a `srcpath` that does not exist on the file
     * system it results in a broken symlink. To minimize this, the function
     * checks to see if the 'relative to symlink' source file exists, and if it
     * does it will use it. If it does not, it checks if there's a file that
     * exists that is relative to the current working directory, if does its used.
     * This preserves the expectations of the original fs.symlink spec and adds
     * the ability to pass in `relative to current working direcotry` paths.
     */

    function symlinkPaths$1 (srcpath, dstpath, callback) {
      if (path$a.isAbsolute(srcpath)) {
        return fs$c.lstat(srcpath, (err) => {
          if (err) {
            err.message = err.message.replace('lstat', 'ensureSymlink');
            return callback(err)
          }
          return callback(null, {
            toCwd: srcpath,
            toDst: srcpath
          })
        })
      } else {
        const dstdir = path$a.dirname(dstpath);
        const relativeToDst = path$a.join(dstdir, srcpath);
        return pathExists$4(relativeToDst, (err, exists) => {
          if (err) return callback(err)
          if (exists) {
            return callback(null, {
              toCwd: relativeToDst,
              toDst: srcpath
            })
          } else {
            return fs$c.lstat(srcpath, (err) => {
              if (err) {
                err.message = err.message.replace('lstat', 'ensureSymlink');
                return callback(err)
              }
              return callback(null, {
                toCwd: srcpath,
                toDst: path$a.relative(dstdir, srcpath)
              })
            })
          }
        })
      }
    }

    function symlinkPathsSync$1 (srcpath, dstpath) {
      let exists;
      if (path$a.isAbsolute(srcpath)) {
        exists = fs$c.existsSync(srcpath);
        if (!exists) throw new Error('absolute srcpath does not exist')
        return {
          toCwd: srcpath,
          toDst: srcpath
        }
      } else {
        const dstdir = path$a.dirname(dstpath);
        const relativeToDst = path$a.join(dstdir, srcpath);
        exists = fs$c.existsSync(relativeToDst);
        if (exists) {
          return {
            toCwd: relativeToDst,
            toDst: srcpath
          }
        } else {
          exists = fs$c.existsSync(srcpath);
          if (!exists) throw new Error('relative srcpath does not exist')
          return {
            toCwd: srcpath,
            toDst: path$a.relative(dstdir, srcpath)
          }
        }
      }
    }

    var symlinkPaths_1 = {
      symlinkPaths: symlinkPaths$1,
      symlinkPathsSync: symlinkPathsSync$1
    };

    const fs$b = gracefulFs;

    function symlinkType$1 (srcpath, type, callback) {
      callback = (typeof type === 'function') ? type : callback;
      type = (typeof type === 'function') ? false : type;
      if (type) return callback(null, type)
      fs$b.lstat(srcpath, (err, stats) => {
        if (err) return callback(null, 'file')
        type = (stats && stats.isDirectory()) ? 'dir' : 'file';
        callback(null, type);
      });
    }

    function symlinkTypeSync$1 (srcpath, type) {
      let stats;

      if (type) return type
      try {
        stats = fs$b.lstatSync(srcpath);
      } catch {
        return 'file'
      }
      return (stats && stats.isDirectory()) ? 'dir' : 'file'
    }

    var symlinkType_1 = {
      symlinkType: symlinkType$1,
      symlinkTypeSync: symlinkTypeSync$1
    };

    const u$3 = universalify$1.fromCallback;
    const path$9 = path__default["default"];
    const fs$a = fs$p;
    const _mkdirs = mkdirs$2;
    const mkdirs = _mkdirs.mkdirs;
    const mkdirsSync = _mkdirs.mkdirsSync;

    const _symlinkPaths = symlinkPaths_1;
    const symlinkPaths = _symlinkPaths.symlinkPaths;
    const symlinkPathsSync = _symlinkPaths.symlinkPathsSync;

    const _symlinkType = symlinkType_1;
    const symlinkType = _symlinkType.symlinkType;
    const symlinkTypeSync = _symlinkType.symlinkTypeSync;

    const pathExists$3 = pathExists_1.pathExists;

    const { areIdentical } = stat$4;

    function createSymlink (srcpath, dstpath, type, callback) {
      callback = (typeof type === 'function') ? type : callback;
      type = (typeof type === 'function') ? false : type;

      fs$a.lstat(dstpath, (err, stats) => {
        if (!err && stats.isSymbolicLink()) {
          Promise.all([
            fs$a.stat(srcpath),
            fs$a.stat(dstpath)
          ]).then(([srcStat, dstStat]) => {
            if (areIdentical(srcStat, dstStat)) return callback(null)
            _createSymlink(srcpath, dstpath, type, callback);
          });
        } else _createSymlink(srcpath, dstpath, type, callback);
      });
    }

    function _createSymlink (srcpath, dstpath, type, callback) {
      symlinkPaths(srcpath, dstpath, (err, relative) => {
        if (err) return callback(err)
        srcpath = relative.toDst;
        symlinkType(relative.toCwd, type, (err, type) => {
          if (err) return callback(err)
          const dir = path$9.dirname(dstpath);
          pathExists$3(dir, (err, dirExists) => {
            if (err) return callback(err)
            if (dirExists) return fs$a.symlink(srcpath, dstpath, type, callback)
            mkdirs(dir, err => {
              if (err) return callback(err)
              fs$a.symlink(srcpath, dstpath, type, callback);
            });
          });
        });
      });
    }

    function createSymlinkSync (srcpath, dstpath, type) {
      let stats;
      try {
        stats = fs$a.lstatSync(dstpath);
      } catch {}
      if (stats && stats.isSymbolicLink()) {
        const srcStat = fs$a.statSync(srcpath);
        const dstStat = fs$a.statSync(dstpath);
        if (areIdentical(srcStat, dstStat)) return
      }

      const relative = symlinkPathsSync(srcpath, dstpath);
      srcpath = relative.toDst;
      type = symlinkTypeSync(relative.toCwd, type);
      const dir = path$9.dirname(dstpath);
      const exists = fs$a.existsSync(dir);
      if (exists) return fs$a.symlinkSync(srcpath, dstpath, type)
      mkdirsSync(dir);
      return fs$a.symlinkSync(srcpath, dstpath, type)
    }

    var symlink$1 = {
      createSymlink: u$3(createSymlink),
      createSymlinkSync
    };

    const file$2 = file$3;
    const link$2 = link$3;
    const symlink = symlink$1;

    var ensure = {
      // file
      createFile: file$2.createFile,
      createFileSync: file$2.createFileSync,
      ensureFile: file$2.createFile,
      ensureFileSync: file$2.createFileSync,
      // link
      createLink: link$2.createLink,
      createLinkSync: link$2.createLinkSync,
      ensureLink: link$2.createLink,
      ensureLinkSync: link$2.createLinkSync,
      // symlink
      createSymlink: symlink.createSymlink,
      createSymlinkSync: symlink.createSymlinkSync,
      ensureSymlink: symlink.createSymlink,
      ensureSymlinkSync: symlink.createSymlinkSync
    };

    function stringify$3 (obj, { EOL = '\n', finalEOL = true, replacer = null, spaces } = {}) {
      const EOF = finalEOL ? EOL : '';
      const str = JSON.stringify(obj, replacer, spaces);

      return str.replace(/\n/g, EOL) + EOF
    }

    function stripBom$1 (content) {
      // we do this because JSON.parse would convert it to a utf8 string if encoding wasn't specified
      if (Buffer.isBuffer(content)) content = content.toString('utf8');
      return content.replace(/^\uFEFF/, '')
    }

    var utils$l = { stringify: stringify$3, stripBom: stripBom$1 };

    let _fs;
    try {
      _fs = require('graceful-fs');
    } catch (_) {
      _fs = require$$0__default$6["default"];
    }
    const universalify = universalify$1;
    const { stringify: stringify$2, stripBom } = utils$l;

    async function _readFile (file, options = {}) {
      if (typeof options === 'string') {
        options = { encoding: options };
      }

      const fs = options.fs || _fs;

      const shouldThrow = 'throws' in options ? options.throws : true;

      let data = await universalify.fromCallback(fs.readFile)(file, options);

      data = stripBom(data);

      let obj;
      try {
        obj = JSON.parse(data, options ? options.reviver : null);
      } catch (err) {
        if (shouldThrow) {
          err.message = `${file}: ${err.message}`;
          throw err
        } else {
          return null
        }
      }

      return obj
    }

    const readFile = universalify.fromPromise(_readFile);

    function readFileSync (file, options = {}) {
      if (typeof options === 'string') {
        options = { encoding: options };
      }

      const fs = options.fs || _fs;

      const shouldThrow = 'throws' in options ? options.throws : true;

      try {
        let content = fs.readFileSync(file, options);
        content = stripBom(content);
        return JSON.parse(content, options.reviver)
      } catch (err) {
        if (shouldThrow) {
          err.message = `${file}: ${err.message}`;
          throw err
        } else {
          return null
        }
      }
    }

    async function _writeFile (file, obj, options = {}) {
      const fs = options.fs || _fs;

      const str = stringify$2(obj, options);

      await universalify.fromCallback(fs.writeFile)(file, str, options);
    }

    const writeFile = universalify.fromPromise(_writeFile);

    function writeFileSync (file, obj, options = {}) {
      const fs = options.fs || _fs;

      const str = stringify$2(obj, options);
      // not sure if fs.writeFileSync returns anything, but just in case
      return fs.writeFileSync(file, str, options)
    }

    const jsonfile$1 = {
      readFile,
      readFileSync,
      writeFile,
      writeFileSync
    };

    var jsonfile_1 = jsonfile$1;

    const jsonFile$1 = jsonfile_1;

    var jsonfile = {
      // jsonfile exports
      readJson: jsonFile$1.readFile,
      readJsonSync: jsonFile$1.readFileSync,
      writeJson: jsonFile$1.writeFile,
      writeJsonSync: jsonFile$1.writeFileSync
    };

    const u$2 = universalify$1.fromCallback;
    const fs$9 = gracefulFs;
    const path$8 = path__default["default"];
    const mkdir = mkdirs$2;
    const pathExists$2 = pathExists_1.pathExists;

    function outputFile$1 (file, data, encoding, callback) {
      if (typeof encoding === 'function') {
        callback = encoding;
        encoding = 'utf8';
      }

      const dir = path$8.dirname(file);
      pathExists$2(dir, (err, itDoes) => {
        if (err) return callback(err)
        if (itDoes) return fs$9.writeFile(file, data, encoding, callback)

        mkdir.mkdirs(dir, err => {
          if (err) return callback(err)

          fs$9.writeFile(file, data, encoding, callback);
        });
      });
    }

    function outputFileSync$1 (file, ...args) {
      const dir = path$8.dirname(file);
      if (fs$9.existsSync(dir)) {
        return fs$9.writeFileSync(file, ...args)
      }
      mkdir.mkdirsSync(dir);
      fs$9.writeFileSync(file, ...args);
    }

    var output = {
      outputFile: u$2(outputFile$1),
      outputFileSync: outputFileSync$1
    };

    const { stringify: stringify$1 } = utils$l;
    const { outputFile } = output;

    async function outputJson (file, data, options = {}) {
      const str = stringify$1(data, options);

      await outputFile(file, str, options);
    }

    var outputJson_1 = outputJson;

    const { stringify } = utils$l;
    const { outputFileSync } = output;

    function outputJsonSync (file, data, options) {
      const str = stringify(data, options);

      outputFileSync(file, str, options);
    }

    var outputJsonSync_1 = outputJsonSync;

    const u$1 = universalify$1.fromPromise;
    const jsonFile = jsonfile;

    jsonFile.outputJson = u$1(outputJson_1);
    jsonFile.outputJsonSync = outputJsonSync_1;
    // aliases
    jsonFile.outputJSON = jsonFile.outputJson;
    jsonFile.outputJSONSync = jsonFile.outputJsonSync;
    jsonFile.writeJSON = jsonFile.writeJson;
    jsonFile.writeJSONSync = jsonFile.writeJsonSync;
    jsonFile.readJSON = jsonFile.readJson;
    jsonFile.readJSONSync = jsonFile.readJsonSync;

    var json = jsonFile;

    const fs$8 = gracefulFs;
    const path$7 = path__default["default"];
    const copySync = copySync$1.copySync;
    const removeSync = remove_1.removeSync;
    const mkdirpSync = mkdirs$2.mkdirpSync;
    const stat$1 = stat$4;

    function moveSync$1 (src, dest, opts) {
      opts = opts || {};
      const overwrite = opts.overwrite || opts.clobber || false;

      const { srcStat, isChangingCase = false } = stat$1.checkPathsSync(src, dest, 'move', opts);
      stat$1.checkParentPathsSync(src, srcStat, dest, 'move');
      if (!isParentRoot$1(dest)) mkdirpSync(path$7.dirname(dest));
      return doRename$1(src, dest, overwrite, isChangingCase)
    }

    function isParentRoot$1 (dest) {
      const parent = path$7.dirname(dest);
      const parsedPath = path$7.parse(parent);
      return parsedPath.root === parent
    }

    function doRename$1 (src, dest, overwrite, isChangingCase) {
      if (isChangingCase) return rename$1(src, dest, overwrite)
      if (overwrite) {
        removeSync(dest);
        return rename$1(src, dest, overwrite)
      }
      if (fs$8.existsSync(dest)) throw new Error('dest already exists.')
      return rename$1(src, dest, overwrite)
    }

    function rename$1 (src, dest, overwrite) {
      try {
        fs$8.renameSync(src, dest);
      } catch (err) {
        if (err.code !== 'EXDEV') throw err
        return moveAcrossDevice$1(src, dest, overwrite)
      }
    }

    function moveAcrossDevice$1 (src, dest, overwrite) {
      const opts = {
        overwrite,
        errorOnExist: true
      };
      copySync(src, dest, opts);
      return removeSync(src)
    }

    var moveSync_1 = moveSync$1;

    var moveSync = {
      moveSync: moveSync_1
    };

    const fs$7 = gracefulFs;
    const path$6 = path__default["default"];
    const copy = copy$1.copy;
    const remove$1 = remove_1.remove;
    const mkdirp = mkdirs$2.mkdirp;
    const pathExists$1 = pathExists_1.pathExists;
    const stat = stat$4;

    function move$1 (src, dest, opts, cb) {
      if (typeof opts === 'function') {
        cb = opts;
        opts = {};
      }

      const overwrite = opts.overwrite || opts.clobber || false;

      stat.checkPaths(src, dest, 'move', opts, (err, stats) => {
        if (err) return cb(err)
        const { srcStat, isChangingCase = false } = stats;
        stat.checkParentPaths(src, srcStat, dest, 'move', err => {
          if (err) return cb(err)
          if (isParentRoot(dest)) return doRename(src, dest, overwrite, isChangingCase, cb)
          mkdirp(path$6.dirname(dest), err => {
            if (err) return cb(err)
            return doRename(src, dest, overwrite, isChangingCase, cb)
          });
        });
      });
    }

    function isParentRoot (dest) {
      const parent = path$6.dirname(dest);
      const parsedPath = path$6.parse(parent);
      return parsedPath.root === parent
    }

    function doRename (src, dest, overwrite, isChangingCase, cb) {
      if (isChangingCase) return rename(src, dest, overwrite, cb)
      if (overwrite) {
        return remove$1(dest, err => {
          if (err) return cb(err)
          return rename(src, dest, overwrite, cb)
        })
      }
      pathExists$1(dest, (err, destExists) => {
        if (err) return cb(err)
        if (destExists) return cb(new Error('dest already exists.'))
        return rename(src, dest, overwrite, cb)
      });
    }

    function rename (src, dest, overwrite, cb) {
      fs$7.rename(src, dest, err => {
        if (!err) return cb()
        if (err.code !== 'EXDEV') return cb(err)
        return moveAcrossDevice(src, dest, overwrite, cb)
      });
    }

    function moveAcrossDevice (src, dest, overwrite, cb) {
      const opts = {
        overwrite,
        errorOnExist: true
      };
      copy(src, dest, opts, err => {
        if (err) return cb(err)
        return remove$1(src, cb)
      });
    }

    var move_1 = move$1;

    const u = universalify$1.fromCallback;
    var move = {
      move: u(move_1)
    };

    var lib$2 = {
      // Export promiseified graceful-fs:
      ...fs$p,
      // Export extra methods:
      ...copySync$1,
      ...copy$1,
      ...empty$4,
      ...ensure,
      ...json,
      ...mkdirs$2,
      ...moveSync,
      ...move,
      ...output,
      ...pathExists_1,
      ...remove_1
    };

    var dist$1 = {};

    var src$1 = {};

    var src = {exports: {}};

    var browser = {exports: {}};

    /**
     * Helpers.
     */

    var s = 1000;
    var m = s * 60;
    var h = m * 60;
    var d = h * 24;
    var w = d * 7;
    var y = d * 365.25;

    /**
     * Parse or format the given `val`.
     *
     * Options:
     *
     *  - `long` verbose formatting [false]
     *
     * @param {String|Number} val
     * @param {Object} [options]
     * @throws {Error} throw an error if val is not a non-empty string or a number
     * @return {String|Number}
     * @api public
     */

    var ms = function(val, options) {
      options = options || {};
      var type = typeof val;
      if (type === 'string' && val.length > 0) {
        return parse$1(val);
      } else if (type === 'number' && isFinite(val)) {
        return options.long ? fmtLong(val) : fmtShort(val);
      }
      throw new Error(
        'val is not a non-empty string or a valid number. val=' +
          JSON.stringify(val)
      );
    };

    /**
     * Parse the given `str` and return milliseconds.
     *
     * @param {String} str
     * @return {Number}
     * @api private
     */

    function parse$1(str) {
      str = String(str);
      if (str.length > 100) {
        return;
      }
      var match = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(
        str
      );
      if (!match) {
        return;
      }
      var n = parseFloat(match[1]);
      var type = (match[2] || 'ms').toLowerCase();
      switch (type) {
        case 'years':
        case 'year':
        case 'yrs':
        case 'yr':
        case 'y':
          return n * y;
        case 'weeks':
        case 'week':
        case 'w':
          return n * w;
        case 'days':
        case 'day':
        case 'd':
          return n * d;
        case 'hours':
        case 'hour':
        case 'hrs':
        case 'hr':
        case 'h':
          return n * h;
        case 'minutes':
        case 'minute':
        case 'mins':
        case 'min':
        case 'm':
          return n * m;
        case 'seconds':
        case 'second':
        case 'secs':
        case 'sec':
        case 's':
          return n * s;
        case 'milliseconds':
        case 'millisecond':
        case 'msecs':
        case 'msec':
        case 'ms':
          return n;
        default:
          return undefined;
      }
    }

    /**
     * Short format for `ms`.
     *
     * @param {Number} ms
     * @return {String}
     * @api private
     */

    function fmtShort(ms) {
      var msAbs = Math.abs(ms);
      if (msAbs >= d) {
        return Math.round(ms / d) + 'd';
      }
      if (msAbs >= h) {
        return Math.round(ms / h) + 'h';
      }
      if (msAbs >= m) {
        return Math.round(ms / m) + 'm';
      }
      if (msAbs >= s) {
        return Math.round(ms / s) + 's';
      }
      return ms + 'ms';
    }

    /**
     * Long format for `ms`.
     *
     * @param {Number} ms
     * @return {String}
     * @api private
     */

    function fmtLong(ms) {
      var msAbs = Math.abs(ms);
      if (msAbs >= d) {
        return plural(ms, msAbs, d, 'day');
      }
      if (msAbs >= h) {
        return plural(ms, msAbs, h, 'hour');
      }
      if (msAbs >= m) {
        return plural(ms, msAbs, m, 'minute');
      }
      if (msAbs >= s) {
        return plural(ms, msAbs, s, 'second');
      }
      return ms + ' ms';
    }

    /**
     * Pluralization helper.
     */

    function plural(ms, msAbs, n, name) {
      var isPlural = msAbs >= n * 1.5;
      return Math.round(ms / n) + ' ' + name + (isPlural ? 's' : '');
    }

    /**
     * This is the common logic for both the Node.js and web browser
     * implementations of `debug()`.
     */

    function setup(env) {
    	createDebug.debug = createDebug;
    	createDebug.default = createDebug;
    	createDebug.coerce = coerce;
    	createDebug.disable = disable;
    	createDebug.enable = enable;
    	createDebug.enabled = enabled;
    	createDebug.humanize = ms;
    	createDebug.destroy = destroy;

    	Object.keys(env).forEach(key => {
    		createDebug[key] = env[key];
    	});

    	/**
    	* The currently active debug mode names, and names to skip.
    	*/

    	createDebug.names = [];
    	createDebug.skips = [];

    	/**
    	* Map of special "%n" handling functions, for the debug "format" argument.
    	*
    	* Valid key names are a single, lower or upper-case letter, i.e. "n" and "N".
    	*/
    	createDebug.formatters = {};

    	/**
    	* Selects a color for a debug namespace
    	* @param {String} namespace The namespace string for the debug instance to be colored
    	* @return {Number|String} An ANSI color code for the given namespace
    	* @api private
    	*/
    	function selectColor(namespace) {
    		let hash = 0;

    		for (let i = 0; i < namespace.length; i++) {
    			hash = ((hash << 5) - hash) + namespace.charCodeAt(i);
    			hash |= 0; // Convert to 32bit integer
    		}

    		return createDebug.colors[Math.abs(hash) % createDebug.colors.length];
    	}
    	createDebug.selectColor = selectColor;

    	/**
    	* Create a debugger with the given `namespace`.
    	*
    	* @param {String} namespace
    	* @return {Function}
    	* @api public
    	*/
    	function createDebug(namespace) {
    		let prevTime;
    		let enableOverride = null;
    		let namespacesCache;
    		let enabledCache;

    		function debug(...args) {
    			// Disabled?
    			if (!debug.enabled) {
    				return;
    			}

    			const self = debug;

    			// Set `diff` timestamp
    			const curr = Number(new Date());
    			const ms = curr - (prevTime || curr);
    			self.diff = ms;
    			self.prev = prevTime;
    			self.curr = curr;
    			prevTime = curr;

    			args[0] = createDebug.coerce(args[0]);

    			if (typeof args[0] !== 'string') {
    				// Anything else let's inspect with %O
    				args.unshift('%O');
    			}

    			// Apply any `formatters` transformations
    			let index = 0;
    			args[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format) => {
    				// If we encounter an escaped % then don't increase the array index
    				if (match === '%%') {
    					return '%';
    				}
    				index++;
    				const formatter = createDebug.formatters[format];
    				if (typeof formatter === 'function') {
    					const val = args[index];
    					match = formatter.call(self, val);

    					// Now we need to remove `args[index]` since it's inlined in the `format`
    					args.splice(index, 1);
    					index--;
    				}
    				return match;
    			});

    			// Apply env-specific formatting (colors, etc.)
    			createDebug.formatArgs.call(self, args);

    			const logFn = self.log || createDebug.log;
    			logFn.apply(self, args);
    		}

    		debug.namespace = namespace;
    		debug.useColors = createDebug.useColors();
    		debug.color = createDebug.selectColor(namespace);
    		debug.extend = extend;
    		debug.destroy = createDebug.destroy; // XXX Temporary. Will be removed in the next major release.

    		Object.defineProperty(debug, 'enabled', {
    			enumerable: true,
    			configurable: false,
    			get: () => {
    				if (enableOverride !== null) {
    					return enableOverride;
    				}
    				if (namespacesCache !== createDebug.namespaces) {
    					namespacesCache = createDebug.namespaces;
    					enabledCache = createDebug.enabled(namespace);
    				}

    				return enabledCache;
    			},
    			set: v => {
    				enableOverride = v;
    			}
    		});

    		// Env-specific initialization logic for debug instances
    		if (typeof createDebug.init === 'function') {
    			createDebug.init(debug);
    		}

    		return debug;
    	}

    	function extend(namespace, delimiter) {
    		const newDebug = createDebug(this.namespace + (typeof delimiter === 'undefined' ? ':' : delimiter) + namespace);
    		newDebug.log = this.log;
    		return newDebug;
    	}

    	/**
    	* Enables a debug mode by namespaces. This can include modes
    	* separated by a colon and wildcards.
    	*
    	* @param {String} namespaces
    	* @api public
    	*/
    	function enable(namespaces) {
    		createDebug.save(namespaces);
    		createDebug.namespaces = namespaces;

    		createDebug.names = [];
    		createDebug.skips = [];

    		let i;
    		const split = (typeof namespaces === 'string' ? namespaces : '').split(/[\s,]+/);
    		const len = split.length;

    		for (i = 0; i < len; i++) {
    			if (!split[i]) {
    				// ignore empty strings
    				continue;
    			}

    			namespaces = split[i].replace(/\*/g, '.*?');

    			if (namespaces[0] === '-') {
    				createDebug.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
    			} else {
    				createDebug.names.push(new RegExp('^' + namespaces + '$'));
    			}
    		}
    	}

    	/**
    	* Disable debug output.
    	*
    	* @return {String} namespaces
    	* @api public
    	*/
    	function disable() {
    		const namespaces = [
    			...createDebug.names.map(toNamespace),
    			...createDebug.skips.map(toNamespace).map(namespace => '-' + namespace)
    		].join(',');
    		createDebug.enable('');
    		return namespaces;
    	}

    	/**
    	* Returns true if the given mode name is enabled, false otherwise.
    	*
    	* @param {String} name
    	* @return {Boolean}
    	* @api public
    	*/
    	function enabled(name) {
    		if (name[name.length - 1] === '*') {
    			return true;
    		}

    		let i;
    		let len;

    		for (i = 0, len = createDebug.skips.length; i < len; i++) {
    			if (createDebug.skips[i].test(name)) {
    				return false;
    			}
    		}

    		for (i = 0, len = createDebug.names.length; i < len; i++) {
    			if (createDebug.names[i].test(name)) {
    				return true;
    			}
    		}

    		return false;
    	}

    	/**
    	* Convert regexp to namespace
    	*
    	* @param {RegExp} regxep
    	* @return {String} namespace
    	* @api private
    	*/
    	function toNamespace(regexp) {
    		return regexp.toString()
    			.substring(2, regexp.toString().length - 2)
    			.replace(/\.\*\?$/, '*');
    	}

    	/**
    	* Coerce `val`.
    	*
    	* @param {Mixed} val
    	* @return {Mixed}
    	* @api private
    	*/
    	function coerce(val) {
    		if (val instanceof Error) {
    			return val.stack || val.message;
    		}
    		return val;
    	}

    	/**
    	* XXX DO NOT USE. This is a temporary stub function.
    	* XXX It WILL be removed in the next major release.
    	*/
    	function destroy() {
    		console.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');
    	}

    	createDebug.enable(createDebug.load());

    	return createDebug;
    }

    var common$3 = setup;

    /* eslint-env browser */

    (function (module, exports) {
    /**
     * This is the web browser implementation of `debug()`.
     */

    exports.formatArgs = formatArgs;
    exports.save = save;
    exports.load = load;
    exports.useColors = useColors;
    exports.storage = localstorage();
    exports.destroy = (() => {
    	let warned = false;

    	return () => {
    		if (!warned) {
    			warned = true;
    			console.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');
    		}
    	};
    })();

    /**
     * Colors.
     */

    exports.colors = [
    	'#0000CC',
    	'#0000FF',
    	'#0033CC',
    	'#0033FF',
    	'#0066CC',
    	'#0066FF',
    	'#0099CC',
    	'#0099FF',
    	'#00CC00',
    	'#00CC33',
    	'#00CC66',
    	'#00CC99',
    	'#00CCCC',
    	'#00CCFF',
    	'#3300CC',
    	'#3300FF',
    	'#3333CC',
    	'#3333FF',
    	'#3366CC',
    	'#3366FF',
    	'#3399CC',
    	'#3399FF',
    	'#33CC00',
    	'#33CC33',
    	'#33CC66',
    	'#33CC99',
    	'#33CCCC',
    	'#33CCFF',
    	'#6600CC',
    	'#6600FF',
    	'#6633CC',
    	'#6633FF',
    	'#66CC00',
    	'#66CC33',
    	'#9900CC',
    	'#9900FF',
    	'#9933CC',
    	'#9933FF',
    	'#99CC00',
    	'#99CC33',
    	'#CC0000',
    	'#CC0033',
    	'#CC0066',
    	'#CC0099',
    	'#CC00CC',
    	'#CC00FF',
    	'#CC3300',
    	'#CC3333',
    	'#CC3366',
    	'#CC3399',
    	'#CC33CC',
    	'#CC33FF',
    	'#CC6600',
    	'#CC6633',
    	'#CC9900',
    	'#CC9933',
    	'#CCCC00',
    	'#CCCC33',
    	'#FF0000',
    	'#FF0033',
    	'#FF0066',
    	'#FF0099',
    	'#FF00CC',
    	'#FF00FF',
    	'#FF3300',
    	'#FF3333',
    	'#FF3366',
    	'#FF3399',
    	'#FF33CC',
    	'#FF33FF',
    	'#FF6600',
    	'#FF6633',
    	'#FF9900',
    	'#FF9933',
    	'#FFCC00',
    	'#FFCC33'
    ];

    /**
     * Currently only WebKit-based Web Inspectors, Firefox >= v31,
     * and the Firebug extension (any Firefox version) are known
     * to support "%c" CSS customizations.
     *
     * TODO: add a `localStorage` variable to explicitly enable/disable colors
     */

    // eslint-disable-next-line complexity
    function useColors() {
    	// NB: In an Electron preload script, document will be defined but not fully
    	// initialized. Since we know we're in Chrome, we'll just detect this case
    	// explicitly
    	if (typeof window !== 'undefined' && window.process && (window.process.type === 'renderer' || window.process.__nwjs)) {
    		return true;
    	}

    	// Internet Explorer and Edge do not support colors.
    	if (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) {
    		return false;
    	}

    	// Is webkit? http://stackoverflow.com/a/16459606/376773
    	// document is undefined in react-native: https://github.com/facebook/react-native/pull/1632
    	return (typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||
    		// Is firebug? http://stackoverflow.com/a/398120/376773
    		(typeof window !== 'undefined' && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||
    		// Is firefox >= v31?
    		// https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
    		(typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31) ||
    		// Double check webkit in userAgent just in case we are in a worker
    		(typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/));
    }

    /**
     * Colorize log arguments if enabled.
     *
     * @api public
     */

    function formatArgs(args) {
    	args[0] = (this.useColors ? '%c' : '') +
    		this.namespace +
    		(this.useColors ? ' %c' : ' ') +
    		args[0] +
    		(this.useColors ? '%c ' : ' ') +
    		'+' + module.exports.humanize(this.diff);

    	if (!this.useColors) {
    		return;
    	}

    	const c = 'color: ' + this.color;
    	args.splice(1, 0, c, 'color: inherit');

    	// The final "%c" is somewhat tricky, because there could be other
    	// arguments passed either before or after the %c, so we need to
    	// figure out the correct index to insert the CSS into
    	let index = 0;
    	let lastC = 0;
    	args[0].replace(/%[a-zA-Z%]/g, match => {
    		if (match === '%%') {
    			return;
    		}
    		index++;
    		if (match === '%c') {
    			// We only are interested in the *last* %c
    			// (the user may have provided their own)
    			lastC = index;
    		}
    	});

    	args.splice(lastC, 0, c);
    }

    /**
     * Invokes `console.debug()` when available.
     * No-op when `console.debug` is not a "function".
     * If `console.debug` is not available, falls back
     * to `console.log`.
     *
     * @api public
     */
    exports.log = console.debug || console.log || (() => {});

    /**
     * Save `namespaces`.
     *
     * @param {String} namespaces
     * @api private
     */
    function save(namespaces) {
    	try {
    		if (namespaces) {
    			exports.storage.setItem('debug', namespaces);
    		} else {
    			exports.storage.removeItem('debug');
    		}
    	} catch (error) {
    		// Swallow
    		// XXX (@Qix-) should we be logging these?
    	}
    }

    /**
     * Load `namespaces`.
     *
     * @return {String} returns the previously persisted debug modes
     * @api private
     */
    function load() {
    	let r;
    	try {
    		r = exports.storage.getItem('debug');
    	} catch (error) {
    		// Swallow
    		// XXX (@Qix-) should we be logging these?
    	}

    	// If debug isn't set in LS, and we're in Electron, try to load $DEBUG
    	if (!r && typeof process !== 'undefined' && 'env' in process) {
    		r = process.env.DEBUG;
    	}

    	return r;
    }

    /**
     * Localstorage attempts to return the localstorage.
     *
     * This is necessary because safari throws
     * when a user disables cookies/localstorage
     * and you attempt to access it.
     *
     * @return {LocalStorage}
     * @api private
     */

    function localstorage() {
    	try {
    		// TVMLKit (Apple TV JS Runtime) does not have a window object, just localStorage in the global context
    		// The Browser also has localStorage in the global context.
    		return localStorage;
    	} catch (error) {
    		// Swallow
    		// XXX (@Qix-) should we be logging these?
    	}
    }

    module.exports = common$3(exports);

    const {formatters} = module.exports;

    /**
     * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
     */

    formatters.j = function (v) {
    	try {
    		return JSON.stringify(v);
    	} catch (error) {
    		return '[UnexpectedJSONParseError]: ' + error.message;
    	}
    };
    }(browser, browser.exports));

    var node$1 = {exports: {}};

    /**
     * Module dependencies.
     */

    (function (module, exports) {
    const tty = require$$0__default$8["default"];
    const util = require$$0__default["default"];

    /**
     * This is the Node.js implementation of `debug()`.
     */

    exports.init = init;
    exports.log = log;
    exports.formatArgs = formatArgs;
    exports.save = save;
    exports.load = load;
    exports.useColors = useColors;
    exports.destroy = util.deprecate(
    	() => {},
    	'Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.'
    );

    /**
     * Colors.
     */

    exports.colors = [6, 2, 3, 4, 5, 1];

    try {
    	// Optional dependency (as in, doesn't need to be installed, NOT like optionalDependencies in package.json)
    	// eslint-disable-next-line import/no-extraneous-dependencies
    	const supportsColor = require('supports-color');

    	if (supportsColor && (supportsColor.stderr || supportsColor).level >= 2) {
    		exports.colors = [
    			20,
    			21,
    			26,
    			27,
    			32,
    			33,
    			38,
    			39,
    			40,
    			41,
    			42,
    			43,
    			44,
    			45,
    			56,
    			57,
    			62,
    			63,
    			68,
    			69,
    			74,
    			75,
    			76,
    			77,
    			78,
    			79,
    			80,
    			81,
    			92,
    			93,
    			98,
    			99,
    			112,
    			113,
    			128,
    			129,
    			134,
    			135,
    			148,
    			149,
    			160,
    			161,
    			162,
    			163,
    			164,
    			165,
    			166,
    			167,
    			168,
    			169,
    			170,
    			171,
    			172,
    			173,
    			178,
    			179,
    			184,
    			185,
    			196,
    			197,
    			198,
    			199,
    			200,
    			201,
    			202,
    			203,
    			204,
    			205,
    			206,
    			207,
    			208,
    			209,
    			214,
    			215,
    			220,
    			221
    		];
    	}
    } catch (error) {
    	// Swallow - we only care if `supports-color` is available; it doesn't have to be.
    }

    /**
     * Build up the default `inspectOpts` object from the environment variables.
     *
     *   $ DEBUG_COLORS=no DEBUG_DEPTH=10 DEBUG_SHOW_HIDDEN=enabled node script.js
     */

    exports.inspectOpts = Object.keys(process.env).filter(key => {
    	return /^debug_/i.test(key);
    }).reduce((obj, key) => {
    	// Camel-case
    	const prop = key
    		.substring(6)
    		.toLowerCase()
    		.replace(/_([a-z])/g, (_, k) => {
    			return k.toUpperCase();
    		});

    	// Coerce string value into JS value
    	let val = process.env[key];
    	if (/^(yes|on|true|enabled)$/i.test(val)) {
    		val = true;
    	} else if (/^(no|off|false|disabled)$/i.test(val)) {
    		val = false;
    	} else if (val === 'null') {
    		val = null;
    	} else {
    		val = Number(val);
    	}

    	obj[prop] = val;
    	return obj;
    }, {});

    /**
     * Is stdout a TTY? Colored output is enabled when `true`.
     */

    function useColors() {
    	return 'colors' in exports.inspectOpts ?
    		Boolean(exports.inspectOpts.colors) :
    		tty.isatty(process.stderr.fd);
    }

    /**
     * Adds ANSI color escape codes if enabled.
     *
     * @api public
     */

    function formatArgs(args) {
    	const {namespace: name, useColors} = this;

    	if (useColors) {
    		const c = this.color;
    		const colorCode = '\u001B[3' + (c < 8 ? c : '8;5;' + c);
    		const prefix = `  ${colorCode};1m${name} \u001B[0m`;

    		args[0] = prefix + args[0].split('\n').join('\n' + prefix);
    		args.push(colorCode + 'm+' + module.exports.humanize(this.diff) + '\u001B[0m');
    	} else {
    		args[0] = getDate() + name + ' ' + args[0];
    	}
    }

    function getDate() {
    	if (exports.inspectOpts.hideDate) {
    		return '';
    	}
    	return new Date().toISOString() + ' ';
    }

    /**
     * Invokes `util.format()` with the specified arguments and writes to stderr.
     */

    function log(...args) {
    	return process.stderr.write(util.format(...args) + '\n');
    }

    /**
     * Save `namespaces`.
     *
     * @param {String} namespaces
     * @api private
     */
    function save(namespaces) {
    	if (namespaces) {
    		process.env.DEBUG = namespaces;
    	} else {
    		// If you set a process.env field to null or undefined, it gets cast to the
    		// string 'null' or 'undefined'. Just delete instead.
    		delete process.env.DEBUG;
    	}
    }

    /**
     * Load `namespaces`.
     *
     * @return {String} returns the previously persisted debug modes
     * @api private
     */

    function load() {
    	return process.env.DEBUG;
    }

    /**
     * Init logic for `debug` instances.
     *
     * Create a new `inspectOpts` object in case `useColors` is set
     * differently for a particular `debug` instance.
     */

    function init(debug) {
    	debug.inspectOpts = {};

    	const keys = Object.keys(exports.inspectOpts);
    	for (let i = 0; i < keys.length; i++) {
    		debug.inspectOpts[keys[i]] = exports.inspectOpts[keys[i]];
    	}
    }

    module.exports = common$3(exports);

    const {formatters} = module.exports;

    /**
     * Map %o to `util.inspect()`, all on a single line.
     */

    formatters.o = function (v) {
    	this.inspectOpts.colors = this.useColors;
    	return util.inspect(v, this.inspectOpts)
    		.split('\n')
    		.map(str => str.trim())
    		.join(' ');
    };

    /**
     * Map %O to `util.inspect()`, allowing multiple lines if needed.
     */

    formatters.O = function (v) {
    	this.inspectOpts.colors = this.useColors;
    	return util.inspect(v, this.inspectOpts);
    };
    }(node$1, node$1.exports));

    /**
     * Detect Electron renderer / nwjs process, which is node, but we should
     * treat as a browser.
     */

    if (typeof process === 'undefined' || process.type === 'renderer' || process.browser === true || process.__nwjs) {
    	src.exports = browser.exports;
    } else {
    	src.exports = node$1.exports;
    }

    var debug$3 = src.exports;

    (function (exports) {
    var __importDefault = (commonjsGlobal && commonjsGlobal.__importDefault) || function (mod) {
        return (mod && mod.__esModule) ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    const fs_1 = require$$0__default$6["default"];
    const debug_1 = __importDefault(src.exports);
    const log = debug_1.default('@kwsites/file-exists');
    function check(path, isFile, isDirectory) {
        log(`checking %s`, path);
        try {
            const stat = fs_1.statSync(path);
            if (stat.isFile() && isFile) {
                log(`[OK] path represents a file`);
                return true;
            }
            if (stat.isDirectory() && isDirectory) {
                log(`[OK] path represents a directory`);
                return true;
            }
            log(`[FAIL] path represents something other than a file or directory`);
            return false;
        }
        catch (e) {
            if (e.code === 'ENOENT') {
                log(`[FAIL] path is not accessible: %o`, e);
                return false;
            }
            log(`[FATAL] %o`, e);
            throw e;
        }
    }
    /**
     * Synchronous validation of a path existing either as a file or as a directory.
     *
     * @param {string} path The path to check
     * @param {number} type One or both of the exported numeric constants
     */
    function exists(path, type = exports.READABLE) {
        return check(path, (type & exports.FILE) > 0, (type & exports.FOLDER) > 0);
    }
    exports.exists = exists;
    /**
     * Constant representing a file
     */
    exports.FILE = 1;
    /**
     * Constant representing a folder
     */
    exports.FOLDER = 2;
    /**
     * Constant representing either a file or a folder
     */
    exports.READABLE = exports.FILE + exports.FOLDER;

    }(src$1));

    (function (exports) {
    function __export(m) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }
    Object.defineProperty(exports, "__esModule", { value: true });
    __export(src$1);

    }(dist$1));

    var dist = {};

    Object.defineProperty(dist, "__esModule", { value: true });
    var createDeferred = dist.createDeferred = deferred_1 = dist.deferred = void 0;
    /**
     * Creates a new `DeferredPromise`
     *
     * ```typescript
     import {deferred} from '@kwsites/promise-deferred`;
     ```
     */
    function deferred() {
        let done;
        let fail;
        let status = 'pending';
        const promise = new Promise((_done, _fail) => {
            done = _done;
            fail = _fail;
        });
        return {
            promise,
            done(result) {
                if (status === 'pending') {
                    status = 'resolved';
                    done(result);
                }
            },
            fail(error) {
                if (status === 'pending') {
                    status = 'rejected';
                    fail(error);
                }
            },
            get fulfilled() {
                return status !== 'pending';
            },
            get status() {
                return status;
            },
        };
    }
    var deferred_1 = dist.deferred = deferred;
    /**
     * Alias of the exported `deferred` function, to help consumers wanting to use `deferred` as the
     * local variable name rather than the factory import name, without needing to rename on import.
     *
     * ```typescript
     import {createDeferred} from '@kwsites/promise-deferred`;
     ```
     */
    createDeferred = dist.createDeferred = deferred;
    /**
     * Default export allows use as:
     *
     * ```typescript
     import deferred from '@kwsites/promise-deferred`;
     ```
     */
    dist.default = deferred;

    var __defProp = Object.defineProperty;
    var __defProps = Object.defineProperties;
    var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
    var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
    var __getOwnPropNames = Object.getOwnPropertyNames;
    var __getOwnPropSymbols = Object.getOwnPropertySymbols;
    var __hasOwnProp = Object.prototype.hasOwnProperty;
    var __propIsEnum = Object.prototype.propertyIsEnumerable;
    var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
    var __spreadValues = (a, b) => {
      for (var prop in b || (b = {}))
        if (__hasOwnProp.call(b, prop))
          __defNormalProp(a, prop, b[prop]);
      if (__getOwnPropSymbols)
        for (var prop of __getOwnPropSymbols(b)) {
          if (__propIsEnum.call(b, prop))
            __defNormalProp(a, prop, b[prop]);
        }
      return a;
    };
    var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
    var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
    var __esm = (fn, res) => function __init() {
      return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
    };
    var __commonJS = (cb, mod) => function __require() {
      return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
    };
    var __export = (target, all) => {
      for (var name in all)
        __defProp(target, name, { get: all[name], enumerable: true });
    };
    var __reExport = (target, module, copyDefault, desc) => {
      if (module && typeof module === "object" || typeof module === "function") {
        for (let key of __getOwnPropNames(module))
          if (!__hasOwnProp.call(target, key) && (copyDefault || key !== "default"))
            __defProp(target, key, { get: () => module[key], enumerable: !(desc = __getOwnPropDesc(module, key)) || desc.enumerable });
      }
      return target;
    };
    var __toCommonJS = /* @__PURE__ */ ((cache) => {
      return (module, temp) => {
        return cache && cache.get(module) || (temp = __reExport(__markAsModule({}), module, 1), cache && cache.set(module, temp), temp);
      };
    })(typeof WeakMap !== "undefined" ? /* @__PURE__ */ new WeakMap() : 0);
    var __async = (__this, __arguments, generator) => {
      return new Promise((resolve, reject) => {
        var fulfilled = (value) => {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        };
        var rejected = (value) => {
          try {
            step(generator.throw(value));
          } catch (e) {
            reject(e);
          }
        };
        var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
        step((generator = generator.apply(__this, __arguments)).next());
      });
    };

    // src/lib/errors/git-error.ts
    var GitError;
    var init_git_error = __esm({
      "src/lib/errors/git-error.ts"() {
        GitError = class extends Error {
          constructor(task, message) {
            super(message);
            this.task = task;
            Object.setPrototypeOf(this, new.target.prototype);
          }
        };
      }
    });

    // src/lib/errors/git-response-error.ts
    var GitResponseError;
    var init_git_response_error = __esm({
      "src/lib/errors/git-response-error.ts"() {
        init_git_error();
        GitResponseError = class extends GitError {
          constructor(git, message) {
            super(void 0, message || String(git));
            this.git = git;
          }
        };
      }
    });

    // src/lib/errors/task-configuration-error.ts
    var TaskConfigurationError;
    var init_task_configuration_error = __esm({
      "src/lib/errors/task-configuration-error.ts"() {
        init_git_error();
        TaskConfigurationError = class extends GitError {
          constructor(message) {
            super(void 0, message);
          }
        };
      }
    });
    function asFunction(source) {
      return typeof source === "function" ? source : NOOP;
    }
    function isUserFunction(source) {
      return typeof source === "function" && source !== NOOP;
    }
    function splitOn(input, char) {
      const index = input.indexOf(char);
      if (index <= 0) {
        return [input, ""];
      }
      return [
        input.substr(0, index),
        input.substr(index + 1)
      ];
    }
    function first$2(input, offset = 0) {
      return isArrayLike$i(input) && input.length > offset ? input[offset] : void 0;
    }
    function last$8(input, offset = 0) {
      if (isArrayLike$i(input) && input.length > offset) {
        return input[input.length - 1 - offset];
      }
    }
    function isArrayLike$i(input) {
      return !!(input && typeof input.length === "number");
    }
    function toLinesWithContent(input = "", trimmed2 = true, separator = "\n") {
      return input.split(separator).reduce((output, line) => {
        const lineContent = trimmed2 ? line.trim() : line;
        if (lineContent) {
          output.push(lineContent);
        }
        return output;
      }, []);
    }
    function forEachLineWithContent(input, callback) {
      return toLinesWithContent(input, true).map((line) => callback(line));
    }
    function folderExists(path) {
      return dist$1.exists(path, dist$1.FOLDER);
    }
    function append(target, item) {
      if (Array.isArray(target)) {
        if (!target.includes(item)) {
          target.push(item);
        }
      } else {
        target.add(item);
      }
      return item;
    }
    function including(target, item) {
      if (Array.isArray(target) && !target.includes(item)) {
        target.push(item);
      }
      return target;
    }
    function remove(target, item) {
      if (Array.isArray(target)) {
        const index = target.indexOf(item);
        if (index >= 0) {
          target.splice(index, 1);
        }
      } else {
        target.delete(item);
      }
      return item;
    }
    function asArray(source) {
      return Array.isArray(source) ? source : [source];
    }
    function asStringArray(source) {
      return asArray(source).map(String);
    }
    function asNumber(source, onNaN = 0) {
      if (source == null) {
        return onNaN;
      }
      const num = parseInt(source, 10);
      return isNaN(num) ? onNaN : num;
    }
    function prefixedArray(input, prefix) {
      const output = [];
      for (let i = 0, max = input.length; i < max; i++) {
        output.push(prefix, input[i]);
      }
      return output;
    }
    function bufferToString(input) {
      return (Array.isArray(input) ? Buffer.concat(input) : input).toString("utf-8");
    }
    function pick(source, properties) {
      return Object.assign({}, ...properties.map((property) => property in source ? { [property]: source[property] } : {}));
    }
    function delay$2(duration = 0) {
      return new Promise((done) => setTimeout(done, duration));
    }
    var NULL, NOOP, objectToString$4;
    var init_util = __esm({
      "src/lib/utils/util.ts"() {
        NULL = "\0";
        NOOP = () => {
        };
        objectToString$4 = Object.prototype.toString.call.bind(Object.prototype.toString);
      }
    });

    // src/lib/utils/argument-filters.ts
    function filterType(input, filter, def) {
      if (filter(input)) {
        return input;
      }
      return arguments.length > 2 ? def : void 0;
    }
    function filterPrimitives(input, omit) {
      return /number|string|boolean/.test(typeof input) && (!omit || !omit.includes(typeof input));
    }
    function filterPlainObject(input) {
      return !!input && objectToString$4(input) === "[object Object]";
    }
    function filterFunction(input) {
      return typeof input === "function";
    }
    var filterArray, filterString, filterStringArray, filterStringOrStringArray, filterHasLength;
    var init_argument_filters = __esm({
      "src/lib/utils/argument-filters.ts"() {
        init_util();
        filterArray = (input) => {
          return Array.isArray(input);
        };
        filterString = (input) => {
          return typeof input === "string";
        };
        filterStringArray = (input) => {
          return Array.isArray(input) && input.every(filterString);
        };
        filterStringOrStringArray = (input) => {
          return filterString(input) || Array.isArray(input) && input.every(filterString);
        };
        filterHasLength = (input) => {
          if (input == null || "number|boolean|function".includes(typeof input)) {
            return false;
          }
          return Array.isArray(input) || typeof input === "string" || typeof input.length === "number";
        };
      }
    });

    // src/lib/utils/exit-codes.ts
    var ExitCodes;
    var init_exit_codes = __esm({
      "src/lib/utils/exit-codes.ts"() {
        ExitCodes = /* @__PURE__ */ ((ExitCodes2) => {
          ExitCodes2[ExitCodes2["SUCCESS"] = 0] = "SUCCESS";
          ExitCodes2[ExitCodes2["ERROR"] = 1] = "ERROR";
          ExitCodes2[ExitCodes2["UNCLEAN"] = 128] = "UNCLEAN";
          return ExitCodes2;
        })(ExitCodes || {});
      }
    });

    // src/lib/utils/git-output-streams.ts
    var GitOutputStreams;
    var init_git_output_streams = __esm({
      "src/lib/utils/git-output-streams.ts"() {
        GitOutputStreams = class {
          constructor(stdOut, stdErr) {
            this.stdOut = stdOut;
            this.stdErr = stdErr;
          }
          asStrings() {
            return new GitOutputStreams(this.stdOut.toString("utf8"), this.stdErr.toString("utf8"));
          }
        };
      }
    });

    // src/lib/utils/line-parser.ts
    var LineParser, RemoteLineParser;
    var init_line_parser = __esm({
      "src/lib/utils/line-parser.ts"() {
        LineParser = class {
          constructor(regExp, useMatches) {
            this.matches = [];
            this.parse = (line, target) => {
              this.resetMatches();
              if (!this._regExp.every((reg, index) => this.addMatch(reg, index, line(index)))) {
                return false;
              }
              return this.useMatches(target, this.prepareMatches()) !== false;
            };
            this._regExp = Array.isArray(regExp) ? regExp : [regExp];
            if (useMatches) {
              this.useMatches = useMatches;
            }
          }
          useMatches(target, match) {
            throw new Error(`LineParser:useMatches not implemented`);
          }
          resetMatches() {
            this.matches.length = 0;
          }
          prepareMatches() {
            return this.matches;
          }
          addMatch(reg, index, line) {
            const matched = line && reg.exec(line);
            if (matched) {
              this.pushMatch(index, matched);
            }
            return !!matched;
          }
          pushMatch(_index, matched) {
            this.matches.push(...matched.slice(1));
          }
        };
        RemoteLineParser = class extends LineParser {
          addMatch(reg, index, line) {
            return /^remote:\s/.test(String(line)) && super.addMatch(reg, index, line);
          }
          pushMatch(index, matched) {
            if (index > 0 || matched.length > 1) {
              super.pushMatch(index, matched);
            }
          }
        };
      }
    });

    // src/lib/utils/simple-git-options.ts
    function createInstanceConfig(...options) {
      const baseDir = process.cwd();
      const config = Object.assign(__spreadValues({ baseDir }, defaultOptions), ...options.filter((o) => typeof o === "object" && o));
      config.baseDir = config.baseDir || baseDir;
      return config;
    }
    var defaultOptions;
    var init_simple_git_options = __esm({
      "src/lib/utils/simple-git-options.ts"() {
        defaultOptions = {
          binary: "git",
          maxConcurrentProcesses: 5,
          config: []
        };
      }
    });

    // src/lib/utils/task-options.ts
    function appendTaskOptions(options, commands = []) {
      if (!filterPlainObject(options)) {
        return commands;
      }
      return Object.keys(options).reduce((commands2, key) => {
        const value = options[key];
        if (filterPrimitives(value, ["boolean"])) {
          commands2.push(key + "=" + value);
        } else {
          commands2.push(key);
        }
        return commands2;
      }, commands);
    }
    function getTrailingOptions(args, initialPrimitive = 0, objectOnly = false) {
      const command = [];
      for (let i = 0, max = initialPrimitive < 0 ? args.length : initialPrimitive; i < max; i++) {
        if ("string|number".includes(typeof args[i])) {
          command.push(String(args[i]));
        }
      }
      appendTaskOptions(trailingOptionsArgument(args), command);
      if (!objectOnly) {
        command.push(...trailingArrayArgument(args));
      }
      return command;
    }
    function trailingArrayArgument(args) {
      const hasTrailingCallback = typeof last$8(args) === "function";
      return filterType(last$8(args, hasTrailingCallback ? 1 : 0), filterArray, []);
    }
    function trailingOptionsArgument(args) {
      const hasTrailingCallback = filterFunction(last$8(args));
      return filterType(last$8(args, hasTrailingCallback ? 1 : 0), filterPlainObject);
    }
    function trailingFunctionArgument(args, includeNoop = true) {
      const callback = asFunction(last$8(args));
      return includeNoop || isUserFunction(callback) ? callback : void 0;
    }
    var init_task_options = __esm({
      "src/lib/utils/task-options.ts"() {
        init_argument_filters();
        init_util();
      }
    });

    // src/lib/utils/task-parser.ts
    function callTaskParser(parser3, streams) {
      return parser3(streams.stdOut, streams.stdErr);
    }
    function parseStringResponse(result, parsers11, ...texts) {
      texts.forEach((text) => {
        for (let lines = toLinesWithContent(text), i = 0, max = lines.length; i < max; i++) {
          const line = (offset = 0) => {
            if (i + offset >= max) {
              return;
            }
            return lines[i + offset];
          };
          parsers11.some(({ parse }) => parse(line, result));
        }
      });
      return result;
    }
    var init_task_parser = __esm({
      "src/lib/utils/task-parser.ts"() {
        init_util();
      }
    });

    // src/lib/utils/index.ts
    var utils_exports = {};
    __export(utils_exports, {
      ExitCodes: () => ExitCodes,
      GitOutputStreams: () => GitOutputStreams,
      LineParser: () => LineParser,
      NOOP: () => NOOP,
      NULL: () => NULL,
      RemoteLineParser: () => RemoteLineParser,
      append: () => append,
      appendTaskOptions: () => appendTaskOptions,
      asArray: () => asArray,
      asFunction: () => asFunction,
      asNumber: () => asNumber,
      asStringArray: () => asStringArray,
      bufferToString: () => bufferToString,
      callTaskParser: () => callTaskParser,
      createInstanceConfig: () => createInstanceConfig,
      delay: () => delay$2,
      filterArray: () => filterArray,
      filterFunction: () => filterFunction,
      filterHasLength: () => filterHasLength,
      filterPlainObject: () => filterPlainObject,
      filterPrimitives: () => filterPrimitives,
      filterString: () => filterString,
      filterStringArray: () => filterStringArray,
      filterStringOrStringArray: () => filterStringOrStringArray,
      filterType: () => filterType,
      first: () => first$2,
      folderExists: () => folderExists,
      forEachLineWithContent: () => forEachLineWithContent,
      getTrailingOptions: () => getTrailingOptions,
      including: () => including,
      isUserFunction: () => isUserFunction,
      last: () => last$8,
      objectToString: () => objectToString$4,
      parseStringResponse: () => parseStringResponse,
      pick: () => pick,
      prefixedArray: () => prefixedArray,
      remove: () => remove,
      splitOn: () => splitOn,
      toLinesWithContent: () => toLinesWithContent,
      trailingFunctionArgument: () => trailingFunctionArgument,
      trailingOptionsArgument: () => trailingOptionsArgument
    });
    var init_utils = __esm({
      "src/lib/utils/index.ts"() {
        init_argument_filters();
        init_exit_codes();
        init_git_output_streams();
        init_line_parser();
        init_simple_git_options();
        init_task_options();
        init_task_parser();
        init_util();
      }
    });

    // src/lib/tasks/check-is-repo.ts
    var check_is_repo_exports = {};
    __export(check_is_repo_exports, {
      CheckRepoActions: () => CheckRepoActions,
      checkIsBareRepoTask: () => checkIsBareRepoTask,
      checkIsRepoRootTask: () => checkIsRepoRootTask,
      checkIsRepoTask: () => checkIsRepoTask
    });
    function checkIsRepoTask(action) {
      switch (action) {
        case "bare" /* BARE */:
          return checkIsBareRepoTask();
        case "root" /* IS_REPO_ROOT */:
          return checkIsRepoRootTask();
      }
      const commands = ["rev-parse", "--is-inside-work-tree"];
      return {
        commands,
        format: "utf-8",
        onError,
        parser
      };
    }
    function checkIsRepoRootTask() {
      const commands = ["rev-parse", "--git-dir"];
      return {
        commands,
        format: "utf-8",
        onError,
        parser(path) {
          return /^\.(git)?$/.test(path.trim());
        }
      };
    }
    function checkIsBareRepoTask() {
      const commands = ["rev-parse", "--is-bare-repository"];
      return {
        commands,
        format: "utf-8",
        onError,
        parser
      };
    }
    function isNotRepoMessage(error) {
      return /(Not a git repository|Kein Git-Repository)/i.test(String(error));
    }
    var CheckRepoActions, onError, parser;
    var init_check_is_repo = __esm({
      "src/lib/tasks/check-is-repo.ts"() {
        init_utils();
        CheckRepoActions = /* @__PURE__ */ ((CheckRepoActions2) => {
          CheckRepoActions2["BARE"] = "bare";
          CheckRepoActions2["IN_TREE"] = "tree";
          CheckRepoActions2["IS_REPO_ROOT"] = "root";
          return CheckRepoActions2;
        })(CheckRepoActions || {});
        onError = ({ exitCode }, error, done, fail) => {
          if (exitCode === 128 /* UNCLEAN */ && isNotRepoMessage(error)) {
            return done(Buffer.from("false"));
          }
          fail(error);
        };
        parser = (text) => {
          return text.trim() === "true";
        };
      }
    });

    // src/lib/responses/CleanSummary.ts
    function cleanSummaryParser(dryRun, text) {
      const summary = new CleanResponse(dryRun);
      const regexp = dryRun ? dryRunRemovalRegexp : removalRegexp;
      toLinesWithContent(text).forEach((line) => {
        const removed = line.replace(regexp, "");
        summary.paths.push(removed);
        (isFolderRegexp.test(removed) ? summary.folders : summary.files).push(removed);
      });
      return summary;
    }
    var CleanResponse, removalRegexp, dryRunRemovalRegexp, isFolderRegexp;
    var init_CleanSummary = __esm({
      "src/lib/responses/CleanSummary.ts"() {
        init_utils();
        CleanResponse = class {
          constructor(dryRun) {
            this.dryRun = dryRun;
            this.paths = [];
            this.files = [];
            this.folders = [];
          }
        };
        removalRegexp = /^[a-z]+\s*/i;
        dryRunRemovalRegexp = /^[a-z]+\s+[a-z]+\s*/i;
        isFolderRegexp = /\/$/;
      }
    });

    // src/lib/tasks/task.ts
    var task_exports = {};
    __export(task_exports, {
      EMPTY_COMMANDS: () => EMPTY_COMMANDS,
      adhocExecTask: () => adhocExecTask,
      configurationErrorTask: () => configurationErrorTask,
      isBufferTask: () => isBufferTask,
      isEmptyTask: () => isEmptyTask,
      straightThroughBufferTask: () => straightThroughBufferTask,
      straightThroughStringTask: () => straightThroughStringTask
    });
    function adhocExecTask(parser3) {
      return {
        commands: EMPTY_COMMANDS,
        format: "empty",
        parser: parser3
      };
    }
    function configurationErrorTask(error) {
      return {
        commands: EMPTY_COMMANDS,
        format: "empty",
        parser() {
          throw typeof error === "string" ? new TaskConfigurationError(error) : error;
        }
      };
    }
    function straightThroughStringTask(commands, trimmed2 = false) {
      return {
        commands,
        format: "utf-8",
        parser(text) {
          return trimmed2 ? String(text).trim() : text;
        }
      };
    }
    function straightThroughBufferTask(commands) {
      return {
        commands,
        format: "buffer",
        parser(buffer) {
          return buffer;
        }
      };
    }
    function isBufferTask(task) {
      return task.format === "buffer";
    }
    function isEmptyTask(task) {
      return task.format === "empty" || !task.commands.length;
    }
    var EMPTY_COMMANDS;
    var init_task = __esm({
      "src/lib/tasks/task.ts"() {
        init_task_configuration_error();
        EMPTY_COMMANDS = [];
      }
    });

    // src/lib/tasks/clean.ts
    var clean_exports = {};
    __export(clean_exports, {
      CONFIG_ERROR_INTERACTIVE_MODE: () => CONFIG_ERROR_INTERACTIVE_MODE,
      CONFIG_ERROR_MODE_REQUIRED: () => CONFIG_ERROR_MODE_REQUIRED,
      CONFIG_ERROR_UNKNOWN_OPTION: () => CONFIG_ERROR_UNKNOWN_OPTION,
      CleanOptions: () => CleanOptions,
      cleanTask: () => cleanTask,
      cleanWithOptionsTask: () => cleanWithOptionsTask,
      isCleanOptionsArray: () => isCleanOptionsArray
    });
    function cleanWithOptionsTask(mode, customArgs) {
      const { cleanMode, options, valid } = getCleanOptions(mode);
      if (!cleanMode) {
        return configurationErrorTask(CONFIG_ERROR_MODE_REQUIRED);
      }
      if (!valid.options) {
        return configurationErrorTask(CONFIG_ERROR_UNKNOWN_OPTION + JSON.stringify(mode));
      }
      options.push(...customArgs);
      if (options.some(isInteractiveMode)) {
        return configurationErrorTask(CONFIG_ERROR_INTERACTIVE_MODE);
      }
      return cleanTask(cleanMode, options);
    }
    function cleanTask(mode, customArgs) {
      const commands = ["clean", `-${mode}`, ...customArgs];
      return {
        commands,
        format: "utf-8",
        parser(text) {
          return cleanSummaryParser(mode === "n" /* DRY_RUN */, text);
        }
      };
    }
    function isCleanOptionsArray(input) {
      return Array.isArray(input) && input.every((test) => CleanOptionValues.has(test));
    }
    function getCleanOptions(input) {
      let cleanMode;
      let options = [];
      let valid = { cleanMode: false, options: true };
      input.replace(/[^a-z]i/g, "").split("").forEach((char) => {
        if (isCleanMode(char)) {
          cleanMode = char;
          valid.cleanMode = true;
        } else {
          valid.options = valid.options && isKnownOption(options[options.length] = `-${char}`);
        }
      });
      return {
        cleanMode,
        options,
        valid
      };
    }
    function isCleanMode(cleanMode) {
      return cleanMode === "f" /* FORCE */ || cleanMode === "n" /* DRY_RUN */;
    }
    function isKnownOption(option) {
      return /^-[a-z]$/i.test(option) && CleanOptionValues.has(option.charAt(1));
    }
    function isInteractiveMode(option) {
      if (/^-[^\-]/.test(option)) {
        return option.indexOf("i") > 0;
      }
      return option === "--interactive";
    }
    var CONFIG_ERROR_INTERACTIVE_MODE, CONFIG_ERROR_MODE_REQUIRED, CONFIG_ERROR_UNKNOWN_OPTION, CleanOptions, CleanOptionValues;
    var init_clean = __esm({
      "src/lib/tasks/clean.ts"() {
        init_CleanSummary();
        init_utils();
        init_task();
        CONFIG_ERROR_INTERACTIVE_MODE = "Git clean interactive mode is not supported";
        CONFIG_ERROR_MODE_REQUIRED = 'Git clean mode parameter ("n" or "f") is required';
        CONFIG_ERROR_UNKNOWN_OPTION = "Git clean unknown option found in: ";
        CleanOptions = /* @__PURE__ */ ((CleanOptions2) => {
          CleanOptions2["DRY_RUN"] = "n";
          CleanOptions2["FORCE"] = "f";
          CleanOptions2["IGNORED_INCLUDED"] = "x";
          CleanOptions2["IGNORED_ONLY"] = "X";
          CleanOptions2["EXCLUDING"] = "e";
          CleanOptions2["QUIET"] = "q";
          CleanOptions2["RECURSIVE"] = "d";
          return CleanOptions2;
        })(CleanOptions || {});
        CleanOptionValues = /* @__PURE__ */ new Set(["i", ...asStringArray(Object.values(CleanOptions))]);
      }
    });

    // src/lib/responses/ConfigList.ts
    function configListParser(text) {
      const config = new ConfigList();
      for (const item of configParser(text)) {
        config.addValue(item.file, String(item.key), item.value);
      }
      return config;
    }
    function configGetParser(text, key) {
      let value = null;
      const values = [];
      const scopes = /* @__PURE__ */ new Map();
      for (const item of configParser(text, key)) {
        if (item.key !== key) {
          continue;
        }
        values.push(value = item.value);
        if (!scopes.has(item.file)) {
          scopes.set(item.file, []);
        }
        scopes.get(item.file).push(value);
      }
      return {
        key,
        paths: Array.from(scopes.keys()),
        scopes,
        value,
        values
      };
    }
    function configFilePath(filePath) {
      return filePath.replace(/^(file):/, "");
    }
    function* configParser(text, requestedKey = null) {
      const lines = text.split("\0");
      for (let i = 0, max = lines.length - 1; i < max; ) {
        const file = configFilePath(lines[i++]);
        let value = lines[i++];
        let key = requestedKey;
        if (value.includes("\n")) {
          const line = splitOn(value, "\n");
          key = line[0];
          value = line[1];
        }
        yield { file, key, value };
      }
    }
    var ConfigList;
    var init_ConfigList = __esm({
      "src/lib/responses/ConfigList.ts"() {
        init_utils();
        ConfigList = class {
          constructor() {
            this.files = [];
            this.values = /* @__PURE__ */ Object.create(null);
          }
          get all() {
            if (!this._all) {
              this._all = this.files.reduce((all, file) => {
                return Object.assign(all, this.values[file]);
              }, {});
            }
            return this._all;
          }
          addFile(file) {
            if (!(file in this.values)) {
              const latest = last$8(this.files);
              this.values[file] = latest ? Object.create(this.values[latest]) : {};
              this.files.push(file);
            }
            return this.values[file];
          }
          addValue(file, key, value) {
            const values = this.addFile(file);
            if (!values.hasOwnProperty(key)) {
              values[key] = value;
            } else if (Array.isArray(values[key])) {
              values[key].push(value);
            } else {
              values[key] = [values[key], value];
            }
            this._all = void 0;
          }
        };
      }
    });

    // src/lib/tasks/config.ts
    function asConfigScope(scope, fallback) {
      if (typeof scope === "string" && GitConfigScope.hasOwnProperty(scope)) {
        return scope;
      }
      return fallback;
    }
    function addConfigTask(key, value, append2, scope) {
      const commands = ["config", `--${scope}`];
      if (append2) {
        commands.push("--add");
      }
      commands.push(key, value);
      return {
        commands,
        format: "utf-8",
        parser(text) {
          return text;
        }
      };
    }
    function getConfigTask(key, scope) {
      const commands = ["config", "--null", "--show-origin", "--get-all", key];
      if (scope) {
        commands.splice(1, 0, `--${scope}`);
      }
      return {
        commands,
        format: "utf-8",
        parser(text) {
          return configGetParser(text, key);
        }
      };
    }
    function listConfigTask(scope) {
      const commands = ["config", "--list", "--show-origin", "--null"];
      if (scope) {
        commands.push(`--${scope}`);
      }
      return {
        commands,
        format: "utf-8",
        parser(text) {
          return configListParser(text);
        }
      };
    }
    function config_default() {
      return {
        addConfig(key, value, ...rest) {
          return this._runTask(addConfigTask(key, value, rest[0] === true, asConfigScope(rest[1], "local" /* local */)), trailingFunctionArgument(arguments));
        },
        getConfig(key, scope) {
          return this._runTask(getConfigTask(key, asConfigScope(scope, void 0)), trailingFunctionArgument(arguments));
        },
        listConfig(...rest) {
          return this._runTask(listConfigTask(asConfigScope(rest[0], void 0)), trailingFunctionArgument(arguments));
        }
      };
    }
    var GitConfigScope;
    var init_config = __esm({
      "src/lib/tasks/config.ts"() {
        init_ConfigList();
        init_utils();
        GitConfigScope = /* @__PURE__ */ ((GitConfigScope2) => {
          GitConfigScope2["system"] = "system";
          GitConfigScope2["global"] = "global";
          GitConfigScope2["local"] = "local";
          GitConfigScope2["worktree"] = "worktree";
          return GitConfigScope2;
        })(GitConfigScope || {});
      }
    });

    // src/lib/tasks/grep.ts
    function grepQueryBuilder(...params) {
      return new GrepQuery().param(...params);
    }
    function parseGrep(grep) {
      const paths = /* @__PURE__ */ new Set();
      const results = {};
      forEachLineWithContent(grep, (input) => {
        const [path, line, preview] = input.split(NULL);
        paths.add(path);
        (results[path] = results[path] || []).push({
          line: asNumber(line),
          path,
          preview
        });
      });
      return {
        paths,
        results
      };
    }
    function grep_default() {
      return {
        grep(searchTerm) {
          const then = trailingFunctionArgument(arguments);
          const options = getTrailingOptions(arguments);
          for (const option of disallowedOptions) {
            if (options.includes(option)) {
              return this._runTask(configurationErrorTask(`git.grep: use of "${option}" is not supported.`), then);
            }
          }
          if (typeof searchTerm === "string") {
            searchTerm = grepQueryBuilder().param(searchTerm);
          }
          const commands = ["grep", "--null", "-n", "--full-name", ...options, ...searchTerm];
          return this._runTask({
            commands,
            format: "utf-8",
            parser(stdOut) {
              return parseGrep(stdOut);
            }
          }, then);
        }
      };
    }
    var disallowedOptions, Query, _a, GrepQuery;
    var init_grep = __esm({
      "src/lib/tasks/grep.ts"() {
        init_utils();
        init_task();
        disallowedOptions = ["-h"];
        Query = Symbol("grepQuery");
        GrepQuery = class {
          constructor() {
            this[_a] = [];
          }
          *[(_a = Query, Symbol.iterator)]() {
            for (const query of this[Query]) {
              yield query;
            }
          }
          and(...and) {
            and.length && this[Query].push("--and", "(", ...prefixedArray(and, "-e"), ")");
            return this;
          }
          param(...param) {
            this[Query].push(...prefixedArray(param, "-e"));
            return this;
          }
        };
      }
    });

    // src/lib/tasks/reset.ts
    var reset_exports = {};
    __export(reset_exports, {
      ResetMode: () => ResetMode,
      getResetMode: () => getResetMode,
      resetTask: () => resetTask
    });
    function resetTask(mode, customArgs) {
      const commands = ["reset"];
      if (isValidResetMode(mode)) {
        commands.push(`--${mode}`);
      }
      commands.push(...customArgs);
      return straightThroughStringTask(commands);
    }
    function getResetMode(mode) {
      if (isValidResetMode(mode)) {
        return mode;
      }
      switch (typeof mode) {
        case "string":
        case "undefined":
          return "soft" /* SOFT */;
      }
      return;
    }
    function isValidResetMode(mode) {
      return ResetModes.includes(mode);
    }
    var ResetMode, ResetModes;
    var init_reset = __esm({
      "src/lib/tasks/reset.ts"() {
        init_task();
        ResetMode = /* @__PURE__ */ ((ResetMode2) => {
          ResetMode2["MIXED"] = "mixed";
          ResetMode2["SOFT"] = "soft";
          ResetMode2["HARD"] = "hard";
          ResetMode2["MERGE"] = "merge";
          ResetMode2["KEEP"] = "keep";
          return ResetMode2;
        })(ResetMode || {});
        ResetModes = Array.from(Object.values(ResetMode));
      }
    });
    function createLog() {
      return debug$3("simple-git");
    }
    function prefixedLogger(to, prefix, forward) {
      if (!prefix || !String(prefix).replace(/\s*/, "")) {
        return !forward ? to : (message, ...args) => {
          to(message, ...args);
          forward(message, ...args);
        };
      }
      return (message, ...args) => {
        to(`%s ${message}`, prefix, ...args);
        if (forward) {
          forward(message, ...args);
        }
      };
    }
    function childLoggerName(name, childDebugger, { namespace: parentNamespace }) {
      if (typeof name === "string") {
        return name;
      }
      const childNamespace = childDebugger && childDebugger.namespace || "";
      if (childNamespace.startsWith(parentNamespace)) {
        return childNamespace.substr(parentNamespace.length + 1);
      }
      return childNamespace || parentNamespace;
    }
    function createLogger(label, verbose, initialStep, infoDebugger = createLog()) {
      const labelPrefix = label && `[${label}]` || "";
      const spawned = [];
      const debugDebugger = typeof verbose === "string" ? infoDebugger.extend(verbose) : verbose;
      const key = childLoggerName(filterType(verbose, filterString), debugDebugger, infoDebugger);
      return step(initialStep);
      function sibling(name, initial) {
        return append(spawned, createLogger(label, key.replace(/^[^:]+/, name), initial, infoDebugger));
      }
      function step(phase) {
        const stepPrefix = phase && `[${phase}]` || "";
        const debug2 = debugDebugger && prefixedLogger(debugDebugger, stepPrefix) || NOOP;
        const info = prefixedLogger(infoDebugger, `${labelPrefix} ${stepPrefix}`, debug2);
        return Object.assign(debugDebugger ? debug2 : info, {
          label,
          sibling,
          info,
          step
        });
      }
    }
    var init_git_logger = __esm({
      "src/lib/git-logger.ts"() {
        init_utils();
        debug$3.formatters.L = (value) => String(filterHasLength(value) ? value.length : "-");
        debug$3.formatters.B = (value) => {
          if (Buffer.isBuffer(value)) {
            return value.toString("utf8");
          }
          return objectToString$4(value);
        };
      }
    });

    // src/lib/runners/tasks-pending-queue.ts
    var _TasksPendingQueue, TasksPendingQueue;
    var init_tasks_pending_queue = __esm({
      "src/lib/runners/tasks-pending-queue.ts"() {
        init_git_error();
        init_git_logger();
        _TasksPendingQueue = class {
          constructor(logLabel = "GitExecutor") {
            this.logLabel = logLabel;
            this._queue = /* @__PURE__ */ new Map();
          }
          withProgress(task) {
            return this._queue.get(task);
          }
          createProgress(task) {
            const name = _TasksPendingQueue.getName(task.commands[0]);
            const logger = createLogger(this.logLabel, name);
            return {
              task,
              logger,
              name
            };
          }
          push(task) {
            const progress = this.createProgress(task);
            progress.logger("Adding task to the queue, commands = %o", task.commands);
            this._queue.set(task, progress);
            return progress;
          }
          fatal(err) {
            for (const [task, { logger }] of Array.from(this._queue.entries())) {
              if (task === err.task) {
                logger.info(`Failed %o`, err);
                logger(`Fatal exception, any as-yet un-started tasks run through this executor will not be attempted`);
              } else {
                logger.info(`A fatal exception occurred in a previous task, the queue has been purged: %o`, err.message);
              }
              this.complete(task);
            }
            if (this._queue.size !== 0) {
              throw new Error(`Queue size should be zero after fatal: ${this._queue.size}`);
            }
          }
          complete(task) {
            const progress = this.withProgress(task);
            if (progress) {
              this._queue.delete(task);
            }
          }
          attempt(task) {
            const progress = this.withProgress(task);
            if (!progress) {
              throw new GitError(void 0, "TasksPendingQueue: attempt called for an unknown task");
            }
            progress.logger("Starting task");
            return progress;
          }
          static getName(name = "empty") {
            return `task:${name}:${++_TasksPendingQueue.counter}`;
          }
        };
        TasksPendingQueue = _TasksPendingQueue;
        TasksPendingQueue.counter = 0;
      }
    });
    function pluginContext(task, commands) {
      return {
        method: first$2(task.commands) || "",
        commands
      };
    }
    function onErrorReceived(target, logger) {
      return (err) => {
        logger(`[ERROR] child process exception %o`, err);
        target.push(Buffer.from(String(err.stack), "ascii"));
      };
    }
    function onDataReceived(target, name, logger, output) {
      return (buffer) => {
        logger(`%s received %L bytes`, name, buffer);
        output(`%B`, buffer);
        target.push(buffer);
      };
    }
    var GitExecutorChain;
    var init_git_executor_chain = __esm({
      "src/lib/runners/git-executor-chain.ts"() {
        init_git_error();
        init_task();
        init_utils();
        init_tasks_pending_queue();
        GitExecutorChain = class {
          constructor(_executor, _scheduler, _plugins) {
            this._executor = _executor;
            this._scheduler = _scheduler;
            this._plugins = _plugins;
            this._chain = Promise.resolve();
            this._queue = new TasksPendingQueue();
          }
          get binary() {
            return this._executor.binary;
          }
          get cwd() {
            return this._cwd || this._executor.cwd;
          }
          set cwd(cwd) {
            this._cwd = cwd;
          }
          get env() {
            return this._executor.env;
          }
          get outputHandler() {
            return this._executor.outputHandler;
          }
          chain() {
            return this;
          }
          push(task) {
            this._queue.push(task);
            return this._chain = this._chain.then(() => this.attemptTask(task));
          }
          attemptTask(task) {
            return __async(this, null, function* () {
              const onScheduleComplete = yield this._scheduler.next();
              const onQueueComplete = () => this._queue.complete(task);
              try {
                const { logger } = this._queue.attempt(task);
                return yield isEmptyTask(task) ? this.attemptEmptyTask(task, logger) : this.attemptRemoteTask(task, logger);
              } catch (e) {
                throw this.onFatalException(task, e);
              } finally {
                onQueueComplete();
                onScheduleComplete();
              }
            });
          }
          onFatalException(task, e) {
            const gitError = e instanceof GitError ? Object.assign(e, { task }) : new GitError(task, e && String(e));
            this._chain = Promise.resolve();
            this._queue.fatal(gitError);
            return gitError;
          }
          attemptRemoteTask(task, logger) {
            return __async(this, null, function* () {
              const args = this._plugins.exec("spawn.args", [...task.commands], pluginContext(task, task.commands));
              const raw = yield this.gitResponse(task, this.binary, args, this.outputHandler, logger.step("SPAWN"));
              const outputStreams = yield this.handleTaskData(task, args, raw, logger.step("HANDLE"));
              logger(`passing response to task's parser as a %s`, task.format);
              if (isBufferTask(task)) {
                return callTaskParser(task.parser, outputStreams);
              }
              return callTaskParser(task.parser, outputStreams.asStrings());
            });
          }
          attemptEmptyTask(task, logger) {
            return __async(this, null, function* () {
              logger(`empty task bypassing child process to call to task's parser`);
              return task.parser(this);
            });
          }
          handleTaskData(task, args, result, logger) {
            const { exitCode, rejection, stdOut, stdErr } = result;
            return new Promise((done, fail) => {
              logger(`Preparing to handle process response exitCode=%d stdOut=`, exitCode);
              const { error } = this._plugins.exec("task.error", { error: rejection }, __spreadValues(__spreadValues({}, pluginContext(task, args)), result));
              if (error && task.onError) {
                logger.info(`exitCode=%s handling with custom error handler`);
                return task.onError(result, error, (newStdOut) => {
                  logger.info(`custom error handler treated as success`);
                  logger(`custom error returned a %s`, objectToString$4(newStdOut));
                  done(new GitOutputStreams(Array.isArray(newStdOut) ? Buffer.concat(newStdOut) : newStdOut, Buffer.concat(stdErr)));
                }, fail);
              }
              if (error) {
                logger.info(`handling as error: exitCode=%s stdErr=%s rejection=%o`, exitCode, stdErr.length, rejection);
                return fail(error);
              }
              logger.info(`retrieving task output complete`);
              done(new GitOutputStreams(Buffer.concat(stdOut), Buffer.concat(stdErr)));
            });
          }
          gitResponse(task, command, args, outputHandler, logger) {
            return __async(this, null, function* () {
              const outputLogger = logger.sibling("output");
              const spawnOptions = this._plugins.exec("spawn.options", {
                cwd: this.cwd,
                env: this.env,
                windowsHide: true
              }, pluginContext(task, task.commands));
              return new Promise((done) => {
                const stdOut = [];
                const stdErr = [];
                let rejection;
                logger.info(`%s %o`, command, args);
                logger("%O", spawnOptions);
                const spawned = require$$1$5.spawn(command, args, spawnOptions);
                spawned.stdout.on("data", onDataReceived(stdOut, "stdOut", logger, outputLogger.step("stdOut")));
                spawned.stderr.on("data", onDataReceived(stdErr, "stdErr", logger, outputLogger.step("stdErr")));
                spawned.on("error", onErrorReceived(stdErr, logger));
                if (outputHandler) {
                  logger(`Passing child process stdOut/stdErr to custom outputHandler`);
                  outputHandler(command, spawned.stdout, spawned.stderr, [...args]);
                }
                this._plugins.exec("spawn.after", void 0, __spreadProps(__spreadValues({}, pluginContext(task, args)), {
                  spawned,
                  close(exitCode, reason) {
                    done({
                      stdOut,
                      stdErr,
                      exitCode,
                      rejection: rejection || reason
                    });
                  },
                  kill(reason) {
                    if (spawned.killed) {
                      return;
                    }
                    rejection = reason;
                    spawned.kill("SIGINT");
                  }
                }));
              });
            });
          }
        };
      }
    });

    // src/lib/runners/git-executor.ts
    var git_executor_exports = {};
    __export(git_executor_exports, {
      GitExecutor: () => GitExecutor
    });
    var GitExecutor;
    var init_git_executor = __esm({
      "src/lib/runners/git-executor.ts"() {
        init_git_executor_chain();
        GitExecutor = class {
          constructor(binary = "git", cwd, _scheduler, _plugins) {
            this.binary = binary;
            this.cwd = cwd;
            this._scheduler = _scheduler;
            this._plugins = _plugins;
            this._chain = new GitExecutorChain(this, this._scheduler, this._plugins);
          }
          chain() {
            return new GitExecutorChain(this, this._scheduler, this._plugins);
          }
          push(task) {
            return this._chain.push(task);
          }
        };
      }
    });

    // src/lib/task-callback.ts
    function taskCallback(task, response, callback = NOOP) {
      const onSuccess = (data) => {
        callback(null, data);
      };
      const onError2 = (err) => {
        if ((err == null ? void 0 : err.task) === task) {
          callback(err instanceof GitResponseError ? addDeprecationNoticeToError(err) : err, void 0);
        }
      };
      response.then(onSuccess, onError2);
    }
    function addDeprecationNoticeToError(err) {
      let log = (name) => {
        console.warn(`simple-git deprecation notice: accessing GitResponseError.${name} should be GitResponseError.git.${name}, this will no longer be available in version 3`);
        log = NOOP;
      };
      return Object.create(err, Object.getOwnPropertyNames(err.git).reduce(descriptorReducer, {}));
      function descriptorReducer(all, name) {
        if (name in err) {
          return all;
        }
        all[name] = {
          enumerable: false,
          configurable: false,
          get() {
            log(name);
            return err.git[name];
          }
        };
        return all;
      }
    }
    var init_task_callback = __esm({
      "src/lib/task-callback.ts"() {
        init_git_response_error();
        init_utils();
      }
    });

    // src/lib/tasks/change-working-directory.ts
    function changeWorkingDirectoryTask(directory, root) {
      return adhocExecTask((instance) => {
        if (!folderExists(directory)) {
          throw new Error(`Git.cwd: cannot change to non-directory "${directory}"`);
        }
        return (root || instance).cwd = directory;
      });
    }
    var init_change_working_directory = __esm({
      "src/lib/tasks/change-working-directory.ts"() {
        init_utils();
        init_task();
      }
    });

    // src/lib/tasks/hash-object.ts
    function hashObjectTask(filePath, write) {
      const commands = ["hash-object", filePath];
      if (write) {
        commands.push("-w");
      }
      return straightThroughStringTask(commands, true);
    }
    var init_hash_object = __esm({
      "src/lib/tasks/hash-object.ts"() {
        init_task();
      }
    });

    // src/lib/responses/InitSummary.ts
    function parseInit(bare, path, text) {
      const response = String(text).trim();
      let result;
      if (result = initResponseRegex.exec(response)) {
        return new InitSummary(bare, path, false, result[1]);
      }
      if (result = reInitResponseRegex.exec(response)) {
        return new InitSummary(bare, path, true, result[1]);
      }
      let gitDir = "";
      const tokens = response.split(" ");
      while (tokens.length) {
        const token = tokens.shift();
        if (token === "in") {
          gitDir = tokens.join(" ");
          break;
        }
      }
      return new InitSummary(bare, path, /^re/i.test(response), gitDir);
    }
    var InitSummary, initResponseRegex, reInitResponseRegex;
    var init_InitSummary = __esm({
      "src/lib/responses/InitSummary.ts"() {
        InitSummary = class {
          constructor(bare, path, existing, gitDir) {
            this.bare = bare;
            this.path = path;
            this.existing = existing;
            this.gitDir = gitDir;
          }
        };
        initResponseRegex = /^Init.+ repository in (.+)$/;
        reInitResponseRegex = /^Rein.+ in (.+)$/;
      }
    });

    // src/lib/tasks/init.ts
    function hasBareCommand(command) {
      return command.includes(bareCommand);
    }
    function initTask(bare = false, path, customArgs) {
      const commands = ["init", ...customArgs];
      if (bare && !hasBareCommand(commands)) {
        commands.splice(1, 0, bareCommand);
      }
      return {
        commands,
        format: "utf-8",
        parser(text) {
          return parseInit(commands.includes("--bare"), path, text);
        }
      };
    }
    var bareCommand;
    var init_init = __esm({
      "src/lib/tasks/init.ts"() {
        init_InitSummary();
        bareCommand = "--bare";
      }
    });

    // src/lib/responses/DiffSummary.ts
    var DiffSummary;
    var init_DiffSummary = __esm({
      "src/lib/responses/DiffSummary.ts"() {
        DiffSummary = class {
          constructor() {
            this.changed = 0;
            this.deletions = 0;
            this.insertions = 0;
            this.files = [];
          }
        };
      }
    });

    // src/lib/parsers/parse-diff-summary.ts
    function parseDiffResult(stdOut) {
      const lines = stdOut.trim().split("\n");
      const status = new DiffSummary();
      readSummaryLine(status, lines.pop());
      for (let i = 0, max = lines.length; i < max; i++) {
        const line = lines[i];
        textFileChange(line, status) || binaryFileChange(line, status);
      }
      return status;
    }
    function readSummaryLine(status, summary) {
      (summary || "").trim().split(", ").forEach(function(text) {
        const summary2 = /(\d+)\s([a-z]+)/.exec(text);
        if (!summary2) {
          return;
        }
        summaryType(status, summary2[2], parseInt(summary2[1], 10));
      });
    }
    function summaryType(status, key, value) {
      const match = /([a-z]+?)s?\b/.exec(key);
      if (!match || !statusUpdate[match[1]]) {
        return;
      }
      statusUpdate[match[1]](status, value);
    }
    function textFileChange(input, { files }) {
      const line = input.trim().match(/^(.+)\s+\|\s+(\d+)(\s+[+\-]+)?$/);
      if (line) {
        var alterations = (line[3] || "").trim();
        files.push({
          file: line[1].trim(),
          changes: parseInt(line[2], 10),
          insertions: alterations.replace(/-/g, "").length,
          deletions: alterations.replace(/\+/g, "").length,
          binary: false
        });
        return true;
      }
      return false;
    }
    function binaryFileChange(input, { files }) {
      const line = input.match(/^(.+) \|\s+Bin ([0-9.]+) -> ([0-9.]+) ([a-z]+)$/);
      if (line) {
        files.push({
          file: line[1].trim(),
          before: +line[2],
          after: +line[3],
          binary: true
        });
        return true;
      }
      return false;
    }
    var statusUpdate;
    var init_parse_diff_summary = __esm({
      "src/lib/parsers/parse-diff-summary.ts"() {
        init_DiffSummary();
        statusUpdate = {
          file(status, value) {
            status.changed = value;
          },
          deletion(status, value) {
            status.deletions = value;
          },
          insertion(status, value) {
            status.insertions = value;
          }
        };
      }
    });

    // src/lib/parsers/parse-list-log-summary.ts
    function lineBuilder(tokens, fields) {
      return fields.reduce((line, field, index) => {
        line[field] = tokens[index] || "";
        return line;
      }, /* @__PURE__ */ Object.create({ diff: null }));
    }
    function createListLogSummaryParser(splitter = SPLITTER, fields = defaultFieldNames) {
      return function(stdOut) {
        const all = toLinesWithContent(stdOut, true, START_BOUNDARY).map(function(item) {
          const lineDetail = item.trim().split(COMMIT_BOUNDARY);
          const listLogLine = lineBuilder(lineDetail[0].trim().split(splitter), fields);
          if (lineDetail.length > 1 && !!lineDetail[1].trim()) {
            listLogLine.diff = parseDiffResult(lineDetail[1]);
          }
          return listLogLine;
        });
        return {
          all,
          latest: all.length && all[0] || null,
          total: all.length
        };
      };
    }
    var START_BOUNDARY, COMMIT_BOUNDARY, SPLITTER, defaultFieldNames;
    var init_parse_list_log_summary = __esm({
      "src/lib/parsers/parse-list-log-summary.ts"() {
        init_utils();
        init_parse_diff_summary();
        START_BOUNDARY = "\xF2\xF2\xF2\xF2\xF2\xF2 ";
        COMMIT_BOUNDARY = " \xF2\xF2";
        SPLITTER = " \xF2 ";
        defaultFieldNames = ["hash", "date", "message", "refs", "author_name", "author_email"];
      }
    });

    // src/lib/tasks/log.ts
    function prettyFormat(format, splitter) {
      const fields = [];
      const formatStr = [];
      Object.keys(format).forEach((field) => {
        fields.push(field);
        formatStr.push(String(format[field]));
      });
      return [
        fields,
        formatStr.join(splitter)
      ];
    }
    function userOptions(input) {
      const output = __spreadValues({}, input);
      Object.keys(input).forEach((key) => {
        if (key in excludeOptions) {
          delete output[key];
        }
      });
      return output;
    }
    function parseLogOptions(opt = {}, customArgs = []) {
      const splitter = opt.splitter || SPLITTER;
      const format = opt.format || {
        hash: "%H",
        date: opt.strictDate === false ? "%ai" : "%aI",
        message: "%s",
        refs: "%D",
        body: opt.multiLine ? "%B" : "%b",
        author_name: opt.mailMap !== false ? "%aN" : "%an",
        author_email: opt.mailMap !== false ? "%aE" : "%ae"
      };
      const [fields, formatStr] = prettyFormat(format, splitter);
      const suffix = [];
      const command = [
        `--pretty=format:${START_BOUNDARY}${formatStr}${COMMIT_BOUNDARY}`,
        ...customArgs
      ];
      const maxCount = opt.n || opt["max-count"] || opt.maxCount;
      if (maxCount) {
        command.push(`--max-count=${maxCount}`);
      }
      if (opt.from && opt.to) {
        const rangeOperator = opt.symmetric !== false ? "..." : "..";
        suffix.push(`${opt.from}${rangeOperator}${opt.to}`);
      }
      if (opt.file) {
        suffix.push("--follow", opt.file);
      }
      appendTaskOptions(userOptions(opt), command);
      return {
        fields,
        splitter,
        commands: [
          ...command,
          ...suffix
        ]
      };
    }
    function logTask(splitter, fields, customArgs) {
      return {
        commands: ["log", ...customArgs],
        format: "utf-8",
        parser: createListLogSummaryParser(splitter, fields)
      };
    }
    function log_default() {
      return {
        log(...rest) {
          const next = trailingFunctionArgument(arguments);
          const task = rejectDeprecatedSignatures(...rest) || createLogTask(parseLogOptions(trailingOptionsArgument(arguments), filterType(arguments[0], filterArray)));
          return this._runTask(task, next);
        }
      };
      function createLogTask(options) {
        return logTask(options.splitter, options.fields, options.commands);
      }
      function rejectDeprecatedSignatures(from, to) {
        return filterString(from) && filterString(to) && configurationErrorTask(`git.log(string, string) should be replaced with git.log({ from: string, to: string })`);
      }
    }
    var excludeOptions;
    var init_log = __esm({
      "src/lib/tasks/log.ts"() {
        init_parse_list_log_summary();
        init_utils();
        init_task();
        excludeOptions = /* @__PURE__ */ ((excludeOptions2) => {
          excludeOptions2[excludeOptions2["--pretty"] = 0] = "--pretty";
          excludeOptions2[excludeOptions2["max-count"] = 1] = "max-count";
          excludeOptions2[excludeOptions2["maxCount"] = 2] = "maxCount";
          excludeOptions2[excludeOptions2["n"] = 3] = "n";
          excludeOptions2[excludeOptions2["file"] = 4] = "file";
          excludeOptions2[excludeOptions2["format"] = 5] = "format";
          excludeOptions2[excludeOptions2["from"] = 6] = "from";
          excludeOptions2[excludeOptions2["to"] = 7] = "to";
          excludeOptions2[excludeOptions2["splitter"] = 8] = "splitter";
          excludeOptions2[excludeOptions2["symmetric"] = 9] = "symmetric";
          excludeOptions2[excludeOptions2["mailMap"] = 10] = "mailMap";
          excludeOptions2[excludeOptions2["multiLine"] = 11] = "multiLine";
          excludeOptions2[excludeOptions2["strictDate"] = 12] = "strictDate";
          return excludeOptions2;
        })(excludeOptions || {});
      }
    });

    // src/lib/responses/MergeSummary.ts
    var MergeSummaryConflict, MergeSummaryDetail;
    var init_MergeSummary = __esm({
      "src/lib/responses/MergeSummary.ts"() {
        MergeSummaryConflict = class {
          constructor(reason, file = null, meta) {
            this.reason = reason;
            this.file = file;
            this.meta = meta;
          }
          toString() {
            return `${this.file}:${this.reason}`;
          }
        };
        MergeSummaryDetail = class {
          constructor() {
            this.conflicts = [];
            this.merges = [];
            this.result = "success";
          }
          get failed() {
            return this.conflicts.length > 0;
          }
          get reason() {
            return this.result;
          }
          toString() {
            if (this.conflicts.length) {
              return `CONFLICTS: ${this.conflicts.join(", ")}`;
            }
            return "OK";
          }
        };
      }
    });

    // src/lib/responses/PullSummary.ts
    var PullSummary, PullFailedSummary;
    var init_PullSummary = __esm({
      "src/lib/responses/PullSummary.ts"() {
        PullSummary = class {
          constructor() {
            this.remoteMessages = {
              all: []
            };
            this.created = [];
            this.deleted = [];
            this.files = [];
            this.deletions = {};
            this.insertions = {};
            this.summary = {
              changes: 0,
              deletions: 0,
              insertions: 0
            };
          }
        };
        PullFailedSummary = class {
          constructor() {
            this.remote = "";
            this.hash = {
              local: "",
              remote: ""
            };
            this.branch = {
              local: "",
              remote: ""
            };
            this.message = "";
          }
          toString() {
            return this.message;
          }
        };
      }
    });

    // src/lib/parsers/parse-remote-objects.ts
    function objectEnumerationResult(remoteMessages) {
      return remoteMessages.objects = remoteMessages.objects || {
        compressing: 0,
        counting: 0,
        enumerating: 0,
        packReused: 0,
        reused: { count: 0, delta: 0 },
        total: { count: 0, delta: 0 }
      };
    }
    function asObjectCount(source) {
      const count = /^\s*(\d+)/.exec(source);
      const delta = /delta (\d+)/i.exec(source);
      return {
        count: asNumber(count && count[1] || "0"),
        delta: asNumber(delta && delta[1] || "0")
      };
    }
    var remoteMessagesObjectParsers;
    var init_parse_remote_objects = __esm({
      "src/lib/parsers/parse-remote-objects.ts"() {
        init_utils();
        remoteMessagesObjectParsers = [
          new RemoteLineParser(/^remote:\s*(enumerating|counting|compressing) objects: (\d+),/i, (result, [action, count]) => {
            const key = action.toLowerCase();
            const enumeration = objectEnumerationResult(result.remoteMessages);
            Object.assign(enumeration, { [key]: asNumber(count) });
          }),
          new RemoteLineParser(/^remote:\s*(enumerating|counting|compressing) objects: \d+% \(\d+\/(\d+)\),/i, (result, [action, count]) => {
            const key = action.toLowerCase();
            const enumeration = objectEnumerationResult(result.remoteMessages);
            Object.assign(enumeration, { [key]: asNumber(count) });
          }),
          new RemoteLineParser(/total ([^,]+), reused ([^,]+), pack-reused (\d+)/i, (result, [total, reused, packReused]) => {
            const objects = objectEnumerationResult(result.remoteMessages);
            objects.total = asObjectCount(total);
            objects.reused = asObjectCount(reused);
            objects.packReused = asNumber(packReused);
          })
        ];
      }
    });

    // src/lib/parsers/parse-remote-messages.ts
    function parseRemoteMessages(_stdOut, stdErr) {
      return parseStringResponse({ remoteMessages: new RemoteMessageSummary() }, parsers, stdErr);
    }
    var parsers, RemoteMessageSummary;
    var init_parse_remote_messages = __esm({
      "src/lib/parsers/parse-remote-messages.ts"() {
        init_utils();
        init_parse_remote_objects();
        parsers = [
          new RemoteLineParser(/^remote:\s*(.+)$/, (result, [text]) => {
            result.remoteMessages.all.push(text.trim());
            return false;
          }),
          ...remoteMessagesObjectParsers,
          new RemoteLineParser([/create a (?:pull|merge) request/i, /\s(https?:\/\/\S+)$/], (result, [pullRequestUrl]) => {
            result.remoteMessages.pullRequestUrl = pullRequestUrl;
          }),
          new RemoteLineParser([/found (\d+) vulnerabilities.+\(([^)]+)\)/i, /\s(https?:\/\/\S+)$/], (result, [count, summary, url]) => {
            result.remoteMessages.vulnerabilities = {
              count: asNumber(count),
              summary,
              url
            };
          })
        ];
        RemoteMessageSummary = class {
          constructor() {
            this.all = [];
          }
        };
      }
    });

    // src/lib/parsers/parse-pull.ts
    function parsePullErrorResult(stdOut, stdErr) {
      const pullError = parseStringResponse(new PullFailedSummary(), errorParsers, stdOut, stdErr);
      return pullError.message && pullError;
    }
    var FILE_UPDATE_REGEX, SUMMARY_REGEX, ACTION_REGEX, parsers2, errorParsers, parsePullDetail, parsePullResult;
    var init_parse_pull = __esm({
      "src/lib/parsers/parse-pull.ts"() {
        init_PullSummary();
        init_utils();
        init_parse_remote_messages();
        FILE_UPDATE_REGEX = /^\s*(.+?)\s+\|\s+\d+\s*(\+*)(-*)/;
        SUMMARY_REGEX = /(\d+)\D+((\d+)\D+\(\+\))?(\D+(\d+)\D+\(-\))?/;
        ACTION_REGEX = /^(create|delete) mode \d+ (.+)/;
        parsers2 = [
          new LineParser(FILE_UPDATE_REGEX, (result, [file, insertions, deletions]) => {
            result.files.push(file);
            if (insertions) {
              result.insertions[file] = insertions.length;
            }
            if (deletions) {
              result.deletions[file] = deletions.length;
            }
          }),
          new LineParser(SUMMARY_REGEX, (result, [changes, , insertions, , deletions]) => {
            if (insertions !== void 0 || deletions !== void 0) {
              result.summary.changes = +changes || 0;
              result.summary.insertions = +insertions || 0;
              result.summary.deletions = +deletions || 0;
              return true;
            }
            return false;
          }),
          new LineParser(ACTION_REGEX, (result, [action, file]) => {
            append(result.files, file);
            append(action === "create" ? result.created : result.deleted, file);
          })
        ];
        errorParsers = [
          new LineParser(/^from\s(.+)$/i, (result, [remote]) => void (result.remote = remote)),
          new LineParser(/^fatal:\s(.+)$/, (result, [message]) => void (result.message = message)),
          new LineParser(/([a-z0-9]+)\.\.([a-z0-9]+)\s+(\S+)\s+->\s+(\S+)$/, (result, [hashLocal, hashRemote, branchLocal, branchRemote]) => {
            result.branch.local = branchLocal;
            result.hash.local = hashLocal;
            result.branch.remote = branchRemote;
            result.hash.remote = hashRemote;
          })
        ];
        parsePullDetail = (stdOut, stdErr) => {
          return parseStringResponse(new PullSummary(), parsers2, stdOut, stdErr);
        };
        parsePullResult = (stdOut, stdErr) => {
          return Object.assign(new PullSummary(), parsePullDetail(stdOut, stdErr), parseRemoteMessages(stdOut, stdErr));
        };
      }
    });

    // src/lib/parsers/parse-merge.ts
    var parsers3, parseMergeResult, parseMergeDetail;
    var init_parse_merge = __esm({
      "src/lib/parsers/parse-merge.ts"() {
        init_MergeSummary();
        init_utils();
        init_parse_pull();
        parsers3 = [
          new LineParser(/^Auto-merging\s+(.+)$/, (summary, [autoMerge]) => {
            summary.merges.push(autoMerge);
          }),
          new LineParser(/^CONFLICT\s+\((.+)\): Merge conflict in (.+)$/, (summary, [reason, file]) => {
            summary.conflicts.push(new MergeSummaryConflict(reason, file));
          }),
          new LineParser(/^CONFLICT\s+\((.+\/delete)\): (.+) deleted in (.+) and/, (summary, [reason, file, deleteRef]) => {
            summary.conflicts.push(new MergeSummaryConflict(reason, file, { deleteRef }));
          }),
          new LineParser(/^CONFLICT\s+\((.+)\):/, (summary, [reason]) => {
            summary.conflicts.push(new MergeSummaryConflict(reason, null));
          }),
          new LineParser(/^Automatic merge failed;\s+(.+)$/, (summary, [result]) => {
            summary.result = result;
          })
        ];
        parseMergeResult = (stdOut, stdErr) => {
          return Object.assign(parseMergeDetail(stdOut, stdErr), parsePullResult(stdOut, stdErr));
        };
        parseMergeDetail = (stdOut) => {
          return parseStringResponse(new MergeSummaryDetail(), parsers3, stdOut);
        };
      }
    });

    // src/lib/tasks/merge.ts
    function mergeTask(customArgs) {
      if (!customArgs.length) {
        return configurationErrorTask("Git.merge requires at least one option");
      }
      return {
        commands: ["merge", ...customArgs],
        format: "utf-8",
        parser(stdOut, stdErr) {
          const merge = parseMergeResult(stdOut, stdErr);
          if (merge.failed) {
            throw new GitResponseError(merge);
          }
          return merge;
        }
      };
    }
    var init_merge = __esm({
      "src/lib/tasks/merge.ts"() {
        init_git_response_error();
        init_parse_merge();
        init_task();
      }
    });

    // src/lib/parsers/parse-push.ts
    function pushResultPushedItem(local, remote, status) {
      const deleted = status.includes("deleted");
      const tag = status.includes("tag") || /^refs\/tags/.test(local);
      const alreadyUpdated = !status.includes("new");
      return {
        deleted,
        tag,
        branch: !tag,
        new: !alreadyUpdated,
        alreadyUpdated,
        local,
        remote
      };
    }
    var parsers4, parsePushResult, parsePushDetail;
    var init_parse_push = __esm({
      "src/lib/parsers/parse-push.ts"() {
        init_utils();
        init_parse_remote_messages();
        parsers4 = [
          new LineParser(/^Pushing to (.+)$/, (result, [repo]) => {
            result.repo = repo;
          }),
          new LineParser(/^updating local tracking ref '(.+)'/, (result, [local]) => {
            result.ref = __spreadProps(__spreadValues({}, result.ref || {}), {
              local
            });
          }),
          new LineParser(/^[*-=]\s+([^:]+):(\S+)\s+\[(.+)]$/, (result, [local, remote, type]) => {
            result.pushed.push(pushResultPushedItem(local, remote, type));
          }),
          new LineParser(/^Branch '([^']+)' set up to track remote branch '([^']+)' from '([^']+)'/, (result, [local, remote, remoteName]) => {
            result.branch = __spreadProps(__spreadValues({}, result.branch || {}), {
              local,
              remote,
              remoteName
            });
          }),
          new LineParser(/^([^:]+):(\S+)\s+([a-z0-9]+)\.\.([a-z0-9]+)$/, (result, [local, remote, from, to]) => {
            result.update = {
              head: {
                local,
                remote
              },
              hash: {
                from,
                to
              }
            };
          })
        ];
        parsePushResult = (stdOut, stdErr) => {
          const pushDetail = parsePushDetail(stdOut, stdErr);
          const responseDetail = parseRemoteMessages(stdOut, stdErr);
          return __spreadValues(__spreadValues({}, pushDetail), responseDetail);
        };
        parsePushDetail = (stdOut, stdErr) => {
          return parseStringResponse({ pushed: [] }, parsers4, stdOut, stdErr);
        };
      }
    });

    // src/lib/tasks/push.ts
    var push_exports = {};
    __export(push_exports, {
      pushTagsTask: () => pushTagsTask,
      pushTask: () => pushTask
    });
    function pushTagsTask(ref = {}, customArgs) {
      append(customArgs, "--tags");
      return pushTask(ref, customArgs);
    }
    function pushTask(ref = {}, customArgs) {
      const commands = ["push", ...customArgs];
      if (ref.branch) {
        commands.splice(1, 0, ref.branch);
      }
      if (ref.remote) {
        commands.splice(1, 0, ref.remote);
      }
      remove(commands, "-v");
      append(commands, "--verbose");
      append(commands, "--porcelain");
      return {
        commands,
        format: "utf-8",
        parser: parsePushResult
      };
    }
    var init_push = __esm({
      "src/lib/tasks/push.ts"() {
        init_parse_push();
        init_utils();
      }
    });

    // src/lib/responses/FileStatusSummary.ts
    var fromPathRegex, FileStatusSummary;
    var init_FileStatusSummary = __esm({
      "src/lib/responses/FileStatusSummary.ts"() {
        fromPathRegex = /^(.+) -> (.+)$/;
        FileStatusSummary = class {
          constructor(path, index, working_dir) {
            this.path = path;
            this.index = index;
            this.working_dir = working_dir;
            if (index + working_dir === "R") {
              const detail = fromPathRegex.exec(path) || [null, path, path];
              this.from = detail[1] || "";
              this.path = detail[2] || "";
            }
          }
        };
      }
    });

    // src/lib/responses/StatusSummary.ts
    function renamedFile(line) {
      const detail = /^(.+) -> (.+)$/.exec(line);
      if (!detail) {
        return {
          from: line,
          to: line
        };
      }
      return {
        from: String(detail[1]),
        to: String(detail[2])
      };
    }
    function parser2(indexX, indexY, handler) {
      return [`${indexX}${indexY}`, handler];
    }
    function conflicts(indexX, ...indexY) {
      return indexY.map((y) => parser2(indexX, y, (result, file) => append(result.conflicted, file)));
    }
    function splitLine(result, lineStr) {
      const trimmed2 = lineStr.trim();
      switch (" ") {
        case trimmed2.charAt(2):
          return data(trimmed2.charAt(0), trimmed2.charAt(1), trimmed2.substr(3));
        case trimmed2.charAt(1):
          return data(" " /* NONE */, trimmed2.charAt(0), trimmed2.substr(2));
        default:
          return;
      }
      function data(index, workingDir, path) {
        const raw = `${index}${workingDir}`;
        const handler = parsers5.get(raw);
        if (handler) {
          handler(result, path);
        }
        if (raw !== "##" && raw !== "!!") {
          result.files.push(new FileStatusSummary(path, index, workingDir));
        }
      }
    }
    var StatusSummary, parsers5, parseStatusSummary;
    var init_StatusSummary = __esm({
      "src/lib/responses/StatusSummary.ts"() {
        init_utils();
        init_FileStatusSummary();
        StatusSummary = class {
          constructor() {
            this.not_added = [];
            this.conflicted = [];
            this.created = [];
            this.deleted = [];
            this.ignored = void 0;
            this.modified = [];
            this.renamed = [];
            this.files = [];
            this.staged = [];
            this.ahead = 0;
            this.behind = 0;
            this.current = null;
            this.tracking = null;
            this.detached = false;
          }
          isClean() {
            return !this.files.length;
          }
        };
        parsers5 = new Map([
          parser2(" " /* NONE */, "A" /* ADDED */, (result, file) => append(result.created, file)),
          parser2(" " /* NONE */, "D" /* DELETED */, (result, file) => append(result.deleted, file)),
          parser2(" " /* NONE */, "M" /* MODIFIED */, (result, file) => append(result.modified, file)),
          parser2("A" /* ADDED */, " " /* NONE */, (result, file) => append(result.created, file) && append(result.staged, file)),
          parser2("A" /* ADDED */, "M" /* MODIFIED */, (result, file) => append(result.created, file) && append(result.staged, file) && append(result.modified, file)),
          parser2("D" /* DELETED */, " " /* NONE */, (result, file) => append(result.deleted, file) && append(result.staged, file)),
          parser2("M" /* MODIFIED */, " " /* NONE */, (result, file) => append(result.modified, file) && append(result.staged, file)),
          parser2("M" /* MODIFIED */, "M" /* MODIFIED */, (result, file) => append(result.modified, file) && append(result.staged, file)),
          parser2("R" /* RENAMED */, " " /* NONE */, (result, file) => {
            append(result.renamed, renamedFile(file));
          }),
          parser2("R" /* RENAMED */, "M" /* MODIFIED */, (result, file) => {
            const renamed = renamedFile(file);
            append(result.renamed, renamed);
            append(result.modified, renamed.to);
          }),
          parser2("!" /* IGNORED */, "!" /* IGNORED */, (_result, _file) => {
            append(_result.ignored = _result.ignored || [], _file);
          }),
          parser2("?" /* UNTRACKED */, "?" /* UNTRACKED */, (result, file) => append(result.not_added, file)),
          ...conflicts("A" /* ADDED */, "A" /* ADDED */, "U" /* UNMERGED */),
          ...conflicts("D" /* DELETED */, "D" /* DELETED */, "U" /* UNMERGED */),
          ...conflicts("U" /* UNMERGED */, "A" /* ADDED */, "D" /* DELETED */, "U" /* UNMERGED */),
          ["##", (result, line) => {
            const aheadReg = /ahead (\d+)/;
            const behindReg = /behind (\d+)/;
            const currentReg = /^(.+?(?=(?:\.{3}|\s|$)))/;
            const trackingReg = /\.{3}(\S*)/;
            const onEmptyBranchReg = /\son\s([\S]+)$/;
            let regexResult;
            regexResult = aheadReg.exec(line);
            result.ahead = regexResult && +regexResult[1] || 0;
            regexResult = behindReg.exec(line);
            result.behind = regexResult && +regexResult[1] || 0;
            regexResult = currentReg.exec(line);
            result.current = regexResult && regexResult[1];
            regexResult = trackingReg.exec(line);
            result.tracking = regexResult && regexResult[1];
            regexResult = onEmptyBranchReg.exec(line);
            result.current = regexResult && regexResult[1] || result.current;
            result.detached = /\(no branch\)/.test(line);
          }]
        ]);
        parseStatusSummary = function(text) {
          const lines = text.trim().split("\n");
          const status = new StatusSummary();
          for (let i = 0, l = lines.length; i < l; i++) {
            splitLine(status, lines[i]);
          }
          return status;
        };
      }
    });

    // src/lib/tasks/status.ts
    function statusTask(customArgs) {
      return {
        format: "utf-8",
        commands: ["status", "--porcelain", "-b", "-u", ...customArgs],
        parser(text) {
          return parseStatusSummary(text);
        }
      };
    }
    var init_status = __esm({
      "src/lib/tasks/status.ts"() {
        init_StatusSummary();
      }
    });

    // src/lib/simple-git-api.ts
    var simple_git_api_exports = {};
    __export(simple_git_api_exports, {
      SimpleGitApi: () => SimpleGitApi
    });
    var SimpleGitApi;
    var init_simple_git_api = __esm({
      "src/lib/simple-git-api.ts"() {
        init_task_callback();
        init_change_working_directory();
        init_config();
        init_grep();
        init_hash_object();
        init_init();
        init_log();
        init_merge();
        init_push();
        init_status();
        init_task();
        init_utils();
        SimpleGitApi = class {
          constructor(_executor) {
            this._executor = _executor;
          }
          _runTask(task, then) {
            const chain = this._executor.chain();
            const promise = chain.push(task);
            if (then) {
              taskCallback(task, promise, then);
            }
            return Object.create(this, {
              then: { value: promise.then.bind(promise) },
              catch: { value: promise.catch.bind(promise) },
              _executor: { value: chain }
            });
          }
          add(files) {
            return this._runTask(straightThroughStringTask(["add", ...asArray(files)]), trailingFunctionArgument(arguments));
          }
          cwd(directory) {
            const next = trailingFunctionArgument(arguments);
            if (typeof directory === "string") {
              return this._runTask(changeWorkingDirectoryTask(directory, this._executor), next);
            }
            if (typeof (directory == null ? void 0 : directory.path) === "string") {
              return this._runTask(changeWorkingDirectoryTask(directory.path, directory.root && this._executor || void 0), next);
            }
            return this._runTask(configurationErrorTask("Git.cwd: workingDirectory must be supplied as a string"), next);
          }
          hashObject(path, write) {
            return this._runTask(hashObjectTask(path, write === true), trailingFunctionArgument(arguments));
          }
          init(bare) {
            return this._runTask(initTask(bare === true, this._executor.cwd, getTrailingOptions(arguments)), trailingFunctionArgument(arguments));
          }
          merge() {
            return this._runTask(mergeTask(getTrailingOptions(arguments)), trailingFunctionArgument(arguments));
          }
          mergeFromTo(remote, branch) {
            if (!(filterString(remote) && filterString(branch))) {
              return this._runTask(configurationErrorTask(`Git.mergeFromTo requires that the 'remote' and 'branch' arguments are supplied as strings`));
            }
            return this._runTask(mergeTask([remote, branch, ...getTrailingOptions(arguments)]), trailingFunctionArgument(arguments, false));
          }
          outputHandler(handler) {
            this._executor.outputHandler = handler;
            return this;
          }
          push() {
            const task = pushTask({
              remote: filterType(arguments[0], filterString),
              branch: filterType(arguments[1], filterString)
            }, getTrailingOptions(arguments));
            return this._runTask(task, trailingFunctionArgument(arguments));
          }
          stash() {
            return this._runTask(straightThroughStringTask(["stash", ...getTrailingOptions(arguments)]), trailingFunctionArgument(arguments));
          }
          status() {
            return this._runTask(statusTask(getTrailingOptions(arguments)), trailingFunctionArgument(arguments));
          }
        };
        Object.assign(SimpleGitApi.prototype, config_default(), grep_default(), log_default());
      }
    });

    // src/lib/runners/scheduler.ts
    var scheduler_exports = {};
    __export(scheduler_exports, {
      Scheduler: () => Scheduler$2
    });
    var createScheduledTask, Scheduler$2;
    var init_scheduler = __esm({
      "src/lib/runners/scheduler.ts"() {
        init_utils();
        init_git_logger();
        createScheduledTask = (() => {
          let id = 0;
          return () => {
            id++;
            const { promise, done } = createDeferred();
            return {
              promise,
              done,
              id
            };
          };
        })();
        Scheduler$2 = class {
          constructor(concurrency = 2) {
            this.concurrency = concurrency;
            this.logger = createLogger("", "scheduler");
            this.pending = [];
            this.running = [];
            this.logger(`Constructed, concurrency=%s`, concurrency);
          }
          schedule() {
            if (!this.pending.length || this.running.length >= this.concurrency) {
              this.logger(`Schedule attempt ignored, pending=%s running=%s concurrency=%s`, this.pending.length, this.running.length, this.concurrency);
              return;
            }
            const task = append(this.running, this.pending.shift());
            this.logger(`Attempting id=%s`, task.id);
            task.done(() => {
              this.logger(`Completing id=`, task.id);
              remove(this.running, task);
              this.schedule();
            });
          }
          next() {
            const { promise, id } = append(this.pending, createScheduledTask());
            this.logger(`Scheduling id=%s`, id);
            this.schedule();
            return promise;
          }
        };
      }
    });

    // src/lib/tasks/apply-patch.ts
    var apply_patch_exports = {};
    __export(apply_patch_exports, {
      applyPatchTask: () => applyPatchTask
    });
    function applyPatchTask(patches, customArgs) {
      return straightThroughStringTask(["apply", ...customArgs, ...patches]);
    }
    var init_apply_patch = __esm({
      "src/lib/tasks/apply-patch.ts"() {
        init_task();
      }
    });

    // src/lib/responses/BranchDeleteSummary.ts
    function branchDeletionSuccess(branch, hash) {
      return {
        branch,
        hash,
        success: true
      };
    }
    function branchDeletionFailure(branch) {
      return {
        branch,
        hash: null,
        success: false
      };
    }
    var BranchDeletionBatch;
    var init_BranchDeleteSummary = __esm({
      "src/lib/responses/BranchDeleteSummary.ts"() {
        BranchDeletionBatch = class {
          constructor() {
            this.all = [];
            this.branches = {};
            this.errors = [];
          }
          get success() {
            return !this.errors.length;
          }
        };
      }
    });

    // src/lib/parsers/parse-branch-delete.ts
    function hasBranchDeletionError(data, processExitCode) {
      return processExitCode === 1 /* ERROR */ && deleteErrorRegex.test(data);
    }
    var deleteSuccessRegex, deleteErrorRegex, parsers6, parseBranchDeletions;
    var init_parse_branch_delete = __esm({
      "src/lib/parsers/parse-branch-delete.ts"() {
        init_BranchDeleteSummary();
        init_utils();
        deleteSuccessRegex = /(\S+)\s+\(\S+\s([^)]+)\)/;
        deleteErrorRegex = /^error[^']+'([^']+)'/m;
        parsers6 = [
          new LineParser(deleteSuccessRegex, (result, [branch, hash]) => {
            const deletion = branchDeletionSuccess(branch, hash);
            result.all.push(deletion);
            result.branches[branch] = deletion;
          }),
          new LineParser(deleteErrorRegex, (result, [branch]) => {
            const deletion = branchDeletionFailure(branch);
            result.errors.push(deletion);
            result.all.push(deletion);
            result.branches[branch] = deletion;
          })
        ];
        parseBranchDeletions = (stdOut, stdErr) => {
          return parseStringResponse(new BranchDeletionBatch(), parsers6, stdOut, stdErr);
        };
      }
    });

    // src/lib/responses/BranchSummary.ts
    var BranchSummaryResult;
    var init_BranchSummary = __esm({
      "src/lib/responses/BranchSummary.ts"() {
        BranchSummaryResult = class {
          constructor() {
            this.all = [];
            this.branches = {};
            this.current = "";
            this.detached = false;
          }
          push(current, detached, name, commit, label) {
            if (current) {
              this.detached = detached;
              this.current = name;
            }
            this.all.push(name);
            this.branches[name] = {
              current,
              name,
              commit,
              label
            };
          }
        };
      }
    });

    // src/lib/parsers/parse-branch.ts
    function parseBranchSummary(stdOut) {
      return parseStringResponse(new BranchSummaryResult(), parsers7, stdOut);
    }
    var parsers7;
    var init_parse_branch = __esm({
      "src/lib/parsers/parse-branch.ts"() {
        init_BranchSummary();
        init_utils();
        parsers7 = [
          new LineParser(/^(\*\s)?\((?:HEAD )?detached (?:from|at) (\S+)\)\s+([a-z0-9]+)\s(.*)$/, (result, [current, name, commit, label]) => {
            result.push(!!current, true, name, commit, label);
          }),
          new LineParser(/^(\*\s)?(\S+)\s+([a-z0-9]+)\s?(.*)$/s, (result, [current, name, commit, label]) => {
            result.push(!!current, false, name, commit, label);
          })
        ];
      }
    });

    // src/lib/tasks/branch.ts
    var branch_exports = {};
    __export(branch_exports, {
      branchLocalTask: () => branchLocalTask,
      branchTask: () => branchTask,
      containsDeleteBranchCommand: () => containsDeleteBranchCommand,
      deleteBranchTask: () => deleteBranchTask,
      deleteBranchesTask: () => deleteBranchesTask
    });
    function containsDeleteBranchCommand(commands) {
      const deleteCommands = ["-d", "-D", "--delete"];
      return commands.some((command) => deleteCommands.includes(command));
    }
    function branchTask(customArgs) {
      const isDelete = containsDeleteBranchCommand(customArgs);
      const commands = ["branch", ...customArgs];
      if (commands.length === 1) {
        commands.push("-a");
      }
      if (!commands.includes("-v")) {
        commands.splice(1, 0, "-v");
      }
      return {
        format: "utf-8",
        commands,
        parser(stdOut, stdErr) {
          if (isDelete) {
            return parseBranchDeletions(stdOut, stdErr).all[0];
          }
          return parseBranchSummary(stdOut);
        }
      };
    }
    function branchLocalTask() {
      const parser3 = parseBranchSummary;
      return {
        format: "utf-8",
        commands: ["branch", "-v"],
        parser: parser3
      };
    }
    function deleteBranchesTask(branches, forceDelete = false) {
      return {
        format: "utf-8",
        commands: ["branch", "-v", forceDelete ? "-D" : "-d", ...branches],
        parser(stdOut, stdErr) {
          return parseBranchDeletions(stdOut, stdErr);
        },
        onError({ exitCode, stdOut }, error, done, fail) {
          if (!hasBranchDeletionError(String(error), exitCode)) {
            return fail(error);
          }
          done(stdOut);
        }
      };
    }
    function deleteBranchTask(branch, forceDelete = false) {
      const task = {
        format: "utf-8",
        commands: ["branch", "-v", forceDelete ? "-D" : "-d", branch],
        parser(stdOut, stdErr) {
          return parseBranchDeletions(stdOut, stdErr).branches[branch];
        },
        onError({ exitCode, stdErr, stdOut }, error, _, fail) {
          if (!hasBranchDeletionError(String(error), exitCode)) {
            return fail(error);
          }
          throw new GitResponseError(task.parser(bufferToString(stdOut), bufferToString(stdErr)), String(error));
        }
      };
      return task;
    }
    var init_branch = __esm({
      "src/lib/tasks/branch.ts"() {
        init_git_response_error();
        init_parse_branch_delete();
        init_parse_branch();
        init_utils();
      }
    });

    // src/lib/responses/CheckIgnore.ts
    var parseCheckIgnore;
    var init_CheckIgnore = __esm({
      "src/lib/responses/CheckIgnore.ts"() {
        parseCheckIgnore = (text) => {
          return text.split(/\n/g).map((line) => line.trim()).filter((file) => !!file);
        };
      }
    });

    // src/lib/tasks/check-ignore.ts
    var check_ignore_exports = {};
    __export(check_ignore_exports, {
      checkIgnoreTask: () => checkIgnoreTask
    });
    function checkIgnoreTask(paths) {
      return {
        commands: ["check-ignore", ...paths],
        format: "utf-8",
        parser: parseCheckIgnore
      };
    }
    var init_check_ignore = __esm({
      "src/lib/tasks/check-ignore.ts"() {
        init_CheckIgnore();
      }
    });

    // src/lib/tasks/clone.ts
    var clone_exports = {};
    __export(clone_exports, {
      cloneMirrorTask: () => cloneMirrorTask,
      cloneTask: () => cloneTask
    });
    function cloneTask(repo, directory, customArgs) {
      const commands = ["clone", ...customArgs];
      if (typeof repo === "string") {
        commands.push(repo);
      }
      if (typeof directory === "string") {
        commands.push(directory);
      }
      return straightThroughStringTask(commands);
    }
    function cloneMirrorTask(repo, directory, customArgs) {
      append(customArgs, "--mirror");
      return cloneTask(repo, directory, customArgs);
    }
    var init_clone = __esm({
      "src/lib/tasks/clone.ts"() {
        init_task();
        init_utils();
      }
    });

    // src/lib/parsers/parse-commit.ts
    function parseCommitResult(stdOut) {
      const result = {
        author: null,
        branch: "",
        commit: "",
        root: false,
        summary: {
          changes: 0,
          insertions: 0,
          deletions: 0
        }
      };
      return parseStringResponse(result, parsers8, stdOut);
    }
    var parsers8;
    var init_parse_commit = __esm({
      "src/lib/parsers/parse-commit.ts"() {
        init_utils();
        parsers8 = [
          new LineParser(/^\[([^\s]+)( \([^)]+\))? ([^\]]+)/, (result, [branch, root, commit]) => {
            result.branch = branch;
            result.commit = commit;
            result.root = !!root;
          }),
          new LineParser(/\s*Author:\s(.+)/i, (result, [author]) => {
            const parts = author.split("<");
            const email = parts.pop();
            if (!email || !email.includes("@")) {
              return;
            }
            result.author = {
              email: email.substr(0, email.length - 1),
              name: parts.join("<").trim()
            };
          }),
          new LineParser(/(\d+)[^,]*(?:,\s*(\d+)[^,]*)(?:,\s*(\d+))/g, (result, [changes, insertions, deletions]) => {
            result.summary.changes = parseInt(changes, 10) || 0;
            result.summary.insertions = parseInt(insertions, 10) || 0;
            result.summary.deletions = parseInt(deletions, 10) || 0;
          }),
          new LineParser(/^(\d+)[^,]*(?:,\s*(\d+)[^(]+\(([+-]))?/, (result, [changes, lines, direction]) => {
            result.summary.changes = parseInt(changes, 10) || 0;
            const count = parseInt(lines, 10) || 0;
            if (direction === "-") {
              result.summary.deletions = count;
            } else if (direction === "+") {
              result.summary.insertions = count;
            }
          })
        ];
      }
    });

    // src/lib/tasks/commit.ts
    var commit_exports = {};
    __export(commit_exports, {
      commitTask: () => commitTask
    });
    function commitTask(message, files, customArgs) {
      const commands = ["commit"];
      message.forEach((m) => commands.push("-m", m));
      commands.push(...files, ...customArgs);
      return {
        commands,
        format: "utf-8",
        parser: parseCommitResult
      };
    }
    var init_commit = __esm({
      "src/lib/tasks/commit.ts"() {
        init_parse_commit();
      }
    });

    // src/lib/tasks/diff.ts
    var diff_exports = {};
    __export(diff_exports, {
      diffSummaryTask: () => diffSummaryTask
    });
    function diffSummaryTask(customArgs) {
      return {
        commands: ["diff", "--stat=4096", ...customArgs],
        format: "utf-8",
        parser(stdOut) {
          return parseDiffResult(stdOut);
        }
      };
    }
    var init_diff = __esm({
      "src/lib/tasks/diff.ts"() {
        init_parse_diff_summary();
      }
    });

    // src/lib/parsers/parse-fetch.ts
    function parseFetchResult(stdOut, stdErr) {
      const result = {
        raw: stdOut,
        remote: null,
        branches: [],
        tags: []
      };
      return parseStringResponse(result, parsers9, stdOut, stdErr);
    }
    var parsers9;
    var init_parse_fetch = __esm({
      "src/lib/parsers/parse-fetch.ts"() {
        init_utils();
        parsers9 = [
          new LineParser(/From (.+)$/, (result, [remote]) => {
            result.remote = remote;
          }),
          new LineParser(/\* \[new branch]\s+(\S+)\s*-> (.+)$/, (result, [name, tracking]) => {
            result.branches.push({
              name,
              tracking
            });
          }),
          new LineParser(/\* \[new tag]\s+(\S+)\s*-> (.+)$/, (result, [name, tracking]) => {
            result.tags.push({
              name,
              tracking
            });
          })
        ];
      }
    });

    // src/lib/tasks/fetch.ts
    var fetch_exports = {};
    __export(fetch_exports, {
      fetchTask: () => fetchTask
    });
    function fetchTask(remote, branch, customArgs) {
      const commands = ["fetch", ...customArgs];
      if (remote && branch) {
        commands.push(remote, branch);
      }
      return {
        commands,
        format: "utf-8",
        parser: parseFetchResult
      };
    }
    var init_fetch = __esm({
      "src/lib/tasks/fetch.ts"() {
        init_parse_fetch();
      }
    });

    // src/lib/parsers/parse-move.ts
    function parseMoveResult(stdOut) {
      return parseStringResponse({ moves: [] }, parsers10, stdOut);
    }
    var parsers10;
    var init_parse_move = __esm({
      "src/lib/parsers/parse-move.ts"() {
        init_utils();
        parsers10 = [
          new LineParser(/^Renaming (.+) to (.+)$/, (result, [from, to]) => {
            result.moves.push({ from, to });
          })
        ];
      }
    });

    // src/lib/tasks/move.ts
    var move_exports = {};
    __export(move_exports, {
      moveTask: () => moveTask
    });
    function moveTask(from, to) {
      return {
        commands: ["mv", "-v", ...asArray(from), to],
        format: "utf-8",
        parser: parseMoveResult
      };
    }
    var init_move = __esm({
      "src/lib/tasks/move.ts"() {
        init_parse_move();
        init_utils();
      }
    });

    // src/lib/tasks/pull.ts
    var pull_exports = {};
    __export(pull_exports, {
      pullTask: () => pullTask
    });
    function pullTask(remote, branch, customArgs) {
      const commands = ["pull", ...customArgs];
      if (remote && branch) {
        commands.splice(1, 0, remote, branch);
      }
      return {
        commands,
        format: "utf-8",
        parser(stdOut, stdErr) {
          return parsePullResult(stdOut, stdErr);
        },
        onError(result, _error, _done, fail) {
          const pullError = parsePullErrorResult(bufferToString(result.stdOut), bufferToString(result.stdErr));
          if (pullError) {
            return fail(new GitResponseError(pullError));
          }
          fail(_error);
        }
      };
    }
    var init_pull = __esm({
      "src/lib/tasks/pull.ts"() {
        init_git_response_error();
        init_parse_pull();
        init_utils();
      }
    });

    // src/lib/responses/GetRemoteSummary.ts
    function parseGetRemotes(text) {
      const remotes = {};
      forEach$1(text, ([name]) => remotes[name] = { name });
      return Object.values(remotes);
    }
    function parseGetRemotesVerbose(text) {
      const remotes = {};
      forEach$1(text, ([name, url, purpose]) => {
        if (!remotes.hasOwnProperty(name)) {
          remotes[name] = {
            name,
            refs: { fetch: "", push: "" }
          };
        }
        if (purpose && url) {
          remotes[name].refs[purpose.replace(/[^a-z]/g, "")] = url;
        }
      });
      return Object.values(remotes);
    }
    function forEach$1(text, handler) {
      forEachLineWithContent(text, (line) => handler(line.split(/\s+/)));
    }
    var init_GetRemoteSummary = __esm({
      "src/lib/responses/GetRemoteSummary.ts"() {
        init_utils();
      }
    });

    // src/lib/tasks/remote.ts
    var remote_exports = {};
    __export(remote_exports, {
      addRemoteTask: () => addRemoteTask,
      getRemotesTask: () => getRemotesTask,
      listRemotesTask: () => listRemotesTask,
      remoteTask: () => remoteTask,
      removeRemoteTask: () => removeRemoteTask
    });
    function addRemoteTask(remoteName, remoteRepo, customArgs = []) {
      return straightThroughStringTask(["remote", "add", ...customArgs, remoteName, remoteRepo]);
    }
    function getRemotesTask(verbose) {
      const commands = ["remote"];
      if (verbose) {
        commands.push("-v");
      }
      return {
        commands,
        format: "utf-8",
        parser: verbose ? parseGetRemotesVerbose : parseGetRemotes
      };
    }
    function listRemotesTask(customArgs = []) {
      const commands = [...customArgs];
      if (commands[0] !== "ls-remote") {
        commands.unshift("ls-remote");
      }
      return straightThroughStringTask(commands);
    }
    function remoteTask(customArgs = []) {
      const commands = [...customArgs];
      if (commands[0] !== "remote") {
        commands.unshift("remote");
      }
      return straightThroughStringTask(commands);
    }
    function removeRemoteTask(remoteName) {
      return straightThroughStringTask(["remote", "remove", remoteName]);
    }
    var init_remote = __esm({
      "src/lib/tasks/remote.ts"() {
        init_GetRemoteSummary();
        init_task();
      }
    });

    // src/lib/tasks/stash-list.ts
    var stash_list_exports = {};
    __export(stash_list_exports, {
      stashListTask: () => stashListTask
    });
    function stashListTask(opt = {}, customArgs) {
      const options = parseLogOptions(opt);
      const parser3 = createListLogSummaryParser(options.splitter, options.fields);
      return {
        commands: ["stash", "list", ...options.commands, ...customArgs],
        format: "utf-8",
        parser: parser3
      };
    }
    var init_stash_list = __esm({
      "src/lib/tasks/stash-list.ts"() {
        init_parse_list_log_summary();
        init_log();
      }
    });

    // src/lib/tasks/sub-module.ts
    var sub_module_exports = {};
    __export(sub_module_exports, {
      addSubModuleTask: () => addSubModuleTask,
      initSubModuleTask: () => initSubModuleTask,
      subModuleTask: () => subModuleTask,
      updateSubModuleTask: () => updateSubModuleTask
    });
    function addSubModuleTask(repo, path) {
      return subModuleTask(["add", repo, path]);
    }
    function initSubModuleTask(customArgs) {
      return subModuleTask(["init", ...customArgs]);
    }
    function subModuleTask(customArgs) {
      const commands = [...customArgs];
      if (commands[0] !== "submodule") {
        commands.unshift("submodule");
      }
      return straightThroughStringTask(commands);
    }
    function updateSubModuleTask(customArgs) {
      return subModuleTask(["update", ...customArgs]);
    }
    var init_sub_module = __esm({
      "src/lib/tasks/sub-module.ts"() {
        init_task();
      }
    });

    // src/lib/responses/TagList.ts
    function singleSorted(a, b) {
      const aIsNum = isNaN(a);
      const bIsNum = isNaN(b);
      if (aIsNum !== bIsNum) {
        return aIsNum ? 1 : -1;
      }
      return aIsNum ? sorted(a, b) : 0;
    }
    function sorted(a, b) {
      return a === b ? 0 : a > b ? 1 : -1;
    }
    function trimmed(input) {
      return input.trim();
    }
    function toNumber$4(input) {
      if (typeof input === "string") {
        return parseInt(input.replace(/^\D+/g, ""), 10) || 0;
      }
      return 0;
    }
    var TagList, parseTagList;
    var init_TagList = __esm({
      "src/lib/responses/TagList.ts"() {
        TagList = class {
          constructor(all, latest) {
            this.all = all;
            this.latest = latest;
          }
        };
        parseTagList = function(data, customSort = false) {
          const tags = data.split("\n").map(trimmed).filter(Boolean);
          if (!customSort) {
            tags.sort(function(tagA, tagB) {
              const partsA = tagA.split(".");
              const partsB = tagB.split(".");
              if (partsA.length === 1 || partsB.length === 1) {
                return singleSorted(toNumber$4(partsA[0]), toNumber$4(partsB[0]));
              }
              for (let i = 0, l = Math.max(partsA.length, partsB.length); i < l; i++) {
                const diff = sorted(toNumber$4(partsA[i]), toNumber$4(partsB[i]));
                if (diff) {
                  return diff;
                }
              }
              return 0;
            });
          }
          const latest = customSort ? tags[0] : [...tags].reverse().find((tag) => tag.indexOf(".") >= 0);
          return new TagList(tags, latest);
        };
      }
    });

    // src/lib/tasks/tag.ts
    var tag_exports = {};
    __export(tag_exports, {
      addAnnotatedTagTask: () => addAnnotatedTagTask,
      addTagTask: () => addTagTask,
      tagListTask: () => tagListTask
    });
    function tagListTask(customArgs = []) {
      const hasCustomSort = customArgs.some((option) => /^--sort=/.test(option));
      return {
        format: "utf-8",
        commands: ["tag", "-l", ...customArgs],
        parser(text) {
          return parseTagList(text, hasCustomSort);
        }
      };
    }
    function addTagTask(name) {
      return {
        format: "utf-8",
        commands: ["tag", name],
        parser() {
          return { name };
        }
      };
    }
    function addAnnotatedTagTask(name, tagMessage) {
      return {
        format: "utf-8",
        commands: ["tag", "-a", "-m", tagMessage, name],
        parser() {
          return { name };
        }
      };
    }
    var init_tag = __esm({
      "src/lib/tasks/tag.ts"() {
        init_TagList();
      }
    });

    // src/git.js
    var require_git = __commonJS({
      "src/git.js"(exports, module) {
        var { GitExecutor: GitExecutor2 } = (init_git_executor(), __toCommonJS(git_executor_exports));
        var { SimpleGitApi: SimpleGitApi2 } = (init_simple_git_api(), __toCommonJS(simple_git_api_exports));
        var { Scheduler: Scheduler2 } = (init_scheduler(), __toCommonJS(scheduler_exports));
        var { configurationErrorTask: configurationErrorTask2 } = (init_task(), __toCommonJS(task_exports));
        var {
          asArray: asArray2,
          filterArray: filterArray2,
          filterPrimitives: filterPrimitives2,
          filterString: filterString2,
          filterStringOrStringArray: filterStringOrStringArray2,
          filterType: filterType2,
          getTrailingOptions: getTrailingOptions2,
          trailingFunctionArgument: trailingFunctionArgument2,
          trailingOptionsArgument: trailingOptionsArgument2
        } = (init_utils(), __toCommonJS(utils_exports));
        var { applyPatchTask: applyPatchTask2 } = (init_apply_patch(), __toCommonJS(apply_patch_exports));
        var { branchTask: branchTask2, branchLocalTask: branchLocalTask2, deleteBranchesTask: deleteBranchesTask2, deleteBranchTask: deleteBranchTask2 } = (init_branch(), __toCommonJS(branch_exports));
        var { checkIgnoreTask: checkIgnoreTask2 } = (init_check_ignore(), __toCommonJS(check_ignore_exports));
        var { checkIsRepoTask: checkIsRepoTask2 } = (init_check_is_repo(), __toCommonJS(check_is_repo_exports));
        var { cloneTask: cloneTask2, cloneMirrorTask: cloneMirrorTask2 } = (init_clone(), __toCommonJS(clone_exports));
        var { cleanWithOptionsTask: cleanWithOptionsTask2, isCleanOptionsArray: isCleanOptionsArray2 } = (init_clean(), __toCommonJS(clean_exports));
        var { commitTask: commitTask2 } = (init_commit(), __toCommonJS(commit_exports));
        var { diffSummaryTask: diffSummaryTask2 } = (init_diff(), __toCommonJS(diff_exports));
        var { fetchTask: fetchTask2 } = (init_fetch(), __toCommonJS(fetch_exports));
        var { moveTask: moveTask2 } = (init_move(), __toCommonJS(move_exports));
        var { pullTask: pullTask2 } = (init_pull(), __toCommonJS(pull_exports));
        var { pushTagsTask: pushTagsTask2 } = (init_push(), __toCommonJS(push_exports));
        var { addRemoteTask: addRemoteTask2, getRemotesTask: getRemotesTask2, listRemotesTask: listRemotesTask2, remoteTask: remoteTask2, removeRemoteTask: removeRemoteTask2 } = (init_remote(), __toCommonJS(remote_exports));
        var { getResetMode: getResetMode2, resetTask: resetTask2 } = (init_reset(), __toCommonJS(reset_exports));
        var { stashListTask: stashListTask2 } = (init_stash_list(), __toCommonJS(stash_list_exports));
        var { addSubModuleTask: addSubModuleTask2, initSubModuleTask: initSubModuleTask2, subModuleTask: subModuleTask2, updateSubModuleTask: updateSubModuleTask2 } = (init_sub_module(), __toCommonJS(sub_module_exports));
        var { addAnnotatedTagTask: addAnnotatedTagTask2, addTagTask: addTagTask2, tagListTask: tagListTask2 } = (init_tag(), __toCommonJS(tag_exports));
        var { straightThroughBufferTask: straightThroughBufferTask2, straightThroughStringTask: straightThroughStringTask2 } = (init_task(), __toCommonJS(task_exports));
        function Git2(options, plugins) {
          this._executor = new GitExecutor2(options.binary, options.baseDir, new Scheduler2(options.maxConcurrentProcesses), plugins);
        }
        (Git2.prototype = Object.create(SimpleGitApi2.prototype)).constructor = Git2;
        Git2.prototype.customBinary = function(command) {
          this._executor.binary = command;
          return this;
        };
        Git2.prototype.env = function(name, value) {
          if (arguments.length === 1 && typeof name === "object") {
            this._executor.env = name;
          } else {
            (this._executor.env = this._executor.env || {})[name] = value;
          }
          return this;
        };
        Git2.prototype.stashList = function(options) {
          return this._runTask(stashListTask2(trailingOptionsArgument2(arguments) || {}, filterArray2(options) && options || []), trailingFunctionArgument2(arguments));
        };
        function createCloneTask(api, task, repoPath, localPath) {
          if (typeof repoPath !== "string") {
            return configurationErrorTask2(`git.${api}() requires a string 'repoPath'`);
          }
          return task(repoPath, filterType2(localPath, filterString2), getTrailingOptions2(arguments));
        }
        Git2.prototype.clone = function() {
          return this._runTask(createCloneTask("clone", cloneTask2, ...arguments), trailingFunctionArgument2(arguments));
        };
        Git2.prototype.mirror = function() {
          return this._runTask(createCloneTask("mirror", cloneMirrorTask2, ...arguments), trailingFunctionArgument2(arguments));
        };
        Git2.prototype.mv = function(from, to) {
          return this._runTask(moveTask2(from, to), trailingFunctionArgument2(arguments));
        };
        Git2.prototype.checkoutLatestTag = function(then) {
          var git = this;
          return this.pull(function() {
            git.tags(function(err, tags) {
              git.checkout(tags.latest, then);
            });
          });
        };
        Git2.prototype.commit = function(message, files, options, then) {
          const next = trailingFunctionArgument2(arguments);
          if (!filterStringOrStringArray2(message)) {
            return this._runTask(configurationErrorTask2("git.commit: requires the commit message to be supplied as a string/string[]"), next);
          }
          return this._runTask(commitTask2(asArray2(message), asArray2(filterType2(files, filterStringOrStringArray2, [])), [...filterType2(options, filterArray2, []), ...getTrailingOptions2(arguments, 0, true)]), next);
        };
        Git2.prototype.pull = function(remote, branch, options, then) {
          return this._runTask(pullTask2(filterType2(remote, filterString2), filterType2(branch, filterString2), getTrailingOptions2(arguments)), trailingFunctionArgument2(arguments));
        };
        Git2.prototype.fetch = function(remote, branch) {
          return this._runTask(fetchTask2(filterType2(remote, filterString2), filterType2(branch, filterString2), getTrailingOptions2(arguments)), trailingFunctionArgument2(arguments));
        };
        Git2.prototype.silent = function(silence) {
          console.warn("simple-git deprecation notice: git.silent: logging should be configured using the `debug` library / `DEBUG` environment variable, this will be an error in version 3");
          return this;
        };
        Git2.prototype.tags = function(options, then) {
          return this._runTask(tagListTask2(getTrailingOptions2(arguments)), trailingFunctionArgument2(arguments));
        };
        Git2.prototype.rebase = function() {
          return this._runTask(straightThroughStringTask2(["rebase", ...getTrailingOptions2(arguments)]), trailingFunctionArgument2(arguments));
        };
        Git2.prototype.reset = function(mode) {
          return this._runTask(resetTask2(getResetMode2(mode), getTrailingOptions2(arguments)), trailingFunctionArgument2(arguments));
        };
        Git2.prototype.revert = function(commit) {
          const next = trailingFunctionArgument2(arguments);
          if (typeof commit !== "string") {
            return this._runTask(configurationErrorTask2("Commit must be a string"), next);
          }
          return this._runTask(straightThroughStringTask2(["revert", ...getTrailingOptions2(arguments, 0, true), commit]), next);
        };
        Git2.prototype.addTag = function(name) {
          const task = typeof name === "string" ? addTagTask2(name) : configurationErrorTask2("Git.addTag requires a tag name");
          return this._runTask(task, trailingFunctionArgument2(arguments));
        };
        Git2.prototype.addAnnotatedTag = function(tagName, tagMessage) {
          return this._runTask(addAnnotatedTagTask2(tagName, tagMessage), trailingFunctionArgument2(arguments));
        };
        Git2.prototype.checkout = function() {
          const commands = ["checkout", ...getTrailingOptions2(arguments, true)];
          return this._runTask(straightThroughStringTask2(commands), trailingFunctionArgument2(arguments));
        };
        Git2.prototype.checkoutBranch = function(branchName, startPoint, then) {
          return this.checkout(["-b", branchName, startPoint], trailingFunctionArgument2(arguments));
        };
        Git2.prototype.checkoutLocalBranch = function(branchName, then) {
          return this.checkout(["-b", branchName], trailingFunctionArgument2(arguments));
        };
        Git2.prototype.deleteLocalBranch = function(branchName, forceDelete, then) {
          return this._runTask(deleteBranchTask2(branchName, typeof forceDelete === "boolean" ? forceDelete : false), trailingFunctionArgument2(arguments));
        };
        Git2.prototype.deleteLocalBranches = function(branchNames, forceDelete, then) {
          return this._runTask(deleteBranchesTask2(branchNames, typeof forceDelete === "boolean" ? forceDelete : false), trailingFunctionArgument2(arguments));
        };
        Git2.prototype.branch = function(options, then) {
          return this._runTask(branchTask2(getTrailingOptions2(arguments)), trailingFunctionArgument2(arguments));
        };
        Git2.prototype.branchLocal = function(then) {
          return this._runTask(branchLocalTask2(), trailingFunctionArgument2(arguments));
        };
        Git2.prototype.raw = function(commands) {
          const createRestCommands = !Array.isArray(commands);
          const command = [].slice.call(createRestCommands ? arguments : commands, 0);
          for (let i = 0; i < command.length && createRestCommands; i++) {
            if (!filterPrimitives2(command[i])) {
              command.splice(i, command.length - i);
              break;
            }
          }
          command.push(...getTrailingOptions2(arguments, 0, true));
          var next = trailingFunctionArgument2(arguments);
          if (!command.length) {
            return this._runTask(configurationErrorTask2("Raw: must supply one or more command to execute"), next);
          }
          return this._runTask(straightThroughStringTask2(command), next);
        };
        Git2.prototype.submoduleAdd = function(repo, path, then) {
          return this._runTask(addSubModuleTask2(repo, path), trailingFunctionArgument2(arguments));
        };
        Git2.prototype.submoduleUpdate = function(args, then) {
          return this._runTask(updateSubModuleTask2(getTrailingOptions2(arguments, true)), trailingFunctionArgument2(arguments));
        };
        Git2.prototype.submoduleInit = function(args, then) {
          return this._runTask(initSubModuleTask2(getTrailingOptions2(arguments, true)), trailingFunctionArgument2(arguments));
        };
        Git2.prototype.subModule = function(options, then) {
          return this._runTask(subModuleTask2(getTrailingOptions2(arguments)), trailingFunctionArgument2(arguments));
        };
        Git2.prototype.listRemote = function() {
          return this._runTask(listRemotesTask2(getTrailingOptions2(arguments)), trailingFunctionArgument2(arguments));
        };
        Git2.prototype.addRemote = function(remoteName, remoteRepo, then) {
          return this._runTask(addRemoteTask2(remoteName, remoteRepo, getTrailingOptions2(arguments)), trailingFunctionArgument2(arguments));
        };
        Git2.prototype.removeRemote = function(remoteName, then) {
          return this._runTask(removeRemoteTask2(remoteName), trailingFunctionArgument2(arguments));
        };
        Git2.prototype.getRemotes = function(verbose, then) {
          return this._runTask(getRemotesTask2(verbose === true), trailingFunctionArgument2(arguments));
        };
        Git2.prototype.remote = function(options, then) {
          return this._runTask(remoteTask2(getTrailingOptions2(arguments)), trailingFunctionArgument2(arguments));
        };
        Git2.prototype.tag = function(options, then) {
          const command = getTrailingOptions2(arguments);
          if (command[0] !== "tag") {
            command.unshift("tag");
          }
          return this._runTask(straightThroughStringTask2(command), trailingFunctionArgument2(arguments));
        };
        Git2.prototype.updateServerInfo = function(then) {
          return this._runTask(straightThroughStringTask2(["update-server-info"]), trailingFunctionArgument2(arguments));
        };
        Git2.prototype.pushTags = function(remote, then) {
          const task = pushTagsTask2({ remote: filterType2(remote, filterString2) }, getTrailingOptions2(arguments));
          return this._runTask(task, trailingFunctionArgument2(arguments));
        };
        Git2.prototype.rm = function(files) {
          return this._runTask(straightThroughStringTask2(["rm", "-f", ...asArray2(files)]), trailingFunctionArgument2(arguments));
        };
        Git2.prototype.rmKeepLocal = function(files) {
          return this._runTask(straightThroughStringTask2(["rm", "--cached", ...asArray2(files)]), trailingFunctionArgument2(arguments));
        };
        Git2.prototype.catFile = function(options, then) {
          return this._catFile("utf-8", arguments);
        };
        Git2.prototype.binaryCatFile = function() {
          return this._catFile("buffer", arguments);
        };
        Git2.prototype._catFile = function(format, args) {
          var handler = trailingFunctionArgument2(args);
          var command = ["cat-file"];
          var options = args[0];
          if (typeof options === "string") {
            return this._runTask(configurationErrorTask2("Git.catFile: options must be supplied as an array of strings"), handler);
          }
          if (Array.isArray(options)) {
            command.push.apply(command, options);
          }
          const task = format === "buffer" ? straightThroughBufferTask2(command) : straightThroughStringTask2(command);
          return this._runTask(task, handler);
        };
        Git2.prototype.diff = function(options, then) {
          const task = filterString2(options) ? configurationErrorTask2("git.diff: supplying options as a single string is no longer supported, switch to an array of strings") : straightThroughStringTask2(["diff", ...getTrailingOptions2(arguments)]);
          return this._runTask(task, trailingFunctionArgument2(arguments));
        };
        Git2.prototype.diffSummary = function() {
          return this._runTask(diffSummaryTask2(getTrailingOptions2(arguments, 1)), trailingFunctionArgument2(arguments));
        };
        Git2.prototype.applyPatch = function(patches) {
          const task = !filterStringOrStringArray2(patches) ? configurationErrorTask2(`git.applyPatch requires one or more string patches as the first argument`) : applyPatchTask2(asArray2(patches), getTrailingOptions2([].slice.call(arguments, 1)));
          return this._runTask(task, trailingFunctionArgument2(arguments));
        };
        Git2.prototype.revparse = function() {
          const commands = ["rev-parse", ...getTrailingOptions2(arguments, true)];
          return this._runTask(straightThroughStringTask2(commands, true), trailingFunctionArgument2(arguments));
        };
        Git2.prototype.show = function(options, then) {
          return this._runTask(straightThroughStringTask2(["show", ...getTrailingOptions2(arguments, 1)]), trailingFunctionArgument2(arguments));
        };
        Git2.prototype.clean = function(mode, options, then) {
          const usingCleanOptionsArray = isCleanOptionsArray2(mode);
          const cleanMode = usingCleanOptionsArray && mode.join("") || filterType2(mode, filterString2) || "";
          const customArgs = getTrailingOptions2([].slice.call(arguments, usingCleanOptionsArray ? 1 : 0));
          return this._runTask(cleanWithOptionsTask2(cleanMode, customArgs), trailingFunctionArgument2(arguments));
        };
        Git2.prototype.exec = function(then) {
          const task = {
            commands: [],
            format: "utf-8",
            parser() {
              if (typeof then === "function") {
                then();
              }
            }
          };
          return this._runTask(task);
        };
        Git2.prototype.clearQueue = function() {
          return this;
        };
        Git2.prototype.checkIgnore = function(pathnames, then) {
          return this._runTask(checkIgnoreTask2(asArray2(filterType2(pathnames, filterStringOrStringArray2, []))), trailingFunctionArgument2(arguments));
        };
        Git2.prototype.checkIsRepo = function(checkType, then) {
          return this._runTask(checkIsRepoTask2(filterType2(checkType, filterString2)), trailingFunctionArgument2(arguments));
        };
        module.exports = Git2;
      }
    });

    // src/lib/errors/git-construct-error.ts
    init_git_error();

    // src/lib/api.ts
    init_git_error();

    // src/lib/errors/git-plugin-error.ts
    init_git_error();

    // src/lib/api.ts
    init_git_response_error();
    init_task_configuration_error();
    init_check_is_repo();
    init_clean();
    init_config();
    init_grep();
    init_reset();

    // src/lib/plugins/command-config-prefixing-plugin.ts
    init_utils();

    // src/lib/plugins/completion-detection.plugin.ts
    init_utils();
    deferred_1().promise;

    // src/lib/plugins/error-detection.plugin.ts
    init_git_error();

    // src/lib/plugins/plugin-store.ts
    init_utils();

    // src/lib/plugins/progress-monitor-plugin.ts
    init_utils();

    // src/lib/plugins/spawn-options-plugin.ts
    init_utils();

    // src/lib/git-factory.ts
    init_utils();
    require_git();

    // src/lib/runners/promise-wrapped.ts
    init_git_response_error();

    var os$2 = require$$0__default$3["default"];

    function homedir() {
    	var env = process.env;
    	var home = env.HOME;
    	var user = env.LOGNAME || env.USER || env.LNAME || env.USERNAME;

    	if (process.platform === 'win32') {
    		return env.USERPROFILE || env.HOMEDRIVE + env.HOMEPATH || home || null;
    	}

    	if (process.platform === 'darwin') {
    		return home || (user ? '/Users/' + user : null);
    	}

    	if (process.platform === 'linux') {
    		return home || (process.getuid() === 0 ? '/root' : (user ? '/home/' + user : null));
    	}

    	return home || null;
    }

    var osHomedir = typeof os$2.homedir === 'function' ? os$2.homedir : homedir;

    osHomedir();

    var inquirer$2 = {exports: {}};

    var ansiStyles$3 = {exports: {}};

    var colorName$1 = {
    	"aliceblue": [240, 248, 255],
    	"antiquewhite": [250, 235, 215],
    	"aqua": [0, 255, 255],
    	"aquamarine": [127, 255, 212],
    	"azure": [240, 255, 255],
    	"beige": [245, 245, 220],
    	"bisque": [255, 228, 196],
    	"black": [0, 0, 0],
    	"blanchedalmond": [255, 235, 205],
    	"blue": [0, 0, 255],
    	"blueviolet": [138, 43, 226],
    	"brown": [165, 42, 42],
    	"burlywood": [222, 184, 135],
    	"cadetblue": [95, 158, 160],
    	"chartreuse": [127, 255, 0],
    	"chocolate": [210, 105, 30],
    	"coral": [255, 127, 80],
    	"cornflowerblue": [100, 149, 237],
    	"cornsilk": [255, 248, 220],
    	"crimson": [220, 20, 60],
    	"cyan": [0, 255, 255],
    	"darkblue": [0, 0, 139],
    	"darkcyan": [0, 139, 139],
    	"darkgoldenrod": [184, 134, 11],
    	"darkgray": [169, 169, 169],
    	"darkgreen": [0, 100, 0],
    	"darkgrey": [169, 169, 169],
    	"darkkhaki": [189, 183, 107],
    	"darkmagenta": [139, 0, 139],
    	"darkolivegreen": [85, 107, 47],
    	"darkorange": [255, 140, 0],
    	"darkorchid": [153, 50, 204],
    	"darkred": [139, 0, 0],
    	"darksalmon": [233, 150, 122],
    	"darkseagreen": [143, 188, 143],
    	"darkslateblue": [72, 61, 139],
    	"darkslategray": [47, 79, 79],
    	"darkslategrey": [47, 79, 79],
    	"darkturquoise": [0, 206, 209],
    	"darkviolet": [148, 0, 211],
    	"deeppink": [255, 20, 147],
    	"deepskyblue": [0, 191, 255],
    	"dimgray": [105, 105, 105],
    	"dimgrey": [105, 105, 105],
    	"dodgerblue": [30, 144, 255],
    	"firebrick": [178, 34, 34],
    	"floralwhite": [255, 250, 240],
    	"forestgreen": [34, 139, 34],
    	"fuchsia": [255, 0, 255],
    	"gainsboro": [220, 220, 220],
    	"ghostwhite": [248, 248, 255],
    	"gold": [255, 215, 0],
    	"goldenrod": [218, 165, 32],
    	"gray": [128, 128, 128],
    	"green": [0, 128, 0],
    	"greenyellow": [173, 255, 47],
    	"grey": [128, 128, 128],
    	"honeydew": [240, 255, 240],
    	"hotpink": [255, 105, 180],
    	"indianred": [205, 92, 92],
    	"indigo": [75, 0, 130],
    	"ivory": [255, 255, 240],
    	"khaki": [240, 230, 140],
    	"lavender": [230, 230, 250],
    	"lavenderblush": [255, 240, 245],
    	"lawngreen": [124, 252, 0],
    	"lemonchiffon": [255, 250, 205],
    	"lightblue": [173, 216, 230],
    	"lightcoral": [240, 128, 128],
    	"lightcyan": [224, 255, 255],
    	"lightgoldenrodyellow": [250, 250, 210],
    	"lightgray": [211, 211, 211],
    	"lightgreen": [144, 238, 144],
    	"lightgrey": [211, 211, 211],
    	"lightpink": [255, 182, 193],
    	"lightsalmon": [255, 160, 122],
    	"lightseagreen": [32, 178, 170],
    	"lightskyblue": [135, 206, 250],
    	"lightslategray": [119, 136, 153],
    	"lightslategrey": [119, 136, 153],
    	"lightsteelblue": [176, 196, 222],
    	"lightyellow": [255, 255, 224],
    	"lime": [0, 255, 0],
    	"limegreen": [50, 205, 50],
    	"linen": [250, 240, 230],
    	"magenta": [255, 0, 255],
    	"maroon": [128, 0, 0],
    	"mediumaquamarine": [102, 205, 170],
    	"mediumblue": [0, 0, 205],
    	"mediumorchid": [186, 85, 211],
    	"mediumpurple": [147, 112, 219],
    	"mediumseagreen": [60, 179, 113],
    	"mediumslateblue": [123, 104, 238],
    	"mediumspringgreen": [0, 250, 154],
    	"mediumturquoise": [72, 209, 204],
    	"mediumvioletred": [199, 21, 133],
    	"midnightblue": [25, 25, 112],
    	"mintcream": [245, 255, 250],
    	"mistyrose": [255, 228, 225],
    	"moccasin": [255, 228, 181],
    	"navajowhite": [255, 222, 173],
    	"navy": [0, 0, 128],
    	"oldlace": [253, 245, 230],
    	"olive": [128, 128, 0],
    	"olivedrab": [107, 142, 35],
    	"orange": [255, 165, 0],
    	"orangered": [255, 69, 0],
    	"orchid": [218, 112, 214],
    	"palegoldenrod": [238, 232, 170],
    	"palegreen": [152, 251, 152],
    	"paleturquoise": [175, 238, 238],
    	"palevioletred": [219, 112, 147],
    	"papayawhip": [255, 239, 213],
    	"peachpuff": [255, 218, 185],
    	"peru": [205, 133, 63],
    	"pink": [255, 192, 203],
    	"plum": [221, 160, 221],
    	"powderblue": [176, 224, 230],
    	"purple": [128, 0, 128],
    	"rebeccapurple": [102, 51, 153],
    	"red": [255, 0, 0],
    	"rosybrown": [188, 143, 143],
    	"royalblue": [65, 105, 225],
    	"saddlebrown": [139, 69, 19],
    	"salmon": [250, 128, 114],
    	"sandybrown": [244, 164, 96],
    	"seagreen": [46, 139, 87],
    	"seashell": [255, 245, 238],
    	"sienna": [160, 82, 45],
    	"silver": [192, 192, 192],
    	"skyblue": [135, 206, 235],
    	"slateblue": [106, 90, 205],
    	"slategray": [112, 128, 144],
    	"slategrey": [112, 128, 144],
    	"snow": [255, 250, 250],
    	"springgreen": [0, 255, 127],
    	"steelblue": [70, 130, 180],
    	"tan": [210, 180, 140],
    	"teal": [0, 128, 128],
    	"thistle": [216, 191, 216],
    	"tomato": [255, 99, 71],
    	"turquoise": [64, 224, 208],
    	"violet": [238, 130, 238],
    	"wheat": [245, 222, 179],
    	"white": [255, 255, 255],
    	"whitesmoke": [245, 245, 245],
    	"yellow": [255, 255, 0],
    	"yellowgreen": [154, 205, 50]
    };

    /* MIT license */

    /* eslint-disable no-mixed-operators */
    const cssKeywords$1 = colorName$1;

    // NOTE: conversions should only return primitive values (i.e. arrays, or
    //       values that give correct `typeof` results).
    //       do not use box values types (i.e. Number(), String(), etc.)

    const reverseKeywords$1 = {};
    for (const key of Object.keys(cssKeywords$1)) {
    	reverseKeywords$1[cssKeywords$1[key]] = key;
    }

    const convert$3 = {
    	rgb: {channels: 3, labels: 'rgb'},
    	hsl: {channels: 3, labels: 'hsl'},
    	hsv: {channels: 3, labels: 'hsv'},
    	hwb: {channels: 3, labels: 'hwb'},
    	cmyk: {channels: 4, labels: 'cmyk'},
    	xyz: {channels: 3, labels: 'xyz'},
    	lab: {channels: 3, labels: 'lab'},
    	lch: {channels: 3, labels: 'lch'},
    	hex: {channels: 1, labels: ['hex']},
    	keyword: {channels: 1, labels: ['keyword']},
    	ansi16: {channels: 1, labels: ['ansi16']},
    	ansi256: {channels: 1, labels: ['ansi256']},
    	hcg: {channels: 3, labels: ['h', 'c', 'g']},
    	apple: {channels: 3, labels: ['r16', 'g16', 'b16']},
    	gray: {channels: 1, labels: ['gray']}
    };

    var conversions$5 = convert$3;

    // Hide .channels and .labels properties
    for (const model of Object.keys(convert$3)) {
    	if (!('channels' in convert$3[model])) {
    		throw new Error('missing channels property: ' + model);
    	}

    	if (!('labels' in convert$3[model])) {
    		throw new Error('missing channel labels property: ' + model);
    	}

    	if (convert$3[model].labels.length !== convert$3[model].channels) {
    		throw new Error('channel and label counts mismatch: ' + model);
    	}

    	const {channels, labels} = convert$3[model];
    	delete convert$3[model].channels;
    	delete convert$3[model].labels;
    	Object.defineProperty(convert$3[model], 'channels', {value: channels});
    	Object.defineProperty(convert$3[model], 'labels', {value: labels});
    }

    convert$3.rgb.hsl = function (rgb) {
    	const r = rgb[0] / 255;
    	const g = rgb[1] / 255;
    	const b = rgb[2] / 255;
    	const min = Math.min(r, g, b);
    	const max = Math.max(r, g, b);
    	const delta = max - min;
    	let h;
    	let s;

    	if (max === min) {
    		h = 0;
    	} else if (r === max) {
    		h = (g - b) / delta;
    	} else if (g === max) {
    		h = 2 + (b - r) / delta;
    	} else if (b === max) {
    		h = 4 + (r - g) / delta;
    	}

    	h = Math.min(h * 60, 360);

    	if (h < 0) {
    		h += 360;
    	}

    	const l = (min + max) / 2;

    	if (max === min) {
    		s = 0;
    	} else if (l <= 0.5) {
    		s = delta / (max + min);
    	} else {
    		s = delta / (2 - max - min);
    	}

    	return [h, s * 100, l * 100];
    };

    convert$3.rgb.hsv = function (rgb) {
    	let rdif;
    	let gdif;
    	let bdif;
    	let h;
    	let s;

    	const r = rgb[0] / 255;
    	const g = rgb[1] / 255;
    	const b = rgb[2] / 255;
    	const v = Math.max(r, g, b);
    	const diff = v - Math.min(r, g, b);
    	const diffc = function (c) {
    		return (v - c) / 6 / diff + 1 / 2;
    	};

    	if (diff === 0) {
    		h = 0;
    		s = 0;
    	} else {
    		s = diff / v;
    		rdif = diffc(r);
    		gdif = diffc(g);
    		bdif = diffc(b);

    		if (r === v) {
    			h = bdif - gdif;
    		} else if (g === v) {
    			h = (1 / 3) + rdif - bdif;
    		} else if (b === v) {
    			h = (2 / 3) + gdif - rdif;
    		}

    		if (h < 0) {
    			h += 1;
    		} else if (h > 1) {
    			h -= 1;
    		}
    	}

    	return [
    		h * 360,
    		s * 100,
    		v * 100
    	];
    };

    convert$3.rgb.hwb = function (rgb) {
    	const r = rgb[0];
    	const g = rgb[1];
    	let b = rgb[2];
    	const h = convert$3.rgb.hsl(rgb)[0];
    	const w = 1 / 255 * Math.min(r, Math.min(g, b));

    	b = 1 - 1 / 255 * Math.max(r, Math.max(g, b));

    	return [h, w * 100, b * 100];
    };

    convert$3.rgb.cmyk = function (rgb) {
    	const r = rgb[0] / 255;
    	const g = rgb[1] / 255;
    	const b = rgb[2] / 255;

    	const k = Math.min(1 - r, 1 - g, 1 - b);
    	const c = (1 - r - k) / (1 - k) || 0;
    	const m = (1 - g - k) / (1 - k) || 0;
    	const y = (1 - b - k) / (1 - k) || 0;

    	return [c * 100, m * 100, y * 100, k * 100];
    };

    function comparativeDistance$1(x, y) {
    	/*
    		See https://en.m.wikipedia.org/wiki/Euclidean_distance#Squared_Euclidean_distance
    	*/
    	return (
    		((x[0] - y[0]) ** 2) +
    		((x[1] - y[1]) ** 2) +
    		((x[2] - y[2]) ** 2)
    	);
    }

    convert$3.rgb.keyword = function (rgb) {
    	const reversed = reverseKeywords$1[rgb];
    	if (reversed) {
    		return reversed;
    	}

    	let currentClosestDistance = Infinity;
    	let currentClosestKeyword;

    	for (const keyword of Object.keys(cssKeywords$1)) {
    		const value = cssKeywords$1[keyword];

    		// Compute comparative distance
    		const distance = comparativeDistance$1(rgb, value);

    		// Check if its less, if so set as closest
    		if (distance < currentClosestDistance) {
    			currentClosestDistance = distance;
    			currentClosestKeyword = keyword;
    		}
    	}

    	return currentClosestKeyword;
    };

    convert$3.keyword.rgb = function (keyword) {
    	return cssKeywords$1[keyword];
    };

    convert$3.rgb.xyz = function (rgb) {
    	let r = rgb[0] / 255;
    	let g = rgb[1] / 255;
    	let b = rgb[2] / 255;

    	// Assume sRGB
    	r = r > 0.04045 ? (((r + 0.055) / 1.055) ** 2.4) : (r / 12.92);
    	g = g > 0.04045 ? (((g + 0.055) / 1.055) ** 2.4) : (g / 12.92);
    	b = b > 0.04045 ? (((b + 0.055) / 1.055) ** 2.4) : (b / 12.92);

    	const x = (r * 0.4124) + (g * 0.3576) + (b * 0.1805);
    	const y = (r * 0.2126) + (g * 0.7152) + (b * 0.0722);
    	const z = (r * 0.0193) + (g * 0.1192) + (b * 0.9505);

    	return [x * 100, y * 100, z * 100];
    };

    convert$3.rgb.lab = function (rgb) {
    	const xyz = convert$3.rgb.xyz(rgb);
    	let x = xyz[0];
    	let y = xyz[1];
    	let z = xyz[2];

    	x /= 95.047;
    	y /= 100;
    	z /= 108.883;

    	x = x > 0.008856 ? (x ** (1 / 3)) : (7.787 * x) + (16 / 116);
    	y = y > 0.008856 ? (y ** (1 / 3)) : (7.787 * y) + (16 / 116);
    	z = z > 0.008856 ? (z ** (1 / 3)) : (7.787 * z) + (16 / 116);

    	const l = (116 * y) - 16;
    	const a = 500 * (x - y);
    	const b = 200 * (y - z);

    	return [l, a, b];
    };

    convert$3.hsl.rgb = function (hsl) {
    	const h = hsl[0] / 360;
    	const s = hsl[1] / 100;
    	const l = hsl[2] / 100;
    	let t2;
    	let t3;
    	let val;

    	if (s === 0) {
    		val = l * 255;
    		return [val, val, val];
    	}

    	if (l < 0.5) {
    		t2 = l * (1 + s);
    	} else {
    		t2 = l + s - l * s;
    	}

    	const t1 = 2 * l - t2;

    	const rgb = [0, 0, 0];
    	for (let i = 0; i < 3; i++) {
    		t3 = h + 1 / 3 * -(i - 1);
    		if (t3 < 0) {
    			t3++;
    		}

    		if (t3 > 1) {
    			t3--;
    		}

    		if (6 * t3 < 1) {
    			val = t1 + (t2 - t1) * 6 * t3;
    		} else if (2 * t3 < 1) {
    			val = t2;
    		} else if (3 * t3 < 2) {
    			val = t1 + (t2 - t1) * (2 / 3 - t3) * 6;
    		} else {
    			val = t1;
    		}

    		rgb[i] = val * 255;
    	}

    	return rgb;
    };

    convert$3.hsl.hsv = function (hsl) {
    	const h = hsl[0];
    	let s = hsl[1] / 100;
    	let l = hsl[2] / 100;
    	let smin = s;
    	const lmin = Math.max(l, 0.01);

    	l *= 2;
    	s *= (l <= 1) ? l : 2 - l;
    	smin *= lmin <= 1 ? lmin : 2 - lmin;
    	const v = (l + s) / 2;
    	const sv = l === 0 ? (2 * smin) / (lmin + smin) : (2 * s) / (l + s);

    	return [h, sv * 100, v * 100];
    };

    convert$3.hsv.rgb = function (hsv) {
    	const h = hsv[0] / 60;
    	const s = hsv[1] / 100;
    	let v = hsv[2] / 100;
    	const hi = Math.floor(h) % 6;

    	const f = h - Math.floor(h);
    	const p = 255 * v * (1 - s);
    	const q = 255 * v * (1 - (s * f));
    	const t = 255 * v * (1 - (s * (1 - f)));
    	v *= 255;

    	switch (hi) {
    		case 0:
    			return [v, t, p];
    		case 1:
    			return [q, v, p];
    		case 2:
    			return [p, v, t];
    		case 3:
    			return [p, q, v];
    		case 4:
    			return [t, p, v];
    		case 5:
    			return [v, p, q];
    	}
    };

    convert$3.hsv.hsl = function (hsv) {
    	const h = hsv[0];
    	const s = hsv[1] / 100;
    	const v = hsv[2] / 100;
    	const vmin = Math.max(v, 0.01);
    	let sl;
    	let l;

    	l = (2 - s) * v;
    	const lmin = (2 - s) * vmin;
    	sl = s * vmin;
    	sl /= (lmin <= 1) ? lmin : 2 - lmin;
    	sl = sl || 0;
    	l /= 2;

    	return [h, sl * 100, l * 100];
    };

    // http://dev.w3.org/csswg/css-color/#hwb-to-rgb
    convert$3.hwb.rgb = function (hwb) {
    	const h = hwb[0] / 360;
    	let wh = hwb[1] / 100;
    	let bl = hwb[2] / 100;
    	const ratio = wh + bl;
    	let f;

    	// Wh + bl cant be > 1
    	if (ratio > 1) {
    		wh /= ratio;
    		bl /= ratio;
    	}

    	const i = Math.floor(6 * h);
    	const v = 1 - bl;
    	f = 6 * h - i;

    	if ((i & 0x01) !== 0) {
    		f = 1 - f;
    	}

    	const n = wh + f * (v - wh); // Linear interpolation

    	let r;
    	let g;
    	let b;
    	/* eslint-disable max-statements-per-line,no-multi-spaces */
    	switch (i) {
    		default:
    		case 6:
    		case 0: r = v;  g = n;  b = wh; break;
    		case 1: r = n;  g = v;  b = wh; break;
    		case 2: r = wh; g = v;  b = n; break;
    		case 3: r = wh; g = n;  b = v; break;
    		case 4: r = n;  g = wh; b = v; break;
    		case 5: r = v;  g = wh; b = n; break;
    	}
    	/* eslint-enable max-statements-per-line,no-multi-spaces */

    	return [r * 255, g * 255, b * 255];
    };

    convert$3.cmyk.rgb = function (cmyk) {
    	const c = cmyk[0] / 100;
    	const m = cmyk[1] / 100;
    	const y = cmyk[2] / 100;
    	const k = cmyk[3] / 100;

    	const r = 1 - Math.min(1, c * (1 - k) + k);
    	const g = 1 - Math.min(1, m * (1 - k) + k);
    	const b = 1 - Math.min(1, y * (1 - k) + k);

    	return [r * 255, g * 255, b * 255];
    };

    convert$3.xyz.rgb = function (xyz) {
    	const x = xyz[0] / 100;
    	const y = xyz[1] / 100;
    	const z = xyz[2] / 100;
    	let r;
    	let g;
    	let b;

    	r = (x * 3.2406) + (y * -1.5372) + (z * -0.4986);
    	g = (x * -0.9689) + (y * 1.8758) + (z * 0.0415);
    	b = (x * 0.0557) + (y * -0.2040) + (z * 1.0570);

    	// Assume sRGB
    	r = r > 0.0031308
    		? ((1.055 * (r ** (1.0 / 2.4))) - 0.055)
    		: r * 12.92;

    	g = g > 0.0031308
    		? ((1.055 * (g ** (1.0 / 2.4))) - 0.055)
    		: g * 12.92;

    	b = b > 0.0031308
    		? ((1.055 * (b ** (1.0 / 2.4))) - 0.055)
    		: b * 12.92;

    	r = Math.min(Math.max(0, r), 1);
    	g = Math.min(Math.max(0, g), 1);
    	b = Math.min(Math.max(0, b), 1);

    	return [r * 255, g * 255, b * 255];
    };

    convert$3.xyz.lab = function (xyz) {
    	let x = xyz[0];
    	let y = xyz[1];
    	let z = xyz[2];

    	x /= 95.047;
    	y /= 100;
    	z /= 108.883;

    	x = x > 0.008856 ? (x ** (1 / 3)) : (7.787 * x) + (16 / 116);
    	y = y > 0.008856 ? (y ** (1 / 3)) : (7.787 * y) + (16 / 116);
    	z = z > 0.008856 ? (z ** (1 / 3)) : (7.787 * z) + (16 / 116);

    	const l = (116 * y) - 16;
    	const a = 500 * (x - y);
    	const b = 200 * (y - z);

    	return [l, a, b];
    };

    convert$3.lab.xyz = function (lab) {
    	const l = lab[0];
    	const a = lab[1];
    	const b = lab[2];
    	let x;
    	let y;
    	let z;

    	y = (l + 16) / 116;
    	x = a / 500 + y;
    	z = y - b / 200;

    	const y2 = y ** 3;
    	const x2 = x ** 3;
    	const z2 = z ** 3;
    	y = y2 > 0.008856 ? y2 : (y - 16 / 116) / 7.787;
    	x = x2 > 0.008856 ? x2 : (x - 16 / 116) / 7.787;
    	z = z2 > 0.008856 ? z2 : (z - 16 / 116) / 7.787;

    	x *= 95.047;
    	y *= 100;
    	z *= 108.883;

    	return [x, y, z];
    };

    convert$3.lab.lch = function (lab) {
    	const l = lab[0];
    	const a = lab[1];
    	const b = lab[2];
    	let h;

    	const hr = Math.atan2(b, a);
    	h = hr * 360 / 2 / Math.PI;

    	if (h < 0) {
    		h += 360;
    	}

    	const c = Math.sqrt(a * a + b * b);

    	return [l, c, h];
    };

    convert$3.lch.lab = function (lch) {
    	const l = lch[0];
    	const c = lch[1];
    	const h = lch[2];

    	const hr = h / 360 * 2 * Math.PI;
    	const a = c * Math.cos(hr);
    	const b = c * Math.sin(hr);

    	return [l, a, b];
    };

    convert$3.rgb.ansi16 = function (args, saturation = null) {
    	const [r, g, b] = args;
    	let value = saturation === null ? convert$3.rgb.hsv(args)[2] : saturation; // Hsv -> ansi16 optimization

    	value = Math.round(value / 50);

    	if (value === 0) {
    		return 30;
    	}

    	let ansi = 30
    		+ ((Math.round(b / 255) << 2)
    		| (Math.round(g / 255) << 1)
    		| Math.round(r / 255));

    	if (value === 2) {
    		ansi += 60;
    	}

    	return ansi;
    };

    convert$3.hsv.ansi16 = function (args) {
    	// Optimization here; we already know the value and don't need to get
    	// it converted for us.
    	return convert$3.rgb.ansi16(convert$3.hsv.rgb(args), args[2]);
    };

    convert$3.rgb.ansi256 = function (args) {
    	const r = args[0];
    	const g = args[1];
    	const b = args[2];

    	// We use the extended greyscale palette here, with the exception of
    	// black and white. normal palette only has 4 greyscale shades.
    	if (r === g && g === b) {
    		if (r < 8) {
    			return 16;
    		}

    		if (r > 248) {
    			return 231;
    		}

    		return Math.round(((r - 8) / 247) * 24) + 232;
    	}

    	const ansi = 16
    		+ (36 * Math.round(r / 255 * 5))
    		+ (6 * Math.round(g / 255 * 5))
    		+ Math.round(b / 255 * 5);

    	return ansi;
    };

    convert$3.ansi16.rgb = function (args) {
    	let color = args % 10;

    	// Handle greyscale
    	if (color === 0 || color === 7) {
    		if (args > 50) {
    			color += 3.5;
    		}

    		color = color / 10.5 * 255;

    		return [color, color, color];
    	}

    	const mult = (~~(args > 50) + 1) * 0.5;
    	const r = ((color & 1) * mult) * 255;
    	const g = (((color >> 1) & 1) * mult) * 255;
    	const b = (((color >> 2) & 1) * mult) * 255;

    	return [r, g, b];
    };

    convert$3.ansi256.rgb = function (args) {
    	// Handle greyscale
    	if (args >= 232) {
    		const c = (args - 232) * 10 + 8;
    		return [c, c, c];
    	}

    	args -= 16;

    	let rem;
    	const r = Math.floor(args / 36) / 5 * 255;
    	const g = Math.floor((rem = args % 36) / 6) / 5 * 255;
    	const b = (rem % 6) / 5 * 255;

    	return [r, g, b];
    };

    convert$3.rgb.hex = function (args) {
    	const integer = ((Math.round(args[0]) & 0xFF) << 16)
    		+ ((Math.round(args[1]) & 0xFF) << 8)
    		+ (Math.round(args[2]) & 0xFF);

    	const string = integer.toString(16).toUpperCase();
    	return '000000'.substring(string.length) + string;
    };

    convert$3.hex.rgb = function (args) {
    	const match = args.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);
    	if (!match) {
    		return [0, 0, 0];
    	}

    	let colorString = match[0];

    	if (match[0].length === 3) {
    		colorString = colorString.split('').map(char => {
    			return char + char;
    		}).join('');
    	}

    	const integer = parseInt(colorString, 16);
    	const r = (integer >> 16) & 0xFF;
    	const g = (integer >> 8) & 0xFF;
    	const b = integer & 0xFF;

    	return [r, g, b];
    };

    convert$3.rgb.hcg = function (rgb) {
    	const r = rgb[0] / 255;
    	const g = rgb[1] / 255;
    	const b = rgb[2] / 255;
    	const max = Math.max(Math.max(r, g), b);
    	const min = Math.min(Math.min(r, g), b);
    	const chroma = (max - min);
    	let grayscale;
    	let hue;

    	if (chroma < 1) {
    		grayscale = min / (1 - chroma);
    	} else {
    		grayscale = 0;
    	}

    	if (chroma <= 0) {
    		hue = 0;
    	} else
    	if (max === r) {
    		hue = ((g - b) / chroma) % 6;
    	} else
    	if (max === g) {
    		hue = 2 + (b - r) / chroma;
    	} else {
    		hue = 4 + (r - g) / chroma;
    	}

    	hue /= 6;
    	hue %= 1;

    	return [hue * 360, chroma * 100, grayscale * 100];
    };

    convert$3.hsl.hcg = function (hsl) {
    	const s = hsl[1] / 100;
    	const l = hsl[2] / 100;

    	const c = l < 0.5 ? (2.0 * s * l) : (2.0 * s * (1.0 - l));

    	let f = 0;
    	if (c < 1.0) {
    		f = (l - 0.5 * c) / (1.0 - c);
    	}

    	return [hsl[0], c * 100, f * 100];
    };

    convert$3.hsv.hcg = function (hsv) {
    	const s = hsv[1] / 100;
    	const v = hsv[2] / 100;

    	const c = s * v;
    	let f = 0;

    	if (c < 1.0) {
    		f = (v - c) / (1 - c);
    	}

    	return [hsv[0], c * 100, f * 100];
    };

    convert$3.hcg.rgb = function (hcg) {
    	const h = hcg[0] / 360;
    	const c = hcg[1] / 100;
    	const g = hcg[2] / 100;

    	if (c === 0.0) {
    		return [g * 255, g * 255, g * 255];
    	}

    	const pure = [0, 0, 0];
    	const hi = (h % 1) * 6;
    	const v = hi % 1;
    	const w = 1 - v;
    	let mg = 0;

    	/* eslint-disable max-statements-per-line */
    	switch (Math.floor(hi)) {
    		case 0:
    			pure[0] = 1; pure[1] = v; pure[2] = 0; break;
    		case 1:
    			pure[0] = w; pure[1] = 1; pure[2] = 0; break;
    		case 2:
    			pure[0] = 0; pure[1] = 1; pure[2] = v; break;
    		case 3:
    			pure[0] = 0; pure[1] = w; pure[2] = 1; break;
    		case 4:
    			pure[0] = v; pure[1] = 0; pure[2] = 1; break;
    		default:
    			pure[0] = 1; pure[1] = 0; pure[2] = w;
    	}
    	/* eslint-enable max-statements-per-line */

    	mg = (1.0 - c) * g;

    	return [
    		(c * pure[0] + mg) * 255,
    		(c * pure[1] + mg) * 255,
    		(c * pure[2] + mg) * 255
    	];
    };

    convert$3.hcg.hsv = function (hcg) {
    	const c = hcg[1] / 100;
    	const g = hcg[2] / 100;

    	const v = c + g * (1.0 - c);
    	let f = 0;

    	if (v > 0.0) {
    		f = c / v;
    	}

    	return [hcg[0], f * 100, v * 100];
    };

    convert$3.hcg.hsl = function (hcg) {
    	const c = hcg[1] / 100;
    	const g = hcg[2] / 100;

    	const l = g * (1.0 - c) + 0.5 * c;
    	let s = 0;

    	if (l > 0.0 && l < 0.5) {
    		s = c / (2 * l);
    	} else
    	if (l >= 0.5 && l < 1.0) {
    		s = c / (2 * (1 - l));
    	}

    	return [hcg[0], s * 100, l * 100];
    };

    convert$3.hcg.hwb = function (hcg) {
    	const c = hcg[1] / 100;
    	const g = hcg[2] / 100;
    	const v = c + g * (1.0 - c);
    	return [hcg[0], (v - c) * 100, (1 - v) * 100];
    };

    convert$3.hwb.hcg = function (hwb) {
    	const w = hwb[1] / 100;
    	const b = hwb[2] / 100;
    	const v = 1 - b;
    	const c = v - w;
    	let g = 0;

    	if (c < 1) {
    		g = (v - c) / (1 - c);
    	}

    	return [hwb[0], c * 100, g * 100];
    };

    convert$3.apple.rgb = function (apple) {
    	return [(apple[0] / 65535) * 255, (apple[1] / 65535) * 255, (apple[2] / 65535) * 255];
    };

    convert$3.rgb.apple = function (rgb) {
    	return [(rgb[0] / 255) * 65535, (rgb[1] / 255) * 65535, (rgb[2] / 255) * 65535];
    };

    convert$3.gray.rgb = function (args) {
    	return [args[0] / 100 * 255, args[0] / 100 * 255, args[0] / 100 * 255];
    };

    convert$3.gray.hsl = function (args) {
    	return [0, 0, args[0]];
    };

    convert$3.gray.hsv = convert$3.gray.hsl;

    convert$3.gray.hwb = function (gray) {
    	return [0, 100, gray[0]];
    };

    convert$3.gray.cmyk = function (gray) {
    	return [0, 0, 0, gray[0]];
    };

    convert$3.gray.lab = function (gray) {
    	return [gray[0], 0, 0];
    };

    convert$3.gray.hex = function (gray) {
    	const val = Math.round(gray[0] / 100 * 255) & 0xFF;
    	const integer = (val << 16) + (val << 8) + val;

    	const string = integer.toString(16).toUpperCase();
    	return '000000'.substring(string.length) + string;
    };

    convert$3.rgb.gray = function (rgb) {
    	const val = (rgb[0] + rgb[1] + rgb[2]) / 3;
    	return [val / 255 * 100];
    };

    const conversions$4 = conversions$5;

    /*
    	This function routes a model to all other models.

    	all functions that are routed have a property `.conversion` attached
    	to the returned synthetic function. This property is an array
    	of strings, each with the steps in between the 'from' and 'to'
    	color models (inclusive).

    	conversions that are not possible simply are not included.
    */

    function buildGraph$1() {
    	const graph = {};
    	// https://jsperf.com/object-keys-vs-for-in-with-closure/3
    	const models = Object.keys(conversions$4);

    	for (let len = models.length, i = 0; i < len; i++) {
    		graph[models[i]] = {
    			// http://jsperf.com/1-vs-infinity
    			// micro-opt, but this is simple.
    			distance: -1,
    			parent: null
    		};
    	}

    	return graph;
    }

    // https://en.wikipedia.org/wiki/Breadth-first_search
    function deriveBFS$1(fromModel) {
    	const graph = buildGraph$1();
    	const queue = [fromModel]; // Unshift -> queue -> pop

    	graph[fromModel].distance = 0;

    	while (queue.length) {
    		const current = queue.pop();
    		const adjacents = Object.keys(conversions$4[current]);

    		for (let len = adjacents.length, i = 0; i < len; i++) {
    			const adjacent = adjacents[i];
    			const node = graph[adjacent];

    			if (node.distance === -1) {
    				node.distance = graph[current].distance + 1;
    				node.parent = current;
    				queue.unshift(adjacent);
    			}
    		}
    	}

    	return graph;
    }

    function link$1(from, to) {
    	return function (args) {
    		return to(from(args));
    	};
    }

    function wrapConversion$1(toModel, graph) {
    	const path = [graph[toModel].parent, toModel];
    	let fn = conversions$4[graph[toModel].parent][toModel];

    	let cur = graph[toModel].parent;
    	while (graph[cur].parent) {
    		path.unshift(graph[cur].parent);
    		fn = link$1(conversions$4[graph[cur].parent][cur], fn);
    		cur = graph[cur].parent;
    	}

    	fn.conversion = path;
    	return fn;
    }

    var route$3 = function (fromModel) {
    	const graph = deriveBFS$1(fromModel);
    	const conversion = {};

    	const models = Object.keys(graph);
    	for (let len = models.length, i = 0; i < len; i++) {
    		const toModel = models[i];
    		const node = graph[toModel];

    		if (node.parent === null) {
    			// No possible conversion, or this node is the source model.
    			continue;
    		}

    		conversion[toModel] = wrapConversion$1(toModel, graph);
    	}

    	return conversion;
    };

    const conversions$3 = conversions$5;
    const route$2 = route$3;

    const convert$2 = {};

    const models$1 = Object.keys(conversions$3);

    function wrapRaw$1(fn) {
    	const wrappedFn = function (...args) {
    		const arg0 = args[0];
    		if (arg0 === undefined || arg0 === null) {
    			return arg0;
    		}

    		if (arg0.length > 1) {
    			args = arg0;
    		}

    		return fn(args);
    	};

    	// Preserve .conversion property if there is one
    	if ('conversion' in fn) {
    		wrappedFn.conversion = fn.conversion;
    	}

    	return wrappedFn;
    }

    function wrapRounded$1(fn) {
    	const wrappedFn = function (...args) {
    		const arg0 = args[0];

    		if (arg0 === undefined || arg0 === null) {
    			return arg0;
    		}

    		if (arg0.length > 1) {
    			args = arg0;
    		}

    		const result = fn(args);

    		// We're assuming the result is an array here.
    		// see notice in conversions.js; don't use box types
    		// in conversion functions.
    		if (typeof result === 'object') {
    			for (let len = result.length, i = 0; i < len; i++) {
    				result[i] = Math.round(result[i]);
    			}
    		}

    		return result;
    	};

    	// Preserve .conversion property if there is one
    	if ('conversion' in fn) {
    		wrappedFn.conversion = fn.conversion;
    	}

    	return wrappedFn;
    }

    models$1.forEach(fromModel => {
    	convert$2[fromModel] = {};

    	Object.defineProperty(convert$2[fromModel], 'channels', {value: conversions$3[fromModel].channels});
    	Object.defineProperty(convert$2[fromModel], 'labels', {value: conversions$3[fromModel].labels});

    	const routes = route$2(fromModel);
    	const routeModels = Object.keys(routes);

    	routeModels.forEach(toModel => {
    		const fn = routes[toModel];

    		convert$2[fromModel][toModel] = wrapRounded$1(fn);
    		convert$2[fromModel][toModel].raw = wrapRaw$1(fn);
    	});
    });

    var colorConvert$1 = convert$2;

    (function (module) {

    const wrapAnsi16 = (fn, offset) => (...args) => {
    	const code = fn(...args);
    	return `\u001B[${code + offset}m`;
    };

    const wrapAnsi256 = (fn, offset) => (...args) => {
    	const code = fn(...args);
    	return `\u001B[${38 + offset};5;${code}m`;
    };

    const wrapAnsi16m = (fn, offset) => (...args) => {
    	const rgb = fn(...args);
    	return `\u001B[${38 + offset};2;${rgb[0]};${rgb[1]};${rgb[2]}m`;
    };

    const ansi2ansi = n => n;
    const rgb2rgb = (r, g, b) => [r, g, b];

    const setLazyProperty = (object, property, get) => {
    	Object.defineProperty(object, property, {
    		get: () => {
    			const value = get();

    			Object.defineProperty(object, property, {
    				value,
    				enumerable: true,
    				configurable: true
    			});

    			return value;
    		},
    		enumerable: true,
    		configurable: true
    	});
    };

    /** @type {typeof import('color-convert')} */
    let colorConvert;
    const makeDynamicStyles = (wrap, targetSpace, identity, isBackground) => {
    	if (colorConvert === undefined) {
    		colorConvert = colorConvert$1;
    	}

    	const offset = isBackground ? 10 : 0;
    	const styles = {};

    	for (const [sourceSpace, suite] of Object.entries(colorConvert)) {
    		const name = sourceSpace === 'ansi16' ? 'ansi' : sourceSpace;
    		if (sourceSpace === targetSpace) {
    			styles[name] = wrap(identity, offset);
    		} else if (typeof suite === 'object') {
    			styles[name] = wrap(suite[targetSpace], offset);
    		}
    	}

    	return styles;
    };

    function assembleStyles() {
    	const codes = new Map();
    	const styles = {
    		modifier: {
    			reset: [0, 0],
    			// 21 isn't widely supported and 22 does the same thing
    			bold: [1, 22],
    			dim: [2, 22],
    			italic: [3, 23],
    			underline: [4, 24],
    			inverse: [7, 27],
    			hidden: [8, 28],
    			strikethrough: [9, 29]
    		},
    		color: {
    			black: [30, 39],
    			red: [31, 39],
    			green: [32, 39],
    			yellow: [33, 39],
    			blue: [34, 39],
    			magenta: [35, 39],
    			cyan: [36, 39],
    			white: [37, 39],

    			// Bright color
    			blackBright: [90, 39],
    			redBright: [91, 39],
    			greenBright: [92, 39],
    			yellowBright: [93, 39],
    			blueBright: [94, 39],
    			magentaBright: [95, 39],
    			cyanBright: [96, 39],
    			whiteBright: [97, 39]
    		},
    		bgColor: {
    			bgBlack: [40, 49],
    			bgRed: [41, 49],
    			bgGreen: [42, 49],
    			bgYellow: [43, 49],
    			bgBlue: [44, 49],
    			bgMagenta: [45, 49],
    			bgCyan: [46, 49],
    			bgWhite: [47, 49],

    			// Bright color
    			bgBlackBright: [100, 49],
    			bgRedBright: [101, 49],
    			bgGreenBright: [102, 49],
    			bgYellowBright: [103, 49],
    			bgBlueBright: [104, 49],
    			bgMagentaBright: [105, 49],
    			bgCyanBright: [106, 49],
    			bgWhiteBright: [107, 49]
    		}
    	};

    	// Alias bright black as gray (and grey)
    	styles.color.gray = styles.color.blackBright;
    	styles.bgColor.bgGray = styles.bgColor.bgBlackBright;
    	styles.color.grey = styles.color.blackBright;
    	styles.bgColor.bgGrey = styles.bgColor.bgBlackBright;

    	for (const [groupName, group] of Object.entries(styles)) {
    		for (const [styleName, style] of Object.entries(group)) {
    			styles[styleName] = {
    				open: `\u001B[${style[0]}m`,
    				close: `\u001B[${style[1]}m`
    			};

    			group[styleName] = styles[styleName];

    			codes.set(style[0], style[1]);
    		}

    		Object.defineProperty(styles, groupName, {
    			value: group,
    			enumerable: false
    		});
    	}

    	Object.defineProperty(styles, 'codes', {
    		value: codes,
    		enumerable: false
    	});

    	styles.color.close = '\u001B[39m';
    	styles.bgColor.close = '\u001B[49m';

    	setLazyProperty(styles.color, 'ansi', () => makeDynamicStyles(wrapAnsi16, 'ansi16', ansi2ansi, false));
    	setLazyProperty(styles.color, 'ansi256', () => makeDynamicStyles(wrapAnsi256, 'ansi256', ansi2ansi, false));
    	setLazyProperty(styles.color, 'ansi16m', () => makeDynamicStyles(wrapAnsi16m, 'rgb', rgb2rgb, false));
    	setLazyProperty(styles.bgColor, 'ansi', () => makeDynamicStyles(wrapAnsi16, 'ansi16', ansi2ansi, true));
    	setLazyProperty(styles.bgColor, 'ansi256', () => makeDynamicStyles(wrapAnsi256, 'ansi256', ansi2ansi, true));
    	setLazyProperty(styles.bgColor, 'ansi16m', () => makeDynamicStyles(wrapAnsi16m, 'rgb', rgb2rgb, true));

    	return styles;
    }

    // Make the export immutable
    Object.defineProperty(module, 'exports', {
    	enumerable: true,
    	get: assembleStyles
    });
    }(ansiStyles$3));

    var hasFlag$4 = (flag, argv = process.argv) => {
    	const prefix = flag.startsWith('-') ? '' : (flag.length === 1 ? '-' : '--');
    	const position = argv.indexOf(prefix + flag);
    	const terminatorPosition = argv.indexOf('--');
    	return position !== -1 && (terminatorPosition === -1 || position < terminatorPosition);
    };

    const os$1 = require$$0__default$3["default"];
    const tty$1 = require$$0__default$8["default"];
    const hasFlag$3 = hasFlag$4;

    const {env: env$1} = process;

    let forceColor$1;
    if (hasFlag$3('no-color') ||
    	hasFlag$3('no-colors') ||
    	hasFlag$3('color=false') ||
    	hasFlag$3('color=never')) {
    	forceColor$1 = 0;
    } else if (hasFlag$3('color') ||
    	hasFlag$3('colors') ||
    	hasFlag$3('color=true') ||
    	hasFlag$3('color=always')) {
    	forceColor$1 = 1;
    }

    if ('FORCE_COLOR' in env$1) {
    	if (env$1.FORCE_COLOR === 'true') {
    		forceColor$1 = 1;
    	} else if (env$1.FORCE_COLOR === 'false') {
    		forceColor$1 = 0;
    	} else {
    		forceColor$1 = env$1.FORCE_COLOR.length === 0 ? 1 : Math.min(parseInt(env$1.FORCE_COLOR, 10), 3);
    	}
    }

    function translateLevel$1(level) {
    	if (level === 0) {
    		return false;
    	}

    	return {
    		level,
    		hasBasic: true,
    		has256: level >= 2,
    		has16m: level >= 3
    	};
    }

    function supportsColor$2(haveStream, streamIsTTY) {
    	if (forceColor$1 === 0) {
    		return 0;
    	}

    	if (hasFlag$3('color=16m') ||
    		hasFlag$3('color=full') ||
    		hasFlag$3('color=truecolor')) {
    		return 3;
    	}

    	if (hasFlag$3('color=256')) {
    		return 2;
    	}

    	if (haveStream && !streamIsTTY && forceColor$1 === undefined) {
    		return 0;
    	}

    	const min = forceColor$1 || 0;

    	if (env$1.TERM === 'dumb') {
    		return min;
    	}

    	if (process.platform === 'win32') {
    		// Windows 10 build 10586 is the first Windows release that supports 256 colors.
    		// Windows 10 build 14931 is the first release that supports 16m/TrueColor.
    		const osRelease = os$1.release().split('.');
    		if (
    			Number(osRelease[0]) >= 10 &&
    			Number(osRelease[2]) >= 10586
    		) {
    			return Number(osRelease[2]) >= 14931 ? 3 : 2;
    		}

    		return 1;
    	}

    	if ('CI' in env$1) {
    		if (['TRAVIS', 'CIRCLECI', 'APPVEYOR', 'GITLAB_CI', 'GITHUB_ACTIONS', 'BUILDKITE'].some(sign => sign in env$1) || env$1.CI_NAME === 'codeship') {
    			return 1;
    		}

    		return min;
    	}

    	if ('TEAMCITY_VERSION' in env$1) {
    		return /^(9\.(0*[1-9]\d*)\.|\d{2,}\.)/.test(env$1.TEAMCITY_VERSION) ? 1 : 0;
    	}

    	if (env$1.COLORTERM === 'truecolor') {
    		return 3;
    	}

    	if ('TERM_PROGRAM' in env$1) {
    		const version = parseInt((env$1.TERM_PROGRAM_VERSION || '').split('.')[0], 10);

    		switch (env$1.TERM_PROGRAM) {
    			case 'iTerm.app':
    				return version >= 3 ? 3 : 2;
    			case 'Apple_Terminal':
    				return 2;
    			// No default
    		}
    	}

    	if (/-256(color)?$/i.test(env$1.TERM)) {
    		return 2;
    	}

    	if (/^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(env$1.TERM)) {
    		return 1;
    	}

    	if ('COLORTERM' in env$1) {
    		return 1;
    	}

    	return min;
    }

    function getSupportLevel$1(stream) {
    	const level = supportsColor$2(stream, stream && stream.isTTY);
    	return translateLevel$1(level);
    }

    var supportsColor_1$1 = {
    	supportsColor: getSupportLevel$1,
    	stdout: translateLevel$1(supportsColor$2(true, tty$1.isatty(1))),
    	stderr: translateLevel$1(supportsColor$2(true, tty$1.isatty(2)))
    };

    const stringReplaceAll$3 = (string, substring, replacer) => {
    	let index = string.indexOf(substring);
    	if (index === -1) {
    		return string;
    	}

    	const substringLength = substring.length;
    	let endIndex = 0;
    	let returnValue = '';
    	do {
    		returnValue += string.substr(endIndex, index - endIndex) + substring + replacer;
    		endIndex = index + substringLength;
    		index = string.indexOf(substring, endIndex);
    	} while (index !== -1);

    	returnValue += string.substr(endIndex);
    	return returnValue;
    };

    const stringEncaseCRLFWithFirstIndex$3 = (string, prefix, postfix, index) => {
    	let endIndex = 0;
    	let returnValue = '';
    	do {
    		const gotCR = string[index - 1] === '\r';
    		returnValue += string.substr(endIndex, (gotCR ? index - 1 : index) - endIndex) + prefix + (gotCR ? '\r\n' : '\n') + postfix;
    		endIndex = index + 1;
    		index = string.indexOf('\n', endIndex);
    	} while (index !== -1);

    	returnValue += string.substr(endIndex);
    	return returnValue;
    };

    var util$4 = {
    	stringReplaceAll: stringReplaceAll$3,
    	stringEncaseCRLFWithFirstIndex: stringEncaseCRLFWithFirstIndex$3
    };

    const TEMPLATE_REGEX$1 = /(?:\\(u(?:[a-f\d]{4}|\{[a-f\d]{1,6}\})|x[a-f\d]{2}|.))|(?:\{(~)?(\w+(?:\([^)]*\))?(?:\.\w+(?:\([^)]*\))?)*)(?:[ \t]|(?=\r?\n)))|(\})|((?:.|[\r\n\f])+?)/gi;
    const STYLE_REGEX$1 = /(?:^|\.)(\w+)(?:\(([^)]*)\))?/g;
    const STRING_REGEX$1 = /^(['"])((?:\\.|(?!\1)[^\\])*)\1$/;
    const ESCAPE_REGEX$1 = /\\(u(?:[a-f\d]{4}|{[a-f\d]{1,6}})|x[a-f\d]{2}|.)|([^\\])/gi;

    const ESCAPES$1 = new Map([
    	['n', '\n'],
    	['r', '\r'],
    	['t', '\t'],
    	['b', '\b'],
    	['f', '\f'],
    	['v', '\v'],
    	['0', '\0'],
    	['\\', '\\'],
    	['e', '\u001B'],
    	['a', '\u0007']
    ]);

    function unescape$2(c) {
    	const u = c[0] === 'u';
    	const bracket = c[1] === '{';

    	if ((u && !bracket && c.length === 5) || (c[0] === 'x' && c.length === 3)) {
    		return String.fromCharCode(parseInt(c.slice(1), 16));
    	}

    	if (u && bracket) {
    		return String.fromCodePoint(parseInt(c.slice(2, -1), 16));
    	}

    	return ESCAPES$1.get(c) || c;
    }

    function parseArguments$1(name, arguments_) {
    	const results = [];
    	const chunks = arguments_.trim().split(/\s*,\s*/g);
    	let matches;

    	for (const chunk of chunks) {
    		const number = Number(chunk);
    		if (!Number.isNaN(number)) {
    			results.push(number);
    		} else if ((matches = chunk.match(STRING_REGEX$1))) {
    			results.push(matches[2].replace(ESCAPE_REGEX$1, (m, escape, character) => escape ? unescape$2(escape) : character));
    		} else {
    			throw new Error(`Invalid Chalk template style argument: ${chunk} (in style '${name}')`);
    		}
    	}

    	return results;
    }

    function parseStyle$1(style) {
    	STYLE_REGEX$1.lastIndex = 0;

    	const results = [];
    	let matches;

    	while ((matches = STYLE_REGEX$1.exec(style)) !== null) {
    		const name = matches[1];

    		if (matches[2]) {
    			const args = parseArguments$1(name, matches[2]);
    			results.push([name].concat(args));
    		} else {
    			results.push([name]);
    		}
    	}

    	return results;
    }

    function buildStyle$1(chalk, styles) {
    	const enabled = {};

    	for (const layer of styles) {
    		for (const style of layer.styles) {
    			enabled[style[0]] = layer.inverse ? null : style.slice(1);
    		}
    	}

    	let current = chalk;
    	for (const [styleName, styles] of Object.entries(enabled)) {
    		if (!Array.isArray(styles)) {
    			continue;
    		}

    		if (!(styleName in current)) {
    			throw new Error(`Unknown Chalk style: ${styleName}`);
    		}

    		current = styles.length > 0 ? current[styleName](...styles) : current[styleName];
    	}

    	return current;
    }

    var templates$1 = (chalk, temporary) => {
    	const styles = [];
    	const chunks = [];
    	let chunk = [];

    	// eslint-disable-next-line max-params
    	temporary.replace(TEMPLATE_REGEX$1, (m, escapeCharacter, inverse, style, close, character) => {
    		if (escapeCharacter) {
    			chunk.push(unescape$2(escapeCharacter));
    		} else if (style) {
    			const string = chunk.join('');
    			chunk = [];
    			chunks.push(styles.length === 0 ? string : buildStyle$1(chalk, styles)(string));
    			styles.push({inverse, styles: parseStyle$1(style)});
    		} else if (close) {
    			if (styles.length === 0) {
    				throw new Error('Found extraneous } in Chalk template literal');
    			}

    			chunks.push(buildStyle$1(chalk, styles)(chunk.join('')));
    			chunk = [];
    			styles.pop();
    		} else {
    			chunk.push(character);
    		}
    	});

    	chunks.push(chunk.join(''));

    	if (styles.length > 0) {
    		const errMessage = `Chalk template literal is missing ${styles.length} closing bracket${styles.length === 1 ? '' : 's'} (\`}\`)`;
    		throw new Error(errMessage);
    	}

    	return chunks.join('');
    };

    const ansiStyles$2 = ansiStyles$3.exports;
    const {stdout: stdoutColor$1, stderr: stderrColor$1} = supportsColor_1$1;
    const {
    	stringReplaceAll: stringReplaceAll$2,
    	stringEncaseCRLFWithFirstIndex: stringEncaseCRLFWithFirstIndex$2
    } = util$4;

    const {isArray: isArray$B} = Array;

    // `supportsColor.level` → `ansiStyles.color[name]` mapping
    const levelMapping$1 = [
    	'ansi',
    	'ansi',
    	'ansi256',
    	'ansi16m'
    ];

    const styles$1 = Object.create(null);

    const applyOptions$1 = (object, options = {}) => {
    	if (options.level && !(Number.isInteger(options.level) && options.level >= 0 && options.level <= 3)) {
    		throw new Error('The `level` option should be an integer from 0 to 3');
    	}

    	// Detect level if not set manually
    	const colorLevel = stdoutColor$1 ? stdoutColor$1.level : 0;
    	object.level = options.level === undefined ? colorLevel : options.level;
    };

    class ChalkClass$1 {
    	constructor(options) {
    		// eslint-disable-next-line no-constructor-return
    		return chalkFactory$1(options);
    	}
    }

    const chalkFactory$1 = options => {
    	const chalk = {};
    	applyOptions$1(chalk, options);

    	chalk.template = (...arguments_) => chalkTag$1(chalk.template, ...arguments_);

    	Object.setPrototypeOf(chalk, Chalk$1.prototype);
    	Object.setPrototypeOf(chalk.template, chalk);

    	chalk.template.constructor = () => {
    		throw new Error('`chalk.constructor()` is deprecated. Use `new chalk.Instance()` instead.');
    	};

    	chalk.template.Instance = ChalkClass$1;

    	return chalk.template;
    };

    function Chalk$1(options) {
    	return chalkFactory$1(options);
    }

    for (const [styleName, style] of Object.entries(ansiStyles$2)) {
    	styles$1[styleName] = {
    		get() {
    			const builder = createBuilder$1(this, createStyler$1(style.open, style.close, this._styler), this._isEmpty);
    			Object.defineProperty(this, styleName, {value: builder});
    			return builder;
    		}
    	};
    }

    styles$1.visible = {
    	get() {
    		const builder = createBuilder$1(this, this._styler, true);
    		Object.defineProperty(this, 'visible', {value: builder});
    		return builder;
    	}
    };

    const usedModels$1 = ['rgb', 'hex', 'keyword', 'hsl', 'hsv', 'hwb', 'ansi', 'ansi256'];

    for (const model of usedModels$1) {
    	styles$1[model] = {
    		get() {
    			const {level} = this;
    			return function (...arguments_) {
    				const styler = createStyler$1(ansiStyles$2.color[levelMapping$1[level]][model](...arguments_), ansiStyles$2.color.close, this._styler);
    				return createBuilder$1(this, styler, this._isEmpty);
    			};
    		}
    	};
    }

    for (const model of usedModels$1) {
    	const bgModel = 'bg' + model[0].toUpperCase() + model.slice(1);
    	styles$1[bgModel] = {
    		get() {
    			const {level} = this;
    			return function (...arguments_) {
    				const styler = createStyler$1(ansiStyles$2.bgColor[levelMapping$1[level]][model](...arguments_), ansiStyles$2.bgColor.close, this._styler);
    				return createBuilder$1(this, styler, this._isEmpty);
    			};
    		}
    	};
    }

    const proto$1 = Object.defineProperties(() => {}, {
    	...styles$1,
    	level: {
    		enumerable: true,
    		get() {
    			return this._generator.level;
    		},
    		set(level) {
    			this._generator.level = level;
    		}
    	}
    });

    const createStyler$1 = (open, close, parent) => {
    	let openAll;
    	let closeAll;
    	if (parent === undefined) {
    		openAll = open;
    		closeAll = close;
    	} else {
    		openAll = parent.openAll + open;
    		closeAll = close + parent.closeAll;
    	}

    	return {
    		open,
    		close,
    		openAll,
    		closeAll,
    		parent
    	};
    };

    const createBuilder$1 = (self, _styler, _isEmpty) => {
    	const builder = (...arguments_) => {
    		if (isArray$B(arguments_[0]) && isArray$B(arguments_[0].raw)) {
    			// Called as a template literal, for example: chalk.red`2 + 3 = {bold ${2+3}}`
    			return applyStyle$1(builder, chalkTag$1(builder, ...arguments_));
    		}

    		// Single argument is hot path, implicit coercion is faster than anything
    		// eslint-disable-next-line no-implicit-coercion
    		return applyStyle$1(builder, (arguments_.length === 1) ? ('' + arguments_[0]) : arguments_.join(' '));
    	};

    	// We alter the prototype because we must return a function, but there is
    	// no way to create a function with a different prototype
    	Object.setPrototypeOf(builder, proto$1);

    	builder._generator = self;
    	builder._styler = _styler;
    	builder._isEmpty = _isEmpty;

    	return builder;
    };

    const applyStyle$1 = (self, string) => {
    	if (self.level <= 0 || !string) {
    		return self._isEmpty ? '' : string;
    	}

    	let styler = self._styler;

    	if (styler === undefined) {
    		return string;
    	}

    	const {openAll, closeAll} = styler;
    	if (string.indexOf('\u001B') !== -1) {
    		while (styler !== undefined) {
    			// Replace any instances already present with a re-opening code
    			// otherwise only the part of the string until said closing code
    			// will be colored, and the rest will simply be 'plain'.
    			string = stringReplaceAll$2(string, styler.close, styler.open);

    			styler = styler.parent;
    		}
    	}

    	// We can move both next actions out of loop, because remaining actions in loop won't have
    	// any/visible effect on parts we add here. Close the styling before a linebreak and reopen
    	// after next line to fix a bleed issue on macOS: https://github.com/chalk/chalk/pull/92
    	const lfIndex = string.indexOf('\n');
    	if (lfIndex !== -1) {
    		string = stringEncaseCRLFWithFirstIndex$2(string, closeAll, openAll, lfIndex);
    	}

    	return openAll + string + closeAll;
    };

    let template$1;
    const chalkTag$1 = (chalk, ...strings) => {
    	const [firstString] = strings;

    	if (!isArray$B(firstString) || !isArray$B(firstString.raw)) {
    		// If chalk() was called by itself or with a string,
    		// return the string itself as a string.
    		return strings.join(' ');
    	}

    	const arguments_ = strings.slice(1);
    	const parts = [firstString.raw[0]];

    	for (let i = 1; i < firstString.length; i++) {
    		parts.push(
    			String(arguments_[i - 1]).replace(/[{}\\]/g, '\\$&'),
    			String(firstString.raw[i])
    		);
    	}

    	if (template$1 === undefined) {
    		template$1 = templates$1;
    	}

    	return template$1(chalk, parts.join(''));
    };

    Object.defineProperties(Chalk$1.prototype, styles$1);

    const chalk$r = Chalk$1(); // eslint-disable-line new-cap
    chalk$r.supportsColor = stdoutColor$1;
    chalk$r.stderr = Chalk$1({level: stderrColor$1 ? stderrColor$1.level : 0}); // eslint-disable-line new-cap
    chalk$r.stderr.supportsColor = stderrColor$1;

    var source$1 = chalk$r;

    var figures$9 = {exports: {}};

    var matchOperatorsRe$1 = /[|\\{}()[\]^$+*?.]/g;

    var escapeStringRegexp$3 = function (str) {
    	if (typeof str !== 'string') {
    		throw new TypeError('Expected a string');
    	}

    	return str.replace(matchOperatorsRe$1, '\\$&');
    };

    const escapeStringRegexp$2 = escapeStringRegexp$3;

    const {platform: platform$1} = process;

    const main$6 = {
    	tick: '✔',
    	cross: '✖',
    	star: '★',
    	square: '▇',
    	squareSmall: '◻',
    	squareSmallFilled: '◼',
    	play: '▶',
    	circle: '◯',
    	circleFilled: '◉',
    	circleDotted: '◌',
    	circleDouble: '◎',
    	circleCircle: 'ⓞ',
    	circleCross: 'ⓧ',
    	circlePipe: 'Ⓘ',
    	circleQuestionMark: '?⃝',
    	bullet: '●',
    	dot: '․',
    	line: '─',
    	ellipsis: '…',
    	pointer: '❯',
    	pointerSmall: '›',
    	info: 'ℹ',
    	warning: '⚠',
    	hamburger: '☰',
    	smiley: '㋡',
    	mustache: '෴',
    	heart: '♥',
    	nodejs: '⬢',
    	arrowUp: '↑',
    	arrowDown: '↓',
    	arrowLeft: '←',
    	arrowRight: '→',
    	radioOn: '◉',
    	radioOff: '◯',
    	checkboxOn: '☒',
    	checkboxOff: '☐',
    	checkboxCircleOn: 'ⓧ',
    	checkboxCircleOff: 'Ⓘ',
    	questionMarkPrefix: '?⃝',
    	oneHalf: '½',
    	oneThird: '⅓',
    	oneQuarter: '¼',
    	oneFifth: '⅕',
    	oneSixth: '⅙',
    	oneSeventh: '⅐',
    	oneEighth: '⅛',
    	oneNinth: '⅑',
    	oneTenth: '⅒',
    	twoThirds: '⅔',
    	twoFifths: '⅖',
    	threeQuarters: '¾',
    	threeFifths: '⅗',
    	threeEighths: '⅜',
    	fourFifths: '⅘',
    	fiveSixths: '⅚',
    	fiveEighths: '⅝',
    	sevenEighths: '⅞'
    };

    const windows$1 = {
    	tick: '√',
    	cross: '×',
    	star: '*',
    	square: '█',
    	squareSmall: '[ ]',
    	squareSmallFilled: '[█]',
    	play: '►',
    	circle: '( )',
    	circleFilled: '(*)',
    	circleDotted: '( )',
    	circleDouble: '( )',
    	circleCircle: '(○)',
    	circleCross: '(×)',
    	circlePipe: '(│)',
    	circleQuestionMark: '(?)',
    	bullet: '*',
    	dot: '.',
    	line: '─',
    	ellipsis: '...',
    	pointer: '>',
    	pointerSmall: '»',
    	info: 'i',
    	warning: '‼',
    	hamburger: '≡',
    	smiley: '☺',
    	mustache: '┌─┐',
    	heart: main$6.heart,
    	nodejs: '♦',
    	arrowUp: main$6.arrowUp,
    	arrowDown: main$6.arrowDown,
    	arrowLeft: main$6.arrowLeft,
    	arrowRight: main$6.arrowRight,
    	radioOn: '(*)',
    	radioOff: '( )',
    	checkboxOn: '[×]',
    	checkboxOff: '[ ]',
    	checkboxCircleOn: '(×)',
    	checkboxCircleOff: '( )',
    	questionMarkPrefix: '？',
    	oneHalf: '1/2',
    	oneThird: '1/3',
    	oneQuarter: '1/4',
    	oneFifth: '1/5',
    	oneSixth: '1/6',
    	oneSeventh: '1/7',
    	oneEighth: '1/8',
    	oneNinth: '1/9',
    	oneTenth: '1/10',
    	twoThirds: '2/3',
    	twoFifths: '2/5',
    	threeQuarters: '3/4',
    	threeFifths: '3/5',
    	threeEighths: '3/8',
    	fourFifths: '4/5',
    	fiveSixths: '5/6',
    	fiveEighths: '5/8',
    	sevenEighths: '7/8'
    };

    if (platform$1 === 'linux') {
    	// The main one doesn't look that good on Ubuntu.
    	main$6.questionMarkPrefix = '?';
    }

    const figures$8 = platform$1 === 'win32' ? windows$1 : main$6;

    const fn$1 = string => {
    	if (figures$8 === main$6) {
    		return string;
    	}

    	for (const [key, value] of Object.entries(main$6)) {
    		if (value === figures$8[key]) {
    			continue;
    		}

    		string = string.replace(new RegExp(escapeStringRegexp$2(value), 'g'), figures$8[key]);
    	}

    	return string;
    };

    figures$9.exports = Object.assign(fn$1, figures$8);
    figures$9.exports.main = main$6;
    figures$9.exports.windows = windows$1;

    const chalk$q = source$1;
    const figures$7 = figures$9.exports;

    /**
     * Separator object
     * Used to space/separate choices group
     * @constructor
     * @param {String} line   Separation line content (facultative)
     */

    class Separator$7 {
      constructor(line) {
        this.type = 'separator';
        this.line = chalk$q.dim(line || new Array(15).join(figures$7.line));
      }

      /**
       * Stringify separator
       * @return {String} the separator display string
       */
      toString() {
        return this.line;
      }
    }

    /**
     * Helper function returning false if object is a separator
     * @param  {Object} obj object to test against
     * @return {Boolean}    `false` if object is a separator
     */

    Separator$7.exclude = function (obj) {
      return obj.type !== 'separator';
    };

    var separator$1 = Separator$7;

    var through$3 = {exports: {}};

    (function (module, exports) {
    var Stream = require$$0__default$1["default"];

    // through
    //
    // a stream that does nothing but re-emit the input.
    // useful for aggregating a series of changing but not ending streams into one stream)

    module.exports = through;
    through.through = through;

    //create a readable writable stream.

    function through (write, end, opts) {
      write = write || function (data) { this.queue(data); };
      end = end || function () { this.queue(null); };

      var ended = false, destroyed = false, buffer = [], _ended = false;
      var stream = new Stream();
      stream.readable = stream.writable = true;
      stream.paused = false;

    //  stream.autoPause   = !(opts && opts.autoPause   === false)
      stream.autoDestroy = !(opts && opts.autoDestroy === false);

      stream.write = function (data) {
        write.call(this, data);
        return !stream.paused
      };

      function drain() {
        while(buffer.length && !stream.paused) {
          var data = buffer.shift();
          if(null === data)
            return stream.emit('end')
          else
            stream.emit('data', data);
        }
      }

      stream.queue = stream.push = function (data) {
    //    console.error(ended)
        if(_ended) return stream
        if(data === null) _ended = true;
        buffer.push(data);
        drain();
        return stream
      };

      //this will be registered as the first 'end' listener
      //must call destroy next tick, to make sure we're after any
      //stream piped from here.
      //this is only a problem if end is not emitted synchronously.
      //a nicer way to do this is to make sure this is the last listener for 'end'

      stream.on('end', function () {
        stream.readable = false;
        if(!stream.writable && stream.autoDestroy)
          process.nextTick(function () {
            stream.destroy();
          });
      });

      function _end () {
        stream.writable = false;
        end.call(stream);
        if(!stream.readable && stream.autoDestroy)
          stream.destroy();
      }

      stream.end = function (data) {
        if(ended) return
        ended = true;
        if(arguments.length) stream.write(data);
        _end(); // will emit or queue
        return stream
      };

      stream.destroy = function () {
        if(destroyed) return
        destroyed = true;
        ended = true;
        buffer.length = 0;
        stream.writable = stream.readable = false;
        stream.emit('close');
        return stream
      };

      stream.pause = function () {
        if(stream.paused) return
        stream.paused = true;
        return stream
      };

      stream.resume = function () {
        if(stream.paused) {
          stream.paused = false;
          stream.emit('resume');
        }
        drain();
        //may have become paused again,
        //as drain emits 'data'.
        if(!stream.paused)
          stream.emit('drain');
        return stream
      };
      return stream
    }
    }(through$3));

    /** Detect free variable `global` from Node.js. */

    var freeGlobal$3 = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;

    var _freeGlobal$1 = freeGlobal$3;

    var freeGlobal$2 = _freeGlobal$1;

    /** Detect free variable `self`. */
    var freeSelf$1 = typeof self == 'object' && self && self.Object === Object && self;

    /** Used as a reference to the global object. */
    var root$h = freeGlobal$2 || freeSelf$1 || Function('return this')();

    var _root$1 = root$h;

    var root$g = _root$1;

    /** Built-in value references. */
    var Symbol$e = root$g.Symbol;

    var _Symbol$1 = Symbol$e;

    var Symbol$d = _Symbol$1;

    /** Used for built-in method references. */
    var objectProto$B = Object.prototype;

    /** Used to check objects for own properties. */
    var hasOwnProperty$t = objectProto$B.hasOwnProperty;

    /**
     * Used to resolve the
     * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
     * of values.
     */
    var nativeObjectToString$3 = objectProto$B.toString;

    /** Built-in value references. */
    var symToStringTag$3 = Symbol$d ? Symbol$d.toStringTag : undefined;

    /**
     * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the raw `toStringTag`.
     */
    function getRawTag$3(value) {
      var isOwn = hasOwnProperty$t.call(value, symToStringTag$3),
          tag = value[symToStringTag$3];

      try {
        value[symToStringTag$3] = undefined;
        var unmasked = true;
      } catch (e) {}

      var result = nativeObjectToString$3.call(value);
      if (unmasked) {
        if (isOwn) {
          value[symToStringTag$3] = tag;
        } else {
          delete value[symToStringTag$3];
        }
      }
      return result;
    }

    var _getRawTag$1 = getRawTag$3;

    /** Used for built-in method references. */

    var objectProto$A = Object.prototype;

    /**
     * Used to resolve the
     * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
     * of values.
     */
    var nativeObjectToString$2 = objectProto$A.toString;

    /**
     * Converts `value` to a string using `Object.prototype.toString`.
     *
     * @private
     * @param {*} value The value to convert.
     * @returns {string} Returns the converted string.
     */
    function objectToString$3(value) {
      return nativeObjectToString$2.call(value);
    }

    var _objectToString$1 = objectToString$3;

    var Symbol$c = _Symbol$1,
        getRawTag$2 = _getRawTag$1,
        objectToString$2 = _objectToString$1;

    /** `Object#toString` result references. */
    var nullTag$1 = '[object Null]',
        undefinedTag$1 = '[object Undefined]';

    /** Built-in value references. */
    var symToStringTag$2 = Symbol$c ? Symbol$c.toStringTag : undefined;

    /**
     * The base implementation of `getTag` without fallbacks for buggy environments.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */
    function baseGetTag$j(value) {
      if (value == null) {
        return value === undefined ? undefinedTag$1 : nullTag$1;
      }
      return (symToStringTag$2 && symToStringTag$2 in Object(value))
        ? getRawTag$2(value)
        : objectToString$2(value);
    }

    var _baseGetTag$1 = baseGetTag$j;

    /**
     * Checks if `value` is the
     * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
     * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an object, else `false`.
     * @example
     *
     * _.isObject({});
     * // => true
     *
     * _.isObject([1, 2, 3]);
     * // => true
     *
     * _.isObject(_.noop);
     * // => true
     *
     * _.isObject(null);
     * // => false
     */

    function isObject$k(value) {
      var type = typeof value;
      return value != null && (type == 'object' || type == 'function');
    }

    var isObject_1$1 = isObject$k;

    var baseGetTag$i = _baseGetTag$1,
        isObject$j = isObject_1$1;

    /** `Object#toString` result references. */
    var asyncTag$1 = '[object AsyncFunction]',
        funcTag$5 = '[object Function]',
        genTag$3 = '[object GeneratorFunction]',
        proxyTag$1 = '[object Proxy]';

    /**
     * Checks if `value` is classified as a `Function` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a function, else `false`.
     * @example
     *
     * _.isFunction(_);
     * // => true
     *
     * _.isFunction(/abc/);
     * // => false
     */
    function isFunction$8(value) {
      if (!isObject$j(value)) {
        return false;
      }
      // The use of `Object#toString` avoids issues with the `typeof` operator
      // in Safari 9 which returns 'object' for typed arrays and other constructors.
      var tag = baseGetTag$i(value);
      return tag == funcTag$5 || tag == genTag$3 || tag == asyncTag$1 || tag == proxyTag$1;
    }

    var isFunction_1$1 = isFunction$8;

    var root$f = _root$1;

    /** Used to detect overreaching core-js shims. */
    var coreJsData$3 = root$f['__core-js_shared__'];

    var _coreJsData$1 = coreJsData$3;

    var coreJsData$2 = _coreJsData$1;

    /** Used to detect methods masquerading as native. */
    var maskSrcKey$1 = (function() {
      var uid = /[^.]+$/.exec(coreJsData$2 && coreJsData$2.keys && coreJsData$2.keys.IE_PROTO || '');
      return uid ? ('Symbol(src)_1.' + uid) : '';
    }());

    /**
     * Checks if `func` has its source masked.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` is masked, else `false`.
     */
    function isMasked$3(func) {
      return !!maskSrcKey$1 && (maskSrcKey$1 in func);
    }

    var _isMasked$1 = isMasked$3;

    /** Used for built-in method references. */

    var funcProto$5 = Function.prototype;

    /** Used to resolve the decompiled source of functions. */
    var funcToString$5 = funcProto$5.toString;

    /**
     * Converts `func` to its source code.
     *
     * @private
     * @param {Function} func The function to convert.
     * @returns {string} Returns the source code.
     */
    function toSource$5(func) {
      if (func != null) {
        try {
          return funcToString$5.call(func);
        } catch (e) {}
        try {
          return (func + '');
        } catch (e) {}
      }
      return '';
    }

    var _toSource$1 = toSource$5;

    var isFunction$7 = isFunction_1$1,
        isMasked$2 = _isMasked$1,
        isObject$i = isObject_1$1,
        toSource$4 = _toSource$1;

    /**
     * Used to match `RegExp`
     * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
     */
    var reRegExpChar$1 = /[\\^$.*+?()[\]{}|]/g;

    /** Used to detect host constructors (Safari). */
    var reIsHostCtor$1 = /^\[object .+?Constructor\]$/;

    /** Used for built-in method references. */
    var funcProto$4 = Function.prototype,
        objectProto$z = Object.prototype;

    /** Used to resolve the decompiled source of functions. */
    var funcToString$4 = funcProto$4.toString;

    /** Used to check objects for own properties. */
    var hasOwnProperty$s = objectProto$z.hasOwnProperty;

    /** Used to detect if a method is native. */
    var reIsNative$1 = RegExp('^' +
      funcToString$4.call(hasOwnProperty$s).replace(reRegExpChar$1, '\\$&')
      .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
    );

    /**
     * The base implementation of `_.isNative` without bad shim checks.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function,
     *  else `false`.
     */
    function baseIsNative$3(value) {
      if (!isObject$i(value) || isMasked$2(value)) {
        return false;
      }
      var pattern = isFunction$7(value) ? reIsNative$1 : reIsHostCtor$1;
      return pattern.test(toSource$4(value));
    }

    var _baseIsNative$1 = baseIsNative$3;

    /**
     * Gets the value at `key` of `object`.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {string} key The key of the property to get.
     * @returns {*} Returns the property value.
     */

    function getValue$3(object, key) {
      return object == null ? undefined : object[key];
    }

    var _getValue$1 = getValue$3;

    var baseIsNative$2 = _baseIsNative$1,
        getValue$2 = _getValue$1;

    /**
     * Gets the native function at `key` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {string} key The key of the method to get.
     * @returns {*} Returns the function if it's native, else `undefined`.
     */
    function getNative$f(object, key) {
      var value = getValue$2(object, key);
      return baseIsNative$2(value) ? value : undefined;
    }

    var _getNative$1 = getNative$f;

    var getNative$e = _getNative$1;

    var defineProperty$5 = (function() {
      try {
        var func = getNative$e(Object, 'defineProperty');
        func({}, '', {});
        return func;
      } catch (e) {}
    }());

    var _defineProperty$4 = defineProperty$5;

    var defineProperty$4 = _defineProperty$4;

    /**
     * The base implementation of `assignValue` and `assignMergeValue` without
     * value checks.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function baseAssignValue$5(object, key, value) {
      if (key == '__proto__' && defineProperty$4) {
        defineProperty$4(object, key, {
          'configurable': true,
          'enumerable': true,
          'value': value,
          'writable': true
        });
      } else {
        object[key] = value;
      }
    }

    var _baseAssignValue$1 = baseAssignValue$5;

    /**
     * Performs a
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * comparison between two values to determine if they are equivalent.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'a': 1 };
     * var other = { 'a': 1 };
     *
     * _.eq(object, object);
     * // => true
     *
     * _.eq(object, other);
     * // => false
     *
     * _.eq('a', 'a');
     * // => true
     *
     * _.eq('a', Object('a'));
     * // => false
     *
     * _.eq(NaN, NaN);
     * // => true
     */

    function eq$b(value, other) {
      return value === other || (value !== value && other !== other);
    }

    var eq_1$1 = eq$b;

    var baseAssignValue$4 = _baseAssignValue$1,
        eq$a = eq_1$1;

    /** Used for built-in method references. */
    var objectProto$y = Object.prototype;

    /** Used to check objects for own properties. */
    var hasOwnProperty$r = objectProto$y.hasOwnProperty;

    /**
     * Assigns `value` to `key` of `object` if the existing value is not equivalent
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function assignValue$9(object, key, value) {
      var objValue = object[key];
      if (!(hasOwnProperty$r.call(object, key) && eq$a(objValue, value)) ||
          (value === undefined && !(key in object))) {
        baseAssignValue$4(object, key, value);
      }
    }

    var _assignValue$1 = assignValue$9;

    var assignValue$8 = _assignValue$1,
        baseAssignValue$3 = _baseAssignValue$1;

    /**
     * Copies properties of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy properties from.
     * @param {Array} props The property identifiers to copy.
     * @param {Object} [object={}] The object to copy properties to.
     * @param {Function} [customizer] The function to customize copied values.
     * @returns {Object} Returns `object`.
     */
    function copyObject$f(source, props, object, customizer) {
      var isNew = !object;
      object || (object = {});

      var index = -1,
          length = props.length;

      while (++index < length) {
        var key = props[index];

        var newValue = customizer
          ? customizer(object[key], source[key], key, object, source)
          : undefined;

        if (newValue === undefined) {
          newValue = source[key];
        }
        if (isNew) {
          baseAssignValue$3(object, key, newValue);
        } else {
          assignValue$8(object, key, newValue);
        }
      }
      return object;
    }

    var _copyObject$1 = copyObject$f;

    /**
     * This method returns the first argument it receives.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {*} value Any value.
     * @returns {*} Returns `value`.
     * @example
     *
     * var object = { 'a': 1 };
     *
     * console.log(_.identity(object) === object);
     * // => true
     */

    function identity$b(value) {
      return value;
    }

    var identity_1$1 = identity$b;

    /**
     * A faster alternative to `Function#apply`, this function invokes `func`
     * with the `this` binding of `thisArg` and the arguments of `args`.
     *
     * @private
     * @param {Function} func The function to invoke.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {Array} args The arguments to invoke `func` with.
     * @returns {*} Returns the result of `func`.
     */

    function apply$3(func, thisArg, args) {
      switch (args.length) {
        case 0: return func.call(thisArg);
        case 1: return func.call(thisArg, args[0]);
        case 2: return func.call(thisArg, args[0], args[1]);
        case 3: return func.call(thisArg, args[0], args[1], args[2]);
      }
      return func.apply(thisArg, args);
    }

    var _apply$1 = apply$3;

    var apply$2 = _apply$1;

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeMax$3 = Math.max;

    /**
     * A specialized version of `baseRest` which transforms the rest array.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @param {Function} transform The rest array transform.
     * @returns {Function} Returns the new function.
     */
    function overRest$5(func, start, transform) {
      start = nativeMax$3(start === undefined ? (func.length - 1) : start, 0);
      return function() {
        var args = arguments,
            index = -1,
            length = nativeMax$3(args.length - start, 0),
            array = Array(length);

        while (++index < length) {
          array[index] = args[start + index];
        }
        index = -1;
        var otherArgs = Array(start + 1);
        while (++index < start) {
          otherArgs[index] = args[index];
        }
        otherArgs[start] = transform(array);
        return apply$2(func, this, otherArgs);
      };
    }

    var _overRest$1 = overRest$5;

    /**
     * Creates a function that returns `value`.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Util
     * @param {*} value The value to return from the new function.
     * @returns {Function} Returns the new constant function.
     * @example
     *
     * var objects = _.times(2, _.constant({ 'a': 1 }));
     *
     * console.log(objects);
     * // => [{ 'a': 1 }, { 'a': 1 }]
     *
     * console.log(objects[0] === objects[1]);
     * // => true
     */

    function constant$3(value) {
      return function() {
        return value;
      };
    }

    var constant_1$1 = constant$3;

    var constant$2 = constant_1$1,
        defineProperty$3 = _defineProperty$4,
        identity$a = identity_1$1;

    /**
     * The base implementation of `setToString` without support for hot loop shorting.
     *
     * @private
     * @param {Function} func The function to modify.
     * @param {Function} string The `toString` result.
     * @returns {Function} Returns `func`.
     */
    var baseSetToString$3 = !defineProperty$3 ? identity$a : function(func, string) {
      return defineProperty$3(func, 'toString', {
        'configurable': true,
        'enumerable': false,
        'value': constant$2(string),
        'writable': true
      });
    };

    var _baseSetToString$1 = baseSetToString$3;

    /** Used to detect hot functions by number of calls within a span of milliseconds. */

    var HOT_COUNT$1 = 800,
        HOT_SPAN$1 = 16;

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeNow$1 = Date.now;

    /**
     * Creates a function that'll short out and invoke `identity` instead
     * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
     * milliseconds.
     *
     * @private
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new shortable function.
     */
    function shortOut$3(func) {
      var count = 0,
          lastCalled = 0;

      return function() {
        var stamp = nativeNow$1(),
            remaining = HOT_SPAN$1 - (stamp - lastCalled);

        lastCalled = stamp;
        if (remaining > 0) {
          if (++count >= HOT_COUNT$1) {
            return arguments[0];
          }
        } else {
          count = 0;
        }
        return func.apply(undefined, arguments);
      };
    }

    var _shortOut$1 = shortOut$3;

    var baseSetToString$2 = _baseSetToString$1,
        shortOut$2 = _shortOut$1;

    /**
     * Sets the `toString` method of `func` to return `string`.
     *
     * @private
     * @param {Function} func The function to modify.
     * @param {Function} string The `toString` result.
     * @returns {Function} Returns `func`.
     */
    var setToString$5 = shortOut$2(baseSetToString$2);

    var _setToString$1 = setToString$5;

    var identity$9 = identity_1$1,
        overRest$4 = _overRest$1,
        setToString$4 = _setToString$1;

    /**
     * The base implementation of `_.rest` which doesn't validate or coerce arguments.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @returns {Function} Returns the new function.
     */
    function baseRest$5(func, start) {
      return setToString$4(overRest$4(func, start, identity$9), func + '');
    }

    var _baseRest$1 = baseRest$5;

    /** Used as references for various `Number` constants. */

    var MAX_SAFE_INTEGER$3 = 9007199254740991;

    /**
     * Checks if `value` is a valid array-like length.
     *
     * **Note:** This method is loosely based on
     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
     * @example
     *
     * _.isLength(3);
     * // => true
     *
     * _.isLength(Number.MIN_VALUE);
     * // => false
     *
     * _.isLength(Infinity);
     * // => false
     *
     * _.isLength('3');
     * // => false
     */
    function isLength$7(value) {
      return typeof value == 'number' &&
        value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER$3;
    }

    var isLength_1$1 = isLength$7;

    var isFunction$6 = isFunction_1$1,
        isLength$6 = isLength_1$1;

    /**
     * Checks if `value` is array-like. A value is considered array-like if it's
     * not a function and has a `value.length` that's an integer greater than or
     * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
     * @example
     *
     * _.isArrayLike([1, 2, 3]);
     * // => true
     *
     * _.isArrayLike(document.body.children);
     * // => true
     *
     * _.isArrayLike('abc');
     * // => true
     *
     * _.isArrayLike(_.noop);
     * // => false
     */
    function isArrayLike$h(value) {
      return value != null && isLength$6(value.length) && !isFunction$6(value);
    }

    var isArrayLike_1$1 = isArrayLike$h;

    /** Used as references for various `Number` constants. */

    var MAX_SAFE_INTEGER$2 = 9007199254740991;

    /** Used to detect unsigned integer values. */
    var reIsUint$1 = /^(?:0|[1-9]\d*)$/;

    /**
     * Checks if `value` is a valid array-like index.
     *
     * @private
     * @param {*} value The value to check.
     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
     */
    function isIndex$9(value, length) {
      var type = typeof value;
      length = length == null ? MAX_SAFE_INTEGER$2 : length;

      return !!length &&
        (type == 'number' ||
          (type != 'symbol' && reIsUint$1.test(value))) &&
            (value > -1 && value % 1 == 0 && value < length);
    }

    var _isIndex$1 = isIndex$9;

    var eq$9 = eq_1$1,
        isArrayLike$g = isArrayLike_1$1,
        isIndex$8 = _isIndex$1,
        isObject$h = isObject_1$1;

    /**
     * Checks if the given arguments are from an iteratee call.
     *
     * @private
     * @param {*} value The potential iteratee value argument.
     * @param {*} index The potential iteratee index or key argument.
     * @param {*} object The potential iteratee object argument.
     * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
     *  else `false`.
     */
    function isIterateeCall$5(value, index, object) {
      if (!isObject$h(object)) {
        return false;
      }
      var type = typeof index;
      if (type == 'number'
            ? (isArrayLike$g(object) && isIndex$8(index, object.length))
            : (type == 'string' && index in object)
          ) {
        return eq$9(object[index], value);
      }
      return false;
    }

    var _isIterateeCall$1 = isIterateeCall$5;

    var baseRest$4 = _baseRest$1,
        isIterateeCall$4 = _isIterateeCall$1;

    /**
     * Creates a function like `_.assign`.
     *
     * @private
     * @param {Function} assigner The function to assign values.
     * @returns {Function} Returns the new assigner function.
     */
    function createAssigner$5(assigner) {
      return baseRest$4(function(object, sources) {
        var index = -1,
            length = sources.length,
            customizer = length > 1 ? sources[length - 1] : undefined,
            guard = length > 2 ? sources[2] : undefined;

        customizer = (assigner.length > 3 && typeof customizer == 'function')
          ? (length--, customizer)
          : undefined;

        if (guard && isIterateeCall$4(sources[0], sources[1], guard)) {
          customizer = length < 3 ? undefined : customizer;
          length = 1;
        }
        object = Object(object);
        while (++index < length) {
          var source = sources[index];
          if (source) {
            assigner(object, source, index, customizer);
          }
        }
        return object;
      });
    }

    var _createAssigner$1 = createAssigner$5;

    /**
     * The base implementation of `_.times` without support for iteratee shorthands
     * or max array length checks.
     *
     * @private
     * @param {number} n The number of times to invoke `iteratee`.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns the array of results.
     */

    function baseTimes$3(n, iteratee) {
      var index = -1,
          result = Array(n);

      while (++index < n) {
        result[index] = iteratee(index);
      }
      return result;
    }

    var _baseTimes$1 = baseTimes$3;

    /**
     * Checks if `value` is object-like. A value is object-like if it's not `null`
     * and has a `typeof` result of "object".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
     * @example
     *
     * _.isObjectLike({});
     * // => true
     *
     * _.isObjectLike([1, 2, 3]);
     * // => true
     *
     * _.isObjectLike(_.noop);
     * // => false
     *
     * _.isObjectLike(null);
     * // => false
     */

    function isObjectLike$n(value) {
      return value != null && typeof value == 'object';
    }

    var isObjectLike_1$1 = isObjectLike$n;

    var baseGetTag$h = _baseGetTag$1,
        isObjectLike$m = isObjectLike_1$1;

    /** `Object#toString` result references. */
    var argsTag$7 = '[object Arguments]';

    /**
     * The base implementation of `_.isArguments`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
     */
    function baseIsArguments$3(value) {
      return isObjectLike$m(value) && baseGetTag$h(value) == argsTag$7;
    }

    var _baseIsArguments$1 = baseIsArguments$3;

    var baseIsArguments$2 = _baseIsArguments$1,
        isObjectLike$l = isObjectLike_1$1;

    /** Used for built-in method references. */
    var objectProto$x = Object.prototype;

    /** Used to check objects for own properties. */
    var hasOwnProperty$q = objectProto$x.hasOwnProperty;

    /** Built-in value references. */
    var propertyIsEnumerable$3 = objectProto$x.propertyIsEnumerable;

    /**
     * Checks if `value` is likely an `arguments` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
     *  else `false`.
     * @example
     *
     * _.isArguments(function() { return arguments; }());
     * // => true
     *
     * _.isArguments([1, 2, 3]);
     * // => false
     */
    var isArguments$7 = baseIsArguments$2(function() { return arguments; }()) ? baseIsArguments$2 : function(value) {
      return isObjectLike$l(value) && hasOwnProperty$q.call(value, 'callee') &&
        !propertyIsEnumerable$3.call(value, 'callee');
    };

    var isArguments_1$1 = isArguments$7;

    /**
     * Checks if `value` is classified as an `Array` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array, else `false`.
     * @example
     *
     * _.isArray([1, 2, 3]);
     * // => true
     *
     * _.isArray(document.body.children);
     * // => false
     *
     * _.isArray('abc');
     * // => false
     *
     * _.isArray(_.noop);
     * // => false
     */

    var isArray$A = Array.isArray;

    var isArray_1$1 = isArray$A;

    var isBuffer$8 = {exports: {}};

    /**
     * This method returns `false`.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {boolean} Returns `false`.
     * @example
     *
     * _.times(2, _.stubFalse);
     * // => [false, false]
     */

    function stubFalse$1() {
      return false;
    }

    var stubFalse_1$1 = stubFalse$1;

    (function (module, exports) {
    var root = _root$1,
        stubFalse = stubFalse_1$1;

    /** Detect free variable `exports`. */
    var freeExports = exports && !exports.nodeType && exports;

    /** Detect free variable `module`. */
    var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;

    /** Detect the popular CommonJS extension `module.exports`. */
    var moduleExports = freeModule && freeModule.exports === freeExports;

    /** Built-in value references. */
    var Buffer = moduleExports ? root.Buffer : undefined;

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;

    /**
     * Checks if `value` is a buffer.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
     * @example
     *
     * _.isBuffer(new Buffer(2));
     * // => true
     *
     * _.isBuffer(new Uint8Array(2));
     * // => false
     */
    var isBuffer = nativeIsBuffer || stubFalse;

    module.exports = isBuffer;
    }(isBuffer$8, isBuffer$8.exports));

    var baseGetTag$g = _baseGetTag$1,
        isLength$5 = isLength_1$1,
        isObjectLike$k = isObjectLike_1$1;

    /** `Object#toString` result references. */
    var argsTag$6 = '[object Arguments]',
        arrayTag$5 = '[object Array]',
        boolTag$9 = '[object Boolean]',
        dateTag$7 = '[object Date]',
        errorTag$5 = '[object Error]',
        funcTag$4 = '[object Function]',
        mapTag$b = '[object Map]',
        numberTag$9 = '[object Number]',
        objectTag$9 = '[object Object]',
        regexpTag$7 = '[object RegExp]',
        setTag$b = '[object Set]',
        stringTag$9 = '[object String]',
        weakMapTag$5 = '[object WeakMap]';

    var arrayBufferTag$7 = '[object ArrayBuffer]',
        dataViewTag$9 = '[object DataView]',
        float32Tag$5 = '[object Float32Array]',
        float64Tag$5 = '[object Float64Array]',
        int8Tag$5 = '[object Int8Array]',
        int16Tag$5 = '[object Int16Array]',
        int32Tag$5 = '[object Int32Array]',
        uint8Tag$5 = '[object Uint8Array]',
        uint8ClampedTag$5 = '[object Uint8ClampedArray]',
        uint16Tag$5 = '[object Uint16Array]',
        uint32Tag$5 = '[object Uint32Array]';

    /** Used to identify `toStringTag` values of typed arrays. */
    var typedArrayTags$1 = {};
    typedArrayTags$1[float32Tag$5] = typedArrayTags$1[float64Tag$5] =
    typedArrayTags$1[int8Tag$5] = typedArrayTags$1[int16Tag$5] =
    typedArrayTags$1[int32Tag$5] = typedArrayTags$1[uint8Tag$5] =
    typedArrayTags$1[uint8ClampedTag$5] = typedArrayTags$1[uint16Tag$5] =
    typedArrayTags$1[uint32Tag$5] = true;
    typedArrayTags$1[argsTag$6] = typedArrayTags$1[arrayTag$5] =
    typedArrayTags$1[arrayBufferTag$7] = typedArrayTags$1[boolTag$9] =
    typedArrayTags$1[dataViewTag$9] = typedArrayTags$1[dateTag$7] =
    typedArrayTags$1[errorTag$5] = typedArrayTags$1[funcTag$4] =
    typedArrayTags$1[mapTag$b] = typedArrayTags$1[numberTag$9] =
    typedArrayTags$1[objectTag$9] = typedArrayTags$1[regexpTag$7] =
    typedArrayTags$1[setTag$b] = typedArrayTags$1[stringTag$9] =
    typedArrayTags$1[weakMapTag$5] = false;

    /**
     * The base implementation of `_.isTypedArray` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
     */
    function baseIsTypedArray$3(value) {
      return isObjectLike$k(value) &&
        isLength$5(value.length) && !!typedArrayTags$1[baseGetTag$g(value)];
    }

    var _baseIsTypedArray$1 = baseIsTypedArray$3;

    /**
     * The base implementation of `_.unary` without support for storing metadata.
     *
     * @private
     * @param {Function} func The function to cap arguments for.
     * @returns {Function} Returns the new capped function.
     */

    function baseUnary$7(func) {
      return function(value) {
        return func(value);
      };
    }

    var _baseUnary$1 = baseUnary$7;

    var _nodeUtil$1 = {exports: {}};

    (function (module, exports) {
    var freeGlobal = _freeGlobal$1;

    /** Detect free variable `exports`. */
    var freeExports = exports && !exports.nodeType && exports;

    /** Detect free variable `module`. */
    var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;

    /** Detect the popular CommonJS extension `module.exports`. */
    var moduleExports = freeModule && freeModule.exports === freeExports;

    /** Detect free variable `process` from Node.js. */
    var freeProcess = moduleExports && freeGlobal.process;

    /** Used to access faster Node.js helpers. */
    var nodeUtil = (function() {
      try {
        // Use `util.types` for Node.js 10+.
        var types = freeModule && freeModule.require && freeModule.require('util').types;

        if (types) {
          return types;
        }

        // Legacy `process.binding('util')` for Node.js < 10.
        return freeProcess && freeProcess.binding && freeProcess.binding('util');
      } catch (e) {}
    }());

    module.exports = nodeUtil;
    }(_nodeUtil$1, _nodeUtil$1.exports));

    var baseIsTypedArray$2 = _baseIsTypedArray$1,
        baseUnary$6 = _baseUnary$1,
        nodeUtil$5 = _nodeUtil$1.exports;

    /* Node.js helper references. */
    var nodeIsTypedArray$1 = nodeUtil$5 && nodeUtil$5.isTypedArray;

    /**
     * Checks if `value` is classified as a typed array.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
     * @example
     *
     * _.isTypedArray(new Uint8Array);
     * // => true
     *
     * _.isTypedArray([]);
     * // => false
     */
    var isTypedArray$5 = nodeIsTypedArray$1 ? baseUnary$6(nodeIsTypedArray$1) : baseIsTypedArray$2;

    var isTypedArray_1$1 = isTypedArray$5;

    var baseTimes$2 = _baseTimes$1,
        isArguments$6 = isArguments_1$1,
        isArray$z = isArray_1$1,
        isBuffer$7 = isBuffer$8.exports,
        isIndex$7 = _isIndex$1,
        isTypedArray$4 = isTypedArray_1$1;

    /** Used for built-in method references. */
    var objectProto$w = Object.prototype;

    /** Used to check objects for own properties. */
    var hasOwnProperty$p = objectProto$w.hasOwnProperty;

    /**
     * Creates an array of the enumerable property names of the array-like `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @param {boolean} inherited Specify returning inherited property names.
     * @returns {Array} Returns the array of property names.
     */
    function arrayLikeKeys$5(value, inherited) {
      var isArr = isArray$z(value),
          isArg = !isArr && isArguments$6(value),
          isBuff = !isArr && !isArg && isBuffer$7(value),
          isType = !isArr && !isArg && !isBuff && isTypedArray$4(value),
          skipIndexes = isArr || isArg || isBuff || isType,
          result = skipIndexes ? baseTimes$2(value.length, String) : [],
          length = result.length;

      for (var key in value) {
        if ((inherited || hasOwnProperty$p.call(value, key)) &&
            !(skipIndexes && (
               // Safari 9 has enumerable `arguments.length` in strict mode.
               key == 'length' ||
               // Node.js 0.10 has enumerable non-index properties on buffers.
               (isBuff && (key == 'offset' || key == 'parent')) ||
               // PhantomJS 2 has enumerable non-index properties on typed arrays.
               (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
               // Skip index properties.
               isIndex$7(key, length)
            ))) {
          result.push(key);
        }
      }
      return result;
    }

    var _arrayLikeKeys$1 = arrayLikeKeys$5;

    /** Used for built-in method references. */

    var objectProto$v = Object.prototype;

    /**
     * Checks if `value` is likely a prototype object.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
     */
    function isPrototype$9(value) {
      var Ctor = value && value.constructor,
          proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto$v;

      return value === proto;
    }

    var _isPrototype$1 = isPrototype$9;

    /**
     * This function is like
     * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
     * except that it includes inherited enumerable properties.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */

    function nativeKeysIn$3(object) {
      var result = [];
      if (object != null) {
        for (var key in Object(object)) {
          result.push(key);
        }
      }
      return result;
    }

    var _nativeKeysIn$1 = nativeKeysIn$3;

    var isObject$g = isObject_1$1,
        isPrototype$8 = _isPrototype$1,
        nativeKeysIn$2 = _nativeKeysIn$1;

    /** Used for built-in method references. */
    var objectProto$u = Object.prototype;

    /** Used to check objects for own properties. */
    var hasOwnProperty$o = objectProto$u.hasOwnProperty;

    /**
     * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function baseKeysIn$3(object) {
      if (!isObject$g(object)) {
        return nativeKeysIn$2(object);
      }
      var isProto = isPrototype$8(object),
          result = [];

      for (var key in object) {
        if (!(key == 'constructor' && (isProto || !hasOwnProperty$o.call(object, key)))) {
          result.push(key);
        }
      }
      return result;
    }

    var _baseKeysIn$1 = baseKeysIn$3;

    var arrayLikeKeys$4 = _arrayLikeKeys$1,
        baseKeysIn$2 = _baseKeysIn$1,
        isArrayLike$f = isArrayLike_1$1;

    /**
     * Creates an array of the own and inherited enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keysIn(new Foo);
     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
     */
    function keysIn$b(object) {
      return isArrayLike$f(object) ? arrayLikeKeys$4(object, true) : baseKeysIn$2(object);
    }

    var keysIn_1$1 = keysIn$b;

    var copyObject$e = _copyObject$1,
        createAssigner$4 = _createAssigner$1,
        keysIn$a = keysIn_1$1;

    /**
     * This method is like `_.assign` except that it iterates over own and
     * inherited source properties.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias extend
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.assign
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * function Bar() {
     *   this.c = 3;
     * }
     *
     * Foo.prototype.b = 2;
     * Bar.prototype.d = 4;
     *
     * _.assignIn({ 'a': 0 }, new Foo, new Bar);
     * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }
     */
    var assignIn$1 = createAssigner$4(function(object, source) {
      copyObject$e(source, keysIn$a(source), object);
    });

    var assignIn_1$1 = assignIn$1;

    var extend$3 = assignIn_1$1;

    /**
     * A specialized version of `_.map` for arrays without support for iteratee
     * shorthands.
     *
     * @private
     * @param {Array} [array] The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     */

    function arrayMap$7(array, iteratee) {
      var index = -1,
          length = array == null ? 0 : array.length,
          result = Array(length);

      while (++index < length) {
        result[index] = iteratee(array[index], index, array);
      }
      return result;
    }

    var _arrayMap$1 = arrayMap$7;

    /**
     * Removes all key-value entries from the list cache.
     *
     * @private
     * @name clear
     * @memberOf ListCache
     */

    function listCacheClear$3() {
      this.__data__ = [];
      this.size = 0;
    }

    var _listCacheClear$1 = listCacheClear$3;

    var eq$8 = eq_1$1;

    /**
     * Gets the index at which the `key` is found in `array` of key-value pairs.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {*} key The key to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     */
    function assocIndexOf$9(array, key) {
      var length = array.length;
      while (length--) {
        if (eq$8(array[length][0], key)) {
          return length;
        }
      }
      return -1;
    }

    var _assocIndexOf$1 = assocIndexOf$9;

    var assocIndexOf$8 = _assocIndexOf$1;

    /** Used for built-in method references. */
    var arrayProto$1 = Array.prototype;

    /** Built-in value references. */
    var splice$1 = arrayProto$1.splice;

    /**
     * Removes `key` and its value from the list cache.
     *
     * @private
     * @name delete
     * @memberOf ListCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function listCacheDelete$3(key) {
      var data = this.__data__,
          index = assocIndexOf$8(data, key);

      if (index < 0) {
        return false;
      }
      var lastIndex = data.length - 1;
      if (index == lastIndex) {
        data.pop();
      } else {
        splice$1.call(data, index, 1);
      }
      --this.size;
      return true;
    }

    var _listCacheDelete$1 = listCacheDelete$3;

    var assocIndexOf$7 = _assocIndexOf$1;

    /**
     * Gets the list cache value for `key`.
     *
     * @private
     * @name get
     * @memberOf ListCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function listCacheGet$3(key) {
      var data = this.__data__,
          index = assocIndexOf$7(data, key);

      return index < 0 ? undefined : data[index][1];
    }

    var _listCacheGet$1 = listCacheGet$3;

    var assocIndexOf$6 = _assocIndexOf$1;

    /**
     * Checks if a list cache value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf ListCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function listCacheHas$3(key) {
      return assocIndexOf$6(this.__data__, key) > -1;
    }

    var _listCacheHas$1 = listCacheHas$3;

    var assocIndexOf$5 = _assocIndexOf$1;

    /**
     * Sets the list cache `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf ListCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the list cache instance.
     */
    function listCacheSet$3(key, value) {
      var data = this.__data__,
          index = assocIndexOf$5(data, key);

      if (index < 0) {
        ++this.size;
        data.push([key, value]);
      } else {
        data[index][1] = value;
      }
      return this;
    }

    var _listCacheSet$1 = listCacheSet$3;

    var listCacheClear$2 = _listCacheClear$1,
        listCacheDelete$2 = _listCacheDelete$1,
        listCacheGet$2 = _listCacheGet$1,
        listCacheHas$2 = _listCacheHas$1,
        listCacheSet$2 = _listCacheSet$1;

    /**
     * Creates an list cache object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function ListCache$9(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    // Add methods to `ListCache`.
    ListCache$9.prototype.clear = listCacheClear$2;
    ListCache$9.prototype['delete'] = listCacheDelete$2;
    ListCache$9.prototype.get = listCacheGet$2;
    ListCache$9.prototype.has = listCacheHas$2;
    ListCache$9.prototype.set = listCacheSet$2;

    var _ListCache$1 = ListCache$9;

    var ListCache$8 = _ListCache$1;

    /**
     * Removes all key-value entries from the stack.
     *
     * @private
     * @name clear
     * @memberOf Stack
     */
    function stackClear$3() {
      this.__data__ = new ListCache$8;
      this.size = 0;
    }

    var _stackClear$1 = stackClear$3;

    /**
     * Removes `key` and its value from the stack.
     *
     * @private
     * @name delete
     * @memberOf Stack
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */

    function stackDelete$3(key) {
      var data = this.__data__,
          result = data['delete'](key);

      this.size = data.size;
      return result;
    }

    var _stackDelete$1 = stackDelete$3;

    /**
     * Gets the stack value for `key`.
     *
     * @private
     * @name get
     * @memberOf Stack
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */

    function stackGet$3(key) {
      return this.__data__.get(key);
    }

    var _stackGet$1 = stackGet$3;

    /**
     * Checks if a stack value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Stack
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */

    function stackHas$3(key) {
      return this.__data__.has(key);
    }

    var _stackHas$1 = stackHas$3;

    var getNative$d = _getNative$1,
        root$e = _root$1;

    /* Built-in method references that are verified to be native. */
    var Map$8 = getNative$d(root$e, 'Map');

    var _Map$1 = Map$8;

    var getNative$c = _getNative$1;

    /* Built-in method references that are verified to be native. */
    var nativeCreate$9 = getNative$c(Object, 'create');

    var _nativeCreate$1 = nativeCreate$9;

    var nativeCreate$8 = _nativeCreate$1;

    /**
     * Removes all key-value entries from the hash.
     *
     * @private
     * @name clear
     * @memberOf Hash
     */
    function hashClear$3() {
      this.__data__ = nativeCreate$8 ? nativeCreate$8(null) : {};
      this.size = 0;
    }

    var _hashClear$1 = hashClear$3;

    /**
     * Removes `key` and its value from the hash.
     *
     * @private
     * @name delete
     * @memberOf Hash
     * @param {Object} hash The hash to modify.
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */

    function hashDelete$3(key) {
      var result = this.has(key) && delete this.__data__[key];
      this.size -= result ? 1 : 0;
      return result;
    }

    var _hashDelete$1 = hashDelete$3;

    var nativeCreate$7 = _nativeCreate$1;

    /** Used to stand-in for `undefined` hash values. */
    var HASH_UNDEFINED$5 = '__lodash_hash_undefined__';

    /** Used for built-in method references. */
    var objectProto$t = Object.prototype;

    /** Used to check objects for own properties. */
    var hasOwnProperty$n = objectProto$t.hasOwnProperty;

    /**
     * Gets the hash value for `key`.
     *
     * @private
     * @name get
     * @memberOf Hash
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function hashGet$3(key) {
      var data = this.__data__;
      if (nativeCreate$7) {
        var result = data[key];
        return result === HASH_UNDEFINED$5 ? undefined : result;
      }
      return hasOwnProperty$n.call(data, key) ? data[key] : undefined;
    }

    var _hashGet$1 = hashGet$3;

    var nativeCreate$6 = _nativeCreate$1;

    /** Used for built-in method references. */
    var objectProto$s = Object.prototype;

    /** Used to check objects for own properties. */
    var hasOwnProperty$m = objectProto$s.hasOwnProperty;

    /**
     * Checks if a hash value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Hash
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function hashHas$3(key) {
      var data = this.__data__;
      return nativeCreate$6 ? (data[key] !== undefined) : hasOwnProperty$m.call(data, key);
    }

    var _hashHas$1 = hashHas$3;

    var nativeCreate$5 = _nativeCreate$1;

    /** Used to stand-in for `undefined` hash values. */
    var HASH_UNDEFINED$4 = '__lodash_hash_undefined__';

    /**
     * Sets the hash `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Hash
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the hash instance.
     */
    function hashSet$3(key, value) {
      var data = this.__data__;
      this.size += this.has(key) ? 0 : 1;
      data[key] = (nativeCreate$5 && value === undefined) ? HASH_UNDEFINED$4 : value;
      return this;
    }

    var _hashSet$1 = hashSet$3;

    var hashClear$2 = _hashClear$1,
        hashDelete$2 = _hashDelete$1,
        hashGet$2 = _hashGet$1,
        hashHas$2 = _hashHas$1,
        hashSet$2 = _hashSet$1;

    /**
     * Creates a hash object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function Hash$3(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    // Add methods to `Hash`.
    Hash$3.prototype.clear = hashClear$2;
    Hash$3.prototype['delete'] = hashDelete$2;
    Hash$3.prototype.get = hashGet$2;
    Hash$3.prototype.has = hashHas$2;
    Hash$3.prototype.set = hashSet$2;

    var _Hash$1 = Hash$3;

    var Hash$2 = _Hash$1,
        ListCache$7 = _ListCache$1,
        Map$7 = _Map$1;

    /**
     * Removes all key-value entries from the map.
     *
     * @private
     * @name clear
     * @memberOf MapCache
     */
    function mapCacheClear$3() {
      this.size = 0;
      this.__data__ = {
        'hash': new Hash$2,
        'map': new (Map$7 || ListCache$7),
        'string': new Hash$2
      };
    }

    var _mapCacheClear$1 = mapCacheClear$3;

    /**
     * Checks if `value` is suitable for use as unique object key.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
     */

    function isKeyable$3(value) {
      var type = typeof value;
      return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
        ? (value !== '__proto__')
        : (value === null);
    }

    var _isKeyable$1 = isKeyable$3;

    var isKeyable$2 = _isKeyable$1;

    /**
     * Gets the data for `map`.
     *
     * @private
     * @param {Object} map The map to query.
     * @param {string} key The reference key.
     * @returns {*} Returns the map data.
     */
    function getMapData$9(map, key) {
      var data = map.__data__;
      return isKeyable$2(key)
        ? data[typeof key == 'string' ? 'string' : 'hash']
        : data.map;
    }

    var _getMapData$1 = getMapData$9;

    var getMapData$8 = _getMapData$1;

    /**
     * Removes `key` and its value from the map.
     *
     * @private
     * @name delete
     * @memberOf MapCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function mapCacheDelete$3(key) {
      var result = getMapData$8(this, key)['delete'](key);
      this.size -= result ? 1 : 0;
      return result;
    }

    var _mapCacheDelete$1 = mapCacheDelete$3;

    var getMapData$7 = _getMapData$1;

    /**
     * Gets the map value for `key`.
     *
     * @private
     * @name get
     * @memberOf MapCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function mapCacheGet$3(key) {
      return getMapData$7(this, key).get(key);
    }

    var _mapCacheGet$1 = mapCacheGet$3;

    var getMapData$6 = _getMapData$1;

    /**
     * Checks if a map value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf MapCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function mapCacheHas$3(key) {
      return getMapData$6(this, key).has(key);
    }

    var _mapCacheHas$1 = mapCacheHas$3;

    var getMapData$5 = _getMapData$1;

    /**
     * Sets the map `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf MapCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the map cache instance.
     */
    function mapCacheSet$3(key, value) {
      var data = getMapData$5(this, key),
          size = data.size;

      data.set(key, value);
      this.size += data.size == size ? 0 : 1;
      return this;
    }

    var _mapCacheSet$1 = mapCacheSet$3;

    var mapCacheClear$2 = _mapCacheClear$1,
        mapCacheDelete$2 = _mapCacheDelete$1,
        mapCacheGet$2 = _mapCacheGet$1,
        mapCacheHas$2 = _mapCacheHas$1,
        mapCacheSet$2 = _mapCacheSet$1;

    /**
     * Creates a map cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function MapCache$7(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    // Add methods to `MapCache`.
    MapCache$7.prototype.clear = mapCacheClear$2;
    MapCache$7.prototype['delete'] = mapCacheDelete$2;
    MapCache$7.prototype.get = mapCacheGet$2;
    MapCache$7.prototype.has = mapCacheHas$2;
    MapCache$7.prototype.set = mapCacheSet$2;

    var _MapCache$1 = MapCache$7;

    var ListCache$6 = _ListCache$1,
        Map$6 = _Map$1,
        MapCache$6 = _MapCache$1;

    /** Used as the size to enable large array optimizations. */
    var LARGE_ARRAY_SIZE$3 = 200;

    /**
     * Sets the stack `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Stack
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the stack cache instance.
     */
    function stackSet$3(key, value) {
      var data = this.__data__;
      if (data instanceof ListCache$6) {
        var pairs = data.__data__;
        if (!Map$6 || (pairs.length < LARGE_ARRAY_SIZE$3 - 1)) {
          pairs.push([key, value]);
          this.size = ++data.size;
          return this;
        }
        data = this.__data__ = new MapCache$6(pairs);
      }
      data.set(key, value);
      this.size = data.size;
      return this;
    }

    var _stackSet$1 = stackSet$3;

    var ListCache$5 = _ListCache$1,
        stackClear$2 = _stackClear$1,
        stackDelete$2 = _stackDelete$1,
        stackGet$2 = _stackGet$1,
        stackHas$2 = _stackHas$1,
        stackSet$2 = _stackSet$1;

    /**
     * Creates a stack cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function Stack$7(entries) {
      var data = this.__data__ = new ListCache$5(entries);
      this.size = data.size;
    }

    // Add methods to `Stack`.
    Stack$7.prototype.clear = stackClear$2;
    Stack$7.prototype['delete'] = stackDelete$2;
    Stack$7.prototype.get = stackGet$2;
    Stack$7.prototype.has = stackHas$2;
    Stack$7.prototype.set = stackSet$2;

    var _Stack$1 = Stack$7;

    /**
     * A specialized version of `_.forEach` for arrays without support for
     * iteratee shorthands.
     *
     * @private
     * @param {Array} [array] The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns `array`.
     */

    function arrayEach$3(array, iteratee) {
      var index = -1,
          length = array == null ? 0 : array.length;

      while (++index < length) {
        if (iteratee(array[index], index, array) === false) {
          break;
        }
      }
      return array;
    }

    var _arrayEach$1 = arrayEach$3;

    /**
     * Creates a unary function that invokes `func` with its argument transformed.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {Function} transform The argument transform.
     * @returns {Function} Returns the new function.
     */

    function overArg$5(func, transform) {
      return function(arg) {
        return func(transform(arg));
      };
    }

    var _overArg$1 = overArg$5;

    var overArg$4 = _overArg$1;

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeKeys$3 = overArg$4(Object.keys, Object);

    var _nativeKeys$1 = nativeKeys$3;

    var isPrototype$7 = _isPrototype$1,
        nativeKeys$2 = _nativeKeys$1;

    /** Used for built-in method references. */
    var objectProto$r = Object.prototype;

    /** Used to check objects for own properties. */
    var hasOwnProperty$l = objectProto$r.hasOwnProperty;

    /**
     * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function baseKeys$3(object) {
      if (!isPrototype$7(object)) {
        return nativeKeys$2(object);
      }
      var result = [];
      for (var key in Object(object)) {
        if (hasOwnProperty$l.call(object, key) && key != 'constructor') {
          result.push(key);
        }
      }
      return result;
    }

    var _baseKeys$1 = baseKeys$3;

    var arrayLikeKeys$3 = _arrayLikeKeys$1,
        baseKeys$2 = _baseKeys$1,
        isArrayLike$e = isArrayLike_1$1;

    /**
     * Creates an array of the own enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects. See the
     * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
     * for more details.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keys(new Foo);
     * // => ['a', 'b'] (iteration order is not guaranteed)
     *
     * _.keys('hi');
     * // => ['0', '1']
     */
    function keys$g(object) {
      return isArrayLike$e(object) ? arrayLikeKeys$3(object) : baseKeys$2(object);
    }

    var keys_1$1 = keys$g;

    var copyObject$d = _copyObject$1,
        keys$f = keys_1$1;

    /**
     * The base implementation of `_.assign` without support for multiple sources
     * or `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */
    function baseAssign$3(object, source) {
      return object && copyObject$d(source, keys$f(source), object);
    }

    var _baseAssign$1 = baseAssign$3;

    var copyObject$c = _copyObject$1,
        keysIn$9 = keysIn_1$1;

    /**
     * The base implementation of `_.assignIn` without support for multiple sources
     * or `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */
    function baseAssignIn$3(object, source) {
      return object && copyObject$c(source, keysIn$9(source), object);
    }

    var _baseAssignIn$1 = baseAssignIn$3;

    var _cloneBuffer$1 = {exports: {}};

    (function (module, exports) {
    var root = _root$1;

    /** Detect free variable `exports`. */
    var freeExports = exports && !exports.nodeType && exports;

    /** Detect free variable `module`. */
    var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;

    /** Detect the popular CommonJS extension `module.exports`. */
    var moduleExports = freeModule && freeModule.exports === freeExports;

    /** Built-in value references. */
    var Buffer = moduleExports ? root.Buffer : undefined,
        allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined;

    /**
     * Creates a clone of  `buffer`.
     *
     * @private
     * @param {Buffer} buffer The buffer to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Buffer} Returns the cloned buffer.
     */
    function cloneBuffer(buffer, isDeep) {
      if (isDeep) {
        return buffer.slice();
      }
      var length = buffer.length,
          result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);

      buffer.copy(result);
      return result;
    }

    module.exports = cloneBuffer;
    }(_cloneBuffer$1, _cloneBuffer$1.exports));

    /**
     * Copies the values of `source` to `array`.
     *
     * @private
     * @param {Array} source The array to copy values from.
     * @param {Array} [array=[]] The array to copy values to.
     * @returns {Array} Returns `array`.
     */

    function copyArray$3(source, array) {
      var index = -1,
          length = source.length;

      array || (array = Array(length));
      while (++index < length) {
        array[index] = source[index];
      }
      return array;
    }

    var _copyArray$1 = copyArray$3;

    /**
     * A specialized version of `_.filter` for arrays without support for
     * iteratee shorthands.
     *
     * @private
     * @param {Array} [array] The array to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     */

    function arrayFilter$5(array, predicate) {
      var index = -1,
          length = array == null ? 0 : array.length,
          resIndex = 0,
          result = [];

      while (++index < length) {
        var value = array[index];
        if (predicate(value, index, array)) {
          result[resIndex++] = value;
        }
      }
      return result;
    }

    var _arrayFilter$1 = arrayFilter$5;

    /**
     * This method returns a new empty array.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {Array} Returns the new empty array.
     * @example
     *
     * var arrays = _.times(2, _.stubArray);
     *
     * console.log(arrays);
     * // => [[], []]
     *
     * console.log(arrays[0] === arrays[1]);
     * // => false
     */

    function stubArray$5() {
      return [];
    }

    var stubArray_1$1 = stubArray$5;

    var arrayFilter$4 = _arrayFilter$1,
        stubArray$4 = stubArray_1$1;

    /** Used for built-in method references. */
    var objectProto$q = Object.prototype;

    /** Built-in value references. */
    var propertyIsEnumerable$2 = objectProto$q.propertyIsEnumerable;

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeGetSymbols$3 = Object.getOwnPropertySymbols;

    /**
     * Creates an array of the own enumerable symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of symbols.
     */
    var getSymbols$7 = !nativeGetSymbols$3 ? stubArray$4 : function(object) {
      if (object == null) {
        return [];
      }
      object = Object(object);
      return arrayFilter$4(nativeGetSymbols$3(object), function(symbol) {
        return propertyIsEnumerable$2.call(object, symbol);
      });
    };

    var _getSymbols$1 = getSymbols$7;

    var copyObject$b = _copyObject$1,
        getSymbols$6 = _getSymbols$1;

    /**
     * Copies own symbols of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy symbols from.
     * @param {Object} [object={}] The object to copy symbols to.
     * @returns {Object} Returns `object`.
     */
    function copySymbols$3(source, object) {
      return copyObject$b(source, getSymbols$6(source), object);
    }

    var _copySymbols$1 = copySymbols$3;

    /**
     * Appends the elements of `values` to `array`.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {Array} values The values to append.
     * @returns {Array} Returns `array`.
     */

    function arrayPush$7(array, values) {
      var index = -1,
          length = values.length,
          offset = array.length;

      while (++index < length) {
        array[offset + index] = values[index];
      }
      return array;
    }

    var _arrayPush$1 = arrayPush$7;

    var overArg$3 = _overArg$1;

    /** Built-in value references. */
    var getPrototype$7 = overArg$3(Object.getPrototypeOf, Object);

    var _getPrototype$1 = getPrototype$7;

    var arrayPush$6 = _arrayPush$1,
        getPrototype$6 = _getPrototype$1,
        getSymbols$5 = _getSymbols$1,
        stubArray$3 = stubArray_1$1;

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeGetSymbols$2 = Object.getOwnPropertySymbols;

    /**
     * Creates an array of the own and inherited enumerable symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of symbols.
     */
    var getSymbolsIn$5 = !nativeGetSymbols$2 ? stubArray$3 : function(object) {
      var result = [];
      while (object) {
        arrayPush$6(result, getSymbols$5(object));
        object = getPrototype$6(object);
      }
      return result;
    };

    var _getSymbolsIn$1 = getSymbolsIn$5;

    var copyObject$a = _copyObject$1,
        getSymbolsIn$4 = _getSymbolsIn$1;

    /**
     * Copies own and inherited symbols of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy symbols from.
     * @param {Object} [object={}] The object to copy symbols to.
     * @returns {Object} Returns `object`.
     */
    function copySymbolsIn$3(source, object) {
      return copyObject$a(source, getSymbolsIn$4(source), object);
    }

    var _copySymbolsIn$1 = copySymbolsIn$3;

    var arrayPush$5 = _arrayPush$1,
        isArray$y = isArray_1$1;

    /**
     * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
     * `keysFunc` and `symbolsFunc` to get the enumerable property names and
     * symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @param {Function} symbolsFunc The function to get the symbols of `object`.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function baseGetAllKeys$5(object, keysFunc, symbolsFunc) {
      var result = keysFunc(object);
      return isArray$y(object) ? result : arrayPush$5(result, symbolsFunc(object));
    }

    var _baseGetAllKeys$1 = baseGetAllKeys$5;

    var baseGetAllKeys$4 = _baseGetAllKeys$1,
        getSymbols$4 = _getSymbols$1,
        keys$e = keys_1$1;

    /**
     * Creates an array of own enumerable property names and symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function getAllKeys$5(object) {
      return baseGetAllKeys$4(object, keys$e, getSymbols$4);
    }

    var _getAllKeys$1 = getAllKeys$5;

    var baseGetAllKeys$3 = _baseGetAllKeys$1,
        getSymbolsIn$3 = _getSymbolsIn$1,
        keysIn$8 = keysIn_1$1;

    /**
     * Creates an array of own and inherited enumerable property names and
     * symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function getAllKeysIn$5(object) {
      return baseGetAllKeys$3(object, keysIn$8, getSymbolsIn$3);
    }

    var _getAllKeysIn$1 = getAllKeysIn$5;

    var getNative$b = _getNative$1,
        root$d = _root$1;

    /* Built-in method references that are verified to be native. */
    var DataView$3 = getNative$b(root$d, 'DataView');

    var _DataView$1 = DataView$3;

    var getNative$a = _getNative$1,
        root$c = _root$1;

    /* Built-in method references that are verified to be native. */
    var Promise$4 = getNative$a(root$c, 'Promise');

    var _Promise$1 = Promise$4;

    var getNative$9 = _getNative$1,
        root$b = _root$1;

    /* Built-in method references that are verified to be native. */
    var Set$6 = getNative$9(root$b, 'Set');

    var _Set$1 = Set$6;

    var getNative$8 = _getNative$1,
        root$a = _root$1;

    /* Built-in method references that are verified to be native. */
    var WeakMap$4 = getNative$8(root$a, 'WeakMap');

    var _WeakMap$1 = WeakMap$4;

    var DataView$2 = _DataView$1,
        Map$5 = _Map$1,
        Promise$3 = _Promise$1,
        Set$5 = _Set$1,
        WeakMap$3 = _WeakMap$1,
        baseGetTag$f = _baseGetTag$1,
        toSource$3 = _toSource$1;

    /** `Object#toString` result references. */
    var mapTag$a = '[object Map]',
        objectTag$8 = '[object Object]',
        promiseTag$1 = '[object Promise]',
        setTag$a = '[object Set]',
        weakMapTag$4 = '[object WeakMap]';

    var dataViewTag$8 = '[object DataView]';

    /** Used to detect maps, sets, and weakmaps. */
    var dataViewCtorString$1 = toSource$3(DataView$2),
        mapCtorString$1 = toSource$3(Map$5),
        promiseCtorString$1 = toSource$3(Promise$3),
        setCtorString$1 = toSource$3(Set$5),
        weakMapCtorString$1 = toSource$3(WeakMap$3);

    /**
     * Gets the `toStringTag` of `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */
    var getTag$9 = baseGetTag$f;

    // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
    if ((DataView$2 && getTag$9(new DataView$2(new ArrayBuffer(1))) != dataViewTag$8) ||
        (Map$5 && getTag$9(new Map$5) != mapTag$a) ||
        (Promise$3 && getTag$9(Promise$3.resolve()) != promiseTag$1) ||
        (Set$5 && getTag$9(new Set$5) != setTag$a) ||
        (WeakMap$3 && getTag$9(new WeakMap$3) != weakMapTag$4)) {
      getTag$9 = function(value) {
        var result = baseGetTag$f(value),
            Ctor = result == objectTag$8 ? value.constructor : undefined,
            ctorString = Ctor ? toSource$3(Ctor) : '';

        if (ctorString) {
          switch (ctorString) {
            case dataViewCtorString$1: return dataViewTag$8;
            case mapCtorString$1: return mapTag$a;
            case promiseCtorString$1: return promiseTag$1;
            case setCtorString$1: return setTag$a;
            case weakMapCtorString$1: return weakMapTag$4;
          }
        }
        return result;
      };
    }

    var _getTag$1 = getTag$9;

    /** Used for built-in method references. */

    var objectProto$p = Object.prototype;

    /** Used to check objects for own properties. */
    var hasOwnProperty$k = objectProto$p.hasOwnProperty;

    /**
     * Initializes an array clone.
     *
     * @private
     * @param {Array} array The array to clone.
     * @returns {Array} Returns the initialized clone.
     */
    function initCloneArray$3(array) {
      var length = array.length,
          result = new array.constructor(length);

      // Add properties assigned by `RegExp#exec`.
      if (length && typeof array[0] == 'string' && hasOwnProperty$k.call(array, 'index')) {
        result.index = array.index;
        result.input = array.input;
      }
      return result;
    }

    var _initCloneArray$1 = initCloneArray$3;

    var root$9 = _root$1;

    /** Built-in value references. */
    var Uint8Array$6 = root$9.Uint8Array;

    var _Uint8Array$1 = Uint8Array$6;

    var Uint8Array$5 = _Uint8Array$1;

    /**
     * Creates a clone of `arrayBuffer`.
     *
     * @private
     * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
     * @returns {ArrayBuffer} Returns the cloned array buffer.
     */
    function cloneArrayBuffer$7(arrayBuffer) {
      var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
      new Uint8Array$5(result).set(new Uint8Array$5(arrayBuffer));
      return result;
    }

    var _cloneArrayBuffer$1 = cloneArrayBuffer$7;

    var cloneArrayBuffer$6 = _cloneArrayBuffer$1;

    /**
     * Creates a clone of `dataView`.
     *
     * @private
     * @param {Object} dataView The data view to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned data view.
     */
    function cloneDataView$3(dataView, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer$6(dataView.buffer) : dataView.buffer;
      return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
    }

    var _cloneDataView$1 = cloneDataView$3;

    /** Used to match `RegExp` flags from their coerced string values. */

    var reFlags$1 = /\w*$/;

    /**
     * Creates a clone of `regexp`.
     *
     * @private
     * @param {Object} regexp The regexp to clone.
     * @returns {Object} Returns the cloned regexp.
     */
    function cloneRegExp$3(regexp) {
      var result = new regexp.constructor(regexp.source, reFlags$1.exec(regexp));
      result.lastIndex = regexp.lastIndex;
      return result;
    }

    var _cloneRegExp$1 = cloneRegExp$3;

    var Symbol$b = _Symbol$1;

    /** Used to convert symbols to primitives and strings. */
    var symbolProto$5 = Symbol$b ? Symbol$b.prototype : undefined,
        symbolValueOf$3 = symbolProto$5 ? symbolProto$5.valueOf : undefined;

    /**
     * Creates a clone of the `symbol` object.
     *
     * @private
     * @param {Object} symbol The symbol object to clone.
     * @returns {Object} Returns the cloned symbol object.
     */
    function cloneSymbol$3(symbol) {
      return symbolValueOf$3 ? Object(symbolValueOf$3.call(symbol)) : {};
    }

    var _cloneSymbol$1 = cloneSymbol$3;

    var cloneArrayBuffer$5 = _cloneArrayBuffer$1;

    /**
     * Creates a clone of `typedArray`.
     *
     * @private
     * @param {Object} typedArray The typed array to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned typed array.
     */
    function cloneTypedArray$3(typedArray, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer$5(typedArray.buffer) : typedArray.buffer;
      return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
    }

    var _cloneTypedArray$1 = cloneTypedArray$3;

    var cloneArrayBuffer$4 = _cloneArrayBuffer$1,
        cloneDataView$2 = _cloneDataView$1,
        cloneRegExp$2 = _cloneRegExp$1,
        cloneSymbol$2 = _cloneSymbol$1,
        cloneTypedArray$2 = _cloneTypedArray$1;

    /** `Object#toString` result references. */
    var boolTag$8 = '[object Boolean]',
        dateTag$6 = '[object Date]',
        mapTag$9 = '[object Map]',
        numberTag$8 = '[object Number]',
        regexpTag$6 = '[object RegExp]',
        setTag$9 = '[object Set]',
        stringTag$8 = '[object String]',
        symbolTag$7 = '[object Symbol]';

    var arrayBufferTag$6 = '[object ArrayBuffer]',
        dataViewTag$7 = '[object DataView]',
        float32Tag$4 = '[object Float32Array]',
        float64Tag$4 = '[object Float64Array]',
        int8Tag$4 = '[object Int8Array]',
        int16Tag$4 = '[object Int16Array]',
        int32Tag$4 = '[object Int32Array]',
        uint8Tag$4 = '[object Uint8Array]',
        uint8ClampedTag$4 = '[object Uint8ClampedArray]',
        uint16Tag$4 = '[object Uint16Array]',
        uint32Tag$4 = '[object Uint32Array]';

    /**
     * Initializes an object clone based on its `toStringTag`.
     *
     * **Note:** This function only supports cloning values with tags of
     * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
     *
     * @private
     * @param {Object} object The object to clone.
     * @param {string} tag The `toStringTag` of the object to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the initialized clone.
     */
    function initCloneByTag$3(object, tag, isDeep) {
      var Ctor = object.constructor;
      switch (tag) {
        case arrayBufferTag$6:
          return cloneArrayBuffer$4(object);

        case boolTag$8:
        case dateTag$6:
          return new Ctor(+object);

        case dataViewTag$7:
          return cloneDataView$2(object, isDeep);

        case float32Tag$4: case float64Tag$4:
        case int8Tag$4: case int16Tag$4: case int32Tag$4:
        case uint8Tag$4: case uint8ClampedTag$4: case uint16Tag$4: case uint32Tag$4:
          return cloneTypedArray$2(object, isDeep);

        case mapTag$9:
          return new Ctor;

        case numberTag$8:
        case stringTag$8:
          return new Ctor(object);

        case regexpTag$6:
          return cloneRegExp$2(object);

        case setTag$9:
          return new Ctor;

        case symbolTag$7:
          return cloneSymbol$2(object);
      }
    }

    var _initCloneByTag$1 = initCloneByTag$3;

    var isObject$f = isObject_1$1;

    /** Built-in value references. */
    var objectCreate$1 = Object.create;

    /**
     * The base implementation of `_.create` without support for assigning
     * properties to the created object.
     *
     * @private
     * @param {Object} proto The object to inherit from.
     * @returns {Object} Returns the new object.
     */
    var baseCreate$3 = (function() {
      function object() {}
      return function(proto) {
        if (!isObject$f(proto)) {
          return {};
        }
        if (objectCreate$1) {
          return objectCreate$1(proto);
        }
        object.prototype = proto;
        var result = new object;
        object.prototype = undefined;
        return result;
      };
    }());

    var _baseCreate$1 = baseCreate$3;

    var baseCreate$2 = _baseCreate$1,
        getPrototype$5 = _getPrototype$1,
        isPrototype$6 = _isPrototype$1;

    /**
     * Initializes an object clone.
     *
     * @private
     * @param {Object} object The object to clone.
     * @returns {Object} Returns the initialized clone.
     */
    function initCloneObject$3(object) {
      return (typeof object.constructor == 'function' && !isPrototype$6(object))
        ? baseCreate$2(getPrototype$5(object))
        : {};
    }

    var _initCloneObject$1 = initCloneObject$3;

    var getTag$8 = _getTag$1,
        isObjectLike$j = isObjectLike_1$1;

    /** `Object#toString` result references. */
    var mapTag$8 = '[object Map]';

    /**
     * The base implementation of `_.isMap` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
     */
    function baseIsMap$3(value) {
      return isObjectLike$j(value) && getTag$8(value) == mapTag$8;
    }

    var _baseIsMap$1 = baseIsMap$3;

    var baseIsMap$2 = _baseIsMap$1,
        baseUnary$5 = _baseUnary$1,
        nodeUtil$4 = _nodeUtil$1.exports;

    /* Node.js helper references. */
    var nodeIsMap$1 = nodeUtil$4 && nodeUtil$4.isMap;

    /**
     * Checks if `value` is classified as a `Map` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
     * @example
     *
     * _.isMap(new Map);
     * // => true
     *
     * _.isMap(new WeakMap);
     * // => false
     */
    var isMap$3 = nodeIsMap$1 ? baseUnary$5(nodeIsMap$1) : baseIsMap$2;

    var isMap_1$1 = isMap$3;

    var getTag$7 = _getTag$1,
        isObjectLike$i = isObjectLike_1$1;

    /** `Object#toString` result references. */
    var setTag$8 = '[object Set]';

    /**
     * The base implementation of `_.isSet` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
     */
    function baseIsSet$3(value) {
      return isObjectLike$i(value) && getTag$7(value) == setTag$8;
    }

    var _baseIsSet$1 = baseIsSet$3;

    var baseIsSet$2 = _baseIsSet$1,
        baseUnary$4 = _baseUnary$1,
        nodeUtil$3 = _nodeUtil$1.exports;

    /* Node.js helper references. */
    var nodeIsSet$1 = nodeUtil$3 && nodeUtil$3.isSet;

    /**
     * Checks if `value` is classified as a `Set` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
     * @example
     *
     * _.isSet(new Set);
     * // => true
     *
     * _.isSet(new WeakSet);
     * // => false
     */
    var isSet$3 = nodeIsSet$1 ? baseUnary$4(nodeIsSet$1) : baseIsSet$2;

    var isSet_1$1 = isSet$3;

    var Stack$6 = _Stack$1,
        arrayEach$2 = _arrayEach$1,
        assignValue$7 = _assignValue$1,
        baseAssign$2 = _baseAssign$1,
        baseAssignIn$2 = _baseAssignIn$1,
        cloneBuffer$1 = _cloneBuffer$1.exports,
        copyArray$2 = _copyArray$1,
        copySymbols$2 = _copySymbols$1,
        copySymbolsIn$2 = _copySymbolsIn$1,
        getAllKeys$4 = _getAllKeys$1,
        getAllKeysIn$4 = _getAllKeysIn$1,
        getTag$6 = _getTag$1,
        initCloneArray$2 = _initCloneArray$1,
        initCloneByTag$2 = _initCloneByTag$1,
        initCloneObject$2 = _initCloneObject$1,
        isArray$x = isArray_1$1,
        isBuffer$6 = isBuffer$8.exports,
        isMap$2 = isMap_1$1,
        isObject$e = isObject_1$1,
        isSet$2 = isSet_1$1,
        keys$d = keys_1$1,
        keysIn$7 = keysIn_1$1;

    /** Used to compose bitmasks for cloning. */
    var CLONE_DEEP_FLAG$3 = 1,
        CLONE_FLAT_FLAG$3 = 2,
        CLONE_SYMBOLS_FLAG$5 = 4;

    /** `Object#toString` result references. */
    var argsTag$5 = '[object Arguments]',
        arrayTag$4 = '[object Array]',
        boolTag$7 = '[object Boolean]',
        dateTag$5 = '[object Date]',
        errorTag$4 = '[object Error]',
        funcTag$3 = '[object Function]',
        genTag$2 = '[object GeneratorFunction]',
        mapTag$7 = '[object Map]',
        numberTag$7 = '[object Number]',
        objectTag$7 = '[object Object]',
        regexpTag$5 = '[object RegExp]',
        setTag$7 = '[object Set]',
        stringTag$7 = '[object String]',
        symbolTag$6 = '[object Symbol]',
        weakMapTag$3 = '[object WeakMap]';

    var arrayBufferTag$5 = '[object ArrayBuffer]',
        dataViewTag$6 = '[object DataView]',
        float32Tag$3 = '[object Float32Array]',
        float64Tag$3 = '[object Float64Array]',
        int8Tag$3 = '[object Int8Array]',
        int16Tag$3 = '[object Int16Array]',
        int32Tag$3 = '[object Int32Array]',
        uint8Tag$3 = '[object Uint8Array]',
        uint8ClampedTag$3 = '[object Uint8ClampedArray]',
        uint16Tag$3 = '[object Uint16Array]',
        uint32Tag$3 = '[object Uint32Array]';

    /** Used to identify `toStringTag` values supported by `_.clone`. */
    var cloneableTags$1 = {};
    cloneableTags$1[argsTag$5] = cloneableTags$1[arrayTag$4] =
    cloneableTags$1[arrayBufferTag$5] = cloneableTags$1[dataViewTag$6] =
    cloneableTags$1[boolTag$7] = cloneableTags$1[dateTag$5] =
    cloneableTags$1[float32Tag$3] = cloneableTags$1[float64Tag$3] =
    cloneableTags$1[int8Tag$3] = cloneableTags$1[int16Tag$3] =
    cloneableTags$1[int32Tag$3] = cloneableTags$1[mapTag$7] =
    cloneableTags$1[numberTag$7] = cloneableTags$1[objectTag$7] =
    cloneableTags$1[regexpTag$5] = cloneableTags$1[setTag$7] =
    cloneableTags$1[stringTag$7] = cloneableTags$1[symbolTag$6] =
    cloneableTags$1[uint8Tag$3] = cloneableTags$1[uint8ClampedTag$3] =
    cloneableTags$1[uint16Tag$3] = cloneableTags$1[uint32Tag$3] = true;
    cloneableTags$1[errorTag$4] = cloneableTags$1[funcTag$3] =
    cloneableTags$1[weakMapTag$3] = false;

    /**
     * The base implementation of `_.clone` and `_.cloneDeep` which tracks
     * traversed objects.
     *
     * @private
     * @param {*} value The value to clone.
     * @param {boolean} bitmask The bitmask flags.
     *  1 - Deep clone
     *  2 - Flatten inherited properties
     *  4 - Clone symbols
     * @param {Function} [customizer] The function to customize cloning.
     * @param {string} [key] The key of `value`.
     * @param {Object} [object] The parent object of `value`.
     * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
     * @returns {*} Returns the cloned value.
     */
    function baseClone$5(value, bitmask, customizer, key, object, stack) {
      var result,
          isDeep = bitmask & CLONE_DEEP_FLAG$3,
          isFlat = bitmask & CLONE_FLAT_FLAG$3,
          isFull = bitmask & CLONE_SYMBOLS_FLAG$5;

      if (customizer) {
        result = object ? customizer(value, key, object, stack) : customizer(value);
      }
      if (result !== undefined) {
        return result;
      }
      if (!isObject$e(value)) {
        return value;
      }
      var isArr = isArray$x(value);
      if (isArr) {
        result = initCloneArray$2(value);
        if (!isDeep) {
          return copyArray$2(value, result);
        }
      } else {
        var tag = getTag$6(value),
            isFunc = tag == funcTag$3 || tag == genTag$2;

        if (isBuffer$6(value)) {
          return cloneBuffer$1(value, isDeep);
        }
        if (tag == objectTag$7 || tag == argsTag$5 || (isFunc && !object)) {
          result = (isFlat || isFunc) ? {} : initCloneObject$2(value);
          if (!isDeep) {
            return isFlat
              ? copySymbolsIn$2(value, baseAssignIn$2(result, value))
              : copySymbols$2(value, baseAssign$2(result, value));
          }
        } else {
          if (!cloneableTags$1[tag]) {
            return object ? value : {};
          }
          result = initCloneByTag$2(value, tag, isDeep);
        }
      }
      // Check for circular references and return its corresponding clone.
      stack || (stack = new Stack$6);
      var stacked = stack.get(value);
      if (stacked) {
        return stacked;
      }
      stack.set(value, result);

      if (isSet$2(value)) {
        value.forEach(function(subValue) {
          result.add(baseClone$5(subValue, bitmask, customizer, subValue, value, stack));
        });
      } else if (isMap$2(value)) {
        value.forEach(function(subValue, key) {
          result.set(key, baseClone$5(subValue, bitmask, customizer, key, value, stack));
        });
      }

      var keysFunc = isFull
        ? (isFlat ? getAllKeysIn$4 : getAllKeys$4)
        : (isFlat ? keysIn$7 : keys$d);

      var props = isArr ? undefined : keysFunc(value);
      arrayEach$2(props || value, function(subValue, key) {
        if (props) {
          key = subValue;
          subValue = value[key];
        }
        // Recursively populate clone (susceptible to call stack limits).
        assignValue$7(result, key, baseClone$5(subValue, bitmask, customizer, key, value, stack));
      });
      return result;
    }

    var _baseClone$1 = baseClone$5;

    var baseGetTag$e = _baseGetTag$1,
        isObjectLike$h = isObjectLike_1$1;

    /** `Object#toString` result references. */
    var symbolTag$5 = '[object Symbol]';

    /**
     * Checks if `value` is classified as a `Symbol` primitive or object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
     * @example
     *
     * _.isSymbol(Symbol.iterator);
     * // => true
     *
     * _.isSymbol('abc');
     * // => false
     */
    function isSymbol$9(value) {
      return typeof value == 'symbol' ||
        (isObjectLike$h(value) && baseGetTag$e(value) == symbolTag$5);
    }

    var isSymbol_1$1 = isSymbol$9;

    var isArray$w = isArray_1$1,
        isSymbol$8 = isSymbol_1$1;

    /** Used to match property names within property paths. */
    var reIsDeepProp$1 = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
        reIsPlainProp$1 = /^\w*$/;

    /**
     * Checks if `value` is a property name and not a property path.
     *
     * @private
     * @param {*} value The value to check.
     * @param {Object} [object] The object to query keys on.
     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
     */
    function isKey$7(value, object) {
      if (isArray$w(value)) {
        return false;
      }
      var type = typeof value;
      if (type == 'number' || type == 'symbol' || type == 'boolean' ||
          value == null || isSymbol$8(value)) {
        return true;
      }
      return reIsPlainProp$1.test(value) || !reIsDeepProp$1.test(value) ||
        (object != null && value in Object(object));
    }

    var _isKey$1 = isKey$7;

    var MapCache$5 = _MapCache$1;

    /** Error message constants. */
    var FUNC_ERROR_TEXT$1 = 'Expected a function';

    /**
     * Creates a function that memoizes the result of `func`. If `resolver` is
     * provided, it determines the cache key for storing the result based on the
     * arguments provided to the memoized function. By default, the first argument
     * provided to the memoized function is used as the map cache key. The `func`
     * is invoked with the `this` binding of the memoized function.
     *
     * **Note:** The cache is exposed as the `cache` property on the memoized
     * function. Its creation may be customized by replacing the `_.memoize.Cache`
     * constructor with one whose instances implement the
     * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
     * method interface of `clear`, `delete`, `get`, `has`, and `set`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to have its output memoized.
     * @param {Function} [resolver] The function to resolve the cache key.
     * @returns {Function} Returns the new memoized function.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     * var other = { 'c': 3, 'd': 4 };
     *
     * var values = _.memoize(_.values);
     * values(object);
     * // => [1, 2]
     *
     * values(other);
     * // => [3, 4]
     *
     * object.a = 2;
     * values(object);
     * // => [1, 2]
     *
     * // Modify the result cache.
     * values.cache.set(object, ['a', 'b']);
     * values(object);
     * // => ['a', 'b']
     *
     * // Replace `_.memoize.Cache`.
     * _.memoize.Cache = WeakMap;
     */
    function memoize$3(func, resolver) {
      if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {
        throw new TypeError(FUNC_ERROR_TEXT$1);
      }
      var memoized = function() {
        var args = arguments,
            key = resolver ? resolver.apply(this, args) : args[0],
            cache = memoized.cache;

        if (cache.has(key)) {
          return cache.get(key);
        }
        var result = func.apply(this, args);
        memoized.cache = cache.set(key, result) || cache;
        return result;
      };
      memoized.cache = new (memoize$3.Cache || MapCache$5);
      return memoized;
    }

    // Expose `MapCache`.
    memoize$3.Cache = MapCache$5;

    var memoize_1$1 = memoize$3;

    var memoize$2 = memoize_1$1;

    /** Used as the maximum memoize cache size. */
    var MAX_MEMOIZE_SIZE$1 = 500;

    /**
     * A specialized version of `_.memoize` which clears the memoized function's
     * cache when it exceeds `MAX_MEMOIZE_SIZE`.
     *
     * @private
     * @param {Function} func The function to have its output memoized.
     * @returns {Function} Returns the new memoized function.
     */
    function memoizeCapped$3(func) {
      var result = memoize$2(func, function(key) {
        if (cache.size === MAX_MEMOIZE_SIZE$1) {
          cache.clear();
        }
        return key;
      });

      var cache = result.cache;
      return result;
    }

    var _memoizeCapped$1 = memoizeCapped$3;

    var memoizeCapped$2 = _memoizeCapped$1;

    /** Used to match property names within property paths. */
    var rePropName$1 = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

    /** Used to match backslashes in property paths. */
    var reEscapeChar$1 = /\\(\\)?/g;

    /**
     * Converts `string` to a property path array.
     *
     * @private
     * @param {string} string The string to convert.
     * @returns {Array} Returns the property path array.
     */
    var stringToPath$3 = memoizeCapped$2(function(string) {
      var result = [];
      if (string.charCodeAt(0) === 46 /* . */) {
        result.push('');
      }
      string.replace(rePropName$1, function(match, number, quote, subString) {
        result.push(quote ? subString.replace(reEscapeChar$1, '$1') : (number || match));
      });
      return result;
    });

    var _stringToPath$1 = stringToPath$3;

    var Symbol$a = _Symbol$1,
        arrayMap$6 = _arrayMap$1,
        isArray$v = isArray_1$1,
        isSymbol$7 = isSymbol_1$1;

    /** Used as references for various `Number` constants. */
    var INFINITY$7 = 1 / 0;

    /** Used to convert symbols to primitives and strings. */
    var symbolProto$4 = Symbol$a ? Symbol$a.prototype : undefined,
        symbolToString$1 = symbolProto$4 ? symbolProto$4.toString : undefined;

    /**
     * The base implementation of `_.toString` which doesn't convert nullish
     * values to empty strings.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {string} Returns the string.
     */
    function baseToString$3(value) {
      // Exit early for strings to avoid a performance hit in some environments.
      if (typeof value == 'string') {
        return value;
      }
      if (isArray$v(value)) {
        // Recursively convert values (susceptible to call stack limits).
        return arrayMap$6(value, baseToString$3) + '';
      }
      if (isSymbol$7(value)) {
        return symbolToString$1 ? symbolToString$1.call(value) : '';
      }
      var result = (value + '');
      return (result == '0' && (1 / value) == -INFINITY$7) ? '-0' : result;
    }

    var _baseToString$1 = baseToString$3;

    var baseToString$2 = _baseToString$1;

    /**
     * Converts `value` to a string. An empty string is returned for `null`
     * and `undefined` values. The sign of `-0` is preserved.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.toString(null);
     * // => ''
     *
     * _.toString(-0);
     * // => '-0'
     *
     * _.toString([1, 2, 3]);
     * // => '1,2,3'
     */
    function toString$4(value) {
      return value == null ? '' : baseToString$2(value);
    }

    var toString_1$1 = toString$4;

    var isArray$u = isArray_1$1,
        isKey$6 = _isKey$1,
        stringToPath$2 = _stringToPath$1,
        toString$3 = toString_1$1;

    /**
     * Casts `value` to a path array if it's not one.
     *
     * @private
     * @param {*} value The value to inspect.
     * @param {Object} [object] The object to query keys on.
     * @returns {Array} Returns the cast property path array.
     */
    function castPath$b(value, object) {
      if (isArray$u(value)) {
        return value;
      }
      return isKey$6(value, object) ? [value] : stringToPath$2(toString$3(value));
    }

    var _castPath$1 = castPath$b;

    /**
     * Gets the last element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the last element of `array`.
     * @example
     *
     * _.last([1, 2, 3]);
     * // => 3
     */

    function last$7(array) {
      var length = array == null ? 0 : array.length;
      return length ? array[length - 1] : undefined;
    }

    var last_1$1 = last$7;

    var isSymbol$6 = isSymbol_1$1;

    /** Used as references for various `Number` constants. */
    var INFINITY$6 = 1 / 0;

    /**
     * Converts `value` to a string key if it's not a string or symbol.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {string|symbol} Returns the key.
     */
    function toKey$d(value) {
      if (typeof value == 'string' || isSymbol$6(value)) {
        return value;
      }
      var result = (value + '');
      return (result == '0' && (1 / value) == -INFINITY$6) ? '-0' : result;
    }

    var _toKey$1 = toKey$d;

    var castPath$a = _castPath$1,
        toKey$c = _toKey$1;

    /**
     * The base implementation of `_.get` without support for default values.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @returns {*} Returns the resolved value.
     */
    function baseGet$7(object, path) {
      path = castPath$a(path, object);

      var index = 0,
          length = path.length;

      while (object != null && index < length) {
        object = object[toKey$c(path[index++])];
      }
      return (index && index == length) ? object : undefined;
    }

    var _baseGet$1 = baseGet$7;

    /**
     * The base implementation of `_.slice` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */

    function baseSlice$3(array, start, end) {
      var index = -1,
          length = array.length;

      if (start < 0) {
        start = -start > length ? 0 : (length + start);
      }
      end = end > length ? length : end;
      if (end < 0) {
        end += length;
      }
      length = start > end ? 0 : ((end - start) >>> 0);
      start >>>= 0;

      var result = Array(length);
      while (++index < length) {
        result[index] = array[index + start];
      }
      return result;
    }

    var _baseSlice$1 = baseSlice$3;

    var baseGet$6 = _baseGet$1,
        baseSlice$2 = _baseSlice$1;

    /**
     * Gets the parent value at `path` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array} path The path to get the parent value of.
     * @returns {*} Returns the parent value.
     */
    function parent$3(object, path) {
      return path.length < 2 ? object : baseGet$6(object, baseSlice$2(path, 0, -1));
    }

    var _parent$1 = parent$3;

    var castPath$9 = _castPath$1,
        last$6 = last_1$1,
        parent$2 = _parent$1,
        toKey$b = _toKey$1;

    /**
     * The base implementation of `_.unset`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The property path to unset.
     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
     */
    function baseUnset$3(object, path) {
      path = castPath$9(path, object);
      object = parent$2(object, path);
      return object == null || delete object[toKey$b(last$6(path))];
    }

    var _baseUnset$1 = baseUnset$3;

    var baseGetTag$d = _baseGetTag$1,
        getPrototype$4 = _getPrototype$1,
        isObjectLike$g = isObjectLike_1$1;

    /** `Object#toString` result references. */
    var objectTag$6 = '[object Object]';

    /** Used for built-in method references. */
    var funcProto$3 = Function.prototype,
        objectProto$o = Object.prototype;

    /** Used to resolve the decompiled source of functions. */
    var funcToString$3 = funcProto$3.toString;

    /** Used to check objects for own properties. */
    var hasOwnProperty$j = objectProto$o.hasOwnProperty;

    /** Used to infer the `Object` constructor. */
    var objectCtorString$1 = funcToString$3.call(Object);

    /**
     * Checks if `value` is a plain object, that is, an object created by the
     * `Object` constructor or one with a `[[Prototype]]` of `null`.
     *
     * @static
     * @memberOf _
     * @since 0.8.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * _.isPlainObject(new Foo);
     * // => false
     *
     * _.isPlainObject([1, 2, 3]);
     * // => false
     *
     * _.isPlainObject({ 'x': 0, 'y': 0 });
     * // => true
     *
     * _.isPlainObject(Object.create(null));
     * // => true
     */
    function isPlainObject$4(value) {
      if (!isObjectLike$g(value) || baseGetTag$d(value) != objectTag$6) {
        return false;
      }
      var proto = getPrototype$4(value);
      if (proto === null) {
        return true;
      }
      var Ctor = hasOwnProperty$j.call(proto, 'constructor') && proto.constructor;
      return typeof Ctor == 'function' && Ctor instanceof Ctor &&
        funcToString$3.call(Ctor) == objectCtorString$1;
    }

    var isPlainObject_1$1 = isPlainObject$4;

    var isPlainObject$3 = isPlainObject_1$1;

    /**
     * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain
     * objects.
     *
     * @private
     * @param {*} value The value to inspect.
     * @param {string} key The key of the property to inspect.
     * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.
     */
    function customOmitClone$3(value) {
      return isPlainObject$3(value) ? undefined : value;
    }

    var _customOmitClone$1 = customOmitClone$3;

    var Symbol$9 = _Symbol$1,
        isArguments$5 = isArguments_1$1,
        isArray$t = isArray_1$1;

    /** Built-in value references. */
    var spreadableSymbol$1 = Symbol$9 ? Symbol$9.isConcatSpreadable : undefined;

    /**
     * Checks if `value` is a flattenable `arguments` object or array.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
     */
    function isFlattenable$3(value) {
      return isArray$t(value) || isArguments$5(value) ||
        !!(spreadableSymbol$1 && value && value[spreadableSymbol$1]);
    }

    var _isFlattenable$1 = isFlattenable$3;

    var arrayPush$4 = _arrayPush$1,
        isFlattenable$2 = _isFlattenable$1;

    /**
     * The base implementation of `_.flatten` with support for restricting flattening.
     *
     * @private
     * @param {Array} array The array to flatten.
     * @param {number} depth The maximum recursion depth.
     * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
     * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
     * @param {Array} [result=[]] The initial result value.
     * @returns {Array} Returns the new flattened array.
     */
    function baseFlatten$3(array, depth, predicate, isStrict, result) {
      var index = -1,
          length = array.length;

      predicate || (predicate = isFlattenable$2);
      result || (result = []);

      while (++index < length) {
        var value = array[index];
        if (depth > 0 && predicate(value)) {
          if (depth > 1) {
            // Recursively flatten arrays (susceptible to call stack limits).
            baseFlatten$3(value, depth - 1, predicate, isStrict, result);
          } else {
            arrayPush$4(result, value);
          }
        } else if (!isStrict) {
          result[result.length] = value;
        }
      }
      return result;
    }

    var _baseFlatten$1 = baseFlatten$3;

    var baseFlatten$2 = _baseFlatten$1;

    /**
     * Flattens `array` a single level deep.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flatten([1, [2, [3, [4]], 5]]);
     * // => [1, 2, [3, [4]], 5]
     */
    function flatten$3(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseFlatten$2(array, 1) : [];
    }

    var flatten_1$1 = flatten$3;

    var flatten$2 = flatten_1$1,
        overRest$3 = _overRest$1,
        setToString$3 = _setToString$1;

    /**
     * A specialized version of `baseRest` which flattens the rest array.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @returns {Function} Returns the new function.
     */
    function flatRest$3(func) {
      return setToString$3(overRest$3(func, undefined, flatten$2), func + '');
    }

    var _flatRest$1 = flatRest$3;

    var arrayMap$5 = _arrayMap$1,
        baseClone$4 = _baseClone$1,
        baseUnset$2 = _baseUnset$1,
        castPath$8 = _castPath$1,
        copyObject$9 = _copyObject$1,
        customOmitClone$2 = _customOmitClone$1,
        flatRest$2 = _flatRest$1,
        getAllKeysIn$3 = _getAllKeysIn$1;

    /** Used to compose bitmasks for cloning. */
    var CLONE_DEEP_FLAG$2 = 1,
        CLONE_FLAT_FLAG$2 = 2,
        CLONE_SYMBOLS_FLAG$4 = 4;

    /**
     * The opposite of `_.pick`; this method creates an object composed of the
     * own and inherited enumerable property paths of `object` that are not omitted.
     *
     * **Note:** This method is considerably slower than `_.pick`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {...(string|string[])} [paths] The property paths to omit.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.omit(object, ['a', 'c']);
     * // => { 'b': '2' }
     */
    var omit$1 = flatRest$2(function(object, paths) {
      var result = {};
      if (object == null) {
        return result;
      }
      var isDeep = false;
      paths = arrayMap$5(paths, function(path) {
        path = castPath$8(path, object);
        isDeep || (isDeep = path.length > 1);
        return path;
      });
      copyObject$9(object, getAllKeysIn$3(object), result);
      if (isDeep) {
        result = baseClone$4(result, CLONE_DEEP_FLAG$2 | CLONE_FLAT_FLAG$2 | CLONE_SYMBOLS_FLAG$4, customOmitClone$2);
      }
      var length = paths.length;
      while (length--) {
        baseUnset$2(result, paths[length]);
      }
      return result;
    });

    var omit_1$1 = omit$1;

    var Stream$3 = require$$0__default$1["default"];

    var mute$1 = MuteStream$3;

    // var out = new MuteStream(process.stdout)
    // argument auto-pipes
    function MuteStream$3 (opts) {
      Stream$3.apply(this);
      opts = opts || {};
      this.writable = this.readable = true;
      this.muted = false;
      this.on('pipe', this._onpipe);
      this.replace = opts.replace;

      // For readline-type situations
      // This much at the start of a line being redrawn after a ctrl char
      // is seen (such as backspace) won't be redrawn as the replacement
      this._prompt = opts.prompt || null;
      this._hadControl = false;
    }

    MuteStream$3.prototype = Object.create(Stream$3.prototype);

    Object.defineProperty(MuteStream$3.prototype, 'constructor', {
      value: MuteStream$3,
      enumerable: false
    });

    MuteStream$3.prototype.mute = function () {
      this.muted = true;
    };

    MuteStream$3.prototype.unmute = function () {
      this.muted = false;
    };

    Object.defineProperty(MuteStream$3.prototype, '_onpipe', {
      value: onPipe$1,
      enumerable: false,
      writable: true,
      configurable: true
    });

    function onPipe$1 (src) {
      this._src = src;
    }

    Object.defineProperty(MuteStream$3.prototype, 'isTTY', {
      get: getIsTTY$1,
      set: setIsTTY$1,
      enumerable: true,
      configurable: true
    });

    function getIsTTY$1 () {
      return( (this._dest) ? this._dest.isTTY
            : (this._src) ? this._src.isTTY
            : false
            )
    }

    // basically just get replace the getter/setter with a regular value
    function setIsTTY$1 (isTTY) {
      Object.defineProperty(this, 'isTTY', {
        value: isTTY,
        enumerable: true,
        writable: true,
        configurable: true
      });
    }

    Object.defineProperty(MuteStream$3.prototype, 'rows', {
      get: function () {
        return( this._dest ? this._dest.rows
              : this._src ? this._src.rows
              : undefined )
      }, enumerable: true, configurable: true });

    Object.defineProperty(MuteStream$3.prototype, 'columns', {
      get: function () {
        return( this._dest ? this._dest.columns
              : this._src ? this._src.columns
              : undefined )
      }, enumerable: true, configurable: true });


    MuteStream$3.prototype.pipe = function (dest, options) {
      this._dest = dest;
      return Stream$3.prototype.pipe.call(this, dest, options)
    };

    MuteStream$3.prototype.pause = function () {
      if (this._src) return this._src.pause()
    };

    MuteStream$3.prototype.resume = function () {
      if (this._src) return this._src.resume()
    };

    MuteStream$3.prototype.write = function (c) {
      if (this.muted) {
        if (!this.replace) return true
        if (c.match(/^\u001b/)) {
          if(c.indexOf(this._prompt) === 0) {
            c = c.substr(this._prompt.length);
            c = c.replace(/./g, this.replace);
            c = this._prompt + c;
          }
          this._hadControl = true;
          return this.emit('data', c)
        } else {
          if (this._prompt && this._hadControl &&
              c.indexOf(this._prompt) === 0) {
            this._hadControl = false;
            this.emit('data', this._prompt);
            c = c.substr(this._prompt.length);
          }
          c = c.toString().replace(/./g, this.replace);
        }
      }
      this.emit('data', c);
    };

    MuteStream$3.prototype.end = function (c) {
      if (this.muted) {
        if (c && this.replace) {
          c = c.toString().replace(/./g, this.replace);
        } else {
          c = null;
        }
      }
      if (c) this.emit('data', c);
      this.emit('end');
    };

    function proxy$1 (fn) { return function () {
      var d = this._dest;
      var s = this._src;
      if (d && d[fn]) d[fn].apply(d, arguments);
      if (s && s[fn]) s[fn].apply(s, arguments);
    }}

    MuteStream$3.prototype.destroy = proxy$1('destroy');
    MuteStream$3.prototype.destroySoon = proxy$1('destroySoon');
    MuteStream$3.prototype.close = proxy$1('close');

    const _$r = {
      extend: extend$3,
      omit: omit_1$1,
    };
    const MuteStream$2 = mute$1;
    const readline$5 = require$$3__default["default"];

    /**
     * Base interface class other can inherits from
     */

    class UI$1 {
      constructor(opt) {
        // Instantiate the Readline interface
        // @Note: Don't reassign if already present (allow test to override the Stream)
        if (!this.rl) {
          this.rl = readline$5.createInterface(setupReadlineOptions$1(opt));
        }

        this.rl.resume();

        this.onForceClose = this.onForceClose.bind(this);

        // Make sure new prompt start on a newline when closing
        process.on('exit', this.onForceClose);

        // Terminate process on SIGINT (which will call process.on('exit') in return)
        this.rl.on('SIGINT', this.onForceClose);
      }

      /**
       * Handle the ^C exit
       * @return {null}
       */

      onForceClose() {
        this.close();
        process.kill(process.pid, 'SIGINT');
        console.log('');
      }

      /**
       * Close the interface and cleanup listeners
       */

      close() {
        // Remove events listeners
        this.rl.removeListener('SIGINT', this.onForceClose);
        process.removeListener('exit', this.onForceClose);

        this.rl.output.unmute();

        if (this.activePrompt && typeof this.activePrompt.close === 'function') {
          this.activePrompt.close();
        }

        // Close the readline
        this.rl.output.end();
        this.rl.pause();
        this.rl.close();
      }
    }

    function setupReadlineOptions$1(opt) {
      opt = opt || {};
      // Inquirer 8.x:
      // opt.skipTTYChecks = opt.skipTTYChecks === undefined ? opt.input !== undefined : opt.skipTTYChecks;
      opt.skipTTYChecks = opt.skipTTYChecks === undefined ? true : opt.skipTTYChecks;

      // Default `input` to stdin
      const input = opt.input || process.stdin;

      // Check if prompt is being called in TTY environment
      // If it isn't return a failed promise
      if (!opt.skipTTYChecks && !input.isTTY) {
        const nonTtyError = new Error(
          'Prompts can not be meaningfully rendered in non-TTY environments'
        );
        nonTtyError.isTtyError = true;
        throw nonTtyError;
      }

      // Add mute capabilities to the output
      const ms = new MuteStream$2();
      ms.pipe(opt.output || process.stdout);
      const output = ms;

      return _$r.extend(
        {
          terminal: true,
          input,
          output,
        },
        _$r.omit(opt, ['input', 'output'])
      );
    }

    var baseUI$1 = UI$1;

    var readline$4 = {};

    var ansiEscapes$3 = {exports: {}};

    (function (module) {
    const ansiEscapes = module.exports;
    // TODO: remove this in the next major version
    module.exports.default = ansiEscapes;

    const ESC = '\u001B[';
    const OSC = '\u001B]';
    const BEL = '\u0007';
    const SEP = ';';
    const isTerminalApp = process.env.TERM_PROGRAM === 'Apple_Terminal';

    ansiEscapes.cursorTo = (x, y) => {
    	if (typeof x !== 'number') {
    		throw new TypeError('The `x` argument is required');
    	}

    	if (typeof y !== 'number') {
    		return ESC + (x + 1) + 'G';
    	}

    	return ESC + (y + 1) + ';' + (x + 1) + 'H';
    };

    ansiEscapes.cursorMove = (x, y) => {
    	if (typeof x !== 'number') {
    		throw new TypeError('The `x` argument is required');
    	}

    	let ret = '';

    	if (x < 0) {
    		ret += ESC + (-x) + 'D';
    	} else if (x > 0) {
    		ret += ESC + x + 'C';
    	}

    	if (y < 0) {
    		ret += ESC + (-y) + 'A';
    	} else if (y > 0) {
    		ret += ESC + y + 'B';
    	}

    	return ret;
    };

    ansiEscapes.cursorUp = (count = 1) => ESC + count + 'A';
    ansiEscapes.cursorDown = (count = 1) => ESC + count + 'B';
    ansiEscapes.cursorForward = (count = 1) => ESC + count + 'C';
    ansiEscapes.cursorBackward = (count = 1) => ESC + count + 'D';

    ansiEscapes.cursorLeft = ESC + 'G';
    ansiEscapes.cursorSavePosition = isTerminalApp ? '\u001B7' : ESC + 's';
    ansiEscapes.cursorRestorePosition = isTerminalApp ? '\u001B8' : ESC + 'u';
    ansiEscapes.cursorGetPosition = ESC + '6n';
    ansiEscapes.cursorNextLine = ESC + 'E';
    ansiEscapes.cursorPrevLine = ESC + 'F';
    ansiEscapes.cursorHide = ESC + '?25l';
    ansiEscapes.cursorShow = ESC + '?25h';

    ansiEscapes.eraseLines = count => {
    	let clear = '';

    	for (let i = 0; i < count; i++) {
    		clear += ansiEscapes.eraseLine + (i < count - 1 ? ansiEscapes.cursorUp() : '');
    	}

    	if (count) {
    		clear += ansiEscapes.cursorLeft;
    	}

    	return clear;
    };

    ansiEscapes.eraseEndLine = ESC + 'K';
    ansiEscapes.eraseStartLine = ESC + '1K';
    ansiEscapes.eraseLine = ESC + '2K';
    ansiEscapes.eraseDown = ESC + 'J';
    ansiEscapes.eraseUp = ESC + '1J';
    ansiEscapes.eraseScreen = ESC + '2J';
    ansiEscapes.scrollUp = ESC + 'S';
    ansiEscapes.scrollDown = ESC + 'T';

    ansiEscapes.clearScreen = '\u001Bc';

    ansiEscapes.clearTerminal = process.platform === 'win32' ?
    	`${ansiEscapes.eraseScreen}${ESC}0f` :
    	// 1. Erases the screen (Only done in case `2` is not supported)
    	// 2. Erases the whole screen including scrollback buffer
    	// 3. Moves cursor to the top-left position
    	// More info: https://www.real-world-systems.com/docs/ANSIcode.html
    	`${ansiEscapes.eraseScreen}${ESC}3J${ESC}H`;

    ansiEscapes.beep = BEL;

    ansiEscapes.link = (text, url) => {
    	return [
    		OSC,
    		'8',
    		SEP,
    		SEP,
    		url,
    		BEL,
    		text,
    		OSC,
    		'8',
    		SEP,
    		SEP,
    		BEL
    	].join('');
    };

    ansiEscapes.image = (buffer, options = {}) => {
    	let ret = `${OSC}1337;File=inline=1`;

    	if (options.width) {
    		ret += `;width=${options.width}`;
    	}

    	if (options.height) {
    		ret += `;height=${options.height}`;
    	}

    	if (options.preserveAspectRatio === false) {
    		ret += ';preserveAspectRatio=0';
    	}

    	return ret + ':' + buffer.toString('base64') + BEL;
    };

    ansiEscapes.iTerm = {
    	setCwd: (cwd = process.cwd()) => `${OSC}50;CurrentDir=${cwd}${BEL}`,

    	annotation: (message, options = {}) => {
    		let ret = `${OSC}1337;`;

    		const hasX = typeof options.x !== 'undefined';
    		const hasY = typeof options.y !== 'undefined';
    		if ((hasX || hasY) && !(hasX && hasY && typeof options.length !== 'undefined')) {
    			throw new Error('`x`, `y` and `length` must be defined when `x` or `y` is defined');
    		}

    		message = message.replace(/\|/g, '');

    		ret += options.isHidden ? 'AddHiddenAnnotation=' : 'AddAnnotation=';

    		if (options.length > 0) {
    			ret +=
    					(hasX ?
    						[message, options.length, options.x, options.y] :
    						[options.length, message]).join('|');
    		} else {
    			ret += message;
    		}

    		return ret + BEL;
    	}
    };
    }(ansiEscapes$3));

    const ansiEscapes$2 = ansiEscapes$3.exports;

    /**
     * Move cursor left by `x`
     * @param  {Readline} rl - Readline instance
     * @param  {Number}   x  - How far to go left (default to 1)
     */

    readline$4.left = function (rl, x) {
      rl.output.write(ansiEscapes$2.cursorBackward(x));
    };

    /**
     * Move cursor right by `x`
     * @param  {Readline} rl - Readline instance
     * @param  {Number}   x  - How far to go left (default to 1)
     */

    readline$4.right = function (rl, x) {
      rl.output.write(ansiEscapes$2.cursorForward(x));
    };

    /**
     * Move cursor up by `x`
     * @param  {Readline} rl - Readline instance
     * @param  {Number}   x  - How far to go up (default to 1)
     */

    readline$4.up = function (rl, x) {
      rl.output.write(ansiEscapes$2.cursorUp(x));
    };

    /**
     * Move cursor down by `x`
     * @param  {Readline} rl - Readline instance
     * @param  {Number}   x  - How far to go down (default to 1)
     */

    readline$4.down = function (rl, x) {
      rl.output.write(ansiEscapes$2.cursorDown(x));
    };

    /**
     * Clear current line
     * @param  {Readline} rl  - Readline instance
     * @param  {Number}   len - number of line to delete
     */
    readline$4.clearLine = function (rl, len) {
      rl.output.write(ansiEscapes$2.eraseLines(len));
    };

    /**
     * Sticky bottom bar user interface
     */

    const through$2 = through$3.exports;
    const Base$j = baseUI$1;
    const rlUtils$1 = readline$4;
    const _$q = {
      last: last_1$1,
    };

    class BottomBar$1 extends Base$j {
      constructor(opt) {
        opt = opt || {};

        super(opt);

        this.log = through$2(this.writeLog.bind(this));
        this.bottomBar = opt.bottomBar || '';
        this.render();
      }

      /**
       * Render the prompt to screen
       * @return {BottomBar} self
       */

      render() {
        this.write(this.bottomBar);
        return this;
      }

      clean() {
        rlUtils$1.clearLine(this.rl, this.bottomBar.split('\n').length);
        return this;
      }

      /**
       * Update the bottom bar content and rerender
       * @param  {String} bottomBar Bottom bar content
       * @return {BottomBar}           self
       */

      updateBottomBar(bottomBar) {
        rlUtils$1.clearLine(this.rl, 1);
        this.rl.output.unmute();
        this.clean();
        this.bottomBar = bottomBar;
        this.render();
        this.rl.output.mute();
        return this;
      }

      /**
       * Write out log data
       * @param {String} data - The log data to be output
       * @return {BottomBar} self
       */

      writeLog(data) {
        this.rl.output.unmute();
        this.clean();
        this.rl.output.write(this.enforceLF(data.toString()));
        this.render();
        this.rl.output.mute();
        return this;
      }

      /**
       * Make sure line end on a line feed
       * @param  {String} str Input string
       * @return {String}     The input string with a final line feed
       */

      enforceLF(str) {
        return str.match(/[\r\n]$/) ? str : str + '\n';
      }

      /**
       * Helper for writing message in Prompt
       * @param {BottomBar} prompt  - The Prompt object that extends tty
       * @param {String} message - The message to be output
       */
      write(message) {
        const msgLines = message.split(/\n/);
        this.height = msgLines.length;

        // Write message to screen and setPrompt to control backspace
        this.rl.setPrompt(_$q.last(msgLines));

        if (this.rl.output.rows === 0 && this.rl.output.columns === 0) {
          /* When it's a tty through serial port there's no terminal info and the render will malfunction,
             so we need enforce the cursor to locate to the leftmost position for rendering. */
          rlUtils$1.left(this.rl, message.length + this.rl.line.length);
        }

        this.rl.output.write(message);
      }
    }

    var bottomBar$1 = BottomBar$1;

    var baseClone$3 = _baseClone$1;

    /** Used to compose bitmasks for cloning. */
    var CLONE_SYMBOLS_FLAG$3 = 4;

    /**
     * Creates a shallow clone of `value`.
     *
     * **Note:** This method is loosely based on the
     * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
     * and supports cloning arrays, array buffers, booleans, date objects, maps,
     * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
     * arrays. The own enumerable properties of `arguments` objects are cloned
     * as plain objects. An empty object is returned for uncloneable values such
     * as error objects, functions, DOM nodes, and WeakMaps.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to clone.
     * @returns {*} Returns the cloned value.
     * @see _.cloneDeep
     * @example
     *
     * var objects = [{ 'a': 1 }, { 'b': 2 }];
     *
     * var shallow = _.clone(objects);
     * console.log(shallow[0] === objects[0]);
     * // => true
     */
    function clone$5(value) {
      return baseClone$3(value, CLONE_SYMBOLS_FLAG$3);
    }

    var clone_1$1 = clone$5;

    var baseGet$5 = _baseGet$1;

    /**
     * Gets the value at `path` of `object`. If the resolved value is
     * `undefined`, the `defaultValue` is returned in its place.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.get(object, 'a[0].b.c');
     * // => 3
     *
     * _.get(object, ['a', '0', 'b', 'c']);
     * // => 3
     *
     * _.get(object, 'a.b.c', 'default');
     * // => 'default'
     */
    function get$3(object, path, defaultValue) {
      var result = object == null ? undefined : baseGet$5(object, path);
      return result === undefined ? defaultValue : result;
    }

    var get_1$1 = get$3;

    var assignValue$6 = _assignValue$1,
        castPath$7 = _castPath$1,
        isIndex$6 = _isIndex$1,
        isObject$d = isObject_1$1,
        toKey$a = _toKey$1;

    /**
     * The base implementation of `_.set`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @param {Function} [customizer] The function to customize path creation.
     * @returns {Object} Returns `object`.
     */
    function baseSet$3(object, path, value, customizer) {
      if (!isObject$d(object)) {
        return object;
      }
      path = castPath$7(path, object);

      var index = -1,
          length = path.length,
          lastIndex = length - 1,
          nested = object;

      while (nested != null && ++index < length) {
        var key = toKey$a(path[index]),
            newValue = value;

        if (key === '__proto__' || key === 'constructor' || key === 'prototype') {
          return object;
        }

        if (index != lastIndex) {
          var objValue = nested[key];
          newValue = customizer ? customizer(objValue, key, nested) : undefined;
          if (newValue === undefined) {
            newValue = isObject$d(objValue)
              ? objValue
              : (isIndex$6(path[index + 1]) ? [] : {});
          }
        }
        assignValue$6(nested, key, newValue);
        nested = nested[key];
      }
      return object;
    }

    var _baseSet$1 = baseSet$3;

    var baseSet$2 = _baseSet$1;

    /**
     * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,
     * it's created. Arrays are created for missing index properties while objects
     * are created for all other missing properties. Use `_.setWith` to customize
     * `path` creation.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.set(object, 'a[0].b.c', 4);
     * console.log(object.a[0].b.c);
     * // => 4
     *
     * _.set(object, ['x', '0', 'y', 'z'], 5);
     * console.log(object.x[0].y.z);
     * // => 5
     */
    function set$1(object, path, value) {
      return object == null ? object : baseSet$2(object, path, value);
    }

    var set_1$1 = set$1;

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics$1 = function(d, b) {
        extendStatics$1 = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics$1(d, b);
    };

    function __extends$9(d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics$1(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    function __awaiter$2(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    function __generator$1(thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    }

    function __values$1(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m) return m.call(o);
        if (o && typeof o.length === "number") return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }

    function __read$1(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    }

    function __spreadArray$1(to, from, pack) {
        if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
            if (ar || !(i in from)) {
                if (!ar) ar = Array.prototype.slice.call(from, 0, i);
                ar[i] = from[i];
            }
        }
        return to.concat(ar || Array.prototype.slice.call(from));
    }

    function __await$1(v) {
        return this instanceof __await$1 ? (this.v = v, this) : new __await$1(v);
    }

    function __asyncGenerator$1(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
        function step(r) { r.value instanceof __await$1 ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
    }

    function __asyncValues$1(o) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values$1 === "function" ? __values$1(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
    }

    function isFunction$5(value) {
        return typeof value === 'function';
    }

    function createErrorClass$1(createImpl) {
        var _super = function (instance) {
            Error.call(instance);
            instance.stack = new Error().stack;
        };
        var ctorFunc = createImpl(_super);
        ctorFunc.prototype = Object.create(Error.prototype);
        ctorFunc.prototype.constructor = ctorFunc;
        return ctorFunc;
    }

    var UnsubscriptionError$1 = createErrorClass$1(function (_super) {
        return function UnsubscriptionErrorImpl(errors) {
            _super(this);
            this.message = errors
                ? errors.length + " errors occurred during unsubscription:\n" + errors.map(function (err, i) { return i + 1 + ") " + err.toString(); }).join('\n  ')
                : '';
            this.name = 'UnsubscriptionError';
            this.errors = errors;
        };
    });

    function arrRemove$1(arr, item) {
        if (arr) {
            var index = arr.indexOf(item);
            0 <= index && arr.splice(index, 1);
        }
    }

    var Subscription$1 = (function () {
        function Subscription(initialTeardown) {
            this.initialTeardown = initialTeardown;
            this.closed = false;
            this._parentage = null;
            this._teardowns = null;
        }
        Subscription.prototype.unsubscribe = function () {
            var e_1, _a, e_2, _b;
            var errors;
            if (!this.closed) {
                this.closed = true;
                var _parentage = this._parentage;
                if (_parentage) {
                    this._parentage = null;
                    if (Array.isArray(_parentage)) {
                        try {
                            for (var _parentage_1 = __values$1(_parentage), _parentage_1_1 = _parentage_1.next(); !_parentage_1_1.done; _parentage_1_1 = _parentage_1.next()) {
                                var parent_1 = _parentage_1_1.value;
                                parent_1.remove(this);
                            }
                        }
                        catch (e_1_1) { e_1 = { error: e_1_1 }; }
                        finally {
                            try {
                                if (_parentage_1_1 && !_parentage_1_1.done && (_a = _parentage_1.return)) _a.call(_parentage_1);
                            }
                            finally { if (e_1) throw e_1.error; }
                        }
                    }
                    else {
                        _parentage.remove(this);
                    }
                }
                var initialTeardown = this.initialTeardown;
                if (isFunction$5(initialTeardown)) {
                    try {
                        initialTeardown();
                    }
                    catch (e) {
                        errors = e instanceof UnsubscriptionError$1 ? e.errors : [e];
                    }
                }
                var _teardowns = this._teardowns;
                if (_teardowns) {
                    this._teardowns = null;
                    try {
                        for (var _teardowns_1 = __values$1(_teardowns), _teardowns_1_1 = _teardowns_1.next(); !_teardowns_1_1.done; _teardowns_1_1 = _teardowns_1.next()) {
                            var teardown_1 = _teardowns_1_1.value;
                            try {
                                execTeardown$1(teardown_1);
                            }
                            catch (err) {
                                errors = errors !== null && errors !== void 0 ? errors : [];
                                if (err instanceof UnsubscriptionError$1) {
                                    errors = __spreadArray$1(__spreadArray$1([], __read$1(errors)), __read$1(err.errors));
                                }
                                else {
                                    errors.push(err);
                                }
                            }
                        }
                    }
                    catch (e_2_1) { e_2 = { error: e_2_1 }; }
                    finally {
                        try {
                            if (_teardowns_1_1 && !_teardowns_1_1.done && (_b = _teardowns_1.return)) _b.call(_teardowns_1);
                        }
                        finally { if (e_2) throw e_2.error; }
                    }
                }
                if (errors) {
                    throw new UnsubscriptionError$1(errors);
                }
            }
        };
        Subscription.prototype.add = function (teardown) {
            var _a;
            if (teardown && teardown !== this) {
                if (this.closed) {
                    execTeardown$1(teardown);
                }
                else {
                    if (teardown instanceof Subscription) {
                        if (teardown.closed || teardown._hasParent(this)) {
                            return;
                        }
                        teardown._addParent(this);
                    }
                    (this._teardowns = (_a = this._teardowns) !== null && _a !== void 0 ? _a : []).push(teardown);
                }
            }
        };
        Subscription.prototype._hasParent = function (parent) {
            var _parentage = this._parentage;
            return _parentage === parent || (Array.isArray(_parentage) && _parentage.includes(parent));
        };
        Subscription.prototype._addParent = function (parent) {
            var _parentage = this._parentage;
            this._parentage = Array.isArray(_parentage) ? (_parentage.push(parent), _parentage) : _parentage ? [_parentage, parent] : parent;
        };
        Subscription.prototype._removeParent = function (parent) {
            var _parentage = this._parentage;
            if (_parentage === parent) {
                this._parentage = null;
            }
            else if (Array.isArray(_parentage)) {
                arrRemove$1(_parentage, parent);
            }
        };
        Subscription.prototype.remove = function (teardown) {
            var _teardowns = this._teardowns;
            _teardowns && arrRemove$1(_teardowns, teardown);
            if (teardown instanceof Subscription) {
                teardown._removeParent(this);
            }
        };
        Subscription.EMPTY = (function () {
            var empty = new Subscription();
            empty.closed = true;
            return empty;
        })();
        return Subscription;
    }());
    var EMPTY_SUBSCRIPTION$1 = Subscription$1.EMPTY;
    function isSubscription$1(value) {
        return (value instanceof Subscription$1 ||
            (value && 'closed' in value && isFunction$5(value.remove) && isFunction$5(value.add) && isFunction$5(value.unsubscribe)));
    }
    function execTeardown$1(teardown) {
        if (isFunction$5(teardown)) {
            teardown();
        }
        else {
            teardown.unsubscribe();
        }
    }

    var config$1 = {
        onUnhandledError: null,
        onStoppedNotification: null,
        Promise: undefined,
        useDeprecatedSynchronousErrorHandling: false,
        useDeprecatedNextContext: false,
    };

    var timeoutProvider$1 = {
        setTimeout: function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            var delegate = timeoutProvider$1.delegate;
            return ((delegate === null || delegate === void 0 ? void 0 : delegate.setTimeout) || setTimeout).apply(void 0, __spreadArray$1([], __read$1(args)));
        },
        clearTimeout: function (handle) {
            var delegate = timeoutProvider$1.delegate;
            return ((delegate === null || delegate === void 0 ? void 0 : delegate.clearTimeout) || clearTimeout)(handle);
        },
        delegate: undefined,
    };

    function reportUnhandledError$1(err) {
        timeoutProvider$1.setTimeout(function () {
            var onUnhandledError = config$1.onUnhandledError;
            if (onUnhandledError) {
                onUnhandledError(err);
            }
            else {
                throw err;
            }
        });
    }

    function noop$8() { }

    var COMPLETE_NOTIFICATION$1 = (function () { return createNotification$1('C', undefined, undefined); })();
    function errorNotification$1(error) {
        return createNotification$1('E', undefined, error);
    }
    function nextNotification$1(value) {
        return createNotification$1('N', value, undefined);
    }
    function createNotification$1(kind, value, error) {
        return {
            kind: kind,
            value: value,
            error: error,
        };
    }

    var context$1 = null;
    function errorContext$1(cb) {
        if (config$1.useDeprecatedSynchronousErrorHandling) {
            var isRoot = !context$1;
            if (isRoot) {
                context$1 = { errorThrown: false, error: null };
            }
            cb();
            if (isRoot) {
                var _a = context$1, errorThrown = _a.errorThrown, error = _a.error;
                context$1 = null;
                if (errorThrown) {
                    throw error;
                }
            }
        }
        else {
            cb();
        }
    }
    function captureError$1(err) {
        if (config$1.useDeprecatedSynchronousErrorHandling && context$1) {
            context$1.errorThrown = true;
            context$1.error = err;
        }
    }

    var Subscriber$1 = (function (_super) {
        __extends$9(Subscriber, _super);
        function Subscriber(destination) {
            var _this = _super.call(this) || this;
            _this.isStopped = false;
            if (destination) {
                _this.destination = destination;
                if (isSubscription$1(destination)) {
                    destination.add(_this);
                }
            }
            else {
                _this.destination = EMPTY_OBSERVER$1;
            }
            return _this;
        }
        Subscriber.create = function (next, error, complete) {
            return new SafeSubscriber$1(next, error, complete);
        };
        Subscriber.prototype.next = function (value) {
            if (this.isStopped) {
                handleStoppedNotification$1(nextNotification$1(value), this);
            }
            else {
                this._next(value);
            }
        };
        Subscriber.prototype.error = function (err) {
            if (this.isStopped) {
                handleStoppedNotification$1(errorNotification$1(err), this);
            }
            else {
                this.isStopped = true;
                this._error(err);
            }
        };
        Subscriber.prototype.complete = function () {
            if (this.isStopped) {
                handleStoppedNotification$1(COMPLETE_NOTIFICATION$1, this);
            }
            else {
                this.isStopped = true;
                this._complete();
            }
        };
        Subscriber.prototype.unsubscribe = function () {
            if (!this.closed) {
                this.isStopped = true;
                _super.prototype.unsubscribe.call(this);
                this.destination = null;
            }
        };
        Subscriber.prototype._next = function (value) {
            this.destination.next(value);
        };
        Subscriber.prototype._error = function (err) {
            try {
                this.destination.error(err);
            }
            finally {
                this.unsubscribe();
            }
        };
        Subscriber.prototype._complete = function () {
            try {
                this.destination.complete();
            }
            finally {
                this.unsubscribe();
            }
        };
        return Subscriber;
    }(Subscription$1));
    var SafeSubscriber$1 = (function (_super) {
        __extends$9(SafeSubscriber, _super);
        function SafeSubscriber(observerOrNext, error, complete) {
            var _this = _super.call(this) || this;
            var next;
            if (isFunction$5(observerOrNext)) {
                next = observerOrNext;
            }
            else if (observerOrNext) {
                (next = observerOrNext.next, error = observerOrNext.error, complete = observerOrNext.complete);
                var context_1;
                if (_this && config$1.useDeprecatedNextContext) {
                    context_1 = Object.create(observerOrNext);
                    context_1.unsubscribe = function () { return _this.unsubscribe(); };
                }
                else {
                    context_1 = observerOrNext;
                }
                next = next === null || next === void 0 ? void 0 : next.bind(context_1);
                error = error === null || error === void 0 ? void 0 : error.bind(context_1);
                complete = complete === null || complete === void 0 ? void 0 : complete.bind(context_1);
            }
            _this.destination = {
                next: next ? wrapForErrorHandling$1(next) : noop$8,
                error: wrapForErrorHandling$1(error !== null && error !== void 0 ? error : defaultErrorHandler$1),
                complete: complete ? wrapForErrorHandling$1(complete) : noop$8,
            };
            return _this;
        }
        return SafeSubscriber;
    }(Subscriber$1));
    function wrapForErrorHandling$1(handler, instance) {
        return function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            try {
                handler.apply(void 0, __spreadArray$1([], __read$1(args)));
            }
            catch (err) {
                if (config$1.useDeprecatedSynchronousErrorHandling) {
                    captureError$1(err);
                }
                else {
                    reportUnhandledError$1(err);
                }
            }
        };
    }
    function defaultErrorHandler$1(err) {
        throw err;
    }
    function handleStoppedNotification$1(notification, subscriber) {
        var onStoppedNotification = config$1.onStoppedNotification;
        onStoppedNotification && timeoutProvider$1.setTimeout(function () { return onStoppedNotification(notification, subscriber); });
    }
    var EMPTY_OBSERVER$1 = {
        closed: true,
        next: noop$8,
        error: defaultErrorHandler$1,
        complete: noop$8,
    };

    var observable$1 = (function () { return (typeof Symbol === 'function' && Symbol.observable) || '@@observable'; })();

    function identity$8(x) {
        return x;
    }

    function pipe$4() {
        var fns = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            fns[_i] = arguments[_i];
        }
        return pipeFromArray$1(fns);
    }
    function pipeFromArray$1(fns) {
        if (fns.length === 0) {
            return identity$8;
        }
        if (fns.length === 1) {
            return fns[0];
        }
        return function piped(input) {
            return fns.reduce(function (prev, fn) { return fn(prev); }, input);
        };
    }

    var Observable$1 = (function () {
        function Observable(subscribe) {
            if (subscribe) {
                this._subscribe = subscribe;
            }
        }
        Observable.prototype.lift = function (operator) {
            var observable = new Observable();
            observable.source = this;
            observable.operator = operator;
            return observable;
        };
        Observable.prototype.subscribe = function (observerOrNext, error, complete) {
            var _this = this;
            var subscriber = isSubscriber$1(observerOrNext) ? observerOrNext : new SafeSubscriber$1(observerOrNext, error, complete);
            errorContext$1(function () {
                var _a = _this, operator = _a.operator, source = _a.source;
                subscriber.add(operator
                    ?
                        operator.call(subscriber, source)
                    : source
                        ?
                            _this._subscribe(subscriber)
                        :
                            _this._trySubscribe(subscriber));
            });
            return subscriber;
        };
        Observable.prototype._trySubscribe = function (sink) {
            try {
                return this._subscribe(sink);
            }
            catch (err) {
                sink.error(err);
            }
        };
        Observable.prototype.forEach = function (next, promiseCtor) {
            var _this = this;
            promiseCtor = getPromiseCtor$1(promiseCtor);
            return new promiseCtor(function (resolve, reject) {
                var subscriber = new SafeSubscriber$1({
                    next: function (value) {
                        try {
                            next(value);
                        }
                        catch (err) {
                            reject(err);
                            subscriber.unsubscribe();
                        }
                    },
                    error: reject,
                    complete: resolve,
                });
                _this.subscribe(subscriber);
            });
        };
        Observable.prototype._subscribe = function (subscriber) {
            var _a;
            return (_a = this.source) === null || _a === void 0 ? void 0 : _a.subscribe(subscriber);
        };
        Observable.prototype[observable$1] = function () {
            return this;
        };
        Observable.prototype.pipe = function () {
            var operations = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                operations[_i] = arguments[_i];
            }
            return pipeFromArray$1(operations)(this);
        };
        Observable.prototype.toPromise = function (promiseCtor) {
            var _this = this;
            promiseCtor = getPromiseCtor$1(promiseCtor);
            return new promiseCtor(function (resolve, reject) {
                var value;
                _this.subscribe(function (x) { return (value = x); }, function (err) { return reject(err); }, function () { return resolve(value); });
            });
        };
        Observable.create = function (subscribe) {
            return new Observable(subscribe);
        };
        return Observable;
    }());
    function getPromiseCtor$1(promiseCtor) {
        var _a;
        return (_a = promiseCtor !== null && promiseCtor !== void 0 ? promiseCtor : config$1.Promise) !== null && _a !== void 0 ? _a : Promise;
    }
    function isObserver$1(value) {
        return value && isFunction$5(value.next) && isFunction$5(value.error) && isFunction$5(value.complete);
    }
    function isSubscriber$1(value) {
        return (value && value instanceof Subscriber$1) || (isObserver$1(value) && isSubscription$1(value));
    }

    function hasLift$1(source) {
        return isFunction$5(source === null || source === void 0 ? void 0 : source.lift);
    }
    function operate$1(init) {
        return function (source) {
            if (hasLift$1(source)) {
                return source.lift(function (liftedSource) {
                    try {
                        return init(liftedSource, this);
                    }
                    catch (err) {
                        this.error(err);
                    }
                });
            }
            throw new TypeError('Unable to lift unknown Observable type');
        };
    }

    var OperatorSubscriber$1 = (function (_super) {
        __extends$9(OperatorSubscriber, _super);
        function OperatorSubscriber(destination, onNext, onComplete, onError, onFinalize) {
            var _this = _super.call(this, destination) || this;
            _this.onFinalize = onFinalize;
            _this._next = onNext
                ? function (value) {
                    try {
                        onNext(value);
                    }
                    catch (err) {
                        destination.error(err);
                    }
                }
                : _super.prototype._next;
            _this._error = onError
                ? function (err) {
                    try {
                        onError(err);
                    }
                    catch (err) {
                        destination.error(err);
                    }
                    finally {
                        this.unsubscribe();
                    }
                }
                : _super.prototype._error;
            _this._complete = onComplete
                ? function () {
                    try {
                        onComplete();
                    }
                    catch (err) {
                        destination.error(err);
                    }
                    finally {
                        this.unsubscribe();
                    }
                }
                : _super.prototype._complete;
            return _this;
        }
        OperatorSubscriber.prototype.unsubscribe = function () {
            var _a;
            var closed = this.closed;
            _super.prototype.unsubscribe.call(this);
            !closed && ((_a = this.onFinalize) === null || _a === void 0 ? void 0 : _a.call(this));
        };
        return OperatorSubscriber;
    }(Subscriber$1));

    function refCount$1() {
        return operate$1(function (source, subscriber) {
            var connection = null;
            source._refCount++;
            var refCounter = new OperatorSubscriber$1(subscriber, undefined, undefined, undefined, function () {
                if (!source || source._refCount <= 0 || 0 < --source._refCount) {
                    connection = null;
                    return;
                }
                var sharedConnection = source._connection;
                var conn = connection;
                connection = null;
                if (sharedConnection && (!conn || sharedConnection === conn)) {
                    sharedConnection.unsubscribe();
                }
                subscriber.unsubscribe();
            });
            source.subscribe(refCounter);
            if (!refCounter.closed) {
                connection = source.connect();
            }
        });
    }

    var ConnectableObservable$1 = (function (_super) {
        __extends$9(ConnectableObservable, _super);
        function ConnectableObservable(source, subjectFactory) {
            var _this = _super.call(this) || this;
            _this.source = source;
            _this.subjectFactory = subjectFactory;
            _this._subject = null;
            _this._refCount = 0;
            _this._connection = null;
            if (hasLift$1(source)) {
                _this.lift = source.lift;
            }
            return _this;
        }
        ConnectableObservable.prototype._subscribe = function (subscriber) {
            return this.getSubject().subscribe(subscriber);
        };
        ConnectableObservable.prototype.getSubject = function () {
            var subject = this._subject;
            if (!subject || subject.isStopped) {
                this._subject = this.subjectFactory();
            }
            return this._subject;
        };
        ConnectableObservable.prototype._teardown = function () {
            this._refCount = 0;
            var _connection = this._connection;
            this._subject = this._connection = null;
            _connection === null || _connection === void 0 ? void 0 : _connection.unsubscribe();
        };
        ConnectableObservable.prototype.connect = function () {
            var _this = this;
            var connection = this._connection;
            if (!connection) {
                connection = this._connection = new Subscription$1();
                var subject_1 = this.getSubject();
                connection.add(this.source.subscribe(new OperatorSubscriber$1(subject_1, undefined, function () {
                    _this._teardown();
                    subject_1.complete();
                }, function (err) {
                    _this._teardown();
                    subject_1.error(err);
                }, function () { return _this._teardown(); })));
                if (connection.closed) {
                    this._connection = null;
                    connection = Subscription$1.EMPTY;
                }
            }
            return connection;
        };
        ConnectableObservable.prototype.refCount = function () {
            return refCount$1()(this);
        };
        return ConnectableObservable;
    }(Observable$1));

    var performanceTimestampProvider$1 = {
        now: function () {
            return (performanceTimestampProvider$1.delegate || performance).now();
        },
        delegate: undefined,
    };

    var animationFrameProvider$1 = {
        schedule: function (callback) {
            var request = requestAnimationFrame;
            var cancel = cancelAnimationFrame;
            var delegate = animationFrameProvider$1.delegate;
            if (delegate) {
                request = delegate.requestAnimationFrame;
                cancel = delegate.cancelAnimationFrame;
            }
            var handle = request(function (timestamp) {
                cancel = undefined;
                callback(timestamp);
            });
            return new Subscription$1(function () { return cancel === null || cancel === void 0 ? void 0 : cancel(handle); });
        },
        requestAnimationFrame: function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            var delegate = animationFrameProvider$1.delegate;
            return ((delegate === null || delegate === void 0 ? void 0 : delegate.requestAnimationFrame) || requestAnimationFrame).apply(void 0, __spreadArray$1([], __read$1(args)));
        },
        cancelAnimationFrame: function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            var delegate = animationFrameProvider$1.delegate;
            return ((delegate === null || delegate === void 0 ? void 0 : delegate.cancelAnimationFrame) || cancelAnimationFrame).apply(void 0, __spreadArray$1([], __read$1(args)));
        },
        delegate: undefined,
    };

    function animationFrames$1(timestampProvider) {
        return timestampProvider ? animationFramesFactory$1(timestampProvider) : DEFAULT_ANIMATION_FRAMES$1;
    }
    function animationFramesFactory$1(timestampProvider) {
        var schedule = animationFrameProvider$1.schedule;
        return new Observable$1(function (subscriber) {
            var subscription = new Subscription$1();
            var provider = timestampProvider || performanceTimestampProvider$1;
            var start = provider.now();
            var run = function (timestamp) {
                var now = provider.now();
                subscriber.next({
                    timestamp: timestampProvider ? now : timestamp,
                    elapsed: now - start,
                });
                if (!subscriber.closed) {
                    subscription.add(schedule(run));
                }
            };
            subscription.add(schedule(run));
            return subscription;
        });
    }
    var DEFAULT_ANIMATION_FRAMES$1 = animationFramesFactory$1();

    var ObjectUnsubscribedError$1 = createErrorClass$1(function (_super) {
        return function ObjectUnsubscribedErrorImpl() {
            _super(this);
            this.name = 'ObjectUnsubscribedError';
            this.message = 'object unsubscribed';
        };
    });

    var Subject$3 = (function (_super) {
        __extends$9(Subject, _super);
        function Subject() {
            var _this = _super.call(this) || this;
            _this.closed = false;
            _this.observers = [];
            _this.isStopped = false;
            _this.hasError = false;
            _this.thrownError = null;
            return _this;
        }
        Subject.prototype.lift = function (operator) {
            var subject = new AnonymousSubject$1(this, this);
            subject.operator = operator;
            return subject;
        };
        Subject.prototype._throwIfClosed = function () {
            if (this.closed) {
                throw new ObjectUnsubscribedError$1();
            }
        };
        Subject.prototype.next = function (value) {
            var _this = this;
            errorContext$1(function () {
                var e_1, _a;
                _this._throwIfClosed();
                if (!_this.isStopped) {
                    var copy = _this.observers.slice();
                    try {
                        for (var copy_1 = __values$1(copy), copy_1_1 = copy_1.next(); !copy_1_1.done; copy_1_1 = copy_1.next()) {
                            var observer = copy_1_1.value;
                            observer.next(value);
                        }
                    }
                    catch (e_1_1) { e_1 = { error: e_1_1 }; }
                    finally {
                        try {
                            if (copy_1_1 && !copy_1_1.done && (_a = copy_1.return)) _a.call(copy_1);
                        }
                        finally { if (e_1) throw e_1.error; }
                    }
                }
            });
        };
        Subject.prototype.error = function (err) {
            var _this = this;
            errorContext$1(function () {
                _this._throwIfClosed();
                if (!_this.isStopped) {
                    _this.hasError = _this.isStopped = true;
                    _this.thrownError = err;
                    var observers = _this.observers;
                    while (observers.length) {
                        observers.shift().error(err);
                    }
                }
            });
        };
        Subject.prototype.complete = function () {
            var _this = this;
            errorContext$1(function () {
                _this._throwIfClosed();
                if (!_this.isStopped) {
                    _this.isStopped = true;
                    var observers = _this.observers;
                    while (observers.length) {
                        observers.shift().complete();
                    }
                }
            });
        };
        Subject.prototype.unsubscribe = function () {
            this.isStopped = this.closed = true;
            this.observers = null;
        };
        Object.defineProperty(Subject.prototype, "observed", {
            get: function () {
                var _a;
                return ((_a = this.observers) === null || _a === void 0 ? void 0 : _a.length) > 0;
            },
            enumerable: false,
            configurable: true
        });
        Subject.prototype._trySubscribe = function (subscriber) {
            this._throwIfClosed();
            return _super.prototype._trySubscribe.call(this, subscriber);
        };
        Subject.prototype._subscribe = function (subscriber) {
            this._throwIfClosed();
            this._checkFinalizedStatuses(subscriber);
            return this._innerSubscribe(subscriber);
        };
        Subject.prototype._innerSubscribe = function (subscriber) {
            var _a = this, hasError = _a.hasError, isStopped = _a.isStopped, observers = _a.observers;
            return hasError || isStopped
                ? EMPTY_SUBSCRIPTION$1
                : (observers.push(subscriber), new Subscription$1(function () { return arrRemove$1(observers, subscriber); }));
        };
        Subject.prototype._checkFinalizedStatuses = function (subscriber) {
            var _a = this, hasError = _a.hasError, thrownError = _a.thrownError, isStopped = _a.isStopped;
            if (hasError) {
                subscriber.error(thrownError);
            }
            else if (isStopped) {
                subscriber.complete();
            }
        };
        Subject.prototype.asObservable = function () {
            var observable = new Observable$1();
            observable.source = this;
            return observable;
        };
        Subject.create = function (destination, source) {
            return new AnonymousSubject$1(destination, source);
        };
        return Subject;
    }(Observable$1));
    var AnonymousSubject$1 = (function (_super) {
        __extends$9(AnonymousSubject, _super);
        function AnonymousSubject(destination, source) {
            var _this = _super.call(this) || this;
            _this.destination = destination;
            _this.source = source;
            return _this;
        }
        AnonymousSubject.prototype.next = function (value) {
            var _a, _b;
            (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.next) === null || _b === void 0 ? void 0 : _b.call(_a, value);
        };
        AnonymousSubject.prototype.error = function (err) {
            var _a, _b;
            (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.error) === null || _b === void 0 ? void 0 : _b.call(_a, err);
        };
        AnonymousSubject.prototype.complete = function () {
            var _a, _b;
            (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.complete) === null || _b === void 0 ? void 0 : _b.call(_a);
        };
        AnonymousSubject.prototype._subscribe = function (subscriber) {
            var _a, _b;
            return (_b = (_a = this.source) === null || _a === void 0 ? void 0 : _a.subscribe(subscriber)) !== null && _b !== void 0 ? _b : EMPTY_SUBSCRIPTION$1;
        };
        return AnonymousSubject;
    }(Subject$3));

    var BehaviorSubject$1 = (function (_super) {
        __extends$9(BehaviorSubject, _super);
        function BehaviorSubject(_value) {
            var _this = _super.call(this) || this;
            _this._value = _value;
            return _this;
        }
        Object.defineProperty(BehaviorSubject.prototype, "value", {
            get: function () {
                return this.getValue();
            },
            enumerable: false,
            configurable: true
        });
        BehaviorSubject.prototype._subscribe = function (subscriber) {
            var subscription = _super.prototype._subscribe.call(this, subscriber);
            !subscription.closed && subscriber.next(this._value);
            return subscription;
        };
        BehaviorSubject.prototype.getValue = function () {
            var _a = this, hasError = _a.hasError, thrownError = _a.thrownError, _value = _a._value;
            if (hasError) {
                throw thrownError;
            }
            this._throwIfClosed();
            return _value;
        };
        BehaviorSubject.prototype.next = function (value) {
            _super.prototype.next.call(this, (this._value = value));
        };
        return BehaviorSubject;
    }(Subject$3));

    var dateTimestampProvider$1 = {
        now: function () {
            return (dateTimestampProvider$1.delegate || Date).now();
        },
        delegate: undefined,
    };

    var ReplaySubject$1 = (function (_super) {
        __extends$9(ReplaySubject, _super);
        function ReplaySubject(_bufferSize, _windowTime, _timestampProvider) {
            if (_bufferSize === void 0) { _bufferSize = Infinity; }
            if (_windowTime === void 0) { _windowTime = Infinity; }
            if (_timestampProvider === void 0) { _timestampProvider = dateTimestampProvider$1; }
            var _this = _super.call(this) || this;
            _this._bufferSize = _bufferSize;
            _this._windowTime = _windowTime;
            _this._timestampProvider = _timestampProvider;
            _this._buffer = [];
            _this._infiniteTimeWindow = true;
            _this._infiniteTimeWindow = _windowTime === Infinity;
            _this._bufferSize = Math.max(1, _bufferSize);
            _this._windowTime = Math.max(1, _windowTime);
            return _this;
        }
        ReplaySubject.prototype.next = function (value) {
            var _a = this, isStopped = _a.isStopped, _buffer = _a._buffer, _infiniteTimeWindow = _a._infiniteTimeWindow, _timestampProvider = _a._timestampProvider, _windowTime = _a._windowTime;
            if (!isStopped) {
                _buffer.push(value);
                !_infiniteTimeWindow && _buffer.push(_timestampProvider.now() + _windowTime);
            }
            this._trimBuffer();
            _super.prototype.next.call(this, value);
        };
        ReplaySubject.prototype._subscribe = function (subscriber) {
            this._throwIfClosed();
            this._trimBuffer();
            var subscription = this._innerSubscribe(subscriber);
            var _a = this, _infiniteTimeWindow = _a._infiniteTimeWindow, _buffer = _a._buffer;
            var copy = _buffer.slice();
            for (var i = 0; i < copy.length && !subscriber.closed; i += _infiniteTimeWindow ? 1 : 2) {
                subscriber.next(copy[i]);
            }
            this._checkFinalizedStatuses(subscriber);
            return subscription;
        };
        ReplaySubject.prototype._trimBuffer = function () {
            var _a = this, _bufferSize = _a._bufferSize, _timestampProvider = _a._timestampProvider, _buffer = _a._buffer, _infiniteTimeWindow = _a._infiniteTimeWindow;
            var adjustedBufferSize = (_infiniteTimeWindow ? 1 : 2) * _bufferSize;
            _bufferSize < Infinity && adjustedBufferSize < _buffer.length && _buffer.splice(0, _buffer.length - adjustedBufferSize);
            if (!_infiniteTimeWindow) {
                var now = _timestampProvider.now();
                var last = 0;
                for (var i = 1; i < _buffer.length && _buffer[i] <= now; i += 2) {
                    last = i;
                }
                last && _buffer.splice(0, last + 1);
            }
        };
        return ReplaySubject;
    }(Subject$3));

    var AsyncSubject$1 = (function (_super) {
        __extends$9(AsyncSubject, _super);
        function AsyncSubject() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this._value = null;
            _this._hasValue = false;
            _this._isComplete = false;
            return _this;
        }
        AsyncSubject.prototype._checkFinalizedStatuses = function (subscriber) {
            var _a = this, hasError = _a.hasError, _hasValue = _a._hasValue, _value = _a._value, thrownError = _a.thrownError, isStopped = _a.isStopped, _isComplete = _a._isComplete;
            if (hasError) {
                subscriber.error(thrownError);
            }
            else if (isStopped || _isComplete) {
                _hasValue && subscriber.next(_value);
                subscriber.complete();
            }
        };
        AsyncSubject.prototype.next = function (value) {
            if (!this.isStopped) {
                this._value = value;
                this._hasValue = true;
            }
        };
        AsyncSubject.prototype.complete = function () {
            var _a = this, _hasValue = _a._hasValue, _value = _a._value, _isComplete = _a._isComplete;
            if (!_isComplete) {
                this._isComplete = true;
                _hasValue && _super.prototype.next.call(this, _value);
                _super.prototype.complete.call(this);
            }
        };
        return AsyncSubject;
    }(Subject$3));

    var Action$1 = (function (_super) {
        __extends$9(Action, _super);
        function Action(scheduler, work) {
            return _super.call(this) || this;
        }
        Action.prototype.schedule = function (state, delay) {
            return this;
        };
        return Action;
    }(Subscription$1));

    var intervalProvider$1 = {
        setInterval: function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            var delegate = intervalProvider$1.delegate;
            return ((delegate === null || delegate === void 0 ? void 0 : delegate.setInterval) || setInterval).apply(void 0, __spreadArray$1([], __read$1(args)));
        },
        clearInterval: function (handle) {
            var delegate = intervalProvider$1.delegate;
            return ((delegate === null || delegate === void 0 ? void 0 : delegate.clearInterval) || clearInterval)(handle);
        },
        delegate: undefined,
    };

    var AsyncAction$1 = (function (_super) {
        __extends$9(AsyncAction, _super);
        function AsyncAction(scheduler, work) {
            var _this = _super.call(this, scheduler, work) || this;
            _this.scheduler = scheduler;
            _this.work = work;
            _this.pending = false;
            return _this;
        }
        AsyncAction.prototype.schedule = function (state, delay) {
            if (delay === void 0) { delay = 0; }
            if (this.closed) {
                return this;
            }
            this.state = state;
            var id = this.id;
            var scheduler = this.scheduler;
            if (id != null) {
                this.id = this.recycleAsyncId(scheduler, id, delay);
            }
            this.pending = true;
            this.delay = delay;
            this.id = this.id || this.requestAsyncId(scheduler, this.id, delay);
            return this;
        };
        AsyncAction.prototype.requestAsyncId = function (scheduler, _id, delay) {
            if (delay === void 0) { delay = 0; }
            return intervalProvider$1.setInterval(scheduler.flush.bind(scheduler, this), delay);
        };
        AsyncAction.prototype.recycleAsyncId = function (_scheduler, id, delay) {
            if (delay === void 0) { delay = 0; }
            if (delay != null && this.delay === delay && this.pending === false) {
                return id;
            }
            intervalProvider$1.clearInterval(id);
            return undefined;
        };
        AsyncAction.prototype.execute = function (state, delay) {
            if (this.closed) {
                return new Error('executing a cancelled action');
            }
            this.pending = false;
            var error = this._execute(state, delay);
            if (error) {
                return error;
            }
            else if (this.pending === false && this.id != null) {
                this.id = this.recycleAsyncId(this.scheduler, this.id, null);
            }
        };
        AsyncAction.prototype._execute = function (state, _delay) {
            var errored = false;
            var errorValue;
            try {
                this.work(state);
            }
            catch (e) {
                errored = true;
                errorValue = e ? e : new Error('Scheduled action threw falsy error');
            }
            if (errored) {
                this.unsubscribe();
                return errorValue;
            }
        };
        AsyncAction.prototype.unsubscribe = function () {
            if (!this.closed) {
                var _a = this, id = _a.id, scheduler = _a.scheduler;
                var actions = scheduler.actions;
                this.work = this.state = this.scheduler = null;
                this.pending = false;
                arrRemove$1(actions, this);
                if (id != null) {
                    this.id = this.recycleAsyncId(scheduler, id, null);
                }
                this.delay = null;
                _super.prototype.unsubscribe.call(this);
            }
        };
        return AsyncAction;
    }(Action$1));

    var nextHandle$1 = 1;
    var resolved$1;
    var activeHandles$1 = {};
    function findAndClearHandle$1(handle) {
        if (handle in activeHandles$1) {
            delete activeHandles$1[handle];
            return true;
        }
        return false;
    }
    var Immediate$1 = {
        setImmediate: function (cb) {
            var handle = nextHandle$1++;
            activeHandles$1[handle] = true;
            if (!resolved$1) {
                resolved$1 = Promise.resolve();
            }
            resolved$1.then(function () { return findAndClearHandle$1(handle) && cb(); });
            return handle;
        },
        clearImmediate: function (handle) {
            findAndClearHandle$1(handle);
        },
    };

    var setImmediate$2 = Immediate$1.setImmediate, clearImmediate$1 = Immediate$1.clearImmediate;
    var immediateProvider$1 = {
        setImmediate: function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            var delegate = immediateProvider$1.delegate;
            return ((delegate === null || delegate === void 0 ? void 0 : delegate.setImmediate) || setImmediate$2).apply(void 0, __spreadArray$1([], __read$1(args)));
        },
        clearImmediate: function (handle) {
            var delegate = immediateProvider$1.delegate;
            return ((delegate === null || delegate === void 0 ? void 0 : delegate.clearImmediate) || clearImmediate$1)(handle);
        },
        delegate: undefined,
    };

    var AsapAction$1 = (function (_super) {
        __extends$9(AsapAction, _super);
        function AsapAction(scheduler, work) {
            var _this = _super.call(this, scheduler, work) || this;
            _this.scheduler = scheduler;
            _this.work = work;
            return _this;
        }
        AsapAction.prototype.requestAsyncId = function (scheduler, id, delay) {
            if (delay === void 0) { delay = 0; }
            if (delay !== null && delay > 0) {
                return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);
            }
            scheduler.actions.push(this);
            return scheduler._scheduled || (scheduler._scheduled = immediateProvider$1.setImmediate(scheduler.flush.bind(scheduler, undefined)));
        };
        AsapAction.prototype.recycleAsyncId = function (scheduler, id, delay) {
            if (delay === void 0) { delay = 0; }
            if ((delay != null && delay > 0) || (delay == null && this.delay > 0)) {
                return _super.prototype.recycleAsyncId.call(this, scheduler, id, delay);
            }
            if (!scheduler.actions.some(function (action) { return action.id === id; })) {
                immediateProvider$1.clearImmediate(id);
                scheduler._scheduled = undefined;
            }
            return undefined;
        };
        return AsapAction;
    }(AsyncAction$1));

    var Scheduler$1 = (function () {
        function Scheduler(schedulerActionCtor, now) {
            if (now === void 0) { now = Scheduler.now; }
            this.schedulerActionCtor = schedulerActionCtor;
            this.now = now;
        }
        Scheduler.prototype.schedule = function (work, delay, state) {
            if (delay === void 0) { delay = 0; }
            return new this.schedulerActionCtor(this, work).schedule(state, delay);
        };
        Scheduler.now = dateTimestampProvider$1.now;
        return Scheduler;
    }());

    var AsyncScheduler$1 = (function (_super) {
        __extends$9(AsyncScheduler, _super);
        function AsyncScheduler(SchedulerAction, now) {
            if (now === void 0) { now = Scheduler$1.now; }
            var _this = _super.call(this, SchedulerAction, now) || this;
            _this.actions = [];
            _this._active = false;
            _this._scheduled = undefined;
            return _this;
        }
        AsyncScheduler.prototype.flush = function (action) {
            var actions = this.actions;
            if (this._active) {
                actions.push(action);
                return;
            }
            var error;
            this._active = true;
            do {
                if ((error = action.execute(action.state, action.delay))) {
                    break;
                }
            } while ((action = actions.shift()));
            this._active = false;
            if (error) {
                while ((action = actions.shift())) {
                    action.unsubscribe();
                }
                throw error;
            }
        };
        return AsyncScheduler;
    }(Scheduler$1));

    var AsapScheduler$1 = (function (_super) {
        __extends$9(AsapScheduler, _super);
        function AsapScheduler() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        AsapScheduler.prototype.flush = function (action) {
            this._active = true;
            var flushId = this._scheduled;
            this._scheduled = undefined;
            var actions = this.actions;
            var error;
            action = action || actions.shift();
            do {
                if ((error = action.execute(action.state, action.delay))) {
                    break;
                }
            } while ((action = actions[0]) && action.id === flushId && actions.shift());
            this._active = false;
            if (error) {
                while ((action = actions[0]) && action.id === flushId && actions.shift()) {
                    action.unsubscribe();
                }
                throw error;
            }
        };
        return AsapScheduler;
    }(AsyncScheduler$1));

    var asapScheduler$1 = new AsapScheduler$1(AsapAction$1);
    var asap$1 = asapScheduler$1;

    var asyncScheduler$1 = new AsyncScheduler$1(AsyncAction$1);
    var async$1 = asyncScheduler$1;

    var QueueAction$1 = (function (_super) {
        __extends$9(QueueAction, _super);
        function QueueAction(scheduler, work) {
            var _this = _super.call(this, scheduler, work) || this;
            _this.scheduler = scheduler;
            _this.work = work;
            return _this;
        }
        QueueAction.prototype.schedule = function (state, delay) {
            if (delay === void 0) { delay = 0; }
            if (delay > 0) {
                return _super.prototype.schedule.call(this, state, delay);
            }
            this.delay = delay;
            this.state = state;
            this.scheduler.flush(this);
            return this;
        };
        QueueAction.prototype.execute = function (state, delay) {
            return (delay > 0 || this.closed) ?
                _super.prototype.execute.call(this, state, delay) :
                this._execute(state, delay);
        };
        QueueAction.prototype.requestAsyncId = function (scheduler, id, delay) {
            if (delay === void 0) { delay = 0; }
            if ((delay != null && delay > 0) || (delay == null && this.delay > 0)) {
                return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);
            }
            return scheduler.flush(this);
        };
        return QueueAction;
    }(AsyncAction$1));

    var QueueScheduler$1 = (function (_super) {
        __extends$9(QueueScheduler, _super);
        function QueueScheduler() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return QueueScheduler;
    }(AsyncScheduler$1));

    var queueScheduler$1 = new QueueScheduler$1(QueueAction$1);
    var queue$1 = queueScheduler$1;

    var AnimationFrameAction$1 = (function (_super) {
        __extends$9(AnimationFrameAction, _super);
        function AnimationFrameAction(scheduler, work) {
            var _this = _super.call(this, scheduler, work) || this;
            _this.scheduler = scheduler;
            _this.work = work;
            return _this;
        }
        AnimationFrameAction.prototype.requestAsyncId = function (scheduler, id, delay) {
            if (delay === void 0) { delay = 0; }
            if (delay !== null && delay > 0) {
                return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);
            }
            scheduler.actions.push(this);
            return scheduler._scheduled || (scheduler._scheduled = animationFrameProvider$1.requestAnimationFrame(function () { return scheduler.flush(undefined); }));
        };
        AnimationFrameAction.prototype.recycleAsyncId = function (scheduler, id, delay) {
            if (delay === void 0) { delay = 0; }
            if ((delay != null && delay > 0) || (delay == null && this.delay > 0)) {
                return _super.prototype.recycleAsyncId.call(this, scheduler, id, delay);
            }
            if (!scheduler.actions.some(function (action) { return action.id === id; })) {
                animationFrameProvider$1.cancelAnimationFrame(id);
                scheduler._scheduled = undefined;
            }
            return undefined;
        };
        return AnimationFrameAction;
    }(AsyncAction$1));

    var AnimationFrameScheduler$1 = (function (_super) {
        __extends$9(AnimationFrameScheduler, _super);
        function AnimationFrameScheduler() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        AnimationFrameScheduler.prototype.flush = function (action) {
            this._active = true;
            var flushId = this._scheduled;
            this._scheduled = undefined;
            var actions = this.actions;
            var error;
            action = action || actions.shift();
            do {
                if ((error = action.execute(action.state, action.delay))) {
                    break;
                }
            } while ((action = actions[0]) && action.id === flushId && actions.shift());
            this._active = false;
            if (error) {
                while ((action = actions[0]) && action.id === flushId && actions.shift()) {
                    action.unsubscribe();
                }
                throw error;
            }
        };
        return AnimationFrameScheduler;
    }(AsyncScheduler$1));

    var animationFrameScheduler$1 = new AnimationFrameScheduler$1(AnimationFrameAction$1);
    var animationFrame$1 = animationFrameScheduler$1;

    var VirtualTimeScheduler$1 = (function (_super) {
        __extends$9(VirtualTimeScheduler, _super);
        function VirtualTimeScheduler(schedulerActionCtor, maxFrames) {
            if (schedulerActionCtor === void 0) { schedulerActionCtor = VirtualAction$1; }
            if (maxFrames === void 0) { maxFrames = Infinity; }
            var _this = _super.call(this, schedulerActionCtor, function () { return _this.frame; }) || this;
            _this.maxFrames = maxFrames;
            _this.frame = 0;
            _this.index = -1;
            return _this;
        }
        VirtualTimeScheduler.prototype.flush = function () {
            var _a = this, actions = _a.actions, maxFrames = _a.maxFrames;
            var error;
            var action;
            while ((action = actions[0]) && action.delay <= maxFrames) {
                actions.shift();
                this.frame = action.delay;
                if ((error = action.execute(action.state, action.delay))) {
                    break;
                }
            }
            if (error) {
                while ((action = actions.shift())) {
                    action.unsubscribe();
                }
                throw error;
            }
        };
        VirtualTimeScheduler.frameTimeFactor = 10;
        return VirtualTimeScheduler;
    }(AsyncScheduler$1));
    var VirtualAction$1 = (function (_super) {
        __extends$9(VirtualAction, _super);
        function VirtualAction(scheduler, work, index) {
            if (index === void 0) { index = (scheduler.index += 1); }
            var _this = _super.call(this, scheduler, work) || this;
            _this.scheduler = scheduler;
            _this.work = work;
            _this.index = index;
            _this.active = true;
            _this.index = scheduler.index = index;
            return _this;
        }
        VirtualAction.prototype.schedule = function (state, delay) {
            if (delay === void 0) { delay = 0; }
            if (Number.isFinite(delay)) {
                if (!this.id) {
                    return _super.prototype.schedule.call(this, state, delay);
                }
                this.active = false;
                var action = new VirtualAction(this.scheduler, this.work);
                this.add(action);
                return action.schedule(state, delay);
            }
            else {
                return Subscription$1.EMPTY;
            }
        };
        VirtualAction.prototype.requestAsyncId = function (scheduler, id, delay) {
            if (delay === void 0) { delay = 0; }
            this.delay = scheduler.frame + delay;
            var actions = scheduler.actions;
            actions.push(this);
            actions.sort(VirtualAction.sortActions);
            return true;
        };
        VirtualAction.prototype.recycleAsyncId = function (scheduler, id, delay) {
            return undefined;
        };
        VirtualAction.prototype._execute = function (state, delay) {
            if (this.active === true) {
                return _super.prototype._execute.call(this, state, delay);
            }
        };
        VirtualAction.sortActions = function (a, b) {
            if (a.delay === b.delay) {
                if (a.index === b.index) {
                    return 0;
                }
                else if (a.index > b.index) {
                    return 1;
                }
                else {
                    return -1;
                }
            }
            else if (a.delay > b.delay) {
                return 1;
            }
            else {
                return -1;
            }
        };
        return VirtualAction;
    }(AsyncAction$1));

    var EMPTY$1 = new Observable$1(function (subscriber) { return subscriber.complete(); });
    function empty$3(scheduler) {
        return scheduler ? emptyScheduled$1(scheduler) : EMPTY$1;
    }
    function emptyScheduled$1(scheduler) {
        return new Observable$1(function (subscriber) { return scheduler.schedule(function () { return subscriber.complete(); }); });
    }

    function isScheduler$1(value) {
        return value && isFunction$5(value.schedule);
    }

    function last$5(arr) {
        return arr[arr.length - 1];
    }
    function popResultSelector$1(args) {
        return isFunction$5(last$5(args)) ? args.pop() : undefined;
    }
    function popScheduler$1(args) {
        return isScheduler$1(last$5(args)) ? args.pop() : undefined;
    }
    function popNumber$1(args, defaultValue) {
        return typeof last$5(args) === 'number' ? args.pop() : defaultValue;
    }

    var isArrayLike$d = (function (x) { return x && typeof x.length === 'number' && typeof x !== 'function'; });

    function isPromise$3(value) {
        return isFunction$5(value === null || value === void 0 ? void 0 : value.then);
    }

    function isInteropObservable$1(input) {
        return isFunction$5(input[observable$1]);
    }

    function isAsyncIterable$1(obj) {
        return Symbol.asyncIterator && isFunction$5(obj === null || obj === void 0 ? void 0 : obj[Symbol.asyncIterator]);
    }

    function createInvalidObservableTypeError$1(input) {
        return new TypeError("You provided " + (input !== null && typeof input === 'object' ? 'an invalid object' : "'" + input + "'") + " where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.");
    }

    function getSymbolIterator$1() {
        if (typeof Symbol !== 'function' || !Symbol.iterator) {
            return '@@iterator';
        }
        return Symbol.iterator;
    }
    var iterator$1 = getSymbolIterator$1();

    function isIterable$1(input) {
        return isFunction$5(input === null || input === void 0 ? void 0 : input[iterator$1]);
    }

    function readableStreamLikeToAsyncGenerator$1(readableStream) {
        return __asyncGenerator$1(this, arguments, function readableStreamLikeToAsyncGenerator_1() {
            var reader, _a, value, done;
            return __generator$1(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        reader = readableStream.getReader();
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, , 9, 10]);
                        _b.label = 2;
                    case 2:
                        return [4, __await$1(reader.read())];
                    case 3:
                        _a = _b.sent(), value = _a.value, done = _a.done;
                        if (!done) return [3, 5];
                        return [4, __await$1(void 0)];
                    case 4: return [2, _b.sent()];
                    case 5: return [4, __await$1(value)];
                    case 6: return [4, _b.sent()];
                    case 7:
                        _b.sent();
                        return [3, 2];
                    case 8: return [3, 10];
                    case 9:
                        reader.releaseLock();
                        return [7];
                    case 10: return [2];
                }
            });
        });
    }
    function isReadableStreamLike$1(obj) {
        return isFunction$5(obj === null || obj === void 0 ? void 0 : obj.getReader);
    }

    function innerFrom$1(input) {
        if (input instanceof Observable$1) {
            return input;
        }
        if (input != null) {
            if (isInteropObservable$1(input)) {
                return fromInteropObservable$1(input);
            }
            if (isArrayLike$d(input)) {
                return fromArrayLike$1(input);
            }
            if (isPromise$3(input)) {
                return fromPromise$1(input);
            }
            if (isAsyncIterable$1(input)) {
                return fromAsyncIterable$1(input);
            }
            if (isIterable$1(input)) {
                return fromIterable$1(input);
            }
            if (isReadableStreamLike$1(input)) {
                return fromReadableStreamLike$1(input);
            }
        }
        throw createInvalidObservableTypeError$1(input);
    }
    function fromInteropObservable$1(obj) {
        return new Observable$1(function (subscriber) {
            var obs = obj[observable$1]();
            if (isFunction$5(obs.subscribe)) {
                return obs.subscribe(subscriber);
            }
            throw new TypeError('Provided object does not correctly implement Symbol.observable');
        });
    }
    function fromArrayLike$1(array) {
        return new Observable$1(function (subscriber) {
            for (var i = 0; i < array.length && !subscriber.closed; i++) {
                subscriber.next(array[i]);
            }
            subscriber.complete();
        });
    }
    function fromPromise$1(promise) {
        return new Observable$1(function (subscriber) {
            promise
                .then(function (value) {
                if (!subscriber.closed) {
                    subscriber.next(value);
                    subscriber.complete();
                }
            }, function (err) { return subscriber.error(err); })
                .then(null, reportUnhandledError$1);
        });
    }
    function fromIterable$1(iterable) {
        return new Observable$1(function (subscriber) {
            var e_1, _a;
            try {
                for (var iterable_1 = __values$1(iterable), iterable_1_1 = iterable_1.next(); !iterable_1_1.done; iterable_1_1 = iterable_1.next()) {
                    var value = iterable_1_1.value;
                    subscriber.next(value);
                    if (subscriber.closed) {
                        return;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (iterable_1_1 && !iterable_1_1.done && (_a = iterable_1.return)) _a.call(iterable_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
            subscriber.complete();
        });
    }
    function fromAsyncIterable$1(asyncIterable) {
        return new Observable$1(function (subscriber) {
            process$3(asyncIterable, subscriber).catch(function (err) { return subscriber.error(err); });
        });
    }
    function fromReadableStreamLike$1(readableStream) {
        return fromAsyncIterable$1(readableStreamLikeToAsyncGenerator$1(readableStream));
    }
    function process$3(asyncIterable, subscriber) {
        var asyncIterable_1, asyncIterable_1_1;
        var e_2, _a;
        return __awaiter$2(this, void 0, void 0, function () {
            var value, e_2_1;
            return __generator$1(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _b.trys.push([0, 5, 6, 11]);
                        asyncIterable_1 = __asyncValues$1(asyncIterable);
                        _b.label = 1;
                    case 1: return [4, asyncIterable_1.next()];
                    case 2:
                        if (!(asyncIterable_1_1 = _b.sent(), !asyncIterable_1_1.done)) return [3, 4];
                        value = asyncIterable_1_1.value;
                        subscriber.next(value);
                        if (subscriber.closed) {
                            return [2];
                        }
                        _b.label = 3;
                    case 3: return [3, 1];
                    case 4: return [3, 11];
                    case 5:
                        e_2_1 = _b.sent();
                        e_2 = { error: e_2_1 };
                        return [3, 11];
                    case 6:
                        _b.trys.push([6, , 9, 10]);
                        if (!(asyncIterable_1_1 && !asyncIterable_1_1.done && (_a = asyncIterable_1.return))) return [3, 8];
                        return [4, _a.call(asyncIterable_1)];
                    case 7:
                        _b.sent();
                        _b.label = 8;
                    case 8: return [3, 10];
                    case 9:
                        if (e_2) throw e_2.error;
                        return [7];
                    case 10: return [7];
                    case 11:
                        subscriber.complete();
                        return [2];
                }
            });
        });
    }

    function executeSchedule$1(parentSubscription, scheduler, work, delay, repeat) {
        if (delay === void 0) { delay = 0; }
        if (repeat === void 0) { repeat = false; }
        var scheduleSubscription = scheduler.schedule(function () {
            work();
            if (repeat) {
                parentSubscription.add(this.schedule(null, delay));
            }
            else {
                this.unsubscribe();
            }
        }, delay);
        parentSubscription.add(scheduleSubscription);
        if (!repeat) {
            return scheduleSubscription;
        }
    }

    function observeOn$1(scheduler, delay) {
        if (delay === void 0) { delay = 0; }
        return operate$1(function (source, subscriber) {
            source.subscribe(new OperatorSubscriber$1(subscriber, function (value) { return executeSchedule$1(subscriber, scheduler, function () { return subscriber.next(value); }, delay); }, function () { return executeSchedule$1(subscriber, scheduler, function () { return subscriber.complete(); }, delay); }, function (err) { return executeSchedule$1(subscriber, scheduler, function () { return subscriber.error(err); }, delay); }));
        });
    }

    function subscribeOn$1(scheduler, delay) {
        if (delay === void 0) { delay = 0; }
        return operate$1(function (source, subscriber) {
            subscriber.add(scheduler.schedule(function () { return source.subscribe(subscriber); }, delay));
        });
    }

    function scheduleObservable$1(input, scheduler) {
        return innerFrom$1(input).pipe(subscribeOn$1(scheduler), observeOn$1(scheduler));
    }

    function schedulePromise$1(input, scheduler) {
        return innerFrom$1(input).pipe(subscribeOn$1(scheduler), observeOn$1(scheduler));
    }

    function scheduleArray$1(input, scheduler) {
        return new Observable$1(function (subscriber) {
            var i = 0;
            return scheduler.schedule(function () {
                if (i === input.length) {
                    subscriber.complete();
                }
                else {
                    subscriber.next(input[i++]);
                    if (!subscriber.closed) {
                        this.schedule();
                    }
                }
            });
        });
    }

    function scheduleIterable$1(input, scheduler) {
        return new Observable$1(function (subscriber) {
            var iterator;
            executeSchedule$1(subscriber, scheduler, function () {
                iterator = input[iterator$1]();
                executeSchedule$1(subscriber, scheduler, function () {
                    var _a;
                    var value;
                    var done;
                    try {
                        (_a = iterator.next(), value = _a.value, done = _a.done);
                    }
                    catch (err) {
                        subscriber.error(err);
                        return;
                    }
                    if (done) {
                        subscriber.complete();
                    }
                    else {
                        subscriber.next(value);
                    }
                }, 0, true);
            });
            return function () { return isFunction$5(iterator === null || iterator === void 0 ? void 0 : iterator.return) && iterator.return(); };
        });
    }

    function scheduleAsyncIterable$1(input, scheduler) {
        if (!input) {
            throw new Error('Iterable cannot be null');
        }
        return new Observable$1(function (subscriber) {
            executeSchedule$1(subscriber, scheduler, function () {
                var iterator = input[Symbol.asyncIterator]();
                executeSchedule$1(subscriber, scheduler, function () {
                    iterator.next().then(function (result) {
                        if (result.done) {
                            subscriber.complete();
                        }
                        else {
                            subscriber.next(result.value);
                        }
                    });
                }, 0, true);
            });
        });
    }

    function scheduleReadableStreamLike$1(input, scheduler) {
        return scheduleAsyncIterable$1(readableStreamLikeToAsyncGenerator$1(input), scheduler);
    }

    function scheduled$1(input, scheduler) {
        if (input != null) {
            if (isInteropObservable$1(input)) {
                return scheduleObservable$1(input, scheduler);
            }
            if (isArrayLike$d(input)) {
                return scheduleArray$1(input, scheduler);
            }
            if (isPromise$3(input)) {
                return schedulePromise$1(input, scheduler);
            }
            if (isAsyncIterable$1(input)) {
                return scheduleAsyncIterable$1(input, scheduler);
            }
            if (isIterable$1(input)) {
                return scheduleIterable$1(input, scheduler);
            }
            if (isReadableStreamLike$1(input)) {
                return scheduleReadableStreamLike$1(input, scheduler);
            }
        }
        throw createInvalidObservableTypeError$1(input);
    }

    function from$7(input, scheduler) {
        return scheduler ? scheduled$1(input, scheduler) : innerFrom$1(input);
    }

    function of$5() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var scheduler = popScheduler$1(args);
        return from$7(args, scheduler);
    }

    function throwError$1(errorOrErrorFactory, scheduler) {
        var errorFactory = isFunction$5(errorOrErrorFactory) ? errorOrErrorFactory : function () { return errorOrErrorFactory; };
        var init = function (subscriber) { return subscriber.error(errorFactory()); };
        return new Observable$1(scheduler ? function (subscriber) { return scheduler.schedule(init, 0, subscriber); } : init);
    }

    var NotificationKind$1;
    (function (NotificationKind) {
        NotificationKind["NEXT"] = "N";
        NotificationKind["ERROR"] = "E";
        NotificationKind["COMPLETE"] = "C";
    })(NotificationKind$1 || (NotificationKind$1 = {}));
    var Notification$1 = (function () {
        function Notification(kind, value, error) {
            this.kind = kind;
            this.value = value;
            this.error = error;
            this.hasValue = kind === 'N';
        }
        Notification.prototype.observe = function (observer) {
            return observeNotification$1(this, observer);
        };
        Notification.prototype.do = function (nextHandler, errorHandler, completeHandler) {
            var _a = this, kind = _a.kind, value = _a.value, error = _a.error;
            return kind === 'N' ? nextHandler === null || nextHandler === void 0 ? void 0 : nextHandler(value) : kind === 'E' ? errorHandler === null || errorHandler === void 0 ? void 0 : errorHandler(error) : completeHandler === null || completeHandler === void 0 ? void 0 : completeHandler();
        };
        Notification.prototype.accept = function (nextOrObserver, error, complete) {
            var _a;
            return isFunction$5((_a = nextOrObserver) === null || _a === void 0 ? void 0 : _a.next)
                ? this.observe(nextOrObserver)
                : this.do(nextOrObserver, error, complete);
        };
        Notification.prototype.toObservable = function () {
            var _a = this, kind = _a.kind, value = _a.value, error = _a.error;
            var result = kind === 'N'
                ?
                    of$5(value)
                :
                    kind === 'E'
                        ?
                            throwError$1(function () { return error; })
                        :
                            kind === 'C'
                                ?
                                    EMPTY$1
                                :
                                    0;
            if (!result) {
                throw new TypeError("Unexpected notification kind " + kind);
            }
            return result;
        };
        Notification.createNext = function (value) {
            return new Notification('N', value);
        };
        Notification.createError = function (err) {
            return new Notification('E', undefined, err);
        };
        Notification.createComplete = function () {
            return Notification.completeNotification;
        };
        Notification.completeNotification = new Notification('C');
        return Notification;
    }());
    function observeNotification$1(notification, observer) {
        var _a, _b, _c;
        var _d = notification, kind = _d.kind, value = _d.value, error = _d.error;
        if (typeof kind !== 'string') {
            throw new TypeError('Invalid notification, missing "kind"');
        }
        kind === 'N' ? (_a = observer.next) === null || _a === void 0 ? void 0 : _a.call(observer, value) : kind === 'E' ? (_b = observer.error) === null || _b === void 0 ? void 0 : _b.call(observer, error) : (_c = observer.complete) === null || _c === void 0 ? void 0 : _c.call(observer);
    }

    function isObservable$1(obj) {
        return !!obj && (obj instanceof Observable$1 || (isFunction$5(obj.lift) && isFunction$5(obj.subscribe)));
    }

    var EmptyError$1 = createErrorClass$1(function (_super) { return function EmptyErrorImpl() {
        _super(this);
        this.name = 'EmptyError';
        this.message = 'no elements in sequence';
    }; });

    function lastValueFrom$1(source, config) {
        var hasConfig = typeof config === 'object';
        return new Promise(function (resolve, reject) {
            var _hasValue = false;
            var _value;
            source.subscribe({
                next: function (value) {
                    _value = value;
                    _hasValue = true;
                },
                error: reject,
                complete: function () {
                    if (_hasValue) {
                        resolve(_value);
                    }
                    else if (hasConfig) {
                        resolve(config.defaultValue);
                    }
                    else {
                        reject(new EmptyError$1());
                    }
                },
            });
        });
    }

    function firstValueFrom$1(source, config) {
        var hasConfig = typeof config === 'object';
        return new Promise(function (resolve, reject) {
            var subscriber = new SafeSubscriber$1({
                next: function (value) {
                    resolve(value);
                    subscriber.unsubscribe();
                },
                error: reject,
                complete: function () {
                    if (hasConfig) {
                        resolve(config.defaultValue);
                    }
                    else {
                        reject(new EmptyError$1());
                    }
                },
            });
            source.subscribe(subscriber);
        });
    }

    var ArgumentOutOfRangeError$1 = createErrorClass$1(function (_super) {
        return function ArgumentOutOfRangeErrorImpl() {
            _super(this);
            this.name = 'ArgumentOutOfRangeError';
            this.message = 'argument out of range';
        };
    });

    var NotFoundError$1 = createErrorClass$1(function (_super) {
        return function NotFoundErrorImpl(message) {
            _super(this);
            this.name = 'NotFoundError';
            this.message = message;
        };
    });

    var SequenceError$1 = createErrorClass$1(function (_super) {
        return function SequenceErrorImpl(message) {
            _super(this);
            this.name = 'SequenceError';
            this.message = message;
        };
    });

    function isValidDate$1(value) {
        return value instanceof Date && !isNaN(value);
    }

    var TimeoutError$1 = createErrorClass$1(function (_super) {
        return function TimeoutErrorImpl(info) {
            if (info === void 0) { info = null; }
            _super(this);
            this.message = 'Timeout has occurred';
            this.name = 'TimeoutError';
            this.info = info;
        };
    });
    function timeout$1(config, schedulerArg) {
        var _a = (isValidDate$1(config)
            ? { first: config }
            : typeof config === 'number'
                ? { each: config }
                : config), first = _a.first, each = _a.each, _b = _a.with, _with = _b === void 0 ? timeoutErrorFactory$1 : _b, _c = _a.scheduler, scheduler = _c === void 0 ? schedulerArg !== null && schedulerArg !== void 0 ? schedulerArg : asyncScheduler$1 : _c, _d = _a.meta, meta = _d === void 0 ? null : _d;
        if (first == null && each == null) {
            throw new TypeError('No timeout provided.');
        }
        return operate$1(function (source, subscriber) {
            var originalSourceSubscription;
            var timerSubscription;
            var lastValue = null;
            var seen = 0;
            var startTimer = function (delay) {
                timerSubscription = executeSchedule$1(subscriber, scheduler, function () {
                    try {
                        originalSourceSubscription.unsubscribe();
                        innerFrom$1(_with({
                            meta: meta,
                            lastValue: lastValue,
                            seen: seen,
                        })).subscribe(subscriber);
                    }
                    catch (err) {
                        subscriber.error(err);
                    }
                }, delay);
            };
            originalSourceSubscription = source.subscribe(new OperatorSubscriber$1(subscriber, function (value) {
                timerSubscription === null || timerSubscription === void 0 ? void 0 : timerSubscription.unsubscribe();
                seen++;
                subscriber.next((lastValue = value));
                each > 0 && startTimer(each);
            }, undefined, undefined, function () {
                if (!(timerSubscription === null || timerSubscription === void 0 ? void 0 : timerSubscription.closed)) {
                    timerSubscription === null || timerSubscription === void 0 ? void 0 : timerSubscription.unsubscribe();
                }
                lastValue = null;
            }));
            startTimer(first != null ? (typeof first === 'number' ? first : +first - scheduler.now()) : each);
        });
    }
    function timeoutErrorFactory$1(info) {
        throw new TimeoutError$1(info);
    }

    function map$h(project, thisArg) {
        return operate$1(function (source, subscriber) {
            var index = 0;
            source.subscribe(new OperatorSubscriber$1(subscriber, function (value) {
                subscriber.next(project.call(thisArg, value, index++));
            }));
        });
    }

    var isArray$s = Array.isArray;
    function callOrApply$1(fn, args) {
        return isArray$s(args) ? fn.apply(void 0, __spreadArray$1([], __read$1(args))) : fn(args);
    }
    function mapOneOrManyArgs$1(fn) {
        return map$h(function (args) { return callOrApply$1(fn, args); });
    }

    function bindCallbackInternals$1(isNodeStyle, callbackFunc, resultSelector, scheduler) {
        if (resultSelector) {
            if (isScheduler$1(resultSelector)) {
                scheduler = resultSelector;
            }
            else {
                return function () {
                    var args = [];
                    for (var _i = 0; _i < arguments.length; _i++) {
                        args[_i] = arguments[_i];
                    }
                    return bindCallbackInternals$1(isNodeStyle, callbackFunc, scheduler)
                        .apply(this, args)
                        .pipe(mapOneOrManyArgs$1(resultSelector));
                };
            }
        }
        if (scheduler) {
            return function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                return bindCallbackInternals$1(isNodeStyle, callbackFunc)
                    .apply(this, args)
                    .pipe(subscribeOn$1(scheduler), observeOn$1(scheduler));
            };
        }
        return function () {
            var _this = this;
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            var subject = new AsyncSubject$1();
            var uninitialized = true;
            return new Observable$1(function (subscriber) {
                var subs = subject.subscribe(subscriber);
                if (uninitialized) {
                    uninitialized = false;
                    var isAsync_1 = false;
                    var isComplete_1 = false;
                    callbackFunc.apply(_this, __spreadArray$1(__spreadArray$1([], __read$1(args)), [
                        function () {
                            var results = [];
                            for (var _i = 0; _i < arguments.length; _i++) {
                                results[_i] = arguments[_i];
                            }
                            if (isNodeStyle) {
                                var err = results.shift();
                                if (err != null) {
                                    subject.error(err);
                                    return;
                                }
                            }
                            subject.next(1 < results.length ? results : results[0]);
                            isComplete_1 = true;
                            if (isAsync_1) {
                                subject.complete();
                            }
                        },
                    ]));
                    if (isComplete_1) {
                        subject.complete();
                    }
                    isAsync_1 = true;
                }
                return subs;
            });
        };
    }

    function bindCallback$1(callbackFunc, resultSelector, scheduler) {
        return bindCallbackInternals$1(false, callbackFunc, resultSelector, scheduler);
    }

    function bindNodeCallback$1(callbackFunc, resultSelector, scheduler) {
        return bindCallbackInternals$1(true, callbackFunc, resultSelector, scheduler);
    }

    var isArray$r = Array.isArray;
    var getPrototypeOf$1 = Object.getPrototypeOf, objectProto$n = Object.prototype, getKeys$1 = Object.keys;
    function argsArgArrayOrObject$1(args) {
        if (args.length === 1) {
            var first_1 = args[0];
            if (isArray$r(first_1)) {
                return { args: first_1, keys: null };
            }
            if (isPOJO$1(first_1)) {
                var keys = getKeys$1(first_1);
                return {
                    args: keys.map(function (key) { return first_1[key]; }),
                    keys: keys,
                };
            }
        }
        return { args: args, keys: null };
    }
    function isPOJO$1(obj) {
        return obj && typeof obj === 'object' && getPrototypeOf$1(obj) === objectProto$n;
    }

    function createObject$1(keys, values) {
        return keys.reduce(function (result, key, i) { return ((result[key] = values[i]), result); }, {});
    }

    function combineLatest$3() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var scheduler = popScheduler$1(args);
        var resultSelector = popResultSelector$1(args);
        var _a = argsArgArrayOrObject$1(args), observables = _a.args, keys = _a.keys;
        if (observables.length === 0) {
            return from$7([], scheduler);
        }
        var result = new Observable$1(combineLatestInit$1(observables, scheduler, keys
            ?
                function (values) { return createObject$1(keys, values); }
            :
                identity$8));
        return resultSelector ? result.pipe(mapOneOrManyArgs$1(resultSelector)) : result;
    }
    function combineLatestInit$1(observables, scheduler, valueTransform) {
        if (valueTransform === void 0) { valueTransform = identity$8; }
        return function (subscriber) {
            maybeSchedule$1(scheduler, function () {
                var length = observables.length;
                var values = new Array(length);
                var active = length;
                var remainingFirstValues = length;
                var _loop_1 = function (i) {
                    maybeSchedule$1(scheduler, function () {
                        var source = from$7(observables[i], scheduler);
                        var hasFirstValue = false;
                        source.subscribe(new OperatorSubscriber$1(subscriber, function (value) {
                            values[i] = value;
                            if (!hasFirstValue) {
                                hasFirstValue = true;
                                remainingFirstValues--;
                            }
                            if (!remainingFirstValues) {
                                subscriber.next(valueTransform(values.slice()));
                            }
                        }, function () {
                            if (!--active) {
                                subscriber.complete();
                            }
                        }));
                    }, subscriber);
                };
                for (var i = 0; i < length; i++) {
                    _loop_1(i);
                }
            }, subscriber);
        };
    }
    function maybeSchedule$1(scheduler, execute, subscription) {
        if (scheduler) {
            executeSchedule$1(subscription, scheduler, execute);
        }
        else {
            execute();
        }
    }

    function mergeInternals$1(source, subscriber, project, concurrent, onBeforeNext, expand, innerSubScheduler, additionalTeardown) {
        var buffer = [];
        var active = 0;
        var index = 0;
        var isComplete = false;
        var checkComplete = function () {
            if (isComplete && !buffer.length && !active) {
                subscriber.complete();
            }
        };
        var outerNext = function (value) { return (active < concurrent ? doInnerSub(value) : buffer.push(value)); };
        var doInnerSub = function (value) {
            expand && subscriber.next(value);
            active++;
            var innerComplete = false;
            innerFrom$1(project(value, index++)).subscribe(new OperatorSubscriber$1(subscriber, function (innerValue) {
                onBeforeNext === null || onBeforeNext === void 0 ? void 0 : onBeforeNext(innerValue);
                if (expand) {
                    outerNext(innerValue);
                }
                else {
                    subscriber.next(innerValue);
                }
            }, function () {
                innerComplete = true;
            }, undefined, function () {
                if (innerComplete) {
                    try {
                        active--;
                        var _loop_1 = function () {
                            var bufferedValue = buffer.shift();
                            if (innerSubScheduler) {
                                executeSchedule$1(subscriber, innerSubScheduler, function () { return doInnerSub(bufferedValue); });
                            }
                            else {
                                doInnerSub(bufferedValue);
                            }
                        };
                        while (buffer.length && active < concurrent) {
                            _loop_1();
                        }
                        checkComplete();
                    }
                    catch (err) {
                        subscriber.error(err);
                    }
                }
            }));
        };
        source.subscribe(new OperatorSubscriber$1(subscriber, outerNext, function () {
            isComplete = true;
            checkComplete();
        }));
        return function () {
            additionalTeardown === null || additionalTeardown === void 0 ? void 0 : additionalTeardown();
        };
    }

    function mergeMap$1(project, resultSelector, concurrent) {
        if (concurrent === void 0) { concurrent = Infinity; }
        if (isFunction$5(resultSelector)) {
            return mergeMap$1(function (a, i) { return map$h(function (b, ii) { return resultSelector(a, b, i, ii); })(innerFrom$1(project(a, i))); }, concurrent);
        }
        else if (typeof resultSelector === 'number') {
            concurrent = resultSelector;
        }
        return operate$1(function (source, subscriber) { return mergeInternals$1(source, subscriber, project, concurrent); });
    }

    function mergeAll$1(concurrent) {
        if (concurrent === void 0) { concurrent = Infinity; }
        return mergeMap$1(identity$8, concurrent);
    }

    function concatAll$1() {
        return mergeAll$1(1);
    }

    function concat$3() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return concatAll$1()(from$7(args, popScheduler$1(args)));
    }

    function defer$3(observableFactory) {
        return new Observable$1(function (subscriber) {
            innerFrom$1(observableFactory()).subscribe(subscriber);
        });
    }

    var DEFAULT_CONFIG$3 = {
        connector: function () { return new Subject$3(); },
        resetOnDisconnect: true,
    };
    function connectable$1(source, config) {
        if (config === void 0) { config = DEFAULT_CONFIG$3; }
        var connection = null;
        var connector = config.connector, _a = config.resetOnDisconnect, resetOnDisconnect = _a === void 0 ? true : _a;
        var subject = connector();
        var result = new Observable$1(function (subscriber) {
            return subject.subscribe(subscriber);
        });
        result.connect = function () {
            if (!connection || connection.closed) {
                connection = defer$3(function () { return source; }).subscribe(subject);
                if (resetOnDisconnect) {
                    connection.add(function () { return (subject = connector()); });
                }
            }
            return connection;
        };
        return result;
    }

    function forkJoin$1() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var resultSelector = popResultSelector$1(args);
        var _a = argsArgArrayOrObject$1(args), sources = _a.args, keys = _a.keys;
        var result = new Observable$1(function (subscriber) {
            var length = sources.length;
            if (!length) {
                subscriber.complete();
                return;
            }
            var values = new Array(length);
            var remainingCompletions = length;
            var remainingEmissions = length;
            var _loop_1 = function (sourceIndex) {
                var hasValue = false;
                innerFrom$1(sources[sourceIndex]).subscribe(new OperatorSubscriber$1(subscriber, function (value) {
                    if (!hasValue) {
                        hasValue = true;
                        remainingEmissions--;
                    }
                    values[sourceIndex] = value;
                }, function () { return remainingCompletions--; }, undefined, function () {
                    if (!remainingCompletions || !hasValue) {
                        if (!remainingEmissions) {
                            subscriber.next(keys ? createObject$1(keys, values) : values);
                        }
                        subscriber.complete();
                    }
                }));
            };
            for (var sourceIndex = 0; sourceIndex < length; sourceIndex++) {
                _loop_1(sourceIndex);
            }
        });
        return resultSelector ? result.pipe(mapOneOrManyArgs$1(resultSelector)) : result;
    }

    var nodeEventEmitterMethods$1 = ['addListener', 'removeListener'];
    var eventTargetMethods$1 = ['addEventListener', 'removeEventListener'];
    var jqueryMethods$1 = ['on', 'off'];
    function fromEvent$3(target, eventName, options, resultSelector) {
        if (isFunction$5(options)) {
            resultSelector = options;
            options = undefined;
        }
        if (resultSelector) {
            return fromEvent$3(target, eventName, options).pipe(mapOneOrManyArgs$1(resultSelector));
        }
        var _a = __read$1(isEventTarget$1(target)
            ? eventTargetMethods$1.map(function (methodName) { return function (handler) { return target[methodName](eventName, handler, options); }; })
            :
                isNodeStyleEventEmitter$1(target)
                    ? nodeEventEmitterMethods$1.map(toCommonHandlerRegistry$1(target, eventName))
                    : isJQueryStyleEventEmitter$1(target)
                        ? jqueryMethods$1.map(toCommonHandlerRegistry$1(target, eventName))
                        : [], 2), add = _a[0], remove = _a[1];
        if (!add) {
            if (isArrayLike$d(target)) {
                return mergeMap$1(function (subTarget) { return fromEvent$3(subTarget, eventName, options); })(innerFrom$1(target));
            }
        }
        if (!add) {
            throw new TypeError('Invalid event target');
        }
        return new Observable$1(function (subscriber) {
            var handler = function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                return subscriber.next(1 < args.length ? args : args[0]);
            };
            add(handler);
            return function () { return remove(handler); };
        });
    }
    function toCommonHandlerRegistry$1(target, eventName) {
        return function (methodName) { return function (handler) { return target[methodName](eventName, handler); }; };
    }
    function isNodeStyleEventEmitter$1(target) {
        return isFunction$5(target.addListener) && isFunction$5(target.removeListener);
    }
    function isJQueryStyleEventEmitter$1(target) {
        return isFunction$5(target.on) && isFunction$5(target.off);
    }
    function isEventTarget$1(target) {
        return isFunction$5(target.addEventListener) && isFunction$5(target.removeEventListener);
    }

    function fromEventPattern$1(addHandler, removeHandler, resultSelector) {
        if (resultSelector) {
            return fromEventPattern$1(addHandler, removeHandler).pipe(mapOneOrManyArgs$1(resultSelector));
        }
        return new Observable$1(function (subscriber) {
            var handler = function () {
                var e = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    e[_i] = arguments[_i];
                }
                return subscriber.next(e.length === 1 ? e[0] : e);
            };
            var retValue = addHandler(handler);
            return isFunction$5(removeHandler) ? function () { return removeHandler(handler, retValue); } : undefined;
        });
    }

    function generate$1(initialStateOrOptions, condition, iterate, resultSelectorOrScheduler, scheduler) {
        var _a, _b;
        var resultSelector;
        var initialState;
        if (arguments.length === 1) {
            (_a = initialStateOrOptions, initialState = _a.initialState, condition = _a.condition, iterate = _a.iterate, _b = _a.resultSelector, resultSelector = _b === void 0 ? identity$8 : _b, scheduler = _a.scheduler);
        }
        else {
            initialState = initialStateOrOptions;
            if (!resultSelectorOrScheduler || isScheduler$1(resultSelectorOrScheduler)) {
                resultSelector = identity$8;
                scheduler = resultSelectorOrScheduler;
            }
            else {
                resultSelector = resultSelectorOrScheduler;
            }
        }
        function gen() {
            var state;
            return __generator$1(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        state = initialState;
                        _a.label = 1;
                    case 1:
                        if (!(!condition || condition(state))) return [3, 4];
                        return [4, resultSelector(state)];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3:
                        state = iterate(state);
                        return [3, 1];
                    case 4: return [2];
                }
            });
        }
        return defer$3((scheduler
            ?
                function () { return scheduleIterable$1(gen(), scheduler); }
            :
                gen));
    }

    function iif$1(condition, trueResult, falseResult) {
        return defer$3(function () { return (condition() ? trueResult : falseResult); });
    }

    function timer$1(dueTime, intervalOrScheduler, scheduler) {
        if (dueTime === void 0) { dueTime = 0; }
        if (scheduler === void 0) { scheduler = async$1; }
        var intervalDuration = -1;
        if (intervalOrScheduler != null) {
            if (isScheduler$1(intervalOrScheduler)) {
                scheduler = intervalOrScheduler;
            }
            else {
                intervalDuration = intervalOrScheduler;
            }
        }
        return new Observable$1(function (subscriber) {
            var due = isValidDate$1(dueTime) ? +dueTime - scheduler.now() : dueTime;
            if (due < 0) {
                due = 0;
            }
            var n = 0;
            return scheduler.schedule(function () {
                if (!subscriber.closed) {
                    subscriber.next(n++);
                    if (0 <= intervalDuration) {
                        this.schedule(undefined, intervalDuration);
                    }
                    else {
                        subscriber.complete();
                    }
                }
            }, due);
        });
    }

    function interval$1(period, scheduler) {
        if (period === void 0) { period = 0; }
        if (scheduler === void 0) { scheduler = asyncScheduler$1; }
        if (period < 0) {
            period = 0;
        }
        return timer$1(period, period, scheduler);
    }

    function merge$4() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var scheduler = popScheduler$1(args);
        var concurrent = popNumber$1(args, Infinity);
        var sources = args;
        return !sources.length
            ?
                EMPTY$1
            : sources.length === 1
                ?
                    innerFrom$1(sources[0])
                :
                    mergeAll$1(concurrent)(from$7(sources, scheduler));
    }

    var NEVER$1 = new Observable$1(noop$8);
    function never$1() {
        return NEVER$1;
    }

    var isArray$q = Array.isArray;
    function argsOrArgArray$1(args) {
        return args.length === 1 && isArray$q(args[0]) ? args[0] : args;
    }

    function onErrorResumeNext$3() {
        var sources = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            sources[_i] = arguments[_i];
        }
        var nextSources = argsOrArgArray$1(sources);
        return operate$1(function (source, subscriber) {
            var remaining = __spreadArray$1([source], __read$1(nextSources));
            var subscribeNext = function () {
                if (!subscriber.closed) {
                    if (remaining.length > 0) {
                        var nextSource = void 0;
                        try {
                            nextSource = innerFrom$1(remaining.shift());
                        }
                        catch (err) {
                            subscribeNext();
                            return;
                        }
                        var innerSub = new OperatorSubscriber$1(subscriber, undefined, noop$8, noop$8);
                        subscriber.add(nextSource.subscribe(innerSub));
                        innerSub.add(subscribeNext);
                    }
                    else {
                        subscriber.complete();
                    }
                }
            };
            subscribeNext();
        });
    }

    function onErrorResumeNext$2() {
        var sources = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            sources[_i] = arguments[_i];
        }
        return onErrorResumeNext$3(argsOrArgArray$1(sources))(EMPTY$1);
    }

    function pairs$1(obj, scheduler) {
        return from$7(Object.entries(obj), scheduler);
    }

    function not$1(pred, thisArg) {
        return function (value, index) { return !pred.call(thisArg, value, index); };
    }

    function filter$a(predicate, thisArg) {
        return operate$1(function (source, subscriber) {
            var index = 0;
            source.subscribe(new OperatorSubscriber$1(subscriber, function (value) { return predicate.call(thisArg, value, index++) && subscriber.next(value); }));
        });
    }

    function partition$3(source, predicate, thisArg) {
        return [filter$a(predicate, thisArg)(innerFrom$1(source)), filter$a(not$1(predicate, thisArg))(innerFrom$1(source))];
    }

    function race$3() {
        var sources = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            sources[_i] = arguments[_i];
        }
        sources = argsOrArgArray$1(sources);
        return sources.length === 1 ? innerFrom$1(sources[0]) : new Observable$1(raceInit$1(sources));
    }
    function raceInit$1(sources) {
        return function (subscriber) {
            var subscriptions = [];
            var _loop_1 = function (i) {
                subscriptions.push(innerFrom$1(sources[i]).subscribe(new OperatorSubscriber$1(subscriber, function (value) {
                    if (subscriptions) {
                        for (var s = 0; s < subscriptions.length; s++) {
                            s !== i && subscriptions[s].unsubscribe();
                        }
                        subscriptions = null;
                    }
                    subscriber.next(value);
                })));
            };
            for (var i = 0; subscriptions && !subscriber.closed && i < sources.length; i++) {
                _loop_1(i);
            }
        };
    }

    function range$2(start, count, scheduler) {
        if (count == null) {
            count = start;
            start = 0;
        }
        if (count <= 0) {
            return EMPTY$1;
        }
        var end = count + start;
        return new Observable$1(scheduler
            ?
                function (subscriber) {
                    var n = start;
                    return scheduler.schedule(function () {
                        if (n < end) {
                            subscriber.next(n++);
                            this.schedule();
                        }
                        else {
                            subscriber.complete();
                        }
                    });
                }
            :
                function (subscriber) {
                    var n = start;
                    while (n < end && !subscriber.closed) {
                        subscriber.next(n++);
                    }
                    subscriber.complete();
                });
    }

    function using$1(resourceFactory, observableFactory) {
        return new Observable$1(function (subscriber) {
            var resource = resourceFactory();
            var result = observableFactory(resource);
            var source = result ? innerFrom$1(result) : EMPTY$1;
            source.subscribe(subscriber);
            return function () {
                if (resource) {
                    resource.unsubscribe();
                }
            };
        });
    }

    function zip$3() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var resultSelector = popResultSelector$1(args);
        var sources = argsOrArgArray$1(args);
        return sources.length
            ? new Observable$1(function (subscriber) {
                var buffers = sources.map(function () { return []; });
                var completed = sources.map(function () { return false; });
                subscriber.add(function () {
                    buffers = completed = null;
                });
                var _loop_1 = function (sourceIndex) {
                    innerFrom$1(sources[sourceIndex]).subscribe(new OperatorSubscriber$1(subscriber, function (value) {
                        buffers[sourceIndex].push(value);
                        if (buffers.every(function (buffer) { return buffer.length; })) {
                            var result = buffers.map(function (buffer) { return buffer.shift(); });
                            subscriber.next(resultSelector ? resultSelector.apply(void 0, __spreadArray$1([], __read$1(result))) : result);
                            if (buffers.some(function (buffer, i) { return !buffer.length && completed[i]; })) {
                                subscriber.complete();
                            }
                        }
                    }, function () {
                        completed[sourceIndex] = true;
                        !buffers[sourceIndex].length && subscriber.complete();
                    }));
                };
                for (var sourceIndex = 0; !subscriber.closed && sourceIndex < sources.length; sourceIndex++) {
                    _loop_1(sourceIndex);
                }
                return function () {
                    buffers = completed = null;
                };
            })
            : EMPTY$1;
    }

    function audit$1(durationSelector) {
        return operate$1(function (source, subscriber) {
            var hasValue = false;
            var lastValue = null;
            var durationSubscriber = null;
            var isComplete = false;
            var endDuration = function () {
                durationSubscriber === null || durationSubscriber === void 0 ? void 0 : durationSubscriber.unsubscribe();
                durationSubscriber = null;
                if (hasValue) {
                    hasValue = false;
                    var value = lastValue;
                    lastValue = null;
                    subscriber.next(value);
                }
                isComplete && subscriber.complete();
            };
            var cleanupDuration = function () {
                durationSubscriber = null;
                isComplete && subscriber.complete();
            };
            source.subscribe(new OperatorSubscriber$1(subscriber, function (value) {
                hasValue = true;
                lastValue = value;
                if (!durationSubscriber) {
                    innerFrom$1(durationSelector(value)).subscribe((durationSubscriber = new OperatorSubscriber$1(subscriber, endDuration, cleanupDuration)));
                }
            }, function () {
                isComplete = true;
                (!hasValue || !durationSubscriber || durationSubscriber.closed) && subscriber.complete();
            }));
        });
    }

    function auditTime$1(duration, scheduler) {
        if (scheduler === void 0) { scheduler = asyncScheduler$1; }
        return audit$1(function () { return timer$1(duration, scheduler); });
    }

    function buffer$3(closingNotifier) {
        return operate$1(function (source, subscriber) {
            var currentBuffer = [];
            source.subscribe(new OperatorSubscriber$1(subscriber, function (value) { return currentBuffer.push(value); }, function () {
                subscriber.next(currentBuffer);
                subscriber.complete();
            }));
            closingNotifier.subscribe(new OperatorSubscriber$1(subscriber, function () {
                var b = currentBuffer;
                currentBuffer = [];
                subscriber.next(b);
            }, noop$8));
            return function () {
                currentBuffer = null;
            };
        });
    }

    function bufferCount$1(bufferSize, startBufferEvery) {
        if (startBufferEvery === void 0) { startBufferEvery = null; }
        startBufferEvery = startBufferEvery !== null && startBufferEvery !== void 0 ? startBufferEvery : bufferSize;
        return operate$1(function (source, subscriber) {
            var buffers = [];
            var count = 0;
            source.subscribe(new OperatorSubscriber$1(subscriber, function (value) {
                var e_1, _a, e_2, _b;
                var toEmit = null;
                if (count++ % startBufferEvery === 0) {
                    buffers.push([]);
                }
                try {
                    for (var buffers_1 = __values$1(buffers), buffers_1_1 = buffers_1.next(); !buffers_1_1.done; buffers_1_1 = buffers_1.next()) {
                        var buffer = buffers_1_1.value;
                        buffer.push(value);
                        if (bufferSize <= buffer.length) {
                            toEmit = toEmit !== null && toEmit !== void 0 ? toEmit : [];
                            toEmit.push(buffer);
                        }
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (buffers_1_1 && !buffers_1_1.done && (_a = buffers_1.return)) _a.call(buffers_1);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
                if (toEmit) {
                    try {
                        for (var toEmit_1 = __values$1(toEmit), toEmit_1_1 = toEmit_1.next(); !toEmit_1_1.done; toEmit_1_1 = toEmit_1.next()) {
                            var buffer = toEmit_1_1.value;
                            arrRemove$1(buffers, buffer);
                            subscriber.next(buffer);
                        }
                    }
                    catch (e_2_1) { e_2 = { error: e_2_1 }; }
                    finally {
                        try {
                            if (toEmit_1_1 && !toEmit_1_1.done && (_b = toEmit_1.return)) _b.call(toEmit_1);
                        }
                        finally { if (e_2) throw e_2.error; }
                    }
                }
            }, function () {
                var e_3, _a;
                try {
                    for (var buffers_2 = __values$1(buffers), buffers_2_1 = buffers_2.next(); !buffers_2_1.done; buffers_2_1 = buffers_2.next()) {
                        var buffer = buffers_2_1.value;
                        subscriber.next(buffer);
                    }
                }
                catch (e_3_1) { e_3 = { error: e_3_1 }; }
                finally {
                    try {
                        if (buffers_2_1 && !buffers_2_1.done && (_a = buffers_2.return)) _a.call(buffers_2);
                    }
                    finally { if (e_3) throw e_3.error; }
                }
                subscriber.complete();
            }, undefined, function () {
                buffers = null;
            }));
        });
    }

    function bufferTime$1(bufferTimeSpan) {
        var _a, _b;
        var otherArgs = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            otherArgs[_i - 1] = arguments[_i];
        }
        var scheduler = (_a = popScheduler$1(otherArgs)) !== null && _a !== void 0 ? _a : asyncScheduler$1;
        var bufferCreationInterval = (_b = otherArgs[0]) !== null && _b !== void 0 ? _b : null;
        var maxBufferSize = otherArgs[1] || Infinity;
        return operate$1(function (source, subscriber) {
            var bufferRecords = [];
            var restartOnEmit = false;
            var emit = function (record) {
                var buffer = record.buffer, subs = record.subs;
                subs.unsubscribe();
                arrRemove$1(bufferRecords, record);
                subscriber.next(buffer);
                restartOnEmit && startBuffer();
            };
            var startBuffer = function () {
                if (bufferRecords) {
                    var subs = new Subscription$1();
                    subscriber.add(subs);
                    var buffer = [];
                    var record_1 = {
                        buffer: buffer,
                        subs: subs,
                    };
                    bufferRecords.push(record_1);
                    executeSchedule$1(subs, scheduler, function () { return emit(record_1); }, bufferTimeSpan);
                }
            };
            if (bufferCreationInterval !== null && bufferCreationInterval >= 0) {
                executeSchedule$1(subscriber, scheduler, startBuffer, bufferCreationInterval, true);
            }
            else {
                restartOnEmit = true;
            }
            startBuffer();
            var bufferTimeSubscriber = new OperatorSubscriber$1(subscriber, function (value) {
                var e_1, _a;
                var recordsCopy = bufferRecords.slice();
                try {
                    for (var recordsCopy_1 = __values$1(recordsCopy), recordsCopy_1_1 = recordsCopy_1.next(); !recordsCopy_1_1.done; recordsCopy_1_1 = recordsCopy_1.next()) {
                        var record = recordsCopy_1_1.value;
                        var buffer = record.buffer;
                        buffer.push(value);
                        maxBufferSize <= buffer.length && emit(record);
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (recordsCopy_1_1 && !recordsCopy_1_1.done && (_a = recordsCopy_1.return)) _a.call(recordsCopy_1);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
            }, function () {
                while (bufferRecords === null || bufferRecords === void 0 ? void 0 : bufferRecords.length) {
                    subscriber.next(bufferRecords.shift().buffer);
                }
                bufferTimeSubscriber === null || bufferTimeSubscriber === void 0 ? void 0 : bufferTimeSubscriber.unsubscribe();
                subscriber.complete();
                subscriber.unsubscribe();
            }, undefined, function () { return (bufferRecords = null); });
            source.subscribe(bufferTimeSubscriber);
        });
    }

    function bufferToggle$1(openings, closingSelector) {
        return operate$1(function (source, subscriber) {
            var buffers = [];
            innerFrom$1(openings).subscribe(new OperatorSubscriber$1(subscriber, function (openValue) {
                var buffer = [];
                buffers.push(buffer);
                var closingSubscription = new Subscription$1();
                var emitBuffer = function () {
                    arrRemove$1(buffers, buffer);
                    subscriber.next(buffer);
                    closingSubscription.unsubscribe();
                };
                closingSubscription.add(innerFrom$1(closingSelector(openValue)).subscribe(new OperatorSubscriber$1(subscriber, emitBuffer, noop$8)));
            }, noop$8));
            source.subscribe(new OperatorSubscriber$1(subscriber, function (value) {
                var e_1, _a;
                try {
                    for (var buffers_1 = __values$1(buffers), buffers_1_1 = buffers_1.next(); !buffers_1_1.done; buffers_1_1 = buffers_1.next()) {
                        var buffer = buffers_1_1.value;
                        buffer.push(value);
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (buffers_1_1 && !buffers_1_1.done && (_a = buffers_1.return)) _a.call(buffers_1);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
            }, function () {
                while (buffers.length > 0) {
                    subscriber.next(buffers.shift());
                }
                subscriber.complete();
            }));
        });
    }

    function bufferWhen$1(closingSelector) {
        return operate$1(function (source, subscriber) {
            var buffer = null;
            var closingSubscriber = null;
            var openBuffer = function () {
                closingSubscriber === null || closingSubscriber === void 0 ? void 0 : closingSubscriber.unsubscribe();
                var b = buffer;
                buffer = [];
                b && subscriber.next(b);
                innerFrom$1(closingSelector()).subscribe((closingSubscriber = new OperatorSubscriber$1(subscriber, openBuffer, noop$8)));
            };
            openBuffer();
            source.subscribe(new OperatorSubscriber$1(subscriber, function (value) { return buffer === null || buffer === void 0 ? void 0 : buffer.push(value); }, function () {
                buffer && subscriber.next(buffer);
                subscriber.complete();
            }, undefined, function () { return (buffer = closingSubscriber = null); }));
        });
    }

    function catchError$1(selector) {
        return operate$1(function (source, subscriber) {
            var innerSub = null;
            var syncUnsub = false;
            var handledResult;
            innerSub = source.subscribe(new OperatorSubscriber$1(subscriber, undefined, undefined, function (err) {
                handledResult = innerFrom$1(selector(err, catchError$1(selector)(source)));
                if (innerSub) {
                    innerSub.unsubscribe();
                    innerSub = null;
                    handledResult.subscribe(subscriber);
                }
                else {
                    syncUnsub = true;
                }
            }));
            if (syncUnsub) {
                innerSub.unsubscribe();
                innerSub = null;
                handledResult.subscribe(subscriber);
            }
        });
    }

    function scanInternals$1(accumulator, seed, hasSeed, emitOnNext, emitBeforeComplete) {
        return function (source, subscriber) {
            var hasState = hasSeed;
            var state = seed;
            var index = 0;
            source.subscribe(new OperatorSubscriber$1(subscriber, function (value) {
                var i = index++;
                state = hasState
                    ?
                        accumulator(state, value, i)
                    :
                        ((hasState = true), value);
                emitOnNext && subscriber.next(state);
            }, emitBeforeComplete &&
                (function () {
                    hasState && subscriber.next(state);
                    subscriber.complete();
                })));
        };
    }

    function reduce$3(accumulator, seed) {
        return operate$1(scanInternals$1(accumulator, seed, arguments.length >= 2, false, true));
    }

    var arrReducer$1 = function (arr, value) { return (arr.push(value), arr); };
    function toArray$1() {
        return operate$1(function (source, subscriber) {
            reduce$3(arrReducer$1, [])(source).subscribe(subscriber);
        });
    }

    function joinAllInternals$1(joinFn, project) {
        return pipe$4(toArray$1(), mergeMap$1(function (sources) { return joinFn(sources); }), project ? mapOneOrManyArgs$1(project) : identity$8);
    }

    function combineLatestAll$1(project) {
        return joinAllInternals$1(combineLatest$3, project);
    }

    var combineAll$1 = combineLatestAll$1;

    function combineLatest$2() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var resultSelector = popResultSelector$1(args);
        return resultSelector
            ? pipe$4(combineLatest$2.apply(void 0, __spreadArray$1([], __read$1(args))), mapOneOrManyArgs$1(resultSelector))
            : operate$1(function (source, subscriber) {
                combineLatestInit$1(__spreadArray$1([source], __read$1(argsOrArgArray$1(args))))(subscriber);
            });
    }

    function combineLatestWith$1() {
        var otherSources = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            otherSources[_i] = arguments[_i];
        }
        return combineLatest$2.apply(void 0, __spreadArray$1([], __read$1(otherSources)));
    }

    function concatMap$5(project, resultSelector) {
        return isFunction$5(resultSelector) ? mergeMap$1(project, resultSelector, 1) : mergeMap$1(project, 1);
    }

    function concatMapTo$1(innerObservable, resultSelector) {
        return isFunction$5(resultSelector) ? concatMap$5(function () { return innerObservable; }, resultSelector) : concatMap$5(function () { return innerObservable; });
    }

    function concat$2() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var scheduler = popScheduler$1(args);
        return operate$1(function (source, subscriber) {
            concatAll$1()(from$7(__spreadArray$1([source], __read$1(args)), scheduler)).subscribe(subscriber);
        });
    }

    function concatWith$1() {
        var otherSources = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            otherSources[_i] = arguments[_i];
        }
        return concat$2.apply(void 0, __spreadArray$1([], __read$1(otherSources)));
    }

    function fromSubscribable$1(subscribable) {
        return new Observable$1(function (subscriber) { return subscribable.subscribe(subscriber); });
    }

    var DEFAULT_CONFIG$2 = {
        connector: function () { return new Subject$3(); },
    };
    function connect$1(selector, config) {
        if (config === void 0) { config = DEFAULT_CONFIG$2; }
        var connector = config.connector;
        return operate$1(function (source, subscriber) {
            var subject = connector();
            from$7(selector(fromSubscribable$1(subject))).subscribe(subscriber);
            subscriber.add(source.subscribe(subject));
        });
    }

    function count$1(predicate) {
        return reduce$3(function (total, value, i) { return (!predicate || predicate(value, i) ? total + 1 : total); }, 0);
    }

    function debounce$1(durationSelector) {
        return operate$1(function (source, subscriber) {
            var hasValue = false;
            var lastValue = null;
            var durationSubscriber = null;
            var emit = function () {
                durationSubscriber === null || durationSubscriber === void 0 ? void 0 : durationSubscriber.unsubscribe();
                durationSubscriber = null;
                if (hasValue) {
                    hasValue = false;
                    var value = lastValue;
                    lastValue = null;
                    subscriber.next(value);
                }
            };
            source.subscribe(new OperatorSubscriber$1(subscriber, function (value) {
                durationSubscriber === null || durationSubscriber === void 0 ? void 0 : durationSubscriber.unsubscribe();
                hasValue = true;
                lastValue = value;
                durationSubscriber = new OperatorSubscriber$1(subscriber, emit, noop$8);
                innerFrom$1(durationSelector(value)).subscribe(durationSubscriber);
            }, function () {
                emit();
                subscriber.complete();
            }, undefined, function () {
                lastValue = durationSubscriber = null;
            }));
        });
    }

    function debounceTime$1(dueTime, scheduler) {
        if (scheduler === void 0) { scheduler = asyncScheduler$1; }
        return operate$1(function (source, subscriber) {
            var activeTask = null;
            var lastValue = null;
            var lastTime = null;
            var emit = function () {
                if (activeTask) {
                    activeTask.unsubscribe();
                    activeTask = null;
                    var value = lastValue;
                    lastValue = null;
                    subscriber.next(value);
                }
            };
            function emitWhenIdle() {
                var targetTime = lastTime + dueTime;
                var now = scheduler.now();
                if (now < targetTime) {
                    activeTask = this.schedule(undefined, targetTime - now);
                    subscriber.add(activeTask);
                    return;
                }
                emit();
            }
            source.subscribe(new OperatorSubscriber$1(subscriber, function (value) {
                lastValue = value;
                lastTime = scheduler.now();
                if (!activeTask) {
                    activeTask = scheduler.schedule(emitWhenIdle, dueTime);
                    subscriber.add(activeTask);
                }
            }, function () {
                emit();
                subscriber.complete();
            }, undefined, function () {
                lastValue = activeTask = null;
            }));
        });
    }

    function defaultIfEmpty$1(defaultValue) {
        return operate$1(function (source, subscriber) {
            var hasValue = false;
            source.subscribe(new OperatorSubscriber$1(subscriber, function (value) {
                hasValue = true;
                subscriber.next(value);
            }, function () {
                if (!hasValue) {
                    subscriber.next(defaultValue);
                }
                subscriber.complete();
            }));
        });
    }

    function take$7(count) {
        return count <= 0
            ?
                function () { return EMPTY$1; }
            : operate$1(function (source, subscriber) {
                var seen = 0;
                source.subscribe(new OperatorSubscriber$1(subscriber, function (value) {
                    if (++seen <= count) {
                        subscriber.next(value);
                        if (count <= seen) {
                            subscriber.complete();
                        }
                    }
                }));
            });
    }

    function ignoreElements$1() {
        return operate$1(function (source, subscriber) {
            source.subscribe(new OperatorSubscriber$1(subscriber, noop$8));
        });
    }

    function mapTo$1(value) {
        return map$h(function () { return value; });
    }

    function delayWhen$1(delayDurationSelector, subscriptionDelay) {
        if (subscriptionDelay) {
            return function (source) {
                return concat$3(subscriptionDelay.pipe(take$7(1), ignoreElements$1()), source.pipe(delayWhen$1(delayDurationSelector)));
            };
        }
        return mergeMap$1(function (value, index) { return delayDurationSelector(value, index).pipe(take$7(1), mapTo$1(value)); });
    }

    function delay$1(due, scheduler) {
        if (scheduler === void 0) { scheduler = asyncScheduler$1; }
        var duration = timer$1(due, scheduler);
        return delayWhen$1(function () { return duration; });
    }

    function dematerialize$1() {
        return operate$1(function (source, subscriber) {
            source.subscribe(new OperatorSubscriber$1(subscriber, function (notification) { return observeNotification$1(notification, subscriber); }));
        });
    }

    function distinct$1(keySelector, flushes) {
        return operate$1(function (source, subscriber) {
            var distinctKeys = new Set();
            source.subscribe(new OperatorSubscriber$1(subscriber, function (value) {
                var key = keySelector ? keySelector(value) : value;
                if (!distinctKeys.has(key)) {
                    distinctKeys.add(key);
                    subscriber.next(value);
                }
            }));
            flushes === null || flushes === void 0 ? void 0 : flushes.subscribe(new OperatorSubscriber$1(subscriber, function () { return distinctKeys.clear(); }, noop$8));
        });
    }

    function distinctUntilChanged$1(comparator, keySelector) {
        if (keySelector === void 0) { keySelector = identity$8; }
        comparator = comparator !== null && comparator !== void 0 ? comparator : defaultCompare$1;
        return operate$1(function (source, subscriber) {
            var previousKey;
            var first = true;
            source.subscribe(new OperatorSubscriber$1(subscriber, function (value) {
                var currentKey = keySelector(value);
                if (first || !comparator(previousKey, currentKey)) {
                    first = false;
                    previousKey = currentKey;
                    subscriber.next(value);
                }
            }));
        });
    }
    function defaultCompare$1(a, b) {
        return a === b;
    }

    function distinctUntilKeyChanged$1(key, compare) {
        return distinctUntilChanged$1(function (x, y) { return compare ? compare(x[key], y[key]) : x[key] === y[key]; });
    }

    function throwIfEmpty$1(errorFactory) {
        if (errorFactory === void 0) { errorFactory = defaultErrorFactory$1; }
        return operate$1(function (source, subscriber) {
            var hasValue = false;
            source.subscribe(new OperatorSubscriber$1(subscriber, function (value) {
                hasValue = true;
                subscriber.next(value);
            }, function () { return (hasValue ? subscriber.complete() : subscriber.error(errorFactory())); }));
        });
    }
    function defaultErrorFactory$1() {
        return new EmptyError$1();
    }

    function elementAt$1(index, defaultValue) {
        if (index < 0) {
            throw new ArgumentOutOfRangeError$1();
        }
        var hasDefaultValue = arguments.length >= 2;
        return function (source) {
            return source.pipe(filter$a(function (v, i) { return i === index; }), take$7(1), hasDefaultValue ? defaultIfEmpty$1(defaultValue) : throwIfEmpty$1(function () { return new ArgumentOutOfRangeError$1(); }));
        };
    }

    function endWith$1() {
        var values = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            values[_i] = arguments[_i];
        }
        return function (source) { return concat$3(source, of$5.apply(void 0, __spreadArray$1([], __read$1(values)))); };
    }

    function every$1(predicate, thisArg) {
        return operate$1(function (source, subscriber) {
            var index = 0;
            source.subscribe(new OperatorSubscriber$1(subscriber, function (value) {
                if (!predicate.call(thisArg, value, index++, source)) {
                    subscriber.next(false);
                    subscriber.complete();
                }
            }, function () {
                subscriber.next(true);
                subscriber.complete();
            }));
        });
    }

    function exhaustAll$1() {
        return operate$1(function (source, subscriber) {
            var isComplete = false;
            var innerSub = null;
            source.subscribe(new OperatorSubscriber$1(subscriber, function (inner) {
                if (!innerSub) {
                    innerSub = innerFrom$1(inner).subscribe(new OperatorSubscriber$1(subscriber, undefined, function () {
                        innerSub = null;
                        isComplete && subscriber.complete();
                    }));
                }
            }, function () {
                isComplete = true;
                !innerSub && subscriber.complete();
            }));
        });
    }

    var exhaust$1 = exhaustAll$1;

    function exhaustMap$1(project, resultSelector) {
        if (resultSelector) {
            return function (source) {
                return source.pipe(exhaustMap$1(function (a, i) { return innerFrom$1(project(a, i)).pipe(map$h(function (b, ii) { return resultSelector(a, b, i, ii); })); }));
            };
        }
        return operate$1(function (source, subscriber) {
            var index = 0;
            var innerSub = null;
            var isComplete = false;
            source.subscribe(new OperatorSubscriber$1(subscriber, function (outerValue) {
                if (!innerSub) {
                    innerSub = new OperatorSubscriber$1(subscriber, undefined, function () {
                        innerSub = null;
                        isComplete && subscriber.complete();
                    });
                    innerFrom$1(project(outerValue, index++)).subscribe(innerSub);
                }
            }, function () {
                isComplete = true;
                !innerSub && subscriber.complete();
            }));
        });
    }

    function expand$5(project, concurrent, scheduler) {
        if (concurrent === void 0) { concurrent = Infinity; }
        concurrent = (concurrent || 0) < 1 ? Infinity : concurrent;
        return operate$1(function (source, subscriber) {
            return mergeInternals$1(source, subscriber, project, concurrent, undefined, true, scheduler);
        });
    }

    function finalize$1(callback) {
        return operate$1(function (source, subscriber) {
            try {
                source.subscribe(subscriber);
            }
            finally {
                subscriber.add(callback);
            }
        });
    }

    function find$3(predicate, thisArg) {
        return operate$1(createFind$5(predicate, thisArg, 'value'));
    }
    function createFind$5(predicate, thisArg, emit) {
        var findIndex = emit === 'index';
        return function (source, subscriber) {
            var index = 0;
            source.subscribe(new OperatorSubscriber$1(subscriber, function (value) {
                var i = index++;
                if (predicate.call(thisArg, value, i, source)) {
                    subscriber.next(findIndex ? i : value);
                    subscriber.complete();
                }
            }, function () {
                subscriber.next(findIndex ? -1 : undefined);
                subscriber.complete();
            }));
        };
    }

    function findIndex$5(predicate, thisArg) {
        return operate$1(createFind$5(predicate, thisArg, 'index'));
    }

    function first$1(predicate, defaultValue) {
        var hasDefaultValue = arguments.length >= 2;
        return function (source) {
            return source.pipe(predicate ? filter$a(function (v, i) { return predicate(v, i, source); }) : identity$8, take$7(1), hasDefaultValue ? defaultIfEmpty$1(defaultValue) : throwIfEmpty$1(function () { return new EmptyError$1(); }));
        };
    }

    function groupBy$1(keySelector, elementOrOptions, duration, connector) {
        return operate$1(function (source, subscriber) {
            var element;
            if (!elementOrOptions || typeof elementOrOptions === 'function') {
                element = elementOrOptions;
            }
            else {
                (duration = elementOrOptions.duration, element = elementOrOptions.element, connector = elementOrOptions.connector);
            }
            var groups = new Map();
            var notify = function (cb) {
                groups.forEach(cb);
                cb(subscriber);
            };
            var handleError = function (err) { return notify(function (consumer) { return consumer.error(err); }); };
            var groupBySourceSubscriber = new GroupBySubscriber$1(subscriber, function (value) {
                try {
                    var key_1 = keySelector(value);
                    var group_1 = groups.get(key_1);
                    if (!group_1) {
                        groups.set(key_1, (group_1 = connector ? connector() : new Subject$3()));
                        var grouped = createGroupedObservable(key_1, group_1);
                        subscriber.next(grouped);
                        if (duration) {
                            var durationSubscriber_1 = new OperatorSubscriber$1(group_1, function () {
                                group_1.complete();
                                durationSubscriber_1 === null || durationSubscriber_1 === void 0 ? void 0 : durationSubscriber_1.unsubscribe();
                            }, undefined, undefined, function () { return groups.delete(key_1); });
                            groupBySourceSubscriber.add(innerFrom$1(duration(grouped)).subscribe(durationSubscriber_1));
                        }
                    }
                    group_1.next(element ? element(value) : value);
                }
                catch (err) {
                    handleError(err);
                }
            }, function () { return notify(function (consumer) { return consumer.complete(); }); }, handleError, function () { return groups.clear(); });
            source.subscribe(groupBySourceSubscriber);
            function createGroupedObservable(key, groupSubject) {
                var result = new Observable$1(function (groupSubscriber) {
                    groupBySourceSubscriber.activeGroups++;
                    var innerSub = groupSubject.subscribe(groupSubscriber);
                    return function () {
                        innerSub.unsubscribe();
                        --groupBySourceSubscriber.activeGroups === 0 &&
                            groupBySourceSubscriber.teardownAttempted &&
                            groupBySourceSubscriber.unsubscribe();
                    };
                });
                result.key = key;
                return result;
            }
        });
    }
    var GroupBySubscriber$1 = (function (_super) {
        __extends$9(GroupBySubscriber, _super);
        function GroupBySubscriber() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.activeGroups = 0;
            _this.teardownAttempted = false;
            return _this;
        }
        GroupBySubscriber.prototype.unsubscribe = function () {
            this.teardownAttempted = true;
            this.activeGroups === 0 && _super.prototype.unsubscribe.call(this);
        };
        return GroupBySubscriber;
    }(OperatorSubscriber$1));

    function isEmpty$1() {
        return operate$1(function (source, subscriber) {
            source.subscribe(new OperatorSubscriber$1(subscriber, function () {
                subscriber.next(false);
                subscriber.complete();
            }, function () {
                subscriber.next(true);
                subscriber.complete();
            }));
        });
    }

    function takeLast$1(count) {
        return count <= 0
            ? function () { return EMPTY$1; }
            : operate$1(function (source, subscriber) {
                var buffer = [];
                source.subscribe(new OperatorSubscriber$1(subscriber, function (value) {
                    buffer.push(value);
                    count < buffer.length && buffer.shift();
                }, function () {
                    var e_1, _a;
                    try {
                        for (var buffer_1 = __values$1(buffer), buffer_1_1 = buffer_1.next(); !buffer_1_1.done; buffer_1_1 = buffer_1.next()) {
                            var value = buffer_1_1.value;
                            subscriber.next(value);
                        }
                    }
                    catch (e_1_1) { e_1 = { error: e_1_1 }; }
                    finally {
                        try {
                            if (buffer_1_1 && !buffer_1_1.done && (_a = buffer_1.return)) _a.call(buffer_1);
                        }
                        finally { if (e_1) throw e_1.error; }
                    }
                    subscriber.complete();
                }, undefined, function () {
                    buffer = null;
                }));
            });
    }

    function last$4(predicate, defaultValue) {
        var hasDefaultValue = arguments.length >= 2;
        return function (source) {
            return source.pipe(predicate ? filter$a(function (v, i) { return predicate(v, i, source); }) : identity$8, takeLast$1(1), hasDefaultValue ? defaultIfEmpty$1(defaultValue) : throwIfEmpty$1(function () { return new EmptyError$1(); }));
        };
    }

    function materialize$1() {
        return operate$1(function (source, subscriber) {
            source.subscribe(new OperatorSubscriber$1(subscriber, function (value) {
                subscriber.next(Notification$1.createNext(value));
            }, function () {
                subscriber.next(Notification$1.createComplete());
                subscriber.complete();
            }, function (err) {
                subscriber.next(Notification$1.createError(err));
                subscriber.complete();
            }));
        });
    }

    function max$1(comparer) {
        return reduce$3(isFunction$5(comparer) ? function (x, y) { return (comparer(x, y) > 0 ? x : y); } : function (x, y) { return (x > y ? x : y); });
    }

    var flatMap$5 = mergeMap$1;

    function mergeMapTo$1(innerObservable, resultSelector, concurrent) {
        if (concurrent === void 0) { concurrent = Infinity; }
        if (isFunction$5(resultSelector)) {
            return mergeMap$1(function () { return innerObservable; }, resultSelector, concurrent);
        }
        if (typeof resultSelector === 'number') {
            concurrent = resultSelector;
        }
        return mergeMap$1(function () { return innerObservable; }, concurrent);
    }

    function mergeScan$1(accumulator, seed, concurrent) {
        if (concurrent === void 0) { concurrent = Infinity; }
        return operate$1(function (source, subscriber) {
            var state = seed;
            return mergeInternals$1(source, subscriber, function (value, index) { return accumulator(state, value, index); }, concurrent, function (value) {
                state = value;
            }, false, undefined, function () { return (state = null); });
        });
    }

    function merge$3() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var scheduler = popScheduler$1(args);
        var concurrent = popNumber$1(args, Infinity);
        args = argsOrArgArray$1(args);
        return operate$1(function (source, subscriber) {
            mergeAll$1(concurrent)(from$7(__spreadArray$1([source], __read$1(args)), scheduler)).subscribe(subscriber);
        });
    }

    function mergeWith$1() {
        var otherSources = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            otherSources[_i] = arguments[_i];
        }
        return merge$3.apply(void 0, __spreadArray$1([], __read$1(otherSources)));
    }

    function min$1(comparer) {
        return reduce$3(isFunction$5(comparer) ? function (x, y) { return (comparer(x, y) < 0 ? x : y); } : function (x, y) { return (x < y ? x : y); });
    }

    function multicast$1(subjectOrSubjectFactory, selector) {
        var subjectFactory = isFunction$5(subjectOrSubjectFactory) ? subjectOrSubjectFactory : function () { return subjectOrSubjectFactory; };
        if (isFunction$5(selector)) {
            return connect$1(selector, {
                connector: subjectFactory,
            });
        }
        return function (source) { return new ConnectableObservable$1(source, subjectFactory); };
    }

    function pairwise$1() {
        return operate$1(function (source, subscriber) {
            var prev;
            var hasPrev = false;
            source.subscribe(new OperatorSubscriber$1(subscriber, function (value) {
                var p = prev;
                prev = value;
                hasPrev && subscriber.next([p, value]);
                hasPrev = true;
            }));
        });
    }

    function pluck$1() {
        var properties = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            properties[_i] = arguments[_i];
        }
        var length = properties.length;
        if (length === 0) {
            throw new Error('list of properties cannot be empty.');
        }
        return map$h(function (x) {
            var currentProp = x;
            for (var i = 0; i < length; i++) {
                var p = currentProp === null || currentProp === void 0 ? void 0 : currentProp[properties[i]];
                if (typeof p !== 'undefined') {
                    currentProp = p;
                }
                else {
                    return undefined;
                }
            }
            return currentProp;
        });
    }

    function publish$3(selector) {
        return selector ? function (source) { return connect$1(selector)(source); } : function (source) { return multicast$1(new Subject$3())(source); };
    }

    function publishBehavior$1(initialValue) {
        return function (source) {
            var subject = new BehaviorSubject$1(initialValue);
            return new ConnectableObservable$1(source, function () { return subject; });
        };
    }

    function publishLast$1() {
        return function (source) {
            var subject = new AsyncSubject$1();
            return new ConnectableObservable$1(source, function () { return subject; });
        };
    }

    function publishReplay$1(bufferSize, windowTime, selectorOrScheduler, timestampProvider) {
        if (selectorOrScheduler && !isFunction$5(selectorOrScheduler)) {
            timestampProvider = selectorOrScheduler;
        }
        var selector = isFunction$5(selectorOrScheduler) ? selectorOrScheduler : undefined;
        return function (source) { return multicast$1(new ReplaySubject$1(bufferSize, windowTime, timestampProvider), selector)(source); };
    }

    function raceWith$1() {
        var otherSources = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            otherSources[_i] = arguments[_i];
        }
        return !otherSources.length
            ? identity$8
            : operate$1(function (source, subscriber) {
                raceInit$1(__spreadArray$1([source], __read$1(otherSources)))(subscriber);
            });
    }

    function repeat$1(countOrConfig) {
        var _a;
        var count = Infinity;
        var delay;
        if (countOrConfig != null) {
            if (typeof countOrConfig === 'object') {
                (_a = countOrConfig.count, count = _a === void 0 ? Infinity : _a, delay = countOrConfig.delay);
            }
            else {
                count = countOrConfig;
            }
        }
        return count <= 0
            ? function () { return EMPTY$1; }
            : operate$1(function (source, subscriber) {
                var soFar = 0;
                var sourceSub;
                var resubscribe = function () {
                    sourceSub === null || sourceSub === void 0 ? void 0 : sourceSub.unsubscribe();
                    sourceSub = null;
                    if (delay != null) {
                        var notifier = typeof delay === 'number' ? timer$1(delay) : innerFrom$1(delay(soFar));
                        var notifierSubscriber_1 = new OperatorSubscriber$1(subscriber, function () {
                            notifierSubscriber_1.unsubscribe();
                            subscribeToSource();
                        });
                        notifier.subscribe(notifierSubscriber_1);
                    }
                    else {
                        subscribeToSource();
                    }
                };
                var subscribeToSource = function () {
                    var syncUnsub = false;
                    sourceSub = source.subscribe(new OperatorSubscriber$1(subscriber, undefined, function () {
                        if (++soFar < count) {
                            if (sourceSub) {
                                resubscribe();
                            }
                            else {
                                syncUnsub = true;
                            }
                        }
                        else {
                            subscriber.complete();
                        }
                    }));
                    if (syncUnsub) {
                        resubscribe();
                    }
                };
                subscribeToSource();
            });
    }

    function repeatWhen$1(notifier) {
        return operate$1(function (source, subscriber) {
            var innerSub;
            var syncResub = false;
            var completions$;
            var isNotifierComplete = false;
            var isMainComplete = false;
            var checkComplete = function () { return isMainComplete && isNotifierComplete && (subscriber.complete(), true); };
            var getCompletionSubject = function () {
                if (!completions$) {
                    completions$ = new Subject$3();
                    notifier(completions$).subscribe(new OperatorSubscriber$1(subscriber, function () {
                        if (innerSub) {
                            subscribeForRepeatWhen();
                        }
                        else {
                            syncResub = true;
                        }
                    }, function () {
                        isNotifierComplete = true;
                        checkComplete();
                    }));
                }
                return completions$;
            };
            var subscribeForRepeatWhen = function () {
                isMainComplete = false;
                innerSub = source.subscribe(new OperatorSubscriber$1(subscriber, undefined, function () {
                    isMainComplete = true;
                    !checkComplete() && getCompletionSubject().next();
                }));
                if (syncResub) {
                    innerSub.unsubscribe();
                    innerSub = null;
                    syncResub = false;
                    subscribeForRepeatWhen();
                }
            };
            subscribeForRepeatWhen();
        });
    }

    function retry$1(configOrCount) {
        if (configOrCount === void 0) { configOrCount = Infinity; }
        var config;
        if (configOrCount && typeof configOrCount === 'object') {
            config = configOrCount;
        }
        else {
            config = {
                count: configOrCount,
            };
        }
        var _a = config.count, count = _a === void 0 ? Infinity : _a, delay = config.delay, _b = config.resetOnSuccess, resetOnSuccess = _b === void 0 ? false : _b;
        return count <= 0
            ? identity$8
            : operate$1(function (source, subscriber) {
                var soFar = 0;
                var innerSub;
                var subscribeForRetry = function () {
                    var syncUnsub = false;
                    innerSub = source.subscribe(new OperatorSubscriber$1(subscriber, function (value) {
                        if (resetOnSuccess) {
                            soFar = 0;
                        }
                        subscriber.next(value);
                    }, undefined, function (err) {
                        if (soFar++ < count) {
                            var resub_1 = function () {
                                if (innerSub) {
                                    innerSub.unsubscribe();
                                    innerSub = null;
                                    subscribeForRetry();
                                }
                                else {
                                    syncUnsub = true;
                                }
                            };
                            if (delay != null) {
                                var notifier = typeof delay === 'number' ? timer$1(delay) : innerFrom$1(delay(err, soFar));
                                var notifierSubscriber_1 = new OperatorSubscriber$1(subscriber, function () {
                                    notifierSubscriber_1.unsubscribe();
                                    resub_1();
                                }, function () {
                                    subscriber.complete();
                                });
                                notifier.subscribe(notifierSubscriber_1);
                            }
                            else {
                                resub_1();
                            }
                        }
                        else {
                            subscriber.error(err);
                        }
                    }));
                    if (syncUnsub) {
                        innerSub.unsubscribe();
                        innerSub = null;
                        subscribeForRetry();
                    }
                };
                subscribeForRetry();
            });
    }

    function retryWhen$1(notifier) {
        return operate$1(function (source, subscriber) {
            var innerSub;
            var syncResub = false;
            var errors$;
            var subscribeForRetryWhen = function () {
                innerSub = source.subscribe(new OperatorSubscriber$1(subscriber, undefined, undefined, function (err) {
                    if (!errors$) {
                        errors$ = new Subject$3();
                        notifier(errors$).subscribe(new OperatorSubscriber$1(subscriber, function () {
                            return innerSub ? subscribeForRetryWhen() : (syncResub = true);
                        }));
                    }
                    if (errors$) {
                        errors$.next(err);
                    }
                }));
                if (syncResub) {
                    innerSub.unsubscribe();
                    innerSub = null;
                    syncResub = false;
                    subscribeForRetryWhen();
                }
            };
            subscribeForRetryWhen();
        });
    }

    function sample$2(notifier) {
        return operate$1(function (source, subscriber) {
            var hasValue = false;
            var lastValue = null;
            source.subscribe(new OperatorSubscriber$1(subscriber, function (value) {
                hasValue = true;
                lastValue = value;
            }));
            var emit = function () {
                if (hasValue) {
                    hasValue = false;
                    var value = lastValue;
                    lastValue = null;
                    subscriber.next(value);
                }
            };
            notifier.subscribe(new OperatorSubscriber$1(subscriber, emit, noop$8));
        });
    }

    function sampleTime$1(period, scheduler) {
        if (scheduler === void 0) { scheduler = asyncScheduler$1; }
        return sample$2(interval$1(period, scheduler));
    }

    function scan$1(accumulator, seed) {
        return operate$1(scanInternals$1(accumulator, seed, arguments.length >= 2, true));
    }

    function sequenceEqual$1(compareTo, comparator) {
        if (comparator === void 0) { comparator = function (a, b) { return a === b; }; }
        return operate$1(function (source, subscriber) {
            var aState = createState$1();
            var bState = createState$1();
            var emit = function (isEqual) {
                subscriber.next(isEqual);
                subscriber.complete();
            };
            var createSubscriber = function (selfState, otherState) {
                var sequenceEqualSubscriber = new OperatorSubscriber$1(subscriber, function (a) {
                    var buffer = otherState.buffer, complete = otherState.complete;
                    if (buffer.length === 0) {
                        complete ? emit(false) : selfState.buffer.push(a);
                    }
                    else {
                        !comparator(a, buffer.shift()) && emit(false);
                    }
                }, function () {
                    selfState.complete = true;
                    var complete = otherState.complete, buffer = otherState.buffer;
                    complete && emit(buffer.length === 0);
                    sequenceEqualSubscriber === null || sequenceEqualSubscriber === void 0 ? void 0 : sequenceEqualSubscriber.unsubscribe();
                });
                return sequenceEqualSubscriber;
            };
            source.subscribe(createSubscriber(aState, bState));
            compareTo.subscribe(createSubscriber(bState, aState));
        });
    }
    function createState$1() {
        return {
            buffer: [],
            complete: false,
        };
    }

    function share$5(options) {
        if (options === void 0) { options = {}; }
        var _a = options.connector, connector = _a === void 0 ? function () { return new Subject$3(); } : _a, _b = options.resetOnError, resetOnError = _b === void 0 ? true : _b, _c = options.resetOnComplete, resetOnComplete = _c === void 0 ? true : _c, _d = options.resetOnRefCountZero, resetOnRefCountZero = _d === void 0 ? true : _d;
        return function (wrapperSource) {
            var connection = null;
            var resetConnection = null;
            var subject = null;
            var refCount = 0;
            var hasCompleted = false;
            var hasErrored = false;
            var cancelReset = function () {
                resetConnection === null || resetConnection === void 0 ? void 0 : resetConnection.unsubscribe();
                resetConnection = null;
            };
            var reset = function () {
                cancelReset();
                connection = subject = null;
                hasCompleted = hasErrored = false;
            };
            var resetAndUnsubscribe = function () {
                var conn = connection;
                reset();
                conn === null || conn === void 0 ? void 0 : conn.unsubscribe();
            };
            return operate$1(function (source, subscriber) {
                refCount++;
                if (!hasErrored && !hasCompleted) {
                    cancelReset();
                }
                var dest = (subject = subject !== null && subject !== void 0 ? subject : connector());
                subscriber.add(function () {
                    refCount--;
                    if (refCount === 0 && !hasErrored && !hasCompleted) {
                        resetConnection = handleReset$1(resetAndUnsubscribe, resetOnRefCountZero);
                    }
                });
                dest.subscribe(subscriber);
                if (!connection) {
                    connection = new SafeSubscriber$1({
                        next: function (value) { return dest.next(value); },
                        error: function (err) {
                            hasErrored = true;
                            cancelReset();
                            resetConnection = handleReset$1(reset, resetOnError, err);
                            dest.error(err);
                        },
                        complete: function () {
                            hasCompleted = true;
                            cancelReset();
                            resetConnection = handleReset$1(reset, resetOnComplete);
                            dest.complete();
                        },
                    });
                    from$7(source).subscribe(connection);
                }
            })(wrapperSource);
        };
    }
    function handleReset$1(reset, on) {
        var args = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            args[_i - 2] = arguments[_i];
        }
        if (on === true) {
            reset();
            return null;
        }
        if (on === false) {
            return null;
        }
        return on.apply(void 0, __spreadArray$1([], __read$1(args))).pipe(take$7(1))
            .subscribe(function () { return reset(); });
    }

    function shareReplay$1(configOrBufferSize, windowTime, scheduler) {
        var _a, _b;
        var bufferSize;
        var refCount = false;
        if (configOrBufferSize && typeof configOrBufferSize === 'object') {
            bufferSize = (_a = configOrBufferSize.bufferSize) !== null && _a !== void 0 ? _a : Infinity;
            windowTime = (_b = configOrBufferSize.windowTime) !== null && _b !== void 0 ? _b : Infinity;
            refCount = !!configOrBufferSize.refCount;
            scheduler = configOrBufferSize.scheduler;
        }
        else {
            bufferSize = configOrBufferSize !== null && configOrBufferSize !== void 0 ? configOrBufferSize : Infinity;
        }
        return share$5({
            connector: function () { return new ReplaySubject$1(bufferSize, windowTime, scheduler); },
            resetOnError: true,
            resetOnComplete: false,
            resetOnRefCountZero: refCount,
        });
    }

    function single$1(predicate) {
        return operate$1(function (source, subscriber) {
            var hasValue = false;
            var singleValue;
            var seenValue = false;
            var index = 0;
            source.subscribe(new OperatorSubscriber$1(subscriber, function (value) {
                seenValue = true;
                if (!predicate || predicate(value, index++, source)) {
                    hasValue && subscriber.error(new SequenceError$1('Too many matching values'));
                    hasValue = true;
                    singleValue = value;
                }
            }, function () {
                if (hasValue) {
                    subscriber.next(singleValue);
                    subscriber.complete();
                }
                else {
                    subscriber.error(seenValue ? new NotFoundError$1('No matching values') : new EmptyError$1());
                }
            }));
        });
    }

    function skip$1(count) {
        return filter$a(function (_, index) { return count <= index; });
    }

    function skipLast$1(skipCount) {
        return skipCount <= 0
            ?
                identity$8
            : operate$1(function (source, subscriber) {
                var ring = new Array(skipCount);
                var seen = 0;
                source.subscribe(new OperatorSubscriber$1(subscriber, function (value) {
                    var valueIndex = seen++;
                    if (valueIndex < skipCount) {
                        ring[valueIndex] = value;
                    }
                    else {
                        var index = valueIndex % skipCount;
                        var oldValue = ring[index];
                        ring[index] = value;
                        subscriber.next(oldValue);
                    }
                }));
                return function () {
                    ring = null;
                };
            });
    }

    function skipUntil$1(notifier) {
        return operate$1(function (source, subscriber) {
            var taking = false;
            var skipSubscriber = new OperatorSubscriber$1(subscriber, function () {
                skipSubscriber === null || skipSubscriber === void 0 ? void 0 : skipSubscriber.unsubscribe();
                taking = true;
            }, noop$8);
            innerFrom$1(notifier).subscribe(skipSubscriber);
            source.subscribe(new OperatorSubscriber$1(subscriber, function (value) { return taking && subscriber.next(value); }));
        });
    }

    function skipWhile$1(predicate) {
        return operate$1(function (source, subscriber) {
            var taking = false;
            var index = 0;
            source.subscribe(new OperatorSubscriber$1(subscriber, function (value) { return (taking || (taking = !predicate(value, index++))) && subscriber.next(value); }));
        });
    }

    function startWith$1() {
        var values = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            values[_i] = arguments[_i];
        }
        var scheduler = popScheduler$1(values);
        return operate$1(function (source, subscriber) {
            (scheduler ? concat$3(values, source, scheduler) : concat$3(values, source)).subscribe(subscriber);
        });
    }

    function switchMap$1(project, resultSelector) {
        return operate$1(function (source, subscriber) {
            var innerSubscriber = null;
            var index = 0;
            var isComplete = false;
            var checkComplete = function () { return isComplete && !innerSubscriber && subscriber.complete(); };
            source.subscribe(new OperatorSubscriber$1(subscriber, function (value) {
                innerSubscriber === null || innerSubscriber === void 0 ? void 0 : innerSubscriber.unsubscribe();
                var innerIndex = 0;
                var outerIndex = index++;
                innerFrom$1(project(value, outerIndex)).subscribe((innerSubscriber = new OperatorSubscriber$1(subscriber, function (innerValue) { return subscriber.next(resultSelector ? resultSelector(value, innerValue, outerIndex, innerIndex++) : innerValue); }, function () {
                    innerSubscriber = null;
                    checkComplete();
                })));
            }, function () {
                isComplete = true;
                checkComplete();
            }));
        });
    }

    function switchAll$1() {
        return switchMap$1(identity$8);
    }

    function switchMapTo$1(innerObservable, resultSelector) {
        return isFunction$5(resultSelector) ? switchMap$1(function () { return innerObservable; }, resultSelector) : switchMap$1(function () { return innerObservable; });
    }

    function switchScan$1(accumulator, seed) {
        return operate$1(function (source, subscriber) {
            var state = seed;
            switchMap$1(function (value, index) { return accumulator(state, value, index); }, function (_, innerValue) { return ((state = innerValue), innerValue); })(source).subscribe(subscriber);
            return function () {
                state = null;
            };
        });
    }

    function takeUntil$j(notifier) {
        return operate$1(function (source, subscriber) {
            innerFrom$1(notifier).subscribe(new OperatorSubscriber$1(subscriber, function () { return subscriber.complete(); }, noop$8));
            !subscriber.closed && source.subscribe(subscriber);
        });
    }

    function takeWhile$1(predicate, inclusive) {
        if (inclusive === void 0) { inclusive = false; }
        return operate$1(function (source, subscriber) {
            var index = 0;
            source.subscribe(new OperatorSubscriber$1(subscriber, function (value) {
                var result = predicate(value, index++);
                (result || inclusive) && subscriber.next(value);
                !result && subscriber.complete();
            }));
        });
    }

    function tap$1(observerOrNext, error, complete) {
        var tapObserver = isFunction$5(observerOrNext) || error || complete
            ?
                { next: observerOrNext, error: error, complete: complete }
            : observerOrNext;
        return tapObserver
            ? operate$1(function (source, subscriber) {
                var _a;
                (_a = tapObserver.subscribe) === null || _a === void 0 ? void 0 : _a.call(tapObserver);
                var isUnsub = true;
                source.subscribe(new OperatorSubscriber$1(subscriber, function (value) {
                    var _a;
                    (_a = tapObserver.next) === null || _a === void 0 ? void 0 : _a.call(tapObserver, value);
                    subscriber.next(value);
                }, function () {
                    var _a;
                    isUnsub = false;
                    (_a = tapObserver.complete) === null || _a === void 0 ? void 0 : _a.call(tapObserver);
                    subscriber.complete();
                }, function (err) {
                    var _a;
                    isUnsub = false;
                    (_a = tapObserver.error) === null || _a === void 0 ? void 0 : _a.call(tapObserver, err);
                    subscriber.error(err);
                }, function () {
                    var _a, _b;
                    if (isUnsub) {
                        (_a = tapObserver.unsubscribe) === null || _a === void 0 ? void 0 : _a.call(tapObserver);
                    }
                    (_b = tapObserver.finalize) === null || _b === void 0 ? void 0 : _b.call(tapObserver);
                }));
            })
            :
                identity$8;
    }

    var defaultThrottleConfig$1 = {
        leading: true,
        trailing: false,
    };
    function throttle$1(durationSelector, config) {
        if (config === void 0) { config = defaultThrottleConfig$1; }
        return operate$1(function (source, subscriber) {
            var leading = config.leading, trailing = config.trailing;
            var hasValue = false;
            var sendValue = null;
            var throttled = null;
            var isComplete = false;
            var endThrottling = function () {
                throttled === null || throttled === void 0 ? void 0 : throttled.unsubscribe();
                throttled = null;
                if (trailing) {
                    send();
                    isComplete && subscriber.complete();
                }
            };
            var cleanupThrottling = function () {
                throttled = null;
                isComplete && subscriber.complete();
            };
            var startThrottle = function (value) {
                return (throttled = innerFrom$1(durationSelector(value)).subscribe(new OperatorSubscriber$1(subscriber, endThrottling, cleanupThrottling)));
            };
            var send = function () {
                if (hasValue) {
                    hasValue = false;
                    var value = sendValue;
                    sendValue = null;
                    subscriber.next(value);
                    !isComplete && startThrottle(value);
                }
            };
            source.subscribe(new OperatorSubscriber$1(subscriber, function (value) {
                hasValue = true;
                sendValue = value;
                !(throttled && !throttled.closed) && (leading ? send() : startThrottle(value));
            }, function () {
                isComplete = true;
                !(trailing && hasValue && throttled && !throttled.closed) && subscriber.complete();
            }));
        });
    }

    function throttleTime$1(duration, scheduler, config) {
        if (scheduler === void 0) { scheduler = asyncScheduler$1; }
        if (config === void 0) { config = defaultThrottleConfig$1; }
        var duration$ = timer$1(duration, scheduler);
        return throttle$1(function () { return duration$; }, config);
    }

    function timeInterval$1(scheduler) {
        if (scheduler === void 0) { scheduler = asyncScheduler$1; }
        return function (source) {
            return defer$3(function () {
                return source.pipe(scan$1(function (_a, value) {
                    var current = _a.current;
                    return ({ value: value, current: scheduler.now(), last: current });
                }, {
                    current: scheduler.now(),
                    value: undefined,
                    last: undefined,
                }), map$h(function (_a) {
                    var current = _a.current, last = _a.last, value = _a.value;
                    return new TimeInterval$1(value, current - last);
                }));
            });
        };
    }
    var TimeInterval$1 = (function () {
        function TimeInterval(value, interval) {
            this.value = value;
            this.interval = interval;
        }
        return TimeInterval;
    }());

    function timeoutWith$1(due, withObservable, scheduler) {
        var first;
        var each;
        var _with;
        scheduler = scheduler !== null && scheduler !== void 0 ? scheduler : async$1;
        if (isValidDate$1(due)) {
            first = due;
        }
        else if (typeof due === 'number') {
            each = due;
        }
        if (withObservable) {
            _with = function () { return withObservable; };
        }
        else {
            throw new TypeError('No observable provided to switch to');
        }
        if (first == null && each == null) {
            throw new TypeError('No timeout provided.');
        }
        return timeout$1({
            first: first,
            each: each,
            scheduler: scheduler,
            with: _with,
        });
    }

    function timestamp$1(timestampProvider) {
        if (timestampProvider === void 0) { timestampProvider = dateTimestampProvider$1; }
        return map$h(function (value) { return ({ value: value, timestamp: timestampProvider.now() }); });
    }

    function window$2(windowBoundaries) {
        return operate$1(function (source, subscriber) {
            var windowSubject = new Subject$3();
            subscriber.next(windowSubject.asObservable());
            var errorHandler = function (err) {
                windowSubject.error(err);
                subscriber.error(err);
            };
            source.subscribe(new OperatorSubscriber$1(subscriber, function (value) { return windowSubject === null || windowSubject === void 0 ? void 0 : windowSubject.next(value); }, function () {
                windowSubject.complete();
                subscriber.complete();
            }, errorHandler));
            windowBoundaries.subscribe(new OperatorSubscriber$1(subscriber, function () {
                windowSubject.complete();
                subscriber.next((windowSubject = new Subject$3()));
            }, noop$8, errorHandler));
            return function () {
                windowSubject === null || windowSubject === void 0 ? void 0 : windowSubject.unsubscribe();
                windowSubject = null;
            };
        });
    }

    function windowCount$1(windowSize, startWindowEvery) {
        if (startWindowEvery === void 0) { startWindowEvery = 0; }
        var startEvery = startWindowEvery > 0 ? startWindowEvery : windowSize;
        return operate$1(function (source, subscriber) {
            var windows = [new Subject$3()];
            var starts = [];
            var count = 0;
            subscriber.next(windows[0].asObservable());
            source.subscribe(new OperatorSubscriber$1(subscriber, function (value) {
                var e_1, _a;
                try {
                    for (var windows_1 = __values$1(windows), windows_1_1 = windows_1.next(); !windows_1_1.done; windows_1_1 = windows_1.next()) {
                        var window_1 = windows_1_1.value;
                        window_1.next(value);
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (windows_1_1 && !windows_1_1.done && (_a = windows_1.return)) _a.call(windows_1);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
                var c = count - windowSize + 1;
                if (c >= 0 && c % startEvery === 0) {
                    windows.shift().complete();
                }
                if (++count % startEvery === 0) {
                    var window_2 = new Subject$3();
                    windows.push(window_2);
                    subscriber.next(window_2.asObservable());
                }
            }, function () {
                while (windows.length > 0) {
                    windows.shift().complete();
                }
                subscriber.complete();
            }, function (err) {
                while (windows.length > 0) {
                    windows.shift().error(err);
                }
                subscriber.error(err);
            }, function () {
                starts = null;
                windows = null;
            }));
        });
    }

    function windowTime$1(windowTimeSpan) {
        var _a, _b;
        var otherArgs = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            otherArgs[_i - 1] = arguments[_i];
        }
        var scheduler = (_a = popScheduler$1(otherArgs)) !== null && _a !== void 0 ? _a : asyncScheduler$1;
        var windowCreationInterval = (_b = otherArgs[0]) !== null && _b !== void 0 ? _b : null;
        var maxWindowSize = otherArgs[1] || Infinity;
        return operate$1(function (source, subscriber) {
            var windowRecords = [];
            var restartOnClose = false;
            var closeWindow = function (record) {
                var window = record.window, subs = record.subs;
                window.complete();
                subs.unsubscribe();
                arrRemove$1(windowRecords, record);
                restartOnClose && startWindow();
            };
            var startWindow = function () {
                if (windowRecords) {
                    var subs = new Subscription$1();
                    subscriber.add(subs);
                    var window_1 = new Subject$3();
                    var record_1 = {
                        window: window_1,
                        subs: subs,
                        seen: 0,
                    };
                    windowRecords.push(record_1);
                    subscriber.next(window_1.asObservable());
                    executeSchedule$1(subs, scheduler, function () { return closeWindow(record_1); }, windowTimeSpan);
                }
            };
            if (windowCreationInterval !== null && windowCreationInterval >= 0) {
                executeSchedule$1(subscriber, scheduler, startWindow, windowCreationInterval, true);
            }
            else {
                restartOnClose = true;
            }
            startWindow();
            var loop = function (cb) { return windowRecords.slice().forEach(cb); };
            var terminate = function (cb) {
                loop(function (_a) {
                    var window = _a.window;
                    return cb(window);
                });
                cb(subscriber);
                subscriber.unsubscribe();
            };
            source.subscribe(new OperatorSubscriber$1(subscriber, function (value) {
                loop(function (record) {
                    record.window.next(value);
                    maxWindowSize <= ++record.seen && closeWindow(record);
                });
            }, function () { return terminate(function (consumer) { return consumer.complete(); }); }, function (err) { return terminate(function (consumer) { return consumer.error(err); }); }));
            return function () {
                windowRecords = null;
            };
        });
    }

    function windowToggle$1(openings, closingSelector) {
        return operate$1(function (source, subscriber) {
            var windows = [];
            var handleError = function (err) {
                while (0 < windows.length) {
                    windows.shift().error(err);
                }
                subscriber.error(err);
            };
            innerFrom$1(openings).subscribe(new OperatorSubscriber$1(subscriber, function (openValue) {
                var window = new Subject$3();
                windows.push(window);
                var closingSubscription = new Subscription$1();
                var closeWindow = function () {
                    arrRemove$1(windows, window);
                    window.complete();
                    closingSubscription.unsubscribe();
                };
                var closingNotifier;
                try {
                    closingNotifier = innerFrom$1(closingSelector(openValue));
                }
                catch (err) {
                    handleError(err);
                    return;
                }
                subscriber.next(window.asObservable());
                closingSubscription.add(closingNotifier.subscribe(new OperatorSubscriber$1(subscriber, closeWindow, noop$8, handleError)));
            }, noop$8));
            source.subscribe(new OperatorSubscriber$1(subscriber, function (value) {
                var e_1, _a;
                var windowsCopy = windows.slice();
                try {
                    for (var windowsCopy_1 = __values$1(windowsCopy), windowsCopy_1_1 = windowsCopy_1.next(); !windowsCopy_1_1.done; windowsCopy_1_1 = windowsCopy_1.next()) {
                        var window_1 = windowsCopy_1_1.value;
                        window_1.next(value);
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (windowsCopy_1_1 && !windowsCopy_1_1.done && (_a = windowsCopy_1.return)) _a.call(windowsCopy_1);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
            }, function () {
                while (0 < windows.length) {
                    windows.shift().complete();
                }
                subscriber.complete();
            }, handleError, function () {
                while (0 < windows.length) {
                    windows.shift().unsubscribe();
                }
            }));
        });
    }

    function windowWhen$1(closingSelector) {
        return operate$1(function (source, subscriber) {
            var window;
            var closingSubscriber;
            var handleError = function (err) {
                window.error(err);
                subscriber.error(err);
            };
            var openWindow = function () {
                closingSubscriber === null || closingSubscriber === void 0 ? void 0 : closingSubscriber.unsubscribe();
                window === null || window === void 0 ? void 0 : window.complete();
                window = new Subject$3();
                subscriber.next(window.asObservable());
                var closingNotifier;
                try {
                    closingNotifier = innerFrom$1(closingSelector());
                }
                catch (err) {
                    handleError(err);
                    return;
                }
                closingNotifier.subscribe((closingSubscriber = new OperatorSubscriber$1(subscriber, openWindow, openWindow, handleError)));
            };
            openWindow();
            source.subscribe(new OperatorSubscriber$1(subscriber, function (value) { return window.next(value); }, function () {
                window.complete();
                subscriber.complete();
            }, handleError, function () {
                closingSubscriber === null || closingSubscriber === void 0 ? void 0 : closingSubscriber.unsubscribe();
                window = null;
            }));
        });
    }

    function withLatestFrom$1() {
        var inputs = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            inputs[_i] = arguments[_i];
        }
        var project = popResultSelector$1(inputs);
        return operate$1(function (source, subscriber) {
            var len = inputs.length;
            var otherValues = new Array(len);
            var hasValue = inputs.map(function () { return false; });
            var ready = false;
            var _loop_1 = function (i) {
                innerFrom$1(inputs[i]).subscribe(new OperatorSubscriber$1(subscriber, function (value) {
                    otherValues[i] = value;
                    if (!ready && !hasValue[i]) {
                        hasValue[i] = true;
                        (ready = hasValue.every(identity$8)) && (hasValue = null);
                    }
                }, noop$8));
            };
            for (var i = 0; i < len; i++) {
                _loop_1(i);
            }
            source.subscribe(new OperatorSubscriber$1(subscriber, function (value) {
                if (ready) {
                    var values = __spreadArray$1([value], __read$1(otherValues));
                    subscriber.next(project ? project.apply(void 0, __spreadArray$1([], __read$1(values))) : values);
                }
            }));
        });
    }

    function zipAll$1(project) {
        return joinAllInternals$1(zip$3, project);
    }

    function zip$2() {
        var sources = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            sources[_i] = arguments[_i];
        }
        return operate$1(function (source, subscriber) {
            zip$3.apply(void 0, __spreadArray$1([source], __read$1(sources))).subscribe(subscriber);
        });
    }

    function zipWith$1() {
        var otherInputs = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            otherInputs[_i] = arguments[_i];
        }
        return zip$2.apply(void 0, __spreadArray$1([], __read$1(otherInputs)));
    }

    var esm5$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        Observable: Observable$1,
        ConnectableObservable: ConnectableObservable$1,
        observable: observable$1,
        animationFrames: animationFrames$1,
        Subject: Subject$3,
        BehaviorSubject: BehaviorSubject$1,
        ReplaySubject: ReplaySubject$1,
        AsyncSubject: AsyncSubject$1,
        asap: asap$1,
        asapScheduler: asapScheduler$1,
        async: async$1,
        asyncScheduler: asyncScheduler$1,
        queue: queue$1,
        queueScheduler: queueScheduler$1,
        animationFrame: animationFrame$1,
        animationFrameScheduler: animationFrameScheduler$1,
        VirtualTimeScheduler: VirtualTimeScheduler$1,
        VirtualAction: VirtualAction$1,
        Scheduler: Scheduler$1,
        Subscription: Subscription$1,
        Subscriber: Subscriber$1,
        Notification: Notification$1,
        get NotificationKind () { return NotificationKind$1; },
        pipe: pipe$4,
        noop: noop$8,
        identity: identity$8,
        isObservable: isObservable$1,
        lastValueFrom: lastValueFrom$1,
        firstValueFrom: firstValueFrom$1,
        ArgumentOutOfRangeError: ArgumentOutOfRangeError$1,
        EmptyError: EmptyError$1,
        NotFoundError: NotFoundError$1,
        ObjectUnsubscribedError: ObjectUnsubscribedError$1,
        SequenceError: SequenceError$1,
        TimeoutError: TimeoutError$1,
        UnsubscriptionError: UnsubscriptionError$1,
        bindCallback: bindCallback$1,
        bindNodeCallback: bindNodeCallback$1,
        combineLatest: combineLatest$3,
        concat: concat$3,
        connectable: connectable$1,
        defer: defer$3,
        empty: empty$3,
        forkJoin: forkJoin$1,
        from: from$7,
        fromEvent: fromEvent$3,
        fromEventPattern: fromEventPattern$1,
        generate: generate$1,
        iif: iif$1,
        interval: interval$1,
        merge: merge$4,
        never: never$1,
        of: of$5,
        onErrorResumeNext: onErrorResumeNext$2,
        pairs: pairs$1,
        partition: partition$3,
        race: race$3,
        range: range$2,
        throwError: throwError$1,
        timer: timer$1,
        using: using$1,
        zip: zip$3,
        scheduled: scheduled$1,
        EMPTY: EMPTY$1,
        NEVER: NEVER$1,
        config: config$1,
        audit: audit$1,
        auditTime: auditTime$1,
        buffer: buffer$3,
        bufferCount: bufferCount$1,
        bufferTime: bufferTime$1,
        bufferToggle: bufferToggle$1,
        bufferWhen: bufferWhen$1,
        catchError: catchError$1,
        combineAll: combineAll$1,
        combineLatestAll: combineLatestAll$1,
        combineLatestWith: combineLatestWith$1,
        concatAll: concatAll$1,
        concatMap: concatMap$5,
        concatMapTo: concatMapTo$1,
        concatWith: concatWith$1,
        connect: connect$1,
        count: count$1,
        debounce: debounce$1,
        debounceTime: debounceTime$1,
        defaultIfEmpty: defaultIfEmpty$1,
        delay: delay$1,
        delayWhen: delayWhen$1,
        dematerialize: dematerialize$1,
        distinct: distinct$1,
        distinctUntilChanged: distinctUntilChanged$1,
        distinctUntilKeyChanged: distinctUntilKeyChanged$1,
        elementAt: elementAt$1,
        endWith: endWith$1,
        every: every$1,
        exhaust: exhaust$1,
        exhaustAll: exhaustAll$1,
        exhaustMap: exhaustMap$1,
        expand: expand$5,
        filter: filter$a,
        finalize: finalize$1,
        find: find$3,
        findIndex: findIndex$5,
        first: first$1,
        groupBy: groupBy$1,
        ignoreElements: ignoreElements$1,
        isEmpty: isEmpty$1,
        last: last$4,
        map: map$h,
        mapTo: mapTo$1,
        materialize: materialize$1,
        max: max$1,
        mergeAll: mergeAll$1,
        flatMap: flatMap$5,
        mergeMap: mergeMap$1,
        mergeMapTo: mergeMapTo$1,
        mergeScan: mergeScan$1,
        mergeWith: mergeWith$1,
        min: min$1,
        multicast: multicast$1,
        observeOn: observeOn$1,
        pairwise: pairwise$1,
        pluck: pluck$1,
        publish: publish$3,
        publishBehavior: publishBehavior$1,
        publishLast: publishLast$1,
        publishReplay: publishReplay$1,
        raceWith: raceWith$1,
        reduce: reduce$3,
        repeat: repeat$1,
        repeatWhen: repeatWhen$1,
        retry: retry$1,
        retryWhen: retryWhen$1,
        refCount: refCount$1,
        sample: sample$2,
        sampleTime: sampleTime$1,
        scan: scan$1,
        sequenceEqual: sequenceEqual$1,
        share: share$5,
        shareReplay: shareReplay$1,
        single: single$1,
        skip: skip$1,
        skipLast: skipLast$1,
        skipUntil: skipUntil$1,
        skipWhile: skipWhile$1,
        startWith: startWith$1,
        subscribeOn: subscribeOn$1,
        switchAll: switchAll$1,
        switchMap: switchMap$1,
        switchMapTo: switchMapTo$1,
        switchScan: switchScan$1,
        take: take$7,
        takeLast: takeLast$1,
        takeUntil: takeUntil$j,
        takeWhile: takeWhile$1,
        tap: tap$1,
        throttle: throttle$1,
        throttleTime: throttleTime$1,
        throwIfEmpty: throwIfEmpty$1,
        timeInterval: timeInterval$1,
        timeout: timeout$1,
        timeoutWith: timeoutWith$1,
        timestamp: timestamp$1,
        toArray: toArray$1,
        window: window$2,
        windowCount: windowCount$1,
        windowTime: windowTime$1,
        windowToggle: windowToggle$1,
        windowWhen: windowWhen$1,
        withLatestFrom: withLatestFrom$1,
        zipAll: zipAll$1,
        zipWith: zipWith$1
    });

    var require$$4$3 = /*@__PURE__*/getAugmentedNamespace(esm5$1);

    function partition$2(predicate, thisArg) {
        return function (source) {
            return [filter$a(predicate, thisArg)(source), filter$a(not$1(predicate, thisArg))(source)];
        };
    }

    function race$2() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return raceWith$1.apply(void 0, __spreadArray$1([], __read$1(argsOrArgArray$1(args))));
    }

    var operators$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        audit: audit$1,
        auditTime: auditTime$1,
        buffer: buffer$3,
        bufferCount: bufferCount$1,
        bufferTime: bufferTime$1,
        bufferToggle: bufferToggle$1,
        bufferWhen: bufferWhen$1,
        catchError: catchError$1,
        combineAll: combineAll$1,
        combineLatestAll: combineLatestAll$1,
        combineLatest: combineLatest$2,
        combineLatestWith: combineLatestWith$1,
        concat: concat$2,
        concatAll: concatAll$1,
        concatMap: concatMap$5,
        concatMapTo: concatMapTo$1,
        concatWith: concatWith$1,
        connect: connect$1,
        count: count$1,
        debounce: debounce$1,
        debounceTime: debounceTime$1,
        defaultIfEmpty: defaultIfEmpty$1,
        delay: delay$1,
        delayWhen: delayWhen$1,
        dematerialize: dematerialize$1,
        distinct: distinct$1,
        distinctUntilChanged: distinctUntilChanged$1,
        distinctUntilKeyChanged: distinctUntilKeyChanged$1,
        elementAt: elementAt$1,
        endWith: endWith$1,
        every: every$1,
        exhaust: exhaust$1,
        exhaustAll: exhaustAll$1,
        exhaustMap: exhaustMap$1,
        expand: expand$5,
        filter: filter$a,
        finalize: finalize$1,
        find: find$3,
        findIndex: findIndex$5,
        first: first$1,
        groupBy: groupBy$1,
        ignoreElements: ignoreElements$1,
        isEmpty: isEmpty$1,
        last: last$4,
        map: map$h,
        mapTo: mapTo$1,
        materialize: materialize$1,
        max: max$1,
        merge: merge$3,
        mergeAll: mergeAll$1,
        flatMap: flatMap$5,
        mergeMap: mergeMap$1,
        mergeMapTo: mergeMapTo$1,
        mergeScan: mergeScan$1,
        mergeWith: mergeWith$1,
        min: min$1,
        multicast: multicast$1,
        observeOn: observeOn$1,
        onErrorResumeNext: onErrorResumeNext$3,
        pairwise: pairwise$1,
        partition: partition$2,
        pluck: pluck$1,
        publish: publish$3,
        publishBehavior: publishBehavior$1,
        publishLast: publishLast$1,
        publishReplay: publishReplay$1,
        race: race$2,
        raceWith: raceWith$1,
        reduce: reduce$3,
        repeat: repeat$1,
        repeatWhen: repeatWhen$1,
        retry: retry$1,
        retryWhen: retryWhen$1,
        refCount: refCount$1,
        sample: sample$2,
        sampleTime: sampleTime$1,
        scan: scan$1,
        sequenceEqual: sequenceEqual$1,
        share: share$5,
        shareReplay: shareReplay$1,
        single: single$1,
        skip: skip$1,
        skipLast: skipLast$1,
        skipUntil: skipUntil$1,
        skipWhile: skipWhile$1,
        startWith: startWith$1,
        subscribeOn: subscribeOn$1,
        switchAll: switchAll$1,
        switchMap: switchMap$1,
        switchMapTo: switchMapTo$1,
        switchScan: switchScan$1,
        take: take$7,
        takeLast: takeLast$1,
        takeUntil: takeUntil$j,
        takeWhile: takeWhile$1,
        tap: tap$1,
        throttle: throttle$1,
        throttleTime: throttleTime$1,
        throwIfEmpty: throwIfEmpty$1,
        timeInterval: timeInterval$1,
        timeout: timeout$1,
        timeoutWith: timeoutWith$1,
        timestamp: timestamp$1,
        toArray: toArray$1,
        window: window$2,
        windowCount: windowCount$1,
        windowTime: windowTime$1,
        windowToggle: windowToggle$1,
        windowWhen: windowWhen$1,
        withLatestFrom: withLatestFrom$1,
        zip: zip$2,
        zipAll: zipAll$1,
        zipWith: zipWith$1
    });

    var require$$1$3 = /*@__PURE__*/getAugmentedNamespace(operators$1);

    var runAsync$b = {exports: {}};

    function isPromise$2(obj) {
      return !!obj && (typeof obj === 'object' || typeof obj === 'function') && typeof obj.then === 'function';
    }

    /**
     * Return a function that will run a function asynchronously or synchronously
     *
     * example:
     * runAsync(wrappedFunction, callback)(...args);
     *
     * @param   {Function} func  Function to run
     * @param   {Function} cb    Callback function passed the `func` returned value
     * @return  {Function(arguments)} Arguments to pass to `func`. This function will in turn
     *                                return a Promise (Node >= 0.12) or call the callbacks.
     */

    var runAsync$a = runAsync$b.exports = function (func, cb) {
      cb = cb || function () {};

      return function () {

        var args = arguments;

        var promise = new Promise(function (resolve, reject) {
          var resolved = false;
          const wrappedResolve = function (value) {
            if (resolved) {
              console.warn('Run-async promise already resolved.');
            }
            resolved = true;
            resolve(value);
          };

          var rejected = false;
          const wrappedReject = function (value) {
            if (rejected) {
              console.warn('Run-async promise already rejected.');
            }
            rejected = true;
            reject(value);
          };

          var usingCallback = false;
          var callbackConflict = false;
          var contextEnded = false;

          var answer = func.apply({
            async: function () {
              if (contextEnded) {
                console.warn('Run-async async() called outside a valid run-async context, callback will be ignored.');
                return function() {};
              }
              if (callbackConflict) {
                console.warn('Run-async wrapped function (async) returned a promise.\nCalls to async() callback can have unexpected results.');
              }
              usingCallback = true;
              return function (err, value) {
                if (err) {
                  wrappedReject(err);
                } else {
                  wrappedResolve(value);
                }
              };
            }
          }, Array.prototype.slice.call(args));

          if (usingCallback) {
            if (isPromise$2(answer)) {
              console.warn('Run-async wrapped function (sync) returned a promise but async() callback must be executed to resolve.');
            }
          } else {
            if (isPromise$2(answer)) {
              callbackConflict = true;
              answer.then(wrappedResolve, wrappedReject);
            } else {
              wrappedResolve(answer);
            }
          }
          contextEnded = true;
        });

        promise.then(cb.bind(null, null), cb);

        return promise;
      }
    };

    runAsync$a.cb = function (func, cb) {
      return runAsync$a(function () {
        var args = Array.prototype.slice.call(arguments);
        if (args.length === func.length - 1) {
          args.push(this.async());
        }
        return func.apply(this, args);
      }, cb);
    };

    var utils$k = {};

    const _$p = {
      isFunction: isFunction_1$1,
    };
    const { from: from$6, of: of$4 } = require$$4$3;
    const runAsync$9 = runAsync$b.exports;

    /**
     * Resolve a question property value if it is passed as a function.
     * This method will overwrite the property on the question object with the received value.
     * @param  {Object} question - Question object
     * @param  {String} prop     - Property to fetch name
     * @param  {Object} answers  - Answers object
     * @return {Rx.Observable}   - Observable emitting once value is known
     */

    utils$k.fetchAsyncQuestionProperty = function (question, prop, answers) {
      if (!_$p.isFunction(question[prop])) {
        return of$4(question);
      }

      return from$6(
        runAsync$9(question[prop])(answers).then((value) => {
          question[prop] = value;
          return question;
        })
      );
    };

    const _$o = {
      isPlainObject: isPlainObject_1$1,
      clone: clone_1$1,
      isArray: isArray_1$1,
      get: get_1$1,
      set: set_1$1,
      isFunction: isFunction_1$1,
    };
    const { defer: defer$2, empty: empty$2, from: from$5, of: of$3 } = require$$4$3;
    const { concatMap: concatMap$4, filter: filter$9, publish: publish$2, reduce: reduce$2 } = require$$1$3;
    const runAsync$8 = runAsync$b.exports;
    const utils$j = utils$k;
    const Base$i = baseUI$1;

    /**
     * Base interface class other can inherits from
     */

    class PromptUI$1 extends Base$i {
      constructor(prompts, opt) {
        super(opt);
        this.prompts = prompts;
      }

      run(questions, answers) {
        // Keep global reference to the answers
        if (_$o.isPlainObject(answers)) {
          this.answers = _$o.clone(answers);
        } else {
          this.answers = {};
        }

        // Make sure questions is an array.
        if (_$o.isPlainObject(questions)) {
          // It's either an object of questions or a single question
          questions = Object.values(questions).every(
            (v) => _$o.isPlainObject(v) && v.name === undefined
          )
            ? Object.entries(questions).map(([name, question]) => ({ name, ...question }))
            : [questions];
        }

        // Create an observable, unless we received one as parameter.
        // Note: As this is a public interface, we cannot do an instanceof check as we won't
        // be using the exact same object in memory.
        const obs = _$o.isArray(questions) ? from$5(questions) : questions;

        this.process = obs.pipe(
          concatMap$4(this.processQuestion.bind(this)),
          publish$2() // Creates a hot Observable. It prevents duplicating prompts.
        );

        this.process.connect();

        return this.process
          .pipe(
            reduce$2((answers, answer) => {
              _$o.set(answers, answer.name, answer.answer);
              return answers;
            }, this.answers)
          )
          .toPromise(Promise)
          .then(this.onCompletion.bind(this), this.onError.bind(this));
      }

      /**
       * Once all prompt are over
       */

      onCompletion() {
        this.close();

        return this.answers;
      }

      onError(error) {
        this.close();
        return Promise.reject(error);
      }

      processQuestion(question) {
        question = _$o.clone(question);
        return defer$2(() => {
          const obs = of$3(question);

          return obs.pipe(
            concatMap$4(this.setDefaultType.bind(this)),
            concatMap$4(this.filterIfRunnable.bind(this)),
            concatMap$4(() =>
              utils$j.fetchAsyncQuestionProperty(question, 'message', this.answers)
            ),
            concatMap$4(() =>
              utils$j.fetchAsyncQuestionProperty(question, 'default', this.answers)
            ),
            concatMap$4(() =>
              utils$j.fetchAsyncQuestionProperty(question, 'choices', this.answers)
            ),
            concatMap$4(this.fetchAnswer.bind(this))
          );
        });
      }

      fetchAnswer(question) {
        const Prompt = this.prompts[question.type];
        this.activePrompt = new Prompt(question, this.rl, this.answers);
        return defer$2(() =>
          from$5(this.activePrompt.run().then((answer) => ({ name: question.name, answer })))
        );
      }

      setDefaultType(question) {
        // Default type to input
        if (!this.prompts[question.type]) {
          question.type = 'input';
        }

        return defer$2(() => of$3(question));
      }

      filterIfRunnable(question) {
        if (
          question.askAnswered !== true &&
          _$o.get(this.answers, question.name) !== undefined
        ) {
          return empty$2();
        }

        if (question.when === false) {
          return empty$2();
        }

        if (!_$o.isFunction(question.when)) {
          return of$3(question);
        }

        const { answers } = this;
        return defer$2(() =>
          from$5(
            runAsync$8(question.when)(answers).then((shouldRun) => {
              if (shouldRun) {
                return question;
              }
            })
          ).pipe(filter$9((val) => val != null))
        );
      }
    }

    var prompt$1 = PromptUI$1;

    var baseGetTag$c = _baseGetTag$1,
        isObjectLike$f = isObjectLike_1$1;

    /** `Object#toString` result references. */
    var numberTag$6 = '[object Number]';

    /**
     * Checks if `value` is classified as a `Number` primitive or object.
     *
     * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
     * classified as numbers, use the `_.isFinite` method.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a number, else `false`.
     * @example
     *
     * _.isNumber(3);
     * // => true
     *
     * _.isNumber(Number.MIN_VALUE);
     * // => true
     *
     * _.isNumber(Infinity);
     * // => true
     *
     * _.isNumber('3');
     * // => false
     */
    function isNumber$2(value) {
      return typeof value == 'number' ||
        (isObjectLike$f(value) && baseGetTag$c(value) == numberTag$6);
    }

    var isNumber_1$1 = isNumber$2;

    /**
     * The base implementation of `_.findIndex` and `_.findLastIndex` without
     * support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} predicate The function invoked per iteration.
     * @param {number} fromIndex The index to search from.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {number} Returns the index of the matched value, else `-1`.
     */

    function baseFindIndex$5(array, predicate, fromIndex, fromRight) {
      var length = array.length,
          index = fromIndex + (fromRight ? 1 : -1);

      while ((fromRight ? index-- : ++index < length)) {
        if (predicate(array[index], index, array)) {
          return index;
        }
      }
      return -1;
    }

    var _baseFindIndex$1 = baseFindIndex$5;

    /** Used to stand-in for `undefined` hash values. */

    var HASH_UNDEFINED$3 = '__lodash_hash_undefined__';

    /**
     * Adds `value` to the array cache.
     *
     * @private
     * @name add
     * @memberOf SetCache
     * @alias push
     * @param {*} value The value to cache.
     * @returns {Object} Returns the cache instance.
     */
    function setCacheAdd$3(value) {
      this.__data__.set(value, HASH_UNDEFINED$3);
      return this;
    }

    var _setCacheAdd$1 = setCacheAdd$3;

    /**
     * Checks if `value` is in the array cache.
     *
     * @private
     * @name has
     * @memberOf SetCache
     * @param {*} value The value to search for.
     * @returns {number} Returns `true` if `value` is found, else `false`.
     */

    function setCacheHas$3(value) {
      return this.__data__.has(value);
    }

    var _setCacheHas$1 = setCacheHas$3;

    var MapCache$4 = _MapCache$1,
        setCacheAdd$2 = _setCacheAdd$1,
        setCacheHas$2 = _setCacheHas$1;

    /**
     *
     * Creates an array cache object to store unique values.
     *
     * @private
     * @constructor
     * @param {Array} [values] The values to cache.
     */
    function SetCache$5(values) {
      var index = -1,
          length = values == null ? 0 : values.length;

      this.__data__ = new MapCache$4;
      while (++index < length) {
        this.add(values[index]);
      }
    }

    // Add methods to `SetCache`.
    SetCache$5.prototype.add = SetCache$5.prototype.push = setCacheAdd$2;
    SetCache$5.prototype.has = setCacheHas$2;

    var _SetCache$1 = SetCache$5;

    /**
     * A specialized version of `_.some` for arrays without support for iteratee
     * shorthands.
     *
     * @private
     * @param {Array} [array] The array to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     */

    function arraySome$3(array, predicate) {
      var index = -1,
          length = array == null ? 0 : array.length;

      while (++index < length) {
        if (predicate(array[index], index, array)) {
          return true;
        }
      }
      return false;
    }

    var _arraySome$1 = arraySome$3;

    /**
     * Checks if a `cache` value for `key` exists.
     *
     * @private
     * @param {Object} cache The cache to query.
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */

    function cacheHas$5(cache, key) {
      return cache.has(key);
    }

    var _cacheHas$1 = cacheHas$5;

    var SetCache$4 = _SetCache$1,
        arraySome$2 = _arraySome$1,
        cacheHas$4 = _cacheHas$1;

    /** Used to compose bitmasks for value comparisons. */
    var COMPARE_PARTIAL_FLAG$b = 1,
        COMPARE_UNORDERED_FLAG$7 = 2;

    /**
     * A specialized version of `baseIsEqualDeep` for arrays with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Array} array The array to compare.
     * @param {Array} other The other array to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `array` and `other` objects.
     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
     */
    function equalArrays$5(array, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG$b,
          arrLength = array.length,
          othLength = other.length;

      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
        return false;
      }
      // Check that cyclic values are equal.
      var arrStacked = stack.get(array);
      var othStacked = stack.get(other);
      if (arrStacked && othStacked) {
        return arrStacked == other && othStacked == array;
      }
      var index = -1,
          result = true,
          seen = (bitmask & COMPARE_UNORDERED_FLAG$7) ? new SetCache$4 : undefined;

      stack.set(array, other);
      stack.set(other, array);

      // Ignore non-index properties.
      while (++index < arrLength) {
        var arrValue = array[index],
            othValue = other[index];

        if (customizer) {
          var compared = isPartial
            ? customizer(othValue, arrValue, index, other, array, stack)
            : customizer(arrValue, othValue, index, array, other, stack);
        }
        if (compared !== undefined) {
          if (compared) {
            continue;
          }
          result = false;
          break;
        }
        // Recursively compare arrays (susceptible to call stack limits).
        if (seen) {
          if (!arraySome$2(other, function(othValue, othIndex) {
                if (!cacheHas$4(seen, othIndex) &&
                    (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
                  return seen.push(othIndex);
                }
              })) {
            result = false;
            break;
          }
        } else if (!(
              arrValue === othValue ||
                equalFunc(arrValue, othValue, bitmask, customizer, stack)
            )) {
          result = false;
          break;
        }
      }
      stack['delete'](array);
      stack['delete'](other);
      return result;
    }

    var _equalArrays$1 = equalArrays$5;

    /**
     * Converts `map` to its key-value pairs.
     *
     * @private
     * @param {Object} map The map to convert.
     * @returns {Array} Returns the key-value pairs.
     */

    function mapToArray$3(map) {
      var index = -1,
          result = Array(map.size);

      map.forEach(function(value, key) {
        result[++index] = [key, value];
      });
      return result;
    }

    var _mapToArray$1 = mapToArray$3;

    /**
     * Converts `set` to an array of its values.
     *
     * @private
     * @param {Object} set The set to convert.
     * @returns {Array} Returns the values.
     */

    function setToArray$7(set) {
      var index = -1,
          result = Array(set.size);

      set.forEach(function(value) {
        result[++index] = value;
      });
      return result;
    }

    var _setToArray$1 = setToArray$7;

    var Symbol$8 = _Symbol$1,
        Uint8Array$4 = _Uint8Array$1,
        eq$7 = eq_1$1,
        equalArrays$4 = _equalArrays$1,
        mapToArray$2 = _mapToArray$1,
        setToArray$6 = _setToArray$1;

    /** Used to compose bitmasks for value comparisons. */
    var COMPARE_PARTIAL_FLAG$a = 1,
        COMPARE_UNORDERED_FLAG$6 = 2;

    /** `Object#toString` result references. */
    var boolTag$6 = '[object Boolean]',
        dateTag$4 = '[object Date]',
        errorTag$3 = '[object Error]',
        mapTag$6 = '[object Map]',
        numberTag$5 = '[object Number]',
        regexpTag$4 = '[object RegExp]',
        setTag$6 = '[object Set]',
        stringTag$6 = '[object String]',
        symbolTag$4 = '[object Symbol]';

    var arrayBufferTag$4 = '[object ArrayBuffer]',
        dataViewTag$5 = '[object DataView]';

    /** Used to convert symbols to primitives and strings. */
    var symbolProto$3 = Symbol$8 ? Symbol$8.prototype : undefined,
        symbolValueOf$2 = symbolProto$3 ? symbolProto$3.valueOf : undefined;

    /**
     * A specialized version of `baseIsEqualDeep` for comparing objects of
     * the same `toStringTag`.
     *
     * **Note:** This function only supports comparing values with tags of
     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {string} tag The `toStringTag` of the objects to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalByTag$3(object, other, tag, bitmask, customizer, equalFunc, stack) {
      switch (tag) {
        case dataViewTag$5:
          if ((object.byteLength != other.byteLength) ||
              (object.byteOffset != other.byteOffset)) {
            return false;
          }
          object = object.buffer;
          other = other.buffer;

        case arrayBufferTag$4:
          if ((object.byteLength != other.byteLength) ||
              !equalFunc(new Uint8Array$4(object), new Uint8Array$4(other))) {
            return false;
          }
          return true;

        case boolTag$6:
        case dateTag$4:
        case numberTag$5:
          // Coerce booleans to `1` or `0` and dates to milliseconds.
          // Invalid dates are coerced to `NaN`.
          return eq$7(+object, +other);

        case errorTag$3:
          return object.name == other.name && object.message == other.message;

        case regexpTag$4:
        case stringTag$6:
          // Coerce regexes to strings and treat strings, primitives and objects,
          // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
          // for more details.
          return object == (other + '');

        case mapTag$6:
          var convert = mapToArray$2;

        case setTag$6:
          var isPartial = bitmask & COMPARE_PARTIAL_FLAG$a;
          convert || (convert = setToArray$6);

          if (object.size != other.size && !isPartial) {
            return false;
          }
          // Assume cyclic values are equal.
          var stacked = stack.get(object);
          if (stacked) {
            return stacked == other;
          }
          bitmask |= COMPARE_UNORDERED_FLAG$6;

          // Recursively compare objects (susceptible to call stack limits).
          stack.set(object, other);
          var result = equalArrays$4(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
          stack['delete'](object);
          return result;

        case symbolTag$4:
          if (symbolValueOf$2) {
            return symbolValueOf$2.call(object) == symbolValueOf$2.call(other);
          }
      }
      return false;
    }

    var _equalByTag$1 = equalByTag$3;

    var getAllKeys$3 = _getAllKeys$1;

    /** Used to compose bitmasks for value comparisons. */
    var COMPARE_PARTIAL_FLAG$9 = 1;

    /** Used for built-in method references. */
    var objectProto$m = Object.prototype;

    /** Used to check objects for own properties. */
    var hasOwnProperty$i = objectProto$m.hasOwnProperty;

    /**
     * A specialized version of `baseIsEqualDeep` for objects with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalObjects$3(object, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG$9,
          objProps = getAllKeys$3(object),
          objLength = objProps.length,
          othProps = getAllKeys$3(other),
          othLength = othProps.length;

      if (objLength != othLength && !isPartial) {
        return false;
      }
      var index = objLength;
      while (index--) {
        var key = objProps[index];
        if (!(isPartial ? key in other : hasOwnProperty$i.call(other, key))) {
          return false;
        }
      }
      // Check that cyclic values are equal.
      var objStacked = stack.get(object);
      var othStacked = stack.get(other);
      if (objStacked && othStacked) {
        return objStacked == other && othStacked == object;
      }
      var result = true;
      stack.set(object, other);
      stack.set(other, object);

      var skipCtor = isPartial;
      while (++index < objLength) {
        key = objProps[index];
        var objValue = object[key],
            othValue = other[key];

        if (customizer) {
          var compared = isPartial
            ? customizer(othValue, objValue, key, other, object, stack)
            : customizer(objValue, othValue, key, object, other, stack);
        }
        // Recursively compare objects (susceptible to call stack limits).
        if (!(compared === undefined
              ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))
              : compared
            )) {
          result = false;
          break;
        }
        skipCtor || (skipCtor = key == 'constructor');
      }
      if (result && !skipCtor) {
        var objCtor = object.constructor,
            othCtor = other.constructor;

        // Non `Object` object instances with different constructors are not equal.
        if (objCtor != othCtor &&
            ('constructor' in object && 'constructor' in other) &&
            !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
              typeof othCtor == 'function' && othCtor instanceof othCtor)) {
          result = false;
        }
      }
      stack['delete'](object);
      stack['delete'](other);
      return result;
    }

    var _equalObjects$1 = equalObjects$3;

    var Stack$5 = _Stack$1,
        equalArrays$3 = _equalArrays$1,
        equalByTag$2 = _equalByTag$1,
        equalObjects$2 = _equalObjects$1,
        getTag$5 = _getTag$1,
        isArray$p = isArray_1$1,
        isBuffer$5 = isBuffer$8.exports,
        isTypedArray$3 = isTypedArray_1$1;

    /** Used to compose bitmasks for value comparisons. */
    var COMPARE_PARTIAL_FLAG$8 = 1;

    /** `Object#toString` result references. */
    var argsTag$4 = '[object Arguments]',
        arrayTag$3 = '[object Array]',
        objectTag$5 = '[object Object]';

    /** Used for built-in method references. */
    var objectProto$l = Object.prototype;

    /** Used to check objects for own properties. */
    var hasOwnProperty$h = objectProto$l.hasOwnProperty;

    /**
     * A specialized version of `baseIsEqual` for arrays and objects which performs
     * deep comparisons and tracks traversed objects enabling objects with circular
     * references to be compared.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} [stack] Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function baseIsEqualDeep$3(object, other, bitmask, customizer, equalFunc, stack) {
      var objIsArr = isArray$p(object),
          othIsArr = isArray$p(other),
          objTag = objIsArr ? arrayTag$3 : getTag$5(object),
          othTag = othIsArr ? arrayTag$3 : getTag$5(other);

      objTag = objTag == argsTag$4 ? objectTag$5 : objTag;
      othTag = othTag == argsTag$4 ? objectTag$5 : othTag;

      var objIsObj = objTag == objectTag$5,
          othIsObj = othTag == objectTag$5,
          isSameTag = objTag == othTag;

      if (isSameTag && isBuffer$5(object)) {
        if (!isBuffer$5(other)) {
          return false;
        }
        objIsArr = true;
        objIsObj = false;
      }
      if (isSameTag && !objIsObj) {
        stack || (stack = new Stack$5);
        return (objIsArr || isTypedArray$3(object))
          ? equalArrays$3(object, other, bitmask, customizer, equalFunc, stack)
          : equalByTag$2(object, other, objTag, bitmask, customizer, equalFunc, stack);
      }
      if (!(bitmask & COMPARE_PARTIAL_FLAG$8)) {
        var objIsWrapped = objIsObj && hasOwnProperty$h.call(object, '__wrapped__'),
            othIsWrapped = othIsObj && hasOwnProperty$h.call(other, '__wrapped__');

        if (objIsWrapped || othIsWrapped) {
          var objUnwrapped = objIsWrapped ? object.value() : object,
              othUnwrapped = othIsWrapped ? other.value() : other;

          stack || (stack = new Stack$5);
          return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
        }
      }
      if (!isSameTag) {
        return false;
      }
      stack || (stack = new Stack$5);
      return equalObjects$2(object, other, bitmask, customizer, equalFunc, stack);
    }

    var _baseIsEqualDeep$1 = baseIsEqualDeep$3;

    var baseIsEqualDeep$2 = _baseIsEqualDeep$1,
        isObjectLike$e = isObjectLike_1$1;

    /**
     * The base implementation of `_.isEqual` which supports partial comparisons
     * and tracks traversed objects.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {boolean} bitmask The bitmask flags.
     *  1 - Unordered comparison
     *  2 - Partial comparison
     * @param {Function} [customizer] The function to customize comparisons.
     * @param {Object} [stack] Tracks traversed `value` and `other` objects.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     */
    function baseIsEqual$5(value, other, bitmask, customizer, stack) {
      if (value === other) {
        return true;
      }
      if (value == null || other == null || (!isObjectLike$e(value) && !isObjectLike$e(other))) {
        return value !== value && other !== other;
      }
      return baseIsEqualDeep$2(value, other, bitmask, customizer, baseIsEqual$5, stack);
    }

    var _baseIsEqual$1 = baseIsEqual$5;

    var Stack$4 = _Stack$1,
        baseIsEqual$4 = _baseIsEqual$1;

    /** Used to compose bitmasks for value comparisons. */
    var COMPARE_PARTIAL_FLAG$7 = 1,
        COMPARE_UNORDERED_FLAG$5 = 2;

    /**
     * The base implementation of `_.isMatch` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Array} matchData The property names, values, and compare flags to match.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     */
    function baseIsMatch$3(object, source, matchData, customizer) {
      var index = matchData.length,
          length = index,
          noCustomizer = !customizer;

      if (object == null) {
        return !length;
      }
      object = Object(object);
      while (index--) {
        var data = matchData[index];
        if ((noCustomizer && data[2])
              ? data[1] !== object[data[0]]
              : !(data[0] in object)
            ) {
          return false;
        }
      }
      while (++index < length) {
        data = matchData[index];
        var key = data[0],
            objValue = object[key],
            srcValue = data[1];

        if (noCustomizer && data[2]) {
          if (objValue === undefined && !(key in object)) {
            return false;
          }
        } else {
          var stack = new Stack$4;
          if (customizer) {
            var result = customizer(objValue, srcValue, key, object, source, stack);
          }
          if (!(result === undefined
                ? baseIsEqual$4(srcValue, objValue, COMPARE_PARTIAL_FLAG$7 | COMPARE_UNORDERED_FLAG$5, customizer, stack)
                : result
              )) {
            return false;
          }
        }
      }
      return true;
    }

    var _baseIsMatch$1 = baseIsMatch$3;

    var isObject$c = isObject_1$1;

    /**
     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` if suitable for strict
     *  equality comparisons, else `false`.
     */
    function isStrictComparable$5(value) {
      return value === value && !isObject$c(value);
    }

    var _isStrictComparable$1 = isStrictComparable$5;

    var isStrictComparable$4 = _isStrictComparable$1,
        keys$c = keys_1$1;

    /**
     * Gets the property names, values, and compare flags of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the match data of `object`.
     */
    function getMatchData$3(object) {
      var result = keys$c(object),
          length = result.length;

      while (length--) {
        var key = result[length],
            value = object[key];

        result[length] = [key, value, isStrictComparable$4(value)];
      }
      return result;
    }

    var _getMatchData$1 = getMatchData$3;

    /**
     * A specialized version of `matchesProperty` for source values suitable
     * for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {string} key The key of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     */

    function matchesStrictComparable$5(key, srcValue) {
      return function(object) {
        if (object == null) {
          return false;
        }
        return object[key] === srcValue &&
          (srcValue !== undefined || (key in Object(object)));
      };
    }

    var _matchesStrictComparable$1 = matchesStrictComparable$5;

    var baseIsMatch$2 = _baseIsMatch$1,
        getMatchData$2 = _getMatchData$1,
        matchesStrictComparable$4 = _matchesStrictComparable$1;

    /**
     * The base implementation of `_.matches` which doesn't clone `source`.
     *
     * @private
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new spec function.
     */
    function baseMatches$3(source) {
      var matchData = getMatchData$2(source);
      if (matchData.length == 1 && matchData[0][2]) {
        return matchesStrictComparable$4(matchData[0][0], matchData[0][1]);
      }
      return function(object) {
        return object === source || baseIsMatch$2(object, source, matchData);
      };
    }

    var _baseMatches$1 = baseMatches$3;

    /**
     * The base implementation of `_.hasIn` without support for deep paths.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {Array|string} key The key to check.
     * @returns {boolean} Returns `true` if `key` exists, else `false`.
     */

    function baseHasIn$3(object, key) {
      return object != null && key in Object(object);
    }

    var _baseHasIn$1 = baseHasIn$3;

    var castPath$6 = _castPath$1,
        isArguments$4 = isArguments_1$1,
        isArray$o = isArray_1$1,
        isIndex$5 = _isIndex$1,
        isLength$4 = isLength_1$1,
        toKey$9 = _toKey$1;

    /**
     * Checks if `path` exists on `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @param {Function} hasFunc The function to check properties.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     */
    function hasPath$3(object, path, hasFunc) {
      path = castPath$6(path, object);

      var index = -1,
          length = path.length,
          result = false;

      while (++index < length) {
        var key = toKey$9(path[index]);
        if (!(result = object != null && hasFunc(object, key))) {
          break;
        }
        object = object[key];
      }
      if (result || ++index != length) {
        return result;
      }
      length = object == null ? 0 : object.length;
      return !!length && isLength$4(length) && isIndex$5(key, length) &&
        (isArray$o(object) || isArguments$4(object));
    }

    var _hasPath$1 = hasPath$3;

    var baseHasIn$2 = _baseHasIn$1,
        hasPath$2 = _hasPath$1;

    /**
     * Checks if `path` is a direct or inherited property of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     * @example
     *
     * var object = _.create({ 'a': _.create({ 'b': 2 }) });
     *
     * _.hasIn(object, 'a');
     * // => true
     *
     * _.hasIn(object, 'a.b');
     * // => true
     *
     * _.hasIn(object, ['a', 'b']);
     * // => true
     *
     * _.hasIn(object, 'b');
     * // => false
     */
    function hasIn$3(object, path) {
      return object != null && hasPath$2(object, path, baseHasIn$2);
    }

    var hasIn_1$1 = hasIn$3;

    var baseIsEqual$3 = _baseIsEqual$1,
        get$2 = get_1$1,
        hasIn$2 = hasIn_1$1,
        isKey$5 = _isKey$1,
        isStrictComparable$3 = _isStrictComparable$1,
        matchesStrictComparable$3 = _matchesStrictComparable$1,
        toKey$8 = _toKey$1;

    /** Used to compose bitmasks for value comparisons. */
    var COMPARE_PARTIAL_FLAG$6 = 1,
        COMPARE_UNORDERED_FLAG$4 = 2;

    /**
     * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
     *
     * @private
     * @param {string} path The path of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     */
    function baseMatchesProperty$3(path, srcValue) {
      if (isKey$5(path) && isStrictComparable$3(srcValue)) {
        return matchesStrictComparable$3(toKey$8(path), srcValue);
      }
      return function(object) {
        var objValue = get$2(object, path);
        return (objValue === undefined && objValue === srcValue)
          ? hasIn$2(object, path)
          : baseIsEqual$3(srcValue, objValue, COMPARE_PARTIAL_FLAG$6 | COMPARE_UNORDERED_FLAG$4);
      };
    }

    var _baseMatchesProperty$1 = baseMatchesProperty$3;

    /**
     * The base implementation of `_.property` without support for deep paths.
     *
     * @private
     * @param {string} key The key of the property to get.
     * @returns {Function} Returns the new accessor function.
     */

    function baseProperty$3(key) {
      return function(object) {
        return object == null ? undefined : object[key];
      };
    }

    var _baseProperty$1 = baseProperty$3;

    var baseGet$4 = _baseGet$1;

    /**
     * A specialized version of `baseProperty` which supports deep paths.
     *
     * @private
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new accessor function.
     */
    function basePropertyDeep$3(path) {
      return function(object) {
        return baseGet$4(object, path);
      };
    }

    var _basePropertyDeep$1 = basePropertyDeep$3;

    var baseProperty$2 = _baseProperty$1,
        basePropertyDeep$2 = _basePropertyDeep$1,
        isKey$4 = _isKey$1,
        toKey$7 = _toKey$1;

    /**
     * Creates a function that returns the value at `path` of a given object.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Util
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new accessor function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': 2 } },
     *   { 'a': { 'b': 1 } }
     * ];
     *
     * _.map(objects, _.property('a.b'));
     * // => [2, 1]
     *
     * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
     * // => [1, 2]
     */
    function property$3(path) {
      return isKey$4(path) ? baseProperty$2(toKey$7(path)) : basePropertyDeep$2(path);
    }

    var property_1$1 = property$3;

    var baseMatches$2 = _baseMatches$1,
        baseMatchesProperty$2 = _baseMatchesProperty$1,
        identity$7 = identity_1$1,
        isArray$n = isArray_1$1,
        property$2 = property_1$1;

    /**
     * The base implementation of `_.iteratee`.
     *
     * @private
     * @param {*} [value=_.identity] The value to convert to an iteratee.
     * @returns {Function} Returns the iteratee.
     */
    function baseIteratee$9(value) {
      // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
      // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
      if (typeof value == 'function') {
        return value;
      }
      if (value == null) {
        return identity$7;
      }
      if (typeof value == 'object') {
        return isArray$n(value)
          ? baseMatchesProperty$2(value[0], value[1])
          : baseMatches$2(value);
      }
      return property$2(value);
    }

    var _baseIteratee$1 = baseIteratee$9;

    /** Used to match a single whitespace character. */

    var reWhitespace$1 = /\s/;

    /**
     * Used by `_.trim` and `_.trimEnd` to get the index of the last non-whitespace
     * character of `string`.
     *
     * @private
     * @param {string} string The string to inspect.
     * @returns {number} Returns the index of the last non-whitespace character.
     */
    function trimmedEndIndex$3(string) {
      var index = string.length;

      while (index-- && reWhitespace$1.test(string.charAt(index))) {}
      return index;
    }

    var _trimmedEndIndex$1 = trimmedEndIndex$3;

    var trimmedEndIndex$2 = _trimmedEndIndex$1;

    /** Used to match leading whitespace. */
    var reTrimStart$1 = /^\s+/;

    /**
     * The base implementation of `_.trim`.
     *
     * @private
     * @param {string} string The string to trim.
     * @returns {string} Returns the trimmed string.
     */
    function baseTrim$3(string) {
      return string
        ? string.slice(0, trimmedEndIndex$2(string) + 1).replace(reTrimStart$1, '')
        : string;
    }

    var _baseTrim$1 = baseTrim$3;

    var baseTrim$2 = _baseTrim$1,
        isObject$b = isObject_1$1,
        isSymbol$5 = isSymbol_1$1;

    /** Used as references for various `Number` constants. */
    var NAN$1 = 0 / 0;

    /** Used to detect bad signed hexadecimal string values. */
    var reIsBadHex$1 = /^[-+]0x[0-9a-f]+$/i;

    /** Used to detect binary string values. */
    var reIsBinary$1 = /^0b[01]+$/i;

    /** Used to detect octal string values. */
    var reIsOctal$1 = /^0o[0-7]+$/i;

    /** Built-in method references without a dependency on `root`. */
    var freeParseInt$1 = parseInt;

    /**
     * Converts `value` to a number.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to process.
     * @returns {number} Returns the number.
     * @example
     *
     * _.toNumber(3.2);
     * // => 3.2
     *
     * _.toNumber(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toNumber(Infinity);
     * // => Infinity
     *
     * _.toNumber('3.2');
     * // => 3.2
     */
    function toNumber$3(value) {
      if (typeof value == 'number') {
        return value;
      }
      if (isSymbol$5(value)) {
        return NAN$1;
      }
      if (isObject$b(value)) {
        var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
        value = isObject$b(other) ? (other + '') : other;
      }
      if (typeof value != 'string') {
        return value === 0 ? value : +value;
      }
      value = baseTrim$2(value);
      var isBinary = reIsBinary$1.test(value);
      return (isBinary || reIsOctal$1.test(value))
        ? freeParseInt$1(value.slice(2), isBinary ? 2 : 8)
        : (reIsBadHex$1.test(value) ? NAN$1 : +value);
    }

    var toNumber_1$1 = toNumber$3;

    var toNumber$2 = toNumber_1$1;

    /** Used as references for various `Number` constants. */
    var INFINITY$5 = 1 / 0,
        MAX_INTEGER$1 = 1.7976931348623157e+308;

    /**
     * Converts `value` to a finite number.
     *
     * @static
     * @memberOf _
     * @since 4.12.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted number.
     * @example
     *
     * _.toFinite(3.2);
     * // => 3.2
     *
     * _.toFinite(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toFinite(Infinity);
     * // => 1.7976931348623157e+308
     *
     * _.toFinite('3.2');
     * // => 3.2
     */
    function toFinite$3(value) {
      if (!value) {
        return value === 0 ? value : 0;
      }
      value = toNumber$2(value);
      if (value === INFINITY$5 || value === -INFINITY$5) {
        var sign = (value < 0 ? -1 : 1);
        return sign * MAX_INTEGER$1;
      }
      return value === value ? value : 0;
    }

    var toFinite_1$1 = toFinite$3;

    var toFinite$2 = toFinite_1$1;

    /**
     * Converts `value` to an integer.
     *
     * **Note:** This method is loosely based on
     * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toInteger(3.2);
     * // => 3
     *
     * _.toInteger(Number.MIN_VALUE);
     * // => 0
     *
     * _.toInteger(Infinity);
     * // => 1.7976931348623157e+308
     *
     * _.toInteger('3.2');
     * // => 3
     */
    function toInteger$3(value) {
      var result = toFinite$2(value),
          remainder = result % 1;

      return result === result ? (remainder ? result - remainder : result) : 0;
    }

    var toInteger_1$1 = toInteger$3;

    var baseFindIndex$4 = _baseFindIndex$1,
        baseIteratee$8 = _baseIteratee$1,
        toInteger$2 = toInteger_1$1;

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeMax$2 = Math.max;

    /**
     * This method is like `_.find` except that it returns the index of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.findIndex(users, function(o) { return o.user == 'barney'; });
     * // => 0
     *
     * // The `_.matches` iteratee shorthand.
     * _.findIndex(users, { 'user': 'fred', 'active': false });
     * // => 1
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findIndex(users, ['active', false]);
     * // => 0
     *
     * // The `_.property` iteratee shorthand.
     * _.findIndex(users, 'active');
     * // => 2
     */
    function findIndex$4(array, predicate, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = fromIndex == null ? 0 : toInteger$2(fromIndex);
      if (index < 0) {
        index = nativeMax$2(length + index, 0);
      }
      return baseFindIndex$4(array, baseIteratee$8(predicate), index);
    }

    var findIndex_1$1 = findIndex$4;

    var baseGetTag$b = _baseGetTag$1,
        isArray$m = isArray_1$1,
        isObjectLike$d = isObjectLike_1$1;

    /** `Object#toString` result references. */
    var stringTag$5 = '[object String]';

    /**
     * Checks if `value` is classified as a `String` primitive or object.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a string, else `false`.
     * @example
     *
     * _.isString('abc');
     * // => true
     *
     * _.isString(1);
     * // => false
     */
    function isString$2(value) {
      return typeof value == 'string' ||
        (!isArray$m(value) && isObjectLike$d(value) && baseGetTag$b(value) == stringTag$5);
    }

    var isString_1$1 = isString$2;

    var cliCursor$7 = {};

    var onetime$5 = {exports: {}};

    var mimicFn$5 = {exports: {}};

    const mimicFn$4 = (to, from) => {
    	for (const prop of Reflect.ownKeys(from)) {
    		Object.defineProperty(to, prop, Object.getOwnPropertyDescriptor(from, prop));
    	}

    	return to;
    };

    mimicFn$5.exports = mimicFn$4;
    // TODO: Remove this for the next major release
    mimicFn$5.exports.default = mimicFn$4;

    const mimicFn$3 = mimicFn$5.exports;

    const calledFunctions$1 = new WeakMap();

    const onetime$4 = (function_, options = {}) => {
    	if (typeof function_ !== 'function') {
    		throw new TypeError('Expected a function');
    	}

    	let returnValue;
    	let callCount = 0;
    	const functionName = function_.displayName || function_.name || '<anonymous>';

    	const onetime = function (...arguments_) {
    		calledFunctions$1.set(onetime, ++callCount);

    		if (callCount === 1) {
    			returnValue = function_.apply(this, arguments_);
    			function_ = null;
    		} else if (options.throw === true) {
    			throw new Error(`Function \`${functionName}\` can only be called once`);
    		}

    		return returnValue;
    	};

    	mimicFn$3(onetime, function_);
    	calledFunctions$1.set(onetime, callCount);

    	return onetime;
    };

    onetime$5.exports = onetime$4;
    // TODO: Remove this for the next major release
    onetime$5.exports.default = onetime$4;

    onetime$5.exports.callCount = function_ => {
    	if (!calledFunctions$1.has(function_)) {
    		throw new Error(`The given function \`${function_.name}\` is not wrapped by the \`onetime\` package`);
    	}

    	return calledFunctions$1.get(function_);
    };

    var signalExit$2 = {exports: {}};

    var signals$1 = {exports: {}};

    (function (module) {
    // This is not the set of all possible signals.
    //
    // It IS, however, the set of all signals that trigger
    // an exit on either Linux or BSD systems.  Linux is a
    // superset of the signal names supported on BSD, and
    // the unknown signals just fail to register, so we can
    // catch that easily enough.
    //
    // Don't bother with SIGKILL.  It's uncatchable, which
    // means that we can't fire any callbacks anyway.
    //
    // If a user does happen to register a handler on a non-
    // fatal signal like SIGWINCH or something, and then
    // exit, it'll end up firing `process.emit('exit')`, so
    // the handler will be fired anyway.
    //
    // SIGBUS, SIGFPE, SIGSEGV and SIGILL, when not raised
    // artificially, inherently leave the process in a
    // state from which it is not safe to try and enter JS
    // listeners.
    module.exports = [
      'SIGABRT',
      'SIGALRM',
      'SIGHUP',
      'SIGINT',
      'SIGTERM'
    ];

    if (process.platform !== 'win32') {
      module.exports.push(
        'SIGVTALRM',
        'SIGXCPU',
        'SIGXFSZ',
        'SIGUSR2',
        'SIGTRAP',
        'SIGSYS',
        'SIGQUIT',
        'SIGIOT'
        // should detect profiler and enable/disable accordingly.
        // see #21
        // 'SIGPROF'
      );
    }

    if (process.platform === 'linux') {
      module.exports.push(
        'SIGIO',
        'SIGPOLL',
        'SIGPWR',
        'SIGSTKFLT',
        'SIGUNUSED'
      );
    }
    }(signals$1));

    // Note: since nyc uses this module to output coverage, any lines
    // that are in the direct sync flow of nyc's outputCoverage are
    // ignored, since we can never get coverage for them.
    // grab a reference to node's real process object right away
    var process$2 = commonjsGlobal.process;

    const processOk = function (process) {
      return process &&
        typeof process === 'object' &&
        typeof process.removeListener === 'function' &&
        typeof process.emit === 'function' &&
        typeof process.reallyExit === 'function' &&
        typeof process.listeners === 'function' &&
        typeof process.kill === 'function' &&
        typeof process.pid === 'number' &&
        typeof process.on === 'function'
    };

    // some kind of non-node environment, just no-op
    /* istanbul ignore if */
    if (!processOk(process$2)) {
      signalExit$2.exports = function () {};
    } else {
      var assert$5 = require$$0__default$4["default"];
      var signals = signals$1.exports;
      var isWin = /^win/i.test(process$2.platform);

      var EE$1 = require$$2__default["default"];
      /* istanbul ignore if */
      if (typeof EE$1 !== 'function') {
        EE$1 = EE$1.EventEmitter;
      }

      var emitter;
      if (process$2.__signal_exit_emitter__) {
        emitter = process$2.__signal_exit_emitter__;
      } else {
        emitter = process$2.__signal_exit_emitter__ = new EE$1();
        emitter.count = 0;
        emitter.emitted = {};
      }

      // Because this emitter is a global, we have to check to see if a
      // previous version of this library failed to enable infinite listeners.
      // I know what you're about to say.  But literally everything about
      // signal-exit is a compromise with evil.  Get used to it.
      if (!emitter.infinite) {
        emitter.setMaxListeners(Infinity);
        emitter.infinite = true;
      }

      signalExit$2.exports = function (cb, opts) {
        /* istanbul ignore if */
        if (!processOk(commonjsGlobal.process)) {
          return
        }
        assert$5.equal(typeof cb, 'function', 'a callback must be provided for exit handler');

        if (loaded === false) {
          load();
        }

        var ev = 'exit';
        if (opts && opts.alwaysLast) {
          ev = 'afterexit';
        }

        var remove = function () {
          emitter.removeListener(ev, cb);
          if (emitter.listeners('exit').length === 0 &&
              emitter.listeners('afterexit').length === 0) {
            unload();
          }
        };
        emitter.on(ev, cb);

        return remove
      };

      var unload = function unload () {
        if (!loaded || !processOk(commonjsGlobal.process)) {
          return
        }
        loaded = false;

        signals.forEach(function (sig) {
          try {
            process$2.removeListener(sig, sigListeners[sig]);
          } catch (er) {}
        });
        process$2.emit = originalProcessEmit;
        process$2.reallyExit = originalProcessReallyExit;
        emitter.count -= 1;
      };
      signalExit$2.exports.unload = unload;

      var emit = function emit (event, code, signal) {
        /* istanbul ignore if */
        if (emitter.emitted[event]) {
          return
        }
        emitter.emitted[event] = true;
        emitter.emit(event, code, signal);
      };

      // { <signal>: <listener fn>, ... }
      var sigListeners = {};
      signals.forEach(function (sig) {
        sigListeners[sig] = function listener () {
          /* istanbul ignore if */
          if (!processOk(commonjsGlobal.process)) {
            return
          }
          // If there are no other listeners, an exit is coming!
          // Simplest way: remove us and then re-send the signal.
          // We know that this will kill the process, so we can
          // safely emit now.
          var listeners = process$2.listeners(sig);
          if (listeners.length === emitter.count) {
            unload();
            emit('exit', null, sig);
            /* istanbul ignore next */
            emit('afterexit', null, sig);
            /* istanbul ignore next */
            if (isWin && sig === 'SIGHUP') {
              // "SIGHUP" throws an `ENOSYS` error on Windows,
              // so use a supported signal instead
              sig = 'SIGINT';
            }
            /* istanbul ignore next */
            process$2.kill(process$2.pid, sig);
          }
        };
      });

      signalExit$2.exports.signals = function () {
        return signals
      };

      var loaded = false;

      var load = function load () {
        if (loaded || !processOk(commonjsGlobal.process)) {
          return
        }
        loaded = true;

        // This is the number of onSignalExit's that are in play.
        // It's important so that we can count the correct number of
        // listeners on signals, and don't wait for the other one to
        // handle it instead of us.
        emitter.count += 1;

        signals = signals.filter(function (sig) {
          try {
            process$2.on(sig, sigListeners[sig]);
            return true
          } catch (er) {
            return false
          }
        });

        process$2.emit = processEmit;
        process$2.reallyExit = processReallyExit;
      };
      signalExit$2.exports.load = load;

      var originalProcessReallyExit = process$2.reallyExit;
      var processReallyExit = function processReallyExit (code) {
        /* istanbul ignore if */
        if (!processOk(commonjsGlobal.process)) {
          return
        }
        process$2.exitCode = code || /* istanbul ignore next */ 0;
        emit('exit', process$2.exitCode, null);
        /* istanbul ignore next */
        emit('afterexit', process$2.exitCode, null);
        /* istanbul ignore next */
        originalProcessReallyExit.call(process$2, process$2.exitCode);
      };

      var originalProcessEmit = process$2.emit;
      var processEmit = function processEmit (ev, arg) {
        if (ev === 'exit' && processOk(commonjsGlobal.process)) {
          /* istanbul ignore else */
          if (arg !== undefined) {
            process$2.exitCode = arg;
          }
          var ret = originalProcessEmit.apply(this, arguments);
          /* istanbul ignore next */
          emit('exit', process$2.exitCode, null);
          /* istanbul ignore next */
          emit('afterexit', process$2.exitCode, null);
          /* istanbul ignore next */
          return ret
        } else {
          return originalProcessEmit.apply(this, arguments)
        }
      };
    }

    const onetime$3 = onetime$5.exports;
    const signalExit$1 = signalExit$2.exports;

    var restoreCursor$1 = onetime$3(() => {
    	signalExit$1(() => {
    		process.stderr.write('\u001B[?25h');
    	}, {alwaysLast: true});
    });

    (function (exports) {
    const restoreCursor = restoreCursor$1;

    let isHidden = false;

    exports.show = (writableStream = process.stderr) => {
    	if (!writableStream.isTTY) {
    		return;
    	}

    	isHidden = false;
    	writableStream.write('\u001B[?25h');
    };

    exports.hide = (writableStream = process.stderr) => {
    	if (!writableStream.isTTY) {
    		return;
    	}

    	restoreCursor();
    	isHidden = true;
    	writableStream.write('\u001B[?25l');
    };

    exports.toggle = (force, writableStream) => {
    	if (force !== undefined) {
    		isHidden = force;
    	}

    	if (isHidden) {
    		exports.show(writableStream);
    	} else {
    		exports.hide(writableStream);
    	}
    };
    }(cliCursor$7));

    var assignValue$5 = _assignValue$1,
        copyObject$8 = _copyObject$1,
        createAssigner$3 = _createAssigner$1,
        isArrayLike$c = isArrayLike_1$1,
        isPrototype$5 = _isPrototype$1,
        keys$b = keys_1$1;

    /** Used for built-in method references. */
    var objectProto$k = Object.prototype;

    /** Used to check objects for own properties. */
    var hasOwnProperty$g = objectProto$k.hasOwnProperty;

    /**
     * Assigns own enumerable string keyed properties of source objects to the
     * destination object. Source objects are applied from left to right.
     * Subsequent sources overwrite property assignments of previous sources.
     *
     * **Note:** This method mutates `object` and is loosely based on
     * [`Object.assign`](https://mdn.io/Object/assign).
     *
     * @static
     * @memberOf _
     * @since 0.10.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.assignIn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * function Bar() {
     *   this.c = 3;
     * }
     *
     * Foo.prototype.b = 2;
     * Bar.prototype.d = 4;
     *
     * _.assign({ 'a': 0 }, new Foo, new Bar);
     * // => { 'a': 1, 'c': 3 }
     */
    var assign$1 = createAssigner$3(function(object, source) {
      if (isPrototype$5(source) || isArrayLike$c(source)) {
        copyObject$8(source, keys$b(source), object);
        return;
      }
      for (var key in source) {
        if (hasOwnProperty$g.call(source, key)) {
          assignValue$5(object, key, source[key]);
        }
      }
    });

    var assign_1$1 = assign$1;

    var baseRest$3 = _baseRest$1,
        eq$6 = eq_1$1,
        isIterateeCall$3 = _isIterateeCall$1,
        keysIn$6 = keysIn_1$1;

    /** Used for built-in method references. */
    var objectProto$j = Object.prototype;

    /** Used to check objects for own properties. */
    var hasOwnProperty$f = objectProto$j.hasOwnProperty;

    /**
     * Assigns own and inherited enumerable string keyed properties of source
     * objects to the destination object for all destination properties that
     * resolve to `undefined`. Source objects are applied from left to right.
     * Once a property is set, additional values of the same property are ignored.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.defaultsDeep
     * @example
     *
     * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var defaults$b = baseRest$3(function(object, sources) {
      object = Object(object);

      var index = -1;
      var length = sources.length;
      var guard = length > 2 ? sources[2] : undefined;

      if (guard && isIterateeCall$3(sources[0], sources[1], guard)) {
        length = 1;
      }

      while (++index < length) {
        var source = sources[index];
        var props = keysIn$6(source);
        var propsIndex = -1;
        var propsLength = props.length;

        while (++propsIndex < propsLength) {
          var key = props[propsIndex];
          var value = object[key];

          if (value === undefined ||
              (eq$6(value, objectProto$j[key]) && !hasOwnProperty$f.call(object, key))) {
            object[key] = source[key];
          }
        }
      }

      return object;
    });

    var defaults_1$2 = defaults$b;

    /**
     * Creates a base function for methods like `_.forIn` and `_.forOwn`.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */

    function createBaseFor$3(fromRight) {
      return function(object, iteratee, keysFunc) {
        var index = -1,
            iterable = Object(object),
            props = keysFunc(object),
            length = props.length;

        while (length--) {
          var key = props[fromRight ? length : ++index];
          if (iteratee(iterable[key], key, iterable) === false) {
            break;
          }
        }
        return object;
      };
    }

    var _createBaseFor$1 = createBaseFor$3;

    var createBaseFor$2 = _createBaseFor$1;

    /**
     * The base implementation of `baseForOwn` which iterates over `object`
     * properties returned by `keysFunc` and invokes `iteratee` for each property.
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */
    var baseFor$3 = createBaseFor$2();

    var _baseFor$1 = baseFor$3;

    var baseFor$2 = _baseFor$1,
        keys$a = keys_1$1;

    /**
     * The base implementation of `_.forOwn` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForOwn$3(object, iteratee) {
      return object && baseFor$2(object, iteratee, keys$a);
    }

    var _baseForOwn$1 = baseForOwn$3;

    var isArrayLike$b = isArrayLike_1$1;

    /**
     * Creates a `baseEach` or `baseEachRight` function.
     *
     * @private
     * @param {Function} eachFunc The function to iterate over a collection.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */
    function createBaseEach$3(eachFunc, fromRight) {
      return function(collection, iteratee) {
        if (collection == null) {
          return collection;
        }
        if (!isArrayLike$b(collection)) {
          return eachFunc(collection, iteratee);
        }
        var length = collection.length,
            index = fromRight ? length : -1,
            iterable = Object(collection);

        while ((fromRight ? index-- : ++index < length)) {
          if (iteratee(iterable[index], index, iterable) === false) {
            break;
          }
        }
        return collection;
      };
    }

    var _createBaseEach$1 = createBaseEach$3;

    var baseForOwn$2 = _baseForOwn$1,
        createBaseEach$2 = _createBaseEach$1;

    /**
     * The base implementation of `_.forEach` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     */
    var baseEach$5 = createBaseEach$2(baseForOwn$2);

    var _baseEach$1 = baseEach$5;

    var baseEach$4 = _baseEach$1;

    /**
     * The base implementation of `_.filter` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     */
    function baseFilter$3(collection, predicate) {
      var result = [];
      baseEach$4(collection, function(value, index, collection) {
        if (predicate(value, index, collection)) {
          result.push(value);
        }
      });
      return result;
    }

    var _baseFilter$1 = baseFilter$3;

    var arrayFilter$3 = _arrayFilter$1,
        baseFilter$2 = _baseFilter$1,
        baseIteratee$7 = _baseIteratee$1,
        isArray$l = isArray_1$1;

    /**
     * Iterates over elements of `collection`, returning an array of all elements
     * `predicate` returns truthy for. The predicate is invoked with three
     * arguments: (value, index|key, collection).
     *
     * **Note:** Unlike `_.remove`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     * @see _.reject
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * _.filter(users, function(o) { return !o.active; });
     * // => objects for ['fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.filter(users, { 'age': 36, 'active': true });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.filter(users, ['active', false]);
     * // => objects for ['fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.filter(users, 'active');
     * // => objects for ['barney']
     *
     * // Combining several predicates using `_.overEvery` or `_.overSome`.
     * _.filter(users, _.overSome([{ 'age': 36 }, ['age', 40]]));
     * // => objects for ['fred', 'barney']
     */
    function filter$8(collection, predicate) {
      var func = isArray$l(collection) ? arrayFilter$3 : baseFilter$2;
      return func(collection, baseIteratee$7(predicate));
    }

    var filter_1$1 = filter$8;

    var baseEach$3 = _baseEach$1,
        isArrayLike$a = isArrayLike_1$1;

    /**
     * The base implementation of `_.map` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     */
    function baseMap$3(collection, iteratee) {
      var index = -1,
          result = isArrayLike$a(collection) ? Array(collection.length) : [];

      baseEach$3(collection, function(value, key, collection) {
        result[++index] = iteratee(value, key, collection);
      });
      return result;
    }

    var _baseMap$1 = baseMap$3;

    var arrayMap$4 = _arrayMap$1,
        baseIteratee$6 = _baseIteratee$1,
        baseMap$2 = _baseMap$1,
        isArray$k = isArray_1$1;

    /**
     * Creates an array of values by running each element in `collection` thru
     * `iteratee`. The iteratee is invoked with three arguments:
     * (value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
     *
     * The guarded methods are:
     * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
     * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
     * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
     * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * _.map([4, 8], square);
     * // => [16, 64]
     *
     * _.map({ 'a': 4, 'b': 8 }, square);
     * // => [16, 64] (iteration order is not guaranteed)
     *
     * var users = [
     *   { 'user': 'barney' },
     *   { 'user': 'fred' }
     * ];
     *
     * // The `_.property` iteratee shorthand.
     * _.map(users, 'user');
     * // => ['barney', 'fred']
     */
    function map$g(collection, iteratee) {
      var func = isArray$k(collection) ? arrayMap$4 : baseMap$2;
      return func(collection, baseIteratee$6(iteratee));
    }

    var map_1$1 = map$g;

    var baseIteratee$5 = _baseIteratee$1,
        isArrayLike$9 = isArrayLike_1$1,
        keys$9 = keys_1$1;

    /**
     * Creates a `_.find` or `_.findLast` function.
     *
     * @private
     * @param {Function} findIndexFunc The function to find the collection index.
     * @returns {Function} Returns the new find function.
     */
    function createFind$4(findIndexFunc) {
      return function(collection, predicate, fromIndex) {
        var iterable = Object(collection);
        if (!isArrayLike$9(collection)) {
          var iteratee = baseIteratee$5(predicate);
          collection = keys$9(collection);
          predicate = function(key) { return iteratee(iterable[key], key, iterable); };
        }
        var index = findIndexFunc(collection, predicate, fromIndex);
        return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;
      };
    }

    var _createFind$1 = createFind$4;

    var createFind$3 = _createFind$1,
        findIndex$3 = findIndex_1$1;

    /**
     * Iterates over elements of `collection`, returning the first element
     * `predicate` returns truthy for. The predicate is invoked with three
     * arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': true },
     *   { 'user': 'fred',    'age': 40, 'active': false },
     *   { 'user': 'pebbles', 'age': 1,  'active': true }
     * ];
     *
     * _.find(users, function(o) { return o.age < 40; });
     * // => object for 'barney'
     *
     * // The `_.matches` iteratee shorthand.
     * _.find(users, { 'age': 1, 'active': true });
     * // => object for 'pebbles'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.find(users, ['active', false]);
     * // => object for 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.find(users, 'active');
     * // => object for 'barney'
     */
    var find$2 = createFind$3(findIndex$3);

    var find_1$1 = find$2;

    const _$n = {
      isString: isString_1$1,
      isNumber: isNumber_1$1,
      extend: extend$3,
      isFunction: isFunction_1$1,
    };

    /**
     * Choice object
     * Normalize input as choice object
     * @constructor
     * @param {Number|String|Object} val  Choice value. If an object is passed, it should contains
     *                                    at least one of `value` or `name` property
     */

    var choice$1 = class Choice {
      constructor(val, answers) {
        // Don't process Choice and Separator object
        if (val instanceof Choice || val.type === 'separator') {
          // eslint-disable-next-line no-constructor-return
          return val;
        }

        if (_$n.isString(val) || _$n.isNumber(val)) {
          this.name = String(val);
          this.value = val;
          this.short = String(val);
        } else {
          _$n.extend(this, val, {
            name: val.name || val.value,
            value: 'value' in val ? val.value : val.name,
            short: val.short || val.name || val.value,
          });
        }

        if (_$n.isFunction(val.disabled)) {
          this.disabled = val.disabled(answers);
        } else {
          this.disabled = val.disabled;
        }
      }
    };

    const assert$4 = require$$0__default$4["default"];
    const _$m = {
      isNumber: isNumber_1$1,
      filter: filter_1$1,
      map: map_1$1,
      find: find_1$1,
    };
    const Separator$6 = separator$1;
    const Choice$1 = choice$1;

    /**
     * Choices collection
     * Collection of multiple `choice` object
     * @constructor
     * @param {Array} choices  All `choice` to keep in the collection
     */

    var choices$1 = class Choices {
      constructor(choices, answers) {
        this.choices = choices.map((val) => {
          if (val.type === 'separator') {
            if (!(val instanceof Separator$6)) {
              val = new Separator$6(val.line);
            }

            return val;
          }

          return new Choice$1(val, answers);
        });

        this.realChoices = this.choices
          .filter(Separator$6.exclude)
          .filter((item) => !item.disabled);

        Object.defineProperty(this, 'length', {
          get() {
            return this.choices.length;
          },
          set(val) {
            this.choices.length = val;
          },
        });

        Object.defineProperty(this, 'realLength', {
          get() {
            return this.realChoices.length;
          },
          set() {
            throw new Error('Cannot set `realLength` of a Choices collection');
          },
        });
      }

      /**
       * Get a valid choice from the collection
       * @param  {Number} selector  The selected choice index
       * @return {Choice|Undefined} Return the matched choice or undefined
       */

      getChoice(selector) {
        assert$4(_$m.isNumber(selector));
        return this.realChoices[selector];
      }

      /**
       * Get a raw element from the collection
       * @param  {Number} selector  The selected index value
       * @return {Choice|Undefined} Return the matched choice or undefined
       */

      get(selector) {
        assert$4(_$m.isNumber(selector));
        return this.choices[selector];
      }

      /**
       * Match the valid choices against a where clause
       * @param  {Object} whereClause Lodash `where` clause
       * @return {Array}              Matching choices or empty array
       */

      where(whereClause) {
        return _$m.filter(this.realChoices, whereClause);
      }

      /**
       * Pluck a particular key from the choices
       * @param  {String} propertyName Property name to select
       * @return {Array}               Selected properties
       */

      pluck(propertyName) {
        return _$m.map(this.realChoices, propertyName);
      }

      // Expose usual Array methods
      indexOf(...args) {
        return this.choices.indexOf(...args);
      }

      forEach(...args) {
        return this.choices.forEach(...args);
      }

      filter(...args) {
        return this.choices.filter(...args);
      }

      reduce(...args) {
        return this.choices.reduce(...args);
      }

      find(func) {
        return _$m.find(this.choices, func);
      }

      push(...args) {
        const objs = _$m.map(args, (val) => new Choice$1(val));
        this.choices.push(...objs);
        this.realChoices = this.choices
          .filter(Separator$6.exclude)
          .filter((item) => !item.disabled);
        return this.choices;
      }
    };

    var cliWidth$3 = {exports: {}};

    (function (module, exports) {

    module.exports = cliWidth;

    function normalizeOpts(options) {
      let defaultOpts = {
        defaultWidth: 0,
        output: process.stdout,
        tty: require$$0__default$8["default"],
      };

      if (!options) {
        return defaultOpts;
      }

      Object.keys(defaultOpts).forEach(function (key) {
        if (!options[key]) {
          options[key] = defaultOpts[key];
        }
      });

      return options;
    }

    function cliWidth(options) {
      let opts = normalizeOpts(options);

      if (opts.output.getWindowSize) {
        return opts.output.getWindowSize()[0] || opts.defaultWidth;
      }

      if (opts.tty.getWindowSize) {
        return opts.tty.getWindowSize()[1] || opts.defaultWidth;
      }

      if (opts.output.columns) {
        return opts.output.columns;
      }

      if (process.env.CLI_WIDTH) {
        let width = parseInt(process.env.CLI_WIDTH, 10);

        if (!isNaN(width) && width !== 0) {
          return width;
        }
      }

      return opts.defaultWidth;
    }
    }(cliWidth$3));

    var ansiRegex$3 = ({onlyFirst = false} = {}) => {
    	const pattern = [
    		'[\\u001B\\u009B][[\\]()#;?]*(?:(?:(?:(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]+)*|[a-zA-Z\\d]+(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]*)*)?\\u0007)',
    		'(?:(?:\\d{1,4}(?:;\\d{0,4})*)?[\\dA-PR-TZcf-ntqry=><~]))'
    	].join('|');

    	return new RegExp(pattern, onlyFirst ? undefined : 'g');
    };

    const ansiRegex$2 = ansiRegex$3;

    var stripAnsi$7 = string => typeof string === 'string' ? string.replace(ansiRegex$2(), '') : string;

    var stringWidth$5 = {exports: {}};

    var isFullwidthCodePoint$5 = {exports: {}};

    /* eslint-disable yoda */

    const isFullwidthCodePoint$4 = codePoint => {
    	if (Number.isNaN(codePoint)) {
    		return false;
    	}

    	// Code points are derived from:
    	// http://www.unix.org/Public/UNIDATA/EastAsianWidth.txt
    	if (
    		codePoint >= 0x1100 && (
    			codePoint <= 0x115F || // Hangul Jamo
    			codePoint === 0x2329 || // LEFT-POINTING ANGLE BRACKET
    			codePoint === 0x232A || // RIGHT-POINTING ANGLE BRACKET
    			// CJK Radicals Supplement .. Enclosed CJK Letters and Months
    			(0x2E80 <= codePoint && codePoint <= 0x3247 && codePoint !== 0x303F) ||
    			// Enclosed CJK Letters and Months .. CJK Unified Ideographs Extension A
    			(0x3250 <= codePoint && codePoint <= 0x4DBF) ||
    			// CJK Unified Ideographs .. Yi Radicals
    			(0x4E00 <= codePoint && codePoint <= 0xA4C6) ||
    			// Hangul Jamo Extended-A
    			(0xA960 <= codePoint && codePoint <= 0xA97C) ||
    			// Hangul Syllables
    			(0xAC00 <= codePoint && codePoint <= 0xD7A3) ||
    			// CJK Compatibility Ideographs
    			(0xF900 <= codePoint && codePoint <= 0xFAFF) ||
    			// Vertical Forms
    			(0xFE10 <= codePoint && codePoint <= 0xFE19) ||
    			// CJK Compatibility Forms .. Small Form Variants
    			(0xFE30 <= codePoint && codePoint <= 0xFE6B) ||
    			// Halfwidth and Fullwidth Forms
    			(0xFF01 <= codePoint && codePoint <= 0xFF60) ||
    			(0xFFE0 <= codePoint && codePoint <= 0xFFE6) ||
    			// Kana Supplement
    			(0x1B000 <= codePoint && codePoint <= 0x1B001) ||
    			// Enclosed Ideographic Supplement
    			(0x1F200 <= codePoint && codePoint <= 0x1F251) ||
    			// CJK Unified Ideographs Extension B .. Tertiary Ideographic Plane
    			(0x20000 <= codePoint && codePoint <= 0x3FFFD)
    		)
    	) {
    		return true;
    	}

    	return false;
    };

    isFullwidthCodePoint$5.exports = isFullwidthCodePoint$4;
    isFullwidthCodePoint$5.exports.default = isFullwidthCodePoint$4;

    var emojiRegex$3 = function () {
      // https://mths.be/emoji
      return /\uD83C\uDFF4\uDB40\uDC67\uDB40\uDC62(?:\uDB40\uDC65\uDB40\uDC6E\uDB40\uDC67|\uDB40\uDC73\uDB40\uDC63\uDB40\uDC74|\uDB40\uDC77\uDB40\uDC6C\uDB40\uDC73)\uDB40\uDC7F|\uD83D\uDC68(?:\uD83C\uDFFC\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68\uD83C\uDFFB|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFF\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFB-\uDFFE])|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFE\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFB-\uDFFD])|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFD\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFB\uDFFC])|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\u200D(?:\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D)?\uD83D\uDC68|(?:\uD83D[\uDC68\uDC69])\u200D(?:\uD83D\uDC66\u200D\uD83D\uDC66|\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67]))|\uD83D\uDC66\u200D\uD83D\uDC66|\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67])|(?:\uD83D[\uDC68\uDC69])\u200D(?:\uD83D[\uDC66\uDC67])|[\u2695\u2696\u2708]\uFE0F|\uD83D[\uDC66\uDC67]|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|(?:\uD83C\uDFFB\u200D[\u2695\u2696\u2708]|\uD83C\uDFFF\u200D[\u2695\u2696\u2708]|\uD83C\uDFFE\u200D[\u2695\u2696\u2708]|\uD83C\uDFFD\u200D[\u2695\u2696\u2708]|\uD83C\uDFFC\u200D[\u2695\u2696\u2708])\uFE0F|\uD83C\uDFFB\u200D(?:\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C[\uDFFB-\uDFFF])|(?:\uD83E\uDDD1\uD83C\uDFFB\u200D\uD83E\uDD1D\u200D\uD83E\uDDD1|\uD83D\uDC69\uD83C\uDFFC\u200D\uD83E\uDD1D\u200D\uD83D\uDC69)\uD83C\uDFFB|\uD83E\uDDD1(?:\uD83C\uDFFF\u200D\uD83E\uDD1D\u200D\uD83E\uDDD1(?:\uD83C[\uDFFB-\uDFFF])|\u200D\uD83E\uDD1D\u200D\uD83E\uDDD1)|(?:\uD83E\uDDD1\uD83C\uDFFE\u200D\uD83E\uDD1D\u200D\uD83E\uDDD1|\uD83D\uDC69\uD83C\uDFFF\u200D\uD83E\uDD1D\u200D(?:\uD83D[\uDC68\uDC69]))(?:\uD83C[\uDFFB-\uDFFE])|(?:\uD83E\uDDD1\uD83C\uDFFC\u200D\uD83E\uDD1D\u200D\uD83E\uDDD1|\uD83D\uDC69\uD83C\uDFFD\u200D\uD83E\uDD1D\u200D\uD83D\uDC69)(?:\uD83C[\uDFFB\uDFFC])|\uD83D\uDC69(?:\uD83C\uDFFE\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFB-\uDFFD\uDFFF])|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFC\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFB\uDFFD-\uDFFF])|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFB\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFC-\uDFFF])|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFD\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFB\uDFFC\uDFFE\uDFFF])|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\u200D(?:\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D(?:\uD83D[\uDC68\uDC69])|\uD83D[\uDC68\uDC69])|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFF\u200D(?:\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD]))|\uD83D\uDC69\u200D\uD83D\uDC69\u200D(?:\uD83D\uDC66\u200D\uD83D\uDC66|\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67]))|(?:\uD83E\uDDD1\uD83C\uDFFD\u200D\uD83E\uDD1D\u200D\uD83E\uDDD1|\uD83D\uDC69\uD83C\uDFFE\u200D\uD83E\uDD1D\u200D\uD83D\uDC69)(?:\uD83C[\uDFFB-\uDFFD])|\uD83D\uDC69\u200D\uD83D\uDC66\u200D\uD83D\uDC66|\uD83D\uDC69\u200D\uD83D\uDC69\u200D(?:\uD83D[\uDC66\uDC67])|(?:\uD83D\uDC41\uFE0F\u200D\uD83D\uDDE8|\uD83D\uDC69(?:\uD83C\uDFFF\u200D[\u2695\u2696\u2708]|\uD83C\uDFFE\u200D[\u2695\u2696\u2708]|\uD83C\uDFFC\u200D[\u2695\u2696\u2708]|\uD83C\uDFFB\u200D[\u2695\u2696\u2708]|\uD83C\uDFFD\u200D[\u2695\u2696\u2708]|\u200D[\u2695\u2696\u2708])|(?:(?:\u26F9|\uD83C[\uDFCB\uDFCC]|\uD83D\uDD75)\uFE0F|\uD83D\uDC6F|\uD83E[\uDD3C\uDDDE\uDDDF])\u200D[\u2640\u2642]|(?:\u26F9|\uD83C[\uDFCB\uDFCC]|\uD83D\uDD75)(?:\uD83C[\uDFFB-\uDFFF])\u200D[\u2640\u2642]|(?:\uD83C[\uDFC3\uDFC4\uDFCA]|\uD83D[\uDC6E\uDC71\uDC73\uDC77\uDC81\uDC82\uDC86\uDC87\uDE45-\uDE47\uDE4B\uDE4D\uDE4E\uDEA3\uDEB4-\uDEB6]|\uD83E[\uDD26\uDD37-\uDD39\uDD3D\uDD3E\uDDB8\uDDB9\uDDCD-\uDDCF\uDDD6-\uDDDD])(?:(?:\uD83C[\uDFFB-\uDFFF])\u200D[\u2640\u2642]|\u200D[\u2640\u2642])|\uD83C\uDFF4\u200D\u2620)\uFE0F|\uD83D\uDC69\u200D\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67])|\uD83C\uDFF3\uFE0F\u200D\uD83C\uDF08|\uD83D\uDC15\u200D\uD83E\uDDBA|\uD83D\uDC69\u200D\uD83D\uDC66|\uD83D\uDC69\u200D\uD83D\uDC67|\uD83C\uDDFD\uD83C\uDDF0|\uD83C\uDDF4\uD83C\uDDF2|\uD83C\uDDF6\uD83C\uDDE6|[#\*0-9]\uFE0F\u20E3|\uD83C\uDDE7(?:\uD83C[\uDDE6\uDDE7\uDDE9-\uDDEF\uDDF1-\uDDF4\uDDF6-\uDDF9\uDDFB\uDDFC\uDDFE\uDDFF])|\uD83C\uDDF9(?:\uD83C[\uDDE6\uDDE8\uDDE9\uDDEB-\uDDED\uDDEF-\uDDF4\uDDF7\uDDF9\uDDFB\uDDFC\uDDFF])|\uD83C\uDDEA(?:\uD83C[\uDDE6\uDDE8\uDDEA\uDDEC\uDDED\uDDF7-\uDDFA])|\uD83E\uDDD1(?:\uD83C[\uDFFB-\uDFFF])|\uD83C\uDDF7(?:\uD83C[\uDDEA\uDDF4\uDDF8\uDDFA\uDDFC])|\uD83D\uDC69(?:\uD83C[\uDFFB-\uDFFF])|\uD83C\uDDF2(?:\uD83C[\uDDE6\uDDE8-\uDDED\uDDF0-\uDDFF])|\uD83C\uDDE6(?:\uD83C[\uDDE8-\uDDEC\uDDEE\uDDF1\uDDF2\uDDF4\uDDF6-\uDDFA\uDDFC\uDDFD\uDDFF])|\uD83C\uDDF0(?:\uD83C[\uDDEA\uDDEC-\uDDEE\uDDF2\uDDF3\uDDF5\uDDF7\uDDFC\uDDFE\uDDFF])|\uD83C\uDDED(?:\uD83C[\uDDF0\uDDF2\uDDF3\uDDF7\uDDF9\uDDFA])|\uD83C\uDDE9(?:\uD83C[\uDDEA\uDDEC\uDDEF\uDDF0\uDDF2\uDDF4\uDDFF])|\uD83C\uDDFE(?:\uD83C[\uDDEA\uDDF9])|\uD83C\uDDEC(?:\uD83C[\uDDE6\uDDE7\uDDE9-\uDDEE\uDDF1-\uDDF3\uDDF5-\uDDFA\uDDFC\uDDFE])|\uD83C\uDDF8(?:\uD83C[\uDDE6-\uDDEA\uDDEC-\uDDF4\uDDF7-\uDDF9\uDDFB\uDDFD-\uDDFF])|\uD83C\uDDEB(?:\uD83C[\uDDEE-\uDDF0\uDDF2\uDDF4\uDDF7])|\uD83C\uDDF5(?:\uD83C[\uDDE6\uDDEA-\uDDED\uDDF0-\uDDF3\uDDF7-\uDDF9\uDDFC\uDDFE])|\uD83C\uDDFB(?:\uD83C[\uDDE6\uDDE8\uDDEA\uDDEC\uDDEE\uDDF3\uDDFA])|\uD83C\uDDF3(?:\uD83C[\uDDE6\uDDE8\uDDEA-\uDDEC\uDDEE\uDDF1\uDDF4\uDDF5\uDDF7\uDDFA\uDDFF])|\uD83C\uDDE8(?:\uD83C[\uDDE6\uDDE8\uDDE9\uDDEB-\uDDEE\uDDF0-\uDDF5\uDDF7\uDDFA-\uDDFF])|\uD83C\uDDF1(?:\uD83C[\uDDE6-\uDDE8\uDDEE\uDDF0\uDDF7-\uDDFB\uDDFE])|\uD83C\uDDFF(?:\uD83C[\uDDE6\uDDF2\uDDFC])|\uD83C\uDDFC(?:\uD83C[\uDDEB\uDDF8])|\uD83C\uDDFA(?:\uD83C[\uDDE6\uDDEC\uDDF2\uDDF3\uDDF8\uDDFE\uDDFF])|\uD83C\uDDEE(?:\uD83C[\uDDE8-\uDDEA\uDDF1-\uDDF4\uDDF6-\uDDF9])|\uD83C\uDDEF(?:\uD83C[\uDDEA\uDDF2\uDDF4\uDDF5])|(?:\uD83C[\uDFC3\uDFC4\uDFCA]|\uD83D[\uDC6E\uDC71\uDC73\uDC77\uDC81\uDC82\uDC86\uDC87\uDE45-\uDE47\uDE4B\uDE4D\uDE4E\uDEA3\uDEB4-\uDEB6]|\uD83E[\uDD26\uDD37-\uDD39\uDD3D\uDD3E\uDDB8\uDDB9\uDDCD-\uDDCF\uDDD6-\uDDDD])(?:\uD83C[\uDFFB-\uDFFF])|(?:\u26F9|\uD83C[\uDFCB\uDFCC]|\uD83D\uDD75)(?:\uD83C[\uDFFB-\uDFFF])|(?:[\u261D\u270A-\u270D]|\uD83C[\uDF85\uDFC2\uDFC7]|\uD83D[\uDC42\uDC43\uDC46-\uDC50\uDC66\uDC67\uDC6B-\uDC6D\uDC70\uDC72\uDC74-\uDC76\uDC78\uDC7C\uDC83\uDC85\uDCAA\uDD74\uDD7A\uDD90\uDD95\uDD96\uDE4C\uDE4F\uDEC0\uDECC]|\uD83E[\uDD0F\uDD18-\uDD1C\uDD1E\uDD1F\uDD30-\uDD36\uDDB5\uDDB6\uDDBB\uDDD2-\uDDD5])(?:\uD83C[\uDFFB-\uDFFF])|(?:[\u231A\u231B\u23E9-\u23EC\u23F0\u23F3\u25FD\u25FE\u2614\u2615\u2648-\u2653\u267F\u2693\u26A1\u26AA\u26AB\u26BD\u26BE\u26C4\u26C5\u26CE\u26D4\u26EA\u26F2\u26F3\u26F5\u26FA\u26FD\u2705\u270A\u270B\u2728\u274C\u274E\u2753-\u2755\u2757\u2795-\u2797\u27B0\u27BF\u2B1B\u2B1C\u2B50\u2B55]|\uD83C[\uDC04\uDCCF\uDD8E\uDD91-\uDD9A\uDDE6-\uDDFF\uDE01\uDE1A\uDE2F\uDE32-\uDE36\uDE38-\uDE3A\uDE50\uDE51\uDF00-\uDF20\uDF2D-\uDF35\uDF37-\uDF7C\uDF7E-\uDF93\uDFA0-\uDFCA\uDFCF-\uDFD3\uDFE0-\uDFF0\uDFF4\uDFF8-\uDFFF]|\uD83D[\uDC00-\uDC3E\uDC40\uDC42-\uDCFC\uDCFF-\uDD3D\uDD4B-\uDD4E\uDD50-\uDD67\uDD7A\uDD95\uDD96\uDDA4\uDDFB-\uDE4F\uDE80-\uDEC5\uDECC\uDED0-\uDED2\uDED5\uDEEB\uDEEC\uDEF4-\uDEFA\uDFE0-\uDFEB]|\uD83E[\uDD0D-\uDD3A\uDD3C-\uDD45\uDD47-\uDD71\uDD73-\uDD76\uDD7A-\uDDA2\uDDA5-\uDDAA\uDDAE-\uDDCA\uDDCD-\uDDFF\uDE70-\uDE73\uDE78-\uDE7A\uDE80-\uDE82\uDE90-\uDE95])|(?:[#\*0-9\xA9\xAE\u203C\u2049\u2122\u2139\u2194-\u2199\u21A9\u21AA\u231A\u231B\u2328\u23CF\u23E9-\u23F3\u23F8-\u23FA\u24C2\u25AA\u25AB\u25B6\u25C0\u25FB-\u25FE\u2600-\u2604\u260E\u2611\u2614\u2615\u2618\u261D\u2620\u2622\u2623\u2626\u262A\u262E\u262F\u2638-\u263A\u2640\u2642\u2648-\u2653\u265F\u2660\u2663\u2665\u2666\u2668\u267B\u267E\u267F\u2692-\u2697\u2699\u269B\u269C\u26A0\u26A1\u26AA\u26AB\u26B0\u26B1\u26BD\u26BE\u26C4\u26C5\u26C8\u26CE\u26CF\u26D1\u26D3\u26D4\u26E9\u26EA\u26F0-\u26F5\u26F7-\u26FA\u26FD\u2702\u2705\u2708-\u270D\u270F\u2712\u2714\u2716\u271D\u2721\u2728\u2733\u2734\u2744\u2747\u274C\u274E\u2753-\u2755\u2757\u2763\u2764\u2795-\u2797\u27A1\u27B0\u27BF\u2934\u2935\u2B05-\u2B07\u2B1B\u2B1C\u2B50\u2B55\u3030\u303D\u3297\u3299]|\uD83C[\uDC04\uDCCF\uDD70\uDD71\uDD7E\uDD7F\uDD8E\uDD91-\uDD9A\uDDE6-\uDDFF\uDE01\uDE02\uDE1A\uDE2F\uDE32-\uDE3A\uDE50\uDE51\uDF00-\uDF21\uDF24-\uDF93\uDF96\uDF97\uDF99-\uDF9B\uDF9E-\uDFF0\uDFF3-\uDFF5\uDFF7-\uDFFF]|\uD83D[\uDC00-\uDCFD\uDCFF-\uDD3D\uDD49-\uDD4E\uDD50-\uDD67\uDD6F\uDD70\uDD73-\uDD7A\uDD87\uDD8A-\uDD8D\uDD90\uDD95\uDD96\uDDA4\uDDA5\uDDA8\uDDB1\uDDB2\uDDBC\uDDC2-\uDDC4\uDDD1-\uDDD3\uDDDC-\uDDDE\uDDE1\uDDE3\uDDE8\uDDEF\uDDF3\uDDFA-\uDE4F\uDE80-\uDEC5\uDECB-\uDED2\uDED5\uDEE0-\uDEE5\uDEE9\uDEEB\uDEEC\uDEF0\uDEF3-\uDEFA\uDFE0-\uDFEB]|\uD83E[\uDD0D-\uDD3A\uDD3C-\uDD45\uDD47-\uDD71\uDD73-\uDD76\uDD7A-\uDDA2\uDDA5-\uDDAA\uDDAE-\uDDCA\uDDCD-\uDDFF\uDE70-\uDE73\uDE78-\uDE7A\uDE80-\uDE82\uDE90-\uDE95])\uFE0F|(?:[\u261D\u26F9\u270A-\u270D]|\uD83C[\uDF85\uDFC2-\uDFC4\uDFC7\uDFCA-\uDFCC]|\uD83D[\uDC42\uDC43\uDC46-\uDC50\uDC66-\uDC78\uDC7C\uDC81-\uDC83\uDC85-\uDC87\uDC8F\uDC91\uDCAA\uDD74\uDD75\uDD7A\uDD90\uDD95\uDD96\uDE45-\uDE47\uDE4B-\uDE4F\uDEA3\uDEB4-\uDEB6\uDEC0\uDECC]|\uD83E[\uDD0F\uDD18-\uDD1F\uDD26\uDD30-\uDD39\uDD3C-\uDD3E\uDDB5\uDDB6\uDDB8\uDDB9\uDDBB\uDDCD-\uDDCF\uDDD1-\uDDDD])/g;
    };

    const stripAnsi$6 = stripAnsi$7;
    const isFullwidthCodePoint$3 = isFullwidthCodePoint$5.exports;
    const emojiRegex$2 = emojiRegex$3;

    const stringWidth$4 = string => {
    	if (typeof string !== 'string' || string.length === 0) {
    		return 0;
    	}

    	string = stripAnsi$6(string);

    	if (string.length === 0) {
    		return 0;
    	}

    	string = string.replace(emojiRegex$2(), '  ');

    	let width = 0;

    	for (let i = 0; i < string.length; i++) {
    		const code = string.codePointAt(i);

    		// Ignore control characters
    		if (code <= 0x1F || (code >= 0x7F && code <= 0x9F)) {
    			continue;
    		}

    		// Ignore combining characters
    		if (code >= 0x300 && code <= 0x36F) {
    			continue;
    		}

    		// Surrogates
    		if (code > 0xFFFF) {
    			i++;
    		}

    		width += isFullwidthCodePoint$3(code) ? 2 : 1;
    	}

    	return width;
    };

    stringWidth$5.exports = stringWidth$4;
    // TODO: remove this in the next major version
    stringWidth$5.exports.default = stringWidth$4;

    var ora$3 = {exports: {}};

    var dots$1 = {
    	interval: 80,
    	frames: [
    		"⠋",
    		"⠙",
    		"⠹",
    		"⠸",
    		"⠼",
    		"⠴",
    		"⠦",
    		"⠧",
    		"⠇",
    		"⠏"
    	]
    };
    var dots2$1 = {
    	interval: 80,
    	frames: [
    		"⣾",
    		"⣽",
    		"⣻",
    		"⢿",
    		"⡿",
    		"⣟",
    		"⣯",
    		"⣷"
    	]
    };
    var dots3$1 = {
    	interval: 80,
    	frames: [
    		"⠋",
    		"⠙",
    		"⠚",
    		"⠞",
    		"⠖",
    		"⠦",
    		"⠴",
    		"⠲",
    		"⠳",
    		"⠓"
    	]
    };
    var dots4$1 = {
    	interval: 80,
    	frames: [
    		"⠄",
    		"⠆",
    		"⠇",
    		"⠋",
    		"⠙",
    		"⠸",
    		"⠰",
    		"⠠",
    		"⠰",
    		"⠸",
    		"⠙",
    		"⠋",
    		"⠇",
    		"⠆"
    	]
    };
    var dots5$1 = {
    	interval: 80,
    	frames: [
    		"⠋",
    		"⠙",
    		"⠚",
    		"⠒",
    		"⠂",
    		"⠂",
    		"⠒",
    		"⠲",
    		"⠴",
    		"⠦",
    		"⠖",
    		"⠒",
    		"⠐",
    		"⠐",
    		"⠒",
    		"⠓",
    		"⠋"
    	]
    };
    var dots6$1 = {
    	interval: 80,
    	frames: [
    		"⠁",
    		"⠉",
    		"⠙",
    		"⠚",
    		"⠒",
    		"⠂",
    		"⠂",
    		"⠒",
    		"⠲",
    		"⠴",
    		"⠤",
    		"⠄",
    		"⠄",
    		"⠤",
    		"⠴",
    		"⠲",
    		"⠒",
    		"⠂",
    		"⠂",
    		"⠒",
    		"⠚",
    		"⠙",
    		"⠉",
    		"⠁"
    	]
    };
    var dots7$1 = {
    	interval: 80,
    	frames: [
    		"⠈",
    		"⠉",
    		"⠋",
    		"⠓",
    		"⠒",
    		"⠐",
    		"⠐",
    		"⠒",
    		"⠖",
    		"⠦",
    		"⠤",
    		"⠠",
    		"⠠",
    		"⠤",
    		"⠦",
    		"⠖",
    		"⠒",
    		"⠐",
    		"⠐",
    		"⠒",
    		"⠓",
    		"⠋",
    		"⠉",
    		"⠈"
    	]
    };
    var dots8$1 = {
    	interval: 80,
    	frames: [
    		"⠁",
    		"⠁",
    		"⠉",
    		"⠙",
    		"⠚",
    		"⠒",
    		"⠂",
    		"⠂",
    		"⠒",
    		"⠲",
    		"⠴",
    		"⠤",
    		"⠄",
    		"⠄",
    		"⠤",
    		"⠠",
    		"⠠",
    		"⠤",
    		"⠦",
    		"⠖",
    		"⠒",
    		"⠐",
    		"⠐",
    		"⠒",
    		"⠓",
    		"⠋",
    		"⠉",
    		"⠈",
    		"⠈"
    	]
    };
    var dots9$1 = {
    	interval: 80,
    	frames: [
    		"⢹",
    		"⢺",
    		"⢼",
    		"⣸",
    		"⣇",
    		"⡧",
    		"⡗",
    		"⡏"
    	]
    };
    var dots10$1 = {
    	interval: 80,
    	frames: [
    		"⢄",
    		"⢂",
    		"⢁",
    		"⡁",
    		"⡈",
    		"⡐",
    		"⡠"
    	]
    };
    var dots11$1 = {
    	interval: 100,
    	frames: [
    		"⠁",
    		"⠂",
    		"⠄",
    		"⡀",
    		"⢀",
    		"⠠",
    		"⠐",
    		"⠈"
    	]
    };
    var dots12$1 = {
    	interval: 80,
    	frames: [
    		"⢀⠀",
    		"⡀⠀",
    		"⠄⠀",
    		"⢂⠀",
    		"⡂⠀",
    		"⠅⠀",
    		"⢃⠀",
    		"⡃⠀",
    		"⠍⠀",
    		"⢋⠀",
    		"⡋⠀",
    		"⠍⠁",
    		"⢋⠁",
    		"⡋⠁",
    		"⠍⠉",
    		"⠋⠉",
    		"⠋⠉",
    		"⠉⠙",
    		"⠉⠙",
    		"⠉⠩",
    		"⠈⢙",
    		"⠈⡙",
    		"⢈⠩",
    		"⡀⢙",
    		"⠄⡙",
    		"⢂⠩",
    		"⡂⢘",
    		"⠅⡘",
    		"⢃⠨",
    		"⡃⢐",
    		"⠍⡐",
    		"⢋⠠",
    		"⡋⢀",
    		"⠍⡁",
    		"⢋⠁",
    		"⡋⠁",
    		"⠍⠉",
    		"⠋⠉",
    		"⠋⠉",
    		"⠉⠙",
    		"⠉⠙",
    		"⠉⠩",
    		"⠈⢙",
    		"⠈⡙",
    		"⠈⠩",
    		"⠀⢙",
    		"⠀⡙",
    		"⠀⠩",
    		"⠀⢘",
    		"⠀⡘",
    		"⠀⠨",
    		"⠀⢐",
    		"⠀⡐",
    		"⠀⠠",
    		"⠀⢀",
    		"⠀⡀"
    	]
    };
    var dots8Bit$1 = {
    	interval: 80,
    	frames: [
    		"⠀",
    		"⠁",
    		"⠂",
    		"⠃",
    		"⠄",
    		"⠅",
    		"⠆",
    		"⠇",
    		"⡀",
    		"⡁",
    		"⡂",
    		"⡃",
    		"⡄",
    		"⡅",
    		"⡆",
    		"⡇",
    		"⠈",
    		"⠉",
    		"⠊",
    		"⠋",
    		"⠌",
    		"⠍",
    		"⠎",
    		"⠏",
    		"⡈",
    		"⡉",
    		"⡊",
    		"⡋",
    		"⡌",
    		"⡍",
    		"⡎",
    		"⡏",
    		"⠐",
    		"⠑",
    		"⠒",
    		"⠓",
    		"⠔",
    		"⠕",
    		"⠖",
    		"⠗",
    		"⡐",
    		"⡑",
    		"⡒",
    		"⡓",
    		"⡔",
    		"⡕",
    		"⡖",
    		"⡗",
    		"⠘",
    		"⠙",
    		"⠚",
    		"⠛",
    		"⠜",
    		"⠝",
    		"⠞",
    		"⠟",
    		"⡘",
    		"⡙",
    		"⡚",
    		"⡛",
    		"⡜",
    		"⡝",
    		"⡞",
    		"⡟",
    		"⠠",
    		"⠡",
    		"⠢",
    		"⠣",
    		"⠤",
    		"⠥",
    		"⠦",
    		"⠧",
    		"⡠",
    		"⡡",
    		"⡢",
    		"⡣",
    		"⡤",
    		"⡥",
    		"⡦",
    		"⡧",
    		"⠨",
    		"⠩",
    		"⠪",
    		"⠫",
    		"⠬",
    		"⠭",
    		"⠮",
    		"⠯",
    		"⡨",
    		"⡩",
    		"⡪",
    		"⡫",
    		"⡬",
    		"⡭",
    		"⡮",
    		"⡯",
    		"⠰",
    		"⠱",
    		"⠲",
    		"⠳",
    		"⠴",
    		"⠵",
    		"⠶",
    		"⠷",
    		"⡰",
    		"⡱",
    		"⡲",
    		"⡳",
    		"⡴",
    		"⡵",
    		"⡶",
    		"⡷",
    		"⠸",
    		"⠹",
    		"⠺",
    		"⠻",
    		"⠼",
    		"⠽",
    		"⠾",
    		"⠿",
    		"⡸",
    		"⡹",
    		"⡺",
    		"⡻",
    		"⡼",
    		"⡽",
    		"⡾",
    		"⡿",
    		"⢀",
    		"⢁",
    		"⢂",
    		"⢃",
    		"⢄",
    		"⢅",
    		"⢆",
    		"⢇",
    		"⣀",
    		"⣁",
    		"⣂",
    		"⣃",
    		"⣄",
    		"⣅",
    		"⣆",
    		"⣇",
    		"⢈",
    		"⢉",
    		"⢊",
    		"⢋",
    		"⢌",
    		"⢍",
    		"⢎",
    		"⢏",
    		"⣈",
    		"⣉",
    		"⣊",
    		"⣋",
    		"⣌",
    		"⣍",
    		"⣎",
    		"⣏",
    		"⢐",
    		"⢑",
    		"⢒",
    		"⢓",
    		"⢔",
    		"⢕",
    		"⢖",
    		"⢗",
    		"⣐",
    		"⣑",
    		"⣒",
    		"⣓",
    		"⣔",
    		"⣕",
    		"⣖",
    		"⣗",
    		"⢘",
    		"⢙",
    		"⢚",
    		"⢛",
    		"⢜",
    		"⢝",
    		"⢞",
    		"⢟",
    		"⣘",
    		"⣙",
    		"⣚",
    		"⣛",
    		"⣜",
    		"⣝",
    		"⣞",
    		"⣟",
    		"⢠",
    		"⢡",
    		"⢢",
    		"⢣",
    		"⢤",
    		"⢥",
    		"⢦",
    		"⢧",
    		"⣠",
    		"⣡",
    		"⣢",
    		"⣣",
    		"⣤",
    		"⣥",
    		"⣦",
    		"⣧",
    		"⢨",
    		"⢩",
    		"⢪",
    		"⢫",
    		"⢬",
    		"⢭",
    		"⢮",
    		"⢯",
    		"⣨",
    		"⣩",
    		"⣪",
    		"⣫",
    		"⣬",
    		"⣭",
    		"⣮",
    		"⣯",
    		"⢰",
    		"⢱",
    		"⢲",
    		"⢳",
    		"⢴",
    		"⢵",
    		"⢶",
    		"⢷",
    		"⣰",
    		"⣱",
    		"⣲",
    		"⣳",
    		"⣴",
    		"⣵",
    		"⣶",
    		"⣷",
    		"⢸",
    		"⢹",
    		"⢺",
    		"⢻",
    		"⢼",
    		"⢽",
    		"⢾",
    		"⢿",
    		"⣸",
    		"⣹",
    		"⣺",
    		"⣻",
    		"⣼",
    		"⣽",
    		"⣾",
    		"⣿"
    	]
    };
    var line$1 = {
    	interval: 130,
    	frames: [
    		"-",
    		"\\",
    		"|",
    		"/"
    	]
    };
    var line2$1 = {
    	interval: 100,
    	frames: [
    		"⠂",
    		"-",
    		"–",
    		"—",
    		"–",
    		"-"
    	]
    };
    var pipe$3 = {
    	interval: 100,
    	frames: [
    		"┤",
    		"┘",
    		"┴",
    		"└",
    		"├",
    		"┌",
    		"┬",
    		"┐"
    	]
    };
    var simpleDots$1 = {
    	interval: 400,
    	frames: [
    		".  ",
    		".. ",
    		"...",
    		"   "
    	]
    };
    var simpleDotsScrolling$1 = {
    	interval: 200,
    	frames: [
    		".  ",
    		".. ",
    		"...",
    		" ..",
    		"  .",
    		"   "
    	]
    };
    var star$2 = {
    	interval: 70,
    	frames: [
    		"✶",
    		"✸",
    		"✹",
    		"✺",
    		"✹",
    		"✷"
    	]
    };
    var star2$1 = {
    	interval: 80,
    	frames: [
    		"+",
    		"x",
    		"*"
    	]
    };
    var flip$1 = {
    	interval: 70,
    	frames: [
    		"_",
    		"_",
    		"_",
    		"-",
    		"`",
    		"`",
    		"'",
    		"´",
    		"-",
    		"_",
    		"_",
    		"_"
    	]
    };
    var hamburger$1 = {
    	interval: 100,
    	frames: [
    		"☱",
    		"☲",
    		"☴"
    	]
    };
    var growVertical$1 = {
    	interval: 120,
    	frames: [
    		"▁",
    		"▃",
    		"▄",
    		"▅",
    		"▆",
    		"▇",
    		"▆",
    		"▅",
    		"▄",
    		"▃"
    	]
    };
    var growHorizontal$1 = {
    	interval: 120,
    	frames: [
    		"▏",
    		"▎",
    		"▍",
    		"▌",
    		"▋",
    		"▊",
    		"▉",
    		"▊",
    		"▋",
    		"▌",
    		"▍",
    		"▎"
    	]
    };
    var balloon$1 = {
    	interval: 140,
    	frames: [
    		" ",
    		".",
    		"o",
    		"O",
    		"@",
    		"*",
    		" "
    	]
    };
    var balloon2$1 = {
    	interval: 120,
    	frames: [
    		".",
    		"o",
    		"O",
    		"°",
    		"O",
    		"o",
    		"."
    	]
    };
    var noise$1 = {
    	interval: 100,
    	frames: [
    		"▓",
    		"▒",
    		"░"
    	]
    };
    var bounce$1 = {
    	interval: 120,
    	frames: [
    		"⠁",
    		"⠂",
    		"⠄",
    		"⠂"
    	]
    };
    var boxBounce$1 = {
    	interval: 120,
    	frames: [
    		"▖",
    		"▘",
    		"▝",
    		"▗"
    	]
    };
    var boxBounce2$1 = {
    	interval: 100,
    	frames: [
    		"▌",
    		"▀",
    		"▐",
    		"▄"
    	]
    };
    var triangle$1 = {
    	interval: 50,
    	frames: [
    		"◢",
    		"◣",
    		"◤",
    		"◥"
    	]
    };
    var arc$1 = {
    	interval: 100,
    	frames: [
    		"◜",
    		"◠",
    		"◝",
    		"◞",
    		"◡",
    		"◟"
    	]
    };
    var circle$1 = {
    	interval: 120,
    	frames: [
    		"◡",
    		"⊙",
    		"◠"
    	]
    };
    var squareCorners$1 = {
    	interval: 180,
    	frames: [
    		"◰",
    		"◳",
    		"◲",
    		"◱"
    	]
    };
    var circleQuarters$1 = {
    	interval: 120,
    	frames: [
    		"◴",
    		"◷",
    		"◶",
    		"◵"
    	]
    };
    var circleHalves$1 = {
    	interval: 50,
    	frames: [
    		"◐",
    		"◓",
    		"◑",
    		"◒"
    	]
    };
    var squish$1 = {
    	interval: 100,
    	frames: [
    		"╫",
    		"╪"
    	]
    };
    var toggle$1 = {
    	interval: 250,
    	frames: [
    		"⊶",
    		"⊷"
    	]
    };
    var toggle2$1 = {
    	interval: 80,
    	frames: [
    		"▫",
    		"▪"
    	]
    };
    var toggle3$1 = {
    	interval: 120,
    	frames: [
    		"□",
    		"■"
    	]
    };
    var toggle4$1 = {
    	interval: 100,
    	frames: [
    		"■",
    		"□",
    		"▪",
    		"▫"
    	]
    };
    var toggle5$1 = {
    	interval: 100,
    	frames: [
    		"▮",
    		"▯"
    	]
    };
    var toggle6$1 = {
    	interval: 300,
    	frames: [
    		"ဝ",
    		"၀"
    	]
    };
    var toggle7$1 = {
    	interval: 80,
    	frames: [
    		"⦾",
    		"⦿"
    	]
    };
    var toggle8$1 = {
    	interval: 100,
    	frames: [
    		"◍",
    		"◌"
    	]
    };
    var toggle9$1 = {
    	interval: 100,
    	frames: [
    		"◉",
    		"◎"
    	]
    };
    var toggle10$1 = {
    	interval: 100,
    	frames: [
    		"㊂",
    		"㊀",
    		"㊁"
    	]
    };
    var toggle11$1 = {
    	interval: 50,
    	frames: [
    		"⧇",
    		"⧆"
    	]
    };
    var toggle12$1 = {
    	interval: 120,
    	frames: [
    		"☗",
    		"☖"
    	]
    };
    var toggle13$1 = {
    	interval: 80,
    	frames: [
    		"=",
    		"*",
    		"-"
    	]
    };
    var arrow$1 = {
    	interval: 100,
    	frames: [
    		"←",
    		"↖",
    		"↑",
    		"↗",
    		"→",
    		"↘",
    		"↓",
    		"↙"
    	]
    };
    var arrow2$1 = {
    	interval: 80,
    	frames: [
    		"⬆️ ",
    		"↗️ ",
    		"➡️ ",
    		"↘️ ",
    		"⬇️ ",
    		"↙️ ",
    		"⬅️ ",
    		"↖️ "
    	]
    };
    var arrow3$1 = {
    	interval: 120,
    	frames: [
    		"▹▹▹▹▹",
    		"▸▹▹▹▹",
    		"▹▸▹▹▹",
    		"▹▹▸▹▹",
    		"▹▹▹▸▹",
    		"▹▹▹▹▸"
    	]
    };
    var bouncingBar$1 = {
    	interval: 80,
    	frames: [
    		"[    ]",
    		"[=   ]",
    		"[==  ]",
    		"[=== ]",
    		"[ ===]",
    		"[  ==]",
    		"[   =]",
    		"[    ]",
    		"[   =]",
    		"[  ==]",
    		"[ ===]",
    		"[====]",
    		"[=== ]",
    		"[==  ]",
    		"[=   ]"
    	]
    };
    var bouncingBall$1 = {
    	interval: 80,
    	frames: [
    		"( ●    )",
    		"(  ●   )",
    		"(   ●  )",
    		"(    ● )",
    		"(     ●)",
    		"(    ● )",
    		"(   ●  )",
    		"(  ●   )",
    		"( ●    )",
    		"(●     )"
    	]
    };
    var smiley$1 = {
    	interval: 200,
    	frames: [
    		"😄 ",
    		"😝 "
    	]
    };
    var monkey$1 = {
    	interval: 300,
    	frames: [
    		"🙈 ",
    		"🙈 ",
    		"🙉 ",
    		"🙊 "
    	]
    };
    var hearts$1 = {
    	interval: 100,
    	frames: [
    		"💛 ",
    		"💙 ",
    		"💜 ",
    		"💚 ",
    		"❤️ "
    	]
    };
    var clock$1 = {
    	interval: 100,
    	frames: [
    		"🕛 ",
    		"🕐 ",
    		"🕑 ",
    		"🕒 ",
    		"🕓 ",
    		"🕔 ",
    		"🕕 ",
    		"🕖 ",
    		"🕗 ",
    		"🕘 ",
    		"🕙 ",
    		"🕚 "
    	]
    };
    var earth$1 = {
    	interval: 180,
    	frames: [
    		"🌍 ",
    		"🌎 ",
    		"🌏 "
    	]
    };
    var material$1 = {
    	interval: 17,
    	frames: [
    		"█▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁",
    		"██▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁",
    		"███▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁",
    		"████▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁",
    		"██████▁▁▁▁▁▁▁▁▁▁▁▁▁▁",
    		"██████▁▁▁▁▁▁▁▁▁▁▁▁▁▁",
    		"███████▁▁▁▁▁▁▁▁▁▁▁▁▁",
    		"████████▁▁▁▁▁▁▁▁▁▁▁▁",
    		"█████████▁▁▁▁▁▁▁▁▁▁▁",
    		"█████████▁▁▁▁▁▁▁▁▁▁▁",
    		"██████████▁▁▁▁▁▁▁▁▁▁",
    		"███████████▁▁▁▁▁▁▁▁▁",
    		"█████████████▁▁▁▁▁▁▁",
    		"██████████████▁▁▁▁▁▁",
    		"██████████████▁▁▁▁▁▁",
    		"▁██████████████▁▁▁▁▁",
    		"▁██████████████▁▁▁▁▁",
    		"▁██████████████▁▁▁▁▁",
    		"▁▁██████████████▁▁▁▁",
    		"▁▁▁██████████████▁▁▁",
    		"▁▁▁▁█████████████▁▁▁",
    		"▁▁▁▁██████████████▁▁",
    		"▁▁▁▁██████████████▁▁",
    		"▁▁▁▁▁██████████████▁",
    		"▁▁▁▁▁██████████████▁",
    		"▁▁▁▁▁██████████████▁",
    		"▁▁▁▁▁▁██████████████",
    		"▁▁▁▁▁▁██████████████",
    		"▁▁▁▁▁▁▁█████████████",
    		"▁▁▁▁▁▁▁█████████████",
    		"▁▁▁▁▁▁▁▁████████████",
    		"▁▁▁▁▁▁▁▁████████████",
    		"▁▁▁▁▁▁▁▁▁███████████",
    		"▁▁▁▁▁▁▁▁▁███████████",
    		"▁▁▁▁▁▁▁▁▁▁██████████",
    		"▁▁▁▁▁▁▁▁▁▁██████████",
    		"▁▁▁▁▁▁▁▁▁▁▁▁████████",
    		"▁▁▁▁▁▁▁▁▁▁▁▁▁███████",
    		"▁▁▁▁▁▁▁▁▁▁▁▁▁▁██████",
    		"▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁█████",
    		"▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁█████",
    		"█▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁████",
    		"██▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁███",
    		"██▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁███",
    		"███▁▁▁▁▁▁▁▁▁▁▁▁▁▁███",
    		"████▁▁▁▁▁▁▁▁▁▁▁▁▁▁██",
    		"█████▁▁▁▁▁▁▁▁▁▁▁▁▁▁█",
    		"█████▁▁▁▁▁▁▁▁▁▁▁▁▁▁█",
    		"██████▁▁▁▁▁▁▁▁▁▁▁▁▁█",
    		"████████▁▁▁▁▁▁▁▁▁▁▁▁",
    		"█████████▁▁▁▁▁▁▁▁▁▁▁",
    		"█████████▁▁▁▁▁▁▁▁▁▁▁",
    		"█████████▁▁▁▁▁▁▁▁▁▁▁",
    		"█████████▁▁▁▁▁▁▁▁▁▁▁",
    		"███████████▁▁▁▁▁▁▁▁▁",
    		"████████████▁▁▁▁▁▁▁▁",
    		"████████████▁▁▁▁▁▁▁▁",
    		"██████████████▁▁▁▁▁▁",
    		"██████████████▁▁▁▁▁▁",
    		"▁██████████████▁▁▁▁▁",
    		"▁██████████████▁▁▁▁▁",
    		"▁▁▁█████████████▁▁▁▁",
    		"▁▁▁▁▁████████████▁▁▁",
    		"▁▁▁▁▁████████████▁▁▁",
    		"▁▁▁▁▁▁███████████▁▁▁",
    		"▁▁▁▁▁▁▁▁█████████▁▁▁",
    		"▁▁▁▁▁▁▁▁█████████▁▁▁",
    		"▁▁▁▁▁▁▁▁▁█████████▁▁",
    		"▁▁▁▁▁▁▁▁▁█████████▁▁",
    		"▁▁▁▁▁▁▁▁▁▁█████████▁",
    		"▁▁▁▁▁▁▁▁▁▁▁████████▁",
    		"▁▁▁▁▁▁▁▁▁▁▁████████▁",
    		"▁▁▁▁▁▁▁▁▁▁▁▁███████▁",
    		"▁▁▁▁▁▁▁▁▁▁▁▁███████▁",
    		"▁▁▁▁▁▁▁▁▁▁▁▁▁███████",
    		"▁▁▁▁▁▁▁▁▁▁▁▁▁███████",
    		"▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁█████",
    		"▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁████",
    		"▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁████",
    		"▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁████",
    		"▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁███",
    		"▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁███",
    		"▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁██",
    		"▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁██",
    		"▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁██",
    		"▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁█",
    		"▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁█",
    		"▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁█",
    		"▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁",
    		"▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁",
    		"▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁",
    		"▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁"
    	]
    };
    var moon$1 = {
    	interval: 80,
    	frames: [
    		"🌑 ",
    		"🌒 ",
    		"🌓 ",
    		"🌔 ",
    		"🌕 ",
    		"🌖 ",
    		"🌗 ",
    		"🌘 "
    	]
    };
    var runner$1 = {
    	interval: 140,
    	frames: [
    		"🚶 ",
    		"🏃 "
    	]
    };
    var pong$1 = {
    	interval: 80,
    	frames: [
    		"▐⠂       ▌",
    		"▐⠈       ▌",
    		"▐ ⠂      ▌",
    		"▐ ⠠      ▌",
    		"▐  ⡀     ▌",
    		"▐  ⠠     ▌",
    		"▐   ⠂    ▌",
    		"▐   ⠈    ▌",
    		"▐    ⠂   ▌",
    		"▐    ⠠   ▌",
    		"▐     ⡀  ▌",
    		"▐     ⠠  ▌",
    		"▐      ⠂ ▌",
    		"▐      ⠈ ▌",
    		"▐       ⠂▌",
    		"▐       ⠠▌",
    		"▐       ⡀▌",
    		"▐      ⠠ ▌",
    		"▐      ⠂ ▌",
    		"▐     ⠈  ▌",
    		"▐     ⠂  ▌",
    		"▐    ⠠   ▌",
    		"▐    ⡀   ▌",
    		"▐   ⠠    ▌",
    		"▐   ⠂    ▌",
    		"▐  ⠈     ▌",
    		"▐  ⠂     ▌",
    		"▐ ⠠      ▌",
    		"▐ ⡀      ▌",
    		"▐⠠       ▌"
    	]
    };
    var shark$1 = {
    	interval: 120,
    	frames: [
    		"▐|\\____________▌",
    		"▐_|\\___________▌",
    		"▐__|\\__________▌",
    		"▐___|\\_________▌",
    		"▐____|\\________▌",
    		"▐_____|\\_______▌",
    		"▐______|\\______▌",
    		"▐_______|\\_____▌",
    		"▐________|\\____▌",
    		"▐_________|\\___▌",
    		"▐__________|\\__▌",
    		"▐___________|\\_▌",
    		"▐____________|\\▌",
    		"▐____________/|▌",
    		"▐___________/|_▌",
    		"▐__________/|__▌",
    		"▐_________/|___▌",
    		"▐________/|____▌",
    		"▐_______/|_____▌",
    		"▐______/|______▌",
    		"▐_____/|_______▌",
    		"▐____/|________▌",
    		"▐___/|_________▌",
    		"▐__/|__________▌",
    		"▐_/|___________▌",
    		"▐/|____________▌"
    	]
    };
    var dqpb$1 = {
    	interval: 100,
    	frames: [
    		"d",
    		"q",
    		"p",
    		"b"
    	]
    };
    var weather$1 = {
    	interval: 100,
    	frames: [
    		"☀️ ",
    		"☀️ ",
    		"☀️ ",
    		"🌤 ",
    		"⛅️ ",
    		"🌥 ",
    		"☁️ ",
    		"🌧 ",
    		"🌨 ",
    		"🌧 ",
    		"🌨 ",
    		"🌧 ",
    		"🌨 ",
    		"⛈ ",
    		"🌨 ",
    		"🌧 ",
    		"🌨 ",
    		"☁️ ",
    		"🌥 ",
    		"⛅️ ",
    		"🌤 ",
    		"☀️ ",
    		"☀️ "
    	]
    };
    var christmas$1 = {
    	interval: 400,
    	frames: [
    		"🌲",
    		"🎄"
    	]
    };
    var grenade$1 = {
    	interval: 80,
    	frames: [
    		"،  ",
    		"′  ",
    		" ´ ",
    		" ‾ ",
    		"  ⸌",
    		"  ⸊",
    		"  |",
    		"  ⁎",
    		"  ⁕",
    		" ෴ ",
    		"  ⁓",
    		"   ",
    		"   ",
    		"   "
    	]
    };
    var point$1 = {
    	interval: 125,
    	frames: [
    		"∙∙∙",
    		"●∙∙",
    		"∙●∙",
    		"∙∙●",
    		"∙∙∙"
    	]
    };
    var layer$1 = {
    	interval: 150,
    	frames: [
    		"-",
    		"=",
    		"≡"
    	]
    };
    var betaWave$1 = {
    	interval: 80,
    	frames: [
    		"ρββββββ",
    		"βρβββββ",
    		"ββρββββ",
    		"βββρβββ",
    		"ββββρββ",
    		"βββββρβ",
    		"ββββββρ"
    	]
    };
    var fingerDance$1 = {
    	interval: 160,
    	frames: [
    		"🤘 ",
    		"🤟 ",
    		"🖖 ",
    		"✋ ",
    		"🤚 ",
    		"👆 "
    	]
    };
    var fistBump$1 = {
    	interval: 80,
    	frames: [
    		"🤜　　　　🤛 ",
    		"🤜　　　　🤛 ",
    		"🤜　　　　🤛 ",
    		"　🤜　　🤛　 ",
    		"　　🤜🤛　　 ",
    		"　🤜✨🤛　　 ",
    		"🤜　✨　🤛　 "
    	]
    };
    var soccerHeader$1 = {
    	interval: 80,
    	frames: [
    		" 🧑⚽️       🧑 ",
    		"🧑  ⚽️      🧑 ",
    		"🧑   ⚽️     🧑 ",
    		"🧑    ⚽️    🧑 ",
    		"🧑     ⚽️   🧑 ",
    		"🧑      ⚽️  🧑 ",
    		"🧑       ⚽️🧑  ",
    		"🧑      ⚽️  🧑 ",
    		"🧑     ⚽️   🧑 ",
    		"🧑    ⚽️    🧑 ",
    		"🧑   ⚽️     🧑 ",
    		"🧑  ⚽️      🧑 "
    	]
    };
    var mindblown$1 = {
    	interval: 160,
    	frames: [
    		"😐 ",
    		"😐 ",
    		"😮 ",
    		"😮 ",
    		"😦 ",
    		"😦 ",
    		"😧 ",
    		"😧 ",
    		"🤯 ",
    		"💥 ",
    		"✨ ",
    		"　 ",
    		"　 ",
    		"　 "
    	]
    };
    var speaker$1 = {
    	interval: 160,
    	frames: [
    		"🔈 ",
    		"🔉 ",
    		"🔊 ",
    		"🔉 "
    	]
    };
    var orangePulse$1 = {
    	interval: 100,
    	frames: [
    		"🔸 ",
    		"🔶 ",
    		"🟠 ",
    		"🟠 ",
    		"🔶 "
    	]
    };
    var bluePulse$1 = {
    	interval: 100,
    	frames: [
    		"🔹 ",
    		"🔷 ",
    		"🔵 ",
    		"🔵 ",
    		"🔷 "
    	]
    };
    var orangeBluePulse$1 = {
    	interval: 100,
    	frames: [
    		"🔸 ",
    		"🔶 ",
    		"🟠 ",
    		"🟠 ",
    		"🔶 ",
    		"🔹 ",
    		"🔷 ",
    		"🔵 ",
    		"🔵 ",
    		"🔷 "
    	]
    };
    var timeTravel$1 = {
    	interval: 100,
    	frames: [
    		"🕛 ",
    		"🕚 ",
    		"🕙 ",
    		"🕘 ",
    		"🕗 ",
    		"🕖 ",
    		"🕕 ",
    		"🕔 ",
    		"🕓 ",
    		"🕒 ",
    		"🕑 ",
    		"🕐 "
    	]
    };
    var aesthetic$1 = {
    	interval: 80,
    	frames: [
    		"▰▱▱▱▱▱▱",
    		"▰▰▱▱▱▱▱",
    		"▰▰▰▱▱▱▱",
    		"▰▰▰▰▱▱▱",
    		"▰▰▰▰▰▱▱",
    		"▰▰▰▰▰▰▱",
    		"▰▰▰▰▰▰▰",
    		"▰▱▱▱▱▱▱"
    	]
    };
    var require$$0$3 = {
    	dots: dots$1,
    	dots2: dots2$1,
    	dots3: dots3$1,
    	dots4: dots4$1,
    	dots5: dots5$1,
    	dots6: dots6$1,
    	dots7: dots7$1,
    	dots8: dots8$1,
    	dots9: dots9$1,
    	dots10: dots10$1,
    	dots11: dots11$1,
    	dots12: dots12$1,
    	dots8Bit: dots8Bit$1,
    	line: line$1,
    	line2: line2$1,
    	pipe: pipe$3,
    	simpleDots: simpleDots$1,
    	simpleDotsScrolling: simpleDotsScrolling$1,
    	star: star$2,
    	star2: star2$1,
    	flip: flip$1,
    	hamburger: hamburger$1,
    	growVertical: growVertical$1,
    	growHorizontal: growHorizontal$1,
    	balloon: balloon$1,
    	balloon2: balloon2$1,
    	noise: noise$1,
    	bounce: bounce$1,
    	boxBounce: boxBounce$1,
    	boxBounce2: boxBounce2$1,
    	triangle: triangle$1,
    	arc: arc$1,
    	circle: circle$1,
    	squareCorners: squareCorners$1,
    	circleQuarters: circleQuarters$1,
    	circleHalves: circleHalves$1,
    	squish: squish$1,
    	toggle: toggle$1,
    	toggle2: toggle2$1,
    	toggle3: toggle3$1,
    	toggle4: toggle4$1,
    	toggle5: toggle5$1,
    	toggle6: toggle6$1,
    	toggle7: toggle7$1,
    	toggle8: toggle8$1,
    	toggle9: toggle9$1,
    	toggle10: toggle10$1,
    	toggle11: toggle11$1,
    	toggle12: toggle12$1,
    	toggle13: toggle13$1,
    	arrow: arrow$1,
    	arrow2: arrow2$1,
    	arrow3: arrow3$1,
    	bouncingBar: bouncingBar$1,
    	bouncingBall: bouncingBall$1,
    	smiley: smiley$1,
    	monkey: monkey$1,
    	hearts: hearts$1,
    	clock: clock$1,
    	earth: earth$1,
    	material: material$1,
    	moon: moon$1,
    	runner: runner$1,
    	pong: pong$1,
    	shark: shark$1,
    	dqpb: dqpb$1,
    	weather: weather$1,
    	christmas: christmas$1,
    	grenade: grenade$1,
    	point: point$1,
    	layer: layer$1,
    	betaWave: betaWave$1,
    	fingerDance: fingerDance$1,
    	fistBump: fistBump$1,
    	soccerHeader: soccerHeader$1,
    	mindblown: mindblown$1,
    	speaker: speaker$1,
    	orangePulse: orangePulse$1,
    	bluePulse: bluePulse$1,
    	orangeBluePulse: orangeBluePulse$1,
    	timeTravel: timeTravel$1,
    	aesthetic: aesthetic$1
    };

    const spinners$1 = Object.assign({}, require$$0$3); // eslint-disable-line import/extensions

    const spinnersList$1 = Object.keys(spinners$1);

    Object.defineProperty(spinners$1, 'random', {
    	get() {
    		const randomIndex = Math.floor(Math.random() * spinnersList$1.length);
    		const spinnerName = spinnersList$1[randomIndex];
    		return spinners$1[spinnerName];
    	}
    });

    var cliSpinners$3 = spinners$1;

    var isUnicodeSupported$5 = () => {
    	if (process.platform !== 'win32') {
    		return true;
    	}

    	return Boolean(process.env.CI) ||
    		Boolean(process.env.WT_SESSION) || // Windows Terminal
    		process.env.TERM_PROGRAM === 'vscode' ||
    		process.env.TERM === 'xterm-256color' ||
    		process.env.TERM === 'alacritty';
    };

    const chalk$p = source$1;
    const isUnicodeSupported$4 = isUnicodeSupported$5;

    const main$5 = {
    	info: chalk$p.blue('ℹ'),
    	success: chalk$p.green('✔'),
    	warning: chalk$p.yellow('⚠'),
    	error: chalk$p.red('✖')
    };

    const fallback$1 = {
    	info: chalk$p.blue('i'),
    	success: chalk$p.green('√'),
    	warning: chalk$p.yellow('‼'),
    	error: chalk$p.red('×')
    };

    var logSymbols$3 = isUnicodeSupported$4() ? main$5 : fallback$1;

    var wcwidth$5 = {exports: {}};

    var clone$4 = {exports: {}};

    (function (module) {
    var clone = (function() {

    /**
     * Clones (copies) an Object using deep copying.
     *
     * This function supports circular references by default, but if you are certain
     * there are no circular references in your object, you can save some CPU time
     * by calling clone(obj, false).
     *
     * Caution: if `circular` is false and `parent` contains circular references,
     * your program may enter an infinite loop and crash.
     *
     * @param `parent` - the object to be cloned
     * @param `circular` - set to true if the object to be cloned may contain
     *    circular references. (optional - true by default)
     * @param `depth` - set to a number if the object is only to be cloned to
     *    a particular depth. (optional - defaults to Infinity)
     * @param `prototype` - sets the prototype to be used when cloning an object.
     *    (optional - defaults to parent prototype).
    */
    function clone(parent, circular, depth, prototype) {
      if (typeof circular === 'object') {
        depth = circular.depth;
        prototype = circular.prototype;
        circular = circular.circular;
      }
      // maintain two arrays for circular references, where corresponding parents
      // and children have the same index
      var allParents = [];
      var allChildren = [];

      var useBuffer = typeof Buffer != 'undefined';

      if (typeof circular == 'undefined')
        circular = true;

      if (typeof depth == 'undefined')
        depth = Infinity;

      // recurse this function so we don't reset allParents and allChildren
      function _clone(parent, depth) {
        // cloning null always returns null
        if (parent === null)
          return null;

        if (depth == 0)
          return parent;

        var child;
        var proto;
        if (typeof parent != 'object') {
          return parent;
        }

        if (clone.__isArray(parent)) {
          child = [];
        } else if (clone.__isRegExp(parent)) {
          child = new RegExp(parent.source, __getRegExpFlags(parent));
          if (parent.lastIndex) child.lastIndex = parent.lastIndex;
        } else if (clone.__isDate(parent)) {
          child = new Date(parent.getTime());
        } else if (useBuffer && Buffer.isBuffer(parent)) {
          if (Buffer.allocUnsafe) {
            // Node.js >= 4.5.0
            child = Buffer.allocUnsafe(parent.length);
          } else {
            // Older Node.js versions
            child = new Buffer(parent.length);
          }
          parent.copy(child);
          return child;
        } else {
          if (typeof prototype == 'undefined') {
            proto = Object.getPrototypeOf(parent);
            child = Object.create(proto);
          }
          else {
            child = Object.create(prototype);
            proto = prototype;
          }
        }

        if (circular) {
          var index = allParents.indexOf(parent);

          if (index != -1) {
            return allChildren[index];
          }
          allParents.push(parent);
          allChildren.push(child);
        }

        for (var i in parent) {
          var attrs;
          if (proto) {
            attrs = Object.getOwnPropertyDescriptor(proto, i);
          }

          if (attrs && attrs.set == null) {
            continue;
          }
          child[i] = _clone(parent[i], depth - 1);
        }

        return child;
      }

      return _clone(parent, depth);
    }

    /**
     * Simple flat clone using prototype, accepts only objects, usefull for property
     * override on FLAT configuration object (no nested props).
     *
     * USE WITH CAUTION! This may not behave as you wish if you do not know how this
     * works.
     */
    clone.clonePrototype = function clonePrototype(parent) {
      if (parent === null)
        return null;

      var c = function () {};
      c.prototype = parent;
      return new c();
    };

    // private utility functions

    function __objToStr(o) {
      return Object.prototype.toString.call(o);
    }clone.__objToStr = __objToStr;

    function __isDate(o) {
      return typeof o === 'object' && __objToStr(o) === '[object Date]';
    }clone.__isDate = __isDate;

    function __isArray(o) {
      return typeof o === 'object' && __objToStr(o) === '[object Array]';
    }clone.__isArray = __isArray;

    function __isRegExp(o) {
      return typeof o === 'object' && __objToStr(o) === '[object RegExp]';
    }clone.__isRegExp = __isRegExp;

    function __getRegExpFlags(re) {
      var flags = '';
      if (re.global) flags += 'g';
      if (re.ignoreCase) flags += 'i';
      if (re.multiline) flags += 'm';
      return flags;
    }clone.__getRegExpFlags = __getRegExpFlags;

    return clone;
    })();

    if (module.exports) {
      module.exports = clone;
    }
    }(clone$4));

    var clone$3 = clone$4.exports;

    var defaults$a = function(options, defaults) {
      options = options || {};

      Object.keys(defaults).forEach(function(key) {
        if (typeof options[key] === 'undefined') {
          options[key] = clone$3(defaults[key]);
        }
      });

      return options;
    };

    var combining$3 = [
        [ 0x0300, 0x036F ], [ 0x0483, 0x0486 ], [ 0x0488, 0x0489 ],
        [ 0x0591, 0x05BD ], [ 0x05BF, 0x05BF ], [ 0x05C1, 0x05C2 ],
        [ 0x05C4, 0x05C5 ], [ 0x05C7, 0x05C7 ], [ 0x0600, 0x0603 ],
        [ 0x0610, 0x0615 ], [ 0x064B, 0x065E ], [ 0x0670, 0x0670 ],
        [ 0x06D6, 0x06E4 ], [ 0x06E7, 0x06E8 ], [ 0x06EA, 0x06ED ],
        [ 0x070F, 0x070F ], [ 0x0711, 0x0711 ], [ 0x0730, 0x074A ],
        [ 0x07A6, 0x07B0 ], [ 0x07EB, 0x07F3 ], [ 0x0901, 0x0902 ],
        [ 0x093C, 0x093C ], [ 0x0941, 0x0948 ], [ 0x094D, 0x094D ],
        [ 0x0951, 0x0954 ], [ 0x0962, 0x0963 ], [ 0x0981, 0x0981 ],
        [ 0x09BC, 0x09BC ], [ 0x09C1, 0x09C4 ], [ 0x09CD, 0x09CD ],
        [ 0x09E2, 0x09E3 ], [ 0x0A01, 0x0A02 ], [ 0x0A3C, 0x0A3C ],
        [ 0x0A41, 0x0A42 ], [ 0x0A47, 0x0A48 ], [ 0x0A4B, 0x0A4D ],
        [ 0x0A70, 0x0A71 ], [ 0x0A81, 0x0A82 ], [ 0x0ABC, 0x0ABC ],
        [ 0x0AC1, 0x0AC5 ], [ 0x0AC7, 0x0AC8 ], [ 0x0ACD, 0x0ACD ],
        [ 0x0AE2, 0x0AE3 ], [ 0x0B01, 0x0B01 ], [ 0x0B3C, 0x0B3C ],
        [ 0x0B3F, 0x0B3F ], [ 0x0B41, 0x0B43 ], [ 0x0B4D, 0x0B4D ],
        [ 0x0B56, 0x0B56 ], [ 0x0B82, 0x0B82 ], [ 0x0BC0, 0x0BC0 ],
        [ 0x0BCD, 0x0BCD ], [ 0x0C3E, 0x0C40 ], [ 0x0C46, 0x0C48 ],
        [ 0x0C4A, 0x0C4D ], [ 0x0C55, 0x0C56 ], [ 0x0CBC, 0x0CBC ],
        [ 0x0CBF, 0x0CBF ], [ 0x0CC6, 0x0CC6 ], [ 0x0CCC, 0x0CCD ],
        [ 0x0CE2, 0x0CE3 ], [ 0x0D41, 0x0D43 ], [ 0x0D4D, 0x0D4D ],
        [ 0x0DCA, 0x0DCA ], [ 0x0DD2, 0x0DD4 ], [ 0x0DD6, 0x0DD6 ],
        [ 0x0E31, 0x0E31 ], [ 0x0E34, 0x0E3A ], [ 0x0E47, 0x0E4E ],
        [ 0x0EB1, 0x0EB1 ], [ 0x0EB4, 0x0EB9 ], [ 0x0EBB, 0x0EBC ],
        [ 0x0EC8, 0x0ECD ], [ 0x0F18, 0x0F19 ], [ 0x0F35, 0x0F35 ],
        [ 0x0F37, 0x0F37 ], [ 0x0F39, 0x0F39 ], [ 0x0F71, 0x0F7E ],
        [ 0x0F80, 0x0F84 ], [ 0x0F86, 0x0F87 ], [ 0x0F90, 0x0F97 ],
        [ 0x0F99, 0x0FBC ], [ 0x0FC6, 0x0FC6 ], [ 0x102D, 0x1030 ],
        [ 0x1032, 0x1032 ], [ 0x1036, 0x1037 ], [ 0x1039, 0x1039 ],
        [ 0x1058, 0x1059 ], [ 0x1160, 0x11FF ], [ 0x135F, 0x135F ],
        [ 0x1712, 0x1714 ], [ 0x1732, 0x1734 ], [ 0x1752, 0x1753 ],
        [ 0x1772, 0x1773 ], [ 0x17B4, 0x17B5 ], [ 0x17B7, 0x17BD ],
        [ 0x17C6, 0x17C6 ], [ 0x17C9, 0x17D3 ], [ 0x17DD, 0x17DD ],
        [ 0x180B, 0x180D ], [ 0x18A9, 0x18A9 ], [ 0x1920, 0x1922 ],
        [ 0x1927, 0x1928 ], [ 0x1932, 0x1932 ], [ 0x1939, 0x193B ],
        [ 0x1A17, 0x1A18 ], [ 0x1B00, 0x1B03 ], [ 0x1B34, 0x1B34 ],
        [ 0x1B36, 0x1B3A ], [ 0x1B3C, 0x1B3C ], [ 0x1B42, 0x1B42 ],
        [ 0x1B6B, 0x1B73 ], [ 0x1DC0, 0x1DCA ], [ 0x1DFE, 0x1DFF ],
        [ 0x200B, 0x200F ], [ 0x202A, 0x202E ], [ 0x2060, 0x2063 ],
        [ 0x206A, 0x206F ], [ 0x20D0, 0x20EF ], [ 0x302A, 0x302F ],
        [ 0x3099, 0x309A ], [ 0xA806, 0xA806 ], [ 0xA80B, 0xA80B ],
        [ 0xA825, 0xA826 ], [ 0xFB1E, 0xFB1E ], [ 0xFE00, 0xFE0F ],
        [ 0xFE20, 0xFE23 ], [ 0xFEFF, 0xFEFF ], [ 0xFFF9, 0xFFFB ],
        [ 0x10A01, 0x10A03 ], [ 0x10A05, 0x10A06 ], [ 0x10A0C, 0x10A0F ],
        [ 0x10A38, 0x10A3A ], [ 0x10A3F, 0x10A3F ], [ 0x1D167, 0x1D169 ],
        [ 0x1D173, 0x1D182 ], [ 0x1D185, 0x1D18B ], [ 0x1D1AA, 0x1D1AD ],
        [ 0x1D242, 0x1D244 ], [ 0xE0001, 0xE0001 ], [ 0xE0020, 0xE007F ],
        [ 0xE0100, 0xE01EF ]
    ];

    var defaults$9 = defaults$a;
    var combining$2 = combining$3;

    var DEFAULTS$1 = {
      nul: 0,
      control: 0
    };

    wcwidth$5.exports = function wcwidth(str) {
      return wcswidth$1(str, DEFAULTS$1)
    };

    wcwidth$5.exports.config = function(opts) {
      opts = defaults$9(opts || {}, DEFAULTS$1);
      return function wcwidth(str) {
        return wcswidth$1(str, opts)
      }
    };

    /*
     *  The following functions define the column width of an ISO 10646
     *  character as follows:
     *  - The null character (U+0000) has a column width of 0.
     *  - Other C0/C1 control characters and DEL will lead to a return value
     *    of -1.
     *  - Non-spacing and enclosing combining characters (general category
     *    code Mn or Me in the
     *    Unicode database) have a column width of 0.
     *  - SOFT HYPHEN (U+00AD) has a column width of 1.
     *  - Other format characters (general category code Cf in the Unicode
     *    database) and ZERO WIDTH
     *    SPACE (U+200B) have a column width of 0.
     *  - Hangul Jamo medial vowels and final consonants (U+1160-U+11FF)
     *    have a column width of 0.
     *  - Spacing characters in the East Asian Wide (W) or East Asian
     *    Full-width (F) category as
     *    defined in Unicode Technical Report #11 have a column width of 2.
     *  - All remaining characters (including all printable ISO 8859-1 and
     *    WGL4 characters, Unicode control characters, etc.) have a column
     *    width of 1.
     *  This implementation assumes that characters are encoded in ISO 10646.
    */

    function wcswidth$1(str, opts) {
      if (typeof str !== 'string') return wcwidth$4(str, opts)

      var s = 0;
      for (var i = 0; i < str.length; i++) {
        var n = wcwidth$4(str.charCodeAt(i), opts);
        if (n < 0) return -1
        s += n;
      }

      return s
    }

    function wcwidth$4(ucs, opts) {
      // test for 8-bit control characters
      if (ucs === 0) return opts.nul
      if (ucs < 32 || (ucs >= 0x7f && ucs < 0xa0)) return opts.control

      // binary search in table of non-spacing characters
      if (bisearch$1(ucs)) return 0

      // if we arrive here, ucs is not a combining or C0/C1 control character
      return 1 +
          (ucs >= 0x1100 &&
           (ucs <= 0x115f ||                       // Hangul Jamo init. consonants
            ucs == 0x2329 || ucs == 0x232a ||
            (ucs >= 0x2e80 && ucs <= 0xa4cf &&
             ucs != 0x303f) ||                     // CJK ... Yi
            (ucs >= 0xac00 && ucs <= 0xd7a3) ||    // Hangul Syllables
            (ucs >= 0xf900 && ucs <= 0xfaff) ||    // CJK Compatibility Ideographs
            (ucs >= 0xfe10 && ucs <= 0xfe19) ||    // Vertical forms
            (ucs >= 0xfe30 && ucs <= 0xfe6f) ||    // CJK Compatibility Forms
            (ucs >= 0xff00 && ucs <= 0xff60) ||    // Fullwidth Forms
            (ucs >= 0xffe0 && ucs <= 0xffe6) ||
            (ucs >= 0x20000 && ucs <= 0x2fffd) ||
            (ucs >= 0x30000 && ucs <= 0x3fffd)));
    }

    function bisearch$1(ucs) {
      var min = 0;
      var max = combining$2.length - 1;
      var mid;

      if (ucs < combining$2[0][0] || ucs > combining$2[max][1]) return false

      while (max >= min) {
        mid = Math.floor((min + max) / 2);
        if (ucs > combining$2[mid][1]) min = mid + 1;
        else if (ucs < combining$2[mid][0]) max = mid - 1;
        else return true
      }

      return false
    }

    var isInteractive$3 = ({stream = process.stdout} = {}) => {
    	return Boolean(
    		stream && stream.isTTY &&
    		process.env.TERM !== 'dumb' &&
    		!('CI' in process.env)
    	);
    };

    var bl$1 = {exports: {}};

    var readable = {exports: {}};

    var stream = require$$0__default$1["default"];

    function ownKeys$1(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

    function _objectSpread$1(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$1(Object(source), true).forEach(function (key) { _defineProperty$3(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$1(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

    function _defineProperty$3(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

    function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

    function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

    function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

    var _require$2 = require$$0__default$2["default"],
        Buffer$m = _require$2.Buffer;

    var _require2 = require$$0__default["default"],
        inspect = _require2.inspect;

    var custom = inspect && inspect.custom || 'inspect';

    function copyBuffer(src, target, offset) {
      Buffer$m.prototype.copy.call(src, target, offset);
    }

    var buffer_list =
    /*#__PURE__*/
    function () {
      function BufferList() {
        _classCallCheck(this, BufferList);

        this.head = null;
        this.tail = null;
        this.length = 0;
      }

      _createClass(BufferList, [{
        key: "push",
        value: function push(v) {
          var entry = {
            data: v,
            next: null
          };
          if (this.length > 0) this.tail.next = entry;else this.head = entry;
          this.tail = entry;
          ++this.length;
        }
      }, {
        key: "unshift",
        value: function unshift(v) {
          var entry = {
            data: v,
            next: this.head
          };
          if (this.length === 0) this.tail = entry;
          this.head = entry;
          ++this.length;
        }
      }, {
        key: "shift",
        value: function shift() {
          if (this.length === 0) return;
          var ret = this.head.data;
          if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
          --this.length;
          return ret;
        }
      }, {
        key: "clear",
        value: function clear() {
          this.head = this.tail = null;
          this.length = 0;
        }
      }, {
        key: "join",
        value: function join(s) {
          if (this.length === 0) return '';
          var p = this.head;
          var ret = '' + p.data;

          while (p = p.next) {
            ret += s + p.data;
          }

          return ret;
        }
      }, {
        key: "concat",
        value: function concat(n) {
          if (this.length === 0) return Buffer$m.alloc(0);
          var ret = Buffer$m.allocUnsafe(n >>> 0);
          var p = this.head;
          var i = 0;

          while (p) {
            copyBuffer(p.data, ret, i);
            i += p.data.length;
            p = p.next;
          }

          return ret;
        } // Consumes a specified amount of bytes or characters from the buffered data.

      }, {
        key: "consume",
        value: function consume(n, hasStrings) {
          var ret;

          if (n < this.head.data.length) {
            // `slice` is the same for buffers and strings.
            ret = this.head.data.slice(0, n);
            this.head.data = this.head.data.slice(n);
          } else if (n === this.head.data.length) {
            // First chunk is a perfect match.
            ret = this.shift();
          } else {
            // Result spans more than one buffer.
            ret = hasStrings ? this._getString(n) : this._getBuffer(n);
          }

          return ret;
        }
      }, {
        key: "first",
        value: function first() {
          return this.head.data;
        } // Consumes a specified amount of characters from the buffered data.

      }, {
        key: "_getString",
        value: function _getString(n) {
          var p = this.head;
          var c = 1;
          var ret = p.data;
          n -= ret.length;

          while (p = p.next) {
            var str = p.data;
            var nb = n > str.length ? str.length : n;
            if (nb === str.length) ret += str;else ret += str.slice(0, n);
            n -= nb;

            if (n === 0) {
              if (nb === str.length) {
                ++c;
                if (p.next) this.head = p.next;else this.head = this.tail = null;
              } else {
                this.head = p;
                p.data = str.slice(nb);
              }

              break;
            }

            ++c;
          }

          this.length -= c;
          return ret;
        } // Consumes a specified amount of bytes from the buffered data.

      }, {
        key: "_getBuffer",
        value: function _getBuffer(n) {
          var ret = Buffer$m.allocUnsafe(n);
          var p = this.head;
          var c = 1;
          p.data.copy(ret);
          n -= p.data.length;

          while (p = p.next) {
            var buf = p.data;
            var nb = n > buf.length ? buf.length : n;
            buf.copy(ret, ret.length - n, 0, nb);
            n -= nb;

            if (n === 0) {
              if (nb === buf.length) {
                ++c;
                if (p.next) this.head = p.next;else this.head = this.tail = null;
              } else {
                this.head = p;
                p.data = buf.slice(nb);
              }

              break;
            }

            ++c;
          }

          this.length -= c;
          return ret;
        } // Make sure the linked list only shows the minimal necessary information.

      }, {
        key: custom,
        value: function value(_, options) {
          return inspect(this, _objectSpread$1({}, options, {
            // Only inspect one level.
            depth: 0,
            // It should not recurse.
            customInspect: false
          }));
        }
      }]);

      return BufferList;
    }();

    function destroy(err, cb) {
      var _this = this;

      var readableDestroyed = this._readableState && this._readableState.destroyed;
      var writableDestroyed = this._writableState && this._writableState.destroyed;

      if (readableDestroyed || writableDestroyed) {
        if (cb) {
          cb(err);
        } else if (err) {
          if (!this._writableState) {
            process.nextTick(emitErrorNT, this, err);
          } else if (!this._writableState.errorEmitted) {
            this._writableState.errorEmitted = true;
            process.nextTick(emitErrorNT, this, err);
          }
        }

        return this;
      } // we set destroyed to true before firing error callbacks in order
      // to make it re-entrance safe in case destroy() is called within callbacks


      if (this._readableState) {
        this._readableState.destroyed = true;
      } // if this is a duplex stream mark the writable part as destroyed as well


      if (this._writableState) {
        this._writableState.destroyed = true;
      }

      this._destroy(err || null, function (err) {
        if (!cb && err) {
          if (!_this._writableState) {
            process.nextTick(emitErrorAndCloseNT, _this, err);
          } else if (!_this._writableState.errorEmitted) {
            _this._writableState.errorEmitted = true;
            process.nextTick(emitErrorAndCloseNT, _this, err);
          } else {
            process.nextTick(emitCloseNT, _this);
          }
        } else if (cb) {
          process.nextTick(emitCloseNT, _this);
          cb(err);
        } else {
          process.nextTick(emitCloseNT, _this);
        }
      });

      return this;
    }

    function emitErrorAndCloseNT(self, err) {
      emitErrorNT(self, err);
      emitCloseNT(self);
    }

    function emitCloseNT(self) {
      if (self._writableState && !self._writableState.emitClose) return;
      if (self._readableState && !self._readableState.emitClose) return;
      self.emit('close');
    }

    function undestroy() {
      if (this._readableState) {
        this._readableState.destroyed = false;
        this._readableState.reading = false;
        this._readableState.ended = false;
        this._readableState.endEmitted = false;
      }

      if (this._writableState) {
        this._writableState.destroyed = false;
        this._writableState.ended = false;
        this._writableState.ending = false;
        this._writableState.finalCalled = false;
        this._writableState.prefinished = false;
        this._writableState.finished = false;
        this._writableState.errorEmitted = false;
      }
    }

    function emitErrorNT(self, err) {
      self.emit('error', err);
    }

    function errorOrDestroy$2(stream, err) {
      // We have tests that rely on errors being emitted
      // in the same tick, so changing this is semver major.
      // For now when you opt-in to autoDestroy we allow
      // the error to be emitted nextTick. In a future
      // semver major update we should change the default to this.
      var rState = stream._readableState;
      var wState = stream._writableState;
      if (rState && rState.autoDestroy || wState && wState.autoDestroy) stream.destroy(err);else stream.emit('error', err);
    }

    var destroy_1 = {
      destroy: destroy,
      undestroy: undestroy,
      errorOrDestroy: errorOrDestroy$2
    };

    var errors = {};

    const codes = {};

    function createErrorType$1(code, message, Base) {
      if (!Base) {
        Base = Error;
      }

      function getMessage (arg1, arg2, arg3) {
        if (typeof message === 'string') {
          return message
        } else {
          return message(arg1, arg2, arg3)
        }
      }

      class NodeError extends Base {
        constructor (arg1, arg2, arg3) {
          super(getMessage(arg1, arg2, arg3));
        }
      }

      NodeError.prototype.name = Base.name;
      NodeError.prototype.code = code;

      codes[code] = NodeError;
    }

    // https://github.com/nodejs/node/blob/v10.8.0/lib/internal/errors.js
    function oneOf(expected, thing) {
      if (Array.isArray(expected)) {
        const len = expected.length;
        expected = expected.map((i) => String(i));
        if (len > 2) {
          return `one of ${thing} ${expected.slice(0, len - 1).join(', ')}, or ` +
                 expected[len - 1];
        } else if (len === 2) {
          return `one of ${thing} ${expected[0]} or ${expected[1]}`;
        } else {
          return `of ${thing} ${expected[0]}`;
        }
      } else {
        return `of ${thing} ${String(expected)}`;
      }
    }

    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith
    function startsWith(str, search, pos) {
    	return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;
    }

    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith
    function endsWith(str, search, this_len) {
    	if (this_len === undefined || this_len > str.length) {
    		this_len = str.length;
    	}
    	return str.substring(this_len - search.length, this_len) === search;
    }

    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes
    function includes(str, search, start) {
      if (typeof start !== 'number') {
        start = 0;
      }

      if (start + search.length > str.length) {
        return false;
      } else {
        return str.indexOf(search, start) !== -1;
      }
    }

    createErrorType$1('ERR_INVALID_OPT_VALUE', function (name, value) {
      return 'The value "' + value + '" is invalid for option "' + name + '"'
    }, TypeError);
    createErrorType$1('ERR_INVALID_ARG_TYPE', function (name, expected, actual) {
      // determiner: 'must be' or 'must not be'
      let determiner;
      if (typeof expected === 'string' && startsWith(expected, 'not ')) {
        determiner = 'must not be';
        expected = expected.replace(/^not /, '');
      } else {
        determiner = 'must be';
      }

      let msg;
      if (endsWith(name, ' argument')) {
        // For cases like 'first argument'
        msg = `The ${name} ${determiner} ${oneOf(expected, 'type')}`;
      } else {
        const type = includes(name, '.') ? 'property' : 'argument';
        msg = `The "${name}" ${type} ${determiner} ${oneOf(expected, 'type')}`;
      }

      msg += `. Received type ${typeof actual}`;
      return msg;
    }, TypeError);
    createErrorType$1('ERR_STREAM_PUSH_AFTER_EOF', 'stream.push() after EOF');
    createErrorType$1('ERR_METHOD_NOT_IMPLEMENTED', function (name) {
      return 'The ' + name + ' method is not implemented'
    });
    createErrorType$1('ERR_STREAM_PREMATURE_CLOSE', 'Premature close');
    createErrorType$1('ERR_STREAM_DESTROYED', function (name) {
      return 'Cannot call ' + name + ' after a stream was destroyed';
    });
    createErrorType$1('ERR_MULTIPLE_CALLBACK', 'Callback called multiple times');
    createErrorType$1('ERR_STREAM_CANNOT_PIPE', 'Cannot pipe, not readable');
    createErrorType$1('ERR_STREAM_WRITE_AFTER_END', 'write after end');
    createErrorType$1('ERR_STREAM_NULL_VALUES', 'May not write null values to stream', TypeError);
    createErrorType$1('ERR_UNKNOWN_ENCODING', function (arg) {
      return 'Unknown encoding: ' + arg
    }, TypeError);
    createErrorType$1('ERR_STREAM_UNSHIFT_AFTER_END_EVENT', 'stream.unshift() after end event');

    errors.codes = codes;

    var ERR_INVALID_OPT_VALUE = errors.codes.ERR_INVALID_OPT_VALUE;

    function highWaterMarkFrom(options, isDuplex, duplexKey) {
      return options.highWaterMark != null ? options.highWaterMark : isDuplex ? options[duplexKey] : null;
    }

    function getHighWaterMark$2(state, options, duplexKey, isDuplex) {
      var hwm = highWaterMarkFrom(options, isDuplex, duplexKey);

      if (hwm != null) {
        if (!(isFinite(hwm) && Math.floor(hwm) === hwm) || hwm < 0) {
          var name = isDuplex ? duplexKey : 'highWaterMark';
          throw new ERR_INVALID_OPT_VALUE(name, hwm);
        }

        return Math.floor(hwm);
      } // Default value


      return state.objectMode ? 16 : 16 * 1024;
    }

    var state = {
      getHighWaterMark: getHighWaterMark$2
    };

    var inherits$3 = {exports: {}};

    var inherits_browser = {exports: {}};

    if (typeof Object.create === 'function') {
      // implementation from standard node.js 'util' module
      inherits_browser.exports = function inherits(ctor, superCtor) {
        if (superCtor) {
          ctor.super_ = superCtor;
          ctor.prototype = Object.create(superCtor.prototype, {
            constructor: {
              value: ctor,
              enumerable: false,
              writable: true,
              configurable: true
            }
          });
        }
      };
    } else {
      // old school shim for old browsers
      inherits_browser.exports = function inherits(ctor, superCtor) {
        if (superCtor) {
          ctor.super_ = superCtor;
          var TempCtor = function () {};
          TempCtor.prototype = superCtor.prototype;
          ctor.prototype = new TempCtor();
          ctor.prototype.constructor = ctor;
        }
      };
    }

    try {
      var util$3 = require('util');
      /* istanbul ignore next */
      if (typeof util$3.inherits !== 'function') throw '';
      inherits$3.exports = util$3.inherits;
    } catch (e) {
      /* istanbul ignore next */
      inherits$3.exports = inherits_browser.exports;
    }

    /**
     * For Node.js, simply re-export the core `util.deprecate` function.
     */

    var node = require$$0__default["default"].deprecate;

    var _stream_writable = Writable$2;
    // there will be only 2 of these for each stream


    function CorkedRequest(state) {
      var _this = this;

      this.next = null;
      this.entry = null;

      this.finish = function () {
        onCorkedFinish(_this, state);
      };
    }
    /* </replacement> */

    /*<replacement>*/


    var Duplex$3;
    /*</replacement>*/

    Writable$2.WritableState = WritableState;
    /*<replacement>*/

    var internalUtil = {
      deprecate: node
    };
    /*</replacement>*/

    /*<replacement>*/

    var Stream$2 = stream;
    /*</replacement>*/


    var Buffer$l = require$$0__default$2["default"].Buffer;

    var OurUint8Array$1 = commonjsGlobal.Uint8Array || function () {};

    function _uint8ArrayToBuffer$1(chunk) {
      return Buffer$l.from(chunk);
    }

    function _isUint8Array$1(obj) {
      return Buffer$l.isBuffer(obj) || obj instanceof OurUint8Array$1;
    }

    var destroyImpl$1 = destroy_1;

    var _require$1 = state,
        getHighWaterMark$1 = _require$1.getHighWaterMark;

    var _require$codes$3 = errors.codes,
        ERR_INVALID_ARG_TYPE$2 = _require$codes$3.ERR_INVALID_ARG_TYPE,
        ERR_METHOD_NOT_IMPLEMENTED$2 = _require$codes$3.ERR_METHOD_NOT_IMPLEMENTED,
        ERR_MULTIPLE_CALLBACK$1 = _require$codes$3.ERR_MULTIPLE_CALLBACK,
        ERR_STREAM_CANNOT_PIPE = _require$codes$3.ERR_STREAM_CANNOT_PIPE,
        ERR_STREAM_DESTROYED$1 = _require$codes$3.ERR_STREAM_DESTROYED,
        ERR_STREAM_NULL_VALUES = _require$codes$3.ERR_STREAM_NULL_VALUES,
        ERR_STREAM_WRITE_AFTER_END = _require$codes$3.ERR_STREAM_WRITE_AFTER_END,
        ERR_UNKNOWN_ENCODING = _require$codes$3.ERR_UNKNOWN_ENCODING;

    var errorOrDestroy$1 = destroyImpl$1.errorOrDestroy;

    inherits$3.exports(Writable$2, Stream$2);

    function nop() {}

    function WritableState(options, stream, isDuplex) {
      Duplex$3 = Duplex$3 || _stream_duplex;
      options = options || {}; // Duplex streams are both readable and writable, but share
      // the same options object.
      // However, some cases require setting options to different
      // values for the readable and the writable sides of the duplex stream,
      // e.g. options.readableObjectMode vs. options.writableObjectMode, etc.

      if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof Duplex$3; // object stream flag to indicate whether or not this stream
      // contains buffers or objects.

      this.objectMode = !!options.objectMode;
      if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode; // the point at which write() starts returning false
      // Note: 0 is a valid value, means that we always return false if
      // the entire buffer is not flushed immediately on write()

      this.highWaterMark = getHighWaterMark$1(this, options, 'writableHighWaterMark', isDuplex); // if _final has been called

      this.finalCalled = false; // drain event flag.

      this.needDrain = false; // at the start of calling end()

      this.ending = false; // when end() has been called, and returned

      this.ended = false; // when 'finish' is emitted

      this.finished = false; // has it been destroyed

      this.destroyed = false; // should we decode strings into buffers before passing to _write?
      // this is here so that some node-core streams can optimize string
      // handling at a lower level.

      var noDecode = options.decodeStrings === false;
      this.decodeStrings = !noDecode; // Crypto is kind of old and crusty.  Historically, its default string
      // encoding is 'binary' so we have to make this configurable.
      // Everything else in the universe uses 'utf8', though.

      this.defaultEncoding = options.defaultEncoding || 'utf8'; // not an actual buffer we keep track of, but a measurement
      // of how much we're waiting to get pushed to some underlying
      // socket or file.

      this.length = 0; // a flag to see when we're in the middle of a write.

      this.writing = false; // when true all writes will be buffered until .uncork() call

      this.corked = 0; // a flag to be able to tell if the onwrite cb is called immediately,
      // or on a later tick.  We set this to true at first, because any
      // actions that shouldn't happen until "later" should generally also
      // not happen before the first write call.

      this.sync = true; // a flag to know if we're processing previously buffered items, which
      // may call the _write() callback in the same tick, so that we don't
      // end up in an overlapped onwrite situation.

      this.bufferProcessing = false; // the callback that's passed to _write(chunk,cb)

      this.onwrite = function (er) {
        onwrite(stream, er);
      }; // the callback that the user supplies to write(chunk,encoding,cb)


      this.writecb = null; // the amount that is being written when _write is called.

      this.writelen = 0;
      this.bufferedRequest = null;
      this.lastBufferedRequest = null; // number of pending user-supplied write callbacks
      // this must be 0 before 'finish' can be emitted

      this.pendingcb = 0; // emit prefinish if the only thing we're waiting for is _write cbs
      // This is relevant for synchronous Transform streams

      this.prefinished = false; // True if the error was already emitted and should not be thrown again

      this.errorEmitted = false; // Should close be emitted on destroy. Defaults to true.

      this.emitClose = options.emitClose !== false; // Should .destroy() be called after 'finish' (and potentially 'end')

      this.autoDestroy = !!options.autoDestroy; // count buffered requests

      this.bufferedRequestCount = 0; // allocate the first CorkedRequest, there is always
      // one allocated and free to use, and we maintain at most two

      this.corkedRequestsFree = new CorkedRequest(this);
    }

    WritableState.prototype.getBuffer = function getBuffer() {
      var current = this.bufferedRequest;
      var out = [];

      while (current) {
        out.push(current);
        current = current.next;
      }

      return out;
    };

    (function () {
      try {
        Object.defineProperty(WritableState.prototype, 'buffer', {
          get: internalUtil.deprecate(function writableStateBufferGetter() {
            return this.getBuffer();
          }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')
        });
      } catch (_) {}
    })(); // Test _writableState for inheritance to account for Duplex streams,
    // whose prototype chain only points to Readable.


    var realHasInstance;

    if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
      realHasInstance = Function.prototype[Symbol.hasInstance];
      Object.defineProperty(Writable$2, Symbol.hasInstance, {
        value: function value(object) {
          if (realHasInstance.call(this, object)) return true;
          if (this !== Writable$2) return false;
          return object && object._writableState instanceof WritableState;
        }
      });
    } else {
      realHasInstance = function realHasInstance(object) {
        return object instanceof this;
      };
    }

    function Writable$2(options) {
      Duplex$3 = Duplex$3 || _stream_duplex; // Writable ctor is applied to Duplexes, too.
      // `realHasInstance` is necessary because using plain `instanceof`
      // would return false, as no `_writableState` property is attached.
      // Trying to use the custom `instanceof` for Writable here will also break the
      // Node.js LazyTransform implementation, which has a non-trivial getter for
      // `_writableState` that would lead to infinite recursion.
      // Checking for a Stream.Duplex instance is faster here instead of inside
      // the WritableState constructor, at least with V8 6.5

      var isDuplex = this instanceof Duplex$3;
      if (!isDuplex && !realHasInstance.call(Writable$2, this)) return new Writable$2(options);
      this._writableState = new WritableState(options, this, isDuplex); // legacy.

      this.writable = true;

      if (options) {
        if (typeof options.write === 'function') this._write = options.write;
        if (typeof options.writev === 'function') this._writev = options.writev;
        if (typeof options.destroy === 'function') this._destroy = options.destroy;
        if (typeof options.final === 'function') this._final = options.final;
      }

      Stream$2.call(this);
    } // Otherwise people can pipe Writable streams, which is just wrong.


    Writable$2.prototype.pipe = function () {
      errorOrDestroy$1(this, new ERR_STREAM_CANNOT_PIPE());
    };

    function writeAfterEnd(stream, cb) {
      var er = new ERR_STREAM_WRITE_AFTER_END(); // TODO: defer error events consistently everywhere, not just the cb

      errorOrDestroy$1(stream, er);
      process.nextTick(cb, er);
    } // Checks that a user-supplied chunk is valid, especially for the particular
    // mode the stream is in. Currently this means that `null` is never accepted
    // and undefined/non-string values are only allowed in object mode.


    function validChunk(stream, state, chunk, cb) {
      var er;

      if (chunk === null) {
        er = new ERR_STREAM_NULL_VALUES();
      } else if (typeof chunk !== 'string' && !state.objectMode) {
        er = new ERR_INVALID_ARG_TYPE$2('chunk', ['string', 'Buffer'], chunk);
      }

      if (er) {
        errorOrDestroy$1(stream, er);
        process.nextTick(cb, er);
        return false;
      }

      return true;
    }

    Writable$2.prototype.write = function (chunk, encoding, cb) {
      var state = this._writableState;
      var ret = false;

      var isBuf = !state.objectMode && _isUint8Array$1(chunk);

      if (isBuf && !Buffer$l.isBuffer(chunk)) {
        chunk = _uint8ArrayToBuffer$1(chunk);
      }

      if (typeof encoding === 'function') {
        cb = encoding;
        encoding = null;
      }

      if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;
      if (typeof cb !== 'function') cb = nop;
      if (state.ending) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {
        state.pendingcb++;
        ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
      }
      return ret;
    };

    Writable$2.prototype.cork = function () {
      this._writableState.corked++;
    };

    Writable$2.prototype.uncork = function () {
      var state = this._writableState;

      if (state.corked) {
        state.corked--;
        if (!state.writing && !state.corked && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
      }
    };

    Writable$2.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
      // node::ParseEncoding() requires lower case.
      if (typeof encoding === 'string') encoding = encoding.toLowerCase();
      if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new ERR_UNKNOWN_ENCODING(encoding);
      this._writableState.defaultEncoding = encoding;
      return this;
    };

    Object.defineProperty(Writable$2.prototype, 'writableBuffer', {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get() {
        return this._writableState && this._writableState.getBuffer();
      }
    });

    function decodeChunk(state, chunk, encoding) {
      if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
        chunk = Buffer$l.from(chunk, encoding);
      }

      return chunk;
    }

    Object.defineProperty(Writable$2.prototype, 'writableHighWaterMark', {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get() {
        return this._writableState.highWaterMark;
      }
    }); // if we're already writing something, then just put this
    // in the queue, and wait our turn.  Otherwise, call _write
    // If we return false, then we need a drain event, so set that flag.

    function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
      if (!isBuf) {
        var newChunk = decodeChunk(state, chunk, encoding);

        if (chunk !== newChunk) {
          isBuf = true;
          encoding = 'buffer';
          chunk = newChunk;
        }
      }

      var len = state.objectMode ? 1 : chunk.length;
      state.length += len;
      var ret = state.length < state.highWaterMark; // we must ensure that previous needDrain will not be reset to false.

      if (!ret) state.needDrain = true;

      if (state.writing || state.corked) {
        var last = state.lastBufferedRequest;
        state.lastBufferedRequest = {
          chunk: chunk,
          encoding: encoding,
          isBuf: isBuf,
          callback: cb,
          next: null
        };

        if (last) {
          last.next = state.lastBufferedRequest;
        } else {
          state.bufferedRequest = state.lastBufferedRequest;
        }

        state.bufferedRequestCount += 1;
      } else {
        doWrite(stream, state, false, len, chunk, encoding, cb);
      }

      return ret;
    }

    function doWrite(stream, state, writev, len, chunk, encoding, cb) {
      state.writelen = len;
      state.writecb = cb;
      state.writing = true;
      state.sync = true;
      if (state.destroyed) state.onwrite(new ERR_STREAM_DESTROYED$1('write'));else if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
      state.sync = false;
    }

    function onwriteError(stream, state, sync, er, cb) {
      --state.pendingcb;

      if (sync) {
        // defer the callback if we are being called synchronously
        // to avoid piling up things on the stack
        process.nextTick(cb, er); // this can emit finish, and it will always happen
        // after error

        process.nextTick(finishMaybe, stream, state);
        stream._writableState.errorEmitted = true;
        errorOrDestroy$1(stream, er);
      } else {
        // the caller expect this to happen before if
        // it is async
        cb(er);
        stream._writableState.errorEmitted = true;
        errorOrDestroy$1(stream, er); // this can emit finish, but finish must
        // always follow error

        finishMaybe(stream, state);
      }
    }

    function onwriteStateUpdate(state) {
      state.writing = false;
      state.writecb = null;
      state.length -= state.writelen;
      state.writelen = 0;
    }

    function onwrite(stream, er) {
      var state = stream._writableState;
      var sync = state.sync;
      var cb = state.writecb;
      if (typeof cb !== 'function') throw new ERR_MULTIPLE_CALLBACK$1();
      onwriteStateUpdate(state);
      if (er) onwriteError(stream, state, sync, er, cb);else {
        // Check if we're actually ready to finish, but don't emit yet
        var finished = needFinish(state) || stream.destroyed;

        if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
          clearBuffer(stream, state);
        }

        if (sync) {
          process.nextTick(afterWrite, stream, state, finished, cb);
        } else {
          afterWrite(stream, state, finished, cb);
        }
      }
    }

    function afterWrite(stream, state, finished, cb) {
      if (!finished) onwriteDrain(stream, state);
      state.pendingcb--;
      cb();
      finishMaybe(stream, state);
    } // Must force callback to be called on nextTick, so that we don't
    // emit 'drain' before the write() consumer gets the 'false' return
    // value, and has a chance to attach a 'drain' listener.


    function onwriteDrain(stream, state) {
      if (state.length === 0 && state.needDrain) {
        state.needDrain = false;
        stream.emit('drain');
      }
    } // if there's something in the buffer waiting, then process it


    function clearBuffer(stream, state) {
      state.bufferProcessing = true;
      var entry = state.bufferedRequest;

      if (stream._writev && entry && entry.next) {
        // Fast case, write everything using _writev()
        var l = state.bufferedRequestCount;
        var buffer = new Array(l);
        var holder = state.corkedRequestsFree;
        holder.entry = entry;
        var count = 0;
        var allBuffers = true;

        while (entry) {
          buffer[count] = entry;
          if (!entry.isBuf) allBuffers = false;
          entry = entry.next;
          count += 1;
        }

        buffer.allBuffers = allBuffers;
        doWrite(stream, state, true, state.length, buffer, '', holder.finish); // doWrite is almost always async, defer these to save a bit of time
        // as the hot path ends with doWrite

        state.pendingcb++;
        state.lastBufferedRequest = null;

        if (holder.next) {
          state.corkedRequestsFree = holder.next;
          holder.next = null;
        } else {
          state.corkedRequestsFree = new CorkedRequest(state);
        }

        state.bufferedRequestCount = 0;
      } else {
        // Slow case, write chunks one-by-one
        while (entry) {
          var chunk = entry.chunk;
          var encoding = entry.encoding;
          var cb = entry.callback;
          var len = state.objectMode ? 1 : chunk.length;
          doWrite(stream, state, false, len, chunk, encoding, cb);
          entry = entry.next;
          state.bufferedRequestCount--; // if we didn't call the onwrite immediately, then
          // it means that we need to wait until it does.
          // also, that means that the chunk and cb are currently
          // being processed, so move the buffer counter past them.

          if (state.writing) {
            break;
          }
        }

        if (entry === null) state.lastBufferedRequest = null;
      }

      state.bufferedRequest = entry;
      state.bufferProcessing = false;
    }

    Writable$2.prototype._write = function (chunk, encoding, cb) {
      cb(new ERR_METHOD_NOT_IMPLEMENTED$2('_write()'));
    };

    Writable$2.prototype._writev = null;

    Writable$2.prototype.end = function (chunk, encoding, cb) {
      var state = this._writableState;

      if (typeof chunk === 'function') {
        cb = chunk;
        chunk = null;
        encoding = null;
      } else if (typeof encoding === 'function') {
        cb = encoding;
        encoding = null;
      }

      if (chunk !== null && chunk !== undefined) this.write(chunk, encoding); // .end() fully uncorks

      if (state.corked) {
        state.corked = 1;
        this.uncork();
      } // ignore unnecessary end() calls.


      if (!state.ending) endWritable(this, state, cb);
      return this;
    };

    Object.defineProperty(Writable$2.prototype, 'writableLength', {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get() {
        return this._writableState.length;
      }
    });

    function needFinish(state) {
      return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
    }

    function callFinal(stream, state) {
      stream._final(function (err) {
        state.pendingcb--;

        if (err) {
          errorOrDestroy$1(stream, err);
        }

        state.prefinished = true;
        stream.emit('prefinish');
        finishMaybe(stream, state);
      });
    }

    function prefinish$1(stream, state) {
      if (!state.prefinished && !state.finalCalled) {
        if (typeof stream._final === 'function' && !state.destroyed) {
          state.pendingcb++;
          state.finalCalled = true;
          process.nextTick(callFinal, stream, state);
        } else {
          state.prefinished = true;
          stream.emit('prefinish');
        }
      }
    }

    function finishMaybe(stream, state) {
      var need = needFinish(state);

      if (need) {
        prefinish$1(stream, state);

        if (state.pendingcb === 0) {
          state.finished = true;
          stream.emit('finish');

          if (state.autoDestroy) {
            // In case of duplex streams we need a way to detect
            // if the readable side is ready for autoDestroy as well
            var rState = stream._readableState;

            if (!rState || rState.autoDestroy && rState.endEmitted) {
              stream.destroy();
            }
          }
        }
      }

      return need;
    }

    function endWritable(stream, state, cb) {
      state.ending = true;
      finishMaybe(stream, state);

      if (cb) {
        if (state.finished) process.nextTick(cb);else stream.once('finish', cb);
      }

      state.ended = true;
      stream.writable = false;
    }

    function onCorkedFinish(corkReq, state, err) {
      var entry = corkReq.entry;
      corkReq.entry = null;

      while (entry) {
        var cb = entry.callback;
        state.pendingcb--;
        cb(err);
        entry = entry.next;
      } // reuse the free corkReq.


      state.corkedRequestsFree.next = corkReq;
    }

    Object.defineProperty(Writable$2.prototype, 'destroyed', {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get() {
        if (this._writableState === undefined) {
          return false;
        }

        return this._writableState.destroyed;
      },
      set: function set(value) {
        // we ignore the value if the stream
        // has not been initialized yet
        if (!this._writableState) {
          return;
        } // backward compatibility, the user is explicitly
        // managing destroyed


        this._writableState.destroyed = value;
      }
    });
    Writable$2.prototype.destroy = destroyImpl$1.destroy;
    Writable$2.prototype._undestroy = destroyImpl$1.undestroy;

    Writable$2.prototype._destroy = function (err, cb) {
      cb(err);
    };

    /*<replacement>*/

    var objectKeys = Object.keys || function (obj) {
      var keys = [];

      for (var key in obj) {
        keys.push(key);
      }

      return keys;
    };
    /*</replacement>*/


    var _stream_duplex = Duplex$2;

    var Readable$1 = _stream_readable;

    var Writable$1 = _stream_writable;

    inherits$3.exports(Duplex$2, Readable$1);

    {
      // Allow the keys array to be GC'ed.
      var keys$8 = objectKeys(Writable$1.prototype);

      for (var v = 0; v < keys$8.length; v++) {
        var method = keys$8[v];
        if (!Duplex$2.prototype[method]) Duplex$2.prototype[method] = Writable$1.prototype[method];
      }
    }

    function Duplex$2(options) {
      if (!(this instanceof Duplex$2)) return new Duplex$2(options);
      Readable$1.call(this, options);
      Writable$1.call(this, options);
      this.allowHalfOpen = true;

      if (options) {
        if (options.readable === false) this.readable = false;
        if (options.writable === false) this.writable = false;

        if (options.allowHalfOpen === false) {
          this.allowHalfOpen = false;
          this.once('end', onend);
        }
      }
    }

    Object.defineProperty(Duplex$2.prototype, 'writableHighWaterMark', {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get() {
        return this._writableState.highWaterMark;
      }
    });
    Object.defineProperty(Duplex$2.prototype, 'writableBuffer', {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get() {
        return this._writableState && this._writableState.getBuffer();
      }
    });
    Object.defineProperty(Duplex$2.prototype, 'writableLength', {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get() {
        return this._writableState.length;
      }
    }); // the no-half-open enforcer

    function onend() {
      // If the writable side ended, then we're ok.
      if (this._writableState.ended) return; // no more data can be written.
      // But allow more writes to happen in this tick.

      process.nextTick(onEndNT, this);
    }

    function onEndNT(self) {
      self.end();
    }

    Object.defineProperty(Duplex$2.prototype, 'destroyed', {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get() {
        if (this._readableState === undefined || this._writableState === undefined) {
          return false;
        }

        return this._readableState.destroyed && this._writableState.destroyed;
      },
      set: function set(value) {
        // we ignore the value if the stream
        // has not been initialized yet
        if (this._readableState === undefined || this._writableState === undefined) {
          return;
        } // backward compatibility, the user is explicitly
        // managing destroyed


        this._readableState.destroyed = value;
        this._writableState.destroyed = value;
      }
    });

    var string_decoder = {};

    var safeBuffer = {exports: {}};

    /*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */

    (function (module, exports) {
    /* eslint-disable node/no-deprecated-api */
    var buffer = require$$0__default$2["default"];
    var Buffer = buffer.Buffer;

    // alternative to using Object.keys for old browsers
    function copyProps (src, dst) {
      for (var key in src) {
        dst[key] = src[key];
      }
    }
    if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {
      module.exports = buffer;
    } else {
      // Copy properties from require('buffer')
      copyProps(buffer, exports);
      exports.Buffer = SafeBuffer;
    }

    function SafeBuffer (arg, encodingOrOffset, length) {
      return Buffer(arg, encodingOrOffset, length)
    }

    SafeBuffer.prototype = Object.create(Buffer.prototype);

    // Copy static methods from Buffer
    copyProps(Buffer, SafeBuffer);

    SafeBuffer.from = function (arg, encodingOrOffset, length) {
      if (typeof arg === 'number') {
        throw new TypeError('Argument must not be a number')
      }
      return Buffer(arg, encodingOrOffset, length)
    };

    SafeBuffer.alloc = function (size, fill, encoding) {
      if (typeof size !== 'number') {
        throw new TypeError('Argument must be a number')
      }
      var buf = Buffer(size);
      if (fill !== undefined) {
        if (typeof encoding === 'string') {
          buf.fill(fill, encoding);
        } else {
          buf.fill(fill);
        }
      } else {
        buf.fill(0);
      }
      return buf
    };

    SafeBuffer.allocUnsafe = function (size) {
      if (typeof size !== 'number') {
        throw new TypeError('Argument must be a number')
      }
      return Buffer(size)
    };

    SafeBuffer.allocUnsafeSlow = function (size) {
      if (typeof size !== 'number') {
        throw new TypeError('Argument must be a number')
      }
      return buffer.SlowBuffer(size)
    };
    }(safeBuffer, safeBuffer.exports));

    /*<replacement>*/

    var Buffer$k = safeBuffer.exports.Buffer;
    /*</replacement>*/

    var isEncoding = Buffer$k.isEncoding || function (encoding) {
      encoding = '' + encoding;
      switch (encoding && encoding.toLowerCase()) {
        case 'hex':case 'utf8':case 'utf-8':case 'ascii':case 'binary':case 'base64':case 'ucs2':case 'ucs-2':case 'utf16le':case 'utf-16le':case 'raw':
          return true;
        default:
          return false;
      }
    };

    function _normalizeEncoding(enc) {
      if (!enc) return 'utf8';
      var retried;
      while (true) {
        switch (enc) {
          case 'utf8':
          case 'utf-8':
            return 'utf8';
          case 'ucs2':
          case 'ucs-2':
          case 'utf16le':
          case 'utf-16le':
            return 'utf16le';
          case 'latin1':
          case 'binary':
            return 'latin1';
          case 'base64':
          case 'ascii':
          case 'hex':
            return enc;
          default:
            if (retried) return; // undefined
            enc = ('' + enc).toLowerCase();
            retried = true;
        }
      }
    }
    // Do not cache `Buffer.isEncoding` when checking encoding names as some
    // modules monkey-patch it to support additional encodings
    function normalizeEncoding(enc) {
      var nenc = _normalizeEncoding(enc);
      if (typeof nenc !== 'string' && (Buffer$k.isEncoding === isEncoding || !isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);
      return nenc || enc;
    }

    // StringDecoder provides an interface for efficiently splitting a series of
    // buffers into a series of JS strings without breaking apart multi-byte
    // characters.
    string_decoder.StringDecoder = StringDecoder$3;
    function StringDecoder$3(encoding) {
      this.encoding = normalizeEncoding(encoding);
      var nb;
      switch (this.encoding) {
        case 'utf16le':
          this.text = utf16Text;
          this.end = utf16End;
          nb = 4;
          break;
        case 'utf8':
          this.fillLast = utf8FillLast;
          nb = 4;
          break;
        case 'base64':
          this.text = base64Text;
          this.end = base64End;
          nb = 3;
          break;
        default:
          this.write = simpleWrite;
          this.end = simpleEnd;
          return;
      }
      this.lastNeed = 0;
      this.lastTotal = 0;
      this.lastChar = Buffer$k.allocUnsafe(nb);
    }

    StringDecoder$3.prototype.write = function (buf) {
      if (buf.length === 0) return '';
      var r;
      var i;
      if (this.lastNeed) {
        r = this.fillLast(buf);
        if (r === undefined) return '';
        i = this.lastNeed;
        this.lastNeed = 0;
      } else {
        i = 0;
      }
      if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);
      return r || '';
    };

    StringDecoder$3.prototype.end = utf8End;

    // Returns only complete characters in a Buffer
    StringDecoder$3.prototype.text = utf8Text;

    // Attempts to complete a partial non-UTF-8 character using bytes from a Buffer
    StringDecoder$3.prototype.fillLast = function (buf) {
      if (this.lastNeed <= buf.length) {
        buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
        return this.lastChar.toString(this.encoding, 0, this.lastTotal);
      }
      buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
      this.lastNeed -= buf.length;
    };

    // Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a
    // continuation byte. If an invalid byte is detected, -2 is returned.
    function utf8CheckByte(byte) {
      if (byte <= 0x7F) return 0;else if (byte >> 5 === 0x06) return 2;else if (byte >> 4 === 0x0E) return 3;else if (byte >> 3 === 0x1E) return 4;
      return byte >> 6 === 0x02 ? -1 : -2;
    }

    // Checks at most 3 bytes at the end of a Buffer in order to detect an
    // incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)
    // needed to complete the UTF-8 character (if applicable) are returned.
    function utf8CheckIncomplete(self, buf, i) {
      var j = buf.length - 1;
      if (j < i) return 0;
      var nb = utf8CheckByte(buf[j]);
      if (nb >= 0) {
        if (nb > 0) self.lastNeed = nb - 1;
        return nb;
      }
      if (--j < i || nb === -2) return 0;
      nb = utf8CheckByte(buf[j]);
      if (nb >= 0) {
        if (nb > 0) self.lastNeed = nb - 2;
        return nb;
      }
      if (--j < i || nb === -2) return 0;
      nb = utf8CheckByte(buf[j]);
      if (nb >= 0) {
        if (nb > 0) {
          if (nb === 2) nb = 0;else self.lastNeed = nb - 3;
        }
        return nb;
      }
      return 0;
    }

    // Validates as many continuation bytes for a multi-byte UTF-8 character as
    // needed or are available. If we see a non-continuation byte where we expect
    // one, we "replace" the validated continuation bytes we've seen so far with
    // a single UTF-8 replacement character ('\ufffd'), to match v8's UTF-8 decoding
    // behavior. The continuation byte check is included three times in the case
    // where all of the continuation bytes for a character exist in the same buffer.
    // It is also done this way as a slight performance increase instead of using a
    // loop.
    function utf8CheckExtraBytes(self, buf, p) {
      if ((buf[0] & 0xC0) !== 0x80) {
        self.lastNeed = 0;
        return '\ufffd';
      }
      if (self.lastNeed > 1 && buf.length > 1) {
        if ((buf[1] & 0xC0) !== 0x80) {
          self.lastNeed = 1;
          return '\ufffd';
        }
        if (self.lastNeed > 2 && buf.length > 2) {
          if ((buf[2] & 0xC0) !== 0x80) {
            self.lastNeed = 2;
            return '\ufffd';
          }
        }
      }
    }

    // Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.
    function utf8FillLast(buf) {
      var p = this.lastTotal - this.lastNeed;
      var r = utf8CheckExtraBytes(this, buf);
      if (r !== undefined) return r;
      if (this.lastNeed <= buf.length) {
        buf.copy(this.lastChar, p, 0, this.lastNeed);
        return this.lastChar.toString(this.encoding, 0, this.lastTotal);
      }
      buf.copy(this.lastChar, p, 0, buf.length);
      this.lastNeed -= buf.length;
    }

    // Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a
    // partial character, the character's bytes are buffered until the required
    // number of bytes are available.
    function utf8Text(buf, i) {
      var total = utf8CheckIncomplete(this, buf, i);
      if (!this.lastNeed) return buf.toString('utf8', i);
      this.lastTotal = total;
      var end = buf.length - (total - this.lastNeed);
      buf.copy(this.lastChar, 0, end);
      return buf.toString('utf8', i, end);
    }

    // For UTF-8, a replacement character is added when ending on a partial
    // character.
    function utf8End(buf) {
      var r = buf && buf.length ? this.write(buf) : '';
      if (this.lastNeed) return r + '\ufffd';
      return r;
    }

    // UTF-16LE typically needs two bytes per character, but even if we have an even
    // number of bytes available, we need to check if we end on a leading/high
    // surrogate. In that case, we need to wait for the next two bytes in order to
    // decode the last character properly.
    function utf16Text(buf, i) {
      if ((buf.length - i) % 2 === 0) {
        var r = buf.toString('utf16le', i);
        if (r) {
          var c = r.charCodeAt(r.length - 1);
          if (c >= 0xD800 && c <= 0xDBFF) {
            this.lastNeed = 2;
            this.lastTotal = 4;
            this.lastChar[0] = buf[buf.length - 2];
            this.lastChar[1] = buf[buf.length - 1];
            return r.slice(0, -1);
          }
        }
        return r;
      }
      this.lastNeed = 1;
      this.lastTotal = 2;
      this.lastChar[0] = buf[buf.length - 1];
      return buf.toString('utf16le', i, buf.length - 1);
    }

    // For UTF-16LE we do not explicitly append special replacement characters if we
    // end on a partial character, we simply let v8 handle that.
    function utf16End(buf) {
      var r = buf && buf.length ? this.write(buf) : '';
      if (this.lastNeed) {
        var end = this.lastTotal - this.lastNeed;
        return r + this.lastChar.toString('utf16le', 0, end);
      }
      return r;
    }

    function base64Text(buf, i) {
      var n = (buf.length - i) % 3;
      if (n === 0) return buf.toString('base64', i);
      this.lastNeed = 3 - n;
      this.lastTotal = 3;
      if (n === 1) {
        this.lastChar[0] = buf[buf.length - 1];
      } else {
        this.lastChar[0] = buf[buf.length - 2];
        this.lastChar[1] = buf[buf.length - 1];
      }
      return buf.toString('base64', i, buf.length - n);
    }

    function base64End(buf) {
      var r = buf && buf.length ? this.write(buf) : '';
      if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);
      return r;
    }

    // Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)
    function simpleWrite(buf) {
      return buf.toString(this.encoding);
    }

    function simpleEnd(buf) {
      return buf && buf.length ? this.write(buf) : '';
    }

    var ERR_STREAM_PREMATURE_CLOSE = errors.codes.ERR_STREAM_PREMATURE_CLOSE;

    function once$5(callback) {
      var called = false;
      return function () {
        if (called) return;
        called = true;

        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        callback.apply(this, args);
      };
    }

    function noop$7() {}

    function isRequest$1(stream) {
      return stream.setHeader && typeof stream.abort === 'function';
    }

    function eos$1(stream, opts, callback) {
      if (typeof opts === 'function') return eos$1(stream, null, opts);
      if (!opts) opts = {};
      callback = once$5(callback || noop$7);
      var readable = opts.readable || opts.readable !== false && stream.readable;
      var writable = opts.writable || opts.writable !== false && stream.writable;

      var onlegacyfinish = function onlegacyfinish() {
        if (!stream.writable) onfinish();
      };

      var writableEnded = stream._writableState && stream._writableState.finished;

      var onfinish = function onfinish() {
        writable = false;
        writableEnded = true;
        if (!readable) callback.call(stream);
      };

      var readableEnded = stream._readableState && stream._readableState.endEmitted;

      var onend = function onend() {
        readable = false;
        readableEnded = true;
        if (!writable) callback.call(stream);
      };

      var onerror = function onerror(err) {
        callback.call(stream, err);
      };

      var onclose = function onclose() {
        var err;

        if (readable && !readableEnded) {
          if (!stream._readableState || !stream._readableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();
          return callback.call(stream, err);
        }

        if (writable && !writableEnded) {
          if (!stream._writableState || !stream._writableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();
          return callback.call(stream, err);
        }
      };

      var onrequest = function onrequest() {
        stream.req.on('finish', onfinish);
      };

      if (isRequest$1(stream)) {
        stream.on('complete', onfinish);
        stream.on('abort', onclose);
        if (stream.req) onrequest();else stream.on('request', onrequest);
      } else if (writable && !stream._writableState) {
        // legacy streams
        stream.on('end', onlegacyfinish);
        stream.on('close', onlegacyfinish);
      }

      stream.on('end', onend);
      stream.on('finish', onfinish);
      if (opts.error !== false) stream.on('error', onerror);
      stream.on('close', onclose);
      return function () {
        stream.removeListener('complete', onfinish);
        stream.removeListener('abort', onclose);
        stream.removeListener('request', onrequest);
        if (stream.req) stream.req.removeListener('finish', onfinish);
        stream.removeListener('end', onlegacyfinish);
        stream.removeListener('close', onlegacyfinish);
        stream.removeListener('finish', onfinish);
        stream.removeListener('end', onend);
        stream.removeListener('error', onerror);
        stream.removeListener('close', onclose);
      };
    }

    var endOfStream = eos$1;

    var _Object$setPrototypeO;

    function _defineProperty$2(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

    var finished = endOfStream;

    var kLastResolve = Symbol('lastResolve');
    var kLastReject = Symbol('lastReject');
    var kError = Symbol('error');
    var kEnded = Symbol('ended');
    var kLastPromise = Symbol('lastPromise');
    var kHandlePromise = Symbol('handlePromise');
    var kStream = Symbol('stream');

    function createIterResult(value, done) {
      return {
        value: value,
        done: done
      };
    }

    function readAndResolve(iter) {
      var resolve = iter[kLastResolve];

      if (resolve !== null) {
        var data = iter[kStream].read(); // we defer if data is null
        // we can be expecting either 'end' or
        // 'error'

        if (data !== null) {
          iter[kLastPromise] = null;
          iter[kLastResolve] = null;
          iter[kLastReject] = null;
          resolve(createIterResult(data, false));
        }
      }
    }

    function onReadable(iter) {
      // we wait for the next tick, because it might
      // emit an error with process.nextTick
      process.nextTick(readAndResolve, iter);
    }

    function wrapForNext(lastPromise, iter) {
      return function (resolve, reject) {
        lastPromise.then(function () {
          if (iter[kEnded]) {
            resolve(createIterResult(undefined, true));
            return;
          }

          iter[kHandlePromise](resolve, reject);
        }, reject);
      };
    }

    var AsyncIteratorPrototype = Object.getPrototypeOf(function () {});
    var ReadableStreamAsyncIteratorPrototype = Object.setPrototypeOf((_Object$setPrototypeO = {
      get stream() {
        return this[kStream];
      },

      next: function next() {
        var _this = this;

        // if we have detected an error in the meanwhile
        // reject straight away
        var error = this[kError];

        if (error !== null) {
          return Promise.reject(error);
        }

        if (this[kEnded]) {
          return Promise.resolve(createIterResult(undefined, true));
        }

        if (this[kStream].destroyed) {
          // We need to defer via nextTick because if .destroy(err) is
          // called, the error will be emitted via nextTick, and
          // we cannot guarantee that there is no error lingering around
          // waiting to be emitted.
          return new Promise(function (resolve, reject) {
            process.nextTick(function () {
              if (_this[kError]) {
                reject(_this[kError]);
              } else {
                resolve(createIterResult(undefined, true));
              }
            });
          });
        } // if we have multiple next() calls
        // we will wait for the previous Promise to finish
        // this logic is optimized to support for await loops,
        // where next() is only called once at a time


        var lastPromise = this[kLastPromise];
        var promise;

        if (lastPromise) {
          promise = new Promise(wrapForNext(lastPromise, this));
        } else {
          // fast path needed to support multiple this.push()
          // without triggering the next() queue
          var data = this[kStream].read();

          if (data !== null) {
            return Promise.resolve(createIterResult(data, false));
          }

          promise = new Promise(this[kHandlePromise]);
        }

        this[kLastPromise] = promise;
        return promise;
      }
    }, _defineProperty$2(_Object$setPrototypeO, Symbol.asyncIterator, function () {
      return this;
    }), _defineProperty$2(_Object$setPrototypeO, "return", function _return() {
      var _this2 = this;

      // destroy(err, cb) is a private API
      // we can guarantee we have that here, because we control the
      // Readable class this is attached to
      return new Promise(function (resolve, reject) {
        _this2[kStream].destroy(null, function (err) {
          if (err) {
            reject(err);
            return;
          }

          resolve(createIterResult(undefined, true));
        });
      });
    }), _Object$setPrototypeO), AsyncIteratorPrototype);

    var createReadableStreamAsyncIterator$1 = function createReadableStreamAsyncIterator(stream) {
      var _Object$create;

      var iterator = Object.create(ReadableStreamAsyncIteratorPrototype, (_Object$create = {}, _defineProperty$2(_Object$create, kStream, {
        value: stream,
        writable: true
      }), _defineProperty$2(_Object$create, kLastResolve, {
        value: null,
        writable: true
      }), _defineProperty$2(_Object$create, kLastReject, {
        value: null,
        writable: true
      }), _defineProperty$2(_Object$create, kError, {
        value: null,
        writable: true
      }), _defineProperty$2(_Object$create, kEnded, {
        value: stream._readableState.endEmitted,
        writable: true
      }), _defineProperty$2(_Object$create, kHandlePromise, {
        value: function value(resolve, reject) {
          var data = iterator[kStream].read();

          if (data) {
            iterator[kLastPromise] = null;
            iterator[kLastResolve] = null;
            iterator[kLastReject] = null;
            resolve(createIterResult(data, false));
          } else {
            iterator[kLastResolve] = resolve;
            iterator[kLastReject] = reject;
          }
        },
        writable: true
      }), _Object$create));
      iterator[kLastPromise] = null;
      finished(stream, function (err) {
        if (err && err.code !== 'ERR_STREAM_PREMATURE_CLOSE') {
          var reject = iterator[kLastReject]; // reject if we are waiting for data in the Promise
          // returned by next() and store the error

          if (reject !== null) {
            iterator[kLastPromise] = null;
            iterator[kLastResolve] = null;
            iterator[kLastReject] = null;
            reject(err);
          }

          iterator[kError] = err;
          return;
        }

        var resolve = iterator[kLastResolve];

        if (resolve !== null) {
          iterator[kLastPromise] = null;
          iterator[kLastResolve] = null;
          iterator[kLastReject] = null;
          resolve(createIterResult(undefined, true));
        }

        iterator[kEnded] = true;
      });
      stream.on('readable', onReadable.bind(null, iterator));
      return iterator;
    };

    var async_iterator = createReadableStreamAsyncIterator$1;

    function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

    function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

    function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

    function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty$1(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

    function _defineProperty$1(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

    var ERR_INVALID_ARG_TYPE$1 = errors.codes.ERR_INVALID_ARG_TYPE;

    function from$4(Readable, iterable, opts) {
      var iterator;

      if (iterable && typeof iterable.next === 'function') {
        iterator = iterable;
      } else if (iterable && iterable[Symbol.asyncIterator]) iterator = iterable[Symbol.asyncIterator]();else if (iterable && iterable[Symbol.iterator]) iterator = iterable[Symbol.iterator]();else throw new ERR_INVALID_ARG_TYPE$1('iterable', ['Iterable'], iterable);

      var readable = new Readable(_objectSpread({
        objectMode: true
      }, opts)); // Reading boolean to protect against _read
      // being called before last iteration completion.

      var reading = false;

      readable._read = function () {
        if (!reading) {
          reading = true;
          next();
        }
      };

      function next() {
        return _next2.apply(this, arguments);
      }

      function _next2() {
        _next2 = _asyncToGenerator(function* () {
          try {
            var _ref = yield iterator.next(),
                value = _ref.value,
                done = _ref.done;

            if (done) {
              readable.push(null);
            } else if (readable.push((yield value))) {
              next();
            } else {
              reading = false;
            }
          } catch (err) {
            readable.destroy(err);
          }
        });
        return _next2.apply(this, arguments);
      }

      return readable;
    }

    var from_1 = from$4;

    var _stream_readable = Readable;
    /*<replacement>*/

    var Duplex$1;
    /*</replacement>*/

    Readable.ReadableState = ReadableState;
    /*<replacement>*/

    require$$2__default["default"].EventEmitter;

    var EElistenerCount = function EElistenerCount(emitter, type) {
      return emitter.listeners(type).length;
    };
    /*</replacement>*/

    /*<replacement>*/


    var Stream$1 = stream;
    /*</replacement>*/


    var Buffer$j = require$$0__default$2["default"].Buffer;

    var OurUint8Array = commonjsGlobal.Uint8Array || function () {};

    function _uint8ArrayToBuffer(chunk) {
      return Buffer$j.from(chunk);
    }

    function _isUint8Array(obj) {
      return Buffer$j.isBuffer(obj) || obj instanceof OurUint8Array;
    }
    /*<replacement>*/


    var debugUtil = require$$0__default["default"];

    var debug$2;

    if (debugUtil && debugUtil.debuglog) {
      debug$2 = debugUtil.debuglog('stream');
    } else {
      debug$2 = function debug() {};
    }
    /*</replacement>*/


    var BufferList$4 = buffer_list;

    var destroyImpl = destroy_1;

    var _require = state,
        getHighWaterMark = _require.getHighWaterMark;

    var _require$codes$2 = errors.codes,
        ERR_INVALID_ARG_TYPE = _require$codes$2.ERR_INVALID_ARG_TYPE,
        ERR_STREAM_PUSH_AFTER_EOF = _require$codes$2.ERR_STREAM_PUSH_AFTER_EOF,
        ERR_METHOD_NOT_IMPLEMENTED$1 = _require$codes$2.ERR_METHOD_NOT_IMPLEMENTED,
        ERR_STREAM_UNSHIFT_AFTER_END_EVENT = _require$codes$2.ERR_STREAM_UNSHIFT_AFTER_END_EVENT; // Lazy loaded to improve the startup performance.


    var StringDecoder$2;
    var createReadableStreamAsyncIterator;
    var from$3;

    inherits$3.exports(Readable, Stream$1);

    var errorOrDestroy = destroyImpl.errorOrDestroy;
    var kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];

    function prependListener(emitter, event, fn) {
      // Sadly this is not cacheable as some libraries bundle their own
      // event emitter implementation with them.
      if (typeof emitter.prependListener === 'function') return emitter.prependListener(event, fn); // This is a hack to make sure that our error handler is attached before any
      // userland ones.  NEVER DO THIS. This is here only because this code needs
      // to continue to work with older versions of Node.js that do not include
      // the prependListener() method. The goal is to eventually remove this hack.

      if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (Array.isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];
    }

    function ReadableState(options, stream, isDuplex) {
      Duplex$1 = Duplex$1 || _stream_duplex;
      options = options || {}; // Duplex streams are both readable and writable, but share
      // the same options object.
      // However, some cases require setting options to different
      // values for the readable and the writable sides of the duplex stream.
      // These options can be provided separately as readableXXX and writableXXX.

      if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof Duplex$1; // object stream flag. Used to make read(n) ignore n and to
      // make all the buffer merging and length checks go away

      this.objectMode = !!options.objectMode;
      if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode; // the point at which it stops calling _read() to fill the buffer
      // Note: 0 is a valid value, means "don't call _read preemptively ever"

      this.highWaterMark = getHighWaterMark(this, options, 'readableHighWaterMark', isDuplex); // A linked list is used to store data chunks instead of an array because the
      // linked list can remove elements from the beginning faster than
      // array.shift()

      this.buffer = new BufferList$4();
      this.length = 0;
      this.pipes = null;
      this.pipesCount = 0;
      this.flowing = null;
      this.ended = false;
      this.endEmitted = false;
      this.reading = false; // a flag to be able to tell if the event 'readable'/'data' is emitted
      // immediately, or on a later tick.  We set this to true at first, because
      // any actions that shouldn't happen until "later" should generally also
      // not happen before the first read call.

      this.sync = true; // whenever we return null, then we set a flag to say
      // that we're awaiting a 'readable' event emission.

      this.needReadable = false;
      this.emittedReadable = false;
      this.readableListening = false;
      this.resumeScheduled = false;
      this.paused = true; // Should close be emitted on destroy. Defaults to true.

      this.emitClose = options.emitClose !== false; // Should .destroy() be called after 'end' (and potentially 'finish')

      this.autoDestroy = !!options.autoDestroy; // has it been destroyed

      this.destroyed = false; // Crypto is kind of old and crusty.  Historically, its default string
      // encoding is 'binary' so we have to make this configurable.
      // Everything else in the universe uses 'utf8', though.

      this.defaultEncoding = options.defaultEncoding || 'utf8'; // the number of writers that are awaiting a drain event in .pipe()s

      this.awaitDrain = 0; // if true, a maybeReadMore has been scheduled

      this.readingMore = false;
      this.decoder = null;
      this.encoding = null;

      if (options.encoding) {
        if (!StringDecoder$2) StringDecoder$2 = string_decoder.StringDecoder;
        this.decoder = new StringDecoder$2(options.encoding);
        this.encoding = options.encoding;
      }
    }

    function Readable(options) {
      Duplex$1 = Duplex$1 || _stream_duplex;
      if (!(this instanceof Readable)) return new Readable(options); // Checking for a Stream.Duplex instance is faster here instead of inside
      // the ReadableState constructor, at least with V8 6.5

      var isDuplex = this instanceof Duplex$1;
      this._readableState = new ReadableState(options, this, isDuplex); // legacy

      this.readable = true;

      if (options) {
        if (typeof options.read === 'function') this._read = options.read;
        if (typeof options.destroy === 'function') this._destroy = options.destroy;
      }

      Stream$1.call(this);
    }

    Object.defineProperty(Readable.prototype, 'destroyed', {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get() {
        if (this._readableState === undefined) {
          return false;
        }

        return this._readableState.destroyed;
      },
      set: function set(value) {
        // we ignore the value if the stream
        // has not been initialized yet
        if (!this._readableState) {
          return;
        } // backward compatibility, the user is explicitly
        // managing destroyed


        this._readableState.destroyed = value;
      }
    });
    Readable.prototype.destroy = destroyImpl.destroy;
    Readable.prototype._undestroy = destroyImpl.undestroy;

    Readable.prototype._destroy = function (err, cb) {
      cb(err);
    }; // Manually shove something into the read() buffer.
    // This returns true if the highWaterMark has not been hit yet,
    // similar to how Writable.write() returns true if you should
    // write() some more.


    Readable.prototype.push = function (chunk, encoding) {
      var state = this._readableState;
      var skipChunkCheck;

      if (!state.objectMode) {
        if (typeof chunk === 'string') {
          encoding = encoding || state.defaultEncoding;

          if (encoding !== state.encoding) {
            chunk = Buffer$j.from(chunk, encoding);
            encoding = '';
          }

          skipChunkCheck = true;
        }
      } else {
        skipChunkCheck = true;
      }

      return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
    }; // Unshift should *always* be something directly out of read()


    Readable.prototype.unshift = function (chunk) {
      return readableAddChunk(this, chunk, null, true, false);
    };

    function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
      debug$2('readableAddChunk', chunk);
      var state = stream._readableState;

      if (chunk === null) {
        state.reading = false;
        onEofChunk(stream, state);
      } else {
        var er;
        if (!skipChunkCheck) er = chunkInvalid(state, chunk);

        if (er) {
          errorOrDestroy(stream, er);
        } else if (state.objectMode || chunk && chunk.length > 0) {
          if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer$j.prototype) {
            chunk = _uint8ArrayToBuffer(chunk);
          }

          if (addToFront) {
            if (state.endEmitted) errorOrDestroy(stream, new ERR_STREAM_UNSHIFT_AFTER_END_EVENT());else addChunk(stream, state, chunk, true);
          } else if (state.ended) {
            errorOrDestroy(stream, new ERR_STREAM_PUSH_AFTER_EOF());
          } else if (state.destroyed) {
            return false;
          } else {
            state.reading = false;

            if (state.decoder && !encoding) {
              chunk = state.decoder.write(chunk);
              if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);else maybeReadMore(stream, state);
            } else {
              addChunk(stream, state, chunk, false);
            }
          }
        } else if (!addToFront) {
          state.reading = false;
          maybeReadMore(stream, state);
        }
      } // We can push more data if we are below the highWaterMark.
      // Also, if we have no data yet, we can stand some more bytes.
      // This is to work around cases where hwm=0, such as the repl.


      return !state.ended && (state.length < state.highWaterMark || state.length === 0);
    }

    function addChunk(stream, state, chunk, addToFront) {
      if (state.flowing && state.length === 0 && !state.sync) {
        state.awaitDrain = 0;
        stream.emit('data', chunk);
      } else {
        // update the buffer info.
        state.length += state.objectMode ? 1 : chunk.length;
        if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);
        if (state.needReadable) emitReadable(stream);
      }

      maybeReadMore(stream, state);
    }

    function chunkInvalid(state, chunk) {
      var er;

      if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
        er = new ERR_INVALID_ARG_TYPE('chunk', ['string', 'Buffer', 'Uint8Array'], chunk);
      }

      return er;
    }

    Readable.prototype.isPaused = function () {
      return this._readableState.flowing === false;
    }; // backwards compatibility.


    Readable.prototype.setEncoding = function (enc) {
      if (!StringDecoder$2) StringDecoder$2 = string_decoder.StringDecoder;
      var decoder = new StringDecoder$2(enc);
      this._readableState.decoder = decoder; // If setEncoding(null), decoder.encoding equals utf8

      this._readableState.encoding = this._readableState.decoder.encoding; // Iterate over current buffer to convert already stored Buffers:

      var p = this._readableState.buffer.head;
      var content = '';

      while (p !== null) {
        content += decoder.write(p.data);
        p = p.next;
      }

      this._readableState.buffer.clear();

      if (content !== '') this._readableState.buffer.push(content);
      this._readableState.length = content.length;
      return this;
    }; // Don't raise the hwm > 1GB


    var MAX_HWM = 0x40000000;

    function computeNewHighWaterMark(n) {
      if (n >= MAX_HWM) {
        // TODO(ronag): Throw ERR_VALUE_OUT_OF_RANGE.
        n = MAX_HWM;
      } else {
        // Get the next highest power of 2 to prevent increasing hwm excessively in
        // tiny amounts
        n--;
        n |= n >>> 1;
        n |= n >>> 2;
        n |= n >>> 4;
        n |= n >>> 8;
        n |= n >>> 16;
        n++;
      }

      return n;
    } // This function is designed to be inlinable, so please take care when making
    // changes to the function body.


    function howMuchToRead(n, state) {
      if (n <= 0 || state.length === 0 && state.ended) return 0;
      if (state.objectMode) return 1;

      if (n !== n) {
        // Only flow one buffer at a time
        if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
      } // If we're asking for more than the current hwm, then raise the hwm.


      if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
      if (n <= state.length) return n; // Don't have enough

      if (!state.ended) {
        state.needReadable = true;
        return 0;
      }

      return state.length;
    } // you can override either this method, or the async _read(n) below.


    Readable.prototype.read = function (n) {
      debug$2('read', n);
      n = parseInt(n, 10);
      var state = this._readableState;
      var nOrig = n;
      if (n !== 0) state.emittedReadable = false; // if we're doing read(0) to trigger a readable event, but we
      // already have a bunch of data in the buffer, then just trigger
      // the 'readable' event and move on.

      if (n === 0 && state.needReadable && ((state.highWaterMark !== 0 ? state.length >= state.highWaterMark : state.length > 0) || state.ended)) {
        debug$2('read: emitReadable', state.length, state.ended);
        if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
        return null;
      }

      n = howMuchToRead(n, state); // if we've ended, and we're now clear, then finish it up.

      if (n === 0 && state.ended) {
        if (state.length === 0) endReadable(this);
        return null;
      } // All the actual chunk generation logic needs to be
      // *below* the call to _read.  The reason is that in certain
      // synthetic stream cases, such as passthrough streams, _read
      // may be a completely synchronous operation which may change
      // the state of the read buffer, providing enough data when
      // before there was *not* enough.
      //
      // So, the steps are:
      // 1. Figure out what the state of things will be after we do
      // a read from the buffer.
      //
      // 2. If that resulting state will trigger a _read, then call _read.
      // Note that this may be asynchronous, or synchronous.  Yes, it is
      // deeply ugly to write APIs this way, but that still doesn't mean
      // that the Readable class should behave improperly, as streams are
      // designed to be sync/async agnostic.
      // Take note if the _read call is sync or async (ie, if the read call
      // has returned yet), so that we know whether or not it's safe to emit
      // 'readable' etc.
      //
      // 3. Actually pull the requested chunks out of the buffer and return.
      // if we need a readable event, then we need to do some reading.


      var doRead = state.needReadable;
      debug$2('need readable', doRead); // if we currently have less than the highWaterMark, then also read some

      if (state.length === 0 || state.length - n < state.highWaterMark) {
        doRead = true;
        debug$2('length less than watermark', doRead);
      } // however, if we've ended, then there's no point, and if we're already
      // reading, then it's unnecessary.


      if (state.ended || state.reading) {
        doRead = false;
        debug$2('reading or ended', doRead);
      } else if (doRead) {
        debug$2('do read');
        state.reading = true;
        state.sync = true; // if the length is currently zero, then we *need* a readable event.

        if (state.length === 0) state.needReadable = true; // call internal read method

        this._read(state.highWaterMark);

        state.sync = false; // If _read pushed data synchronously, then `reading` will be false,
        // and we need to re-evaluate how much data we can return to the user.

        if (!state.reading) n = howMuchToRead(nOrig, state);
      }

      var ret;
      if (n > 0) ret = fromList(n, state);else ret = null;

      if (ret === null) {
        state.needReadable = state.length <= state.highWaterMark;
        n = 0;
      } else {
        state.length -= n;
        state.awaitDrain = 0;
      }

      if (state.length === 0) {
        // If we have nothing in the buffer, then we want to know
        // as soon as we *do* get something into the buffer.
        if (!state.ended) state.needReadable = true; // If we tried to read() past the EOF, then emit end on the next tick.

        if (nOrig !== n && state.ended) endReadable(this);
      }

      if (ret !== null) this.emit('data', ret);
      return ret;
    };

    function onEofChunk(stream, state) {
      debug$2('onEofChunk');
      if (state.ended) return;

      if (state.decoder) {
        var chunk = state.decoder.end();

        if (chunk && chunk.length) {
          state.buffer.push(chunk);
          state.length += state.objectMode ? 1 : chunk.length;
        }
      }

      state.ended = true;

      if (state.sync) {
        // if we are sync, wait until next tick to emit the data.
        // Otherwise we risk emitting data in the flow()
        // the readable code triggers during a read() call
        emitReadable(stream);
      } else {
        // emit 'readable' now to make sure it gets picked up.
        state.needReadable = false;

        if (!state.emittedReadable) {
          state.emittedReadable = true;
          emitReadable_(stream);
        }
      }
    } // Don't emit readable right away in sync mode, because this can trigger
    // another read() call => stack overflow.  This way, it might trigger
    // a nextTick recursion warning, but that's not so bad.


    function emitReadable(stream) {
      var state = stream._readableState;
      debug$2('emitReadable', state.needReadable, state.emittedReadable);
      state.needReadable = false;

      if (!state.emittedReadable) {
        debug$2('emitReadable', state.flowing);
        state.emittedReadable = true;
        process.nextTick(emitReadable_, stream);
      }
    }

    function emitReadable_(stream) {
      var state = stream._readableState;
      debug$2('emitReadable_', state.destroyed, state.length, state.ended);

      if (!state.destroyed && (state.length || state.ended)) {
        stream.emit('readable');
        state.emittedReadable = false;
      } // The stream needs another readable event if
      // 1. It is not flowing, as the flow mechanism will take
      //    care of it.
      // 2. It is not ended.
      // 3. It is below the highWaterMark, so we can schedule
      //    another readable later.


      state.needReadable = !state.flowing && !state.ended && state.length <= state.highWaterMark;
      flow(stream);
    } // at this point, the user has presumably seen the 'readable' event,
    // and called read() to consume some data.  that may have triggered
    // in turn another _read(n) call, in which case reading = true if
    // it's in progress.
    // However, if we're not ended, or reading, and the length < hwm,
    // then go ahead and try to read some more preemptively.


    function maybeReadMore(stream, state) {
      if (!state.readingMore) {
        state.readingMore = true;
        process.nextTick(maybeReadMore_, stream, state);
      }
    }

    function maybeReadMore_(stream, state) {
      // Attempt to read more data if we should.
      //
      // The conditions for reading more data are (one of):
      // - Not enough data buffered (state.length < state.highWaterMark). The loop
      //   is responsible for filling the buffer with enough data if such data
      //   is available. If highWaterMark is 0 and we are not in the flowing mode
      //   we should _not_ attempt to buffer any extra data. We'll get more data
      //   when the stream consumer calls read() instead.
      // - No data in the buffer, and the stream is in flowing mode. In this mode
      //   the loop below is responsible for ensuring read() is called. Failing to
      //   call read here would abort the flow and there's no other mechanism for
      //   continuing the flow if the stream consumer has just subscribed to the
      //   'data' event.
      //
      // In addition to the above conditions to keep reading data, the following
      // conditions prevent the data from being read:
      // - The stream has ended (state.ended).
      // - There is already a pending 'read' operation (state.reading). This is a
      //   case where the the stream has called the implementation defined _read()
      //   method, but they are processing the call asynchronously and have _not_
      //   called push() with new data. In this case we skip performing more
      //   read()s. The execution ends in this method again after the _read() ends
      //   up calling push() with more data.
      while (!state.reading && !state.ended && (state.length < state.highWaterMark || state.flowing && state.length === 0)) {
        var len = state.length;
        debug$2('maybeReadMore read 0');
        stream.read(0);
        if (len === state.length) // didn't get any data, stop spinning.
          break;
      }

      state.readingMore = false;
    } // abstract method.  to be overridden in specific implementation classes.
    // call cb(er, data) where data is <= n in length.
    // for virtual (non-string, non-buffer) streams, "length" is somewhat
    // arbitrary, and perhaps not very meaningful.


    Readable.prototype._read = function (n) {
      errorOrDestroy(this, new ERR_METHOD_NOT_IMPLEMENTED$1('_read()'));
    };

    Readable.prototype.pipe = function (dest, pipeOpts) {
      var src = this;
      var state = this._readableState;

      switch (state.pipesCount) {
        case 0:
          state.pipes = dest;
          break;

        case 1:
          state.pipes = [state.pipes, dest];
          break;

        default:
          state.pipes.push(dest);
          break;
      }

      state.pipesCount += 1;
      debug$2('pipe count=%d opts=%j', state.pipesCount, pipeOpts);
      var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;
      var endFn = doEnd ? onend : unpipe;
      if (state.endEmitted) process.nextTick(endFn);else src.once('end', endFn);
      dest.on('unpipe', onunpipe);

      function onunpipe(readable, unpipeInfo) {
        debug$2('onunpipe');

        if (readable === src) {
          if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
            unpipeInfo.hasUnpiped = true;
            cleanup();
          }
        }
      }

      function onend() {
        debug$2('onend');
        dest.end();
      } // when the dest drains, it reduces the awaitDrain counter
      // on the source.  This would be more elegant with a .once()
      // handler in flow(), but adding and removing repeatedly is
      // too slow.


      var ondrain = pipeOnDrain(src);
      dest.on('drain', ondrain);
      var cleanedUp = false;

      function cleanup() {
        debug$2('cleanup'); // cleanup event handlers once the pipe is broken

        dest.removeListener('close', onclose);
        dest.removeListener('finish', onfinish);
        dest.removeListener('drain', ondrain);
        dest.removeListener('error', onerror);
        dest.removeListener('unpipe', onunpipe);
        src.removeListener('end', onend);
        src.removeListener('end', unpipe);
        src.removeListener('data', ondata);
        cleanedUp = true; // if the reader is waiting for a drain event from this
        // specific writer, then it would cause it to never start
        // flowing again.
        // So, if this is awaiting a drain, then we just call it now.
        // If we don't know, then assume that we are waiting for one.

        if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
      }

      src.on('data', ondata);

      function ondata(chunk) {
        debug$2('ondata');
        var ret = dest.write(chunk);
        debug$2('dest.write', ret);

        if (ret === false) {
          // If the user unpiped during `dest.write()`, it is possible
          // to get stuck in a permanently paused state if that write
          // also returned false.
          // => Check whether `dest` is still a piping destination.
          if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
            debug$2('false write response, pause', state.awaitDrain);
            state.awaitDrain++;
          }

          src.pause();
        }
      } // if the dest has an error, then stop piping into it.
      // however, don't suppress the throwing behavior for this.


      function onerror(er) {
        debug$2('onerror', er);
        unpipe();
        dest.removeListener('error', onerror);
        if (EElistenerCount(dest, 'error') === 0) errorOrDestroy(dest, er);
      } // Make sure our error handler is attached before userland ones.


      prependListener(dest, 'error', onerror); // Both close and finish should trigger unpipe, but only once.

      function onclose() {
        dest.removeListener('finish', onfinish);
        unpipe();
      }

      dest.once('close', onclose);

      function onfinish() {
        debug$2('onfinish');
        dest.removeListener('close', onclose);
        unpipe();
      }

      dest.once('finish', onfinish);

      function unpipe() {
        debug$2('unpipe');
        src.unpipe(dest);
      } // tell the dest that it's being piped to


      dest.emit('pipe', src); // start the flow if it hasn't been started already.

      if (!state.flowing) {
        debug$2('pipe resume');
        src.resume();
      }

      return dest;
    };

    function pipeOnDrain(src) {
      return function pipeOnDrainFunctionResult() {
        var state = src._readableState;
        debug$2('pipeOnDrain', state.awaitDrain);
        if (state.awaitDrain) state.awaitDrain--;

        if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
          state.flowing = true;
          flow(src);
        }
      };
    }

    Readable.prototype.unpipe = function (dest) {
      var state = this._readableState;
      var unpipeInfo = {
        hasUnpiped: false
      }; // if we're not piping anywhere, then do nothing.

      if (state.pipesCount === 0) return this; // just one destination.  most common case.

      if (state.pipesCount === 1) {
        // passed in one, but it's not the right one.
        if (dest && dest !== state.pipes) return this;
        if (!dest) dest = state.pipes; // got a match.

        state.pipes = null;
        state.pipesCount = 0;
        state.flowing = false;
        if (dest) dest.emit('unpipe', this, unpipeInfo);
        return this;
      } // slow case. multiple pipe destinations.


      if (!dest) {
        // remove all.
        var dests = state.pipes;
        var len = state.pipesCount;
        state.pipes = null;
        state.pipesCount = 0;
        state.flowing = false;

        for (var i = 0; i < len; i++) {
          dests[i].emit('unpipe', this, {
            hasUnpiped: false
          });
        }

        return this;
      } // try to find the right one.


      var index = indexOf(state.pipes, dest);
      if (index === -1) return this;
      state.pipes.splice(index, 1);
      state.pipesCount -= 1;
      if (state.pipesCount === 1) state.pipes = state.pipes[0];
      dest.emit('unpipe', this, unpipeInfo);
      return this;
    }; // set up data events if they are asked for
    // Ensure readable listeners eventually get something


    Readable.prototype.on = function (ev, fn) {
      var res = Stream$1.prototype.on.call(this, ev, fn);
      var state = this._readableState;

      if (ev === 'data') {
        // update readableListening so that resume() may be a no-op
        // a few lines down. This is needed to support once('readable').
        state.readableListening = this.listenerCount('readable') > 0; // Try start flowing on next tick if stream isn't explicitly paused

        if (state.flowing !== false) this.resume();
      } else if (ev === 'readable') {
        if (!state.endEmitted && !state.readableListening) {
          state.readableListening = state.needReadable = true;
          state.flowing = false;
          state.emittedReadable = false;
          debug$2('on readable', state.length, state.reading);

          if (state.length) {
            emitReadable(this);
          } else if (!state.reading) {
            process.nextTick(nReadingNextTick, this);
          }
        }
      }

      return res;
    };

    Readable.prototype.addListener = Readable.prototype.on;

    Readable.prototype.removeListener = function (ev, fn) {
      var res = Stream$1.prototype.removeListener.call(this, ev, fn);

      if (ev === 'readable') {
        // We need to check if there is someone still listening to
        // readable and reset the state. However this needs to happen
        // after readable has been emitted but before I/O (nextTick) to
        // support once('readable', fn) cycles. This means that calling
        // resume within the same tick will have no
        // effect.
        process.nextTick(updateReadableListening, this);
      }

      return res;
    };

    Readable.prototype.removeAllListeners = function (ev) {
      var res = Stream$1.prototype.removeAllListeners.apply(this, arguments);

      if (ev === 'readable' || ev === undefined) {
        // We need to check if there is someone still listening to
        // readable and reset the state. However this needs to happen
        // after readable has been emitted but before I/O (nextTick) to
        // support once('readable', fn) cycles. This means that calling
        // resume within the same tick will have no
        // effect.
        process.nextTick(updateReadableListening, this);
      }

      return res;
    };

    function updateReadableListening(self) {
      var state = self._readableState;
      state.readableListening = self.listenerCount('readable') > 0;

      if (state.resumeScheduled && !state.paused) {
        // flowing needs to be set to true now, otherwise
        // the upcoming resume will not flow.
        state.flowing = true; // crude way to check if we should resume
      } else if (self.listenerCount('data') > 0) {
        self.resume();
      }
    }

    function nReadingNextTick(self) {
      debug$2('readable nexttick read 0');
      self.read(0);
    } // pause() and resume() are remnants of the legacy readable stream API
    // If the user uses them, then switch into old mode.


    Readable.prototype.resume = function () {
      var state = this._readableState;

      if (!state.flowing) {
        debug$2('resume'); // we flow only if there is no one listening
        // for readable, but we still have to call
        // resume()

        state.flowing = !state.readableListening;
        resume(this, state);
      }

      state.paused = false;
      return this;
    };

    function resume(stream, state) {
      if (!state.resumeScheduled) {
        state.resumeScheduled = true;
        process.nextTick(resume_, stream, state);
      }
    }

    function resume_(stream, state) {
      debug$2('resume', state.reading);

      if (!state.reading) {
        stream.read(0);
      }

      state.resumeScheduled = false;
      stream.emit('resume');
      flow(stream);
      if (state.flowing && !state.reading) stream.read(0);
    }

    Readable.prototype.pause = function () {
      debug$2('call pause flowing=%j', this._readableState.flowing);

      if (this._readableState.flowing !== false) {
        debug$2('pause');
        this._readableState.flowing = false;
        this.emit('pause');
      }

      this._readableState.paused = true;
      return this;
    };

    function flow(stream) {
      var state = stream._readableState;
      debug$2('flow', state.flowing);

      while (state.flowing && stream.read() !== null) {
      }
    } // wrap an old-style stream as the async data source.
    // This is *not* part of the readable stream interface.
    // It is an ugly unfortunate mess of history.


    Readable.prototype.wrap = function (stream) {
      var _this = this;

      var state = this._readableState;
      var paused = false;
      stream.on('end', function () {
        debug$2('wrapped end');

        if (state.decoder && !state.ended) {
          var chunk = state.decoder.end();
          if (chunk && chunk.length) _this.push(chunk);
        }

        _this.push(null);
      });
      stream.on('data', function (chunk) {
        debug$2('wrapped data');
        if (state.decoder) chunk = state.decoder.write(chunk); // don't skip over falsy values in objectMode

        if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;

        var ret = _this.push(chunk);

        if (!ret) {
          paused = true;
          stream.pause();
        }
      }); // proxy all the other methods.
      // important when wrapping filters and duplexes.

      for (var i in stream) {
        if (this[i] === undefined && typeof stream[i] === 'function') {
          this[i] = function methodWrap(method) {
            return function methodWrapReturnFunction() {
              return stream[method].apply(stream, arguments);
            };
          }(i);
        }
      } // proxy certain important events.


      for (var n = 0; n < kProxyEvents.length; n++) {
        stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));
      } // when we try to consume some more bytes, simply unpause the
      // underlying stream.


      this._read = function (n) {
        debug$2('wrapped _read', n);

        if (paused) {
          paused = false;
          stream.resume();
        }
      };

      return this;
    };

    if (typeof Symbol === 'function') {
      Readable.prototype[Symbol.asyncIterator] = function () {
        if (createReadableStreamAsyncIterator === undefined) {
          createReadableStreamAsyncIterator = async_iterator;
        }

        return createReadableStreamAsyncIterator(this);
      };
    }

    Object.defineProperty(Readable.prototype, 'readableHighWaterMark', {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get() {
        return this._readableState.highWaterMark;
      }
    });
    Object.defineProperty(Readable.prototype, 'readableBuffer', {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get() {
        return this._readableState && this._readableState.buffer;
      }
    });
    Object.defineProperty(Readable.prototype, 'readableFlowing', {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get() {
        return this._readableState.flowing;
      },
      set: function set(state) {
        if (this._readableState) {
          this._readableState.flowing = state;
        }
      }
    }); // exposed for testing purposes only.

    Readable._fromList = fromList;
    Object.defineProperty(Readable.prototype, 'readableLength', {
      // making it explicit this property is not enumerable
      // because otherwise some prototype manipulation in
      // userland will fail
      enumerable: false,
      get: function get() {
        return this._readableState.length;
      }
    }); // Pluck off n bytes from an array of buffers.
    // Length is the combined lengths of all the buffers in the list.
    // This function is designed to be inlinable, so please take care when making
    // changes to the function body.

    function fromList(n, state) {
      // nothing buffered
      if (state.length === 0) return null;
      var ret;
      if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
        // read it all, truncate the list
        if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.first();else ret = state.buffer.concat(state.length);
        state.buffer.clear();
      } else {
        // read part of list
        ret = state.buffer.consume(n, state.decoder);
      }
      return ret;
    }

    function endReadable(stream) {
      var state = stream._readableState;
      debug$2('endReadable', state.endEmitted);

      if (!state.endEmitted) {
        state.ended = true;
        process.nextTick(endReadableNT, state, stream);
      }
    }

    function endReadableNT(state, stream) {
      debug$2('endReadableNT', state.endEmitted, state.length); // Check that we didn't get one last unshift.

      if (!state.endEmitted && state.length === 0) {
        state.endEmitted = true;
        stream.readable = false;
        stream.emit('end');

        if (state.autoDestroy) {
          // In case of duplex streams we need a way to detect
          // if the writable side is ready for autoDestroy as well
          var wState = stream._writableState;

          if (!wState || wState.autoDestroy && wState.finished) {
            stream.destroy();
          }
        }
      }
    }

    if (typeof Symbol === 'function') {
      Readable.from = function (iterable, opts) {
        if (from$3 === undefined) {
          from$3 = from_1;
        }

        return from$3(Readable, iterable, opts);
      };
    }

    function indexOf(xs, x) {
      for (var i = 0, l = xs.length; i < l; i++) {
        if (xs[i] === x) return i;
      }

      return -1;
    }

    var _stream_transform = Transform$3;

    var _require$codes$1 = errors.codes,
        ERR_METHOD_NOT_IMPLEMENTED = _require$codes$1.ERR_METHOD_NOT_IMPLEMENTED,
        ERR_MULTIPLE_CALLBACK = _require$codes$1.ERR_MULTIPLE_CALLBACK,
        ERR_TRANSFORM_ALREADY_TRANSFORMING = _require$codes$1.ERR_TRANSFORM_ALREADY_TRANSFORMING,
        ERR_TRANSFORM_WITH_LENGTH_0 = _require$codes$1.ERR_TRANSFORM_WITH_LENGTH_0;

    var Duplex = _stream_duplex;

    inherits$3.exports(Transform$3, Duplex);

    function afterTransform(er, data) {
      var ts = this._transformState;
      ts.transforming = false;
      var cb = ts.writecb;

      if (cb === null) {
        return this.emit('error', new ERR_MULTIPLE_CALLBACK());
      }

      ts.writechunk = null;
      ts.writecb = null;
      if (data != null) // single equals check for both `null` and `undefined`
        this.push(data);
      cb(er);
      var rs = this._readableState;
      rs.reading = false;

      if (rs.needReadable || rs.length < rs.highWaterMark) {
        this._read(rs.highWaterMark);
      }
    }

    function Transform$3(options) {
      if (!(this instanceof Transform$3)) return new Transform$3(options);
      Duplex.call(this, options);
      this._transformState = {
        afterTransform: afterTransform.bind(this),
        needTransform: false,
        transforming: false,
        writecb: null,
        writechunk: null,
        writeencoding: null
      }; // start out asking for a readable event once data is transformed.

      this._readableState.needReadable = true; // we have implemented the _read method, and done the other things
      // that Readable wants before the first _read call, so unset the
      // sync guard flag.

      this._readableState.sync = false;

      if (options) {
        if (typeof options.transform === 'function') this._transform = options.transform;
        if (typeof options.flush === 'function') this._flush = options.flush;
      } // When the writable side finishes, then flush out anything remaining.


      this.on('prefinish', prefinish);
    }

    function prefinish() {
      var _this = this;

      if (typeof this._flush === 'function' && !this._readableState.destroyed) {
        this._flush(function (er, data) {
          done(_this, er, data);
        });
      } else {
        done(this, null, null);
      }
    }

    Transform$3.prototype.push = function (chunk, encoding) {
      this._transformState.needTransform = false;
      return Duplex.prototype.push.call(this, chunk, encoding);
    }; // This is the part where you do stuff!
    // override this function in implementation classes.
    // 'chunk' is an input chunk.
    //
    // Call `push(newChunk)` to pass along transformed output
    // to the readable side.  You may call 'push' zero or more times.
    //
    // Call `cb(err)` when you are done with this chunk.  If you pass
    // an error, then that'll put the hurt on the whole operation.  If you
    // never call cb(), then you'll never get another chunk.


    Transform$3.prototype._transform = function (chunk, encoding, cb) {
      cb(new ERR_METHOD_NOT_IMPLEMENTED('_transform()'));
    };

    Transform$3.prototype._write = function (chunk, encoding, cb) {
      var ts = this._transformState;
      ts.writecb = cb;
      ts.writechunk = chunk;
      ts.writeencoding = encoding;

      if (!ts.transforming) {
        var rs = this._readableState;
        if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
      }
    }; // Doesn't matter what the args are here.
    // _transform does all the work.
    // That we got here means that the readable side wants more data.


    Transform$3.prototype._read = function (n) {
      var ts = this._transformState;

      if (ts.writechunk !== null && !ts.transforming) {
        ts.transforming = true;

        this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
      } else {
        // mark that we need a transform, so that any data that comes in
        // will get processed, now that we've asked for it.
        ts.needTransform = true;
      }
    };

    Transform$3.prototype._destroy = function (err, cb) {
      Duplex.prototype._destroy.call(this, err, function (err2) {
        cb(err2);
      });
    };

    function done(stream, er, data) {
      if (er) return stream.emit('error', er);
      if (data != null) // single equals check for both `null` and `undefined`
        stream.push(data); // TODO(BridgeAR): Write a test for these two error cases
      // if there's nothing in the write buffer, then that means
      // that nothing more will ever be provided

      if (stream._writableState.length) throw new ERR_TRANSFORM_WITH_LENGTH_0();
      if (stream._transformState.transforming) throw new ERR_TRANSFORM_ALREADY_TRANSFORMING();
      return stream.push(null);
    }

    var _stream_passthrough = PassThrough;

    var Transform$2 = _stream_transform;

    inherits$3.exports(PassThrough, Transform$2);

    function PassThrough(options) {
      if (!(this instanceof PassThrough)) return new PassThrough(options);
      Transform$2.call(this, options);
    }

    PassThrough.prototype._transform = function (chunk, encoding, cb) {
      cb(null, chunk);
    };

    var eos;

    function once$4(callback) {
      var called = false;
      return function () {
        if (called) return;
        called = true;
        callback.apply(void 0, arguments);
      };
    }

    var _require$codes = errors.codes,
        ERR_MISSING_ARGS = _require$codes.ERR_MISSING_ARGS,
        ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED;

    function noop$6(err) {
      // Rethrow the error if it exists to avoid swallowing it
      if (err) throw err;
    }

    function isRequest(stream) {
      return stream.setHeader && typeof stream.abort === 'function';
    }

    function destroyer(stream, reading, writing, callback) {
      callback = once$4(callback);
      var closed = false;
      stream.on('close', function () {
        closed = true;
      });
      if (eos === undefined) eos = endOfStream;
      eos(stream, {
        readable: reading,
        writable: writing
      }, function (err) {
        if (err) return callback(err);
        closed = true;
        callback();
      });
      var destroyed = false;
      return function (err) {
        if (closed) return;
        if (destroyed) return;
        destroyed = true; // request.destroy just do .end - .abort is what we want

        if (isRequest(stream)) return stream.abort();
        if (typeof stream.destroy === 'function') return stream.destroy();
        callback(err || new ERR_STREAM_DESTROYED('pipe'));
      };
    }

    function call(fn) {
      fn();
    }

    function pipe$2(from, to) {
      return from.pipe(to);
    }

    function popCallback(streams) {
      if (!streams.length) return noop$6;
      if (typeof streams[streams.length - 1] !== 'function') return noop$6;
      return streams.pop();
    }

    function pipeline() {
      for (var _len = arguments.length, streams = new Array(_len), _key = 0; _key < _len; _key++) {
        streams[_key] = arguments[_key];
      }

      var callback = popCallback(streams);
      if (Array.isArray(streams[0])) streams = streams[0];

      if (streams.length < 2) {
        throw new ERR_MISSING_ARGS('streams');
      }

      var error;
      var destroys = streams.map(function (stream, i) {
        var reading = i < streams.length - 1;
        var writing = i > 0;
        return destroyer(stream, reading, writing, function (err) {
          if (!error) error = err;
          if (err) destroys.forEach(call);
          if (reading) return;
          destroys.forEach(call);
          callback(error);
        });
      });
      return streams.reduce(pipe$2);
    }

    var pipeline_1 = pipeline;

    (function (module, exports) {
    var Stream = require$$0__default$1["default"];
    if (process.env.READABLE_STREAM === 'disable' && Stream) {
      module.exports = Stream.Readable;
      Object.assign(module.exports, Stream);
      module.exports.Stream = Stream;
    } else {
      exports = module.exports = _stream_readable;
      exports.Stream = Stream || exports;
      exports.Readable = exports;
      exports.Writable = _stream_writable;
      exports.Duplex = _stream_duplex;
      exports.Transform = _stream_transform;
      exports.PassThrough = _stream_passthrough;
      exports.finished = endOfStream;
      exports.pipeline = pipeline_1;
    }
    }(readable, readable.exports));

    const { Buffer: Buffer$i } = require$$0__default$2["default"];
    const symbol$1 = Symbol.for('BufferList');

    function BufferList$3 (buf) {
      if (!(this instanceof BufferList$3)) {
        return new BufferList$3(buf)
      }

      BufferList$3._init.call(this, buf);
    }

    BufferList$3._init = function _init (buf) {
      Object.defineProperty(this, symbol$1, { value: true });

      this._bufs = [];
      this.length = 0;

      if (buf) {
        this.append(buf);
      }
    };

    BufferList$3.prototype._new = function _new (buf) {
      return new BufferList$3(buf)
    };

    BufferList$3.prototype._offset = function _offset (offset) {
      if (offset === 0) {
        return [0, 0]
      }

      let tot = 0;

      for (let i = 0; i < this._bufs.length; i++) {
        const _t = tot + this._bufs[i].length;
        if (offset < _t || i === this._bufs.length - 1) {
          return [i, offset - tot]
        }
        tot = _t;
      }
    };

    BufferList$3.prototype._reverseOffset = function (blOffset) {
      const bufferId = blOffset[0];
      let offset = blOffset[1];

      for (let i = 0; i < bufferId; i++) {
        offset += this._bufs[i].length;
      }

      return offset
    };

    BufferList$3.prototype.get = function get (index) {
      if (index > this.length || index < 0) {
        return undefined
      }

      const offset = this._offset(index);

      return this._bufs[offset[0]][offset[1]]
    };

    BufferList$3.prototype.slice = function slice (start, end) {
      if (typeof start === 'number' && start < 0) {
        start += this.length;
      }

      if (typeof end === 'number' && end < 0) {
        end += this.length;
      }

      return this.copy(null, 0, start, end)
    };

    BufferList$3.prototype.copy = function copy (dst, dstStart, srcStart, srcEnd) {
      if (typeof srcStart !== 'number' || srcStart < 0) {
        srcStart = 0;
      }

      if (typeof srcEnd !== 'number' || srcEnd > this.length) {
        srcEnd = this.length;
      }

      if (srcStart >= this.length) {
        return dst || Buffer$i.alloc(0)
      }

      if (srcEnd <= 0) {
        return dst || Buffer$i.alloc(0)
      }

      const copy = !!dst;
      const off = this._offset(srcStart);
      const len = srcEnd - srcStart;
      let bytes = len;
      let bufoff = (copy && dstStart) || 0;
      let start = off[1];

      // copy/slice everything
      if (srcStart === 0 && srcEnd === this.length) {
        if (!copy) {
          // slice, but full concat if multiple buffers
          return this._bufs.length === 1
            ? this._bufs[0]
            : Buffer$i.concat(this._bufs, this.length)
        }

        // copy, need to copy individual buffers
        for (let i = 0; i < this._bufs.length; i++) {
          this._bufs[i].copy(dst, bufoff);
          bufoff += this._bufs[i].length;
        }

        return dst
      }

      // easy, cheap case where it's a subset of one of the buffers
      if (bytes <= this._bufs[off[0]].length - start) {
        return copy
          ? this._bufs[off[0]].copy(dst, dstStart, start, start + bytes)
          : this._bufs[off[0]].slice(start, start + bytes)
      }

      if (!copy) {
        // a slice, we need something to copy in to
        dst = Buffer$i.allocUnsafe(len);
      }

      for (let i = off[0]; i < this._bufs.length; i++) {
        const l = this._bufs[i].length - start;

        if (bytes > l) {
          this._bufs[i].copy(dst, bufoff, start);
          bufoff += l;
        } else {
          this._bufs[i].copy(dst, bufoff, start, start + bytes);
          bufoff += l;
          break
        }

        bytes -= l;

        if (start) {
          start = 0;
        }
      }

      // safeguard so that we don't return uninitialized memory
      if (dst.length > bufoff) return dst.slice(0, bufoff)

      return dst
    };

    BufferList$3.prototype.shallowSlice = function shallowSlice (start, end) {
      start = start || 0;
      end = typeof end !== 'number' ? this.length : end;

      if (start < 0) {
        start += this.length;
      }

      if (end < 0) {
        end += this.length;
      }

      if (start === end) {
        return this._new()
      }

      const startOffset = this._offset(start);
      const endOffset = this._offset(end);
      const buffers = this._bufs.slice(startOffset[0], endOffset[0] + 1);

      if (endOffset[1] === 0) {
        buffers.pop();
      } else {
        buffers[buffers.length - 1] = buffers[buffers.length - 1].slice(0, endOffset[1]);
      }

      if (startOffset[1] !== 0) {
        buffers[0] = buffers[0].slice(startOffset[1]);
      }

      return this._new(buffers)
    };

    BufferList$3.prototype.toString = function toString (encoding, start, end) {
      return this.slice(start, end).toString(encoding)
    };

    BufferList$3.prototype.consume = function consume (bytes) {
      // first, normalize the argument, in accordance with how Buffer does it
      bytes = Math.trunc(bytes);
      // do nothing if not a positive number
      if (Number.isNaN(bytes) || bytes <= 0) return this

      while (this._bufs.length) {
        if (bytes >= this._bufs[0].length) {
          bytes -= this._bufs[0].length;
          this.length -= this._bufs[0].length;
          this._bufs.shift();
        } else {
          this._bufs[0] = this._bufs[0].slice(bytes);
          this.length -= bytes;
          break
        }
      }

      return this
    };

    BufferList$3.prototype.duplicate = function duplicate () {
      const copy = this._new();

      for (let i = 0; i < this._bufs.length; i++) {
        copy.append(this._bufs[i]);
      }

      return copy
    };

    BufferList$3.prototype.append = function append (buf) {
      if (buf == null) {
        return this
      }

      if (buf.buffer) {
        // append a view of the underlying ArrayBuffer
        this._appendBuffer(Buffer$i.from(buf.buffer, buf.byteOffset, buf.byteLength));
      } else if (Array.isArray(buf)) {
        for (let i = 0; i < buf.length; i++) {
          this.append(buf[i]);
        }
      } else if (this._isBufferList(buf)) {
        // unwrap argument into individual BufferLists
        for (let i = 0; i < buf._bufs.length; i++) {
          this.append(buf._bufs[i]);
        }
      } else {
        // coerce number arguments to strings, since Buffer(number) does
        // uninitialized memory allocation
        if (typeof buf === 'number') {
          buf = buf.toString();
        }

        this._appendBuffer(Buffer$i.from(buf));
      }

      return this
    };

    BufferList$3.prototype._appendBuffer = function appendBuffer (buf) {
      this._bufs.push(buf);
      this.length += buf.length;
    };

    BufferList$3.prototype.indexOf = function (search, offset, encoding) {
      if (encoding === undefined && typeof offset === 'string') {
        encoding = offset;
        offset = undefined;
      }

      if (typeof search === 'function' || Array.isArray(search)) {
        throw new TypeError('The "value" argument must be one of type string, Buffer, BufferList, or Uint8Array.')
      } else if (typeof search === 'number') {
        search = Buffer$i.from([search]);
      } else if (typeof search === 'string') {
        search = Buffer$i.from(search, encoding);
      } else if (this._isBufferList(search)) {
        search = search.slice();
      } else if (Array.isArray(search.buffer)) {
        search = Buffer$i.from(search.buffer, search.byteOffset, search.byteLength);
      } else if (!Buffer$i.isBuffer(search)) {
        search = Buffer$i.from(search);
      }

      offset = Number(offset || 0);

      if (isNaN(offset)) {
        offset = 0;
      }

      if (offset < 0) {
        offset = this.length + offset;
      }

      if (offset < 0) {
        offset = 0;
      }

      if (search.length === 0) {
        return offset > this.length ? this.length : offset
      }

      const blOffset = this._offset(offset);
      let blIndex = blOffset[0]; // index of which internal buffer we're working on
      let buffOffset = blOffset[1]; // offset of the internal buffer we're working on

      // scan over each buffer
      for (; blIndex < this._bufs.length; blIndex++) {
        const buff = this._bufs[blIndex];

        while (buffOffset < buff.length) {
          const availableWindow = buff.length - buffOffset;

          if (availableWindow >= search.length) {
            const nativeSearchResult = buff.indexOf(search, buffOffset);

            if (nativeSearchResult !== -1) {
              return this._reverseOffset([blIndex, nativeSearchResult])
            }

            buffOffset = buff.length - search.length + 1; // end of native search window
          } else {
            const revOffset = this._reverseOffset([blIndex, buffOffset]);

            if (this._match(revOffset, search)) {
              return revOffset
            }

            buffOffset++;
          }
        }

        buffOffset = 0;
      }

      return -1
    };

    BufferList$3.prototype._match = function (offset, search) {
      if (this.length - offset < search.length) {
        return false
      }

      for (let searchOffset = 0; searchOffset < search.length; searchOffset++) {
        if (this.get(offset + searchOffset) !== search[searchOffset]) {
          return false
        }
      }
      return true
    }

    ;(function () {
      const methods = {
        readDoubleBE: 8,
        readDoubleLE: 8,
        readFloatBE: 4,
        readFloatLE: 4,
        readInt32BE: 4,
        readInt32LE: 4,
        readUInt32BE: 4,
        readUInt32LE: 4,
        readInt16BE: 2,
        readInt16LE: 2,
        readUInt16BE: 2,
        readUInt16LE: 2,
        readInt8: 1,
        readUInt8: 1,
        readIntBE: null,
        readIntLE: null,
        readUIntBE: null,
        readUIntLE: null
      };

      for (const m in methods) {
        (function (m) {
          if (methods[m] === null) {
            BufferList$3.prototype[m] = function (offset, byteLength) {
              return this.slice(offset, offset + byteLength)[m](0, byteLength)
            };
          } else {
            BufferList$3.prototype[m] = function (offset = 0) {
              return this.slice(offset, offset + methods[m])[m](0)
            };
          }
        }(m));
      }
    }());

    // Used internally by the class and also as an indicator of this object being
    // a `BufferList`. It's not possible to use `instanceof BufferList` in a browser
    // environment because there could be multiple different copies of the
    // BufferList class and some `BufferList`s might be `BufferList`s.
    BufferList$3.prototype._isBufferList = function _isBufferList (b) {
      return b instanceof BufferList$3 || BufferList$3.isBufferList(b)
    };

    BufferList$3.isBufferList = function isBufferList (b) {
      return b != null && b[symbol$1]
    };

    var BufferList_1$1 = BufferList$3;

    const DuplexStream$1 = readable.exports.Duplex;
    const inherits$2 = inherits$3.exports;
    const BufferList$2 = BufferList_1$1;

    function BufferListStream$3 (callback) {
      if (!(this instanceof BufferListStream$3)) {
        return new BufferListStream$3(callback)
      }

      if (typeof callback === 'function') {
        this._callback = callback;

        const piper = function piper (err) {
          if (this._callback) {
            this._callback(err);
            this._callback = null;
          }
        }.bind(this);

        this.on('pipe', function onPipe (src) {
          src.on('error', piper);
        });
        this.on('unpipe', function onUnpipe (src) {
          src.removeListener('error', piper);
        });

        callback = null;
      }

      BufferList$2._init.call(this, callback);
      DuplexStream$1.call(this);
    }

    inherits$2(BufferListStream$3, DuplexStream$1);
    Object.assign(BufferListStream$3.prototype, BufferList$2.prototype);

    BufferListStream$3.prototype._new = function _new (callback) {
      return new BufferListStream$3(callback)
    };

    BufferListStream$3.prototype._write = function _write (buf, encoding, callback) {
      this._appendBuffer(buf);

      if (typeof callback === 'function') {
        callback();
      }
    };

    BufferListStream$3.prototype._read = function _read (size) {
      if (!this.length) {
        return this.push(null)
      }

      size = Math.min(size, this.length);
      this.push(this.slice(0, size));
      this.consume(size);
    };

    BufferListStream$3.prototype.end = function end (chunk) {
      DuplexStream$1.prototype.end.call(this, chunk);

      if (this._callback) {
        this._callback(null, this.slice());
        this._callback = null;
      }
    };

    BufferListStream$3.prototype._destroy = function _destroy (err, cb) {
      this._bufs.length = 0;
      this.length = 0;
      cb(err);
    };

    BufferListStream$3.prototype._isBufferList = function _isBufferList (b) {
      return b instanceof BufferListStream$3 || b instanceof BufferList$2 || BufferListStream$3.isBufferList(b)
    };

    BufferListStream$3.isBufferList = BufferList$2.isBufferList;

    bl$1.exports = BufferListStream$3;
    bl$1.exports.BufferListStream = BufferListStream$3;
    bl$1.exports.BufferList = BufferList$2;

    const readline$3 = require$$3__default["default"];
    const chalk$o = source$1;
    const cliCursor$6 = cliCursor$7;
    const cliSpinners$2 = cliSpinners$3;
    const logSymbols$2 = logSymbols$3;
    const stripAnsi$5 = stripAnsi$7;
    const wcwidth$3 = wcwidth$5.exports;
    const isInteractive$2 = isInteractive$3;
    const isUnicodeSupported$3 = isUnicodeSupported$5;
    const {BufferListStream: BufferListStream$2} = bl$1.exports;

    const TEXT$1 = Symbol('text');
    const PREFIX_TEXT$1 = Symbol('prefixText');
    const ASCII_ETX_CODE$1 = 0x03; // Ctrl+C emits this code

    class StdinDiscarder$1 {
    	constructor() {
    		this.requests = 0;

    		this.mutedStream = new BufferListStream$2();
    		this.mutedStream.pipe(process.stdout);

    		const self = this; // eslint-disable-line unicorn/no-this-assignment
    		this.ourEmit = function (event, data, ...args) {
    			const {stdin} = process;
    			if (self.requests > 0 || stdin.emit === self.ourEmit) {
    				if (event === 'keypress') { // Fixes readline behavior
    					return;
    				}

    				if (event === 'data' && data.includes(ASCII_ETX_CODE$1)) {
    					process.emit('SIGINT');
    				}

    				Reflect.apply(self.oldEmit, this, [event, data, ...args]);
    			} else {
    				Reflect.apply(process.stdin.emit, this, [event, data, ...args]);
    			}
    		};
    	}

    	start() {
    		this.requests++;

    		if (this.requests === 1) {
    			this.realStart();
    		}
    	}

    	stop() {
    		if (this.requests <= 0) {
    			throw new Error('`stop` called more times than `start`');
    		}

    		this.requests--;

    		if (this.requests === 0) {
    			this.realStop();
    		}
    	}

    	realStart() {
    		// No known way to make it work reliably on Windows
    		if (process.platform === 'win32') {
    			return;
    		}

    		this.rl = readline$3.createInterface({
    			input: process.stdin,
    			output: this.mutedStream
    		});

    		this.rl.on('SIGINT', () => {
    			if (process.listenerCount('SIGINT') === 0) {
    				process.emit('SIGINT');
    			} else {
    				this.rl.close();
    				process.kill(process.pid, 'SIGINT');
    			}
    		});
    	}

    	realStop() {
    		if (process.platform === 'win32') {
    			return;
    		}

    		this.rl.close();
    		this.rl = undefined;
    	}
    }

    let stdinDiscarder$1;

    class Ora$1 {
    	constructor(options) {
    		if (!stdinDiscarder$1) {
    			stdinDiscarder$1 = new StdinDiscarder$1();
    		}

    		if (typeof options === 'string') {
    			options = {
    				text: options
    			};
    		}

    		this.options = {
    			text: '',
    			color: 'cyan',
    			stream: process.stderr,
    			discardStdin: true,
    			...options
    		};

    		this.spinner = this.options.spinner;

    		this.color = this.options.color;
    		this.hideCursor = this.options.hideCursor !== false;
    		this.interval = this.options.interval || this.spinner.interval || 100;
    		this.stream = this.options.stream;
    		this.id = undefined;
    		this.isEnabled = typeof this.options.isEnabled === 'boolean' ? this.options.isEnabled : isInteractive$2({stream: this.stream});
    		this.isSilent = typeof this.options.isSilent === 'boolean' ? this.options.isSilent : false;

    		// Set *after* `this.stream`
    		this.text = this.options.text;
    		this.prefixText = this.options.prefixText;
    		this.linesToClear = 0;
    		this.indent = this.options.indent;
    		this.discardStdin = this.options.discardStdin;
    		this.isDiscardingStdin = false;
    	}

    	get indent() {
    		return this._indent;
    	}

    	set indent(indent = 0) {
    		if (!(indent >= 0 && Number.isInteger(indent))) {
    			throw new Error('The `indent` option must be an integer from 0 and up');
    		}

    		this._indent = indent;
    	}

    	_updateInterval(interval) {
    		if (interval !== undefined) {
    			this.interval = interval;
    		}
    	}

    	get spinner() {
    		return this._spinner;
    	}

    	set spinner(spinner) {
    		this.frameIndex = 0;

    		if (typeof spinner === 'object') {
    			if (spinner.frames === undefined) {
    				throw new Error('The given spinner must have a `frames` property');
    			}

    			this._spinner = spinner;
    		} else if (!isUnicodeSupported$3()) {
    			this._spinner = cliSpinners$2.line;
    		} else if (spinner === undefined) {
    			// Set default spinner
    			this._spinner = cliSpinners$2.dots;
    		} else if (spinner !== 'default' && cliSpinners$2[spinner]) {
    			this._spinner = cliSpinners$2[spinner];
    		} else {
    			throw new Error(`There is no built-in spinner named '${spinner}'. See https://github.com/sindresorhus/cli-spinners/blob/main/spinners.json for a full list.`);
    		}

    		this._updateInterval(this._spinner.interval);
    	}

    	get text() {
    		return this[TEXT$1];
    	}

    	set text(value) {
    		this[TEXT$1] = value;
    		this.updateLineCount();
    	}

    	get prefixText() {
    		return this[PREFIX_TEXT$1];
    	}

    	set prefixText(value) {
    		this[PREFIX_TEXT$1] = value;
    		this.updateLineCount();
    	}

    	get isSpinning() {
    		return this.id !== undefined;
    	}

    	getFullPrefixText(prefixText = this[PREFIX_TEXT$1], postfix = ' ') {
    		if (typeof prefixText === 'string') {
    			return prefixText + postfix;
    		}

    		if (typeof prefixText === 'function') {
    			return prefixText() + postfix;
    		}

    		return '';
    	}

    	updateLineCount() {
    		const columns = this.stream.columns || 80;
    		const fullPrefixText = this.getFullPrefixText(this.prefixText, '-');
    		this.lineCount = 0;
    		for (const line of stripAnsi$5(fullPrefixText + '--' + this[TEXT$1]).split('\n')) {
    			this.lineCount += Math.max(1, Math.ceil(wcwidth$3(line) / columns));
    		}
    	}

    	get isEnabled() {
    		return this._isEnabled && !this.isSilent;
    	}

    	set isEnabled(value) {
    		if (typeof value !== 'boolean') {
    			throw new TypeError('The `isEnabled` option must be a boolean');
    		}

    		this._isEnabled = value;
    	}

    	get isSilent() {
    		return this._isSilent;
    	}

    	set isSilent(value) {
    		if (typeof value !== 'boolean') {
    			throw new TypeError('The `isSilent` option must be a boolean');
    		}

    		this._isSilent = value;
    	}

    	frame() {
    		const {frames} = this.spinner;
    		let frame = frames[this.frameIndex];

    		if (this.color) {
    			frame = chalk$o[this.color](frame);
    		}

    		this.frameIndex = ++this.frameIndex % frames.length;
    		const fullPrefixText = (typeof this.prefixText === 'string' && this.prefixText !== '') ? this.prefixText + ' ' : '';
    		const fullText = typeof this.text === 'string' ? ' ' + this.text : '';

    		return fullPrefixText + frame + fullText;
    	}

    	clear() {
    		if (!this.isEnabled || !this.stream.isTTY) {
    			return this;
    		}

    		for (let i = 0; i < this.linesToClear; i++) {
    			if (i > 0) {
    				this.stream.moveCursor(0, -1);
    			}

    			this.stream.clearLine();
    			this.stream.cursorTo(this.indent);
    		}

    		this.linesToClear = 0;

    		return this;
    	}

    	render() {
    		if (this.isSilent) {
    			return this;
    		}

    		this.clear();
    		this.stream.write(this.frame());
    		this.linesToClear = this.lineCount;

    		return this;
    	}

    	start(text) {
    		if (text) {
    			this.text = text;
    		}

    		if (this.isSilent) {
    			return this;
    		}

    		if (!this.isEnabled) {
    			if (this.text) {
    				this.stream.write(`- ${this.text}\n`);
    			}

    			return this;
    		}

    		if (this.isSpinning) {
    			return this;
    		}

    		if (this.hideCursor) {
    			cliCursor$6.hide(this.stream);
    		}

    		if (this.discardStdin && process.stdin.isTTY) {
    			this.isDiscardingStdin = true;
    			stdinDiscarder$1.start();
    		}

    		this.render();
    		this.id = setInterval(this.render.bind(this), this.interval);

    		return this;
    	}

    	stop() {
    		if (!this.isEnabled) {
    			return this;
    		}

    		clearInterval(this.id);
    		this.id = undefined;
    		this.frameIndex = 0;
    		this.clear();
    		if (this.hideCursor) {
    			cliCursor$6.show(this.stream);
    		}

    		if (this.discardStdin && process.stdin.isTTY && this.isDiscardingStdin) {
    			stdinDiscarder$1.stop();
    			this.isDiscardingStdin = false;
    		}

    		return this;
    	}

    	succeed(text) {
    		return this.stopAndPersist({symbol: logSymbols$2.success, text});
    	}

    	fail(text) {
    		return this.stopAndPersist({symbol: logSymbols$2.error, text});
    	}

    	warn(text) {
    		return this.stopAndPersist({symbol: logSymbols$2.warning, text});
    	}

    	info(text) {
    		return this.stopAndPersist({symbol: logSymbols$2.info, text});
    	}

    	stopAndPersist(options = {}) {
    		if (this.isSilent) {
    			return this;
    		}

    		const prefixText = options.prefixText || this.prefixText;
    		const text = options.text || this.text;
    		const fullText = (typeof text === 'string') ? ' ' + text : '';

    		this.stop();
    		this.stream.write(`${this.getFullPrefixText(prefixText, ' ')}${options.symbol || ' '}${fullText}\n`);

    		return this;
    	}
    }

    const oraFactory$1 = function (options) {
    	return new Ora$1(options);
    };

    ora$3.exports = oraFactory$1;

    ora$3.exports.promise = (action, options) => {
    	// eslint-disable-next-line promise/prefer-await-to-then
    	if (typeof action.then !== 'function') {
    		throw new TypeError('Parameter `action` must be a Promise');
    	}

    	const spinner = new Ora$1(options);
    	spinner.start();

    	(async () => {
    		try {
    			await action;
    			spinner.succeed();
    		} catch {
    			spinner.fail();
    		}
    	})();

    	return spinner;
    };

    const _$l = {
      last: last_1$1,
      flatten: flatten_1$1,
    };
    const util$2 = readline$4;
    const cliWidth$2 = cliWidth$3.exports;
    const stripAnsi$4 = stripAnsi$7;
    const stringWidth$3 = stringWidth$5.exports;
    const ora$2 = ora$3.exports;

    function height$1(content) {
      return content.split('\n').length;
    }

    function lastLine$1(content) {
      return _$l.last(content.split('\n'));
    }

    class ScreenManager$3 {
      constructor(rl) {
        // These variables are keeping information to allow correct prompt re-rendering
        this.height = 0;
        this.extraLinesUnderPrompt = 0;

        this.rl = rl;
      }

      renderWithSpinner(content, bottomContent) {
        if (this.spinnerId) {
          clearInterval(this.spinnerId);
        }

        let spinner;
        let contentFunc;
        let bottomContentFunc;

        if (bottomContent) {
          spinner = ora$2(bottomContent);
          contentFunc = () => content;
          bottomContentFunc = () => spinner.frame();
        } else {
          spinner = ora$2(content);
          contentFunc = () => spinner.frame();
          bottomContentFunc = () => '';
        }

        this.spinnerId = setInterval(
          () => this.render(contentFunc(), bottomContentFunc(), true),
          spinner.interval
        );
      }

      render(content, bottomContent, spinning = false) {
        if (this.spinnerId && !spinning) {
          clearInterval(this.spinnerId);
        }

        this.rl.output.unmute();
        this.clean(this.extraLinesUnderPrompt);

        /**
         * Write message to screen and setPrompt to control backspace
         */

        const promptLine = lastLine$1(content);
        const rawPromptLine = stripAnsi$4(promptLine);

        // Remove the rl.line from our prompt. We can't rely on the content of
        // rl.line (mainly because of the password prompt), so just rely on it's
        // length.
        let prompt = rawPromptLine;
        if (this.rl.line.length) {
          prompt = prompt.slice(0, -this.rl.line.length);
        }

        this.rl.setPrompt(prompt);

        // SetPrompt will change cursor position, now we can get correct value
        const cursorPos = this.rl._getCursorPos();
        const width = this.normalizedCliWidth();

        content = this.forceLineReturn(content, width);
        if (bottomContent) {
          bottomContent = this.forceLineReturn(bottomContent, width);
        }

        // Manually insert an extra line if we're at the end of the line.
        // This prevent the cursor from appearing at the beginning of the
        // current line.
        if (rawPromptLine.length % width === 0) {
          content += '\n';
        }

        const fullContent = content + (bottomContent ? '\n' + bottomContent : '');
        this.rl.output.write(fullContent);

        /**
         * Re-adjust the cursor at the correct position.
         */

        // We need to consider parts of the prompt under the cursor as part of the bottom
        // content in order to correctly cleanup and re-render.
        const promptLineUpDiff = Math.floor(rawPromptLine.length / width) - cursorPos.rows;
        const bottomContentHeight =
          promptLineUpDiff + (bottomContent ? height$1(bottomContent) : 0);
        if (bottomContentHeight > 0) {
          util$2.up(this.rl, bottomContentHeight);
        }

        // Reset cursor at the beginning of the line
        util$2.left(this.rl, stringWidth$3(lastLine$1(fullContent)));

        // Adjust cursor on the right
        if (cursorPos.cols > 0) {
          util$2.right(this.rl, cursorPos.cols);
        }

        /**
         * Set up state for next re-rendering
         */
        this.extraLinesUnderPrompt = bottomContentHeight;
        this.height = height$1(fullContent);

        this.rl.output.mute();
      }

      clean(extraLines) {
        if (extraLines > 0) {
          util$2.down(this.rl, extraLines);
        }

        util$2.clearLine(this.rl, this.height);
      }

      done() {
        this.rl.setPrompt('');
        this.rl.output.unmute();
        this.rl.output.write('\n');
      }

      releaseCursor() {
        if (this.extraLinesUnderPrompt > 0) {
          util$2.down(this.rl, this.extraLinesUnderPrompt);
        }
      }

      normalizedCliWidth() {
        const width = cliWidth$2({
          defaultWidth: 80,
          output: this.rl.output,
        });
        return width;
      }

      breakLines(lines, width) {
        // Break lines who're longer than the cli width so we can normalize the natural line
        // returns behavior across terminals.
        width = width || this.normalizedCliWidth();
        const regex = new RegExp('(?:(?:\\033[[0-9;]*m)*.?){1,' + width + '}', 'g');
        return lines.map((line) => {
          const chunk = line.match(regex);
          // Last match is always empty
          chunk.pop();
          return chunk || '';
        });
      }

      forceLineReturn(content, width) {
        width = width || this.normalizedCliWidth();
        return _$l.flatten(this.breakLines(content.split('\n'), width)).join('\n');
      }
    }

    var screenManager$1 = ScreenManager$3;

    /**
     * Base prompt implementation
     * Should be extended by prompt types.
     */
    const _$k = {
      assign: assign_1$1,
      defaults: defaults_1$2,
      clone: clone_1$1,
    };
    const chalk$n = source$1;
    const runAsync$7 = runAsync$b.exports;
    const { filter: filter$7, flatMap: flatMap$4, share: share$4, take: take$6, takeUntil: takeUntil$i } = require$$1$3;
    const Choices$1 = choices$1;
    const ScreenManager$2 = screenManager$1;

    class Prompt$1 {
      constructor(question, rl, answers) {
        // Setup instance defaults property
        _$k.assign(this, {
          answers,
          status: 'pending',
        });

        // Set defaults prompt options
        this.opt = _$k.defaults(_$k.clone(question), {
          validate: () => true,
          validatingText: '',
          filter: (val) => val,
          filteringText: '',
          when: () => true,
          suffix: '',
          prefix: chalk$n.green('?'),
        });

        // Make sure name is present
        if (!this.opt.name) {
          this.throwParamError('name');
        }

        // Set default message if no message defined
        if (!this.opt.message) {
          this.opt.message = this.opt.name + ':';
        }

        // Normalize choices
        if (Array.isArray(this.opt.choices)) {
          this.opt.choices = new Choices$1(this.opt.choices, answers);
        }

        this.rl = rl;
        this.screen = new ScreenManager$2(this.rl);
      }

      /**
       * Start the Inquiry session and manage output value filtering
       * @return {Promise}
       */

      run() {
        return new Promise((resolve, reject) => {
          this._run(
            (value) => resolve(value),
            (error) => reject(error)
          );
        });
      }

      // Default noop (this one should be overwritten in prompts)
      _run(cb) {
        cb();
      }

      /**
       * Throw an error telling a required parameter is missing
       * @param  {String} name Name of the missing param
       * @return {Throw Error}
       */

      throwParamError(name) {
        throw new Error('You must provide a `' + name + '` parameter');
      }

      /**
       * Called when the UI closes. Override to do any specific cleanup necessary
       */
      close() {
        this.screen.releaseCursor();
      }

      /**
       * Run the provided validation method each time a submit event occur.
       * @param  {Rx.Observable} submit - submit event flow
       * @return {Object}        Object containing two observables: `success` and `error`
       */
      handleSubmitEvents(submit) {
        const self = this;
        const validate = runAsync$7(this.opt.validate);
        const asyncFilter = runAsync$7(this.opt.filter);
        const validation = submit.pipe(
          flatMap$4((value) => {
            this.startSpinner(value, this.opt.filteringText);
            return asyncFilter(value, self.answers).then(
              (filteredValue) => {
                this.startSpinner(filteredValue, this.opt.validatingText);
                return validate(filteredValue, self.answers).then(
                  (isValid) => ({ isValid, value: filteredValue }),
                  (err) => ({ isValid: err, value: filteredValue })
                );
              },
              (err) => ({ isValid: err })
            );
          }),
          share$4()
        );

        const success = validation.pipe(
          filter$7((state) => state.isValid === true),
          take$6(1)
        );
        const error = validation.pipe(
          filter$7((state) => state.isValid !== true),
          takeUntil$i(success)
        );

        return {
          success,
          error,
        };
      }

      startSpinner(value, bottomContent) {
        value = this.getSpinningValue(value);
        // If the question will spin, cut off the prefix (for layout purposes)
        const content = bottomContent
          ? this.getQuestion() + value
          : this.getQuestion().slice(this.opt.prefix.length + 1) + value;

        this.screen.renderWithSpinner(content, bottomContent);
      }

      /**
       * Allow override, e.g. for password prompts
       * See: https://github.com/SBoudrias/Inquirer.js/issues/1022
       *
       * @return {String} value to display while spinning
       */
      getSpinningValue(value) {
        return value;
      }

      /**
       * Generate the prompt question string
       * @return {String} prompt question string
       */
      getQuestion() {
        let message =
          (this.opt.prefix ? this.opt.prefix + ' ' : '') +
          chalk$n.bold(this.opt.message) +
          this.opt.suffix +
          chalk$n.reset(' ');

        // Append the default if available, and if question isn't touched/answered
        if (
          this.opt.default != null &&
          this.status !== 'touched' &&
          this.status !== 'answered'
        ) {
          // If default password is supplied, hide it
          if (this.opt.type === 'password') {
            message += chalk$n.italic.dim('[hidden] ');
          } else {
            message += chalk$n.dim('(' + this.opt.default + ') ');
          }
        }

        return message;
      }
    }

    var base$1 = Prompt$1;

    const { fromEvent: fromEvent$2 } = require$$4$3;
    const { filter: filter$6, map: map$f, share: share$3, takeUntil: takeUntil$h } = require$$1$3;

    function normalizeKeypressEvents$1(value, key) {
      return { value, key: key || {} };
    }

    var events$2 = function (rl) {
      const keypress = fromEvent$2(rl.input, 'keypress', normalizeKeypressEvents$1)
        .pipe(takeUntil$h(fromEvent$2(rl, 'close')))
        // Ignore `enter` key. On the readline, we only care about the `line` event.
        .pipe(filter$6(({ key }) => key.name !== 'enter' && key.name !== 'return'));

      return {
        line: fromEvent$2(rl, 'line'),
        keypress,

        normalizedUpKey: keypress.pipe(
          filter$6(
            ({ key }) =>
              key.name === 'up' || key.name === 'k' || (key.name === 'p' && key.ctrl)
          ),
          share$3()
        ),

        normalizedDownKey: keypress.pipe(
          filter$6(
            ({ key }) =>
              key.name === 'down' || key.name === 'j' || (key.name === 'n' && key.ctrl)
          ),
          share$3()
        ),

        numberKey: keypress.pipe(
          filter$6((e) => e.value && '123456789'.indexOf(e.value) >= 0),
          map$f((e) => Number(e.value)),
          share$3()
        ),

        spaceKey: keypress.pipe(
          filter$6(({ key }) => key && key.name === 'space'),
          share$3()
        ),
        aKey: keypress.pipe(
          filter$6(({ key }) => key && key.name === 'a'),
          share$3()
        ),
        iKey: keypress.pipe(
          filter$6(({ key }) => key && key.name === 'i'),
          share$3()
        ),
      };
    };

    /**
     * The base implementation of `_.sum` and `_.sumBy` without support for
     * iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {number} Returns the sum.
     */

    function baseSum$3(array, iteratee) {
      var result,
          index = -1,
          length = array.length;

      while (++index < length) {
        var current = iteratee(array[index]);
        if (current !== undefined) {
          result = result === undefined ? current : (result + current);
        }
      }
      return result;
    }

    var _baseSum$1 = baseSum$3;

    var baseSum$2 = _baseSum$1,
        identity$6 = identity_1$1;

    /**
     * Computes the sum of the values in `array`.
     *
     * @static
     * @memberOf _
     * @since 3.4.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {number} Returns the sum.
     * @example
     *
     * _.sum([4, 2, 8, 6]);
     * // => 20
     */
    function sum$1(array) {
      return (array && array.length)
        ? baseSum$2(array, identity$6)
        : 0;
    }

    var sum_1$1 = sum$1;

    const _$j = {
      sum: sum_1$1,
      flatten: flatten_1$1,
    };
    const chalk$m = source$1;

    /**
     * The paginator returns a subset of the choices if the list is too long.
     */

    class Paginator$9 {
      constructor(screen, options = {}) {
        const { isInfinite = true } = options;
        this.lastIndex = 0;
        this.screen = screen;
        this.isInfinite = isInfinite;
      }

      paginate(output, active, pageSize) {
        pageSize = pageSize || 7;
        let lines = output.split('\n');

        if (this.screen) {
          lines = this.screen.breakLines(lines);
          active = _$j.sum(lines.map((lineParts) => lineParts.length).splice(0, active));
          lines = _$j.flatten(lines);
        }

        // Make sure there's enough lines to paginate
        if (lines.length <= pageSize) {
          return output;
        }
        const visibleLines = this.isInfinite
          ? this.getInfiniteLines(lines, active, pageSize)
          : this.getFiniteLines(lines, active, pageSize);
        this.lastIndex = active;
        return (
          visibleLines.join('\n') +
          '\n' +
          chalk$m.dim('(Move up and down to reveal more choices)')
        );
      }

      getInfiniteLines(lines, active, pageSize) {
        if (this.pointer === undefined) {
          this.pointer = 0;
        }
        const middleOfList = Math.floor(pageSize / 2);
        // Move the pointer only when the user go down and limit it to the middle of the list
        if (
          this.pointer < middleOfList &&
          this.lastIndex < active &&
          active - this.lastIndex < pageSize
        ) {
          this.pointer = Math.min(middleOfList, this.pointer + active - this.lastIndex);
        }

        // Duplicate the lines so it give an infinite list look
        const infinite = _$j.flatten([lines, lines, lines]);
        const topIndex = Math.max(0, active + lines.length - this.pointer);

        return infinite.splice(topIndex, pageSize);
      }

      getFiniteLines(lines, active, pageSize) {
        let topIndex = active - pageSize / 2;
        if (topIndex < 0) {
          topIndex = 0;
        } else if (topIndex + pageSize > lines.length) {
          topIndex = lines.length - pageSize;
        }
        return lines.splice(topIndex, pageSize);
      }
    }

    var paginator$1 = Paginator$9;

    function incrementListIndex$7(current, dir, opt) {
      const len = opt.choices.realLength;
      const shouldLoop = 'loop' in opt ? Boolean(opt.loop) : true;
      if (dir === 'up') {
        if (current > 0) {
          return current - 1;
        }
        return shouldLoop ? len - 1 : current;
      }
      if (dir === 'down') {
        if (current < len - 1) {
          return current + 1;
        }
        return shouldLoop ? 0 : current;
      }
      throw new Error('dir must be up or down');
    }

    var incrementListIndex_1$1 = incrementListIndex$7;

    /**
     * `list` type prompt
     */

    const _$i = {
      isNumber: isNumber_1$1,
      findIndex: findIndex_1$1,
      isString: isString_1$1,
    };
    const chalk$l = source$1;
    const figures$6 = figures$9.exports;
    const cliCursor$5 = cliCursor$7;
    const runAsync$6 = runAsync$b.exports;
    const { flatMap: flatMap$3, map: map$e, take: take$5, takeUntil: takeUntil$g } = require$$1$3;
    const Base$h = base$1;
    const observe$f = events$2;
    const Paginator$8 = paginator$1;
    const incrementListIndex$6 = incrementListIndex_1$1;

    class ListPrompt$1 extends Base$h {
      constructor(questions, rl, answers) {
        super(questions, rl, answers);

        if (!this.opt.choices) {
          this.throwParamError('choices');
        }

        this.firstRender = true;
        this.selected = 0;

        const def = this.opt.default;

        // If def is a Number, then use as index. Otherwise, check for value.
        if (_$i.isNumber(def) && def >= 0 && def < this.opt.choices.realLength) {
          this.selected = def;
        } else if (!_$i.isNumber(def) && def != null) {
          const index = _$i.findIndex(
            this.opt.choices.realChoices,
            ({ value }) => value === def
          );
          this.selected = Math.max(index, 0);
        }

        // Make sure no default is set (so it won't be printed)
        this.opt.default = null;

        const shouldLoop = this.opt.loop === undefined ? true : this.opt.loop;
        this.paginator = new Paginator$8(this.screen, { isInfinite: shouldLoop });
      }

      /**
       * Start the Inquiry session
       * @param  {Function} cb      Callback when prompt is done
       * @return {this}
       */

      _run(cb) {
        this.done = cb;

        const self = this;

        const events = observe$f(this.rl);
        events.normalizedUpKey.pipe(takeUntil$g(events.line)).forEach(this.onUpKey.bind(this));
        events.normalizedDownKey
          .pipe(takeUntil$g(events.line))
          .forEach(this.onDownKey.bind(this));
        events.numberKey.pipe(takeUntil$g(events.line)).forEach(this.onNumberKey.bind(this));
        events.line
          .pipe(
            take$5(1),
            map$e(this.getCurrentValue.bind(this)),
            flatMap$3((value) =>
              runAsync$6(self.opt.filter)(value, self.answers).catch((err) => err)
            )
          )
          .forEach(this.onSubmit.bind(this));

        // Init the prompt
        cliCursor$5.hide();
        this.render();

        return this;
      }

      /**
       * Render the prompt to screen
       * @return {ListPrompt} self
       */

      render() {
        // Render question
        let message = this.getQuestion();

        if (this.firstRender) {
          message += chalk$l.dim('(Use arrow keys)');
        }

        // Render choices or answer depending on the state
        if (this.status === 'answered') {
          message += chalk$l.cyan(this.opt.choices.getChoice(this.selected).short);
        } else {
          const choicesStr = listRender$1(this.opt.choices, this.selected);
          const indexPosition = this.opt.choices.indexOf(
            this.opt.choices.getChoice(this.selected)
          );
          const realIndexPosition =
            this.opt.choices.reduce((acc, value, i) => {
              // Dont count lines past the choice we are looking at
              if (i > indexPosition) {
                return acc;
              }
              // Add line if it's a separator
              if (value.type === 'separator') {
                return acc + 1;
              }

              let l = value.name;
              // Non-strings take up one line
              if (typeof l !== 'string') {
                return acc + 1;
              }

              // Calculate lines taken up by string
              l = l.split('\n');
              return acc + l.length;
            }, 0) - 1;
          message +=
            '\n' + this.paginator.paginate(choicesStr, realIndexPosition, this.opt.pageSize);
        }

        this.firstRender = false;

        this.screen.render(message);
      }

      /**
       * When user press `enter` key
       */

      onSubmit(value) {
        this.status = 'answered';

        // Rerender prompt
        this.render();

        this.screen.done();
        cliCursor$5.show();
        this.done(value);
      }

      getCurrentValue() {
        return this.opt.choices.getChoice(this.selected).value;
      }

      /**
       * When user press a key
       */
      onUpKey() {
        this.selected = incrementListIndex$6(this.selected, 'up', this.opt);
        this.render();
      }

      onDownKey() {
        this.selected = incrementListIndex$6(this.selected, 'down', this.opt);
        this.render();
      }

      onNumberKey(input) {
        if (input <= this.opt.choices.realLength) {
          this.selected = input - 1;
        }

        this.render();
      }
    }

    /**
     * Function for rendering list choices
     * @param  {Number} pointer Position of the pointer
     * @return {String}         Rendered content
     */
    function listRender$1(choices, pointer) {
      let output = '';
      let separatorOffset = 0;

      choices.forEach((choice, i) => {
        if (choice.type === 'separator') {
          separatorOffset++;
          output += '  ' + choice + '\n';
          return;
        }

        if (choice.disabled) {
          separatorOffset++;
          output += '  - ' + choice.name;
          output += ' (' + (_$i.isString(choice.disabled) ? choice.disabled : 'Disabled') + ')';
          output += '\n';
          return;
        }

        const isSelected = i - separatorOffset === pointer;
        let line = (isSelected ? figures$6.pointer + ' ' : '  ') + choice.name;
        if (isSelected) {
          line = chalk$l.cyan(line);
        }

        output += line + ' \n';
      });

      return output.replace(/\n$/, '');
    }

    var list$1 = ListPrompt$1;

    /**
     * `input` type prompt
     */

    const chalk$k = source$1;
    const { map: map$d, takeUntil: takeUntil$f } = require$$1$3;
    const Base$g = base$1;
    const observe$e = events$2;

    class InputPrompt$1 extends Base$g {
      /**
       * Start the Inquiry session
       * @param  {Function} cb      Callback when prompt is done
       * @return {this}
       */

      _run(cb) {
        this.done = cb;

        // Once user confirm (enter key)
        const events = observe$e(this.rl);
        const submit = events.line.pipe(map$d(this.filterInput.bind(this)));

        const validation = this.handleSubmitEvents(submit);
        validation.success.forEach(this.onEnd.bind(this));
        validation.error.forEach(this.onError.bind(this));

        events.keypress
          .pipe(takeUntil$f(validation.success))
          .forEach(this.onKeypress.bind(this));

        // Init
        this.render();

        return this;
      }

      /**
       * Render the prompt to screen
       * @return {InputPrompt} self
       */

      render(error) {
        let bottomContent = '';
        let appendContent = '';
        let message = this.getQuestion();
        const { transformer } = this.opt;
        const isFinal = this.status === 'answered';

        if (isFinal) {
          appendContent = this.answer;
        } else {
          appendContent = this.rl.line;
        }

        if (transformer) {
          message += transformer(appendContent, this.answers, { isFinal });
        } else {
          message += isFinal ? chalk$k.cyan(appendContent) : appendContent;
        }

        if (error) {
          bottomContent = chalk$k.red('>> ') + error;
        }

        this.screen.render(message, bottomContent);
      }

      /**
       * When user press `enter` key
       */

      filterInput(input) {
        if (!input) {
          return this.opt.default == null ? '' : this.opt.default;
        }

        return input;
      }

      onEnd(state) {
        this.answer = state.value;
        this.status = 'answered';

        // Re-render prompt
        this.render();

        this.screen.done();
        this.done(state.value);
      }

      onError({ value = '', isValid }) {
        this.rl.line += value;
        this.rl.cursor += value.length;
        this.render(isValid);
      }

      /**
       * When user press a key
       */

      onKeypress() {
        this.state = 'touched';

        this.render();
      }
    }

    var input$1 = InputPrompt$1;

    /**
     * `input` type prompt
     */

    const Input$1 = input$1;

    /**
     * Extention of the Input prompt specifically for use with number inputs.
     */

    class NumberPrompt$1 extends Input$1 {
      filterInput(input) {
        if (input && typeof input === 'string') {
          input = input.trim();
          // Match a number in the input
          const numberMatch = input.match(/(^-?\d+|^\d+\.\d*|^\d*\.\d+)(e\d+)?$/);
          // If a number is found, return that input.
          if (numberMatch) {
            return Number(numberMatch[0]);
          }
        }

        // If the input was invalid return the default value.
        return this.opt.default == null ? NaN : this.opt.default;
      }
    }

    var number$1 = NumberPrompt$1;

    var baseGetTag$a = _baseGetTag$1,
        isObjectLike$c = isObjectLike_1$1;

    /** `Object#toString` result references. */
    var boolTag$5 = '[object Boolean]';

    /**
     * Checks if `value` is classified as a boolean primitive or object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.
     * @example
     *
     * _.isBoolean(false);
     * // => true
     *
     * _.isBoolean(null);
     * // => false
     */
    function isBoolean$1(value) {
      return value === true || value === false ||
        (isObjectLike$c(value) && baseGetTag$a(value) == boolTag$5);
    }

    var isBoolean_1$1 = isBoolean$1;

    /**
     * `confirm` type prompt
     */

    const _$h = {
      extend: extend$3,
      isBoolean: isBoolean_1$1,
    };
    const chalk$j = source$1;
    const { take: take$4, takeUntil: takeUntil$e } = require$$1$3;
    const Base$f = base$1;
    const observe$d = events$2;

    class ConfirmPrompt$1 extends Base$f {
      constructor(questions, rl, answers) {
        super(questions, rl, answers);

        let rawDefault = true;

        _$h.extend(this.opt, {
          filter(input) {
            let value = rawDefault;
            if (input != null && input !== '') {
              value = /^y(es)?/i.test(input);
            }

            return value;
          },
        });

        if (_$h.isBoolean(this.opt.default)) {
          rawDefault = this.opt.default;
        }

        this.opt.default = rawDefault ? 'Y/n' : 'y/N';
      }

      /**
       * Start the Inquiry session
       * @param  {Function} cb   Callback when prompt is done
       * @return {this}
       */

      _run(cb) {
        this.done = cb;

        // Once user confirm (enter key)
        const events = observe$d(this.rl);
        events.keypress.pipe(takeUntil$e(events.line)).forEach(this.onKeypress.bind(this));

        events.line.pipe(take$4(1)).forEach(this.onEnd.bind(this));

        // Init
        this.render();

        return this;
      }

      /**
       * Render the prompt to screen
       * @return {ConfirmPrompt} self
       */

      render(answer) {
        let message = this.getQuestion();

        if (typeof answer === 'boolean') {
          message += chalk$j.cyan(answer ? 'Yes' : 'No');
        } else {
          message += this.rl.line;
        }

        this.screen.render(message);

        return this;
      }

      /**
       * When user press `enter` key
       */

      onEnd(input) {
        this.status = 'answered';

        const output = this.opt.filter(input);
        this.render(output);

        this.screen.done();
        this.done(output);
      }

      /**
       * When user press a key
       */

      onKeypress() {
        this.render();
      }
    }

    var confirm$1 = ConfirmPrompt$1;

    /**
     * `rawlist` type prompt
     */

    const _$g = {
      extend: extend$3,
      isNumber: isNumber_1$1,
      findIndex: findIndex_1$1,
    };
    const chalk$i = source$1;
    const { map: map$c, takeUntil: takeUntil$d } = require$$1$3;
    const Base$e = base$1;
    const Separator$5 = separator$1;
    const observe$c = events$2;
    const Paginator$7 = paginator$1;
    const incrementListIndex$5 = incrementListIndex_1$1;

    class RawListPrompt$1 extends Base$e {
      constructor(questions, rl, answers) {
        super(questions, rl, answers);

        if (!this.opt.choices) {
          this.throwParamError('choices');
        }

        this.opt.validChoices = this.opt.choices.filter(Separator$5.exclude);

        this.selected = 0;
        this.rawDefault = 0;

        _$g.extend(this.opt, {
          validate(val) {
            return val != null;
          },
        });

        const def = this.opt.default;
        if (_$g.isNumber(def) && def >= 0 && def < this.opt.choices.realLength) {
          this.selected = def;
          this.rawDefault = def;
        } else if (!_$g.isNumber(def) && def != null) {
          const index = _$g.findIndex(
            this.opt.choices.realChoices,
            ({ value }) => value === def
          );
          const safeIndex = Math.max(index, 0);
          this.selected = safeIndex;
          this.rawDefault = safeIndex;
        }

        // Make sure no default is set (so it won't be printed)
        this.opt.default = null;

        const shouldLoop = this.opt.loop === undefined ? true : this.opt.loop;
        this.paginator = new Paginator$7(undefined, { isInfinite: shouldLoop });
      }

      /**
       * Start the Inquiry session
       * @param  {Function} cb      Callback when prompt is done
       * @return {this}
       */

      _run(cb) {
        this.done = cb;

        // Once user confirm (enter key)
        const events = observe$c(this.rl);
        const submit = events.line.pipe(map$c(this.getCurrentValue.bind(this)));

        const validation = this.handleSubmitEvents(submit);
        validation.success.forEach(this.onEnd.bind(this));
        validation.error.forEach(this.onError.bind(this));

        events.normalizedUpKey
          .pipe(takeUntil$d(validation.success))
          .forEach(this.onUpKey.bind(this));
        events.normalizedDownKey
          .pipe(takeUntil$d(validation.success))
          .forEach(this.onDownKey.bind(this));
        events.keypress
          .pipe(takeUntil$d(validation.success))
          .forEach(this.onKeypress.bind(this));
        // Init the prompt
        this.render();

        return this;
      }

      /**
       * Render the prompt to screen
       * @return {RawListPrompt} self
       */

      render(error) {
        // Render question
        let message = this.getQuestion();
        let bottomContent = '';

        if (this.status === 'answered') {
          message += chalk$i.cyan(this.opt.choices.getChoice(this.selected).short);
        } else {
          const choicesStr = renderChoices$5(this.opt.choices, this.selected);
          message +=
            '\n' + this.paginator.paginate(choicesStr, this.selected, this.opt.pageSize);
          message += '\n  Answer: ';
        }
        message += this.rl.line;

        if (error) {
          bottomContent = '\n' + chalk$i.red('>> ') + error;
        }

        this.screen.render(message, bottomContent);
      }

      /**
       * When user press `enter` key
       */

      getCurrentValue(index) {
        if (index == null) {
          index = this.rawDefault;
        } else if (index === '') {
          this.selected = this.selected === undefined ? -1 : this.selected;
          index = this.selected;
        } else {
          index -= 1;
        }

        const choice = this.opt.choices.getChoice(index);
        return choice ? choice.value : null;
      }

      onEnd(state) {
        this.status = 'answered';
        this.answer = state.value;

        // Re-render prompt
        this.render();

        this.screen.done();
        this.done(state.value);
      }

      onError() {
        this.render('Please enter a valid index');
      }

      /**
       * When user press a key
       */

      onKeypress() {
        const index = this.rl.line.length ? Number(this.rl.line) - 1 : 0;

        if (this.opt.choices.getChoice(index)) {
          this.selected = index;
        } else {
          this.selected = undefined;
        }
        this.render();
      }

      /**
       * When user press up key
       */

      onUpKey() {
        this.onArrowKey('up');
      }

      /**
       * When user press down key
       */

      onDownKey() {
        this.onArrowKey('down');
      }

      /**
       * When user press up or down key
       * @param {String} type Arrow type: up or down
       */

      onArrowKey(type) {
        this.selected = incrementListIndex$5(this.selected, type, this.opt);
        this.rl.line = String(this.selected + 1);
      }
    }

    /**
     * Function for rendering list choices
     * @param  {Number} pointer Position of the pointer
     * @return {String}         Rendered content
     */

    function renderChoices$5(choices, pointer) {
      let output = '';
      let separatorOffset = 0;

      choices.forEach((choice, i) => {
        output += '\n  ';

        if (choice.type === 'separator') {
          separatorOffset++;
          output += ' ' + choice;
          return;
        }

        const index = i - separatorOffset;
        let display = index + 1 + ') ' + choice.name;
        if (index === pointer) {
          display = chalk$i.cyan(display);
        }

        output += display;
      });

      return output;
    }

    var rawlist$1 = RawListPrompt$1;

    /**
     * The base implementation of `_.isNaN` without support for number objects.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
     */

    function baseIsNaN$3(value) {
      return value !== value;
    }

    var _baseIsNaN$1 = baseIsNaN$3;

    /**
     * A specialized version of `_.indexOf` which performs strict equality
     * comparisons of values, i.e. `===`.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} fromIndex The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     */

    function strictIndexOf$3(array, value, fromIndex) {
      var index = fromIndex - 1,
          length = array.length;

      while (++index < length) {
        if (array[index] === value) {
          return index;
        }
      }
      return -1;
    }

    var _strictIndexOf$1 = strictIndexOf$3;

    var baseFindIndex$3 = _baseFindIndex$1,
        baseIsNaN$2 = _baseIsNaN$1,
        strictIndexOf$2 = _strictIndexOf$1;

    /**
     * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} fromIndex The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     */
    function baseIndexOf$3(array, value, fromIndex) {
      return value === value
        ? strictIndexOf$2(array, value, fromIndex)
        : baseFindIndex$3(array, baseIsNaN$2, fromIndex);
    }

    var _baseIndexOf$1 = baseIndexOf$3;

    var baseIndexOf$2 = _baseIndexOf$1;

    /**
     * A specialized version of `_.includes` for arrays without support for
     * specifying an index to search from.
     *
     * @private
     * @param {Array} [array] The array to inspect.
     * @param {*} target The value to search for.
     * @returns {boolean} Returns `true` if `target` is found, else `false`.
     */
    function arrayIncludes$3(array, value) {
      var length = array == null ? 0 : array.length;
      return !!length && baseIndexOf$2(array, value, 0) > -1;
    }

    var _arrayIncludes$1 = arrayIncludes$3;

    /**
     * This function is like `arrayIncludes` except that it accepts a comparator.
     *
     * @private
     * @param {Array} [array] The array to inspect.
     * @param {*} target The value to search for.
     * @param {Function} comparator The comparator invoked per element.
     * @returns {boolean} Returns `true` if `target` is found, else `false`.
     */

    function arrayIncludesWith$3(array, value, comparator) {
      var index = -1,
          length = array == null ? 0 : array.length;

      while (++index < length) {
        if (comparator(value, array[index])) {
          return true;
        }
      }
      return false;
    }

    var _arrayIncludesWith$1 = arrayIncludesWith$3;

    /**
     * This method returns `undefined`.
     *
     * @static
     * @memberOf _
     * @since 2.3.0
     * @category Util
     * @example
     *
     * _.times(2, _.noop);
     * // => [undefined, undefined]
     */

    function noop$5() {
      // No operation performed.
    }

    var noop_1$1 = noop$5;

    var Set$4 = _Set$1,
        noop$4 = noop_1$1,
        setToArray$5 = _setToArray$1;

    /** Used as references for various `Number` constants. */
    var INFINITY$4 = 1 / 0;

    /**
     * Creates a set object of `values`.
     *
     * @private
     * @param {Array} values The values to add to the set.
     * @returns {Object} Returns the new set.
     */
    var createSet$3 = !(Set$4 && (1 / setToArray$5(new Set$4([,-0]))[1]) == INFINITY$4) ? noop$4 : function(values) {
      return new Set$4(values);
    };

    var _createSet$1 = createSet$3;

    var SetCache$3 = _SetCache$1,
        arrayIncludes$2 = _arrayIncludes$1,
        arrayIncludesWith$2 = _arrayIncludesWith$1,
        cacheHas$3 = _cacheHas$1,
        createSet$2 = _createSet$1,
        setToArray$4 = _setToArray$1;

    /** Used as the size to enable large array optimizations. */
    var LARGE_ARRAY_SIZE$2 = 200;

    /**
     * The base implementation of `_.uniqBy` without support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     */
    function baseUniq$3(array, iteratee, comparator) {
      var index = -1,
          includes = arrayIncludes$2,
          length = array.length,
          isCommon = true,
          result = [],
          seen = result;

      if (comparator) {
        isCommon = false;
        includes = arrayIncludesWith$2;
      }
      else if (length >= LARGE_ARRAY_SIZE$2) {
        var set = iteratee ? null : createSet$2(array);
        if (set) {
          return setToArray$4(set);
        }
        isCommon = false;
        includes = cacheHas$3;
        seen = new SetCache$3;
      }
      else {
        seen = iteratee ? [] : result;
      }
      outer:
      while (++index < length) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        value = (comparator || value !== 0) ? value : 0;
        if (isCommon && computed === computed) {
          var seenIndex = seen.length;
          while (seenIndex--) {
            if (seen[seenIndex] === computed) {
              continue outer;
            }
          }
          if (iteratee) {
            seen.push(computed);
          }
          result.push(value);
        }
        else if (!includes(seen, computed, comparator)) {
          if (seen !== result) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
      return result;
    }

    var _baseUniq$1 = baseUniq$3;

    var baseUniq$2 = _baseUniq$1;

    /**
     * Creates a duplicate-free version of an array, using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons, in which only the first occurrence of each element
     * is kept. The order of result values is determined by the order they occur
     * in the array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.uniq([2, 1, 2]);
     * // => [2, 1]
     */
    function uniq$1(array) {
      return (array && array.length) ? baseUniq$2(array) : [];
    }

    var uniq_1$1 = uniq$1;

    /**
     * `rawlist` type prompt
     */

    const _$f = {
      uniq: uniq_1$1,
      isString: isString_1$1,
      isNumber: isNumber_1$1,
      findIndex: findIndex_1$1,
    };
    const chalk$h = source$1;
    const { map: map$b, takeUntil: takeUntil$c } = require$$1$3;
    const Base$d = base$1;
    const Separator$4 = separator$1;
    const observe$b = events$2;
    const Paginator$6 = paginator$1;

    class ExpandPrompt$1 extends Base$d {
      constructor(questions, rl, answers) {
        super(questions, rl, answers);

        if (!this.opt.choices) {
          this.throwParamError('choices');
        }

        this.validateChoices(this.opt.choices);

        // Add the default `help` (/expand) option
        this.opt.choices.push({
          key: 'h',
          name: 'Help, list all options',
          value: 'help',
        });

        this.opt.validate = (choice) => {
          if (choice == null) {
            return 'Please enter a valid command';
          }

          return choice !== 'help';
        };

        // Setup the default string (capitalize the default key)
        this.opt.default = this.generateChoicesString(this.opt.choices, this.opt.default);

        this.paginator = new Paginator$6(this.screen);
      }

      /**
       * Start the Inquiry session
       * @param  {Function} cb      Callback when prompt is done
       * @return {this}
       */

      _run(cb) {
        this.done = cb;

        // Save user answer and update prompt to show selected option.
        const events = observe$b(this.rl);
        const validation = this.handleSubmitEvents(
          events.line.pipe(map$b(this.getCurrentValue.bind(this)))
        );
        validation.success.forEach(this.onSubmit.bind(this));
        validation.error.forEach(this.onError.bind(this));
        this.keypressObs = events.keypress
          .pipe(takeUntil$c(validation.success))
          .forEach(this.onKeypress.bind(this));

        // Init the prompt
        this.render();

        return this;
      }

      /**
       * Render the prompt to screen
       * @return {ExpandPrompt} self
       */

      render(error, hint) {
        let message = this.getQuestion();
        let bottomContent = '';

        if (this.status === 'answered') {
          message += chalk$h.cyan(this.answer);
        } else if (this.status === 'expanded') {
          const choicesStr = renderChoices$4(this.opt.choices, this.selectedKey);
          message += this.paginator.paginate(choicesStr, this.selectedKey, this.opt.pageSize);
          message += '\n  Answer: ';
        }

        message += this.rl.line;

        if (error) {
          bottomContent = chalk$h.red('>> ') + error;
        }

        if (hint) {
          bottomContent = chalk$h.cyan('>> ') + hint;
        }

        this.screen.render(message, bottomContent);
      }

      getCurrentValue(input) {
        if (!input) {
          input = this.rawDefault;
        }

        const selected = this.opt.choices.where({ key: input.toLowerCase().trim() })[0];
        if (!selected) {
          return null;
        }

        return selected.value;
      }

      /**
       * Generate the prompt choices string
       * @return {String}  Choices string
       */

      getChoices() {
        let output = '';

        this.opt.choices.forEach((choice) => {
          output += '\n  ';

          if (choice.type === 'separator') {
            output += ' ' + choice;
            return;
          }

          let choiceStr = choice.key + ') ' + choice.name;
          if (this.selectedKey === choice.key) {
            choiceStr = chalk$h.cyan(choiceStr);
          }

          output += choiceStr;
        });

        return output;
      }

      onError(state) {
        if (state.value === 'help') {
          this.selectedKey = '';
          this.status = 'expanded';
          this.render();
          return;
        }

        this.render(state.isValid);
      }

      /**
       * When user press `enter` key
       */

      onSubmit(state) {
        this.status = 'answered';
        const choice = this.opt.choices.where({ value: state.value })[0];
        this.answer = choice.short || choice.name;

        // Re-render prompt
        this.render();
        this.screen.done();
        this.done(state.value);
      }

      /**
       * When user press a key
       */

      onKeypress() {
        this.selectedKey = this.rl.line.toLowerCase();
        const selected = this.opt.choices.where({ key: this.selectedKey })[0];
        if (this.status === 'expanded') {
          this.render();
        } else {
          this.render(null, selected ? selected.name : null);
        }
      }

      /**
       * Validate the choices
       * @param {Array} choices
       */

      validateChoices(choices) {
        let formatError;
        const errors = [];
        const keymap = {};
        choices.filter(Separator$4.exclude).forEach((choice) => {
          if (!choice.key || choice.key.length !== 1) {
            formatError = true;
          }

          choice.key = String(choice.key).toLowerCase();

          if (keymap[choice.key]) {
            errors.push(choice.key);
          }

          keymap[choice.key] = true;
        });

        if (formatError) {
          throw new Error(
            'Format error: `key` param must be a single letter and is required.'
          );
        }

        if (keymap.h) {
          throw new Error(
            'Reserved key error: `key` param cannot be `h` - this value is reserved.'
          );
        }

        if (errors.length) {
          throw new Error(
            'Duplicate key error: `key` param must be unique. Duplicates: ' +
              _$f.uniq(errors).join(', ')
          );
        }
      }

      /**
       * Generate a string out of the choices keys
       * @param  {Array}  choices
       * @param  {Number|String} default - the choice index or name to capitalize
       * @return {String} The rendered choices key string
       */
      generateChoicesString(choices, defaultChoice) {
        let defIndex = choices.realLength - 1;
        if (_$f.isNumber(defaultChoice) && this.opt.choices.getChoice(defaultChoice)) {
          defIndex = defaultChoice;
        } else if (_$f.isString(defaultChoice)) {
          const index = _$f.findIndex(
            choices.realChoices,
            ({ value }) => value === defaultChoice
          );
          defIndex = index === -1 ? defIndex : index;
        }

        const defStr = this.opt.choices.pluck('key');
        this.rawDefault = defStr[defIndex];
        defStr[defIndex] = String(defStr[defIndex]).toUpperCase();
        return defStr.join('');
      }
    }

    /**
     * Function for rendering checkbox choices
     * @param  {String} pointer Selected key
     * @return {String}         Rendered content
     */

    function renderChoices$4(choices, pointer) {
      let output = '';

      choices.forEach((choice) => {
        output += '\n  ';

        if (choice.type === 'separator') {
          output += ' ' + choice;
          return;
        }

        let choiceStr = choice.key + ') ' + choice.name;
        if (pointer === choice.key) {
          choiceStr = chalk$h.cyan(choiceStr);
        }

        output += choiceStr;
      });

      return output;
    }

    var expand$4 = ExpandPrompt$1;

    /**
     * `list` type prompt
     */

    const _$e = {
      isArray: isArray_1$1,
      map: map_1$1,
      isString: isString_1$1,
    };
    const chalk$g = source$1;
    const cliCursor$4 = cliCursor$7;
    const figures$5 = figures$9.exports;
    const { map: map$a, takeUntil: takeUntil$b } = require$$1$3;
    const Base$c = base$1;
    const observe$a = events$2;
    const Paginator$5 = paginator$1;
    const incrementListIndex$4 = incrementListIndex_1$1;

    class CheckboxPrompt$1 extends Base$c {
      constructor(questions, rl, answers) {
        super(questions, rl, answers);

        if (!this.opt.choices) {
          this.throwParamError('choices');
        }

        if (_$e.isArray(this.opt.default)) {
          this.opt.choices.forEach(function (choice) {
            if (this.opt.default.indexOf(choice.value) >= 0) {
              choice.checked = true;
            }
          }, this);
        }

        this.pointer = 0;

        // Make sure no default is set (so it won't be printed)
        this.opt.default = null;

        const shouldLoop = this.opt.loop === undefined ? true : this.opt.loop;
        this.paginator = new Paginator$5(this.screen, { isInfinite: shouldLoop });
      }

      /**
       * Start the Inquiry session
       * @param  {Function} cb      Callback when prompt is done
       * @return {this}
       */

      _run(cb) {
        this.done = cb;

        const events = observe$a(this.rl);

        const validation = this.handleSubmitEvents(
          events.line.pipe(map$a(this.getCurrentValue.bind(this)))
        );
        validation.success.forEach(this.onEnd.bind(this));
        validation.error.forEach(this.onError.bind(this));

        events.normalizedUpKey
          .pipe(takeUntil$b(validation.success))
          .forEach(this.onUpKey.bind(this));
        events.normalizedDownKey
          .pipe(takeUntil$b(validation.success))
          .forEach(this.onDownKey.bind(this));
        events.numberKey
          .pipe(takeUntil$b(validation.success))
          .forEach(this.onNumberKey.bind(this));
        events.spaceKey
          .pipe(takeUntil$b(validation.success))
          .forEach(this.onSpaceKey.bind(this));
        events.aKey.pipe(takeUntil$b(validation.success)).forEach(this.onAllKey.bind(this));
        events.iKey.pipe(takeUntil$b(validation.success)).forEach(this.onInverseKey.bind(this));

        // Init the prompt
        cliCursor$4.hide();
        this.render();
        this.firstRender = false;

        return this;
      }

      /**
       * Render the prompt to screen
       * @return {CheckboxPrompt} self
       */

      render(error) {
        // Render question
        let message = this.getQuestion();
        let bottomContent = '';

        if (!this.dontShowHints) {
          message +=
            '(Press ' +
            chalk$g.cyan.bold('<space>') +
            ' to select, ' +
            chalk$g.cyan.bold('<a>') +
            ' to toggle all, ' +
            chalk$g.cyan.bold('<i>') +
            ' to invert selection, and ' +
            chalk$g.cyan.bold('<enter>') +
            ' to proceed)';
        }

        // Render choices or answer depending on the state
        if (this.status === 'answered') {
          message += chalk$g.cyan(this.selection.join(', '));
        } else {
          const choicesStr = renderChoices$3(this.opt.choices, this.pointer);
          const indexPosition = this.opt.choices.indexOf(
            this.opt.choices.getChoice(this.pointer)
          );
          const realIndexPosition =
            this.opt.choices.reduce((acc, value, i) => {
              // Dont count lines past the choice we are looking at
              if (i > indexPosition) {
                return acc;
              }
              // Add line if it's a separator
              if (value.type === 'separator') {
                return acc + 1;
              }

              let l = value.name;
              // Non-strings take up one line
              if (typeof l !== 'string') {
                return acc + 1;
              }

              // Calculate lines taken up by string
              l = l.split('\n');
              return acc + l.length;
            }, 0) - 1;
          message +=
            '\n' + this.paginator.paginate(choicesStr, realIndexPosition, this.opt.pageSize);
        }

        if (error) {
          bottomContent = chalk$g.red('>> ') + error;
        }

        this.screen.render(message, bottomContent);
      }

      /**
       * When user press `enter` key
       */

      onEnd(state) {
        this.status = 'answered';
        this.dontShowHints = true;
        // Rerender prompt (and clean subline error)
        this.render();

        this.screen.done();
        cliCursor$4.show();
        this.done(state.value);
      }

      onError(state) {
        this.render(state.isValid);
      }

      getCurrentValue() {
        const choices = this.opt.choices.filter(
          (choice) => Boolean(choice.checked) && !choice.disabled
        );

        this.selection = _$e.map(choices, 'short');
        return _$e.map(choices, 'value');
      }

      onUpKey() {
        this.pointer = incrementListIndex$4(this.pointer, 'up', this.opt);
        this.render();
      }

      onDownKey() {
        this.pointer = incrementListIndex$4(this.pointer, 'down', this.opt);
        this.render();
      }

      onNumberKey(input) {
        if (input <= this.opt.choices.realLength) {
          this.pointer = input - 1;
          this.toggleChoice(this.pointer);
        }

        this.render();
      }

      onSpaceKey() {
        this.toggleChoice(this.pointer);
        this.render();
      }

      onAllKey() {
        const shouldBeChecked = Boolean(
          this.opt.choices.find((choice) => choice.type !== 'separator' && !choice.checked)
        );

        this.opt.choices.forEach((choice) => {
          if (choice.type !== 'separator') {
            choice.checked = shouldBeChecked;
          }
        });

        this.render();
      }

      onInverseKey() {
        this.opt.choices.forEach((choice) => {
          if (choice.type !== 'separator') {
            choice.checked = !choice.checked;
          }
        });

        this.render();
      }

      toggleChoice(index) {
        const item = this.opt.choices.getChoice(index);
        if (item !== undefined) {
          this.opt.choices.getChoice(index).checked = !item.checked;
        }
      }
    }

    /**
     * Function for rendering checkbox choices
     * @param  {Number} pointer Position of the pointer
     * @return {String}         Rendered content
     */

    function renderChoices$3(choices, pointer) {
      let output = '';
      let separatorOffset = 0;

      choices.forEach((choice, i) => {
        if (choice.type === 'separator') {
          separatorOffset++;
          output += ' ' + choice + '\n';
          return;
        }

        if (choice.disabled) {
          separatorOffset++;
          output += ' - ' + choice.name;
          output += ' (' + (_$e.isString(choice.disabled) ? choice.disabled : 'Disabled') + ')';
        } else {
          const line = getCheckbox$1(choice.checked) + ' ' + choice.name;
          if (i - separatorOffset === pointer) {
            output += chalk$g.cyan(figures$5.pointer + line);
          } else {
            output += ' ' + line;
          }
        }

        output += '\n';
      });

      return output.replace(/\n$/, '');
    }

    /**
     * Get the checkbox
     * @param  {Boolean} checked - add a X or not to the checkbox
     * @return {String} Composited checkbox string
     */

    function getCheckbox$1(checked) {
      return checked ? chalk$g.green(figures$5.radioOn) : figures$5.radioOff;
    }

    var checkbox$1 = CheckboxPrompt$1;

    /**
     * `password` type prompt
     */

    const chalk$f = source$1;
    const { map: map$9, takeUntil: takeUntil$a } = require$$1$3;
    const Base$b = base$1;
    const observe$9 = events$2;

    function mask$1(input, maskChar) {
      input = String(input);
      maskChar = typeof maskChar === 'string' ? maskChar : '*';
      if (input.length === 0) {
        return '';
      }

      return new Array(input.length + 1).join(maskChar);
    }

    class PasswordPrompt$1 extends Base$b {
      /**
       * Start the Inquiry session
       * @param  {Function} cb      Callback when prompt is done
       * @return {this}
       */

      _run(cb) {
        this.done = cb;

        const events = observe$9(this.rl);

        // Once user confirm (enter key)
        const submit = events.line.pipe(map$9(this.filterInput.bind(this)));

        const validation = this.handleSubmitEvents(submit);
        validation.success.forEach(this.onEnd.bind(this));
        validation.error.forEach(this.onError.bind(this));

        events.keypress
          .pipe(takeUntil$a(validation.success))
          .forEach(this.onKeypress.bind(this));

        // Init
        this.render();

        return this;
      }

      /**
       * Render the prompt to screen
       * @return {PasswordPrompt} self
       */

      render(error) {
        let message = this.getQuestion();
        let bottomContent = '';

        if (this.status === 'answered') {
          message += this.getMaskedValue(this.answer);
        } else {
          message += this.getMaskedValue(this.rl.line || '');
        }

        if (error) {
          bottomContent = '\n' + chalk$f.red('>> ') + error;
        }

        this.screen.render(message, bottomContent);
      }

      getMaskedValue(value) {
        if (this.status === 'answered') {
          return this.opt.mask
            ? chalk$f.cyan(mask$1(value, this.opt.mask))
            : chalk$f.italic.dim('[hidden]');
        }
        return this.opt.mask
          ? mask$1(value, this.opt.mask)
          : chalk$f.italic.dim('[input is hidden] ');
      }

      /**
       * Mask value during async filter/validation.
       */
      getSpinningValue(value) {
        return this.getMaskedValue(value);
      }

      /**
       * When user press `enter` key
       */

      filterInput(input) {
        if (!input) {
          return this.opt.default == null ? '' : this.opt.default;
        }

        return input;
      }

      onEnd(state) {
        this.status = 'answered';
        this.answer = state.value;

        // Re-render prompt
        this.render();

        this.screen.done();
        this.done(state.value);
      }

      onError(state) {
        this.render(state.isValid);
      }

      onKeypress() {
        // If user press a key, just clear the default value
        if (this.opt.default) {
          this.opt.default = undefined;
        }

        this.render();
      }
    }

    var password$1 = PasswordPrompt$1;

    var main$4 = {};

    var chardet$1 = {};

    var match$2 = function(det, rec, confidence, name, lang) {
      this.confidence = confidence;
      this.name = name || rec.name(det);
      this.lang = lang;
    };

    var Match$1 = match$2;

    /**
     * Charset recognizer for UTF-8
     */
    var utf8$3 = function() {
      this.name = function() {
        return 'UTF-8';
      };
      this.match = function(det) {

        var hasBOM = false,
          numValid = 0,
          numInvalid = 0,
          input = det.fRawInput,
          trailBytes = 0,
          confidence;

        if (det.fRawLength >= 3 &&
          (input[0] & 0xff) == 0xef && (input[1] & 0xff) == 0xbb && (input[2] & 0xff) == 0xbf) {
          hasBOM = true;
        }

        // Scan for multi-byte sequences
        for (var i = 0; i < det.fRawLength; i++) {
          var b = input[i];
          if ((b & 0x80) == 0)
            continue; // ASCII

          // Hi bit on char found.  Figure out how long the sequence should be
          if ((b & 0x0e0) == 0x0c0) {
            trailBytes = 1;
          } else if ((b & 0x0f0) == 0x0e0) {
            trailBytes = 2;
          } else if ((b & 0x0f8) == 0xf0) {
            trailBytes = 3;
          } else {
            numInvalid++;
            if (numInvalid > 5)
              break;
            trailBytes = 0;
          }

          // Verify that we've got the right number of trail bytes in the sequence
          for (;;) {
            i++;
            if (i >= det.fRawLength)
              break;

            if ((input[i] & 0xc0) != 0x080) {
              numInvalid++;
              break;
            }
            if (--trailBytes == 0) {
              numValid++;
              break;
            }
          }
        }

        // Cook up some sort of confidence score, based on presense of a BOM
        //    and the existence of valid and/or invalid multi-byte sequences.
        confidence = 0;
        if (hasBOM && numInvalid == 0)
          confidence = 100;
        else if (hasBOM && numValid > numInvalid * 10)
          confidence = 80;
        else if (numValid > 3 && numInvalid == 0)
          confidence = 100;
        else if (numValid > 0 && numInvalid == 0)
          confidence = 80;
        else if (numValid == 0 && numInvalid == 0)
          // Plain ASCII.
          confidence = 10;
        else if (numValid > numInvalid * 10)
          // Probably corruput utf-8 data.  Valid sequences aren't likely by chance.
          confidence = 25;
        else
          return null

        return new Match$1(det, this, confidence);
      };
    };

    var unicode$3 = {exports: {}};

    (function (module) {
    var util = require$$0__default["default"],
      Match = match$2;

    /**
     * This class matches UTF-16 and UTF-32, both big- and little-endian. The
     * BOM will be used if it is present.
     */
    module.exports.UTF_16BE = function() {
      this.name = function() {
        return 'UTF-16BE';
      };
      this.match = function(det) {
        var input = det.fRawInput;

        if (input.length >= 2 && ((input[0] & 0xff) == 0xfe && (input[1] & 0xff) == 0xff)) {
          return new Match(det, this, 100); // confidence = 100
        }

        // TODO: Do some statistics to check for unsigned UTF-16BE
        return null;
      };
    };

    module.exports.UTF_16LE = function() {
      this.name = function() {
        return 'UTF-16LE';
      };
      this.match = function(det) {
        var input = det.fRawInput;

        if (input.length >= 2 && ((input[0] & 0xff) == 0xff && (input[1] & 0xff) == 0xfe)) {
          // LE BOM is present.
          if (input.length >= 4 && input[2] == 0x00 && input[3] == 0x00) {
            // It is probably UTF-32 LE, not UTF-16
            return null;
          }
          return new Match(det, this, 100); // confidence = 100
        }

        // TODO: Do some statistics to check for unsigned UTF-16LE
        return null;
      };
    };

    function UTF_32() {}UTF_32.prototype.match = function(det) {
      var input      = det.fRawInput,
        limit      = (det.fRawLength / 4) * 4,
        numValid   = 0,
        numInvalid = 0,
        hasBOM     = false,
        confidence = 0;

      if (limit == 0) {
        return null;
      }

      if (this.getChar(input, 0) == 0x0000FEFF) {
        hasBOM = true;
      }

      for (var i = 0; i < limit; i += 4) {
        var ch = this.getChar(input, i);

        if (ch < 0 || ch >= 0x10FFFF || (ch >= 0xD800 && ch <= 0xDFFF)) {
          numInvalid += 1;
        } else {
          numValid += 1;
        }
      }

      // Cook up some sort of confidence score, based on presence of a BOM
      //    and the existence of valid and/or invalid multi-byte sequences.
      if (hasBOM && numInvalid == 0) {
        confidence = 100;
      } else if (hasBOM && numValid > numInvalid * 10) {
        confidence = 80;
      } else if (numValid > 3 && numInvalid == 0) {
        confidence = 100;
      } else if (numValid > 0 && numInvalid == 0) {
        confidence = 80;
      } else if (numValid > numInvalid * 10) {
        // Probably corrupt UTF-32BE data.  Valid sequences aren't likely by chance.
        confidence = 25;
      }

      // return confidence == 0 ? null : new CharsetMatch(det, this, confidence);
      return confidence == 0 ? null : new Match(det, this, confidence);
    };

    module.exports.UTF_32BE = function() {
      this.name = function() {
        return 'UTF-32BE';
      };
      this.getChar = function(input, index) {
        return (input[index + 0] & 0xff) << 24 | (input[index + 1] & 0xff) << 16 |
             (input[index + 2] & 0xff) <<  8 | (input[index + 3] & 0xff);
      };
    };
    util.inherits(module.exports.UTF_32BE, UTF_32);

    module.exports.UTF_32LE = function() {
      this.name = function() {
        return 'UTF-32LE';
      };
      this.getChar = function(input, index) {
        return (input[index + 3] & 0xff) << 24 | (input[index + 2] & 0xff) << 16 |
             (input[index + 1] & 0xff) <<  8 | (input[index + 0] & 0xff);
      };
    };
    util.inherits(module.exports.UTF_32LE, UTF_32);
    }(unicode$3));

    var mbcs$3 = {exports: {}};

    (function (module) {
    var util = require$$0__default["default"],
      Match = match$2;

    /**
     * Binary search implementation (recursive)
     */
    function binarySearch(arr, searchValue) {
      function find(arr, searchValue, left, right) {
        if (right < left)
          return -1;

        /*
        int mid = mid = (left + right) / 2;
        There is a bug in the above line;
        Joshua Bloch suggests the following replacement:
        */
        var mid = Math.floor((left + right) >>> 1);
        if (searchValue > arr[mid])
          return find(arr, searchValue, mid + 1, right);

        if (searchValue < arr[mid])
          return find(arr, searchValue, left, mid - 1);

        return mid;
      }
      return find(arr, searchValue, 0, arr.length - 1);
    }
    // 'Character'  iterated character class.
    //    Recognizers for specific mbcs encodings make their 'characters' available
    //    by providing a nextChar() function that fills in an instance of iteratedChar
    //    with the next char from the input.
    //    The returned characters are not converted to Unicode, but remain as the raw
    //    bytes (concatenated into an int) from the codepage data.
    //
    //  For Asian charsets, use the raw input rather than the input that has been
    //   stripped of markup.  Detection only considers multi-byte chars, effectively
    //   stripping markup anyway, and double byte chars do occur in markup too.
    //
    function IteratedChar() {

      this.charValue = 0; // 1-4 bytes from the raw input data
      this.index     = 0;
      this.nextIndex = 0;
      this.error     = false;
      this.done      = false;

      this.reset = function() {
        this.charValue = 0;
        this.index     = -1;
        this.nextIndex = 0;
        this.error     = false;
        this.done      = false;
      };

      this.nextByte = function(det) {
        if (this.nextIndex >= det.fRawLength) {
          this.done = true;
          return -1;
        }
        var byteValue = det.fRawInput[this.nextIndex++] & 0x00ff;
        return byteValue;
      };
    }


    /**
     * Asian double or multi-byte - charsets.
     * Match is determined mostly by the input data adhering to the
     * encoding scheme for the charset, and, optionally,
     * frequency-of-occurence of characters.
     */

    function mbcs() {}
    /**
     * Test the match of this charset with the input text data
     *      which is obtained via the CharsetDetector object.
     *
     * @param det  The CharsetDetector, which contains the input text
     *             to be checked for being in this charset.
     * @return     Two values packed into one int  (Damn java, anyhow)
     *             bits 0-7:  the match confidence, ranging from 0-100
     *             bits 8-15: The match reason, an enum-like value.
     */
    mbcs.prototype.match = function(det) {

      var doubleByteCharCount = 0,
        commonCharCount     = 0,
        badCharCount        = 0,
        totalCharCount      = 0,
        confidence          = 0;

      var iter = new IteratedChar();

      detectBlock: {
        for (iter.reset(); this.nextChar(iter, det);) {
          totalCharCount++;
          if (iter.error) {
            badCharCount++;
          } else {
            var cv = iter.charValue & 0xFFFFFFFF;

            if (cv <= 0xff) ; else {
              doubleByteCharCount++;
              if (this.commonChars != null) {
                // NOTE: This assumes that there are no 4-byte common chars.
                if (binarySearch(this.commonChars, cv) >= 0) {
                  commonCharCount++;
                }
              }
            }
          }
          if (badCharCount >= 2 && badCharCount * 5 >= doubleByteCharCount) {
            // console.log('its here!')
            // Bail out early if the byte data is not matching the encoding scheme.
            break detectBlock;
          }
        }

        if (doubleByteCharCount <= 10 && badCharCount== 0) {
          // Not many multi-byte chars.
          if (doubleByteCharCount == 0 && totalCharCount < 10) {
            // There weren't any multibyte sequences, and there was a low density of non-ASCII single bytes.
            // We don't have enough data to have any confidence.
            // Statistical analysis of single byte non-ASCII charcters would probably help here.
            confidence = 0;
          }
          else {
            //   ASCII or ISO file?  It's probably not our encoding,
            //   but is not incompatible with our encoding, so don't give it a zero.
            confidence = 10;
          }
          break detectBlock;
        }

        //
        //  No match if there are too many characters that don't fit the encoding scheme.
        //    (should we have zero tolerance for these?)
        //
        if (doubleByteCharCount < 20 * badCharCount) {
          confidence = 0;
          break detectBlock;
        }

        if (this.commonChars == null) {
          // We have no statistics on frequently occuring characters.
          //  Assess confidence purely on having a reasonable number of
          //  multi-byte characters (the more the better
          confidence = 30 + doubleByteCharCount - 20 * badCharCount;
          if (confidence > 100) {
            confidence = 100;
          }
        } else {
          //
          // Frequency of occurence statistics exist.
          //
          var maxVal = Math.log(parseFloat(doubleByteCharCount) / 4);
          var scaleFactor = 90.0 / maxVal;
          confidence = Math.floor(Math.log(commonCharCount + 1) * scaleFactor + 10);
          confidence = Math.min(confidence, 100);
        }
      }   // end of detectBlock:

      return confidence == 0 ? null : new Match(det, this, confidence);
    };

    /**
     * Get the next character (however many bytes it is) from the input data
     *    Subclasses for specific charset encodings must implement this function
     *    to get characters according to the rules of their encoding scheme.
     *
     *  This function is not a method of class iteratedChar only because
     *   that would require a lot of extra derived classes, which is awkward.
     * @param it  The iteratedChar 'struct' into which the returned char is placed.
     * @param det The charset detector, which is needed to get at the input byte data
     *            being iterated over.
     * @return    True if a character was returned, false at end of input.
     */

    mbcs.prototype.nextChar = function(iter, det) {};



    /**
     * Shift-JIS charset recognizer.
     */
    module.exports.sjis = function() {
      this.name = function() {
        return 'Shift-JIS';
      };
      this.language = function() {
        return 'ja';
      };

      // TODO:  This set of data comes from the character frequency-
      //        of-occurence analysis tool.  The data needs to be moved
      //        into a resource and loaded from there.
      this.commonChars = [
        0x8140, 0x8141, 0x8142, 0x8145, 0x815b, 0x8169, 0x816a, 0x8175, 0x8176, 0x82a0,
        0x82a2, 0x82a4, 0x82a9, 0x82aa, 0x82ab, 0x82ad, 0x82af, 0x82b1, 0x82b3, 0x82b5,
        0x82b7, 0x82bd, 0x82be, 0x82c1, 0x82c4, 0x82c5, 0x82c6, 0x82c8, 0x82c9, 0x82cc,
        0x82cd, 0x82dc, 0x82e0, 0x82e7, 0x82e8, 0x82e9, 0x82ea, 0x82f0, 0x82f1, 0x8341,
        0x8343, 0x834e, 0x834f, 0x8358, 0x835e, 0x8362, 0x8367, 0x8375, 0x8376, 0x8389,
        0x838a, 0x838b, 0x838d, 0x8393, 0x8e96, 0x93fa, 0x95aa
      ];

      this.nextChar = function(iter, det) {
        iter.index = iter.nextIndex;
        iter.error = false;

        var firstByte;
        firstByte = iter.charValue = iter.nextByte(det);
        if (firstByte < 0)
          return false;

        if (firstByte <= 0x7f || (firstByte > 0xa0 && firstByte <= 0xdf))
          return true;

        var secondByte = iter.nextByte(det);
        if (secondByte < 0)
          return false;

        iter.charValue = (firstByte << 8) | secondByte;
        if (! ((secondByte >= 0x40 && secondByte <= 0x7f) || (secondByte >= 0x80 && secondByte <= 0xff))) {
          // Illegal second byte value.
          iter.error = true;
        }
        return true;
      };
    };
    util.inherits(module.exports.sjis, mbcs);



    /**
     *   Big5 charset recognizer.
     */
    module.exports.big5 = function() {
      this.name = function() {
        return 'Big5';
      };
      this.language = function() {
        return 'zh';
      };
      // TODO:  This set of data comes from the character frequency-
      //        of-occurence analysis tool.  The data needs to be moved
      //        into a resource and loaded from there.
      this.commonChars = [
        0xa140, 0xa141, 0xa142, 0xa143, 0xa147, 0xa149, 0xa175, 0xa176, 0xa440, 0xa446,
        0xa447, 0xa448, 0xa451, 0xa454, 0xa457, 0xa464, 0xa46a, 0xa46c, 0xa477, 0xa4a3,
        0xa4a4, 0xa4a7, 0xa4c1, 0xa4ce, 0xa4d1, 0xa4df, 0xa4e8, 0xa4fd, 0xa540, 0xa548,
        0xa558, 0xa569, 0xa5cd, 0xa5e7, 0xa657, 0xa661, 0xa662, 0xa668, 0xa670, 0xa6a8,
        0xa6b3, 0xa6b9, 0xa6d3, 0xa6db, 0xa6e6, 0xa6f2, 0xa740, 0xa751, 0xa759, 0xa7da,
        0xa8a3, 0xa8a5, 0xa8ad, 0xa8d1, 0xa8d3, 0xa8e4, 0xa8fc, 0xa9c0, 0xa9d2, 0xa9f3,
        0xaa6b, 0xaaba, 0xaabe, 0xaacc, 0xaafc, 0xac47, 0xac4f, 0xacb0, 0xacd2, 0xad59,
        0xaec9, 0xafe0, 0xb0ea, 0xb16f, 0xb2b3, 0xb2c4, 0xb36f, 0xb44c, 0xb44e, 0xb54c,
        0xb5a5, 0xb5bd, 0xb5d0, 0xb5d8, 0xb671, 0xb7ed, 0xb867, 0xb944, 0xbad8, 0xbb44,
        0xbba1, 0xbdd1, 0xc2c4, 0xc3b9, 0xc440, 0xc45f
      ];
      this.nextChar = function(iter, det) {
        iter.index = iter.nextIndex;
        iter.error = false;

        var firstByte = iter.charValue = iter.nextByte(det);

        if (firstByte < 0)
          return false;

        // single byte character.
        if (firstByte <= 0x7f || firstByte == 0xff)
          return true;

        var secondByte = iter.nextByte(det);

        if (secondByte < 0)
          return false;

        iter.charValue = (iter.charValue << 8) | secondByte;

        if (secondByte < 0x40 || secondByte == 0x7f || secondByte == 0xff)
          iter.error = true;

        return true;
      };
    };
    util.inherits(module.exports.big5, mbcs);



    /**
     *  EUC charset recognizers.  One abstract class that provides the common function
     *  for getting the next character according to the EUC encoding scheme,
     *  and nested derived classes for EUC_KR, EUC_JP, EUC_CN.
     *
     *  Get the next character value for EUC based encodings.
     *  Character 'value' is simply the raw bytes that make up the character
     *     packed into an int.
     */
    function eucNextChar(iter, det) {
      iter.index = iter.nextIndex;
      iter.error = false;
      var firstByte  = 0;
      var secondByte = 0;
      var thirdByte  = 0;
      //int fourthByte = 0;
      buildChar: {
        firstByte = iter.charValue = iter.nextByte(det);
        if (firstByte < 0) {
          // Ran off the end of the input data
          iter.done = true;
          break buildChar;
        }
        if (firstByte <= 0x8d) {
          // single byte char
          break buildChar;
        }
        secondByte = iter.nextByte(det);
        iter.charValue = (iter.charValue << 8) | secondByte;
        if (firstByte >= 0xA1 && firstByte <= 0xfe) {
          // Two byte Char
          if (secondByte < 0xa1) {
            iter.error = true;
          }
          break buildChar;
        }
        if (firstByte == 0x8e) {
          // Code Set 2.
          //   In EUC-JP, total char size is 2 bytes, only one byte of actual char value.
          //   In EUC-TW, total char size is 4 bytes, three bytes contribute to char value.
          // We don't know which we've got.
          // Treat it like EUC-JP.  If the data really was EUC-TW, the following two
          //   bytes will look like a well formed 2 byte char.
          if (secondByte < 0xa1) {
            iter.error = true;
          }
          break buildChar;
        }
        if (firstByte == 0x8f) {
          // Code set 3.
          // Three byte total char size, two bytes of actual char value.
          thirdByte = iter.nextByte(det);
          iter.charValue = (iter.charValue << 8) | thirdByte;
          if (thirdByte < 0xa1) {
            iter.error = true;
          }
        }
      }
      return iter.done == false;
    }


    /**
     * The charset recognize for EUC-JP.  A singleton instance of this class
     *    is created and kept by the public CharsetDetector class
     */
    module.exports.euc_jp = function() {
      this.name = function() {
        return 'EUC-JP';
      };
      this.language = function() {
        return 'ja';
      };

      // TODO:  This set of data comes from the character frequency-
      //        of-occurence analysis tool.  The data needs to be moved
      //        into a resource and loaded from there.
      this.commonChars = [
        0xa1a1, 0xa1a2, 0xa1a3, 0xa1a6, 0xa1bc, 0xa1ca, 0xa1cb, 0xa1d6, 0xa1d7, 0xa4a2,
        0xa4a4, 0xa4a6, 0xa4a8, 0xa4aa, 0xa4ab, 0xa4ac, 0xa4ad, 0xa4af, 0xa4b1, 0xa4b3,
        0xa4b5, 0xa4b7, 0xa4b9, 0xa4bb, 0xa4bd, 0xa4bf, 0xa4c0, 0xa4c1, 0xa4c3, 0xa4c4,
        0xa4c6, 0xa4c7, 0xa4c8, 0xa4c9, 0xa4ca, 0xa4cb, 0xa4ce, 0xa4cf, 0xa4d0, 0xa4de,
        0xa4df, 0xa4e1, 0xa4e2, 0xa4e4, 0xa4e8, 0xa4e9, 0xa4ea, 0xa4eb, 0xa4ec, 0xa4ef,
        0xa4f2, 0xa4f3, 0xa5a2, 0xa5a3, 0xa5a4, 0xa5a6, 0xa5a7, 0xa5aa, 0xa5ad, 0xa5af,
        0xa5b0, 0xa5b3, 0xa5b5, 0xa5b7, 0xa5b8, 0xa5b9, 0xa5bf, 0xa5c3, 0xa5c6, 0xa5c7,
        0xa5c8, 0xa5c9, 0xa5cb, 0xa5d0, 0xa5d5, 0xa5d6, 0xa5d7, 0xa5de, 0xa5e0, 0xa5e1,
        0xa5e5, 0xa5e9, 0xa5ea, 0xa5eb, 0xa5ec, 0xa5ed, 0xa5f3, 0xb8a9, 0xb9d4, 0xbaee,
        0xbbc8, 0xbef0, 0xbfb7, 0xc4ea, 0xc6fc, 0xc7bd, 0xcab8, 0xcaf3, 0xcbdc, 0xcdd1
      ];

      this.nextChar = eucNextChar;
    };
    util.inherits(module.exports.euc_jp, mbcs);



    /**
     * The charset recognize for EUC-KR.  A singleton instance of this class
     *    is created and kept by the public CharsetDetector class
     */
    module.exports.euc_kr = function() {
      this.name = function() {
        return 'EUC-KR';
      };
      this.language = function() {
        return 'ko';
      };

      // TODO:  This set of data comes from the character frequency-
      //        of-occurence analysis tool.  The data needs to be moved
      //        into a resource and loaded from there.
      this.commonChars = [
        0xb0a1, 0xb0b3, 0xb0c5, 0xb0cd, 0xb0d4, 0xb0e6, 0xb0ed, 0xb0f8, 0xb0fa, 0xb0fc,
        0xb1b8, 0xb1b9, 0xb1c7, 0xb1d7, 0xb1e2, 0xb3aa, 0xb3bb, 0xb4c2, 0xb4cf, 0xb4d9,
        0xb4eb, 0xb5a5, 0xb5b5, 0xb5bf, 0xb5c7, 0xb5e9, 0xb6f3, 0xb7af, 0xb7c2, 0xb7ce,
        0xb8a6, 0xb8ae, 0xb8b6, 0xb8b8, 0xb8bb, 0xb8e9, 0xb9ab, 0xb9ae, 0xb9cc, 0xb9ce,
        0xb9fd, 0xbab8, 0xbace, 0xbad0, 0xbaf1, 0xbbe7, 0xbbf3, 0xbbfd, 0xbcad, 0xbcba,
        0xbcd2, 0xbcf6, 0xbdba, 0xbdc0, 0xbdc3, 0xbdc5, 0xbec6, 0xbec8, 0xbedf, 0xbeee,
        0xbef8, 0xbefa, 0xbfa1, 0xbfa9, 0xbfc0, 0xbfe4, 0xbfeb, 0xbfec, 0xbff8, 0xc0a7,
        0xc0af, 0xc0b8, 0xc0ba, 0xc0bb, 0xc0bd, 0xc0c7, 0xc0cc, 0xc0ce, 0xc0cf, 0xc0d6,
        0xc0da, 0xc0e5, 0xc0fb, 0xc0fc, 0xc1a4, 0xc1a6, 0xc1b6, 0xc1d6, 0xc1df, 0xc1f6,
        0xc1f8, 0xc4a1, 0xc5cd, 0xc6ae, 0xc7cf, 0xc7d1, 0xc7d2, 0xc7d8, 0xc7e5, 0xc8ad
      ];

      this.nextChar = eucNextChar;
    };
    util.inherits(module.exports.euc_kr, mbcs);



    /**
     *   GB-18030 recognizer. Uses simplified Chinese statistics.
     */
    module.exports.gb_18030 = function() {
      this.name = function() {
        return 'GB18030';
      };
      this.language = function() {
        return 'zh';
      };

      /*
       *  Get the next character value for EUC based encodings.
       *  Character 'value' is simply the raw bytes that make up the character
       *     packed into an int.
       */
      this.nextChar = function(iter, det) {
        iter.index = iter.nextIndex;
        iter.error = false;
        var firstByte  = 0;
        var secondByte = 0;
        var thirdByte  = 0;
        var fourthByte = 0;
        buildChar: {
          firstByte = iter.charValue = iter.nextByte(det);
          if (firstByte < 0) {
            // Ran off the end of the input data
            iter.done = true;
            break buildChar;
          }
          if (firstByte <= 0x80) {
            // single byte char
            break buildChar;
          }
          secondByte = iter.nextByte(det);
          iter.charValue = (iter.charValue << 8) | secondByte;
          if (firstByte >= 0x81 && firstByte <= 0xFE) {
            // Two byte Char
            if ((secondByte >= 0x40 && secondByte <= 0x7E) || (secondByte >=80 && secondByte <= 0xFE)) {
              break buildChar;
            }
            // Four byte char
            if (secondByte >= 0x30 && secondByte <= 0x39) {
              thirdByte = iter.nextByte(det);
              if (thirdByte >= 0x81 && thirdByte <= 0xFE) {
                fourthByte = iter.nextByte(det);
                if (fourthByte >= 0x30 && fourthByte <= 0x39) {
                  iter.charValue = (iter.charValue << 16) | (thirdByte << 8) | fourthByte;
                  break buildChar;
                }
              }
            }
            iter.error = true;
            break buildChar;
          }
        }
        return iter.done == false;
      };

      // TODO:  This set of data comes from the character frequency-
      //        of-occurence analysis tool.  The data needs to be moved
      //        into a resource and loaded from there.
      this.commonChars = [
        0xa1a1, 0xa1a2, 0xa1a3, 0xa1a4, 0xa1b0, 0xa1b1, 0xa1f1, 0xa1f3, 0xa3a1, 0xa3ac,
        0xa3ba, 0xb1a8, 0xb1b8, 0xb1be, 0xb2bb, 0xb3c9, 0xb3f6, 0xb4f3, 0xb5bd, 0xb5c4,
        0xb5e3, 0xb6af, 0xb6d4, 0xb6e0, 0xb7a2, 0xb7a8, 0xb7bd, 0xb7d6, 0xb7dd, 0xb8b4,
        0xb8df, 0xb8f6, 0xb9ab, 0xb9c9, 0xb9d8, 0xb9fa, 0xb9fd, 0xbacd, 0xbba7, 0xbbd6,
        0xbbe1, 0xbbfa, 0xbcbc, 0xbcdb, 0xbcfe, 0xbdcc, 0xbecd, 0xbedd, 0xbfb4, 0xbfc6,
        0xbfc9, 0xc0b4, 0xc0ed, 0xc1cb, 0xc2db, 0xc3c7, 0xc4dc, 0xc4ea, 0xc5cc, 0xc6f7,
        0xc7f8, 0xc8ab, 0xc8cb, 0xc8d5, 0xc8e7, 0xc9cf, 0xc9fa, 0xcab1, 0xcab5, 0xcac7,
        0xcad0, 0xcad6, 0xcaf5, 0xcafd, 0xccec, 0xcdf8, 0xceaa, 0xcec4, 0xced2, 0xcee5,
        0xcfb5, 0xcfc2, 0xcfd6, 0xd0c2, 0xd0c5, 0xd0d0, 0xd0d4, 0xd1a7, 0xd2aa, 0xd2b2,
        0xd2b5, 0xd2bb, 0xd2d4, 0xd3c3, 0xd3d0, 0xd3fd, 0xd4c2, 0xd4da, 0xd5e2, 0xd6d0
      ];
    };
    util.inherits(module.exports.gb_18030, mbcs);
    }(mbcs$3));

    var sbcs$3 = {exports: {}};

    (function (module) {
    var util = require$$0__default["default"],
      Match = match$2;

    /**
     * This class recognizes single-byte encodings. Because the encoding scheme is so
     * simple, language statistics are used to do the matching.
     */

    function NGramParser(theNgramList, theByteMap) {
      var N_GRAM_MASK = 0xFFFFFF;

      this.byteIndex = 0;
      this.ngram = 0;

      this.ngramList = theNgramList;
      this.byteMap = theByteMap;

      this.ngramCount = 0;
      this.hitCount = 0;

      this.spaceChar;

      /*
       * Binary search for value in table, which must have exactly 64 entries.
       */
      this.search = function(table, value) {
        var index = 0;

        if (table[index + 32] <= value) index += 32;
        if (table[index + 16] <= value) index += 16;
        if (table[index + 8]  <= value) index += 8;
        if (table[index + 4]  <= value) index += 4;
        if (table[index + 2]  <= value) index += 2;
        if (table[index + 1]  <= value) index += 1;
        if (table[index]      > value)  index -= 1;

        if (index < 0 || table[index] != value)
          return -1;

        return index;
      };

      this.lookup = function(thisNgram) {
        this.ngramCount += 1;
        if (this.search(this.ngramList, thisNgram) >= 0) {
          this.hitCount += 1;
        }
      };

      this.addByte = function(b) {
        this.ngram = ((this.ngram << 8) + (b & 0xFF)) & N_GRAM_MASK;
        this.lookup(this.ngram);
      };

      this.nextByte = function(det) {
        if (this.byteIndex >= det.fInputLen)
          return -1;

        return det.fInputBytes[this.byteIndex++] & 0xFF;
      };

      this.parse = function(det, spaceCh) {
        var b, ignoreSpace = false;
        this.spaceChar = spaceCh;

        while ((b = this.nextByte(det)) >= 0) {
          var mb = this.byteMap[b];

          // TODO: 0x20 might not be a space in all character sets...
          if (mb != 0) {
            if (!(mb == this.spaceChar && ignoreSpace)) {
              this.addByte(mb);
            }

            ignoreSpace = (mb == this.spaceChar);
          }
        }

        // TODO: Is this OK? The buffer could have ended in the middle of a word...
        this.addByte(this.spaceChar);

        var rawPercent = this.hitCount / this.ngramCount;

        // TODO - This is a bit of a hack to take care of a case
        // were we were getting a confidence of 135...
        if (rawPercent > 0.33)
          return 98;

        return Math.floor(rawPercent * 300.0);
      };
    }
    function NGramsPlusLang(la, ng) {
      this.fLang = la;
      this.fNGrams = ng;
    }
    function sbcs() {}sbcs.prototype.spaceChar = 0x20;
    sbcs.prototype.ngrams = function() {};
    sbcs.prototype.byteMap = function() {};
    sbcs.prototype.match = function(det) {

      var ngrams = this.ngrams();
      var multiple = (Array.isArray(ngrams) && ngrams[0] instanceof NGramsPlusLang);

      if (!multiple) {
        var parser = new NGramParser(ngrams, this.byteMap());
        var confidence = parser.parse(det, this.spaceChar);
        return confidence <= 0 ? null : new Match(det, this, confidence);
      }

      var bestConfidenceSoFar = -1;
      var lang = null;

      for (var i = ngrams.length - 1; i >= 0; i--) {
        var ngl = ngrams[i];

        var parser = new NGramParser(ngl.fNGrams, this.byteMap());
        var confidence = parser.parse(det, this.spaceChar);
        if (confidence > bestConfidenceSoFar) {
          bestConfidenceSoFar = confidence;
          lang = ngl.fLang;
        }
      }

      var name = this.name(det);
      return bestConfidenceSoFar <= 0 ? null : new Match(det, this, bestConfidenceSoFar, name, lang);
    };


    module.exports.ISO_8859_1 = function() {
      this.byteMap = function() {
        return [
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67,
          0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F,
          0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77,
          0x78, 0x79, 0x7A, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67,
          0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F,
          0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77,
          0x78, 0x79, 0x7A, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0xAA, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0xB5, 0x20, 0x20,
          0x20, 0x20, 0xBA, 0x20, 0x20, 0x20, 0x20, 0x20,
          0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7,
          0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF,
          0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0x20,
          0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0xDF,
          0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7,
          0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF,
          0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0x20,
          0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0xFF
        ];
      };

      this.ngrams = function() {
        return [
          new NGramsPlusLang('da', [
            0x206166, 0x206174, 0x206465, 0x20656E, 0x206572, 0x20666F, 0x206861, 0x206920,
            0x206D65, 0x206F67, 0x2070E5, 0x207369, 0x207374, 0x207469, 0x207669, 0x616620,
            0x616E20, 0x616E64, 0x617220, 0x617420, 0x646520, 0x64656E, 0x646572, 0x646574,
            0x652073, 0x656420, 0x656465, 0x656E20, 0x656E64, 0x657220, 0x657265, 0x657320,
            0x657420, 0x666F72, 0x676520, 0x67656E, 0x676572, 0x696765, 0x696C20, 0x696E67,
            0x6B6520, 0x6B6B65, 0x6C6572, 0x6C6967, 0x6C6C65, 0x6D6564, 0x6E6465, 0x6E6520,
            0x6E6720, 0x6E6765, 0x6F6720, 0x6F6D20, 0x6F7220, 0x70E520, 0x722064, 0x722065,
            0x722073, 0x726520, 0x737465, 0x742073, 0x746520, 0x746572, 0x74696C, 0x766572
          ]),
          new NGramsPlusLang('de', [
            0x20616E, 0x206175, 0x206265, 0x206461, 0x206465, 0x206469, 0x206569, 0x206765,
            0x206861, 0x20696E, 0x206D69, 0x207363, 0x207365, 0x20756E, 0x207665, 0x20766F,
            0x207765, 0x207A75, 0x626572, 0x636820, 0x636865, 0x636874, 0x646173, 0x64656E,
            0x646572, 0x646965, 0x652064, 0x652073, 0x65696E, 0x656974, 0x656E20, 0x657220,
            0x657320, 0x67656E, 0x68656E, 0x687420, 0x696368, 0x696520, 0x696E20, 0x696E65,
            0x697420, 0x6C6963, 0x6C6C65, 0x6E2061, 0x6E2064, 0x6E2073, 0x6E6420, 0x6E6465,
            0x6E6520, 0x6E6720, 0x6E6765, 0x6E7465, 0x722064, 0x726465, 0x726569, 0x736368,
            0x737465, 0x742064, 0x746520, 0x74656E, 0x746572, 0x756E64, 0x756E67, 0x766572
          ]),
          new NGramsPlusLang('en', [
            0x206120, 0x20616E, 0x206265, 0x20636F, 0x20666F, 0x206861, 0x206865, 0x20696E,
            0x206D61, 0x206F66, 0x207072, 0x207265, 0x207361, 0x207374, 0x207468, 0x20746F,
            0x207768, 0x616964, 0x616C20, 0x616E20, 0x616E64, 0x617320, 0x617420, 0x617465,
            0x617469, 0x642061, 0x642074, 0x652061, 0x652073, 0x652074, 0x656420, 0x656E74,
            0x657220, 0x657320, 0x666F72, 0x686174, 0x686520, 0x686572, 0x696420, 0x696E20,
            0x696E67, 0x696F6E, 0x697320, 0x6E2061, 0x6E2074, 0x6E6420, 0x6E6720, 0x6E7420,
            0x6F6620, 0x6F6E20, 0x6F7220, 0x726520, 0x727320, 0x732061, 0x732074, 0x736169,
            0x737420, 0x742074, 0x746572, 0x746861, 0x746865, 0x74696F, 0x746F20, 0x747320
          ]),
          new NGramsPlusLang('es', [
            0x206120, 0x206361, 0x20636F, 0x206465, 0x20656C, 0x20656E, 0x206573, 0x20696E,
            0x206C61, 0x206C6F, 0x207061, 0x20706F, 0x207072, 0x207175, 0x207265, 0x207365,
            0x20756E, 0x207920, 0x612063, 0x612064, 0x612065, 0x61206C, 0x612070, 0x616369,
            0x61646F, 0x616C20, 0x617220, 0x617320, 0x6369F3, 0x636F6E, 0x646520, 0x64656C,
            0x646F20, 0x652064, 0x652065, 0x65206C, 0x656C20, 0x656E20, 0x656E74, 0x657320,
            0x657374, 0x69656E, 0x69F36E, 0x6C6120, 0x6C6F73, 0x6E2065, 0x6E7465, 0x6F2064,
            0x6F2065, 0x6F6E20, 0x6F7220, 0x6F7320, 0x706172, 0x717565, 0x726120, 0x726573,
            0x732064, 0x732065, 0x732070, 0x736520, 0x746520, 0x746F20, 0x756520, 0xF36E20
          ]),
          new NGramsPlusLang('fr', [
            0x206175, 0x20636F, 0x206461, 0x206465, 0x206475, 0x20656E, 0x206574, 0x206C61,
            0x206C65, 0x207061, 0x20706F, 0x207072, 0x207175, 0x207365, 0x20736F, 0x20756E,
            0x20E020, 0x616E74, 0x617469, 0x636520, 0x636F6E, 0x646520, 0x646573, 0x647520,
            0x652061, 0x652063, 0x652064, 0x652065, 0x65206C, 0x652070, 0x652073, 0x656E20,
            0x656E74, 0x657220, 0x657320, 0x657420, 0x657572, 0x696F6E, 0x697320, 0x697420,
            0x6C6120, 0x6C6520, 0x6C6573, 0x6D656E, 0x6E2064, 0x6E6520, 0x6E7320, 0x6E7420,
            0x6F6E20, 0x6F6E74, 0x6F7572, 0x717565, 0x72206C, 0x726520, 0x732061, 0x732064,
            0x732065, 0x73206C, 0x732070, 0x742064, 0x746520, 0x74696F, 0x756520, 0x757220
          ]),
          new NGramsPlusLang('it', [
            0x20616C, 0x206368, 0x20636F, 0x206465, 0x206469, 0x206520, 0x20696C, 0x20696E,
            0x206C61, 0x207065, 0x207072, 0x20756E, 0x612063, 0x612064, 0x612070, 0x612073,
            0x61746F, 0x636865, 0x636F6E, 0x64656C, 0x646920, 0x652061, 0x652063, 0x652064,
            0x652069, 0x65206C, 0x652070, 0x652073, 0x656C20, 0x656C6C, 0x656E74, 0x657220,
            0x686520, 0x692061, 0x692063, 0x692064, 0x692073, 0x696120, 0x696C20, 0x696E20,
            0x696F6E, 0x6C6120, 0x6C6520, 0x6C6920, 0x6C6C61, 0x6E6520, 0x6E6920, 0x6E6F20,
            0x6E7465, 0x6F2061, 0x6F2064, 0x6F2069, 0x6F2073, 0x6F6E20, 0x6F6E65, 0x706572,
            0x726120, 0x726520, 0x736920, 0x746120, 0x746520, 0x746920, 0x746F20, 0x7A696F
          ]),
          new NGramsPlusLang('nl', [
            0x20616C, 0x206265, 0x206461, 0x206465, 0x206469, 0x206565, 0x20656E, 0x206765,
            0x206865, 0x20696E, 0x206D61, 0x206D65, 0x206F70, 0x207465, 0x207661, 0x207665,
            0x20766F, 0x207765, 0x207A69, 0x61616E, 0x616172, 0x616E20, 0x616E64, 0x617220,
            0x617420, 0x636874, 0x646520, 0x64656E, 0x646572, 0x652062, 0x652076, 0x65656E,
            0x656572, 0x656E20, 0x657220, 0x657273, 0x657420, 0x67656E, 0x686574, 0x696520,
            0x696E20, 0x696E67, 0x697320, 0x6E2062, 0x6E2064, 0x6E2065, 0x6E2068, 0x6E206F,
            0x6E2076, 0x6E6465, 0x6E6720, 0x6F6E64, 0x6F6F72, 0x6F7020, 0x6F7220, 0x736368,
            0x737465, 0x742064, 0x746520, 0x74656E, 0x746572, 0x76616E, 0x766572, 0x766F6F
          ]),
          new NGramsPlusLang('no', [
            0x206174, 0x206176, 0x206465, 0x20656E, 0x206572, 0x20666F, 0x206861, 0x206920,
            0x206D65, 0x206F67, 0x2070E5, 0x207365, 0x20736B, 0x20736F, 0x207374, 0x207469,
            0x207669, 0x20E520, 0x616E64, 0x617220, 0x617420, 0x646520, 0x64656E, 0x646574,
            0x652073, 0x656420, 0x656E20, 0x656E65, 0x657220, 0x657265, 0x657420, 0x657474,
            0x666F72, 0x67656E, 0x696B6B, 0x696C20, 0x696E67, 0x6B6520, 0x6B6B65, 0x6C6520,
            0x6C6C65, 0x6D6564, 0x6D656E, 0x6E2073, 0x6E6520, 0x6E6720, 0x6E6765, 0x6E6E65,
            0x6F6720, 0x6F6D20, 0x6F7220, 0x70E520, 0x722073, 0x726520, 0x736F6D, 0x737465,
            0x742073, 0x746520, 0x74656E, 0x746572, 0x74696C, 0x747420, 0x747465, 0x766572
          ]),
          new NGramsPlusLang('pt', [
            0x206120, 0x20636F, 0x206461, 0x206465, 0x20646F, 0x206520, 0x206573, 0x206D61,
            0x206E6F, 0x206F20, 0x207061, 0x20706F, 0x207072, 0x207175, 0x207265, 0x207365,
            0x20756D, 0x612061, 0x612063, 0x612064, 0x612070, 0x616465, 0x61646F, 0x616C20,
            0x617220, 0x617261, 0x617320, 0x636F6D, 0x636F6E, 0x646120, 0x646520, 0x646F20,
            0x646F73, 0x652061, 0x652064, 0x656D20, 0x656E74, 0x657320, 0x657374, 0x696120,
            0x696361, 0x6D656E, 0x6E7465, 0x6E746F, 0x6F2061, 0x6F2063, 0x6F2064, 0x6F2065,
            0x6F2070, 0x6F7320, 0x706172, 0x717565, 0x726120, 0x726573, 0x732061, 0x732064,
            0x732065, 0x732070, 0x737461, 0x746520, 0x746F20, 0x756520, 0xE36F20, 0xE7E36F
          ]),
          new NGramsPlusLang('sv', [
            0x206174, 0x206176, 0x206465, 0x20656E, 0x2066F6, 0x206861, 0x206920, 0x20696E,
            0x206B6F, 0x206D65, 0x206F63, 0x2070E5, 0x20736B, 0x20736F, 0x207374, 0x207469,
            0x207661, 0x207669, 0x20E472, 0x616465, 0x616E20, 0x616E64, 0x617220, 0x617474,
            0x636820, 0x646520, 0x64656E, 0x646572, 0x646574, 0x656420, 0x656E20, 0x657220,
            0x657420, 0x66F672, 0x67656E, 0x696C6C, 0x696E67, 0x6B6120, 0x6C6C20, 0x6D6564,
            0x6E2073, 0x6E6120, 0x6E6465, 0x6E6720, 0x6E6765, 0x6E696E, 0x6F6368, 0x6F6D20,
            0x6F6E20, 0x70E520, 0x722061, 0x722073, 0x726120, 0x736B61, 0x736F6D, 0x742073,
            0x746120, 0x746520, 0x746572, 0x74696C, 0x747420, 0x766172, 0xE47220, 0xF67220,
          ])
        ];
      };

      this.name = function(det) {
        return (det && det.fC1Bytes) ? 'windows-1252' : 'ISO-8859-1';
      };
    };
    util.inherits(module.exports.ISO_8859_1, sbcs);


    module.exports.ISO_8859_2 = function() {
      this.byteMap = function() {
        return [
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67,
          0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F,
          0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77,
          0x78, 0x79, 0x7A, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67,
          0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F,
          0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77,
          0x78, 0x79, 0x7A, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0xB1, 0x20, 0xB3, 0x20, 0xB5, 0xB6, 0x20,
          0x20, 0xB9, 0xBA, 0xBB, 0xBC, 0x20, 0xBE, 0xBF,
          0x20, 0xB1, 0x20, 0xB3, 0x20, 0xB5, 0xB6, 0xB7,
          0x20, 0xB9, 0xBA, 0xBB, 0xBC, 0x20, 0xBE, 0xBF,
          0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7,
          0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF,
          0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0x20,
          0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0xDF,
          0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7,
          0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF,
          0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0x20,
          0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x20
        ];
      };

      this.ngrams = function() {
        return [
          new NGramsPlusLang('cs', [
            0x206120, 0x206279, 0x20646F, 0x206A65, 0x206E61, 0x206E65, 0x206F20, 0x206F64,
            0x20706F, 0x207072, 0x2070F8, 0x20726F, 0x207365, 0x20736F, 0x207374, 0x20746F,
            0x207620, 0x207679, 0x207A61, 0x612070, 0x636520, 0x636820, 0x652070, 0x652073,
            0x652076, 0x656D20, 0x656EED, 0x686F20, 0x686F64, 0x697374, 0x6A6520, 0x6B7465,
            0x6C6520, 0x6C6920, 0x6E6120, 0x6EE920, 0x6EEC20, 0x6EED20, 0x6F2070, 0x6F646E,
            0x6F6A69, 0x6F7374, 0x6F7520, 0x6F7661, 0x706F64, 0x706F6A, 0x70726F, 0x70F865,
            0x736520, 0x736F75, 0x737461, 0x737469, 0x73746E, 0x746572, 0x746EED, 0x746F20,
            0x752070, 0xBE6520, 0xE16EED, 0xE9686F, 0xED2070, 0xED2073, 0xED6D20, 0xF86564,
          ]),
          new NGramsPlusLang('hu', [
            0x206120, 0x20617A, 0x206265, 0x206567, 0x20656C, 0x206665, 0x206861, 0x20686F,
            0x206973, 0x206B65, 0x206B69, 0x206BF6, 0x206C65, 0x206D61, 0x206D65, 0x206D69,
            0x206E65, 0x20737A, 0x207465, 0x20E973, 0x612061, 0x61206B, 0x61206D, 0x612073,
            0x616B20, 0x616E20, 0x617A20, 0x62616E, 0x62656E, 0x656779, 0x656B20, 0x656C20,
            0x656C65, 0x656D20, 0x656E20, 0x657265, 0x657420, 0x657465, 0x657474, 0x677920,
            0x686F67, 0x696E74, 0x697320, 0x6B2061, 0x6BF67A, 0x6D6567, 0x6D696E, 0x6E2061,
            0x6E616B, 0x6E656B, 0x6E656D, 0x6E7420, 0x6F6779, 0x732061, 0x737A65, 0x737A74,
            0x737AE1, 0x73E967, 0x742061, 0x747420, 0x74E173, 0x7A6572, 0xE16E20, 0xE97320,
          ]),
          new NGramsPlusLang('pl', [
            0x20637A, 0x20646F, 0x206920, 0x206A65, 0x206B6F, 0x206D61, 0x206D69, 0x206E61,
            0x206E69, 0x206F64, 0x20706F, 0x207072, 0x207369, 0x207720, 0x207769, 0x207779,
            0x207A20, 0x207A61, 0x612070, 0x612077, 0x616E69, 0x636820, 0x637A65, 0x637A79,
            0x646F20, 0x647A69, 0x652070, 0x652073, 0x652077, 0x65207A, 0x65676F, 0x656A20,
            0x656D20, 0x656E69, 0x676F20, 0x696120, 0x696520, 0x69656A, 0x6B6120, 0x6B6920,
            0x6B6965, 0x6D6965, 0x6E6120, 0x6E6961, 0x6E6965, 0x6F2070, 0x6F7761, 0x6F7769,
            0x706F6C, 0x707261, 0x70726F, 0x70727A, 0x727A65, 0x727A79, 0x7369EA, 0x736B69,
            0x737461, 0x776965, 0x796368, 0x796D20, 0x7A6520, 0x7A6965, 0x7A7920, 0xF37720,
          ]),
          new NGramsPlusLang('ro', [
            0x206120, 0x206163, 0x206361, 0x206365, 0x20636F, 0x206375, 0x206465, 0x206469,
            0x206C61, 0x206D61, 0x207065, 0x207072, 0x207365, 0x2073E3, 0x20756E, 0x20BA69,
            0x20EE6E, 0x612063, 0x612064, 0x617265, 0x617420, 0x617465, 0x617520, 0x636172,
            0x636F6E, 0x637520, 0x63E320, 0x646520, 0x652061, 0x652063, 0x652064, 0x652070,
            0x652073, 0x656120, 0x656920, 0x656C65, 0x656E74, 0x657374, 0x692061, 0x692063,
            0x692064, 0x692070, 0x696520, 0x696920, 0x696E20, 0x6C6120, 0x6C6520, 0x6C6F72,
            0x6C7569, 0x6E6520, 0x6E7472, 0x6F7220, 0x70656E, 0x726520, 0x726561, 0x727520,
            0x73E320, 0x746520, 0x747275, 0x74E320, 0x756920, 0x756C20, 0xBA6920, 0xEE6E20,
          ])
        ];
      };

      this.name = function(det) {
        return (det && det.fC1Bytes) ? 'windows-1250' : 'ISO-8859-2';
      };
    };
    util.inherits(module.exports.ISO_8859_2, sbcs);


    module.exports.ISO_8859_5 = function() {
      this.byteMap = function() {
        return [
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67,
          0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F,
          0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77,
          0x78, 0x79, 0x7A, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67,
          0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F,
          0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77,
          0x78, 0x79, 0x7A, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7,
          0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0x20, 0xFE, 0xFF,
          0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD7,
          0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0xDF,
          0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7,
          0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF,
          0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD7,
          0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0xDF,
          0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7,
          0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF,
          0x20, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7,
          0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0x20, 0xFE, 0xFF
        ];
      };

      this.ngrams = function() {
        return [
          0x20D220, 0x20D2DE, 0x20D4DE, 0x20D7D0, 0x20D820, 0x20DAD0, 0x20DADE, 0x20DDD0,
          0x20DDD5, 0x20DED1, 0x20DFDE, 0x20DFE0, 0x20E0D0, 0x20E1DE, 0x20E1E2, 0x20E2DE,
          0x20E7E2, 0x20EDE2, 0xD0DDD8, 0xD0E2EC, 0xD3DE20, 0xD5DBEC, 0xD5DDD8, 0xD5E1E2,
          0xD5E220, 0xD820DF, 0xD8D520, 0xD8D820, 0xD8EF20, 0xDBD5DD, 0xDBD820, 0xDBECDD,
          0xDDD020, 0xDDD520, 0xDDD8D5, 0xDDD8EF, 0xDDDE20, 0xDDDED2, 0xDE20D2, 0xDE20DF,
          0xDE20E1, 0xDED220, 0xDED2D0, 0xDED3DE, 0xDED920, 0xDEDBEC, 0xDEDC20, 0xDEE1E2,
          0xDFDEDB, 0xDFE0D5, 0xDFE0D8, 0xDFE0DE, 0xE0D0D2, 0xE0D5D4, 0xE1E2D0, 0xE1E2D2,
          0xE1E2D8, 0xE1EF20, 0xE2D5DB, 0xE2DE20, 0xE2DEE0, 0xE2EC20, 0xE7E2DE, 0xEBE520
        ];
      };

      this.name = function(det) {
        return 'ISO-8859-5';
      };

      this.language = function() {
        return 'ru';
      };
    };
    util.inherits(module.exports.ISO_8859_5, sbcs);


    module.exports.ISO_8859_6 = function() {
      this.byteMap = function() {
        return [
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67,
          0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F,
          0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77,
          0x78, 0x79, 0x7A, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67,
          0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F,
          0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77,
          0x78, 0x79, 0x7A, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7,
          0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF,
          0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD7,
          0xD8, 0xD9, 0xDA, 0x20, 0x20, 0x20, 0x20, 0x20,
          0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7,
          0xE8, 0xE9, 0xEA, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
        ];
      };

      this.ngrams = function() {
        return [
          0x20C7E4, 0x20C7E6, 0x20C8C7, 0x20D9E4, 0x20E1EA, 0x20E4E4, 0x20E5E6, 0x20E8C7,
          0xC720C7, 0xC7C120, 0xC7CA20, 0xC7D120, 0xC7E420, 0xC7E4C3, 0xC7E4C7, 0xC7E4C8,
          0xC7E4CA, 0xC7E4CC, 0xC7E4CD, 0xC7E4CF, 0xC7E4D3, 0xC7E4D9, 0xC7E4E2, 0xC7E4E5,
          0xC7E4E8, 0xC7E4EA, 0xC7E520, 0xC7E620, 0xC7E6CA, 0xC820C7, 0xC920C7, 0xC920E1,
          0xC920E4, 0xC920E5, 0xC920E8, 0xCA20C7, 0xCF20C7, 0xCFC920, 0xD120C7, 0xD1C920,
          0xD320C7, 0xD920C7, 0xD9E4E9, 0xE1EA20, 0xE420C7, 0xE4C920, 0xE4E920, 0xE4EA20,
          0xE520C7, 0xE5C720, 0xE5C920, 0xE5E620, 0xE620C7, 0xE720C7, 0xE7C720, 0xE8C7E4,
          0xE8E620, 0xE920C7, 0xEA20C7, 0xEA20E5, 0xEA20E8, 0xEAC920, 0xEAD120, 0xEAE620
        ];
      };

      this.name = function(det) {
        return 'ISO-8859-6';
      };

      this.language = function() {
        return 'ar';
      };
    };
    util.inherits(module.exports.ISO_8859_6, sbcs);


    module.exports.ISO_8859_7 = function() {
      this.byteMap = function() {
        return [
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67,
          0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F,
          0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77,
          0x78, 0x79, 0x7A, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67,
          0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F,
          0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77,
          0x78, 0x79, 0x7A, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0xA1, 0xA2, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0xDC, 0x20,
          0xDD, 0xDE, 0xDF, 0x20, 0xFC, 0x20, 0xFD, 0xFE,
          0xC0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7,
          0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF,
          0xF0, 0xF1, 0x20, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7,
          0xF8, 0xF9, 0xFA, 0xFB, 0xDC, 0xDD, 0xDE, 0xDF,
          0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7,
          0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF,
          0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7,
          0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x20
        ];
      };

      this.ngrams = function() {
        return [
          0x20E1ED, 0x20E1F0, 0x20E3E9, 0x20E4E9, 0x20E5F0, 0x20E720, 0x20EAE1, 0x20ECE5,
          0x20EDE1, 0x20EF20, 0x20F0E1, 0x20F0EF, 0x20F0F1, 0x20F3F4, 0x20F3F5, 0x20F4E7,
          0x20F4EF, 0xDFE120, 0xE120E1, 0xE120F4, 0xE1E920, 0xE1ED20, 0xE1F0FC, 0xE1F220,
          0xE3E9E1, 0xE5E920, 0xE5F220, 0xE720F4, 0xE7ED20, 0xE7F220, 0xE920F4, 0xE9E120,
          0xE9EADE, 0xE9F220, 0xEAE1E9, 0xEAE1F4, 0xECE520, 0xED20E1, 0xED20E5, 0xED20F0,
          0xEDE120, 0xEFF220, 0xEFF520, 0xF0EFF5, 0xF0F1EF, 0xF0FC20, 0xF220E1, 0xF220E5,
          0xF220EA, 0xF220F0, 0xF220F4, 0xF3E520, 0xF3E720, 0xF3F4EF, 0xF4E120, 0xF4E1E9,
          0xF4E7ED, 0xF4E7F2, 0xF4E9EA, 0xF4EF20, 0xF4EFF5, 0xF4F9ED, 0xF9ED20, 0xFEED20
        ];
      };

      this.name = function(det) {
        return (det && det.fC1Bytes) ? 'windows-1253' : 'ISO-8859-7';
      };

      this.language = function() {
        return 'el';
      };
    };
    util.inherits(module.exports.ISO_8859_7, sbcs);

    module.exports.ISO_8859_8 = function() {

      this.byteMap = function() {
        return [
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67,
          0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F,
          0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77,
          0x78, 0x79, 0x7A, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67,
          0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F,
          0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77,
          0x78, 0x79, 0x7A, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0xB5, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7,
          0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF,
          0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7,
          0xF8, 0xF9, 0xFA, 0x20, 0x20, 0x20, 0x20, 0x20
        ];
      };

      this.ngrams = function() {
        return [
          new NGramsPlusLang('he', [
            0x20E0E5, 0x20E0E7, 0x20E0E9, 0x20E0FA, 0x20E1E9, 0x20E1EE, 0x20E4E0, 0x20E4E5,
            0x20E4E9, 0x20E4EE, 0x20E4F2, 0x20E4F9, 0x20E4FA, 0x20ECE0, 0x20ECE4, 0x20EEE0,
            0x20F2EC, 0x20F9EC, 0xE0FA20, 0xE420E0, 0xE420E1, 0xE420E4, 0xE420EC, 0xE420EE,
            0xE420F9, 0xE4E5E0, 0xE5E020, 0xE5ED20, 0xE5EF20, 0xE5F820, 0xE5FA20, 0xE920E4,
            0xE9E420, 0xE9E5FA, 0xE9E9ED, 0xE9ED20, 0xE9EF20, 0xE9F820, 0xE9FA20, 0xEC20E0,
            0xEC20E4, 0xECE020, 0xECE420, 0xED20E0, 0xED20E1, 0xED20E4, 0xED20EC, 0xED20EE,
            0xED20F9, 0xEEE420, 0xEF20E4, 0xF0E420, 0xF0E920, 0xF0E9ED, 0xF2EC20, 0xF820E4,
            0xF8E9ED, 0xF9EC20, 0xFA20E0, 0xFA20E1, 0xFA20E4, 0xFA20EC, 0xFA20EE, 0xFA20F9,
          ]),
          new NGramsPlusLang('he', [
            0x20E0E5, 0x20E0EC, 0x20E4E9, 0x20E4EC, 0x20E4EE, 0x20E4F0, 0x20E9F0, 0x20ECF2,
            0x20ECF9, 0x20EDE5, 0x20EDE9, 0x20EFE5, 0x20EFE9, 0x20F8E5, 0x20F8E9, 0x20FAE0,
            0x20FAE5, 0x20FAE9, 0xE020E4, 0xE020EC, 0xE020ED, 0xE020FA, 0xE0E420, 0xE0E5E4,
            0xE0EC20, 0xE0EE20, 0xE120E4, 0xE120ED, 0xE120FA, 0xE420E4, 0xE420E9, 0xE420EC,
            0xE420ED, 0xE420EF, 0xE420F8, 0xE420FA, 0xE4EC20, 0xE5E020, 0xE5E420, 0xE7E020,
            0xE9E020, 0xE9E120, 0xE9E420, 0xEC20E4, 0xEC20ED, 0xEC20FA, 0xECF220, 0xECF920,
            0xEDE9E9, 0xEDE9F0, 0xEDE9F8, 0xEE20E4, 0xEE20ED, 0xEE20FA, 0xEEE120, 0xEEE420,
            0xF2E420, 0xF920E4, 0xF920ED, 0xF920FA, 0xF9E420, 0xFAE020, 0xFAE420, 0xFAE5E9,
          ])
        ];
      };

      this.name = function(det) {
        return (det && det.fC1Bytes) ? 'windows-1255' : 'ISO-8859-8';
      };

      this.language = function() {
        return 'he';
      };

    };
    util.inherits(module.exports.ISO_8859_8, sbcs);


    module.exports.ISO_8859_9 = function() {
      this.byteMap = function() {
        return [
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67,
          0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F,
          0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77,
          0x78, 0x79, 0x7A, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67,
          0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F,
          0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77,
          0x78, 0x79, 0x7A, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0xAA, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0xB5, 0x20, 0x20,
          0x20, 0x20, 0xBA, 0x20, 0x20, 0x20, 0x20, 0x20,
          0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7,
          0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF,
          0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0x20,
          0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0x69, 0xFE, 0xDF,
          0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7,
          0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF,
          0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0x20,
          0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0xFF
        ];
      };

      this.ngrams = function() {
        return [
          0x206261, 0x206269, 0x206275, 0x206461, 0x206465, 0x206765, 0x206861, 0x20696C,
          0x206B61, 0x206B6F, 0x206D61, 0x206F6C, 0x207361, 0x207461, 0x207665, 0x207961,
          0x612062, 0x616B20, 0x616C61, 0x616D61, 0x616E20, 0x616EFD, 0x617220, 0x617261,
          0x6172FD, 0x6173FD, 0x617961, 0x626972, 0x646120, 0x646520, 0x646920, 0x652062,
          0x65206B, 0x656469, 0x656E20, 0x657220, 0x657269, 0x657369, 0x696C65, 0x696E20,
          0x696E69, 0x697220, 0x6C616E, 0x6C6172, 0x6C6520, 0x6C6572, 0x6E2061, 0x6E2062,
          0x6E206B, 0x6E6461, 0x6E6465, 0x6E6520, 0x6E6920, 0x6E696E, 0x6EFD20, 0x72696E,
          0x72FD6E, 0x766520, 0x796120, 0x796F72, 0xFD6E20, 0xFD6E64, 0xFD6EFD, 0xFDF0FD
        ];
      };

      this.name = function(det) {
        return (det && det.fC1Bytes) ? 'windows-1254' : 'ISO-8859-9';
      };

      this.language = function() {
        return 'tr';
      };
    };
    util.inherits(module.exports.ISO_8859_9, sbcs);


    module.exports.windows_1251 = function() {
      this.byteMap = function() {
        return [
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67,
          0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F,
          0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77,
          0x78, 0x79, 0x7A, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67,
          0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F,
          0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77,
          0x78, 0x79, 0x7A, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x90, 0x83, 0x20, 0x83, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x9A, 0x20, 0x9C, 0x9D, 0x9E, 0x9F,
          0x90, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x9A, 0x20, 0x9C, 0x9D, 0x9E, 0x9F,
          0x20, 0xA2, 0xA2, 0xBC, 0x20, 0xB4, 0x20, 0x20,
          0xB8, 0x20, 0xBA, 0x20, 0x20, 0x20, 0x20, 0xBF,
          0x20, 0x20, 0xB3, 0xB3, 0xB4, 0xB5, 0x20, 0x20,
          0xB8, 0x20, 0xBA, 0x20, 0xBC, 0xBE, 0xBE, 0xBF,
          0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7,
          0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF,
          0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7,
          0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0xFF,
          0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7,
          0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF,
          0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7,
          0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0xFF
        ];
      };

      this.ngrams = function() {
        return [
          0x20E220, 0x20E2EE, 0x20E4EE, 0x20E7E0, 0x20E820, 0x20EAE0, 0x20EAEE, 0x20EDE0,
          0x20EDE5, 0x20EEE1, 0x20EFEE, 0x20EFF0, 0x20F0E0, 0x20F1EE, 0x20F1F2, 0x20F2EE,
          0x20F7F2, 0x20FDF2, 0xE0EDE8, 0xE0F2FC, 0xE3EE20, 0xE5EBFC, 0xE5EDE8, 0xE5F1F2,
          0xE5F220, 0xE820EF, 0xE8E520, 0xE8E820, 0xE8FF20, 0xEBE5ED, 0xEBE820, 0xEBFCED,
          0xEDE020, 0xEDE520, 0xEDE8E5, 0xEDE8FF, 0xEDEE20, 0xEDEEE2, 0xEE20E2, 0xEE20EF,
          0xEE20F1, 0xEEE220, 0xEEE2E0, 0xEEE3EE, 0xEEE920, 0xEEEBFC, 0xEEEC20, 0xEEF1F2,
          0xEFEEEB, 0xEFF0E5, 0xEFF0E8, 0xEFF0EE, 0xF0E0E2, 0xF0E5E4, 0xF1F2E0, 0xF1F2E2,
          0xF1F2E8, 0xF1FF20, 0xF2E5EB, 0xF2EE20, 0xF2EEF0, 0xF2FC20, 0xF7F2EE, 0xFBF520
        ];
      };

      this.name = function(det) {
        return 'windows-1251';
      };

      this.language = function() {
        return 'ru';
      };
    };
    util.inherits(module.exports.windows_1251, sbcs);


    module.exports.windows_1256 = function() {
      this.byteMap = function() {
        return [
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67,
          0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F,
          0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77,
          0x78, 0x79, 0x7A, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67,
          0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F,
          0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77,
          0x78, 0x79, 0x7A, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x81, 0x20, 0x83, 0x20, 0x20, 0x20, 0x20,
          0x88, 0x20, 0x8A, 0x20, 0x9C, 0x8D, 0x8E, 0x8F,
          0x90, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x98, 0x20, 0x9A, 0x20, 0x9C, 0x20, 0x20, 0x9F,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0xAA, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0xB5, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7,
          0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF,
          0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0x20,
          0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0xDF,
          0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7,
          0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF,
          0x20, 0x20, 0x20, 0x20, 0xF4, 0x20, 0x20, 0x20,
          0x20, 0xF9, 0x20, 0xFB, 0xFC, 0x20, 0x20, 0xFF
        ];
      };

      this.ngrams = function() {
        return [
          0x20C7E1, 0x20C7E4, 0x20C8C7, 0x20DAE1, 0x20DDED, 0x20E1E1, 0x20E3E4, 0x20E6C7,
          0xC720C7, 0xC7C120, 0xC7CA20, 0xC7D120, 0xC7E120, 0xC7E1C3, 0xC7E1C7, 0xC7E1C8,
          0xC7E1CA, 0xC7E1CC, 0xC7E1CD, 0xC7E1CF, 0xC7E1D3, 0xC7E1DA, 0xC7E1DE, 0xC7E1E3,
          0xC7E1E6, 0xC7E1ED, 0xC7E320, 0xC7E420, 0xC7E4CA, 0xC820C7, 0xC920C7, 0xC920DD,
          0xC920E1, 0xC920E3, 0xC920E6, 0xCA20C7, 0xCF20C7, 0xCFC920, 0xD120C7, 0xD1C920,
          0xD320C7, 0xDA20C7, 0xDAE1EC, 0xDDED20, 0xE120C7, 0xE1C920, 0xE1EC20, 0xE1ED20,
          0xE320C7, 0xE3C720, 0xE3C920, 0xE3E420, 0xE420C7, 0xE520C7, 0xE5C720, 0xE6C7E1,
          0xE6E420, 0xEC20C7, 0xED20C7, 0xED20E3, 0xED20E6, 0xEDC920, 0xEDD120, 0xEDE420
        ];
      };

      this.name = function(det) {
        return 'windows-1256';
      };

      this.language = function() {
        return 'ar';
      };
    };
    util.inherits(module.exports.windows_1256, sbcs);


    module.exports.KOI8_R = function() {
      this.byteMap = function() {
        return [
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67,
          0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F,
          0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77,
          0x78, 0x79, 0x7A, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67,
          0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F,
          0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77,
          0x78, 0x79, 0x7A, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0xA3, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0xA3, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7,
          0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF,
          0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD7,
          0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0xDF,
          0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7,
          0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF,
          0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD7,
          0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0xDF
        ];
      };

      this.ngrams = function() {
        return [
          0x20C4CF, 0x20C920, 0x20CBC1, 0x20CBCF, 0x20CEC1, 0x20CEC5, 0x20CFC2, 0x20D0CF,
          0x20D0D2, 0x20D2C1, 0x20D3CF, 0x20D3D4, 0x20D4CF, 0x20D720, 0x20D7CF, 0x20DAC1,
          0x20DCD4, 0x20DED4, 0xC1CEC9, 0xC1D4D8, 0xC5CCD8, 0xC5CEC9, 0xC5D3D4, 0xC5D420,
          0xC7CF20, 0xC920D0, 0xC9C520, 0xC9C920, 0xC9D120, 0xCCC5CE, 0xCCC920, 0xCCD8CE,
          0xCEC120, 0xCEC520, 0xCEC9C5, 0xCEC9D1, 0xCECF20, 0xCECFD7, 0xCF20D0, 0xCF20D3,
          0xCF20D7, 0xCFC7CF, 0xCFCA20, 0xCFCCD8, 0xCFCD20, 0xCFD3D4, 0xCFD720, 0xCFD7C1,
          0xD0CFCC, 0xD0D2C5, 0xD0D2C9, 0xD0D2CF, 0xD2C1D7, 0xD2C5C4, 0xD3D120, 0xD3D4C1,
          0xD3D4C9, 0xD3D4D7, 0xD4C5CC, 0xD4CF20, 0xD4CFD2, 0xD4D820, 0xD9C820, 0xDED4CF
        ];
      };

      this.name = function(det) {
        return 'KOI8-R';
      };

      this.language = function() {
        return 'ru';
      };
    };
    util.inherits(module.exports.KOI8_R, sbcs);


    /*
    module.exports.ISO_8859_7 = function() {
      this.byteMap = function() {
        return [

        ];
      };

      this.ngrams = function() {
        return [

        ];
      };

      this.name = function(det) {
        if (typeof det == 'undefined')
          return 'ISO-8859-7';
        return det.fC1Bytes ? 'windows-1253' : 'ISO-8859-7';
      };

      this.language = function() {
        return 'el';
      };
    };
    util.inherits(module.exports.ISO_8859_7, sbcs);
    */
    }(sbcs$3));

    var iso2022$3 = {exports: {}};

    (function (module) {
    var util = require$$0__default["default"],
      Match = match$2;


    /**
     * This is a superclass for the individual detectors for
     * each of the detectable members of the ISO 2022 family
     * of encodings.
     */

    function ISO_2022() {}

    ISO_2022.prototype.match = function(det) {

      /**
       * Matching function shared among the 2022 detectors JP, CN and KR
       * Counts up the number of legal an unrecognized escape sequences in
       * the sample of text, and computes a score based on the total number &
       * the proportion that fit the encoding.
       *
       *
       * @param text the byte buffer containing text to analyse
       * @param textLen  the size of the text in the byte.
       * @param escapeSequences the byte escape sequences to test for.
       * @return match quality, in the range of 0-100.
       */

      var i, j;
      var escN;
      var hits   = 0;
      var misses = 0;
      var shifts = 0;
      var quality;

      // TODO: refactor me
      var text = det.fInputBytes;
      var textLen = det.fInputLen;

      scanInput:
        for (i = 0; i < textLen; i++) {
          if (text[i] == 0x1b) {
            checkEscapes:
              for (escN = 0; escN < this.escapeSequences.length; escN++) {
                var seq = this.escapeSequences[escN];

                if ((textLen - i) < seq.length)
                  continue checkEscapes;

                for (j = 1; j < seq.length; j++)
                  if (seq[j] != text[i + j])
                    continue checkEscapes;


                hits++;
                i += seq.length - 1;
                continue scanInput;
              }

              misses++;
          }

          // Shift in/out
          if (text[i] == 0x0e || text[i] == 0x0f)
            shifts++;

        }

      if (hits == 0)
        return null;

      //
      // Initial quality is based on relative proportion of recongized vs.
      //   unrecognized escape sequences.
      //   All good:  quality = 100;
      //   half or less good: quality = 0;
      //   linear inbetween.
      quality = (100 * hits - 100 * misses) / (hits + misses);

      // Back off quality if there were too few escape sequences seen.
      //   Include shifts in this computation, so that KR does not get penalized
      //   for having only a single Escape sequence, but many shifts.
      if (hits + shifts < 5)
        quality -= (5 - (hits + shifts)) * 10;

      return quality <= 0 ? null : new Match(det, this, quality);
    };

    module.exports.ISO_2022_JP = function() {
      this.name = function() {
        return 'ISO-2022-JP';
      };
      this.escapeSequences = [
        [ 0x1b, 0x24, 0x28, 0x43 ],   // KS X 1001:1992
        [ 0x1b, 0x24, 0x28, 0x44 ],   // JIS X 212-1990
        [ 0x1b, 0x24, 0x40 ],         // JIS C 6226-1978
        [ 0x1b, 0x24, 0x41 ],         // GB 2312-80
        [ 0x1b, 0x24, 0x42 ],         // JIS X 208-1983
        [ 0x1b, 0x26, 0x40 ],         // JIS X 208 1990, 1997
        [ 0x1b, 0x28, 0x42 ],         // ASCII
        [ 0x1b, 0x28, 0x48 ],         // JIS-Roman
        [ 0x1b, 0x28, 0x49 ],         // Half-width katakana
        [ 0x1b, 0x28, 0x4a ],         // JIS-Roman
        [ 0x1b, 0x2e, 0x41 ],         // ISO 8859-1
        [ 0x1b, 0x2e, 0x46 ]          // ISO 8859-7
      ];
    };
    util.inherits(module.exports.ISO_2022_JP, ISO_2022);



    module.exports.ISO_2022_KR = function() {
      this.name = function() {
        return 'ISO-2022-KR';
      };
      this.escapeSequences = [
        [ 0x1b, 0x24, 0x29, 0x43 ]
      ];
    };
    util.inherits(module.exports.ISO_2022_KR, ISO_2022);



    module.exports.ISO_2022_CN = function() {
      this.name = function() {
        return 'ISO-2022-CN';
      };
      this.escapeSequences = [
        [ 0x1b, 0x24, 0x29, 0x41 ],   // GB 2312-80
        [ 0x1b, 0x24, 0x29, 0x47 ],   // CNS 11643-1992 Plane 1
        [ 0x1b, 0x24, 0x2A, 0x48 ],   // CNS 11643-1992 Plane 2
        [ 0x1b, 0x24, 0x29, 0x45 ],   // ISO-IR-165
        [ 0x1b, 0x24, 0x2B, 0x49 ],   // CNS 11643-1992 Plane 3
        [ 0x1b, 0x24, 0x2B, 0x4A ],   // CNS 11643-1992 Plane 4
        [ 0x1b, 0x24, 0x2B, 0x4B ],   // CNS 11643-1992 Plane 5
        [ 0x1b, 0x24, 0x2B, 0x4C ],   // CNS 11643-1992 Plane 6
        [ 0x1b, 0x24, 0x2B, 0x4D ],   // CNS 11643-1992 Plane 7
        [ 0x1b, 0x4e ],               // SS2
        [ 0x1b, 0x4f ]                // SS3
      ];
    };
    util.inherits(module.exports.ISO_2022_CN, ISO_2022);
    }(iso2022$3));

    var fs$6 = require$$0__default$6["default"];

    var utf8$2  = utf8$3,
      unicode$2 = unicode$3.exports,
      mbcs$2    = mbcs$3.exports,
      sbcs$2    = sbcs$3.exports,
      iso2022$2 = iso2022$3.exports;

    var self$2 = commonjsGlobal;

    var recognisers$1 = [
      new utf8$2,
      new unicode$2.UTF_16BE,
      new unicode$2.UTF_16LE,
      new unicode$2.UTF_32BE,
      new unicode$2.UTF_32LE,
      new mbcs$2.sjis,
      new mbcs$2.big5,
      new mbcs$2.euc_jp,
      new mbcs$2.euc_kr,
      new mbcs$2.gb_18030,
      new iso2022$2.ISO_2022_JP,
      new iso2022$2.ISO_2022_KR,
      new iso2022$2.ISO_2022_CN,
      new sbcs$2.ISO_8859_1,
      new sbcs$2.ISO_8859_2,
      new sbcs$2.ISO_8859_5,
      new sbcs$2.ISO_8859_6,
      new sbcs$2.ISO_8859_7,
      new sbcs$2.ISO_8859_8,
      new sbcs$2.ISO_8859_9,
      new sbcs$2.windows_1251,
      new sbcs$2.windows_1256,
      new sbcs$2.KOI8_R
    ];

    chardet$1.detect = function(buffer, opts) {

      // Tally up the byte occurence statistics.
      var fByteStats = [];
      for (var i = 0; i < 256; i++)
        fByteStats[i] = 0;

      for (var i = buffer.length - 1; i >= 0; i--)
        fByteStats[buffer[i] & 0x00ff]++;

      var fC1Bytes = false;
      for (var i = 0x80; i <= 0x9F; i += 1) {
        if (fByteStats[i] != 0) {
          fC1Bytes = true;
          break;
        }
      }

      var context = {
        fByteStats:  fByteStats,
        fC1Bytes:    fC1Bytes,
        fRawInput:   buffer,
        fRawLength:  buffer.length,
        fInputBytes: buffer,
        fInputLen:   buffer.length
      };

      var matches = recognisers$1.map(function(rec) {
        return rec.match(context);
      }).filter(function(match) {
        return !!match;
      }).sort(function(a, b) {
        return b.confidence - a.confidence;
      });

      if (opts && opts.returnAllMatches === true) {
        return matches;
      }
      else {
        return matches.length > 0 ? matches[0].name : null;
      }
    };

    chardet$1.detectFile = function(filepath, opts, cb) {
      if (typeof opts === 'function') {
        cb = opts;
        opts = undefined;
      }

      var fd;

      var handler = function(err, buffer) {
        if (fd) {
          fs$6.closeSync(fd);
        }

        if (err) return cb(err, null);
        cb(null, self$2.detect(buffer, opts));
      };

      if (opts && opts.sampleSize) {
        fd = fs$6.openSync(filepath, 'r'),
          sample = Buffer.allocUnsafe(opts.sampleSize);

        fs$6.read(fd, sample, 0, opts.sampleSize, null, function(err) {
          handler(err, sample);
        });
        return;
      }

      fs$6.readFile(filepath, handler);
    };

    chardet$1.detectFileSync = function(filepath, opts) {
      if (opts && opts.sampleSize) {
        var fd = fs$6.openSync(filepath, 'r'),
          sample = Buffer.allocUnsafe(opts.sampleSize);

        fs$6.readSync(fd, sample, 0, opts.sampleSize);
        fs$6.closeSync(fd);
        return self$2.detect(sample, opts);
      }

      return self$2.detect(fs$6.readFileSync(filepath), opts);
    };

    // Wrappers for the previous functions to return all encodings
    chardet$1.detectAll = function(buffer, opts) {
      if (typeof opts !== 'object') {
        opts = {};
      }
      opts.returnAllMatches = true;
      return self$2.detect(buffer, opts);
    };

    chardet$1.detectFileAll = function(filepath, opts, cb) {
      if (typeof opts === 'function') {
        cb = opts;
        opts = undefined;
      }
      if (typeof opts !== 'object') {
        opts = {};
      }
      opts.returnAllMatches = true;
      self$2.detectFile(filepath, opts, cb);
    };

    chardet$1.detectFileAllSync = function(filepath, opts) {
      if (typeof opts !== 'object') {
        opts = {};
      }
      opts.returnAllMatches = true;
      return self$2.detectFileSync(filepath, opts);
    };

    var lib$1 = {exports: {}};

    /* eslint-disable node/no-deprecated-api */

    var buffer$2 = require$$0__default$2["default"];
    var Buffer$h = buffer$2.Buffer;

    var safer$1 = {};

    var key$1;

    for (key$1 in buffer$2) {
      if (!buffer$2.hasOwnProperty(key$1)) continue
      if (key$1 === 'SlowBuffer' || key$1 === 'Buffer') continue
      safer$1[key$1] = buffer$2[key$1];
    }

    var Safer$1 = safer$1.Buffer = {};
    for (key$1 in Buffer$h) {
      if (!Buffer$h.hasOwnProperty(key$1)) continue
      if (key$1 === 'allocUnsafe' || key$1 === 'allocUnsafeSlow') continue
      Safer$1[key$1] = Buffer$h[key$1];
    }

    safer$1.Buffer.prototype = Buffer$h.prototype;

    if (!Safer$1.from || Safer$1.from === Uint8Array.from) {
      Safer$1.from = function (value, encodingOrOffset, length) {
        if (typeof value === 'number') {
          throw new TypeError('The "value" argument must not be of type number. Received type ' + typeof value)
        }
        if (value && typeof value.length === 'undefined') {
          throw new TypeError('The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type ' + typeof value)
        }
        return Buffer$h(value, encodingOrOffset, length)
      };
    }

    if (!Safer$1.alloc) {
      Safer$1.alloc = function (size, fill, encoding) {
        if (typeof size !== 'number') {
          throw new TypeError('The "size" argument must be of type number. Received type ' + typeof size)
        }
        if (size < 0 || size >= 2 * (1 << 30)) {
          throw new RangeError('The value "' + size + '" is invalid for option "size"')
        }
        var buf = Buffer$h(size);
        if (!fill || fill.length === 0) {
          buf.fill(0);
        } else if (typeof encoding === 'string') {
          buf.fill(fill, encoding);
        } else {
          buf.fill(fill);
        }
        return buf
      };
    }

    if (!safer$1.kStringMaxLength) {
      try {
        safer$1.kStringMaxLength = process.binding('buffer').kStringMaxLength;
      } catch (e) {
        // we can't determine kStringMaxLength in environments where process.binding
        // is unsupported, so let's not set it
      }
    }

    if (!safer$1.constants) {
      safer$1.constants = {
        MAX_LENGTH: safer$1.kMaxLength
      };
      if (safer$1.kStringMaxLength) {
        safer$1.constants.MAX_STRING_LENGTH = safer$1.kStringMaxLength;
      }
    }

    var safer_1$1 = safer$1;

    var bomHandling$1 = {};

    var BOMChar$1 = '\uFEFF';

    bomHandling$1.PrependBOM = PrependBOMWrapper$1;
    function PrependBOMWrapper$1(encoder, options) {
        this.encoder = encoder;
        this.addBOM = true;
    }

    PrependBOMWrapper$1.prototype.write = function(str) {
        if (this.addBOM) {
            str = BOMChar$1 + str;
            this.addBOM = false;
        }

        return this.encoder.write(str);
    };

    PrependBOMWrapper$1.prototype.end = function() {
        return this.encoder.end();
    };


    //------------------------------------------------------------------------------

    bomHandling$1.StripBOM = StripBOMWrapper$1;
    function StripBOMWrapper$1(decoder, options) {
        this.decoder = decoder;
        this.pass = false;
        this.options = options || {};
    }

    StripBOMWrapper$1.prototype.write = function(buf) {
        var res = this.decoder.write(buf);
        if (this.pass || !res)
            return res;

        if (res[0] === BOMChar$1) {
            res = res.slice(1);
            if (typeof this.options.stripBOM === 'function')
                this.options.stripBOM();
        }

        this.pass = true;
        return res;
    };

    StripBOMWrapper$1.prototype.end = function() {
        return this.decoder.end();
    };

    var encodings$1 = {};

    var Buffer$g = safer_1$1.Buffer;

    // Export Node.js internal encodings.

    var internal$1 = {
        // Encodings
        utf8:   { type: "_internal", bomAware: true},
        cesu8:  { type: "_internal", bomAware: true},
        unicode11utf8: "utf8",

        ucs2:   { type: "_internal", bomAware: true},
        utf16le: "ucs2",

        binary: { type: "_internal" },
        base64: { type: "_internal" },
        hex:    { type: "_internal" },

        // Codec.
        _internal: InternalCodec$1,
    };

    //------------------------------------------------------------------------------

    function InternalCodec$1(codecOptions, iconv) {
        this.enc = codecOptions.encodingName;
        this.bomAware = codecOptions.bomAware;

        if (this.enc === "base64")
            this.encoder = InternalEncoderBase64$1;
        else if (this.enc === "cesu8") {
            this.enc = "utf8"; // Use utf8 for decoding.
            this.encoder = InternalEncoderCesu8$1;

            // Add decoder for versions of Node not supporting CESU-8
            if (Buffer$g.from('eda0bdedb2a9', 'hex').toString() !== '💩') {
                this.decoder = InternalDecoderCesu8$1;
                this.defaultCharUnicode = iconv.defaultCharUnicode;
            }
        }
    }

    InternalCodec$1.prototype.encoder = InternalEncoder$1;
    InternalCodec$1.prototype.decoder = InternalDecoder$1;

    //------------------------------------------------------------------------------

    // We use node.js internal decoder. Its signature is the same as ours.
    var StringDecoder$1 = require$$1__default$2["default"].StringDecoder;

    if (!StringDecoder$1.prototype.end) // Node v0.8 doesn't have this method.
        StringDecoder$1.prototype.end = function() {};


    function InternalDecoder$1(options, codec) {
        StringDecoder$1.call(this, codec.enc);
    }

    InternalDecoder$1.prototype = StringDecoder$1.prototype;


    //------------------------------------------------------------------------------
    // Encoder is mostly trivial

    function InternalEncoder$1(options, codec) {
        this.enc = codec.enc;
    }

    InternalEncoder$1.prototype.write = function(str) {
        return Buffer$g.from(str, this.enc);
    };

    InternalEncoder$1.prototype.end = function() {
    };


    //------------------------------------------------------------------------------
    // Except base64 encoder, which must keep its state.

    function InternalEncoderBase64$1(options, codec) {
        this.prevStr = '';
    }

    InternalEncoderBase64$1.prototype.write = function(str) {
        str = this.prevStr + str;
        var completeQuads = str.length - (str.length % 4);
        this.prevStr = str.slice(completeQuads);
        str = str.slice(0, completeQuads);

        return Buffer$g.from(str, "base64");
    };

    InternalEncoderBase64$1.prototype.end = function() {
        return Buffer$g.from(this.prevStr, "base64");
    };


    //------------------------------------------------------------------------------
    // CESU-8 encoder is also special.

    function InternalEncoderCesu8$1(options, codec) {
    }

    InternalEncoderCesu8$1.prototype.write = function(str) {
        var buf = Buffer$g.alloc(str.length * 3), bufIdx = 0;
        for (var i = 0; i < str.length; i++) {
            var charCode = str.charCodeAt(i);
            // Naive implementation, but it works because CESU-8 is especially easy
            // to convert from UTF-16 (which all JS strings are encoded in).
            if (charCode < 0x80)
                buf[bufIdx++] = charCode;
            else if (charCode < 0x800) {
                buf[bufIdx++] = 0xC0 + (charCode >>> 6);
                buf[bufIdx++] = 0x80 + (charCode & 0x3f);
            }
            else { // charCode will always be < 0x10000 in javascript.
                buf[bufIdx++] = 0xE0 + (charCode >>> 12);
                buf[bufIdx++] = 0x80 + ((charCode >>> 6) & 0x3f);
                buf[bufIdx++] = 0x80 + (charCode & 0x3f);
            }
        }
        return buf.slice(0, bufIdx);
    };

    InternalEncoderCesu8$1.prototype.end = function() {
    };

    //------------------------------------------------------------------------------
    // CESU-8 decoder is not implemented in Node v4.0+

    function InternalDecoderCesu8$1(options, codec) {
        this.acc = 0;
        this.contBytes = 0;
        this.accBytes = 0;
        this.defaultCharUnicode = codec.defaultCharUnicode;
    }

    InternalDecoderCesu8$1.prototype.write = function(buf) {
        var acc = this.acc, contBytes = this.contBytes, accBytes = this.accBytes, 
            res = '';
        for (var i = 0; i < buf.length; i++) {
            var curByte = buf[i];
            if ((curByte & 0xC0) !== 0x80) { // Leading byte
                if (contBytes > 0) { // Previous code is invalid
                    res += this.defaultCharUnicode;
                    contBytes = 0;
                }

                if (curByte < 0x80) { // Single-byte code
                    res += String.fromCharCode(curByte);
                } else if (curByte < 0xE0) { // Two-byte code
                    acc = curByte & 0x1F;
                    contBytes = 1; accBytes = 1;
                } else if (curByte < 0xF0) { // Three-byte code
                    acc = curByte & 0x0F;
                    contBytes = 2; accBytes = 1;
                } else { // Four or more are not supported for CESU-8.
                    res += this.defaultCharUnicode;
                }
            } else { // Continuation byte
                if (contBytes > 0) { // We're waiting for it.
                    acc = (acc << 6) | (curByte & 0x3f);
                    contBytes--; accBytes++;
                    if (contBytes === 0) {
                        // Check for overlong encoding, but support Modified UTF-8 (encoding NULL as C0 80)
                        if (accBytes === 2 && acc < 0x80 && acc > 0)
                            res += this.defaultCharUnicode;
                        else if (accBytes === 3 && acc < 0x800)
                            res += this.defaultCharUnicode;
                        else
                            // Actually add character.
                            res += String.fromCharCode(acc);
                    }
                } else { // Unexpected continuation byte
                    res += this.defaultCharUnicode;
                }
            }
        }
        this.acc = acc; this.contBytes = contBytes; this.accBytes = accBytes;
        return res;
    };

    InternalDecoderCesu8$1.prototype.end = function() {
        var res = 0;
        if (this.contBytes > 0)
            res += this.defaultCharUnicode;
        return res;
    };

    var utf16$1 = {};

    var Buffer$f = safer_1$1.Buffer;

    // Note: UTF16-LE (or UCS2) codec is Node.js native. See encodings/internal.js

    // == UTF16-BE codec. ==========================================================

    utf16$1.utf16be = Utf16BECodec$1;
    function Utf16BECodec$1() {
    }

    Utf16BECodec$1.prototype.encoder = Utf16BEEncoder$1;
    Utf16BECodec$1.prototype.decoder = Utf16BEDecoder$1;
    Utf16BECodec$1.prototype.bomAware = true;


    // -- Encoding

    function Utf16BEEncoder$1() {
    }

    Utf16BEEncoder$1.prototype.write = function(str) {
        var buf = Buffer$f.from(str, 'ucs2');
        for (var i = 0; i < buf.length; i += 2) {
            var tmp = buf[i]; buf[i] = buf[i+1]; buf[i+1] = tmp;
        }
        return buf;
    };

    Utf16BEEncoder$1.prototype.end = function() {
    };


    // -- Decoding

    function Utf16BEDecoder$1() {
        this.overflowByte = -1;
    }

    Utf16BEDecoder$1.prototype.write = function(buf) {
        if (buf.length == 0)
            return '';

        var buf2 = Buffer$f.alloc(buf.length + 1),
            i = 0, j = 0;

        if (this.overflowByte !== -1) {
            buf2[0] = buf[0];
            buf2[1] = this.overflowByte;
            i = 1; j = 2;
        }

        for (; i < buf.length-1; i += 2, j+= 2) {
            buf2[j] = buf[i+1];
            buf2[j+1] = buf[i];
        }

        this.overflowByte = (i == buf.length-1) ? buf[buf.length-1] : -1;

        return buf2.slice(0, j).toString('ucs2');
    };

    Utf16BEDecoder$1.prototype.end = function() {
    };


    // == UTF-16 codec =============================================================
    // Decoder chooses automatically from UTF-16LE and UTF-16BE using BOM and space-based heuristic.
    // Defaults to UTF-16LE, as it's prevalent and default in Node.
    // http://en.wikipedia.org/wiki/UTF-16 and http://encoding.spec.whatwg.org/#utf-16le
    // Decoder default can be changed: iconv.decode(buf, 'utf16', {defaultEncoding: 'utf-16be'});

    // Encoder uses UTF-16LE and prepends BOM (which can be overridden with addBOM: false).

    utf16$1.utf16 = Utf16Codec$1;
    function Utf16Codec$1(codecOptions, iconv) {
        this.iconv = iconv;
    }

    Utf16Codec$1.prototype.encoder = Utf16Encoder$1;
    Utf16Codec$1.prototype.decoder = Utf16Decoder$1;


    // -- Encoding (pass-through)

    function Utf16Encoder$1(options, codec) {
        options = options || {};
        if (options.addBOM === undefined)
            options.addBOM = true;
        this.encoder = codec.iconv.getEncoder('utf-16le', options);
    }

    Utf16Encoder$1.prototype.write = function(str) {
        return this.encoder.write(str);
    };

    Utf16Encoder$1.prototype.end = function() {
        return this.encoder.end();
    };


    // -- Decoding

    function Utf16Decoder$1(options, codec) {
        this.decoder = null;
        this.initialBytes = [];
        this.initialBytesLen = 0;

        this.options = options || {};
        this.iconv = codec.iconv;
    }

    Utf16Decoder$1.prototype.write = function(buf) {
        if (!this.decoder) {
            // Codec is not chosen yet. Accumulate initial bytes.
            this.initialBytes.push(buf);
            this.initialBytesLen += buf.length;
            
            if (this.initialBytesLen < 16) // We need more bytes to use space heuristic (see below)
                return '';

            // We have enough bytes -> detect endianness.
            var buf = Buffer$f.concat(this.initialBytes),
                encoding = detectEncoding$1(buf, this.options.defaultEncoding);
            this.decoder = this.iconv.getDecoder(encoding, this.options);
            this.initialBytes.length = this.initialBytesLen = 0;
        }

        return this.decoder.write(buf);
    };

    Utf16Decoder$1.prototype.end = function() {
        if (!this.decoder) {
            var buf = Buffer$f.concat(this.initialBytes),
                encoding = detectEncoding$1(buf, this.options.defaultEncoding);
            this.decoder = this.iconv.getDecoder(encoding, this.options);

            var res = this.decoder.write(buf),
                trail = this.decoder.end();

            return trail ? (res + trail) : res;
        }
        return this.decoder.end();
    };

    function detectEncoding$1(buf, defaultEncoding) {
        var enc = defaultEncoding || 'utf-16le';

        if (buf.length >= 2) {
            // Check BOM.
            if (buf[0] == 0xFE && buf[1] == 0xFF) // UTF-16BE BOM
                enc = 'utf-16be';
            else if (buf[0] == 0xFF && buf[1] == 0xFE) // UTF-16LE BOM
                enc = 'utf-16le';
            else {
                // No BOM found. Try to deduce encoding from initial content.
                // Most of the time, the content has ASCII chars (U+00**), but the opposite (U+**00) is uncommon.
                // So, we count ASCII as if it was LE or BE, and decide from that.
                var asciiCharsLE = 0, asciiCharsBE = 0, // Counts of chars in both positions
                    _len = Math.min(buf.length - (buf.length % 2), 64); // Len is always even.

                for (var i = 0; i < _len; i += 2) {
                    if (buf[i] === 0 && buf[i+1] !== 0) asciiCharsBE++;
                    if (buf[i] !== 0 && buf[i+1] === 0) asciiCharsLE++;
                }

                if (asciiCharsBE > asciiCharsLE)
                    enc = 'utf-16be';
                else if (asciiCharsBE < asciiCharsLE)
                    enc = 'utf-16le';
            }
        }

        return enc;
    }

    var utf7$1 = {};

    var Buffer$e = safer_1$1.Buffer;

    // UTF-7 codec, according to https://tools.ietf.org/html/rfc2152
    // See also below a UTF-7-IMAP codec, according to http://tools.ietf.org/html/rfc3501#section-5.1.3

    utf7$1.utf7 = Utf7Codec$1;
    utf7$1.unicode11utf7 = 'utf7'; // Alias UNICODE-1-1-UTF-7
    function Utf7Codec$1(codecOptions, iconv) {
        this.iconv = iconv;
    }
    Utf7Codec$1.prototype.encoder = Utf7Encoder$1;
    Utf7Codec$1.prototype.decoder = Utf7Decoder$1;
    Utf7Codec$1.prototype.bomAware = true;


    // -- Encoding

    var nonDirectChars$1 = /[^A-Za-z0-9'\(\),-\.\/:\? \n\r\t]+/g;

    function Utf7Encoder$1(options, codec) {
        this.iconv = codec.iconv;
    }

    Utf7Encoder$1.prototype.write = function(str) {
        // Naive implementation.
        // Non-direct chars are encoded as "+<base64>-"; single "+" char is encoded as "+-".
        return Buffer$e.from(str.replace(nonDirectChars$1, function(chunk) {
            return "+" + (chunk === '+' ? '' : 
                this.iconv.encode(chunk, 'utf16-be').toString('base64').replace(/=+$/, '')) 
                + "-";
        }.bind(this)));
    };

    Utf7Encoder$1.prototype.end = function() {
    };


    // -- Decoding

    function Utf7Decoder$1(options, codec) {
        this.iconv = codec.iconv;
        this.inBase64 = false;
        this.base64Accum = '';
    }

    var base64Regex$1 = /[A-Za-z0-9\/+]/;
    var base64Chars$1 = [];
    for (var i$3 = 0; i$3 < 256; i$3++)
        base64Chars$1[i$3] = base64Regex$1.test(String.fromCharCode(i$3));

    var plusChar$1 = '+'.charCodeAt(0), 
        minusChar$1 = '-'.charCodeAt(0),
        andChar$1 = '&'.charCodeAt(0);

    Utf7Decoder$1.prototype.write = function(buf) {
        var res = "", lastI = 0,
            inBase64 = this.inBase64,
            base64Accum = this.base64Accum;

        // The decoder is more involved as we must handle chunks in stream.

        for (var i = 0; i < buf.length; i++) {
            if (!inBase64) { // We're in direct mode.
                // Write direct chars until '+'
                if (buf[i] == plusChar$1) {
                    res += this.iconv.decode(buf.slice(lastI, i), "ascii"); // Write direct chars.
                    lastI = i+1;
                    inBase64 = true;
                }
            } else { // We decode base64.
                if (!base64Chars$1[buf[i]]) { // Base64 ended.
                    if (i == lastI && buf[i] == minusChar$1) {// "+-" -> "+"
                        res += "+";
                    } else {
                        var b64str = base64Accum + buf.slice(lastI, i).toString();
                        res += this.iconv.decode(Buffer$e.from(b64str, 'base64'), "utf16-be");
                    }

                    if (buf[i] != minusChar$1) // Minus is absorbed after base64.
                        i--;

                    lastI = i+1;
                    inBase64 = false;
                    base64Accum = '';
                }
            }
        }

        if (!inBase64) {
            res += this.iconv.decode(buf.slice(lastI), "ascii"); // Write direct chars.
        } else {
            var b64str = base64Accum + buf.slice(lastI).toString();

            var canBeDecoded = b64str.length - (b64str.length % 8); // Minimal chunk: 2 quads -> 2x3 bytes -> 3 chars.
            base64Accum = b64str.slice(canBeDecoded); // The rest will be decoded in future.
            b64str = b64str.slice(0, canBeDecoded);

            res += this.iconv.decode(Buffer$e.from(b64str, 'base64'), "utf16-be");
        }

        this.inBase64 = inBase64;
        this.base64Accum = base64Accum;

        return res;
    };

    Utf7Decoder$1.prototype.end = function() {
        var res = "";
        if (this.inBase64 && this.base64Accum.length > 0)
            res = this.iconv.decode(Buffer$e.from(this.base64Accum, 'base64'), "utf16-be");

        this.inBase64 = false;
        this.base64Accum = '';
        return res;
    };


    // UTF-7-IMAP codec.
    // RFC3501 Sec. 5.1.3 Modified UTF-7 (http://tools.ietf.org/html/rfc3501#section-5.1.3)
    // Differences:
    //  * Base64 part is started by "&" instead of "+"
    //  * Direct characters are 0x20-0x7E, except "&" (0x26)
    //  * In Base64, "," is used instead of "/"
    //  * Base64 must not be used to represent direct characters.
    //  * No implicit shift back from Base64 (should always end with '-')
    //  * String must end in non-shifted position.
    //  * "-&" while in base64 is not allowed.


    utf7$1.utf7imap = Utf7IMAPCodec$1;
    function Utf7IMAPCodec$1(codecOptions, iconv) {
        this.iconv = iconv;
    }
    Utf7IMAPCodec$1.prototype.encoder = Utf7IMAPEncoder$1;
    Utf7IMAPCodec$1.prototype.decoder = Utf7IMAPDecoder$1;
    Utf7IMAPCodec$1.prototype.bomAware = true;


    // -- Encoding

    function Utf7IMAPEncoder$1(options, codec) {
        this.iconv = codec.iconv;
        this.inBase64 = false;
        this.base64Accum = Buffer$e.alloc(6);
        this.base64AccumIdx = 0;
    }

    Utf7IMAPEncoder$1.prototype.write = function(str) {
        var inBase64 = this.inBase64,
            base64Accum = this.base64Accum,
            base64AccumIdx = this.base64AccumIdx,
            buf = Buffer$e.alloc(str.length*5 + 10), bufIdx = 0;

        for (var i = 0; i < str.length; i++) {
            var uChar = str.charCodeAt(i);
            if (0x20 <= uChar && uChar <= 0x7E) { // Direct character or '&'.
                if (inBase64) {
                    if (base64AccumIdx > 0) {
                        bufIdx += buf.write(base64Accum.slice(0, base64AccumIdx).toString('base64').replace(/\//g, ',').replace(/=+$/, ''), bufIdx);
                        base64AccumIdx = 0;
                    }

                    buf[bufIdx++] = minusChar$1; // Write '-', then go to direct mode.
                    inBase64 = false;
                }

                if (!inBase64) {
                    buf[bufIdx++] = uChar; // Write direct character

                    if (uChar === andChar$1)  // Ampersand -> '&-'
                        buf[bufIdx++] = minusChar$1;
                }

            } else { // Non-direct character
                if (!inBase64) {
                    buf[bufIdx++] = andChar$1; // Write '&', then go to base64 mode.
                    inBase64 = true;
                }
                if (inBase64) {
                    base64Accum[base64AccumIdx++] = uChar >> 8;
                    base64Accum[base64AccumIdx++] = uChar & 0xFF;

                    if (base64AccumIdx == base64Accum.length) {
                        bufIdx += buf.write(base64Accum.toString('base64').replace(/\//g, ','), bufIdx);
                        base64AccumIdx = 0;
                    }
                }
            }
        }

        this.inBase64 = inBase64;
        this.base64AccumIdx = base64AccumIdx;

        return buf.slice(0, bufIdx);
    };

    Utf7IMAPEncoder$1.prototype.end = function() {
        var buf = Buffer$e.alloc(10), bufIdx = 0;
        if (this.inBase64) {
            if (this.base64AccumIdx > 0) {
                bufIdx += buf.write(this.base64Accum.slice(0, this.base64AccumIdx).toString('base64').replace(/\//g, ',').replace(/=+$/, ''), bufIdx);
                this.base64AccumIdx = 0;
            }

            buf[bufIdx++] = minusChar$1; // Write '-', then go to direct mode.
            this.inBase64 = false;
        }

        return buf.slice(0, bufIdx);
    };


    // -- Decoding

    function Utf7IMAPDecoder$1(options, codec) {
        this.iconv = codec.iconv;
        this.inBase64 = false;
        this.base64Accum = '';
    }

    var base64IMAPChars$1 = base64Chars$1.slice();
    base64IMAPChars$1[','.charCodeAt(0)] = true;

    Utf7IMAPDecoder$1.prototype.write = function(buf) {
        var res = "", lastI = 0,
            inBase64 = this.inBase64,
            base64Accum = this.base64Accum;

        // The decoder is more involved as we must handle chunks in stream.
        // It is forgiving, closer to standard UTF-7 (for example, '-' is optional at the end).

        for (var i = 0; i < buf.length; i++) {
            if (!inBase64) { // We're in direct mode.
                // Write direct chars until '&'
                if (buf[i] == andChar$1) {
                    res += this.iconv.decode(buf.slice(lastI, i), "ascii"); // Write direct chars.
                    lastI = i+1;
                    inBase64 = true;
                }
            } else { // We decode base64.
                if (!base64IMAPChars$1[buf[i]]) { // Base64 ended.
                    if (i == lastI && buf[i] == minusChar$1) { // "&-" -> "&"
                        res += "&";
                    } else {
                        var b64str = base64Accum + buf.slice(lastI, i).toString().replace(/,/g, '/');
                        res += this.iconv.decode(Buffer$e.from(b64str, 'base64'), "utf16-be");
                    }

                    if (buf[i] != minusChar$1) // Minus may be absorbed after base64.
                        i--;

                    lastI = i+1;
                    inBase64 = false;
                    base64Accum = '';
                }
            }
        }

        if (!inBase64) {
            res += this.iconv.decode(buf.slice(lastI), "ascii"); // Write direct chars.
        } else {
            var b64str = base64Accum + buf.slice(lastI).toString().replace(/,/g, '/');

            var canBeDecoded = b64str.length - (b64str.length % 8); // Minimal chunk: 2 quads -> 2x3 bytes -> 3 chars.
            base64Accum = b64str.slice(canBeDecoded); // The rest will be decoded in future.
            b64str = b64str.slice(0, canBeDecoded);

            res += this.iconv.decode(Buffer$e.from(b64str, 'base64'), "utf16-be");
        }

        this.inBase64 = inBase64;
        this.base64Accum = base64Accum;

        return res;
    };

    Utf7IMAPDecoder$1.prototype.end = function() {
        var res = "";
        if (this.inBase64 && this.base64Accum.length > 0)
            res = this.iconv.decode(Buffer$e.from(this.base64Accum, 'base64'), "utf16-be");

        this.inBase64 = false;
        this.base64Accum = '';
        return res;
    };

    var sbcsCodec$1 = {};

    var Buffer$d = safer_1$1.Buffer;

    // Single-byte codec. Needs a 'chars' string parameter that contains 256 or 128 chars that
    // correspond to encoded bytes (if 128 - then lower half is ASCII). 

    sbcsCodec$1._sbcs = SBCSCodec$1;
    function SBCSCodec$1(codecOptions, iconv) {
        if (!codecOptions)
            throw new Error("SBCS codec is called without the data.")
        
        // Prepare char buffer for decoding.
        if (!codecOptions.chars || (codecOptions.chars.length !== 128 && codecOptions.chars.length !== 256))
            throw new Error("Encoding '"+codecOptions.type+"' has incorrect 'chars' (must be of len 128 or 256)");
        
        if (codecOptions.chars.length === 128) {
            var asciiString = "";
            for (var i = 0; i < 128; i++)
                asciiString += String.fromCharCode(i);
            codecOptions.chars = asciiString + codecOptions.chars;
        }

        this.decodeBuf = Buffer$d.from(codecOptions.chars, 'ucs2');
        
        // Encoding buffer.
        var encodeBuf = Buffer$d.alloc(65536, iconv.defaultCharSingleByte.charCodeAt(0));

        for (var i = 0; i < codecOptions.chars.length; i++)
            encodeBuf[codecOptions.chars.charCodeAt(i)] = i;

        this.encodeBuf = encodeBuf;
    }

    SBCSCodec$1.prototype.encoder = SBCSEncoder$1;
    SBCSCodec$1.prototype.decoder = SBCSDecoder$1;


    function SBCSEncoder$1(options, codec) {
        this.encodeBuf = codec.encodeBuf;
    }

    SBCSEncoder$1.prototype.write = function(str) {
        var buf = Buffer$d.alloc(str.length);
        for (var i = 0; i < str.length; i++)
            buf[i] = this.encodeBuf[str.charCodeAt(i)];
        
        return buf;
    };

    SBCSEncoder$1.prototype.end = function() {
    };


    function SBCSDecoder$1(options, codec) {
        this.decodeBuf = codec.decodeBuf;
    }

    SBCSDecoder$1.prototype.write = function(buf) {
        // Strings are immutable in JS -> we use ucs2 buffer to speed up computations.
        var decodeBuf = this.decodeBuf;
        var newBuf = Buffer$d.alloc(buf.length*2);
        var idx1 = 0, idx2 = 0;
        for (var i = 0; i < buf.length; i++) {
            idx1 = buf[i]*2; idx2 = i*2;
            newBuf[idx2] = decodeBuf[idx1];
            newBuf[idx2+1] = decodeBuf[idx1+1];
        }
        return newBuf.toString('ucs2');
    };

    SBCSDecoder$1.prototype.end = function() {
    };

    // Manually added data to be used by sbcs codec in addition to generated one.

    var sbcsData$1 = {
        // Not supported by iconv, not sure why.
        "10029": "maccenteuro",
        "maccenteuro": {
            "type": "_sbcs",
            "chars": "ÄĀāÉĄÖÜáąČäčĆćéŹźĎíďĒēĖóėôöõúĚěü†°Ę£§•¶ß®©™ę¨≠ģĮįĪ≤≥īĶ∂∑łĻļĽľĹĺŅņŃ¬√ńŇ∆«»… ňŐÕőŌ–—“”‘’÷◊ōŔŕŘ‹›řŖŗŠ‚„šŚśÁŤťÍŽžŪÓÔūŮÚůŰűŲųÝýķŻŁżĢˇ"
        },

        "808": "cp808",
        "ibm808": "cp808",
        "cp808": {
            "type": "_sbcs",
            "chars": "АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмноп░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀рстуфхцчшщъыьэюяЁёЄєЇїЎў°∙·√№€■ "
        },

        "mik": {
            "type": "_sbcs",
            "chars": "АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя└┴┬├─┼╣║╚╔╩╦╠═╬┐░▒▓│┤№§╗╝┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ "
        },

        // Aliases of generated encodings.
        "ascii8bit": "ascii",
        "usascii": "ascii",
        "ansix34": "ascii",
        "ansix341968": "ascii",
        "ansix341986": "ascii",
        "csascii": "ascii",
        "cp367": "ascii",
        "ibm367": "ascii",
        "isoir6": "ascii",
        "iso646us": "ascii",
        "iso646irv": "ascii",
        "us": "ascii",

        "latin1": "iso88591",
        "latin2": "iso88592",
        "latin3": "iso88593",
        "latin4": "iso88594",
        "latin5": "iso88599",
        "latin6": "iso885910",
        "latin7": "iso885913",
        "latin8": "iso885914",
        "latin9": "iso885915",
        "latin10": "iso885916",

        "csisolatin1": "iso88591",
        "csisolatin2": "iso88592",
        "csisolatin3": "iso88593",
        "csisolatin4": "iso88594",
        "csisolatincyrillic": "iso88595",
        "csisolatinarabic": "iso88596",
        "csisolatingreek" : "iso88597",
        "csisolatinhebrew": "iso88598",
        "csisolatin5": "iso88599",
        "csisolatin6": "iso885910",

        "l1": "iso88591",
        "l2": "iso88592",
        "l3": "iso88593",
        "l4": "iso88594",
        "l5": "iso88599",
        "l6": "iso885910",
        "l7": "iso885913",
        "l8": "iso885914",
        "l9": "iso885915",
        "l10": "iso885916",

        "isoir14": "iso646jp",
        "isoir57": "iso646cn",
        "isoir100": "iso88591",
        "isoir101": "iso88592",
        "isoir109": "iso88593",
        "isoir110": "iso88594",
        "isoir144": "iso88595",
        "isoir127": "iso88596",
        "isoir126": "iso88597",
        "isoir138": "iso88598",
        "isoir148": "iso88599",
        "isoir157": "iso885910",
        "isoir166": "tis620",
        "isoir179": "iso885913",
        "isoir199": "iso885914",
        "isoir203": "iso885915",
        "isoir226": "iso885916",

        "cp819": "iso88591",
        "ibm819": "iso88591",

        "cyrillic": "iso88595",

        "arabic": "iso88596",
        "arabic8": "iso88596",
        "ecma114": "iso88596",
        "asmo708": "iso88596",

        "greek" : "iso88597",
        "greek8" : "iso88597",
        "ecma118" : "iso88597",
        "elot928" : "iso88597",

        "hebrew": "iso88598",
        "hebrew8": "iso88598",

        "turkish": "iso88599",
        "turkish8": "iso88599",

        "thai": "iso885911",
        "thai8": "iso885911",

        "celtic": "iso885914",
        "celtic8": "iso885914",
        "isoceltic": "iso885914",

        "tis6200": "tis620",
        "tis62025291": "tis620",
        "tis62025330": "tis620",

        "10000": "macroman",
        "10006": "macgreek",
        "10007": "maccyrillic",
        "10079": "maciceland",
        "10081": "macturkish",

        "cspc8codepage437": "cp437",
        "cspc775baltic": "cp775",
        "cspc850multilingual": "cp850",
        "cspcp852": "cp852",
        "cspc862latinhebrew": "cp862",
        "cpgr": "cp869",

        "msee": "cp1250",
        "mscyrl": "cp1251",
        "msansi": "cp1252",
        "msgreek": "cp1253",
        "msturk": "cp1254",
        "mshebr": "cp1255",
        "msarab": "cp1256",
        "winbaltrim": "cp1257",

        "cp20866": "koi8r",
        "20866": "koi8r",
        "ibm878": "koi8r",
        "cskoi8r": "koi8r",

        "cp21866": "koi8u",
        "21866": "koi8u",
        "ibm1168": "koi8u",

        "strk10482002": "rk1048",

        "tcvn5712": "tcvn",
        "tcvn57121": "tcvn",

        "gb198880": "iso646cn",
        "cn": "iso646cn",

        "csiso14jisc6220ro": "iso646jp",
        "jisc62201969ro": "iso646jp",
        "jp": "iso646jp",

        "cshproman8": "hproman8",
        "r8": "hproman8",
        "roman8": "hproman8",
        "xroman8": "hproman8",
        "ibm1051": "hproman8",

        "mac": "macintosh",
        "csmacintosh": "macintosh",
    };

    // Generated data for sbcs codec. Don't edit manually. Regenerate using generation/gen-sbcs.js script.
    var sbcsDataGenerated$1 = {
      "437": "cp437",
      "737": "cp737",
      "775": "cp775",
      "850": "cp850",
      "852": "cp852",
      "855": "cp855",
      "856": "cp856",
      "857": "cp857",
      "858": "cp858",
      "860": "cp860",
      "861": "cp861",
      "862": "cp862",
      "863": "cp863",
      "864": "cp864",
      "865": "cp865",
      "866": "cp866",
      "869": "cp869",
      "874": "windows874",
      "922": "cp922",
      "1046": "cp1046",
      "1124": "cp1124",
      "1125": "cp1125",
      "1129": "cp1129",
      "1133": "cp1133",
      "1161": "cp1161",
      "1162": "cp1162",
      "1163": "cp1163",
      "1250": "windows1250",
      "1251": "windows1251",
      "1252": "windows1252",
      "1253": "windows1253",
      "1254": "windows1254",
      "1255": "windows1255",
      "1256": "windows1256",
      "1257": "windows1257",
      "1258": "windows1258",
      "28591": "iso88591",
      "28592": "iso88592",
      "28593": "iso88593",
      "28594": "iso88594",
      "28595": "iso88595",
      "28596": "iso88596",
      "28597": "iso88597",
      "28598": "iso88598",
      "28599": "iso88599",
      "28600": "iso885910",
      "28601": "iso885911",
      "28603": "iso885913",
      "28604": "iso885914",
      "28605": "iso885915",
      "28606": "iso885916",
      "windows874": {
        "type": "_sbcs",
        "chars": "€����…�����������‘’“”•–—�������� กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรฤลฦวศษสหฬอฮฯะัาำิีึืฺุู����฿เแโใไๅๆ็่้๊๋์ํ๎๏๐๑๒๓๔๕๖๗๘๙๚๛����"
      },
      "win874": "windows874",
      "cp874": "windows874",
      "windows1250": {
        "type": "_sbcs",
        "chars": "€�‚�„…†‡�‰Š‹ŚŤŽŹ�‘’“”•–—�™š›śťžź ˇ˘Ł¤Ą¦§¨©Ş«¬­®Ż°±˛ł´µ¶·¸ąş»Ľ˝ľżŔÁÂĂÄĹĆÇČÉĘËĚÍÎĎĐŃŇÓÔŐÖ×ŘŮÚŰÜÝŢßŕáâăäĺćçčéęëěíîďđńňóôőö÷řůúűüýţ˙"
      },
      "win1250": "windows1250",
      "cp1250": "windows1250",
      "windows1251": {
        "type": "_sbcs",
        "chars": "ЂЃ‚ѓ„…†‡€‰Љ‹ЊЌЋЏђ‘’“”•–—�™љ›њќћџ ЎўЈ¤Ґ¦§Ё©Є«¬­®Ї°±Ііґµ¶·ё№є»јЅѕїАБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя"
      },
      "win1251": "windows1251",
      "cp1251": "windows1251",
      "windows1252": {
        "type": "_sbcs",
        "chars": "€�‚ƒ„…†‡ˆ‰Š‹Œ�Ž��‘’“”•–—˜™š›œ�žŸ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿ"
      },
      "win1252": "windows1252",
      "cp1252": "windows1252",
      "windows1253": {
        "type": "_sbcs",
        "chars": "€�‚ƒ„…†‡�‰�‹�����‘’“”•–—�™�›���� ΅Ά£¤¥¦§¨©�«¬­®―°±²³΄µ¶·ΈΉΊ»Ό½ΎΏΐΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡ�ΣΤΥΦΧΨΩΪΫάέήίΰαβγδεζηθικλμνξοπρςστυφχψωϊϋόύώ�"
      },
      "win1253": "windows1253",
      "cp1253": "windows1253",
      "windows1254": {
        "type": "_sbcs",
        "chars": "€�‚ƒ„…†‡ˆ‰Š‹Œ����‘’“”•–—˜™š›œ��Ÿ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏĞÑÒÓÔÕÖ×ØÙÚÛÜİŞßàáâãäåæçèéêëìíîïğñòóôõö÷øùúûüışÿ"
      },
      "win1254": "windows1254",
      "cp1254": "windows1254",
      "windows1255": {
        "type": "_sbcs",
        "chars": "€�‚ƒ„…†‡ˆ‰�‹�����‘’“”•–—˜™�›���� ¡¢£₪¥¦§¨©×«¬­®¯°±²³´µ¶·¸¹÷»¼½¾¿ְֱֲֳִֵֶַָֹֺֻּֽ־ֿ׀ׁׂ׃װױײ׳״�������אבגדהוזחטיךכלםמןנסעףפץצקרשת��‎‏�"
      },
      "win1255": "windows1255",
      "cp1255": "windows1255",
      "windows1256": {
        "type": "_sbcs",
        "chars": "€پ‚ƒ„…†‡ˆ‰ٹ‹Œچژڈگ‘’“”•–—ک™ڑ›œ‌‍ں ،¢£¤¥¦§¨©ھ«¬­®¯°±²³´µ¶·¸¹؛»¼½¾؟ہءآأؤإئابةتثجحخدذرزسشصض×طظعغـفقكàلâمنهوçèéêëىيîïًٌٍَôُِ÷ّùْûü‎‏ے"
      },
      "win1256": "windows1256",
      "cp1256": "windows1256",
      "windows1257": {
        "type": "_sbcs",
        "chars": "€�‚�„…†‡�‰�‹�¨ˇ¸�‘’“”•–—�™�›�¯˛� �¢£¤�¦§Ø©Ŗ«¬­®Æ°±²³´µ¶·ø¹ŗ»¼½¾æĄĮĀĆÄÅĘĒČÉŹĖĢĶĪĻŠŃŅÓŌÕÖ×ŲŁŚŪÜŻŽßąįāćäåęēčéźėģķīļšńņóōõö÷ųłśūüżž˙"
      },
      "win1257": "windows1257",
      "cp1257": "windows1257",
      "windows1258": {
        "type": "_sbcs",
        "chars": "€�‚ƒ„…†‡ˆ‰�‹Œ����‘’“”•–—˜™�›œ��Ÿ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂĂÄÅÆÇÈÉÊË̀ÍÎÏĐÑ̉ÓÔƠÖ×ØÙÚÛÜỮßàáâăäåæçèéêë́íîïđṇ̃óôơö÷øùúûüư₫ÿ"
      },
      "win1258": "windows1258",
      "cp1258": "windows1258",
      "iso88591": {
        "type": "_sbcs",
        "chars": " ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿ"
      },
      "cp28591": "iso88591",
      "iso88592": {
        "type": "_sbcs",
        "chars": " Ą˘Ł¤ĽŚ§¨ŠŞŤŹ­ŽŻ°ą˛ł´ľśˇ¸šşťź˝žżŔÁÂĂÄĹĆÇČÉĘËĚÍÎĎĐŃŇÓÔŐÖ×ŘŮÚŰÜÝŢßŕáâăäĺćçčéęëěíîďđńňóôőö÷řůúűüýţ˙"
      },
      "cp28592": "iso88592",
      "iso88593": {
        "type": "_sbcs",
        "chars": " Ħ˘£¤�Ĥ§¨İŞĞĴ­�Ż°ħ²³´µĥ·¸ışğĵ½�żÀÁÂ�ÄĊĈÇÈÉÊËÌÍÎÏ�ÑÒÓÔĠÖ×ĜÙÚÛÜŬŜßàáâ�äċĉçèéêëìíîï�ñòóôġö÷ĝùúûüŭŝ˙"
      },
      "cp28593": "iso88593",
      "iso88594": {
        "type": "_sbcs",
        "chars": " ĄĸŖ¤ĨĻ§¨ŠĒĢŦ­Ž¯°ą˛ŗ´ĩļˇ¸šēģŧŊžŋĀÁÂÃÄÅÆĮČÉĘËĖÍÎĪĐŅŌĶÔÕÖ×ØŲÚÛÜŨŪßāáâãäåæįčéęëėíîīđņōķôõö÷øųúûüũū˙"
      },
      "cp28594": "iso88594",
      "iso88595": {
        "type": "_sbcs",
        "chars": " ЁЂЃЄЅІЇЈЉЊЋЌ­ЎЏАБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя№ёђѓєѕіїјљњћќ§ўџ"
      },
      "cp28595": "iso88595",
      "iso88596": {
        "type": "_sbcs",
        "chars": " ���¤�������،­�������������؛���؟�ءآأؤإئابةتثجحخدذرزسشصضطظعغ�����ـفقكلمنهوىيًٌٍَُِّْ�������������"
      },
      "cp28596": "iso88596",
      "iso88597": {
        "type": "_sbcs",
        "chars": " ‘’£€₯¦§¨©ͺ«¬­�―°±²³΄΅Ά·ΈΉΊ»Ό½ΎΏΐΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡ�ΣΤΥΦΧΨΩΪΫάέήίΰαβγδεζηθικλμνξοπρςστυφχψωϊϋόύώ�"
      },
      "cp28597": "iso88597",
      "iso88598": {
        "type": "_sbcs",
        "chars": " �¢£¤¥¦§¨©×«¬­®¯°±²³´µ¶·¸¹÷»¼½¾��������������������������������‗אבגדהוזחטיךכלםמןנסעףפץצקרשת��‎‏�"
      },
      "cp28598": "iso88598",
      "iso88599": {
        "type": "_sbcs",
        "chars": " ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏĞÑÒÓÔÕÖ×ØÙÚÛÜİŞßàáâãäåæçèéêëìíîïğñòóôõö÷øùúûüışÿ"
      },
      "cp28599": "iso88599",
      "iso885910": {
        "type": "_sbcs",
        "chars": " ĄĒĢĪĨĶ§ĻĐŠŦŽ­ŪŊ°ąēģīĩķ·ļđšŧž―ūŋĀÁÂÃÄÅÆĮČÉĘËĖÍÎÏÐŅŌÓÔÕÖŨØŲÚÛÜÝÞßāáâãäåæįčéęëėíîïðņōóôõöũøųúûüýþĸ"
      },
      "cp28600": "iso885910",
      "iso885911": {
        "type": "_sbcs",
        "chars": " กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรฤลฦวศษสหฬอฮฯะัาำิีึืฺุู����฿เแโใไๅๆ็่้๊๋์ํ๎๏๐๑๒๓๔๕๖๗๘๙๚๛����"
      },
      "cp28601": "iso885911",
      "iso885913": {
        "type": "_sbcs",
        "chars": " ”¢£¤„¦§Ø©Ŗ«¬­®Æ°±²³“µ¶·ø¹ŗ»¼½¾æĄĮĀĆÄÅĘĒČÉŹĖĢĶĪĻŠŃŅÓŌÕÖ×ŲŁŚŪÜŻŽßąįāćäåęēčéźėģķīļšńņóōõö÷ųłśūüżž’"
      },
      "cp28603": "iso885913",
      "iso885914": {
        "type": "_sbcs",
        "chars": " Ḃḃ£ĊċḊ§Ẁ©ẂḋỲ­®ŸḞḟĠġṀṁ¶ṖẁṗẃṠỳẄẅṡÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏŴÑÒÓÔÕÖṪØÙÚÛÜÝŶßàáâãäåæçèéêëìíîïŵñòóôõöṫøùúûüýŷÿ"
      },
      "cp28604": "iso885914",
      "iso885915": {
        "type": "_sbcs",
        "chars": " ¡¢£€¥Š§š©ª«¬­®¯°±²³Žµ¶·ž¹º»ŒœŸ¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿ"
      },
      "cp28605": "iso885915",
      "iso885916": {
        "type": "_sbcs",
        "chars": " ĄąŁ€„Š§š©Ș«Ź­źŻ°±ČłŽ”¶·žčș»ŒœŸżÀÁÂĂÄĆÆÇÈÉÊËÌÍÎÏĐŃÒÓÔŐÖŚŰÙÚÛÜĘȚßàáâăäćæçèéêëìíîïđńòóôőöśűùúûüęțÿ"
      },
      "cp28606": "iso885916",
      "cp437": {
        "type": "_sbcs",
        "chars": "ÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜ¢£¥₧ƒáíóúñÑªº¿⌐¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ "
      },
      "ibm437": "cp437",
      "csibm437": "cp437",
      "cp737": {
        "type": "_sbcs",
        "chars": "ΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡΣΤΥΦΧΨΩαβγδεζηθικλμνξοπρσςτυφχψ░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀ωάέήϊίόύϋώΆΈΉΊΌΎΏ±≥≤ΪΫ÷≈°∙·√ⁿ²■ "
      },
      "ibm737": "cp737",
      "csibm737": "cp737",
      "cp775": {
        "type": "_sbcs",
        "chars": "ĆüéāäģåćłēŖŗīŹÄÅÉæÆōöĢ¢ŚśÖÜø£Ø×¤ĀĪóŻżź”¦©®¬½¼Ł«»░▒▓│┤ĄČĘĖ╣║╗╝ĮŠ┐└┴┬├─┼ŲŪ╚╔╩╦╠═╬Žąčęėįšųūž┘┌█▄▌▐▀ÓßŌŃõÕµńĶķĻļņĒŅ’­±“¾¶§÷„°∙·¹³²■ "
      },
      "ibm775": "cp775",
      "csibm775": "cp775",
      "cp850": {
        "type": "_sbcs",
        "chars": "ÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜø£Ø×ƒáíóúñÑªº¿®¬½¼¡«»░▒▓│┤ÁÂÀ©╣║╗╝¢¥┐└┴┬├─┼ãÃ╚╔╩╦╠═╬¤ðÐÊËÈıÍÎÏ┘┌█▄¦Ì▀ÓßÔÒõÕµþÞÚÛÙýÝ¯´­±‗¾¶§÷¸°¨·¹³²■ "
      },
      "ibm850": "cp850",
      "csibm850": "cp850",
      "cp852": {
        "type": "_sbcs",
        "chars": "ÇüéâäůćçłëŐőîŹÄĆÉĹĺôöĽľŚśÖÜŤťŁ×čáíóúĄąŽžĘę¬źČş«»░▒▓│┤ÁÂĚŞ╣║╗╝Żż┐└┴┬├─┼Ăă╚╔╩╦╠═╬¤đĐĎËďŇÍÎě┘┌█▄ŢŮ▀ÓßÔŃńňŠšŔÚŕŰýÝţ´­˝˛ˇ˘§÷¸°¨˙űŘř■ "
      },
      "ibm852": "cp852",
      "csibm852": "cp852",
      "cp855": {
        "type": "_sbcs",
        "chars": "ђЂѓЃёЁєЄѕЅіІїЇјЈљЉњЊћЋќЌўЎџЏюЮъЪаАбБцЦдДеЕфФгГ«»░▒▓│┤хХиИ╣║╗╝йЙ┐└┴┬├─┼кК╚╔╩╦╠═╬¤лЛмМнНоОп┘┌█▄Пя▀ЯрРсСтТуУжЖвВьЬ№­ыЫзЗшШэЭщЩчЧ§■ "
      },
      "ibm855": "cp855",
      "csibm855": "cp855",
      "cp856": {
        "type": "_sbcs",
        "chars": "אבגדהוזחטיךכלםמןנסעףפץצקרשת�£�×����������®¬½¼�«»░▒▓│┤���©╣║╗╝¢¥┐└┴┬├─┼��╚╔╩╦╠═╬¤���������┘┌█▄¦�▀������µ�������¯´­±‗¾¶§÷¸°¨·¹³²■ "
      },
      "ibm856": "cp856",
      "csibm856": "cp856",
      "cp857": {
        "type": "_sbcs",
        "chars": "ÇüéâäàåçêëèïîıÄÅÉæÆôöòûùİÖÜø£ØŞşáíóúñÑĞğ¿®¬½¼¡«»░▒▓│┤ÁÂÀ©╣║╗╝¢¥┐└┴┬├─┼ãÃ╚╔╩╦╠═╬¤ºªÊËÈ�ÍÎÏ┘┌█▄¦Ì▀ÓßÔÒõÕµ�×ÚÛÙìÿ¯´­±�¾¶§÷¸°¨·¹³²■ "
      },
      "ibm857": "cp857",
      "csibm857": "cp857",
      "cp858": {
        "type": "_sbcs",
        "chars": "ÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜø£Ø×ƒáíóúñÑªº¿®¬½¼¡«»░▒▓│┤ÁÂÀ©╣║╗╝¢¥┐└┴┬├─┼ãÃ╚╔╩╦╠═╬¤ðÐÊËÈ€ÍÎÏ┘┌█▄¦Ì▀ÓßÔÒõÕµþÞÚÛÙýÝ¯´­±‗¾¶§÷¸°¨·¹³²■ "
      },
      "ibm858": "cp858",
      "csibm858": "cp858",
      "cp860": {
        "type": "_sbcs",
        "chars": "ÇüéâãàÁçêÊèÍÔìÃÂÉÀÈôõòÚùÌÕÜ¢£Ù₧ÓáíóúñÑªº¿Ò¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ "
      },
      "ibm860": "cp860",
      "csibm860": "cp860",
      "cp861": {
        "type": "_sbcs",
        "chars": "ÇüéâäàåçêëèÐðÞÄÅÉæÆôöþûÝýÖÜø£Ø₧ƒáíóúÁÍÓÚ¿⌐¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ "
      },
      "ibm861": "cp861",
      "csibm861": "cp861",
      "cp862": {
        "type": "_sbcs",
        "chars": "אבגדהוזחטיךכלםמןנסעףפץצקרשת¢£¥₧ƒáíóúñÑªº¿⌐¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ "
      },
      "ibm862": "cp862",
      "csibm862": "cp862",
      "cp863": {
        "type": "_sbcs",
        "chars": "ÇüéâÂà¶çêëèïî‗À§ÉÈÊôËÏûù¤ÔÜ¢£ÙÛƒ¦´óú¨¸³¯Î⌐¬½¼¾«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ "
      },
      "ibm863": "cp863",
      "csibm863": "cp863",
      "cp864": {
        "type": "_sbcs",
        "chars": "\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000b\f\r\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\"#$٪&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~°·∙√▒─│┼┤┬├┴┐┌└┘β∞φ±½¼≈«»ﻷﻸ��ﻻﻼ� ­ﺂ£¤ﺄ��ﺎﺏﺕﺙ،ﺝﺡﺥ٠١٢٣٤٥٦٧٨٩ﻑ؛ﺱﺵﺹ؟¢ﺀﺁﺃﺅﻊﺋﺍﺑﺓﺗﺛﺟﺣﺧﺩﺫﺭﺯﺳﺷﺻﺿﻁﻅﻋﻏ¦¬÷×ﻉـﻓﻗﻛﻟﻣﻧﻫﻭﻯﻳﺽﻌﻎﻍﻡﹽّﻥﻩﻬﻰﻲﻐﻕﻵﻶﻝﻙﻱ■�"
      },
      "ibm864": "cp864",
      "csibm864": "cp864",
      "cp865": {
        "type": "_sbcs",
        "chars": "ÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜø£Ø₧ƒáíóúñÑªº¿⌐¬½¼¡«¤░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ "
      },
      "ibm865": "cp865",
      "csibm865": "cp865",
      "cp866": {
        "type": "_sbcs",
        "chars": "АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмноп░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀рстуфхцчшщъыьэюяЁёЄєЇїЎў°∙·√№¤■ "
      },
      "ibm866": "cp866",
      "csibm866": "cp866",
      "cp869": {
        "type": "_sbcs",
        "chars": "������Ά�·¬¦‘’Έ―ΉΊΪΌ��ΎΫ©Ώ²³ά£έήίϊΐόύΑΒΓΔΕΖΗ½ΘΙ«»░▒▓│┤ΚΛΜΝ╣║╗╝ΞΟ┐└┴┬├─┼ΠΡ╚╔╩╦╠═╬ΣΤΥΦΧΨΩαβγ┘┌█▄δε▀ζηθικλμνξοπρσςτ΄­±υφχ§ψ΅°¨ωϋΰώ■ "
      },
      "ibm869": "cp869",
      "csibm869": "cp869",
      "cp922": {
        "type": "_sbcs",
        "chars": " ¡¢£¤¥¦§¨©ª«¬­®‾°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏŠÑÒÓÔÕÖ×ØÙÚÛÜÝŽßàáâãäåæçèéêëìíîïšñòóôõö÷øùúûüýžÿ"
      },
      "ibm922": "cp922",
      "csibm922": "cp922",
      "cp1046": {
        "type": "_sbcs",
        "chars": "ﺈ×÷ﹱ■│─┐┌└┘ﹹﹻﹽﹿﹷﺊﻰﻳﻲﻎﻏﻐﻶﻸﻺﻼ ¤ﺋﺑﺗﺛﺟﺣ،­ﺧﺳ٠١٢٣٤٥٦٧٨٩ﺷ؛ﺻﺿﻊ؟ﻋءآأؤإئابةتثجحخدذرزسشصضطﻇعغﻌﺂﺄﺎﻓـفقكلمنهوىيًٌٍَُِّْﻗﻛﻟﻵﻷﻹﻻﻣﻧﻬﻩ�"
      },
      "ibm1046": "cp1046",
      "csibm1046": "cp1046",
      "cp1124": {
        "type": "_sbcs",
        "chars": " ЁЂҐЄЅІЇЈЉЊЋЌ­ЎЏАБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя№ёђґєѕіїјљњћќ§ўџ"
      },
      "ibm1124": "cp1124",
      "csibm1124": "cp1124",
      "cp1125": {
        "type": "_sbcs",
        "chars": "АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмноп░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀рстуфхцчшщъыьэюяЁёҐґЄєІіЇї·√№¤■ "
      },
      "ibm1125": "cp1125",
      "csibm1125": "cp1125",
      "cp1129": {
        "type": "_sbcs",
        "chars": " ¡¢£¤¥¦§œ©ª«¬­®¯°±²³Ÿµ¶·Œ¹º»¼½¾¿ÀÁÂĂÄÅÆÇÈÉÊË̀ÍÎÏĐÑ̉ÓÔƠÖ×ØÙÚÛÜỮßàáâăäåæçèéêë́íîïđṇ̃óôơö÷øùúûüư₫ÿ"
      },
      "ibm1129": "cp1129",
      "csibm1129": "cp1129",
      "cp1133": {
        "type": "_sbcs",
        "chars": " ກຂຄງຈສຊຍດຕຖທນບປຜຝພຟມຢຣລວຫອຮ���ຯະາຳິີຶືຸູຼັົຽ���ເແໂໃໄ່້໊໋໌ໍໆ�ໜໝ₭����������������໐໑໒໓໔໕໖໗໘໙��¢¬¦�"
      },
      "ibm1133": "cp1133",
      "csibm1133": "cp1133",
      "cp1161": {
        "type": "_sbcs",
        "chars": "��������������������������������่กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรฤลฦวศษสหฬอฮฯะัาำิีึืฺุู้๊๋€฿เแโใไๅๆ็่้๊๋์ํ๎๏๐๑๒๓๔๕๖๗๘๙๚๛¢¬¦ "
      },
      "ibm1161": "cp1161",
      "csibm1161": "cp1161",
      "cp1162": {
        "type": "_sbcs",
        "chars": "€…‘’“”•–— กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรฤลฦวศษสหฬอฮฯะัาำิีึืฺุู����฿เแโใไๅๆ็่้๊๋์ํ๎๏๐๑๒๓๔๕๖๗๘๙๚๛����"
      },
      "ibm1162": "cp1162",
      "csibm1162": "cp1162",
      "cp1163": {
        "type": "_sbcs",
        "chars": " ¡¢£€¥¦§œ©ª«¬­®¯°±²³Ÿµ¶·Œ¹º»¼½¾¿ÀÁÂĂÄÅÆÇÈÉÊË̀ÍÎÏĐÑ̉ÓÔƠÖ×ØÙÚÛÜỮßàáâăäåæçèéêë́íîïđṇ̃óôơö÷øùúûüư₫ÿ"
      },
      "ibm1163": "cp1163",
      "csibm1163": "cp1163",
      "maccroatian": {
        "type": "_sbcs",
        "chars": "ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®Š™´¨≠ŽØ∞±≤≥∆µ∂∑∏š∫ªºΩžø¿¡¬√ƒ≈Ć«Č… ÀÃÕŒœĐ—“”‘’÷◊�©⁄¤‹›Æ»–·‚„‰ÂćÁčÈÍÎÏÌÓÔđÒÚÛÙıˆ˜¯πË˚¸Êæˇ"
      },
      "maccyrillic": {
        "type": "_sbcs",
        "chars": "АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ†°¢£§•¶І®©™Ђђ≠Ѓѓ∞±≤≥іµ∂ЈЄєЇїЉљЊњјЅ¬√ƒ≈∆«»… ЋћЌќѕ–—“”‘’÷„ЎўЏџ№Ёёяабвгдежзийклмнопрстуфхцчшщъыьэю¤"
      },
      "macgreek": {
        "type": "_sbcs",
        "chars": "Ä¹²É³ÖÜ΅àâä΄¨çéèêë£™îï•½‰ôö¦­ùûü†ΓΔΘΛΞΠß®©ΣΪ§≠°·Α±≤≥¥ΒΕΖΗΙΚΜΦΫΨΩάΝ¬ΟΡ≈Τ«»… ΥΧΆΈœ–―“”‘’÷ΉΊΌΎέήίόΏύαβψδεφγηιξκλμνοπώρστθωςχυζϊϋΐΰ�"
      },
      "maciceland": {
        "type": "_sbcs",
        "chars": "ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûüÝ°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄¤ÐðÞþý·‚„‰ÂÊÁËÈÍÎÏÌÓÔ�ÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ"
      },
      "macroman": {
        "type": "_sbcs",
        "chars": "ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄¤‹›ﬁﬂ‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔ�ÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ"
      },
      "macromania": {
        "type": "_sbcs",
        "chars": "ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ĂŞ∞±≤≥¥µ∂∑∏π∫ªºΩăş¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄¤‹›Ţţ‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔ�ÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ"
      },
      "macthai": {
        "type": "_sbcs",
        "chars": "«»…“”�•‘’� กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรฤลฦวศษสหฬอฮฯะัาำิีึืฺุู﻿​–—฿เแโใไๅๆ็่้๊๋์ํ™๏๐๑๒๓๔๕๖๗๘๙®©����"
      },
      "macturkish": {
        "type": "_sbcs",
        "chars": "ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸĞğİıŞş‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔ�ÒÚÛÙ�ˆ˜¯˘˙˚¸˝˛ˇ"
      },
      "macukraine": {
        "type": "_sbcs",
        "chars": "АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ†°Ґ£§•¶І®©™Ђђ≠Ѓѓ∞±≤≥іµґЈЄєЇїЉљЊњјЅ¬√ƒ≈∆«»… ЋћЌќѕ–—“”‘’÷„ЎўЏџ№Ёёяабвгдежзийклмнопрстуфхцчшщъыьэю¤"
      },
      "koi8r": {
        "type": "_sbcs",
        "chars": "─│┌┐└┘├┤┬┴┼▀▄█▌▐░▒▓⌠■∙√≈≤≥ ⌡°²·÷═║╒ё╓╔╕╖╗╘╙╚╛╜╝╞╟╠╡Ё╢╣╤╥╦╧╨╩╪╫╬©юабцдефгхийклмнопярстужвьызшэщчъЮАБЦДЕФГХИЙКЛМНОПЯРСТУЖВЬЫЗШЭЩЧЪ"
      },
      "koi8u": {
        "type": "_sbcs",
        "chars": "─│┌┐└┘├┤┬┴┼▀▄█▌▐░▒▓⌠■∙√≈≤≥ ⌡°²·÷═║╒ёє╔ії╗╘╙╚╛ґ╝╞╟╠╡ЁЄ╣ІЇ╦╧╨╩╪Ґ╬©юабцдефгхийклмнопярстужвьызшэщчъЮАБЦДЕФГХИЙКЛМНОПЯРСТУЖВЬЫЗШЭЩЧЪ"
      },
      "koi8ru": {
        "type": "_sbcs",
        "chars": "─│┌┐└┘├┤┬┴┼▀▄█▌▐░▒▓⌠■∙√≈≤≥ ⌡°²·÷═║╒ёє╔ії╗╘╙╚╛ґў╞╟╠╡ЁЄ╣ІЇ╦╧╨╩╪ҐЎ©юабцдефгхийклмнопярстужвьызшэщчъЮАБЦДЕФГХИЙКЛМНОПЯРСТУЖВЬЫЗШЭЩЧЪ"
      },
      "koi8t": {
        "type": "_sbcs",
        "chars": "қғ‚Ғ„…†‡�‰ҳ‹ҲҷҶ�Қ‘’“”•–—�™�›�����ӯӮё¤ӣ¦§���«¬­®�°±²Ё�Ӣ¶·�№�»���©юабцдефгхийклмнопярстужвьызшэщчъЮАБЦДЕФГХИЙКЛМНОПЯРСТУЖВЬЫЗШЭЩЧЪ"
      },
      "armscii8": {
        "type": "_sbcs",
        "chars": " �և։)(»«—.՝,-֊…՜՛՞ԱաԲբԳգԴդԵեԶզԷէԸըԹթԺժԻիԼլԽխԾծԿկՀհՁձՂղՃճՄմՅյՆնՇշՈոՉչՊպՋջՌռՍսՎվՏտՐրՑցՒւՓփՔքՕօՖֆ՚�"
      },
      "rk1048": {
        "type": "_sbcs",
        "chars": "ЂЃ‚ѓ„…†‡€‰Љ‹ЊҚҺЏђ‘’“”•–—�™љ›њқһџ ҰұӘ¤Ө¦§Ё©Ғ«¬­®Ү°±Ііөµ¶·ё№ғ»әҢңүАБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя"
      },
      "tcvn": {
        "type": "_sbcs",
        "chars": "\u0000ÚỤ\u0003ỪỬỮ\u0007\b\t\n\u000b\f\r\u000e\u000f\u0010ỨỰỲỶỸÝỴ\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~ÀẢÃÁẠẶẬÈẺẼÉẸỆÌỈĨÍỊÒỎÕÓỌỘỜỞỠỚỢÙỦŨ ĂÂÊÔƠƯĐăâêôơưđẶ̀̀̉̃́àảãáạẲằẳẵắẴẮẦẨẪẤỀặầẩẫấậèỂẻẽéẹềểễếệìỉỄẾỒĩíịòỔỏõóọồổỗốộờởỡớợùỖủũúụừửữứựỳỷỹýỵỐ"
      },
      "georgianacademy": {
        "type": "_sbcs",
        "chars": "‚ƒ„…†‡ˆ‰Š‹Œ‘’“”•–—˜™š›œŸ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿აბგდევზთიკლმნოპჟრსტუფქღყშჩცძწჭხჯჰჱჲჳჴჵჶçèéêëìíîïðñòóôõö÷øùúûüýþÿ"
      },
      "georgianps": {
        "type": "_sbcs",
        "chars": "‚ƒ„…†‡ˆ‰Š‹Œ‘’“”•–—˜™š›œŸ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿აბგდევზჱთიკლმნჲოპჟრსტჳუფქღყშჩცძწჭხჴჯჰჵæçèéêëìíîïðñòóôõö÷øùúûüýþÿ"
      },
      "pt154": {
        "type": "_sbcs",
        "chars": "ҖҒӮғ„…ҶҮҲүҠӢҢҚҺҸҗ‘’“”•–—ҳҷҡӣңқһҹ ЎўЈӨҘҰ§Ё©Ә«¬ӯ®Ҝ°ұІіҙө¶·ё№ә»јҪҫҝАБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя"
      },
      "viscii": {
        "type": "_sbcs",
        "chars": "\u0000\u0001Ẳ\u0003\u0004ẴẪ\u0007\b\t\n\u000b\f\r\u000e\u000f\u0010\u0011\u0012\u0013Ỷ\u0015\u0016\u0017\u0018Ỹ\u001a\u001b\u001c\u001dỴ\u001f !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~ẠẮẰẶẤẦẨẬẼẸẾỀỂỄỆỐỒỔỖỘỢỚỜỞỊỎỌỈỦŨỤỲÕắằặấầẩậẽẹếềểễệốồổỗỠƠộờởịỰỨỪỬơớƯÀÁÂÃẢĂẳẵÈÉÊẺÌÍĨỳĐứÒÓÔạỷừửÙÚỹỵÝỡưàáâãảăữẫèéêẻìíĩỉđựòóôõỏọụùúũủýợỮ"
      },
      "iso646cn": {
        "type": "_sbcs",
        "chars": "\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000b\f\r\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\"#¥%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}‾��������������������������������������������������������������������������������������������������������������������������������"
      },
      "iso646jp": {
        "type": "_sbcs",
        "chars": "\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000b\f\r\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[¥]^_`abcdefghijklmnopqrstuvwxyz{|}‾��������������������������������������������������������������������������������������������������������������������������������"
      },
      "hproman8": {
        "type": "_sbcs",
        "chars": " ÀÂÈÊËÎÏ´ˋˆ¨˜ÙÛ₤¯Ýý°ÇçÑñ¡¿¤£¥§ƒ¢âêôûáéóúàèòùäëöüÅîØÆåíøæÄìÖÜÉïßÔÁÃãÐðÍÌÓÒÕõŠšÚŸÿÞþ·µ¶¾—¼½ªº«■»±�"
      },
      "macintosh": {
        "type": "_sbcs",
        "chars": "ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄¤‹›ﬁﬂ‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔ�ÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ"
      },
      "ascii": {
        "type": "_sbcs",
        "chars": "��������������������������������������������������������������������������������������������������������������������������������"
      },
      "tis620": {
        "type": "_sbcs",
        "chars": "���������������������������������กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรฤลฦวศษสหฬอฮฯะัาำิีึืฺุู����฿เแโใไๅๆ็่้๊๋์ํ๎๏๐๑๒๓๔๕๖๗๘๙๚๛����"
      }
    };

    var dbcsCodec$1 = {};

    var Buffer$c = safer_1$1.Buffer;

    // Multibyte codec. In this scheme, a character is represented by 1 or more bytes.
    // Our codec supports UTF-16 surrogates, extensions for GB18030 and unicode sequences.
    // To save memory and loading time, we read table files only when requested.

    dbcsCodec$1._dbcs = DBCSCodec$1;

    var UNASSIGNED$1 = -1,
        GB18030_CODE$1 = -2,
        SEQ_START$1  = -10,
        NODE_START$1 = -1000,
        UNASSIGNED_NODE$1 = new Array(0x100),
        DEF_CHAR$1 = -1;

    for (var i$2 = 0; i$2 < 0x100; i$2++)
        UNASSIGNED_NODE$1[i$2] = UNASSIGNED$1;


    // Class DBCSCodec reads and initializes mapping tables.
    function DBCSCodec$1(codecOptions, iconv) {
        this.encodingName = codecOptions.encodingName;
        if (!codecOptions)
            throw new Error("DBCS codec is called without the data.")
        if (!codecOptions.table)
            throw new Error("Encoding '" + this.encodingName + "' has no data.");

        // Load tables.
        var mappingTable = codecOptions.table();


        // Decode tables: MBCS -> Unicode.

        // decodeTables is a trie, encoded as an array of arrays of integers. Internal arrays are trie nodes and all have len = 256.
        // Trie root is decodeTables[0].
        // Values: >=  0 -> unicode character code. can be > 0xFFFF
        //         == UNASSIGNED -> unknown/unassigned sequence.
        //         == GB18030_CODE -> this is the end of a GB18030 4-byte sequence.
        //         <= NODE_START -> index of the next node in our trie to process next byte.
        //         <= SEQ_START  -> index of the start of a character code sequence, in decodeTableSeq.
        this.decodeTables = [];
        this.decodeTables[0] = UNASSIGNED_NODE$1.slice(0); // Create root node.

        // Sometimes a MBCS char corresponds to a sequence of unicode chars. We store them as arrays of integers here. 
        this.decodeTableSeq = [];

        // Actual mapping tables consist of chunks. Use them to fill up decode tables.
        for (var i = 0; i < mappingTable.length; i++)
            this._addDecodeChunk(mappingTable[i]);

        this.defaultCharUnicode = iconv.defaultCharUnicode;

        
        // Encode tables: Unicode -> DBCS.

        // `encodeTable` is array mapping from unicode char to encoded char. All its values are integers for performance.
        // Because it can be sparse, it is represented as array of buckets by 256 chars each. Bucket can be null.
        // Values: >=  0 -> it is a normal char. Write the value (if <=256 then 1 byte, if <=65536 then 2 bytes, etc.).
        //         == UNASSIGNED -> no conversion found. Output a default char.
        //         <= SEQ_START  -> it's an index in encodeTableSeq, see below. The character starts a sequence.
        this.encodeTable = [];
        
        // `encodeTableSeq` is used when a sequence of unicode characters is encoded as a single code. We use a tree of
        // objects where keys correspond to characters in sequence and leafs are the encoded dbcs values. A special DEF_CHAR key
        // means end of sequence (needed when one sequence is a strict subsequence of another).
        // Objects are kept separately from encodeTable to increase performance.
        this.encodeTableSeq = [];

        // Some chars can be decoded, but need not be encoded.
        var skipEncodeChars = {};
        if (codecOptions.encodeSkipVals)
            for (var i = 0; i < codecOptions.encodeSkipVals.length; i++) {
                var val = codecOptions.encodeSkipVals[i];
                if (typeof val === 'number')
                    skipEncodeChars[val] = true;
                else
                    for (var j = val.from; j <= val.to; j++)
                        skipEncodeChars[j] = true;
            }
            
        // Use decode trie to recursively fill out encode tables.
        this._fillEncodeTable(0, 0, skipEncodeChars);

        // Add more encoding pairs when needed.
        if (codecOptions.encodeAdd) {
            for (var uChar in codecOptions.encodeAdd)
                if (Object.prototype.hasOwnProperty.call(codecOptions.encodeAdd, uChar))
                    this._setEncodeChar(uChar.charCodeAt(0), codecOptions.encodeAdd[uChar]);
        }

        this.defCharSB  = this.encodeTable[0][iconv.defaultCharSingleByte.charCodeAt(0)];
        if (this.defCharSB === UNASSIGNED$1) this.defCharSB = this.encodeTable[0]['?'];
        if (this.defCharSB === UNASSIGNED$1) this.defCharSB = "?".charCodeAt(0);


        // Load & create GB18030 tables when needed.
        if (typeof codecOptions.gb18030 === 'function') {
            this.gb18030 = codecOptions.gb18030(); // Load GB18030 ranges.

            // Add GB18030 decode tables.
            var thirdByteNodeIdx = this.decodeTables.length;
            var thirdByteNode = this.decodeTables[thirdByteNodeIdx] = UNASSIGNED_NODE$1.slice(0);

            var fourthByteNodeIdx = this.decodeTables.length;
            var fourthByteNode = this.decodeTables[fourthByteNodeIdx] = UNASSIGNED_NODE$1.slice(0);

            for (var i = 0x81; i <= 0xFE; i++) {
                var secondByteNodeIdx = NODE_START$1 - this.decodeTables[0][i];
                var secondByteNode = this.decodeTables[secondByteNodeIdx];
                for (var j = 0x30; j <= 0x39; j++)
                    secondByteNode[j] = NODE_START$1 - thirdByteNodeIdx;
            }
            for (var i = 0x81; i <= 0xFE; i++)
                thirdByteNode[i] = NODE_START$1 - fourthByteNodeIdx;
            for (var i = 0x30; i <= 0x39; i++)
                fourthByteNode[i] = GB18030_CODE$1;
        }        
    }

    DBCSCodec$1.prototype.encoder = DBCSEncoder$1;
    DBCSCodec$1.prototype.decoder = DBCSDecoder$1;

    // Decoder helpers
    DBCSCodec$1.prototype._getDecodeTrieNode = function(addr) {
        var bytes = [];
        for (; addr > 0; addr >>= 8)
            bytes.push(addr & 0xFF);
        if (bytes.length == 0)
            bytes.push(0);

        var node = this.decodeTables[0];
        for (var i = bytes.length-1; i > 0; i--) { // Traverse nodes deeper into the trie.
            var val = node[bytes[i]];

            if (val == UNASSIGNED$1) { // Create new node.
                node[bytes[i]] = NODE_START$1 - this.decodeTables.length;
                this.decodeTables.push(node = UNASSIGNED_NODE$1.slice(0));
            }
            else if (val <= NODE_START$1) { // Existing node.
                node = this.decodeTables[NODE_START$1 - val];
            }
            else
                throw new Error("Overwrite byte in " + this.encodingName + ", addr: " + addr.toString(16));
        }
        return node;
    };


    DBCSCodec$1.prototype._addDecodeChunk = function(chunk) {
        // First element of chunk is the hex mbcs code where we start.
        var curAddr = parseInt(chunk[0], 16);

        // Choose the decoding node where we'll write our chars.
        var writeTable = this._getDecodeTrieNode(curAddr);
        curAddr = curAddr & 0xFF;

        // Write all other elements of the chunk to the table.
        for (var k = 1; k < chunk.length; k++) {
            var part = chunk[k];
            if (typeof part === "string") { // String, write as-is.
                for (var l = 0; l < part.length;) {
                    var code = part.charCodeAt(l++);
                    if (0xD800 <= code && code < 0xDC00) { // Decode surrogate
                        var codeTrail = part.charCodeAt(l++);
                        if (0xDC00 <= codeTrail && codeTrail < 0xE000)
                            writeTable[curAddr++] = 0x10000 + (code - 0xD800) * 0x400 + (codeTrail - 0xDC00);
                        else
                            throw new Error("Incorrect surrogate pair in "  + this.encodingName + " at chunk " + chunk[0]);
                    }
                    else if (0x0FF0 < code && code <= 0x0FFF) { // Character sequence (our own encoding used)
                        var len = 0xFFF - code + 2;
                        var seq = [];
                        for (var m = 0; m < len; m++)
                            seq.push(part.charCodeAt(l++)); // Simple variation: don't support surrogates or subsequences in seq.

                        writeTable[curAddr++] = SEQ_START$1 - this.decodeTableSeq.length;
                        this.decodeTableSeq.push(seq);
                    }
                    else
                        writeTable[curAddr++] = code; // Basic char
                }
            } 
            else if (typeof part === "number") { // Integer, meaning increasing sequence starting with prev character.
                var charCode = writeTable[curAddr - 1] + 1;
                for (var l = 0; l < part; l++)
                    writeTable[curAddr++] = charCode++;
            }
            else
                throw new Error("Incorrect type '" + typeof part + "' given in "  + this.encodingName + " at chunk " + chunk[0]);
        }
        if (curAddr > 0xFF)
            throw new Error("Incorrect chunk in "  + this.encodingName + " at addr " + chunk[0] + ": too long" + curAddr);
    };

    // Encoder helpers
    DBCSCodec$1.prototype._getEncodeBucket = function(uCode) {
        var high = uCode >> 8; // This could be > 0xFF because of astral characters.
        if (this.encodeTable[high] === undefined)
            this.encodeTable[high] = UNASSIGNED_NODE$1.slice(0); // Create bucket on demand.
        return this.encodeTable[high];
    };

    DBCSCodec$1.prototype._setEncodeChar = function(uCode, dbcsCode) {
        var bucket = this._getEncodeBucket(uCode);
        var low = uCode & 0xFF;
        if (bucket[low] <= SEQ_START$1)
            this.encodeTableSeq[SEQ_START$1-bucket[low]][DEF_CHAR$1] = dbcsCode; // There's already a sequence, set a single-char subsequence of it.
        else if (bucket[low] == UNASSIGNED$1)
            bucket[low] = dbcsCode;
    };

    DBCSCodec$1.prototype._setEncodeSequence = function(seq, dbcsCode) {
        
        // Get the root of character tree according to first character of the sequence.
        var uCode = seq[0];
        var bucket = this._getEncodeBucket(uCode);
        var low = uCode & 0xFF;

        var node;
        if (bucket[low] <= SEQ_START$1) {
            // There's already a sequence with  - use it.
            node = this.encodeTableSeq[SEQ_START$1-bucket[low]];
        }
        else {
            // There was no sequence object - allocate a new one.
            node = {};
            if (bucket[low] !== UNASSIGNED$1) node[DEF_CHAR$1] = bucket[low]; // If a char was set before - make it a single-char subsequence.
            bucket[low] = SEQ_START$1 - this.encodeTableSeq.length;
            this.encodeTableSeq.push(node);
        }

        // Traverse the character tree, allocating new nodes as needed.
        for (var j = 1; j < seq.length-1; j++) {
            var oldVal = node[uCode];
            if (typeof oldVal === 'object')
                node = oldVal;
            else {
                node = node[uCode] = {};
                if (oldVal !== undefined)
                    node[DEF_CHAR$1] = oldVal;
            }
        }

        // Set the leaf to given dbcsCode.
        uCode = seq[seq.length-1];
        node[uCode] = dbcsCode;
    };

    DBCSCodec$1.prototype._fillEncodeTable = function(nodeIdx, prefix, skipEncodeChars) {
        var node = this.decodeTables[nodeIdx];
        for (var i = 0; i < 0x100; i++) {
            var uCode = node[i];
            var mbCode = prefix + i;
            if (skipEncodeChars[mbCode])
                continue;

            if (uCode >= 0)
                this._setEncodeChar(uCode, mbCode);
            else if (uCode <= NODE_START$1)
                this._fillEncodeTable(NODE_START$1 - uCode, mbCode << 8, skipEncodeChars);
            else if (uCode <= SEQ_START$1)
                this._setEncodeSequence(this.decodeTableSeq[SEQ_START$1 - uCode], mbCode);
        }
    };



    // == Encoder ==================================================================

    function DBCSEncoder$1(options, codec) {
        // Encoder state
        this.leadSurrogate = -1;
        this.seqObj = undefined;
        
        // Static data
        this.encodeTable = codec.encodeTable;
        this.encodeTableSeq = codec.encodeTableSeq;
        this.defaultCharSingleByte = codec.defCharSB;
        this.gb18030 = codec.gb18030;
    }

    DBCSEncoder$1.prototype.write = function(str) {
        var newBuf = Buffer$c.alloc(str.length * (this.gb18030 ? 4 : 3)),
            leadSurrogate = this.leadSurrogate,
            seqObj = this.seqObj, nextChar = -1,
            i = 0, j = 0;

        while (true) {
            // 0. Get next character.
            if (nextChar === -1) {
                if (i == str.length) break;
                var uCode = str.charCodeAt(i++);
            }
            else {
                var uCode = nextChar;
                nextChar = -1;    
            }

            // 1. Handle surrogates.
            if (0xD800 <= uCode && uCode < 0xE000) { // Char is one of surrogates.
                if (uCode < 0xDC00) { // We've got lead surrogate.
                    if (leadSurrogate === -1) {
                        leadSurrogate = uCode;
                        continue;
                    } else {
                        leadSurrogate = uCode;
                        // Double lead surrogate found.
                        uCode = UNASSIGNED$1;
                    }
                } else { // We've got trail surrogate.
                    if (leadSurrogate !== -1) {
                        uCode = 0x10000 + (leadSurrogate - 0xD800) * 0x400 + (uCode - 0xDC00);
                        leadSurrogate = -1;
                    } else {
                        // Incomplete surrogate pair - only trail surrogate found.
                        uCode = UNASSIGNED$1;
                    }
                    
                }
            }
            else if (leadSurrogate !== -1) {
                // Incomplete surrogate pair - only lead surrogate found.
                nextChar = uCode; uCode = UNASSIGNED$1; // Write an error, then current char.
                leadSurrogate = -1;
            }

            // 2. Convert uCode character.
            var dbcsCode = UNASSIGNED$1;
            if (seqObj !== undefined && uCode != UNASSIGNED$1) { // We are in the middle of the sequence
                var resCode = seqObj[uCode];
                if (typeof resCode === 'object') { // Sequence continues.
                    seqObj = resCode;
                    continue;

                } else if (typeof resCode == 'number') { // Sequence finished. Write it.
                    dbcsCode = resCode;

                } else if (resCode == undefined) { // Current character is not part of the sequence.

                    // Try default character for this sequence
                    resCode = seqObj[DEF_CHAR$1];
                    if (resCode !== undefined) {
                        dbcsCode = resCode; // Found. Write it.
                        nextChar = uCode; // Current character will be written too in the next iteration.

                    }
                }
                seqObj = undefined;
            }
            else if (uCode >= 0) {  // Regular character
                var subtable = this.encodeTable[uCode >> 8];
                if (subtable !== undefined)
                    dbcsCode = subtable[uCode & 0xFF];
                
                if (dbcsCode <= SEQ_START$1) { // Sequence start
                    seqObj = this.encodeTableSeq[SEQ_START$1-dbcsCode];
                    continue;
                }

                if (dbcsCode == UNASSIGNED$1 && this.gb18030) {
                    // Use GB18030 algorithm to find character(s) to write.
                    var idx = findIdx$1(this.gb18030.uChars, uCode);
                    if (idx != -1) {
                        var dbcsCode = this.gb18030.gbChars[idx] + (uCode - this.gb18030.uChars[idx]);
                        newBuf[j++] = 0x81 + Math.floor(dbcsCode / 12600); dbcsCode = dbcsCode % 12600;
                        newBuf[j++] = 0x30 + Math.floor(dbcsCode / 1260); dbcsCode = dbcsCode % 1260;
                        newBuf[j++] = 0x81 + Math.floor(dbcsCode / 10); dbcsCode = dbcsCode % 10;
                        newBuf[j++] = 0x30 + dbcsCode;
                        continue;
                    }
                }
            }

            // 3. Write dbcsCode character.
            if (dbcsCode === UNASSIGNED$1)
                dbcsCode = this.defaultCharSingleByte;
            
            if (dbcsCode < 0x100) {
                newBuf[j++] = dbcsCode;
            }
            else if (dbcsCode < 0x10000) {
                newBuf[j++] = dbcsCode >> 8;   // high byte
                newBuf[j++] = dbcsCode & 0xFF; // low byte
            }
            else {
                newBuf[j++] = dbcsCode >> 16;
                newBuf[j++] = (dbcsCode >> 8) & 0xFF;
                newBuf[j++] = dbcsCode & 0xFF;
            }
        }

        this.seqObj = seqObj;
        this.leadSurrogate = leadSurrogate;
        return newBuf.slice(0, j);
    };

    DBCSEncoder$1.prototype.end = function() {
        if (this.leadSurrogate === -1 && this.seqObj === undefined)
            return; // All clean. Most often case.

        var newBuf = Buffer$c.alloc(10), j = 0;

        if (this.seqObj) { // We're in the sequence.
            var dbcsCode = this.seqObj[DEF_CHAR$1];
            if (dbcsCode !== undefined) { // Write beginning of the sequence.
                if (dbcsCode < 0x100) {
                    newBuf[j++] = dbcsCode;
                }
                else {
                    newBuf[j++] = dbcsCode >> 8;   // high byte
                    newBuf[j++] = dbcsCode & 0xFF; // low byte
                }
            }
            this.seqObj = undefined;
        }

        if (this.leadSurrogate !== -1) {
            // Incomplete surrogate pair - only lead surrogate found.
            newBuf[j++] = this.defaultCharSingleByte;
            this.leadSurrogate = -1;
        }
        
        return newBuf.slice(0, j);
    };

    // Export for testing
    DBCSEncoder$1.prototype.findIdx = findIdx$1;


    // == Decoder ==================================================================

    function DBCSDecoder$1(options, codec) {
        // Decoder state
        this.nodeIdx = 0;
        this.prevBuf = Buffer$c.alloc(0);

        // Static data
        this.decodeTables = codec.decodeTables;
        this.decodeTableSeq = codec.decodeTableSeq;
        this.defaultCharUnicode = codec.defaultCharUnicode;
        this.gb18030 = codec.gb18030;
    }

    DBCSDecoder$1.prototype.write = function(buf) {
        var newBuf = Buffer$c.alloc(buf.length*2),
            nodeIdx = this.nodeIdx, 
            prevBuf = this.prevBuf, prevBufOffset = this.prevBuf.length,
            seqStart = -this.prevBuf.length, // idx of the start of current parsed sequence.
            uCode;

        if (prevBufOffset > 0) // Make prev buf overlap a little to make it easier to slice later.
            prevBuf = Buffer$c.concat([prevBuf, buf.slice(0, 10)]);
        
        for (var i = 0, j = 0; i < buf.length; i++) {
            var curByte = (i >= 0) ? buf[i] : prevBuf[i + prevBufOffset];

            // Lookup in current trie node.
            var uCode = this.decodeTables[nodeIdx][curByte];

            if (uCode >= 0) ;
            else if (uCode === UNASSIGNED$1) { // Unknown char.
                // TODO: Callback with seq.
                //var curSeq = (seqStart >= 0) ? buf.slice(seqStart, i+1) : prevBuf.slice(seqStart + prevBufOffset, i+1 + prevBufOffset);
                i = seqStart; // Try to parse again, after skipping first byte of the sequence ('i' will be incremented by 'for' cycle).
                uCode = this.defaultCharUnicode.charCodeAt(0);
            }
            else if (uCode === GB18030_CODE$1) {
                var curSeq = (seqStart >= 0) ? buf.slice(seqStart, i+1) : prevBuf.slice(seqStart + prevBufOffset, i+1 + prevBufOffset);
                var ptr = (curSeq[0]-0x81)*12600 + (curSeq[1]-0x30)*1260 + (curSeq[2]-0x81)*10 + (curSeq[3]-0x30);
                var idx = findIdx$1(this.gb18030.gbChars, ptr);
                uCode = this.gb18030.uChars[idx] + ptr - this.gb18030.gbChars[idx];
            }
            else if (uCode <= NODE_START$1) { // Go to next trie node.
                nodeIdx = NODE_START$1 - uCode;
                continue;
            }
            else if (uCode <= SEQ_START$1) { // Output a sequence of chars.
                var seq = this.decodeTableSeq[SEQ_START$1 - uCode];
                for (var k = 0; k < seq.length - 1; k++) {
                    uCode = seq[k];
                    newBuf[j++] = uCode & 0xFF;
                    newBuf[j++] = uCode >> 8;
                }
                uCode = seq[seq.length-1];
            }
            else
                throw new Error("iconv-lite internal error: invalid decoding table value " + uCode + " at " + nodeIdx + "/" + curByte);

            // Write the character to buffer, handling higher planes using surrogate pair.
            if (uCode > 0xFFFF) { 
                uCode -= 0x10000;
                var uCodeLead = 0xD800 + Math.floor(uCode / 0x400);
                newBuf[j++] = uCodeLead & 0xFF;
                newBuf[j++] = uCodeLead >> 8;

                uCode = 0xDC00 + uCode % 0x400;
            }
            newBuf[j++] = uCode & 0xFF;
            newBuf[j++] = uCode >> 8;

            // Reset trie node.
            nodeIdx = 0; seqStart = i+1;
        }

        this.nodeIdx = nodeIdx;
        this.prevBuf = (seqStart >= 0) ? buf.slice(seqStart) : prevBuf.slice(seqStart + prevBufOffset);
        return newBuf.slice(0, j).toString('ucs2');
    };

    DBCSDecoder$1.prototype.end = function() {
        var ret = '';

        // Try to parse all remaining chars.
        while (this.prevBuf.length > 0) {
            // Skip 1 character in the buffer.
            ret += this.defaultCharUnicode;
            var buf = this.prevBuf.slice(1);

            // Parse remaining as usual.
            this.prevBuf = Buffer$c.alloc(0);
            this.nodeIdx = 0;
            if (buf.length > 0)
                ret += this.write(buf);
        }

        this.nodeIdx = 0;
        return ret;
    };

    // Binary search for GB18030. Returns largest i such that table[i] <= val.
    function findIdx$1(table, val) {
        if (table[0] > val)
            return -1;

        var l = 0, r = table.length;
        while (l < r-1) { // always table[l] <= val < table[r]
            var mid = l + Math.floor((r-l+1)/2);
            if (table[mid] <= val)
                l = mid;
            else
                r = mid;
        }
        return l;
    }

    var require$$0$2 = [
    	[
    		"0",
    		"\u0000",
    		128
    	],
    	[
    		"a1",
    		"｡",
    		62
    	],
    	[
    		"8140",
    		"　、。，．・：；？！゛゜´｀¨＾￣＿ヽヾゝゞ〃仝々〆〇ー―‐／＼～∥｜…‥‘’“”（）〔〕［］｛｝〈",
    		9,
    		"＋－±×"
    	],
    	[
    		"8180",
    		"÷＝≠＜＞≦≧∞∴♂♀°′″℃￥＄￠￡％＃＆＊＠§☆★○●◎◇◆□■△▲▽▼※〒→←↑↓〓"
    	],
    	[
    		"81b8",
    		"∈∋⊆⊇⊂⊃∪∩"
    	],
    	[
    		"81c8",
    		"∧∨￢⇒⇔∀∃"
    	],
    	[
    		"81da",
    		"∠⊥⌒∂∇≡≒≪≫√∽∝∵∫∬"
    	],
    	[
    		"81f0",
    		"Å‰♯♭♪†‡¶"
    	],
    	[
    		"81fc",
    		"◯"
    	],
    	[
    		"824f",
    		"０",
    		9
    	],
    	[
    		"8260",
    		"Ａ",
    		25
    	],
    	[
    		"8281",
    		"ａ",
    		25
    	],
    	[
    		"829f",
    		"ぁ",
    		82
    	],
    	[
    		"8340",
    		"ァ",
    		62
    	],
    	[
    		"8380",
    		"ム",
    		22
    	],
    	[
    		"839f",
    		"Α",
    		16,
    		"Σ",
    		6
    	],
    	[
    		"83bf",
    		"α",
    		16,
    		"σ",
    		6
    	],
    	[
    		"8440",
    		"А",
    		5,
    		"ЁЖ",
    		25
    	],
    	[
    		"8470",
    		"а",
    		5,
    		"ёж",
    		7
    	],
    	[
    		"8480",
    		"о",
    		17
    	],
    	[
    		"849f",
    		"─│┌┐┘└├┬┤┴┼━┃┏┓┛┗┣┳┫┻╋┠┯┨┷┿┝┰┥┸╂"
    	],
    	[
    		"8740",
    		"①",
    		19,
    		"Ⅰ",
    		9
    	],
    	[
    		"875f",
    		"㍉㌔㌢㍍㌘㌧㌃㌶㍑㍗㌍㌦㌣㌫㍊㌻㎜㎝㎞㎎㎏㏄㎡"
    	],
    	[
    		"877e",
    		"㍻"
    	],
    	[
    		"8780",
    		"〝〟№㏍℡㊤",
    		4,
    		"㈱㈲㈹㍾㍽㍼≒≡∫∮∑√⊥∠∟⊿∵∩∪"
    	],
    	[
    		"889f",
    		"亜唖娃阿哀愛挨姶逢葵茜穐悪握渥旭葦芦鯵梓圧斡扱宛姐虻飴絢綾鮎或粟袷安庵按暗案闇鞍杏以伊位依偉囲夷委威尉惟意慰易椅為畏異移維緯胃萎衣謂違遺医井亥域育郁磯一壱溢逸稲茨芋鰯允印咽員因姻引飲淫胤蔭"
    	],
    	[
    		"8940",
    		"院陰隠韻吋右宇烏羽迂雨卯鵜窺丑碓臼渦嘘唄欝蔚鰻姥厩浦瓜閏噂云運雲荏餌叡営嬰影映曳栄永泳洩瑛盈穎頴英衛詠鋭液疫益駅悦謁越閲榎厭円"
    	],
    	[
    		"8980",
    		"園堰奄宴延怨掩援沿演炎焔煙燕猿縁艶苑薗遠鉛鴛塩於汚甥凹央奥往応押旺横欧殴王翁襖鴬鴎黄岡沖荻億屋憶臆桶牡乙俺卸恩温穏音下化仮何伽価佳加可嘉夏嫁家寡科暇果架歌河火珂禍禾稼箇花苛茄荷華菓蝦課嘩貨迦過霞蚊俄峨我牙画臥芽蛾賀雅餓駕介会解回塊壊廻快怪悔恢懐戒拐改"
    	],
    	[
    		"8a40",
    		"魁晦械海灰界皆絵芥蟹開階貝凱劾外咳害崖慨概涯碍蓋街該鎧骸浬馨蛙垣柿蛎鈎劃嚇各廓拡撹格核殻獲確穫覚角赫較郭閣隔革学岳楽額顎掛笠樫"
    	],
    	[
    		"8a80",
    		"橿梶鰍潟割喝恰括活渇滑葛褐轄且鰹叶椛樺鞄株兜竃蒲釜鎌噛鴨栢茅萱粥刈苅瓦乾侃冠寒刊勘勧巻喚堪姦完官寛干幹患感慣憾換敢柑桓棺款歓汗漢澗潅環甘監看竿管簡緩缶翰肝艦莞観諌貫還鑑間閑関陥韓館舘丸含岸巌玩癌眼岩翫贋雁頑顔願企伎危喜器基奇嬉寄岐希幾忌揮机旗既期棋棄"
    	],
    	[
    		"8b40",
    		"機帰毅気汽畿祈季稀紀徽規記貴起軌輝飢騎鬼亀偽儀妓宜戯技擬欺犠疑祇義蟻誼議掬菊鞠吉吃喫桔橘詰砧杵黍却客脚虐逆丘久仇休及吸宮弓急救"
    	],
    	[
    		"8b80",
    		"朽求汲泣灸球究窮笈級糾給旧牛去居巨拒拠挙渠虚許距鋸漁禦魚亨享京供侠僑兇競共凶協匡卿叫喬境峡強彊怯恐恭挟教橋況狂狭矯胸脅興蕎郷鏡響饗驚仰凝尭暁業局曲極玉桐粁僅勤均巾錦斤欣欽琴禁禽筋緊芹菌衿襟謹近金吟銀九倶句区狗玖矩苦躯駆駈駒具愚虞喰空偶寓遇隅串櫛釧屑屈"
    	],
    	[
    		"8c40",
    		"掘窟沓靴轡窪熊隈粂栗繰桑鍬勲君薫訓群軍郡卦袈祁係傾刑兄啓圭珪型契形径恵慶慧憩掲携敬景桂渓畦稽系経継繋罫茎荊蛍計詣警軽頚鶏芸迎鯨"
    	],
    	[
    		"8c80",
    		"劇戟撃激隙桁傑欠決潔穴結血訣月件倹倦健兼券剣喧圏堅嫌建憲懸拳捲検権牽犬献研硯絹県肩見謙賢軒遣鍵険顕験鹸元原厳幻弦減源玄現絃舷言諺限乎個古呼固姑孤己庫弧戸故枯湖狐糊袴股胡菰虎誇跨鈷雇顧鼓五互伍午呉吾娯後御悟梧檎瑚碁語誤護醐乞鯉交佼侯候倖光公功効勾厚口向"
    	],
    	[
    		"8d40",
    		"后喉坑垢好孔孝宏工巧巷幸広庚康弘恒慌抗拘控攻昂晃更杭校梗構江洪浩港溝甲皇硬稿糠紅紘絞綱耕考肯肱腔膏航荒行衡講貢購郊酵鉱砿鋼閤降"
    	],
    	[
    		"8d80",
    		"項香高鴻剛劫号合壕拷濠豪轟麹克刻告国穀酷鵠黒獄漉腰甑忽惚骨狛込此頃今困坤墾婚恨懇昏昆根梱混痕紺艮魂些佐叉唆嵯左差査沙瑳砂詐鎖裟坐座挫債催再最哉塞妻宰彩才採栽歳済災采犀砕砦祭斎細菜裁載際剤在材罪財冴坂阪堺榊肴咲崎埼碕鷺作削咋搾昨朔柵窄策索錯桜鮭笹匙冊刷"
    	],
    	[
    		"8e40",
    		"察拶撮擦札殺薩雑皐鯖捌錆鮫皿晒三傘参山惨撒散桟燦珊産算纂蚕讃賛酸餐斬暫残仕仔伺使刺司史嗣四士始姉姿子屍市師志思指支孜斯施旨枝止"
    	],
    	[
    		"8e80",
    		"死氏獅祉私糸紙紫肢脂至視詞詩試誌諮資賜雌飼歯事似侍児字寺慈持時次滋治爾璽痔磁示而耳自蒔辞汐鹿式識鴫竺軸宍雫七叱執失嫉室悉湿漆疾質実蔀篠偲柴芝屡蕊縞舎写射捨赦斜煮社紗者謝車遮蛇邪借勺尺杓灼爵酌釈錫若寂弱惹主取守手朱殊狩珠種腫趣酒首儒受呪寿授樹綬需囚収周"
    	],
    	[
    		"8f40",
    		"宗就州修愁拾洲秀秋終繍習臭舟蒐衆襲讐蹴輯週酋酬集醜什住充十従戎柔汁渋獣縦重銃叔夙宿淑祝縮粛塾熟出術述俊峻春瞬竣舜駿准循旬楯殉淳"
    	],
    	[
    		"8f80",
    		"準潤盾純巡遵醇順処初所暑曙渚庶緒署書薯藷諸助叙女序徐恕鋤除傷償勝匠升召哨商唱嘗奨妾娼宵将小少尚庄床廠彰承抄招掌捷昇昌昭晶松梢樟樵沼消渉湘焼焦照症省硝礁祥称章笑粧紹肖菖蒋蕉衝裳訟証詔詳象賞醤鉦鍾鐘障鞘上丈丞乗冗剰城場壌嬢常情擾条杖浄状畳穣蒸譲醸錠嘱埴飾"
    	],
    	[
    		"9040",
    		"拭植殖燭織職色触食蝕辱尻伸信侵唇娠寝審心慎振新晋森榛浸深申疹真神秦紳臣芯薪親診身辛進針震人仁刃塵壬尋甚尽腎訊迅陣靭笥諏須酢図厨"
    	],
    	[
    		"9080",
    		"逗吹垂帥推水炊睡粋翠衰遂酔錐錘随瑞髄崇嵩数枢趨雛据杉椙菅頗雀裾澄摺寸世瀬畝是凄制勢姓征性成政整星晴棲栖正清牲生盛精聖声製西誠誓請逝醒青静斉税脆隻席惜戚斥昔析石積籍績脊責赤跡蹟碩切拙接摂折設窃節説雪絶舌蝉仙先千占宣専尖川戦扇撰栓栴泉浅洗染潜煎煽旋穿箭線"
    	],
    	[
    		"9140",
    		"繊羨腺舛船薦詮賎践選遷銭銑閃鮮前善漸然全禅繕膳糎噌塑岨措曾曽楚狙疏疎礎祖租粗素組蘇訴阻遡鼠僧創双叢倉喪壮奏爽宋層匝惣想捜掃挿掻"
    	],
    	[
    		"9180",
    		"操早曹巣槍槽漕燥争痩相窓糟総綜聡草荘葬蒼藻装走送遭鎗霜騒像増憎臓蔵贈造促側則即息捉束測足速俗属賊族続卒袖其揃存孫尊損村遜他多太汰詑唾堕妥惰打柁舵楕陀駄騨体堆対耐岱帯待怠態戴替泰滞胎腿苔袋貸退逮隊黛鯛代台大第醍題鷹滝瀧卓啄宅托択拓沢濯琢託鐸濁諾茸凧蛸只"
    	],
    	[
    		"9240",
    		"叩但達辰奪脱巽竪辿棚谷狸鱈樽誰丹単嘆坦担探旦歎淡湛炭短端箪綻耽胆蛋誕鍛団壇弾断暖檀段男談値知地弛恥智池痴稚置致蜘遅馳築畜竹筑蓄"
    	],
    	[
    		"9280",
    		"逐秩窒茶嫡着中仲宙忠抽昼柱注虫衷註酎鋳駐樗瀦猪苧著貯丁兆凋喋寵帖帳庁弔張彫徴懲挑暢朝潮牒町眺聴脹腸蝶調諜超跳銚長頂鳥勅捗直朕沈珍賃鎮陳津墜椎槌追鎚痛通塚栂掴槻佃漬柘辻蔦綴鍔椿潰坪壷嬬紬爪吊釣鶴亭低停偵剃貞呈堤定帝底庭廷弟悌抵挺提梯汀碇禎程締艇訂諦蹄逓"
    	],
    	[
    		"9340",
    		"邸鄭釘鼎泥摘擢敵滴的笛適鏑溺哲徹撤轍迭鉄典填天展店添纏甜貼転顛点伝殿澱田電兎吐堵塗妬屠徒斗杜渡登菟賭途都鍍砥砺努度土奴怒倒党冬"
    	],
    	[
    		"9380",
    		"凍刀唐塔塘套宕島嶋悼投搭東桃梼棟盗淘湯涛灯燈当痘祷等答筒糖統到董蕩藤討謄豆踏逃透鐙陶頭騰闘働動同堂導憧撞洞瞳童胴萄道銅峠鴇匿得徳涜特督禿篤毒独読栃橡凸突椴届鳶苫寅酉瀞噸屯惇敦沌豚遁頓呑曇鈍奈那内乍凪薙謎灘捺鍋楢馴縄畷南楠軟難汝二尼弐迩匂賑肉虹廿日乳入"
    	],
    	[
    		"9440",
    		"如尿韮任妊忍認濡禰祢寧葱猫熱年念捻撚燃粘乃廼之埜嚢悩濃納能脳膿農覗蚤巴把播覇杷波派琶破婆罵芭馬俳廃拝排敗杯盃牌背肺輩配倍培媒梅"
    	],
    	[
    		"9480",
    		"楳煤狽買売賠陪這蝿秤矧萩伯剥博拍柏泊白箔粕舶薄迫曝漠爆縛莫駁麦函箱硲箸肇筈櫨幡肌畑畠八鉢溌発醗髪伐罰抜筏閥鳩噺塙蛤隼伴判半反叛帆搬斑板氾汎版犯班畔繁般藩販範釆煩頒飯挽晩番盤磐蕃蛮匪卑否妃庇彼悲扉批披斐比泌疲皮碑秘緋罷肥被誹費避非飛樋簸備尾微枇毘琵眉美"
    	],
    	[
    		"9540",
    		"鼻柊稗匹疋髭彦膝菱肘弼必畢筆逼桧姫媛紐百謬俵彪標氷漂瓢票表評豹廟描病秒苗錨鋲蒜蛭鰭品彬斌浜瀕貧賓頻敏瓶不付埠夫婦富冨布府怖扶敷"
    	],
    	[
    		"9580",
    		"斧普浮父符腐膚芙譜負賦赴阜附侮撫武舞葡蕪部封楓風葺蕗伏副復幅服福腹複覆淵弗払沸仏物鮒分吻噴墳憤扮焚奮粉糞紛雰文聞丙併兵塀幣平弊柄並蔽閉陛米頁僻壁癖碧別瞥蔑箆偏変片篇編辺返遍便勉娩弁鞭保舗鋪圃捕歩甫補輔穂募墓慕戊暮母簿菩倣俸包呆報奉宝峰峯崩庖抱捧放方朋"
    	],
    	[
    		"9640",
    		"法泡烹砲縫胞芳萌蓬蜂褒訪豊邦鋒飽鳳鵬乏亡傍剖坊妨帽忘忙房暴望某棒冒紡肪膨謀貌貿鉾防吠頬北僕卜墨撲朴牧睦穆釦勃没殆堀幌奔本翻凡盆"
    	],
    	[
    		"9680",
    		"摩磨魔麻埋妹昧枚毎哩槙幕膜枕鮪柾鱒桝亦俣又抹末沫迄侭繭麿万慢満漫蔓味未魅巳箕岬密蜜湊蓑稔脈妙粍民眠務夢無牟矛霧鵡椋婿娘冥名命明盟迷銘鳴姪牝滅免棉綿緬面麺摸模茂妄孟毛猛盲網耗蒙儲木黙目杢勿餅尤戻籾貰問悶紋門匁也冶夜爺耶野弥矢厄役約薬訳躍靖柳薮鑓愉愈油癒"
    	],
    	[
    		"9740",
    		"諭輸唯佑優勇友宥幽悠憂揖有柚湧涌猶猷由祐裕誘遊邑郵雄融夕予余与誉輿預傭幼妖容庸揚揺擁曜楊様洋溶熔用窯羊耀葉蓉要謡踊遥陽養慾抑欲"
    	],
    	[
    		"9780",
    		"沃浴翌翼淀羅螺裸来莱頼雷洛絡落酪乱卵嵐欄濫藍蘭覧利吏履李梨理璃痢裏裡里離陸律率立葎掠略劉流溜琉留硫粒隆竜龍侶慮旅虜了亮僚両凌寮料梁涼猟療瞭稜糧良諒遼量陵領力緑倫厘林淋燐琳臨輪隣鱗麟瑠塁涙累類令伶例冷励嶺怜玲礼苓鈴隷零霊麗齢暦歴列劣烈裂廉恋憐漣煉簾練聯"
    	],
    	[
    		"9840",
    		"蓮連錬呂魯櫓炉賂路露労婁廊弄朗楼榔浪漏牢狼篭老聾蝋郎六麓禄肋録論倭和話歪賄脇惑枠鷲亙亘鰐詫藁蕨椀湾碗腕"
    	],
    	[
    		"989f",
    		"弌丐丕个丱丶丼丿乂乖乘亂亅豫亊舒弍于亞亟亠亢亰亳亶从仍仄仆仂仗仞仭仟价伉佚估佛佝佗佇佶侈侏侘佻佩佰侑佯來侖儘俔俟俎俘俛俑俚俐俤俥倚倨倔倪倥倅伜俶倡倩倬俾俯們倆偃假會偕偐偈做偖偬偸傀傚傅傴傲"
    	],
    	[
    		"9940",
    		"僉僊傳僂僖僞僥僭僣僮價僵儉儁儂儖儕儔儚儡儺儷儼儻儿兀兒兌兔兢竸兩兪兮冀冂囘册冉冏冑冓冕冖冤冦冢冩冪冫决冱冲冰况冽凅凉凛几處凩凭"
    	],
    	[
    		"9980",
    		"凰凵凾刄刋刔刎刧刪刮刳刹剏剄剋剌剞剔剪剴剩剳剿剽劍劔劒剱劈劑辨辧劬劭劼劵勁勍勗勞勣勦飭勠勳勵勸勹匆匈甸匍匐匏匕匚匣匯匱匳匸區卆卅丗卉卍凖卞卩卮夘卻卷厂厖厠厦厥厮厰厶參簒雙叟曼燮叮叨叭叺吁吽呀听吭吼吮吶吩吝呎咏呵咎呟呱呷呰咒呻咀呶咄咐咆哇咢咸咥咬哄哈咨"
    	],
    	[
    		"9a40",
    		"咫哂咤咾咼哘哥哦唏唔哽哮哭哺哢唹啀啣啌售啜啅啖啗唸唳啝喙喀咯喊喟啻啾喘喞單啼喃喩喇喨嗚嗅嗟嗄嗜嗤嗔嘔嗷嘖嗾嗽嘛嗹噎噐營嘴嘶嘲嘸"
    	],
    	[
    		"9a80",
    		"噫噤嘯噬噪嚆嚀嚊嚠嚔嚏嚥嚮嚶嚴囂嚼囁囃囀囈囎囑囓囗囮囹圀囿圄圉圈國圍圓團圖嗇圜圦圷圸坎圻址坏坩埀垈坡坿垉垓垠垳垤垪垰埃埆埔埒埓堊埖埣堋堙堝塲堡塢塋塰毀塒堽塹墅墹墟墫墺壞墻墸墮壅壓壑壗壙壘壥壜壤壟壯壺壹壻壼壽夂夊夐夛梦夥夬夭夲夸夾竒奕奐奎奚奘奢奠奧奬奩"
    	],
    	[
    		"9b40",
    		"奸妁妝佞侫妣妲姆姨姜妍姙姚娥娟娑娜娉娚婀婬婉娵娶婢婪媚媼媾嫋嫂媽嫣嫗嫦嫩嫖嫺嫻嬌嬋嬖嬲嫐嬪嬶嬾孃孅孀孑孕孚孛孥孩孰孳孵學斈孺宀"
    	],
    	[
    		"9b80",
    		"它宦宸寃寇寉寔寐寤實寢寞寥寫寰寶寳尅將專對尓尠尢尨尸尹屁屆屎屓屐屏孱屬屮乢屶屹岌岑岔妛岫岻岶岼岷峅岾峇峙峩峽峺峭嶌峪崋崕崗嵜崟崛崑崔崢崚崙崘嵌嵒嵎嵋嵬嵳嵶嶇嶄嶂嶢嶝嶬嶮嶽嶐嶷嶼巉巍巓巒巖巛巫已巵帋帚帙帑帛帶帷幄幃幀幎幗幔幟幢幤幇幵并幺麼广庠廁廂廈廐廏"
    	],
    	[
    		"9c40",
    		"廖廣廝廚廛廢廡廨廩廬廱廳廰廴廸廾弃弉彝彜弋弑弖弩弭弸彁彈彌彎弯彑彖彗彙彡彭彳彷徃徂彿徊很徑徇從徙徘徠徨徭徼忖忻忤忸忱忝悳忿怡恠"
    	],
    	[
    		"9c80",
    		"怙怐怩怎怱怛怕怫怦怏怺恚恁恪恷恟恊恆恍恣恃恤恂恬恫恙悁悍惧悃悚悄悛悖悗悒悧悋惡悸惠惓悴忰悽惆悵惘慍愕愆惶惷愀惴惺愃愡惻惱愍愎慇愾愨愧慊愿愼愬愴愽慂慄慳慷慘慙慚慫慴慯慥慱慟慝慓慵憙憖憇憬憔憚憊憑憫憮懌懊應懷懈懃懆憺懋罹懍懦懣懶懺懴懿懽懼懾戀戈戉戍戌戔戛"
    	],
    	[
    		"9d40",
    		"戞戡截戮戰戲戳扁扎扞扣扛扠扨扼抂抉找抒抓抖拔抃抔拗拑抻拏拿拆擔拈拜拌拊拂拇抛拉挌拮拱挧挂挈拯拵捐挾捍搜捏掖掎掀掫捶掣掏掉掟掵捫"
    	],
    	[
    		"9d80",
    		"捩掾揩揀揆揣揉插揶揄搖搴搆搓搦搶攝搗搨搏摧摯摶摎攪撕撓撥撩撈撼據擒擅擇撻擘擂擱擧舉擠擡抬擣擯攬擶擴擲擺攀擽攘攜攅攤攣攫攴攵攷收攸畋效敖敕敍敘敞敝敲數斂斃變斛斟斫斷旃旆旁旄旌旒旛旙无旡旱杲昊昃旻杳昵昶昴昜晏晄晉晁晞晝晤晧晨晟晢晰暃暈暎暉暄暘暝曁暹曉暾暼"
    	],
    	[
    		"9e40",
    		"曄暸曖曚曠昿曦曩曰曵曷朏朖朞朦朧霸朮朿朶杁朸朷杆杞杠杙杣杤枉杰枩杼杪枌枋枦枡枅枷柯枴柬枳柩枸柤柞柝柢柮枹柎柆柧檜栞框栩桀桍栲桎"
    	],
    	[
    		"9e80",
    		"梳栫桙档桷桿梟梏梭梔條梛梃檮梹桴梵梠梺椏梍桾椁棊椈棘椢椦棡椌棍棔棧棕椶椒椄棗棣椥棹棠棯椨椪椚椣椡棆楹楷楜楸楫楔楾楮椹楴椽楙椰楡楞楝榁楪榲榮槐榿槁槓榾槎寨槊槝榻槃榧樮榑榠榜榕榴槞槨樂樛槿權槹槲槧樅榱樞槭樔槫樊樒櫁樣樓橄樌橲樶橸橇橢橙橦橈樸樢檐檍檠檄檢檣"
    	],
    	[
    		"9f40",
    		"檗蘗檻櫃櫂檸檳檬櫞櫑櫟檪櫚櫪櫻欅蘖櫺欒欖鬱欟欸欷盜欹飮歇歃歉歐歙歔歛歟歡歸歹歿殀殄殃殍殘殕殞殤殪殫殯殲殱殳殷殼毆毋毓毟毬毫毳毯"
    	],
    	[
    		"9f80",
    		"麾氈氓气氛氤氣汞汕汢汪沂沍沚沁沛汾汨汳沒沐泄泱泓沽泗泅泝沮沱沾沺泛泯泙泪洟衍洶洫洽洸洙洵洳洒洌浣涓浤浚浹浙涎涕濤涅淹渕渊涵淇淦涸淆淬淞淌淨淒淅淺淙淤淕淪淮渭湮渮渙湲湟渾渣湫渫湶湍渟湃渺湎渤滿渝游溂溪溘滉溷滓溽溯滄溲滔滕溏溥滂溟潁漑灌滬滸滾漿滲漱滯漲滌"
    	],
    	[
    		"e040",
    		"漾漓滷澆潺潸澁澀潯潛濳潭澂潼潘澎澑濂潦澳澣澡澤澹濆澪濟濕濬濔濘濱濮濛瀉瀋濺瀑瀁瀏濾瀛瀚潴瀝瀘瀟瀰瀾瀲灑灣炙炒炯烱炬炸炳炮烟烋烝"
    	],
    	[
    		"e080",
    		"烙焉烽焜焙煥煕熈煦煢煌煖煬熏燻熄熕熨熬燗熹熾燒燉燔燎燠燬燧燵燼燹燿爍爐爛爨爭爬爰爲爻爼爿牀牆牋牘牴牾犂犁犇犒犖犢犧犹犲狃狆狄狎狒狢狠狡狹狷倏猗猊猜猖猝猴猯猩猥猾獎獏默獗獪獨獰獸獵獻獺珈玳珎玻珀珥珮珞璢琅瑯琥珸琲琺瑕琿瑟瑙瑁瑜瑩瑰瑣瑪瑶瑾璋璞璧瓊瓏瓔珱"
    	],
    	[
    		"e140",
    		"瓠瓣瓧瓩瓮瓲瓰瓱瓸瓷甄甃甅甌甎甍甕甓甞甦甬甼畄畍畊畉畛畆畚畩畤畧畫畭畸當疆疇畴疊疉疂疔疚疝疥疣痂疳痃疵疽疸疼疱痍痊痒痙痣痞痾痿"
    	],
    	[
    		"e180",
    		"痼瘁痰痺痲痳瘋瘍瘉瘟瘧瘠瘡瘢瘤瘴瘰瘻癇癈癆癜癘癡癢癨癩癪癧癬癰癲癶癸發皀皃皈皋皎皖皓皙皚皰皴皸皹皺盂盍盖盒盞盡盥盧盪蘯盻眈眇眄眩眤眞眥眦眛眷眸睇睚睨睫睛睥睿睾睹瞎瞋瞑瞠瞞瞰瞶瞹瞿瞼瞽瞻矇矍矗矚矜矣矮矼砌砒礦砠礪硅碎硴碆硼碚碌碣碵碪碯磑磆磋磔碾碼磅磊磬"
    	],
    	[
    		"e240",
    		"磧磚磽磴礇礒礑礙礬礫祀祠祗祟祚祕祓祺祿禊禝禧齋禪禮禳禹禺秉秕秧秬秡秣稈稍稘稙稠稟禀稱稻稾稷穃穗穉穡穢穩龝穰穹穽窈窗窕窘窖窩竈窰"
    	],
    	[
    		"e280",
    		"窶竅竄窿邃竇竊竍竏竕竓站竚竝竡竢竦竭竰笂笏笊笆笳笘笙笞笵笨笶筐筺笄筍笋筌筅筵筥筴筧筰筱筬筮箝箘箟箍箜箚箋箒箏筝箙篋篁篌篏箴篆篝篩簑簔篦篥籠簀簇簓篳篷簗簍篶簣簧簪簟簷簫簽籌籃籔籏籀籐籘籟籤籖籥籬籵粃粐粤粭粢粫粡粨粳粲粱粮粹粽糀糅糂糘糒糜糢鬻糯糲糴糶糺紆"
    	],
    	[
    		"e340",
    		"紂紜紕紊絅絋紮紲紿紵絆絳絖絎絲絨絮絏絣經綉絛綏絽綛綺綮綣綵緇綽綫總綢綯緜綸綟綰緘緝緤緞緻緲緡縅縊縣縡縒縱縟縉縋縢繆繦縻縵縹繃縷"
    	],
    	[
    		"e380",
    		"縲縺繧繝繖繞繙繚繹繪繩繼繻纃緕繽辮繿纈纉續纒纐纓纔纖纎纛纜缸缺罅罌罍罎罐网罕罔罘罟罠罨罩罧罸羂羆羃羈羇羌羔羞羝羚羣羯羲羹羮羶羸譱翅翆翊翕翔翡翦翩翳翹飜耆耄耋耒耘耙耜耡耨耿耻聊聆聒聘聚聟聢聨聳聲聰聶聹聽聿肄肆肅肛肓肚肭冐肬胛胥胙胝胄胚胖脉胯胱脛脩脣脯腋"
    	],
    	[
    		"e440",
    		"隋腆脾腓腑胼腱腮腥腦腴膃膈膊膀膂膠膕膤膣腟膓膩膰膵膾膸膽臀臂膺臉臍臑臙臘臈臚臟臠臧臺臻臾舁舂舅與舊舍舐舖舩舫舸舳艀艙艘艝艚艟艤"
    	],
    	[
    		"e480",
    		"艢艨艪艫舮艱艷艸艾芍芒芫芟芻芬苡苣苟苒苴苳苺莓范苻苹苞茆苜茉苙茵茴茖茲茱荀茹荐荅茯茫茗茘莅莚莪莟莢莖茣莎莇莊荼莵荳荵莠莉莨菴萓菫菎菽萃菘萋菁菷萇菠菲萍萢萠莽萸蔆菻葭萪萼蕚蒄葷葫蒭葮蒂葩葆萬葯葹萵蓊葢蒹蒿蒟蓙蓍蒻蓚蓐蓁蓆蓖蒡蔡蓿蓴蔗蔘蔬蔟蔕蔔蓼蕀蕣蕘蕈"
    	],
    	[
    		"e540",
    		"蕁蘂蕋蕕薀薤薈薑薊薨蕭薔薛藪薇薜蕷蕾薐藉薺藏薹藐藕藝藥藜藹蘊蘓蘋藾藺蘆蘢蘚蘰蘿虍乕虔號虧虱蚓蚣蚩蚪蚋蚌蚶蚯蛄蛆蚰蛉蠣蚫蛔蛞蛩蛬"
    	],
    	[
    		"e580",
    		"蛟蛛蛯蜒蜆蜈蜀蜃蛻蜑蜉蜍蛹蜊蜴蜿蜷蜻蜥蜩蜚蝠蝟蝸蝌蝎蝴蝗蝨蝮蝙蝓蝣蝪蠅螢螟螂螯蟋螽蟀蟐雖螫蟄螳蟇蟆螻蟯蟲蟠蠏蠍蟾蟶蟷蠎蟒蠑蠖蠕蠢蠡蠱蠶蠹蠧蠻衄衂衒衙衞衢衫袁衾袞衵衽袵衲袂袗袒袮袙袢袍袤袰袿袱裃裄裔裘裙裝裹褂裼裴裨裲褄褌褊褓襃褞褥褪褫襁襄褻褶褸襌褝襠襞"
    	],
    	[
    		"e640",
    		"襦襤襭襪襯襴襷襾覃覈覊覓覘覡覩覦覬覯覲覺覽覿觀觚觜觝觧觴觸訃訖訐訌訛訝訥訶詁詛詒詆詈詼詭詬詢誅誂誄誨誡誑誥誦誚誣諄諍諂諚諫諳諧"
    	],
    	[
    		"e680",
    		"諤諱謔諠諢諷諞諛謌謇謚諡謖謐謗謠謳鞫謦謫謾謨譁譌譏譎證譖譛譚譫譟譬譯譴譽讀讌讎讒讓讖讙讚谺豁谿豈豌豎豐豕豢豬豸豺貂貉貅貊貍貎貔豼貘戝貭貪貽貲貳貮貶賈賁賤賣賚賽賺賻贄贅贊贇贏贍贐齎贓賍贔贖赧赭赱赳趁趙跂趾趺跏跚跖跌跛跋跪跫跟跣跼踈踉跿踝踞踐踟蹂踵踰踴蹊"
    	],
    	[
    		"e740",
    		"蹇蹉蹌蹐蹈蹙蹤蹠踪蹣蹕蹶蹲蹼躁躇躅躄躋躊躓躑躔躙躪躡躬躰軆躱躾軅軈軋軛軣軼軻軫軾輊輅輕輒輙輓輜輟輛輌輦輳輻輹轅轂輾轌轉轆轎轗轜"
    	],
    	[
    		"e780",
    		"轢轣轤辜辟辣辭辯辷迚迥迢迪迯邇迴逅迹迺逑逕逡逍逞逖逋逧逶逵逹迸遏遐遑遒逎遉逾遖遘遞遨遯遶隨遲邂遽邁邀邊邉邏邨邯邱邵郢郤扈郛鄂鄒鄙鄲鄰酊酖酘酣酥酩酳酲醋醉醂醢醫醯醪醵醴醺釀釁釉釋釐釖釟釡釛釼釵釶鈞釿鈔鈬鈕鈑鉞鉗鉅鉉鉤鉈銕鈿鉋鉐銜銖銓銛鉚鋏銹銷鋩錏鋺鍄錮"
    	],
    	[
    		"e840",
    		"錙錢錚錣錺錵錻鍜鍠鍼鍮鍖鎰鎬鎭鎔鎹鏖鏗鏨鏥鏘鏃鏝鏐鏈鏤鐚鐔鐓鐃鐇鐐鐶鐫鐵鐡鐺鑁鑒鑄鑛鑠鑢鑞鑪鈩鑰鑵鑷鑽鑚鑼鑾钁鑿閂閇閊閔閖閘閙"
    	],
    	[
    		"e880",
    		"閠閨閧閭閼閻閹閾闊濶闃闍闌闕闔闖關闡闥闢阡阨阮阯陂陌陏陋陷陜陞陝陟陦陲陬隍隘隕隗險隧隱隲隰隴隶隸隹雎雋雉雍襍雜霍雕雹霄霆霈霓霎霑霏霖霙霤霪霰霹霽霾靄靆靈靂靉靜靠靤靦靨勒靫靱靹鞅靼鞁靺鞆鞋鞏鞐鞜鞨鞦鞣鞳鞴韃韆韈韋韜韭齏韲竟韶韵頏頌頸頤頡頷頽顆顏顋顫顯顰"
    	],
    	[
    		"e940",
    		"顱顴顳颪颯颱颶飄飃飆飩飫餃餉餒餔餘餡餝餞餤餠餬餮餽餾饂饉饅饐饋饑饒饌饕馗馘馥馭馮馼駟駛駝駘駑駭駮駱駲駻駸騁騏騅駢騙騫騷驅驂驀驃"
    	],
    	[
    		"e980",
    		"騾驕驍驛驗驟驢驥驤驩驫驪骭骰骼髀髏髑髓體髞髟髢髣髦髯髫髮髴髱髷髻鬆鬘鬚鬟鬢鬣鬥鬧鬨鬩鬪鬮鬯鬲魄魃魏魍魎魑魘魴鮓鮃鮑鮖鮗鮟鮠鮨鮴鯀鯊鮹鯆鯏鯑鯒鯣鯢鯤鯔鯡鰺鯲鯱鯰鰕鰔鰉鰓鰌鰆鰈鰒鰊鰄鰮鰛鰥鰤鰡鰰鱇鰲鱆鰾鱚鱠鱧鱶鱸鳧鳬鳰鴉鴈鳫鴃鴆鴪鴦鶯鴣鴟鵄鴕鴒鵁鴿鴾鵆鵈"
    	],
    	[
    		"ea40",
    		"鵝鵞鵤鵑鵐鵙鵲鶉鶇鶫鵯鵺鶚鶤鶩鶲鷄鷁鶻鶸鶺鷆鷏鷂鷙鷓鷸鷦鷭鷯鷽鸚鸛鸞鹵鹹鹽麁麈麋麌麒麕麑麝麥麩麸麪麭靡黌黎黏黐黔黜點黝黠黥黨黯"
    	],
    	[
    		"ea80",
    		"黴黶黷黹黻黼黽鼇鼈皷鼕鼡鼬鼾齊齒齔齣齟齠齡齦齧齬齪齷齲齶龕龜龠堯槇遙瑤凜熙"
    	],
    	[
    		"ed40",
    		"纊褜鍈銈蓜俉炻昱棈鋹曻彅丨仡仼伀伃伹佖侒侊侚侔俍偀倢俿倞偆偰偂傔僴僘兊兤冝冾凬刕劜劦勀勛匀匇匤卲厓厲叝﨎咜咊咩哿喆坙坥垬埈埇﨏"
    	],
    	[
    		"ed80",
    		"塚增墲夋奓奛奝奣妤妺孖寀甯寘寬尞岦岺峵崧嵓﨑嵂嵭嶸嶹巐弡弴彧德忞恝悅悊惞惕愠惲愑愷愰憘戓抦揵摠撝擎敎昀昕昻昉昮昞昤晥晗晙晴晳暙暠暲暿曺朎朗杦枻桒柀栁桄棏﨓楨﨔榘槢樰橫橆橳橾櫢櫤毖氿汜沆汯泚洄涇浯涖涬淏淸淲淼渹湜渧渼溿澈澵濵瀅瀇瀨炅炫焏焄煜煆煇凞燁燾犱"
    	],
    	[
    		"ee40",
    		"犾猤猪獷玽珉珖珣珒琇珵琦琪琩琮瑢璉璟甁畯皂皜皞皛皦益睆劯砡硎硤硺礰礼神祥禔福禛竑竧靖竫箞精絈絜綷綠緖繒罇羡羽茁荢荿菇菶葈蒴蕓蕙"
    	],
    	[
    		"ee80",
    		"蕫﨟薰蘒﨡蠇裵訒訷詹誧誾諟諸諶譓譿賰賴贒赶﨣軏﨤逸遧郞都鄕鄧釚釗釞釭釮釤釥鈆鈐鈊鈺鉀鈼鉎鉙鉑鈹鉧銧鉷鉸鋧鋗鋙鋐﨧鋕鋠鋓錥錡鋻﨨錞鋿錝錂鍰鍗鎤鏆鏞鏸鐱鑅鑈閒隆﨩隝隯霳霻靃靍靏靑靕顗顥飯飼餧館馞驎髙髜魵魲鮏鮱鮻鰀鵰鵫鶴鸙黑"
    	],
    	[
    		"eeef",
    		"ⅰ",
    		9,
    		"￢￤＇＂"
    	],
    	[
    		"f040",
    		"",
    		62
    	],
    	[
    		"f080",
    		"",
    		124
    	],
    	[
    		"f140",
    		"",
    		62
    	],
    	[
    		"f180",
    		"",
    		124
    	],
    	[
    		"f240",
    		"",
    		62
    	],
    	[
    		"f280",
    		"",
    		124
    	],
    	[
    		"f340",
    		"",
    		62
    	],
    	[
    		"f380",
    		"",
    		124
    	],
    	[
    		"f440",
    		"",
    		62
    	],
    	[
    		"f480",
    		"",
    		124
    	],
    	[
    		"f540",
    		"",
    		62
    	],
    	[
    		"f580",
    		"",
    		124
    	],
    	[
    		"f640",
    		"",
    		62
    	],
    	[
    		"f680",
    		"",
    		124
    	],
    	[
    		"f740",
    		"",
    		62
    	],
    	[
    		"f780",
    		"",
    		124
    	],
    	[
    		"f840",
    		"",
    		62
    	],
    	[
    		"f880",
    		"",
    		124
    	],
    	[
    		"f940",
    		""
    	],
    	[
    		"fa40",
    		"ⅰ",
    		9,
    		"Ⅰ",
    		9,
    		"￢￤＇＂㈱№℡∵纊褜鍈銈蓜俉炻昱棈鋹曻彅丨仡仼伀伃伹佖侒侊侚侔俍偀倢俿倞偆偰偂傔僴僘兊"
    	],
    	[
    		"fa80",
    		"兤冝冾凬刕劜劦勀勛匀匇匤卲厓厲叝﨎咜咊咩哿喆坙坥垬埈埇﨏塚增墲夋奓奛奝奣妤妺孖寀甯寘寬尞岦岺峵崧嵓﨑嵂嵭嶸嶹巐弡弴彧德忞恝悅悊惞惕愠惲愑愷愰憘戓抦揵摠撝擎敎昀昕昻昉昮昞昤晥晗晙晴晳暙暠暲暿曺朎朗杦枻桒柀栁桄棏﨓楨﨔榘槢樰橫橆橳橾櫢櫤毖氿汜沆汯泚洄涇浯"
    	],
    	[
    		"fb40",
    		"涖涬淏淸淲淼渹湜渧渼溿澈澵濵瀅瀇瀨炅炫焏焄煜煆煇凞燁燾犱犾猤猪獷玽珉珖珣珒琇珵琦琪琩琮瑢璉璟甁畯皂皜皞皛皦益睆劯砡硎硤硺礰礼神"
    	],
    	[
    		"fb80",
    		"祥禔福禛竑竧靖竫箞精絈絜綷綠緖繒罇羡羽茁荢荿菇菶葈蒴蕓蕙蕫﨟薰蘒﨡蠇裵訒訷詹誧誾諟諸諶譓譿賰賴贒赶﨣軏﨤逸遧郞都鄕鄧釚釗釞釭釮釤釥鈆鈐鈊鈺鉀鈼鉎鉙鉑鈹鉧銧鉷鉸鋧鋗鋙鋐﨧鋕鋠鋓錥錡鋻﨨錞鋿錝錂鍰鍗鎤鏆鏞鏸鐱鑅鑈閒隆﨩隝隯霳霻靃靍靏靑靕顗顥飯飼餧館馞驎髙"
    	],
    	[
    		"fc40",
    		"髜魵魲鮏鮱鮻鰀鵰鵫鶴鸙黑"
    	]
    ];

    var require$$1$2 = [
    	[
    		"0",
    		"\u0000",
    		127
    	],
    	[
    		"8ea1",
    		"｡",
    		62
    	],
    	[
    		"a1a1",
    		"　、。，．・：；？！゛゜´｀¨＾￣＿ヽヾゝゞ〃仝々〆〇ー―‐／＼～∥｜…‥‘’“”（）〔〕［］｛｝〈",
    		9,
    		"＋－±×÷＝≠＜＞≦≧∞∴♂♀°′″℃￥＄￠￡％＃＆＊＠§☆★○●◎◇"
    	],
    	[
    		"a2a1",
    		"◆□■△▲▽▼※〒→←↑↓〓"
    	],
    	[
    		"a2ba",
    		"∈∋⊆⊇⊂⊃∪∩"
    	],
    	[
    		"a2ca",
    		"∧∨￢⇒⇔∀∃"
    	],
    	[
    		"a2dc",
    		"∠⊥⌒∂∇≡≒≪≫√∽∝∵∫∬"
    	],
    	[
    		"a2f2",
    		"Å‰♯♭♪†‡¶"
    	],
    	[
    		"a2fe",
    		"◯"
    	],
    	[
    		"a3b0",
    		"０",
    		9
    	],
    	[
    		"a3c1",
    		"Ａ",
    		25
    	],
    	[
    		"a3e1",
    		"ａ",
    		25
    	],
    	[
    		"a4a1",
    		"ぁ",
    		82
    	],
    	[
    		"a5a1",
    		"ァ",
    		85
    	],
    	[
    		"a6a1",
    		"Α",
    		16,
    		"Σ",
    		6
    	],
    	[
    		"a6c1",
    		"α",
    		16,
    		"σ",
    		6
    	],
    	[
    		"a7a1",
    		"А",
    		5,
    		"ЁЖ",
    		25
    	],
    	[
    		"a7d1",
    		"а",
    		5,
    		"ёж",
    		25
    	],
    	[
    		"a8a1",
    		"─│┌┐┘└├┬┤┴┼━┃┏┓┛┗┣┳┫┻╋┠┯┨┷┿┝┰┥┸╂"
    	],
    	[
    		"ada1",
    		"①",
    		19,
    		"Ⅰ",
    		9
    	],
    	[
    		"adc0",
    		"㍉㌔㌢㍍㌘㌧㌃㌶㍑㍗㌍㌦㌣㌫㍊㌻㎜㎝㎞㎎㎏㏄㎡"
    	],
    	[
    		"addf",
    		"㍻〝〟№㏍℡㊤",
    		4,
    		"㈱㈲㈹㍾㍽㍼≒≡∫∮∑√⊥∠∟⊿∵∩∪"
    	],
    	[
    		"b0a1",
    		"亜唖娃阿哀愛挨姶逢葵茜穐悪握渥旭葦芦鯵梓圧斡扱宛姐虻飴絢綾鮎或粟袷安庵按暗案闇鞍杏以伊位依偉囲夷委威尉惟意慰易椅為畏異移維緯胃萎衣謂違遺医井亥域育郁磯一壱溢逸稲茨芋鰯允印咽員因姻引飲淫胤蔭"
    	],
    	[
    		"b1a1",
    		"院陰隠韻吋右宇烏羽迂雨卯鵜窺丑碓臼渦嘘唄欝蔚鰻姥厩浦瓜閏噂云運雲荏餌叡営嬰影映曳栄永泳洩瑛盈穎頴英衛詠鋭液疫益駅悦謁越閲榎厭円園堰奄宴延怨掩援沿演炎焔煙燕猿縁艶苑薗遠鉛鴛塩於汚甥凹央奥往応"
    	],
    	[
    		"b2a1",
    		"押旺横欧殴王翁襖鴬鴎黄岡沖荻億屋憶臆桶牡乙俺卸恩温穏音下化仮何伽価佳加可嘉夏嫁家寡科暇果架歌河火珂禍禾稼箇花苛茄荷華菓蝦課嘩貨迦過霞蚊俄峨我牙画臥芽蛾賀雅餓駕介会解回塊壊廻快怪悔恢懐戒拐改"
    	],
    	[
    		"b3a1",
    		"魁晦械海灰界皆絵芥蟹開階貝凱劾外咳害崖慨概涯碍蓋街該鎧骸浬馨蛙垣柿蛎鈎劃嚇各廓拡撹格核殻獲確穫覚角赫較郭閣隔革学岳楽額顎掛笠樫橿梶鰍潟割喝恰括活渇滑葛褐轄且鰹叶椛樺鞄株兜竃蒲釜鎌噛鴨栢茅萱"
    	],
    	[
    		"b4a1",
    		"粥刈苅瓦乾侃冠寒刊勘勧巻喚堪姦完官寛干幹患感慣憾換敢柑桓棺款歓汗漢澗潅環甘監看竿管簡緩缶翰肝艦莞観諌貫還鑑間閑関陥韓館舘丸含岸巌玩癌眼岩翫贋雁頑顔願企伎危喜器基奇嬉寄岐希幾忌揮机旗既期棋棄"
    	],
    	[
    		"b5a1",
    		"機帰毅気汽畿祈季稀紀徽規記貴起軌輝飢騎鬼亀偽儀妓宜戯技擬欺犠疑祇義蟻誼議掬菊鞠吉吃喫桔橘詰砧杵黍却客脚虐逆丘久仇休及吸宮弓急救朽求汲泣灸球究窮笈級糾給旧牛去居巨拒拠挙渠虚許距鋸漁禦魚亨享京"
    	],
    	[
    		"b6a1",
    		"供侠僑兇競共凶協匡卿叫喬境峡強彊怯恐恭挟教橋況狂狭矯胸脅興蕎郷鏡響饗驚仰凝尭暁業局曲極玉桐粁僅勤均巾錦斤欣欽琴禁禽筋緊芹菌衿襟謹近金吟銀九倶句区狗玖矩苦躯駆駈駒具愚虞喰空偶寓遇隅串櫛釧屑屈"
    	],
    	[
    		"b7a1",
    		"掘窟沓靴轡窪熊隈粂栗繰桑鍬勲君薫訓群軍郡卦袈祁係傾刑兄啓圭珪型契形径恵慶慧憩掲携敬景桂渓畦稽系経継繋罫茎荊蛍計詣警軽頚鶏芸迎鯨劇戟撃激隙桁傑欠決潔穴結血訣月件倹倦健兼券剣喧圏堅嫌建憲懸拳捲"
    	],
    	[
    		"b8a1",
    		"検権牽犬献研硯絹県肩見謙賢軒遣鍵険顕験鹸元原厳幻弦減源玄現絃舷言諺限乎個古呼固姑孤己庫弧戸故枯湖狐糊袴股胡菰虎誇跨鈷雇顧鼓五互伍午呉吾娯後御悟梧檎瑚碁語誤護醐乞鯉交佼侯候倖光公功効勾厚口向"
    	],
    	[
    		"b9a1",
    		"后喉坑垢好孔孝宏工巧巷幸広庚康弘恒慌抗拘控攻昂晃更杭校梗構江洪浩港溝甲皇硬稿糠紅紘絞綱耕考肯肱腔膏航荒行衡講貢購郊酵鉱砿鋼閤降項香高鴻剛劫号合壕拷濠豪轟麹克刻告国穀酷鵠黒獄漉腰甑忽惚骨狛込"
    	],
    	[
    		"baa1",
    		"此頃今困坤墾婚恨懇昏昆根梱混痕紺艮魂些佐叉唆嵯左差査沙瑳砂詐鎖裟坐座挫債催再最哉塞妻宰彩才採栽歳済災采犀砕砦祭斎細菜裁載際剤在材罪財冴坂阪堺榊肴咲崎埼碕鷺作削咋搾昨朔柵窄策索錯桜鮭笹匙冊刷"
    	],
    	[
    		"bba1",
    		"察拶撮擦札殺薩雑皐鯖捌錆鮫皿晒三傘参山惨撒散桟燦珊産算纂蚕讃賛酸餐斬暫残仕仔伺使刺司史嗣四士始姉姿子屍市師志思指支孜斯施旨枝止死氏獅祉私糸紙紫肢脂至視詞詩試誌諮資賜雌飼歯事似侍児字寺慈持時"
    	],
    	[
    		"bca1",
    		"次滋治爾璽痔磁示而耳自蒔辞汐鹿式識鴫竺軸宍雫七叱執失嫉室悉湿漆疾質実蔀篠偲柴芝屡蕊縞舎写射捨赦斜煮社紗者謝車遮蛇邪借勺尺杓灼爵酌釈錫若寂弱惹主取守手朱殊狩珠種腫趣酒首儒受呪寿授樹綬需囚収周"
    	],
    	[
    		"bda1",
    		"宗就州修愁拾洲秀秋終繍習臭舟蒐衆襲讐蹴輯週酋酬集醜什住充十従戎柔汁渋獣縦重銃叔夙宿淑祝縮粛塾熟出術述俊峻春瞬竣舜駿准循旬楯殉淳準潤盾純巡遵醇順処初所暑曙渚庶緒署書薯藷諸助叙女序徐恕鋤除傷償"
    	],
    	[
    		"bea1",
    		"勝匠升召哨商唱嘗奨妾娼宵将小少尚庄床廠彰承抄招掌捷昇昌昭晶松梢樟樵沼消渉湘焼焦照症省硝礁祥称章笑粧紹肖菖蒋蕉衝裳訟証詔詳象賞醤鉦鍾鐘障鞘上丈丞乗冗剰城場壌嬢常情擾条杖浄状畳穣蒸譲醸錠嘱埴飾"
    	],
    	[
    		"bfa1",
    		"拭植殖燭織職色触食蝕辱尻伸信侵唇娠寝審心慎振新晋森榛浸深申疹真神秦紳臣芯薪親診身辛進針震人仁刃塵壬尋甚尽腎訊迅陣靭笥諏須酢図厨逗吹垂帥推水炊睡粋翠衰遂酔錐錘随瑞髄崇嵩数枢趨雛据杉椙菅頗雀裾"
    	],
    	[
    		"c0a1",
    		"澄摺寸世瀬畝是凄制勢姓征性成政整星晴棲栖正清牲生盛精聖声製西誠誓請逝醒青静斉税脆隻席惜戚斥昔析石積籍績脊責赤跡蹟碩切拙接摂折設窃節説雪絶舌蝉仙先千占宣専尖川戦扇撰栓栴泉浅洗染潜煎煽旋穿箭線"
    	],
    	[
    		"c1a1",
    		"繊羨腺舛船薦詮賎践選遷銭銑閃鮮前善漸然全禅繕膳糎噌塑岨措曾曽楚狙疏疎礎祖租粗素組蘇訴阻遡鼠僧創双叢倉喪壮奏爽宋層匝惣想捜掃挿掻操早曹巣槍槽漕燥争痩相窓糟総綜聡草荘葬蒼藻装走送遭鎗霜騒像増憎"
    	],
    	[
    		"c2a1",
    		"臓蔵贈造促側則即息捉束測足速俗属賊族続卒袖其揃存孫尊損村遜他多太汰詑唾堕妥惰打柁舵楕陀駄騨体堆対耐岱帯待怠態戴替泰滞胎腿苔袋貸退逮隊黛鯛代台大第醍題鷹滝瀧卓啄宅托択拓沢濯琢託鐸濁諾茸凧蛸只"
    	],
    	[
    		"c3a1",
    		"叩但達辰奪脱巽竪辿棚谷狸鱈樽誰丹単嘆坦担探旦歎淡湛炭短端箪綻耽胆蛋誕鍛団壇弾断暖檀段男談値知地弛恥智池痴稚置致蜘遅馳築畜竹筑蓄逐秩窒茶嫡着中仲宙忠抽昼柱注虫衷註酎鋳駐樗瀦猪苧著貯丁兆凋喋寵"
    	],
    	[
    		"c4a1",
    		"帖帳庁弔張彫徴懲挑暢朝潮牒町眺聴脹腸蝶調諜超跳銚長頂鳥勅捗直朕沈珍賃鎮陳津墜椎槌追鎚痛通塚栂掴槻佃漬柘辻蔦綴鍔椿潰坪壷嬬紬爪吊釣鶴亭低停偵剃貞呈堤定帝底庭廷弟悌抵挺提梯汀碇禎程締艇訂諦蹄逓"
    	],
    	[
    		"c5a1",
    		"邸鄭釘鼎泥摘擢敵滴的笛適鏑溺哲徹撤轍迭鉄典填天展店添纏甜貼転顛点伝殿澱田電兎吐堵塗妬屠徒斗杜渡登菟賭途都鍍砥砺努度土奴怒倒党冬凍刀唐塔塘套宕島嶋悼投搭東桃梼棟盗淘湯涛灯燈当痘祷等答筒糖統到"
    	],
    	[
    		"c6a1",
    		"董蕩藤討謄豆踏逃透鐙陶頭騰闘働動同堂導憧撞洞瞳童胴萄道銅峠鴇匿得徳涜特督禿篤毒独読栃橡凸突椴届鳶苫寅酉瀞噸屯惇敦沌豚遁頓呑曇鈍奈那内乍凪薙謎灘捺鍋楢馴縄畷南楠軟難汝二尼弐迩匂賑肉虹廿日乳入"
    	],
    	[
    		"c7a1",
    		"如尿韮任妊忍認濡禰祢寧葱猫熱年念捻撚燃粘乃廼之埜嚢悩濃納能脳膿農覗蚤巴把播覇杷波派琶破婆罵芭馬俳廃拝排敗杯盃牌背肺輩配倍培媒梅楳煤狽買売賠陪這蝿秤矧萩伯剥博拍柏泊白箔粕舶薄迫曝漠爆縛莫駁麦"
    	],
    	[
    		"c8a1",
    		"函箱硲箸肇筈櫨幡肌畑畠八鉢溌発醗髪伐罰抜筏閥鳩噺塙蛤隼伴判半反叛帆搬斑板氾汎版犯班畔繁般藩販範釆煩頒飯挽晩番盤磐蕃蛮匪卑否妃庇彼悲扉批披斐比泌疲皮碑秘緋罷肥被誹費避非飛樋簸備尾微枇毘琵眉美"
    	],
    	[
    		"c9a1",
    		"鼻柊稗匹疋髭彦膝菱肘弼必畢筆逼桧姫媛紐百謬俵彪標氷漂瓢票表評豹廟描病秒苗錨鋲蒜蛭鰭品彬斌浜瀕貧賓頻敏瓶不付埠夫婦富冨布府怖扶敷斧普浮父符腐膚芙譜負賦赴阜附侮撫武舞葡蕪部封楓風葺蕗伏副復幅服"
    	],
    	[
    		"caa1",
    		"福腹複覆淵弗払沸仏物鮒分吻噴墳憤扮焚奮粉糞紛雰文聞丙併兵塀幣平弊柄並蔽閉陛米頁僻壁癖碧別瞥蔑箆偏変片篇編辺返遍便勉娩弁鞭保舗鋪圃捕歩甫補輔穂募墓慕戊暮母簿菩倣俸包呆報奉宝峰峯崩庖抱捧放方朋"
    	],
    	[
    		"cba1",
    		"法泡烹砲縫胞芳萌蓬蜂褒訪豊邦鋒飽鳳鵬乏亡傍剖坊妨帽忘忙房暴望某棒冒紡肪膨謀貌貿鉾防吠頬北僕卜墨撲朴牧睦穆釦勃没殆堀幌奔本翻凡盆摩磨魔麻埋妹昧枚毎哩槙幕膜枕鮪柾鱒桝亦俣又抹末沫迄侭繭麿万慢満"
    	],
    	[
    		"cca1",
    		"漫蔓味未魅巳箕岬密蜜湊蓑稔脈妙粍民眠務夢無牟矛霧鵡椋婿娘冥名命明盟迷銘鳴姪牝滅免棉綿緬面麺摸模茂妄孟毛猛盲網耗蒙儲木黙目杢勿餅尤戻籾貰問悶紋門匁也冶夜爺耶野弥矢厄役約薬訳躍靖柳薮鑓愉愈油癒"
    	],
    	[
    		"cda1",
    		"諭輸唯佑優勇友宥幽悠憂揖有柚湧涌猶猷由祐裕誘遊邑郵雄融夕予余与誉輿預傭幼妖容庸揚揺擁曜楊様洋溶熔用窯羊耀葉蓉要謡踊遥陽養慾抑欲沃浴翌翼淀羅螺裸来莱頼雷洛絡落酪乱卵嵐欄濫藍蘭覧利吏履李梨理璃"
    	],
    	[
    		"cea1",
    		"痢裏裡里離陸律率立葎掠略劉流溜琉留硫粒隆竜龍侶慮旅虜了亮僚両凌寮料梁涼猟療瞭稜糧良諒遼量陵領力緑倫厘林淋燐琳臨輪隣鱗麟瑠塁涙累類令伶例冷励嶺怜玲礼苓鈴隷零霊麗齢暦歴列劣烈裂廉恋憐漣煉簾練聯"
    	],
    	[
    		"cfa1",
    		"蓮連錬呂魯櫓炉賂路露労婁廊弄朗楼榔浪漏牢狼篭老聾蝋郎六麓禄肋録論倭和話歪賄脇惑枠鷲亙亘鰐詫藁蕨椀湾碗腕"
    	],
    	[
    		"d0a1",
    		"弌丐丕个丱丶丼丿乂乖乘亂亅豫亊舒弍于亞亟亠亢亰亳亶从仍仄仆仂仗仞仭仟价伉佚估佛佝佗佇佶侈侏侘佻佩佰侑佯來侖儘俔俟俎俘俛俑俚俐俤俥倚倨倔倪倥倅伜俶倡倩倬俾俯們倆偃假會偕偐偈做偖偬偸傀傚傅傴傲"
    	],
    	[
    		"d1a1",
    		"僉僊傳僂僖僞僥僭僣僮價僵儉儁儂儖儕儔儚儡儺儷儼儻儿兀兒兌兔兢竸兩兪兮冀冂囘册冉冏冑冓冕冖冤冦冢冩冪冫决冱冲冰况冽凅凉凛几處凩凭凰凵凾刄刋刔刎刧刪刮刳刹剏剄剋剌剞剔剪剴剩剳剿剽劍劔劒剱劈劑辨"
    	],
    	[
    		"d2a1",
    		"辧劬劭劼劵勁勍勗勞勣勦飭勠勳勵勸勹匆匈甸匍匐匏匕匚匣匯匱匳匸區卆卅丗卉卍凖卞卩卮夘卻卷厂厖厠厦厥厮厰厶參簒雙叟曼燮叮叨叭叺吁吽呀听吭吼吮吶吩吝呎咏呵咎呟呱呷呰咒呻咀呶咄咐咆哇咢咸咥咬哄哈咨"
    	],
    	[
    		"d3a1",
    		"咫哂咤咾咼哘哥哦唏唔哽哮哭哺哢唹啀啣啌售啜啅啖啗唸唳啝喙喀咯喊喟啻啾喘喞單啼喃喩喇喨嗚嗅嗟嗄嗜嗤嗔嘔嗷嘖嗾嗽嘛嗹噎噐營嘴嘶嘲嘸噫噤嘯噬噪嚆嚀嚊嚠嚔嚏嚥嚮嚶嚴囂嚼囁囃囀囈囎囑囓囗囮囹圀囿圄圉"
    	],
    	[
    		"d4a1",
    		"圈國圍圓團圖嗇圜圦圷圸坎圻址坏坩埀垈坡坿垉垓垠垳垤垪垰埃埆埔埒埓堊埖埣堋堙堝塲堡塢塋塰毀塒堽塹墅墹墟墫墺壞墻墸墮壅壓壑壗壙壘壥壜壤壟壯壺壹壻壼壽夂夊夐夛梦夥夬夭夲夸夾竒奕奐奎奚奘奢奠奧奬奩"
    	],
    	[
    		"d5a1",
    		"奸妁妝佞侫妣妲姆姨姜妍姙姚娥娟娑娜娉娚婀婬婉娵娶婢婪媚媼媾嫋嫂媽嫣嫗嫦嫩嫖嫺嫻嬌嬋嬖嬲嫐嬪嬶嬾孃孅孀孑孕孚孛孥孩孰孳孵學斈孺宀它宦宸寃寇寉寔寐寤實寢寞寥寫寰寶寳尅將專對尓尠尢尨尸尹屁屆屎屓"
    	],
    	[
    		"d6a1",
    		"屐屏孱屬屮乢屶屹岌岑岔妛岫岻岶岼岷峅岾峇峙峩峽峺峭嶌峪崋崕崗嵜崟崛崑崔崢崚崙崘嵌嵒嵎嵋嵬嵳嵶嶇嶄嶂嶢嶝嶬嶮嶽嶐嶷嶼巉巍巓巒巖巛巫已巵帋帚帙帑帛帶帷幄幃幀幎幗幔幟幢幤幇幵并幺麼广庠廁廂廈廐廏"
    	],
    	[
    		"d7a1",
    		"廖廣廝廚廛廢廡廨廩廬廱廳廰廴廸廾弃弉彝彜弋弑弖弩弭弸彁彈彌彎弯彑彖彗彙彡彭彳彷徃徂彿徊很徑徇從徙徘徠徨徭徼忖忻忤忸忱忝悳忿怡恠怙怐怩怎怱怛怕怫怦怏怺恚恁恪恷恟恊恆恍恣恃恤恂恬恫恙悁悍惧悃悚"
    	],
    	[
    		"d8a1",
    		"悄悛悖悗悒悧悋惡悸惠惓悴忰悽惆悵惘慍愕愆惶惷愀惴惺愃愡惻惱愍愎慇愾愨愧慊愿愼愬愴愽慂慄慳慷慘慙慚慫慴慯慥慱慟慝慓慵憙憖憇憬憔憚憊憑憫憮懌懊應懷懈懃懆憺懋罹懍懦懣懶懺懴懿懽懼懾戀戈戉戍戌戔戛"
    	],
    	[
    		"d9a1",
    		"戞戡截戮戰戲戳扁扎扞扣扛扠扨扼抂抉找抒抓抖拔抃抔拗拑抻拏拿拆擔拈拜拌拊拂拇抛拉挌拮拱挧挂挈拯拵捐挾捍搜捏掖掎掀掫捶掣掏掉掟掵捫捩掾揩揀揆揣揉插揶揄搖搴搆搓搦搶攝搗搨搏摧摯摶摎攪撕撓撥撩撈撼"
    	],
    	[
    		"daa1",
    		"據擒擅擇撻擘擂擱擧舉擠擡抬擣擯攬擶擴擲擺攀擽攘攜攅攤攣攫攴攵攷收攸畋效敖敕敍敘敞敝敲數斂斃變斛斟斫斷旃旆旁旄旌旒旛旙无旡旱杲昊昃旻杳昵昶昴昜晏晄晉晁晞晝晤晧晨晟晢晰暃暈暎暉暄暘暝曁暹曉暾暼"
    	],
    	[
    		"dba1",
    		"曄暸曖曚曠昿曦曩曰曵曷朏朖朞朦朧霸朮朿朶杁朸朷杆杞杠杙杣杤枉杰枩杼杪枌枋枦枡枅枷柯枴柬枳柩枸柤柞柝柢柮枹柎柆柧檜栞框栩桀桍栲桎梳栫桙档桷桿梟梏梭梔條梛梃檮梹桴梵梠梺椏梍桾椁棊椈棘椢椦棡椌棍"
    	],
    	[
    		"dca1",
    		"棔棧棕椶椒椄棗棣椥棹棠棯椨椪椚椣椡棆楹楷楜楸楫楔楾楮椹楴椽楙椰楡楞楝榁楪榲榮槐榿槁槓榾槎寨槊槝榻槃榧樮榑榠榜榕榴槞槨樂樛槿權槹槲槧樅榱樞槭樔槫樊樒櫁樣樓橄樌橲樶橸橇橢橙橦橈樸樢檐檍檠檄檢檣"
    	],
    	[
    		"dda1",
    		"檗蘗檻櫃櫂檸檳檬櫞櫑櫟檪櫚櫪櫻欅蘖櫺欒欖鬱欟欸欷盜欹飮歇歃歉歐歙歔歛歟歡歸歹歿殀殄殃殍殘殕殞殤殪殫殯殲殱殳殷殼毆毋毓毟毬毫毳毯麾氈氓气氛氤氣汞汕汢汪沂沍沚沁沛汾汨汳沒沐泄泱泓沽泗泅泝沮沱沾"
    	],
    	[
    		"dea1",
    		"沺泛泯泙泪洟衍洶洫洽洸洙洵洳洒洌浣涓浤浚浹浙涎涕濤涅淹渕渊涵淇淦涸淆淬淞淌淨淒淅淺淙淤淕淪淮渭湮渮渙湲湟渾渣湫渫湶湍渟湃渺湎渤滿渝游溂溪溘滉溷滓溽溯滄溲滔滕溏溥滂溟潁漑灌滬滸滾漿滲漱滯漲滌"
    	],
    	[
    		"dfa1",
    		"漾漓滷澆潺潸澁澀潯潛濳潭澂潼潘澎澑濂潦澳澣澡澤澹濆澪濟濕濬濔濘濱濮濛瀉瀋濺瀑瀁瀏濾瀛瀚潴瀝瀘瀟瀰瀾瀲灑灣炙炒炯烱炬炸炳炮烟烋烝烙焉烽焜焙煥煕熈煦煢煌煖煬熏燻熄熕熨熬燗熹熾燒燉燔燎燠燬燧燵燼"
    	],
    	[
    		"e0a1",
    		"燹燿爍爐爛爨爭爬爰爲爻爼爿牀牆牋牘牴牾犂犁犇犒犖犢犧犹犲狃狆狄狎狒狢狠狡狹狷倏猗猊猜猖猝猴猯猩猥猾獎獏默獗獪獨獰獸獵獻獺珈玳珎玻珀珥珮珞璢琅瑯琥珸琲琺瑕琿瑟瑙瑁瑜瑩瑰瑣瑪瑶瑾璋璞璧瓊瓏瓔珱"
    	],
    	[
    		"e1a1",
    		"瓠瓣瓧瓩瓮瓲瓰瓱瓸瓷甄甃甅甌甎甍甕甓甞甦甬甼畄畍畊畉畛畆畚畩畤畧畫畭畸當疆疇畴疊疉疂疔疚疝疥疣痂疳痃疵疽疸疼疱痍痊痒痙痣痞痾痿痼瘁痰痺痲痳瘋瘍瘉瘟瘧瘠瘡瘢瘤瘴瘰瘻癇癈癆癜癘癡癢癨癩癪癧癬癰"
    	],
    	[
    		"e2a1",
    		"癲癶癸發皀皃皈皋皎皖皓皙皚皰皴皸皹皺盂盍盖盒盞盡盥盧盪蘯盻眈眇眄眩眤眞眥眦眛眷眸睇睚睨睫睛睥睿睾睹瞎瞋瞑瞠瞞瞰瞶瞹瞿瞼瞽瞻矇矍矗矚矜矣矮矼砌砒礦砠礪硅碎硴碆硼碚碌碣碵碪碯磑磆磋磔碾碼磅磊磬"
    	],
    	[
    		"e3a1",
    		"磧磚磽磴礇礒礑礙礬礫祀祠祗祟祚祕祓祺祿禊禝禧齋禪禮禳禹禺秉秕秧秬秡秣稈稍稘稙稠稟禀稱稻稾稷穃穗穉穡穢穩龝穰穹穽窈窗窕窘窖窩竈窰窶竅竄窿邃竇竊竍竏竕竓站竚竝竡竢竦竭竰笂笏笊笆笳笘笙笞笵笨笶筐"
    	],
    	[
    		"e4a1",
    		"筺笄筍笋筌筅筵筥筴筧筰筱筬筮箝箘箟箍箜箚箋箒箏筝箙篋篁篌篏箴篆篝篩簑簔篦篥籠簀簇簓篳篷簗簍篶簣簧簪簟簷簫簽籌籃籔籏籀籐籘籟籤籖籥籬籵粃粐粤粭粢粫粡粨粳粲粱粮粹粽糀糅糂糘糒糜糢鬻糯糲糴糶糺紆"
    	],
    	[
    		"e5a1",
    		"紂紜紕紊絅絋紮紲紿紵絆絳絖絎絲絨絮絏絣經綉絛綏絽綛綺綮綣綵緇綽綫總綢綯緜綸綟綰緘緝緤緞緻緲緡縅縊縣縡縒縱縟縉縋縢繆繦縻縵縹繃縷縲縺繧繝繖繞繙繚繹繪繩繼繻纃緕繽辮繿纈纉續纒纐纓纔纖纎纛纜缸缺"
    	],
    	[
    		"e6a1",
    		"罅罌罍罎罐网罕罔罘罟罠罨罩罧罸羂羆羃羈羇羌羔羞羝羚羣羯羲羹羮羶羸譱翅翆翊翕翔翡翦翩翳翹飜耆耄耋耒耘耙耜耡耨耿耻聊聆聒聘聚聟聢聨聳聲聰聶聹聽聿肄肆肅肛肓肚肭冐肬胛胥胙胝胄胚胖脉胯胱脛脩脣脯腋"
    	],
    	[
    		"e7a1",
    		"隋腆脾腓腑胼腱腮腥腦腴膃膈膊膀膂膠膕膤膣腟膓膩膰膵膾膸膽臀臂膺臉臍臑臙臘臈臚臟臠臧臺臻臾舁舂舅與舊舍舐舖舩舫舸舳艀艙艘艝艚艟艤艢艨艪艫舮艱艷艸艾芍芒芫芟芻芬苡苣苟苒苴苳苺莓范苻苹苞茆苜茉苙"
    	],
    	[
    		"e8a1",
    		"茵茴茖茲茱荀茹荐荅茯茫茗茘莅莚莪莟莢莖茣莎莇莊荼莵荳荵莠莉莨菴萓菫菎菽萃菘萋菁菷萇菠菲萍萢萠莽萸蔆菻葭萪萼蕚蒄葷葫蒭葮蒂葩葆萬葯葹萵蓊葢蒹蒿蒟蓙蓍蒻蓚蓐蓁蓆蓖蒡蔡蓿蓴蔗蔘蔬蔟蔕蔔蓼蕀蕣蕘蕈"
    	],
    	[
    		"e9a1",
    		"蕁蘂蕋蕕薀薤薈薑薊薨蕭薔薛藪薇薜蕷蕾薐藉薺藏薹藐藕藝藥藜藹蘊蘓蘋藾藺蘆蘢蘚蘰蘿虍乕虔號虧虱蚓蚣蚩蚪蚋蚌蚶蚯蛄蛆蚰蛉蠣蚫蛔蛞蛩蛬蛟蛛蛯蜒蜆蜈蜀蜃蛻蜑蜉蜍蛹蜊蜴蜿蜷蜻蜥蜩蜚蝠蝟蝸蝌蝎蝴蝗蝨蝮蝙"
    	],
    	[
    		"eaa1",
    		"蝓蝣蝪蠅螢螟螂螯蟋螽蟀蟐雖螫蟄螳蟇蟆螻蟯蟲蟠蠏蠍蟾蟶蟷蠎蟒蠑蠖蠕蠢蠡蠱蠶蠹蠧蠻衄衂衒衙衞衢衫袁衾袞衵衽袵衲袂袗袒袮袙袢袍袤袰袿袱裃裄裔裘裙裝裹褂裼裴裨裲褄褌褊褓襃褞褥褪褫襁襄褻褶褸襌褝襠襞"
    	],
    	[
    		"eba1",
    		"襦襤襭襪襯襴襷襾覃覈覊覓覘覡覩覦覬覯覲覺覽覿觀觚觜觝觧觴觸訃訖訐訌訛訝訥訶詁詛詒詆詈詼詭詬詢誅誂誄誨誡誑誥誦誚誣諄諍諂諚諫諳諧諤諱謔諠諢諷諞諛謌謇謚諡謖謐謗謠謳鞫謦謫謾謨譁譌譏譎證譖譛譚譫"
    	],
    	[
    		"eca1",
    		"譟譬譯譴譽讀讌讎讒讓讖讙讚谺豁谿豈豌豎豐豕豢豬豸豺貂貉貅貊貍貎貔豼貘戝貭貪貽貲貳貮貶賈賁賤賣賚賽賺賻贄贅贊贇贏贍贐齎贓賍贔贖赧赭赱赳趁趙跂趾趺跏跚跖跌跛跋跪跫跟跣跼踈踉跿踝踞踐踟蹂踵踰踴蹊"
    	],
    	[
    		"eda1",
    		"蹇蹉蹌蹐蹈蹙蹤蹠踪蹣蹕蹶蹲蹼躁躇躅躄躋躊躓躑躔躙躪躡躬躰軆躱躾軅軈軋軛軣軼軻軫軾輊輅輕輒輙輓輜輟輛輌輦輳輻輹轅轂輾轌轉轆轎轗轜轢轣轤辜辟辣辭辯辷迚迥迢迪迯邇迴逅迹迺逑逕逡逍逞逖逋逧逶逵逹迸"
    	],
    	[
    		"eea1",
    		"遏遐遑遒逎遉逾遖遘遞遨遯遶隨遲邂遽邁邀邊邉邏邨邯邱邵郢郤扈郛鄂鄒鄙鄲鄰酊酖酘酣酥酩酳酲醋醉醂醢醫醯醪醵醴醺釀釁釉釋釐釖釟釡釛釼釵釶鈞釿鈔鈬鈕鈑鉞鉗鉅鉉鉤鉈銕鈿鉋鉐銜銖銓銛鉚鋏銹銷鋩錏鋺鍄錮"
    	],
    	[
    		"efa1",
    		"錙錢錚錣錺錵錻鍜鍠鍼鍮鍖鎰鎬鎭鎔鎹鏖鏗鏨鏥鏘鏃鏝鏐鏈鏤鐚鐔鐓鐃鐇鐐鐶鐫鐵鐡鐺鑁鑒鑄鑛鑠鑢鑞鑪鈩鑰鑵鑷鑽鑚鑼鑾钁鑿閂閇閊閔閖閘閙閠閨閧閭閼閻閹閾闊濶闃闍闌闕闔闖關闡闥闢阡阨阮阯陂陌陏陋陷陜陞"
    	],
    	[
    		"f0a1",
    		"陝陟陦陲陬隍隘隕隗險隧隱隲隰隴隶隸隹雎雋雉雍襍雜霍雕雹霄霆霈霓霎霑霏霖霙霤霪霰霹霽霾靄靆靈靂靉靜靠靤靦靨勒靫靱靹鞅靼鞁靺鞆鞋鞏鞐鞜鞨鞦鞣鞳鞴韃韆韈韋韜韭齏韲竟韶韵頏頌頸頤頡頷頽顆顏顋顫顯顰"
    	],
    	[
    		"f1a1",
    		"顱顴顳颪颯颱颶飄飃飆飩飫餃餉餒餔餘餡餝餞餤餠餬餮餽餾饂饉饅饐饋饑饒饌饕馗馘馥馭馮馼駟駛駝駘駑駭駮駱駲駻駸騁騏騅駢騙騫騷驅驂驀驃騾驕驍驛驗驟驢驥驤驩驫驪骭骰骼髀髏髑髓體髞髟髢髣髦髯髫髮髴髱髷"
    	],
    	[
    		"f2a1",
    		"髻鬆鬘鬚鬟鬢鬣鬥鬧鬨鬩鬪鬮鬯鬲魄魃魏魍魎魑魘魴鮓鮃鮑鮖鮗鮟鮠鮨鮴鯀鯊鮹鯆鯏鯑鯒鯣鯢鯤鯔鯡鰺鯲鯱鯰鰕鰔鰉鰓鰌鰆鰈鰒鰊鰄鰮鰛鰥鰤鰡鰰鱇鰲鱆鰾鱚鱠鱧鱶鱸鳧鳬鳰鴉鴈鳫鴃鴆鴪鴦鶯鴣鴟鵄鴕鴒鵁鴿鴾鵆鵈"
    	],
    	[
    		"f3a1",
    		"鵝鵞鵤鵑鵐鵙鵲鶉鶇鶫鵯鵺鶚鶤鶩鶲鷄鷁鶻鶸鶺鷆鷏鷂鷙鷓鷸鷦鷭鷯鷽鸚鸛鸞鹵鹹鹽麁麈麋麌麒麕麑麝麥麩麸麪麭靡黌黎黏黐黔黜點黝黠黥黨黯黴黶黷黹黻黼黽鼇鼈皷鼕鼡鼬鼾齊齒齔齣齟齠齡齦齧齬齪齷齲齶龕龜龠"
    	],
    	[
    		"f4a1",
    		"堯槇遙瑤凜熙"
    	],
    	[
    		"f9a1",
    		"纊褜鍈銈蓜俉炻昱棈鋹曻彅丨仡仼伀伃伹佖侒侊侚侔俍偀倢俿倞偆偰偂傔僴僘兊兤冝冾凬刕劜劦勀勛匀匇匤卲厓厲叝﨎咜咊咩哿喆坙坥垬埈埇﨏塚增墲夋奓奛奝奣妤妺孖寀甯寘寬尞岦岺峵崧嵓﨑嵂嵭嶸嶹巐弡弴彧德"
    	],
    	[
    		"faa1",
    		"忞恝悅悊惞惕愠惲愑愷愰憘戓抦揵摠撝擎敎昀昕昻昉昮昞昤晥晗晙晴晳暙暠暲暿曺朎朗杦枻桒柀栁桄棏﨓楨﨔榘槢樰橫橆橳橾櫢櫤毖氿汜沆汯泚洄涇浯涖涬淏淸淲淼渹湜渧渼溿澈澵濵瀅瀇瀨炅炫焏焄煜煆煇凞燁燾犱"
    	],
    	[
    		"fba1",
    		"犾猤猪獷玽珉珖珣珒琇珵琦琪琩琮瑢璉璟甁畯皂皜皞皛皦益睆劯砡硎硤硺礰礼神祥禔福禛竑竧靖竫箞精絈絜綷綠緖繒罇羡羽茁荢荿菇菶葈蒴蕓蕙蕫﨟薰蘒﨡蠇裵訒訷詹誧誾諟諸諶譓譿賰賴贒赶﨣軏﨤逸遧郞都鄕鄧釚"
    	],
    	[
    		"fca1",
    		"釗釞釭釮釤釥鈆鈐鈊鈺鉀鈼鉎鉙鉑鈹鉧銧鉷鉸鋧鋗鋙鋐﨧鋕鋠鋓錥錡鋻﨨錞鋿錝錂鍰鍗鎤鏆鏞鏸鐱鑅鑈閒隆﨩隝隯霳霻靃靍靏靑靕顗顥飯飼餧館馞驎髙髜魵魲鮏鮱鮻鰀鵰鵫鶴鸙黑"
    	],
    	[
    		"fcf1",
    		"ⅰ",
    		9,
    		"￢￤＇＂"
    	],
    	[
    		"8fa2af",
    		"˘ˇ¸˙˝¯˛˚～΄΅"
    	],
    	[
    		"8fa2c2",
    		"¡¦¿"
    	],
    	[
    		"8fa2eb",
    		"ºª©®™¤№"
    	],
    	[
    		"8fa6e1",
    		"ΆΈΉΊΪ"
    	],
    	[
    		"8fa6e7",
    		"Ό"
    	],
    	[
    		"8fa6e9",
    		"ΎΫ"
    	],
    	[
    		"8fa6ec",
    		"Ώ"
    	],
    	[
    		"8fa6f1",
    		"άέήίϊΐόςύϋΰώ"
    	],
    	[
    		"8fa7c2",
    		"Ђ",
    		10,
    		"ЎЏ"
    	],
    	[
    		"8fa7f2",
    		"ђ",
    		10,
    		"ўџ"
    	],
    	[
    		"8fa9a1",
    		"ÆĐ"
    	],
    	[
    		"8fa9a4",
    		"Ħ"
    	],
    	[
    		"8fa9a6",
    		"Ĳ"
    	],
    	[
    		"8fa9a8",
    		"ŁĿ"
    	],
    	[
    		"8fa9ab",
    		"ŊØŒ"
    	],
    	[
    		"8fa9af",
    		"ŦÞ"
    	],
    	[
    		"8fa9c1",
    		"æđðħıĳĸłŀŉŋøœßŧþ"
    	],
    	[
    		"8faaa1",
    		"ÁÀÄÂĂǍĀĄÅÃĆĈČÇĊĎÉÈËÊĚĖĒĘ"
    	],
    	[
    		"8faaba",
    		"ĜĞĢĠĤÍÌÏÎǏİĪĮĨĴĶĹĽĻŃŇŅÑÓÒÖÔǑŐŌÕŔŘŖŚŜŠŞŤŢÚÙÜÛŬǓŰŪŲŮŨǗǛǙǕŴÝŸŶŹŽŻ"
    	],
    	[
    		"8faba1",
    		"áàäâăǎāąåãćĉčçċďéèëêěėēęǵĝğ"
    	],
    	[
    		"8fabbd",
    		"ġĥíìïîǐ"
    	],
    	[
    		"8fabc5",
    		"īįĩĵķĺľļńňņñóòöôǒőōõŕřŗśŝšşťţúùüûŭǔűūųůũǘǜǚǖŵýÿŷźžż"
    	],
    	[
    		"8fb0a1",
    		"丂丄丅丌丒丟丣两丨丫丮丯丰丵乀乁乄乇乑乚乜乣乨乩乴乵乹乿亍亖亗亝亯亹仃仐仚仛仠仡仢仨仯仱仳仵份仾仿伀伂伃伈伋伌伒伕伖众伙伮伱你伳伵伷伹伻伾佀佂佈佉佋佌佒佔佖佘佟佣佪佬佮佱佷佸佹佺佽佾侁侂侄"
    	],
    	[
    		"8fb1a1",
    		"侅侉侊侌侎侐侒侓侔侗侙侚侞侟侲侷侹侻侼侽侾俀俁俅俆俈俉俋俌俍俏俒俜俠俢俰俲俼俽俿倀倁倄倇倊倌倎倐倓倗倘倛倜倝倞倢倧倮倰倲倳倵偀偁偂偅偆偊偌偎偑偒偓偗偙偟偠偢偣偦偧偪偭偰偱倻傁傃傄傆傊傎傏傐"
    	],
    	[
    		"8fb2a1",
    		"傒傓傔傖傛傜傞",
    		4,
    		"傪傯傰傹傺傽僀僃僄僇僌僎僐僓僔僘僜僝僟僢僤僦僨僩僯僱僶僺僾儃儆儇儈儋儌儍儎僲儐儗儙儛儜儝儞儣儧儨儬儭儯儱儳儴儵儸儹兂兊兏兓兕兗兘兟兤兦兾冃冄冋冎冘冝冡冣冭冸冺冼冾冿凂"
    	],
    	[
    		"8fb3a1",
    		"凈减凑凒凓凕凘凞凢凥凮凲凳凴凷刁刂刅划刓刕刖刘刢刨刱刲刵刼剅剉剕剗剘剚剜剟剠剡剦剮剷剸剹劀劂劅劊劌劓劕劖劗劘劚劜劤劥劦劧劯劰劶劷劸劺劻劽勀勄勆勈勌勏勑勔勖勛勜勡勥勨勩勪勬勰勱勴勶勷匀匃匊匋"
    	],
    	[
    		"8fb4a1",
    		"匌匑匓匘匛匜匞匟匥匧匨匩匫匬匭匰匲匵匼匽匾卂卌卋卙卛卡卣卥卬卭卲卹卾厃厇厈厎厓厔厙厝厡厤厪厫厯厲厴厵厷厸厺厽叀叅叏叒叓叕叚叝叞叠另叧叵吂吓吚吡吧吨吪启吱吴吵呃呄呇呍呏呞呢呤呦呧呩呫呭呮呴呿"
    	],
    	[
    		"8fb5a1",
    		"咁咃咅咈咉咍咑咕咖咜咟咡咦咧咩咪咭咮咱咷咹咺咻咿哆哊响哎哠哪哬哯哶哼哾哿唀唁唅唈唉唌唍唎唕唪唫唲唵唶唻唼唽啁啇啉啊啍啐啑啘啚啛啞啠啡啤啦啿喁喂喆喈喎喏喑喒喓喔喗喣喤喭喲喿嗁嗃嗆嗉嗋嗌嗎嗑嗒"
    	],
    	[
    		"8fb6a1",
    		"嗓嗗嗘嗛嗞嗢嗩嗶嗿嘅嘈嘊嘍",
    		5,
    		"嘙嘬嘰嘳嘵嘷嘹嘻嘼嘽嘿噀噁噃噄噆噉噋噍噏噔噞噠噡噢噣噦噩噭噯噱噲噵嚄嚅嚈嚋嚌嚕嚙嚚嚝嚞嚟嚦嚧嚨嚩嚫嚬嚭嚱嚳嚷嚾囅囉囊囋囏囐囌囍囙囜囝囟囡囤",
    		4,
    		"囱囫园"
    	],
    	[
    		"8fb7a1",
    		"囶囷圁圂圇圊圌圑圕圚圛圝圠圢圣圤圥圩圪圬圮圯圳圴圽圾圿坅坆坌坍坒坢坥坧坨坫坭",
    		4,
    		"坳坴坵坷坹坺坻坼坾垁垃垌垔垗垙垚垜垝垞垟垡垕垧垨垩垬垸垽埇埈埌埏埕埝埞埤埦埧埩埭埰埵埶埸埽埾埿堃堄堈堉埡"
    	],
    	[
    		"8fb8a1",
    		"堌堍堛堞堟堠堦堧堭堲堹堿塉塌塍塏塐塕塟塡塤塧塨塸塼塿墀墁墇墈墉墊墌墍墏墐墔墖墝墠墡墢墦墩墱墲壄墼壂壈壍壎壐壒壔壖壚壝壡壢壩壳夅夆夋夌夒夓夔虁夝夡夣夤夨夯夰夳夵夶夿奃奆奒奓奙奛奝奞奟奡奣奫奭"
    	],
    	[
    		"8fb9a1",
    		"奯奲奵奶她奻奼妋妌妎妒妕妗妟妤妧妭妮妯妰妳妷妺妼姁姃姄姈姊姍姒姝姞姟姣姤姧姮姯姱姲姴姷娀娄娌娍娎娒娓娞娣娤娧娨娪娭娰婄婅婇婈婌婐婕婞婣婥婧婭婷婺婻婾媋媐媓媖媙媜媞媟媠媢媧媬媱媲媳媵媸媺媻媿"
    	],
    	[
    		"8fbaa1",
    		"嫄嫆嫈嫏嫚嫜嫠嫥嫪嫮嫵嫶嫽嬀嬁嬈嬗嬴嬙嬛嬝嬡嬥嬭嬸孁孋孌孒孖孞孨孮孯孼孽孾孿宁宄宆宊宎宐宑宓宔宖宨宩宬宭宯宱宲宷宺宼寀寁寍寏寖",
    		4,
    		"寠寯寱寴寽尌尗尞尟尣尦尩尫尬尮尰尲尵尶屙屚屜屢屣屧屨屩"
    	],
    	[
    		"8fbba1",
    		"屭屰屴屵屺屻屼屽岇岈岊岏岒岝岟岠岢岣岦岪岲岴岵岺峉峋峒峝峗峮峱峲峴崁崆崍崒崫崣崤崦崧崱崴崹崽崿嵂嵃嵆嵈嵕嵑嵙嵊嵟嵠嵡嵢嵤嵪嵭嵰嵹嵺嵾嵿嶁嶃嶈嶊嶒嶓嶔嶕嶙嶛嶟嶠嶧嶫嶰嶴嶸嶹巃巇巋巐巎巘巙巠巤"
    	],
    	[
    		"8fbca1",
    		"巩巸巹帀帇帍帒帔帕帘帟帠帮帨帲帵帾幋幐幉幑幖幘幛幜幞幨幪",
    		4,
    		"幰庀庋庎庢庤庥庨庪庬庱庳庽庾庿廆廌廋廎廑廒廔廕廜廞廥廫异弆弇弈弎弙弜弝弡弢弣弤弨弫弬弮弰弴弶弻弽弿彀彄彅彇彍彐彔彘彛彠彣彤彧"
    	],
    	[
    		"8fbda1",
    		"彯彲彴彵彸彺彽彾徉徍徏徖徜徝徢徧徫徤徬徯徰徱徸忄忇忈忉忋忐",
    		4,
    		"忞忡忢忨忩忪忬忭忮忯忲忳忶忺忼怇怊怍怓怔怗怘怚怟怤怭怳怵恀恇恈恉恌恑恔恖恗恝恡恧恱恾恿悂悆悈悊悎悑悓悕悘悝悞悢悤悥您悰悱悷"
    	],
    	[
    		"8fbea1",
    		"悻悾惂惄惈惉惊惋惎惏惔惕惙惛惝惞惢惥惲惵惸惼惽愂愇愊愌愐",
    		4,
    		"愖愗愙愜愞愢愪愫愰愱愵愶愷愹慁慅慆慉慞慠慬慲慸慻慼慿憀憁憃憄憋憍憒憓憗憘憜憝憟憠憥憨憪憭憸憹憼懀懁懂懎懏懕懜懝懞懟懡懢懧懩懥"
    	],
    	[
    		"8fbfa1",
    		"懬懭懯戁戃戄戇戓戕戜戠戢戣戧戩戫戹戽扂扃扄扆扌扐扑扒扔扖扚扜扤扭扯扳扺扽抍抎抏抐抦抨抳抶抷抺抾抿拄拎拕拖拚拪拲拴拼拽挃挄挊挋挍挐挓挖挘挩挪挭挵挶挹挼捁捂捃捄捆捊捋捎捒捓捔捘捛捥捦捬捭捱捴捵"
    	],
    	[
    		"8fc0a1",
    		"捸捼捽捿掂掄掇掊掐掔掕掙掚掞掤掦掭掮掯掽揁揅揈揎揑揓揔揕揜揠揥揪揬揲揳揵揸揹搉搊搐搒搔搘搞搠搢搤搥搩搪搯搰搵搽搿摋摏摑摒摓摔摚摛摜摝摟摠摡摣摭摳摴摻摽撅撇撏撐撑撘撙撛撝撟撡撣撦撨撬撳撽撾撿"
    	],
    	[
    		"8fc1a1",
    		"擄擉擊擋擌擎擐擑擕擗擤擥擩擪擭擰擵擷擻擿攁攄攈攉攊攏攓攔攖攙攛攞攟攢攦攩攮攱攺攼攽敃敇敉敐敒敔敟敠敧敫敺敽斁斅斊斒斕斘斝斠斣斦斮斲斳斴斿旂旈旉旎旐旔旖旘旟旰旲旴旵旹旾旿昀昄昈昉昍昑昒昕昖昝"
    	],
    	[
    		"8fc2a1",
    		"昞昡昢昣昤昦昩昪昫昬昮昰昱昳昹昷晀晅晆晊晌晑晎晗晘晙晛晜晠晡曻晪晫晬晾晳晵晿晷晸晹晻暀晼暋暌暍暐暒暙暚暛暜暟暠暤暭暱暲暵暻暿曀曂曃曈曌曎曏曔曛曟曨曫曬曮曺朅朇朎朓朙朜朠朢朳朾杅杇杈杌杔杕杝"
    	],
    	[
    		"8fc3a1",
    		"杦杬杮杴杶杻极构枎枏枑枓枖枘枙枛枰枱枲枵枻枼枽柹柀柂柃柅柈柉柒柗柙柜柡柦柰柲柶柷桒栔栙栝栟栨栧栬栭栯栰栱栳栻栿桄桅桊桌桕桗桘桛桫桮",
    		4,
    		"桵桹桺桻桼梂梄梆梈梖梘梚梜梡梣梥梩梪梮梲梻棅棈棌棏"
    	],
    	[
    		"8fc4a1",
    		"棐棑棓棖棙棜棝棥棨棪棫棬棭棰棱棵棶棻棼棽椆椉椊椐椑椓椖椗椱椳椵椸椻楂楅楉楎楗楛楣楤楥楦楨楩楬楰楱楲楺楻楿榀榍榒榖榘榡榥榦榨榫榭榯榷榸榺榼槅槈槑槖槗槢槥槮槯槱槳槵槾樀樁樃樏樑樕樚樝樠樤樨樰樲"
    	],
    	[
    		"8fc5a1",
    		"樴樷樻樾樿橅橆橉橊橎橐橑橒橕橖橛橤橧橪橱橳橾檁檃檆檇檉檋檑檛檝檞檟檥檫檯檰檱檴檽檾檿櫆櫉櫈櫌櫐櫔櫕櫖櫜櫝櫤櫧櫬櫰櫱櫲櫼櫽欂欃欆欇欉欏欐欑欗欛欞欤欨欫欬欯欵欶欻欿歆歊歍歒歖歘歝歠歧歫歮歰歵歽"
    	],
    	[
    		"8fc6a1",
    		"歾殂殅殗殛殟殠殢殣殨殩殬殭殮殰殸殹殽殾毃毄毉毌毖毚毡毣毦毧毮毱毷毹毿氂氄氅氉氍氎氐氒氙氟氦氧氨氬氮氳氵氶氺氻氿汊汋汍汏汒汔汙汛汜汫汭汯汴汶汸汹汻沅沆沇沉沔沕沗沘沜沟沰沲沴泂泆泍泏泐泑泒泔泖"
    	],
    	[
    		"8fc7a1",
    		"泚泜泠泧泩泫泬泮泲泴洄洇洊洎洏洑洓洚洦洧洨汧洮洯洱洹洼洿浗浞浟浡浥浧浯浰浼涂涇涑涒涔涖涗涘涪涬涴涷涹涽涿淄淈淊淎淏淖淛淝淟淠淢淥淩淯淰淴淶淼渀渄渞渢渧渲渶渹渻渼湄湅湈湉湋湏湑湒湓湔湗湜湝湞"
    	],
    	[
    		"8fc8a1",
    		"湢湣湨湳湻湽溍溓溙溠溧溭溮溱溳溻溿滀滁滃滇滈滊滍滎滏滫滭滮滹滻滽漄漈漊漌漍漖漘漚漛漦漩漪漯漰漳漶漻漼漭潏潑潒潓潗潙潚潝潞潡潢潨潬潽潾澃澇澈澋澌澍澐澒澓澔澖澚澟澠澥澦澧澨澮澯澰澵澶澼濅濇濈濊"
    	],
    	[
    		"8fc9a1",
    		"濚濞濨濩濰濵濹濼濽瀀瀅瀆瀇瀍瀗瀠瀣瀯瀴瀷瀹瀼灃灄灈灉灊灋灔灕灝灞灎灤灥灬灮灵灶灾炁炅炆炔",
    		4,
    		"炛炤炫炰炱炴炷烊烑烓烔烕烖烘烜烤烺焃",
    		4,
    		"焋焌焏焞焠焫焭焯焰焱焸煁煅煆煇煊煋煐煒煗煚煜煞煠"
    	],
    	[
    		"8fcaa1",
    		"煨煹熀熅熇熌熒熚熛熠熢熯熰熲熳熺熿燀燁燄燋燌燓燖燙燚燜燸燾爀爇爈爉爓爗爚爝爟爤爫爯爴爸爹牁牂牃牅牎牏牐牓牕牖牚牜牞牠牣牨牫牮牯牱牷牸牻牼牿犄犉犍犎犓犛犨犭犮犱犴犾狁狇狉狌狕狖狘狟狥狳狴狺狻"
    	],
    	[
    		"8fcba1",
    		"狾猂猄猅猇猋猍猒猓猘猙猞猢猤猧猨猬猱猲猵猺猻猽獃獍獐獒獖獘獝獞獟獠獦獧獩獫獬獮獯獱獷獹獼玀玁玃玅玆玎玐玓玕玗玘玜玞玟玠玢玥玦玪玫玭玵玷玹玼玽玿珅珆珉珋珌珏珒珓珖珙珝珡珣珦珧珩珴珵珷珹珺珻珽"
    	],
    	[
    		"8fcca1",
    		"珿琀琁琄琇琊琑琚琛琤琦琨",
    		9,
    		"琹瑀瑃瑄瑆瑇瑋瑍瑑瑒瑗瑝瑢瑦瑧瑨瑫瑭瑮瑱瑲璀璁璅璆璇璉璏璐璑璒璘璙璚璜璟璠璡璣璦璨璩璪璫璮璯璱璲璵璹璻璿瓈瓉瓌瓐瓓瓘瓚瓛瓞瓟瓤瓨瓪瓫瓯瓴瓺瓻瓼瓿甆"
    	],
    	[
    		"8fcda1",
    		"甒甖甗甠甡甤甧甩甪甯甶甹甽甾甿畀畃畇畈畎畐畒畗畞畟畡畯畱畹",
    		5,
    		"疁疅疐疒疓疕疙疜疢疤疴疺疿痀痁痄痆痌痎痏痗痜痟痠痡痤痧痬痮痯痱痹瘀瘂瘃瘄瘇瘈瘊瘌瘏瘒瘓瘕瘖瘙瘛瘜瘝瘞瘣瘥瘦瘩瘭瘲瘳瘵瘸瘹"
    	],
    	[
    		"8fcea1",
    		"瘺瘼癊癀癁癃癄癅癉癋癕癙癟癤癥癭癮癯癱癴皁皅皌皍皕皛皜皝皟皠皢",
    		6,
    		"皪皭皽盁盅盉盋盌盎盔盙盠盦盨盬盰盱盶盹盼眀眆眊眎眒眔眕眗眙眚眜眢眨眭眮眯眴眵眶眹眽眾睂睅睆睊睍睎睏睒睖睗睜睞睟睠睢"
    	],
    	[
    		"8fcfa1",
    		"睤睧睪睬睰睲睳睴睺睽瞀瞄瞌瞍瞔瞕瞖瞚瞟瞢瞧瞪瞮瞯瞱瞵瞾矃矉矑矒矕矙矞矟矠矤矦矪矬矰矱矴矸矻砅砆砉砍砎砑砝砡砢砣砭砮砰砵砷硃硄硇硈硌硎硒硜硞硠硡硣硤硨硪确硺硾碊碏碔碘碡碝碞碟碤碨碬碭碰碱碲碳"
    	],
    	[
    		"8fd0a1",
    		"碻碽碿磇磈磉磌磎磒磓磕磖磤磛磟磠磡磦磪磲磳礀磶磷磺磻磿礆礌礐礚礜礞礟礠礥礧礩礭礱礴礵礻礽礿祄祅祆祊祋祏祑祔祘祛祜祧祩祫祲祹祻祼祾禋禌禑禓禔禕禖禘禛禜禡禨禩禫禯禱禴禸离秂秄秇秈秊秏秔秖秚秝秞"
    	],
    	[
    		"8fd1a1",
    		"秠秢秥秪秫秭秱秸秼稂稃稇稉稊稌稑稕稛稞稡稧稫稭稯稰稴稵稸稹稺穄穅穇穈穌穕穖穙穜穝穟穠穥穧穪穭穵穸穾窀窂窅窆窊窋窐窑窔窞窠窣窬窳窵窹窻窼竆竉竌竎竑竛竨竩竫竬竱竴竻竽竾笇笔笟笣笧笩笪笫笭笮笯笰"
    	],
    	[
    		"8fd2a1",
    		"笱笴笽笿筀筁筇筎筕筠筤筦筩筪筭筯筲筳筷箄箉箎箐箑箖箛箞箠箥箬箯箰箲箵箶箺箻箼箽篂篅篈篊篔篖篗篙篚篛篨篪篲篴篵篸篹篺篼篾簁簂簃簄簆簉簋簌簎簏簙簛簠簥簦簨簬簱簳簴簶簹簺籆籊籕籑籒籓籙",
    		5
    	],
    	[
    		"8fd3a1",
    		"籡籣籧籩籭籮籰籲籹籼籽粆粇粏粔粞粠粦粰粶粷粺粻粼粿糄糇糈糉糍糏糓糔糕糗糙糚糝糦糩糫糵紃紇紈紉紏紑紒紓紖紝紞紣紦紪紭紱紼紽紾絀絁絇絈絍絑絓絗絙絚絜絝絥絧絪絰絸絺絻絿綁綂綃綅綆綈綋綌綍綑綖綗綝"
    	],
    	[
    		"8fd4a1",
    		"綞綦綧綪綳綶綷綹緂",
    		4,
    		"緌緍緎緗緙縀緢緥緦緪緫緭緱緵緶緹緺縈縐縑縕縗縜縝縠縧縨縬縭縯縳縶縿繄繅繇繎繐繒繘繟繡繢繥繫繮繯繳繸繾纁纆纇纊纍纑纕纘纚纝纞缼缻缽缾缿罃罄罇罏罒罓罛罜罝罡罣罤罥罦罭"
    	],
    	[
    		"8fd5a1",
    		"罱罽罾罿羀羋羍羏羐羑羖羗羜羡羢羦羪羭羴羼羿翀翃翈翎翏翛翟翣翥翨翬翮翯翲翺翽翾翿耇耈耊耍耎耏耑耓耔耖耝耞耟耠耤耦耬耮耰耴耵耷耹耺耼耾聀聄聠聤聦聭聱聵肁肈肎肜肞肦肧肫肸肹胈胍胏胒胔胕胗胘胠胭胮"
    	],
    	[
    		"8fd6a1",
    		"胰胲胳胶胹胺胾脃脋脖脗脘脜脞脠脤脧脬脰脵脺脼腅腇腊腌腒腗腠腡腧腨腩腭腯腷膁膐膄膅膆膋膎膖膘膛膞膢膮膲膴膻臋臃臅臊臎臏臕臗臛臝臞臡臤臫臬臰臱臲臵臶臸臹臽臿舀舃舏舓舔舙舚舝舡舢舨舲舴舺艃艄艅艆"
    	],
    	[
    		"8fd7a1",
    		"艋艎艏艑艖艜艠艣艧艭艴艻艽艿芀芁芃芄芇芉芊芎芑芔芖芘芚芛芠芡芣芤芧芨芩芪芮芰芲芴芷芺芼芾芿苆苐苕苚苠苢苤苨苪苭苯苶苷苽苾茀茁茇茈茊茋荔茛茝茞茟茡茢茬茭茮茰茳茷茺茼茽荂荃荄荇荍荎荑荕荖荗荰荸"
    	],
    	[
    		"8fd8a1",
    		"荽荿莀莂莄莆莍莒莔莕莘莙莛莜莝莦莧莩莬莾莿菀菇菉菏菐菑菔菝荓菨菪菶菸菹菼萁萆萊萏萑萕萙莭萯萹葅葇葈葊葍葏葑葒葖葘葙葚葜葠葤葥葧葪葰葳葴葶葸葼葽蒁蒅蒒蒓蒕蒞蒦蒨蒩蒪蒯蒱蒴蒺蒽蒾蓀蓂蓇蓈蓌蓏蓓"
    	],
    	[
    		"8fd9a1",
    		"蓜蓧蓪蓯蓰蓱蓲蓷蔲蓺蓻蓽蔂蔃蔇蔌蔎蔐蔜蔞蔢蔣蔤蔥蔧蔪蔫蔯蔳蔴蔶蔿蕆蕏",
    		4,
    		"蕖蕙蕜",
    		6,
    		"蕤蕫蕯蕹蕺蕻蕽蕿薁薅薆薉薋薌薏薓薘薝薟薠薢薥薧薴薶薷薸薼薽薾薿藂藇藊藋藎薭藘藚藟藠藦藨藭藳藶藼"
    	],
    	[
    		"8fdaa1",
    		"藿蘀蘄蘅蘍蘎蘐蘑蘒蘘蘙蘛蘞蘡蘧蘩蘶蘸蘺蘼蘽虀虂虆虒虓虖虗虘虙虝虠",
    		4,
    		"虩虬虯虵虶虷虺蚍蚑蚖蚘蚚蚜蚡蚦蚧蚨蚭蚱蚳蚴蚵蚷蚸蚹蚿蛀蛁蛃蛅蛑蛒蛕蛗蛚蛜蛠蛣蛥蛧蚈蛺蛼蛽蜄蜅蜇蜋蜎蜏蜐蜓蜔蜙蜞蜟蜡蜣"
    	],
    	[
    		"8fdba1",
    		"蜨蜮蜯蜱蜲蜹蜺蜼蜽蜾蝀蝃蝅蝍蝘蝝蝡蝤蝥蝯蝱蝲蝻螃",
    		6,
    		"螋螌螐螓螕螗螘螙螞螠螣螧螬螭螮螱螵螾螿蟁蟈蟉蟊蟎蟕蟖蟙蟚蟜蟟蟢蟣蟤蟪蟫蟭蟱蟳蟸蟺蟿蠁蠃蠆蠉蠊蠋蠐蠙蠒蠓蠔蠘蠚蠛蠜蠞蠟蠨蠭蠮蠰蠲蠵"
    	],
    	[
    		"8fdca1",
    		"蠺蠼衁衃衅衈衉衊衋衎衑衕衖衘衚衜衟衠衤衩衱衹衻袀袘袚袛袜袟袠袨袪袺袽袾裀裊",
    		4,
    		"裑裒裓裛裞裧裯裰裱裵裷褁褆褍褎褏褕褖褘褙褚褜褠褦褧褨褰褱褲褵褹褺褾襀襂襅襆襉襏襒襗襚襛襜襡襢襣襫襮襰襳襵襺"
    	],
    	[
    		"8fdda1",
    		"襻襼襽覉覍覐覔覕覛覜覟覠覥覰覴覵覶覷覼觔",
    		4,
    		"觥觩觫觭觱觳觶觹觽觿訄訅訇訏訑訒訔訕訞訠訢訤訦訫訬訯訵訷訽訾詀詃詅詇詉詍詎詓詖詗詘詜詝詡詥詧詵詶詷詹詺詻詾詿誀誃誆誋誏誐誒誖誗誙誟誧誩誮誯誳"
    	],
    	[
    		"8fdea1",
    		"誶誷誻誾諃諆諈諉諊諑諓諔諕諗諝諟諬諰諴諵諶諼諿謅謆謋謑謜謞謟謊謭謰謷謼譂",
    		4,
    		"譈譒譓譔譙譍譞譣譭譶譸譹譼譾讁讄讅讋讍讏讔讕讜讞讟谸谹谽谾豅豇豉豋豏豑豓豔豗豘豛豝豙豣豤豦豨豩豭豳豵豶豻豾貆"
    	],
    	[
    		"8fdfa1",
    		"貇貋貐貒貓貙貛貜貤貹貺賅賆賉賋賏賖賕賙賝賡賨賬賯賰賲賵賷賸賾賿贁贃贉贒贗贛赥赩赬赮赿趂趄趈趍趐趑趕趞趟趠趦趫趬趯趲趵趷趹趻跀跅跆跇跈跊跎跑跔跕跗跙跤跥跧跬跰趼跱跲跴跽踁踄踅踆踋踑踔踖踠踡踢"
    	],
    	[
    		"8fe0a1",
    		"踣踦踧踱踳踶踷踸踹踽蹀蹁蹋蹍蹎蹏蹔蹛蹜蹝蹞蹡蹢蹩蹬蹭蹯蹰蹱蹹蹺蹻躂躃躉躐躒躕躚躛躝躞躢躧躩躭躮躳躵躺躻軀軁軃軄軇軏軑軔軜軨軮軰軱軷軹軺軭輀輂輇輈輏輐輖輗輘輞輠輡輣輥輧輨輬輭輮輴輵輶輷輺轀轁"
    	],
    	[
    		"8fe1a1",
    		"轃轇轏轑",
    		4,
    		"轘轝轞轥辝辠辡辤辥辦辵辶辸达迀迁迆迊迋迍运迒迓迕迠迣迤迨迮迱迵迶迻迾适逄逈逌逘逛逨逩逯逪逬逭逳逴逷逿遃遄遌遛遝遢遦遧遬遰遴遹邅邈邋邌邎邐邕邗邘邙邛邠邡邢邥邰邲邳邴邶邽郌邾郃"
    	],
    	[
    		"8fe2a1",
    		"郄郅郇郈郕郗郘郙郜郝郟郥郒郶郫郯郰郴郾郿鄀鄄鄅鄆鄈鄍鄐鄔鄖鄗鄘鄚鄜鄞鄠鄥鄢鄣鄧鄩鄮鄯鄱鄴鄶鄷鄹鄺鄼鄽酃酇酈酏酓酗酙酚酛酡酤酧酭酴酹酺酻醁醃醅醆醊醎醑醓醔醕醘醞醡醦醨醬醭醮醰醱醲醳醶醻醼醽醿"
    	],
    	[
    		"8fe3a1",
    		"釂釃釅釓釔釗釙釚釞釤釥釩釪釬",
    		5,
    		"釷釹釻釽鈀鈁鈄鈅鈆鈇鈉鈊鈌鈐鈒鈓鈖鈘鈜鈝鈣鈤鈥鈦鈨鈮鈯鈰鈳鈵鈶鈸鈹鈺鈼鈾鉀鉂鉃鉆鉇鉊鉍鉎鉏鉑鉘鉙鉜鉝鉠鉡鉥鉧鉨鉩鉮鉯鉰鉵",
    		4,
    		"鉻鉼鉽鉿銈銉銊銍銎銒銗"
    	],
    	[
    		"8fe4a1",
    		"銙銟銠銤銥銧銨銫銯銲銶銸銺銻銼銽銿",
    		4,
    		"鋅鋆鋇鋈鋋鋌鋍鋎鋐鋓鋕鋗鋘鋙鋜鋝鋟鋠鋡鋣鋥鋧鋨鋬鋮鋰鋹鋻鋿錀錂錈錍錑錔錕錜錝錞錟錡錤錥錧錩錪錳錴錶錷鍇鍈鍉鍐鍑鍒鍕鍗鍘鍚鍞鍤鍥鍧鍩鍪鍭鍯鍰鍱鍳鍴鍶"
    	],
    	[
    		"8fe5a1",
    		"鍺鍽鍿鎀鎁鎂鎈鎊鎋鎍鎏鎒鎕鎘鎛鎞鎡鎣鎤鎦鎨鎫鎴鎵鎶鎺鎩鏁鏄鏅鏆鏇鏉",
    		4,
    		"鏓鏙鏜鏞鏟鏢鏦鏧鏹鏷鏸鏺鏻鏽鐁鐂鐄鐈鐉鐍鐎鐏鐕鐖鐗鐟鐮鐯鐱鐲鐳鐴鐻鐿鐽鑃鑅鑈鑊鑌鑕鑙鑜鑟鑡鑣鑨鑫鑭鑮鑯鑱鑲钄钃镸镹"
    	],
    	[
    		"8fe6a1",
    		"镾閄閈閌閍閎閝閞閟閡閦閩閫閬閴閶閺閽閿闆闈闉闋闐闑闒闓闙闚闝闞闟闠闤闦阝阞阢阤阥阦阬阱阳阷阸阹阺阼阽陁陒陔陖陗陘陡陮陴陻陼陾陿隁隂隃隄隉隑隖隚隝隟隤隥隦隩隮隯隳隺雊雒嶲雘雚雝雞雟雩雯雱雺霂"
    	],
    	[
    		"8fe7a1",
    		"霃霅霉霚霛霝霡霢霣霨霱霳靁靃靊靎靏靕靗靘靚靛靣靧靪靮靳靶靷靸靻靽靿鞀鞉鞕鞖鞗鞙鞚鞞鞟鞢鞬鞮鞱鞲鞵鞶鞸鞹鞺鞼鞾鞿韁韄韅韇韉韊韌韍韎韐韑韔韗韘韙韝韞韠韛韡韤韯韱韴韷韸韺頇頊頙頍頎頔頖頜頞頠頣頦"
    	],
    	[
    		"8fe8a1",
    		"頫頮頯頰頲頳頵頥頾顄顇顊顑顒顓顖顗顙顚顢顣顥顦顪顬颫颭颮颰颴颷颸颺颻颿飂飅飈飌飡飣飥飦飧飪飳飶餂餇餈餑餕餖餗餚餛餜餟餢餦餧餫餱",
    		4,
    		"餹餺餻餼饀饁饆饇饈饍饎饔饘饙饛饜饞饟饠馛馝馟馦馰馱馲馵"
    	],
    	[
    		"8fe9a1",
    		"馹馺馽馿駃駉駓駔駙駚駜駞駧駪駫駬駰駴駵駹駽駾騂騃騄騋騌騐騑騖騞騠騢騣騤騧騭騮騳騵騶騸驇驁驄驊驋驌驎驑驔驖驝骪骬骮骯骲骴骵骶骹骻骾骿髁髃髆髈髎髐髒髕髖髗髛髜髠髤髥髧髩髬髲髳髵髹髺髽髿",
    		4
    	],
    	[
    		"8feaa1",
    		"鬄鬅鬈鬉鬋鬌鬍鬎鬐鬒鬖鬙鬛鬜鬠鬦鬫鬭鬳鬴鬵鬷鬹鬺鬽魈魋魌魕魖魗魛魞魡魣魥魦魨魪",
    		4,
    		"魳魵魷魸魹魿鮀鮄鮅鮆鮇鮉鮊鮋鮍鮏鮐鮔鮚鮝鮞鮦鮧鮩鮬鮰鮱鮲鮷鮸鮻鮼鮾鮿鯁鯇鯈鯎鯐鯗鯘鯝鯟鯥鯧鯪鯫鯯鯳鯷鯸"
    	],
    	[
    		"8feba1",
    		"鯹鯺鯽鯿鰀鰂鰋鰏鰑鰖鰘鰙鰚鰜鰞鰢鰣鰦",
    		4,
    		"鰱鰵鰶鰷鰽鱁鱃鱄鱅鱉鱊鱎鱏鱐鱓鱔鱖鱘鱛鱝鱞鱟鱣鱩鱪鱜鱫鱨鱮鱰鱲鱵鱷鱻鳦鳲鳷鳹鴋鴂鴑鴗鴘鴜鴝鴞鴯鴰鴲鴳鴴鴺鴼鵅鴽鵂鵃鵇鵊鵓鵔鵟鵣鵢鵥鵩鵪鵫鵰鵶鵷鵻"
    	],
    	[
    		"8feca1",
    		"鵼鵾鶃鶄鶆鶊鶍鶎鶒鶓鶕鶖鶗鶘鶡鶪鶬鶮鶱鶵鶹鶼鶿鷃鷇鷉鷊鷔鷕鷖鷗鷚鷞鷟鷠鷥鷧鷩鷫鷮鷰鷳鷴鷾鸊鸂鸇鸎鸐鸑鸒鸕鸖鸙鸜鸝鹺鹻鹼麀麂麃麄麅麇麎麏麖麘麛麞麤麨麬麮麯麰麳麴麵黆黈黋黕黟黤黧黬黭黮黰黱黲黵"
    	],
    	[
    		"8feda1",
    		"黸黿鼂鼃鼉鼏鼐鼑鼒鼔鼖鼗鼙鼚鼛鼟鼢鼦鼪鼫鼯鼱鼲鼴鼷鼹鼺鼼鼽鼿齁齃",
    		4,
    		"齓齕齖齗齘齚齝齞齨齩齭",
    		4,
    		"齳齵齺齽龏龐龑龒龔龖龗龞龡龢龣龥"
    	]
    ];

    var require$$2$1 = [
    	[
    		"0",
    		"\u0000",
    		127,
    		"€"
    	],
    	[
    		"8140",
    		"丂丄丅丆丏丒丗丟丠両丣並丩丮丯丱丳丵丷丼乀乁乂乄乆乊乑乕乗乚乛乢乣乤乥乧乨乪",
    		5,
    		"乲乴",
    		9,
    		"乿",
    		6,
    		"亇亊"
    	],
    	[
    		"8180",
    		"亐亖亗亙亜亝亞亣亪亯亰亱亴亶亷亸亹亼亽亾仈仌仏仐仒仚仛仜仠仢仦仧仩仭仮仯仱仴仸仹仺仼仾伀伂",
    		6,
    		"伋伌伒",
    		4,
    		"伜伝伡伣伨伩伬伭伮伱伳伵伷伹伻伾",
    		4,
    		"佄佅佇",
    		5,
    		"佒佔佖佡佢佦佨佪佫佭佮佱佲併佷佸佹佺佽侀侁侂侅來侇侊侌侎侐侒侓侕侖侘侙侚侜侞侟価侢"
    	],
    	[
    		"8240",
    		"侤侫侭侰",
    		4,
    		"侶",
    		8,
    		"俀俁係俆俇俈俉俋俌俍俒",
    		4,
    		"俙俛俠俢俤俥俧俫俬俰俲俴俵俶俷俹俻俼俽俿",
    		11
    	],
    	[
    		"8280",
    		"個倎倐們倓倕倖倗倛倝倞倠倢倣値倧倫倯",
    		10,
    		"倻倽倿偀偁偂偄偅偆偉偊偋偍偐",
    		4,
    		"偖偗偘偙偛偝",
    		7,
    		"偦",
    		5,
    		"偭",
    		8,
    		"偸偹偺偼偽傁傂傃傄傆傇傉傊傋傌傎",
    		20,
    		"傤傦傪傫傭",
    		4,
    		"傳",
    		6,
    		"傼"
    	],
    	[
    		"8340",
    		"傽",
    		17,
    		"僐",
    		5,
    		"僗僘僙僛",
    		10,
    		"僨僩僪僫僯僰僱僲僴僶",
    		4,
    		"僼",
    		9,
    		"儈"
    	],
    	[
    		"8380",
    		"儉儊儌",
    		5,
    		"儓",
    		13,
    		"儢",
    		28,
    		"兂兇兊兌兎兏児兒兓兗兘兙兛兝",
    		4,
    		"兣兤兦內兩兪兯兲兺兾兿冃冄円冇冊冋冎冏冐冑冓冔冘冚冝冞冟冡冣冦",
    		4,
    		"冭冮冴冸冹冺冾冿凁凂凃凅凈凊凍凎凐凒",
    		5
    	],
    	[
    		"8440",
    		"凘凙凚凜凞凟凢凣凥",
    		5,
    		"凬凮凱凲凴凷凾刄刅刉刋刌刏刐刓刔刕刜刞刟刡刢刣別刦刧刪刬刯刱刲刴刵刼刾剄",
    		5,
    		"剋剎剏剒剓剕剗剘"
    	],
    	[
    		"8480",
    		"剙剚剛剝剟剠剢剣剤剦剨剫剬剭剮剰剱剳",
    		9,
    		"剾劀劃",
    		4,
    		"劉",
    		6,
    		"劑劒劔",
    		6,
    		"劜劤劥劦劧劮劯劰労",
    		9,
    		"勀勁勂勄勅勆勈勊勌勍勎勏勑勓勔動勗務",
    		5,
    		"勠勡勢勣勥",
    		10,
    		"勱",
    		7,
    		"勻勼勽匁匂匃匄匇匉匊匋匌匎"
    	],
    	[
    		"8540",
    		"匑匒匓匔匘匛匜匞匟匢匤匥匧匨匩匫匬匭匯",
    		9,
    		"匼匽區卂卄卆卋卌卍卐協単卙卛卝卥卨卪卬卭卲卶卹卻卼卽卾厀厁厃厇厈厊厎厏"
    	],
    	[
    		"8580",
    		"厐",
    		4,
    		"厖厗厙厛厜厞厠厡厤厧厪厫厬厭厯",
    		6,
    		"厷厸厹厺厼厽厾叀參",
    		4,
    		"収叏叐叒叓叕叚叜叝叞叡叢叧叴叺叾叿吀吂吅吇吋吔吘吙吚吜吢吤吥吪吰吳吶吷吺吽吿呁呂呄呅呇呉呌呍呎呏呑呚呝",
    		4,
    		"呣呥呧呩",
    		7,
    		"呴呹呺呾呿咁咃咅咇咈咉咊咍咑咓咗咘咜咞咟咠咡"
    	],
    	[
    		"8640",
    		"咢咥咮咰咲咵咶咷咹咺咼咾哃哅哊哋哖哘哛哠",
    		4,
    		"哫哬哯哰哱哴",
    		5,
    		"哻哾唀唂唃唄唅唈唊",
    		4,
    		"唒唓唕",
    		5,
    		"唜唝唞唟唡唥唦"
    	],
    	[
    		"8680",
    		"唨唩唫唭唲唴唵唶唸唹唺唻唽啀啂啅啇啈啋",
    		4,
    		"啑啒啓啔啗",
    		4,
    		"啝啞啟啠啢啣啨啩啫啯",
    		5,
    		"啹啺啽啿喅喆喌喍喎喐喒喓喕喖喗喚喛喞喠",
    		6,
    		"喨",
    		8,
    		"喲喴営喸喺喼喿",
    		4,
    		"嗆嗇嗈嗊嗋嗎嗏嗐嗕嗗",
    		4,
    		"嗞嗠嗢嗧嗩嗭嗮嗰嗱嗴嗶嗸",
    		4,
    		"嗿嘂嘃嘄嘅"
    	],
    	[
    		"8740",
    		"嘆嘇嘊嘋嘍嘐",
    		7,
    		"嘙嘚嘜嘝嘠嘡嘢嘥嘦嘨嘩嘪嘫嘮嘯嘰嘳嘵嘷嘸嘺嘼嘽嘾噀",
    		11,
    		"噏",
    		4,
    		"噕噖噚噛噝",
    		4
    	],
    	[
    		"8780",
    		"噣噥噦噧噭噮噯噰噲噳噴噵噷噸噹噺噽",
    		7,
    		"嚇",
    		6,
    		"嚐嚑嚒嚔",
    		14,
    		"嚤",
    		10,
    		"嚰",
    		6,
    		"嚸嚹嚺嚻嚽",
    		12,
    		"囋",
    		8,
    		"囕囖囘囙囜団囥",
    		5,
    		"囬囮囯囲図囶囷囸囻囼圀圁圂圅圇國",
    		6
    	],
    	[
    		"8840",
    		"園",
    		9,
    		"圝圞圠圡圢圤圥圦圧圫圱圲圴",
    		4,
    		"圼圽圿坁坃坄坅坆坈坉坋坒",
    		4,
    		"坘坙坢坣坥坧坬坮坰坱坲坴坵坸坹坺坽坾坿垀"
    	],
    	[
    		"8880",
    		"垁垇垈垉垊垍",
    		4,
    		"垔",
    		6,
    		"垜垝垞垟垥垨垪垬垯垰垱垳垵垶垷垹",
    		8,
    		"埄",
    		6,
    		"埌埍埐埑埓埖埗埛埜埞埡埢埣埥",
    		7,
    		"埮埰埱埲埳埵埶執埻埼埾埿堁堃堄堅堈堉堊堌堎堏堐堒堓堔堖堗堘堚堛堜堝堟堢堣堥",
    		4,
    		"堫",
    		4,
    		"報堲堳場堶",
    		7
    	],
    	[
    		"8940",
    		"堾",
    		5,
    		"塅",
    		6,
    		"塎塏塐塒塓塕塖塗塙",
    		4,
    		"塟",
    		5,
    		"塦",
    		4,
    		"塭",
    		16,
    		"塿墂墄墆墇墈墊墋墌"
    	],
    	[
    		"8980",
    		"墍",
    		4,
    		"墔",
    		4,
    		"墛墜墝墠",
    		7,
    		"墪",
    		17,
    		"墽墾墿壀壂壃壄壆",
    		10,
    		"壒壓壔壖",
    		13,
    		"壥",
    		5,
    		"壭壯壱売壴壵壷壸壺",
    		7,
    		"夃夅夆夈",
    		4,
    		"夎夐夑夒夓夗夘夛夝夞夠夡夢夣夦夨夬夰夲夳夵夶夻"
    	],
    	[
    		"8a40",
    		"夽夾夿奀奃奅奆奊奌奍奐奒奓奙奛",
    		4,
    		"奡奣奤奦",
    		12,
    		"奵奷奺奻奼奾奿妀妅妉妋妌妎妏妐妑妔妕妘妚妛妜妝妟妠妡妢妦"
    	],
    	[
    		"8a80",
    		"妧妬妭妰妱妳",
    		5,
    		"妺妼妽妿",
    		6,
    		"姇姈姉姌姍姎姏姕姖姙姛姞",
    		4,
    		"姤姦姧姩姪姫姭",
    		11,
    		"姺姼姽姾娀娂娊娋娍娎娏娐娒娔娕娖娗娙娚娛娝娞娡娢娤娦娧娨娪",
    		6,
    		"娳娵娷",
    		4,
    		"娽娾娿婁",
    		4,
    		"婇婈婋",
    		9,
    		"婖婗婘婙婛",
    		5
    	],
    	[
    		"8b40",
    		"婡婣婤婥婦婨婩婫",
    		8,
    		"婸婹婻婼婽婾媀",
    		17,
    		"媓",
    		6,
    		"媜",
    		13,
    		"媫媬"
    	],
    	[
    		"8b80",
    		"媭",
    		4,
    		"媴媶媷媹",
    		4,
    		"媿嫀嫃",
    		5,
    		"嫊嫋嫍",
    		4,
    		"嫓嫕嫗嫙嫚嫛嫝嫞嫟嫢嫤嫥嫧嫨嫪嫬",
    		4,
    		"嫲",
    		22,
    		"嬊",
    		11,
    		"嬘",
    		25,
    		"嬳嬵嬶嬸",
    		7,
    		"孁",
    		6
    	],
    	[
    		"8c40",
    		"孈",
    		7,
    		"孒孖孞孠孡孧孨孫孭孮孯孲孴孶孷學孹孻孼孾孿宂宆宊宍宎宐宑宒宔宖実宧宨宩宬宭宮宯宱宲宷宺宻宼寀寁寃寈寉寊寋寍寎寏"
    	],
    	[
    		"8c80",
    		"寑寔",
    		8,
    		"寠寢寣實寧審",
    		4,
    		"寯寱",
    		6,
    		"寽対尀専尃尅將專尋尌對導尐尒尓尗尙尛尞尟尠尡尣尦尨尩尪尫尭尮尯尰尲尳尵尶尷屃屄屆屇屌屍屒屓屔屖屗屘屚屛屜屝屟屢層屧",
    		6,
    		"屰屲",
    		6,
    		"屻屼屽屾岀岃",
    		4,
    		"岉岊岋岎岏岒岓岕岝",
    		4,
    		"岤",
    		4
    	],
    	[
    		"8d40",
    		"岪岮岯岰岲岴岶岹岺岻岼岾峀峂峃峅",
    		5,
    		"峌",
    		5,
    		"峓",
    		5,
    		"峚",
    		6,
    		"峢峣峧峩峫峬峮峯峱",
    		9,
    		"峼",
    		4
    	],
    	[
    		"8d80",
    		"崁崄崅崈",
    		5,
    		"崏",
    		4,
    		"崕崗崘崙崚崜崝崟",
    		4,
    		"崥崨崪崫崬崯",
    		4,
    		"崵",
    		7,
    		"崿",
    		7,
    		"嵈嵉嵍",
    		10,
    		"嵙嵚嵜嵞",
    		10,
    		"嵪嵭嵮嵰嵱嵲嵳嵵",
    		12,
    		"嶃",
    		21,
    		"嶚嶛嶜嶞嶟嶠"
    	],
    	[
    		"8e40",
    		"嶡",
    		21,
    		"嶸",
    		12,
    		"巆",
    		6,
    		"巎",
    		12,
    		"巜巟巠巣巤巪巬巭"
    	],
    	[
    		"8e80",
    		"巰巵巶巸",
    		4,
    		"巿帀帄帇帉帊帋帍帎帒帓帗帞",
    		7,
    		"帨",
    		4,
    		"帯帰帲",
    		4,
    		"帹帺帾帿幀幁幃幆",
    		5,
    		"幍",
    		6,
    		"幖",
    		4,
    		"幜幝幟幠幣",
    		14,
    		"幵幷幹幾庁庂広庅庈庉庌庍庎庒庘庛庝庡庢庣庤庨",
    		4,
    		"庮",
    		4,
    		"庴庺庻庼庽庿",
    		6
    	],
    	[
    		"8f40",
    		"廆廇廈廋",
    		5,
    		"廔廕廗廘廙廚廜",
    		11,
    		"廩廫",
    		8,
    		"廵廸廹廻廼廽弅弆弇弉弌弍弎弐弒弔弖弙弚弜弝弞弡弢弣弤"
    	],
    	[
    		"8f80",
    		"弨弫弬弮弰弲",
    		6,
    		"弻弽弾弿彁",
    		14,
    		"彑彔彙彚彛彜彞彟彠彣彥彧彨彫彮彯彲彴彵彶彸彺彽彾彿徃徆徍徎徏徑従徔徖徚徛徝從徟徠徢",
    		5,
    		"復徫徬徯",
    		5,
    		"徶徸徹徺徻徾",
    		4,
    		"忇忈忊忋忎忓忔忕忚忛応忞忟忢忣忥忦忨忩忬忯忰忲忳忴忶忷忹忺忼怇"
    	],
    	[
    		"9040",
    		"怈怉怋怌怐怑怓怗怘怚怞怟怢怣怤怬怭怮怰",
    		4,
    		"怶",
    		4,
    		"怽怾恀恄",
    		6,
    		"恌恎恏恑恓恔恖恗恘恛恜恞恟恠恡恥恦恮恱恲恴恵恷恾悀"
    	],
    	[
    		"9080",
    		"悁悂悅悆悇悈悊悋悎悏悐悑悓悕悗悘悙悜悞悡悢悤悥悧悩悪悮悰悳悵悶悷悹悺悽",
    		7,
    		"惇惈惉惌",
    		4,
    		"惒惓惔惖惗惙惛惞惡",
    		4,
    		"惪惱惲惵惷惸惻",
    		4,
    		"愂愃愄愅愇愊愋愌愐",
    		4,
    		"愖愗愘愙愛愜愝愞愡愢愥愨愩愪愬",
    		18,
    		"慀",
    		6
    	],
    	[
    		"9140",
    		"慇慉態慍慏慐慒慓慔慖",
    		6,
    		"慞慟慠慡慣慤慥慦慩",
    		6,
    		"慱慲慳慴慶慸",
    		18,
    		"憌憍憏",
    		4,
    		"憕"
    	],
    	[
    		"9180",
    		"憖",
    		6,
    		"憞",
    		8,
    		"憪憫憭",
    		9,
    		"憸",
    		5,
    		"憿懀懁懃",
    		4,
    		"應懌",
    		4,
    		"懓懕",
    		16,
    		"懧",
    		13,
    		"懶",
    		8,
    		"戀",
    		5,
    		"戇戉戓戔戙戜戝戞戠戣戦戧戨戩戫戭戯戰戱戲戵戶戸",
    		4,
    		"扂扄扅扆扊"
    	],
    	[
    		"9240",
    		"扏扐払扖扗扙扚扜",
    		6,
    		"扤扥扨扱扲扴扵扷扸扺扻扽抁抂抃抅抆抇抈抋",
    		5,
    		"抔抙抜抝択抣抦抧抩抪抭抮抯抰抲抳抴抶抷抸抺抾拀拁"
    	],
    	[
    		"9280",
    		"拃拋拏拑拕拝拞拠拡拤拪拫拰拲拵拸拹拺拻挀挃挄挅挆挊挋挌挍挏挐挒挓挔挕挗挘挙挜挦挧挩挬挭挮挰挱挳",
    		5,
    		"挻挼挾挿捀捁捄捇捈捊捑捒捓捔捖",
    		7,
    		"捠捤捥捦捨捪捫捬捯捰捲捳捴捵捸捹捼捽捾捿掁掃掄掅掆掋掍掑掓掔掕掗掙",
    		6,
    		"採掤掦掫掯掱掲掵掶掹掻掽掿揀"
    	],
    	[
    		"9340",
    		"揁揂揃揅揇揈揊揋揌揑揓揔揕揗",
    		6,
    		"揟揢揤",
    		4,
    		"揫揬揮揯揰揱揳揵揷揹揺揻揼揾搃搄搆",
    		4,
    		"損搎搑搒搕",
    		5,
    		"搝搟搢搣搤"
    	],
    	[
    		"9380",
    		"搥搧搨搩搫搮",
    		5,
    		"搵",
    		4,
    		"搻搼搾摀摂摃摉摋",
    		6,
    		"摓摕摖摗摙",
    		4,
    		"摟",
    		7,
    		"摨摪摫摬摮",
    		9,
    		"摻",
    		6,
    		"撃撆撈",
    		8,
    		"撓撔撗撘撚撛撜撝撟",
    		4,
    		"撥撦撧撨撪撫撯撱撲撳撴撶撹撻撽撾撿擁擃擄擆",
    		6,
    		"擏擑擓擔擕擖擙據"
    	],
    	[
    		"9440",
    		"擛擜擝擟擠擡擣擥擧",
    		24,
    		"攁",
    		7,
    		"攊",
    		7,
    		"攓",
    		4,
    		"攙",
    		8
    	],
    	[
    		"9480",
    		"攢攣攤攦",
    		4,
    		"攬攭攰攱攲攳攷攺攼攽敀",
    		4,
    		"敆敇敊敋敍敎敐敒敓敔敗敘敚敜敟敠敡敤敥敧敨敩敪敭敮敯敱敳敵敶數",
    		14,
    		"斈斉斊斍斎斏斒斔斕斖斘斚斝斞斠斢斣斦斨斪斬斮斱",
    		7,
    		"斺斻斾斿旀旂旇旈旉旊旍旐旑旓旔旕旘",
    		7,
    		"旡旣旤旪旫"
    	],
    	[
    		"9540",
    		"旲旳旴旵旸旹旻",
    		4,
    		"昁昄昅昇昈昉昋昍昐昑昒昖昗昘昚昛昜昞昡昢昣昤昦昩昪昫昬昮昰昲昳昷",
    		4,
    		"昽昿晀時晄",
    		6,
    		"晍晎晐晑晘"
    	],
    	[
    		"9580",
    		"晙晛晜晝晞晠晢晣晥晧晩",
    		4,
    		"晱晲晳晵晸晹晻晼晽晿暀暁暃暅暆暈暉暊暋暍暎暏暐暒暓暔暕暘",
    		4,
    		"暞",
    		8,
    		"暩",
    		4,
    		"暯",
    		4,
    		"暵暶暷暸暺暻暼暽暿",
    		25,
    		"曚曞",
    		7,
    		"曧曨曪",
    		5,
    		"曱曵曶書曺曻曽朁朂會"
    	],
    	[
    		"9640",
    		"朄朅朆朇朌朎朏朑朒朓朖朘朙朚朜朞朠",
    		5,
    		"朧朩朮朰朲朳朶朷朸朹朻朼朾朿杁杄杅杇杊杋杍杒杔杕杗",
    		4,
    		"杝杢杣杤杦杧杫杬杮東杴杶"
    	],
    	[
    		"9680",
    		"杸杹杺杻杽枀枂枃枅枆枈枊枌枍枎枏枑枒枓枔枖枙枛枟枠枡枤枦枩枬枮枱枲枴枹",
    		7,
    		"柂柅",
    		9,
    		"柕柖柗柛柟柡柣柤柦柧柨柪柫柭柮柲柵",
    		7,
    		"柾栁栂栃栄栆栍栐栒栔栕栘",
    		4,
    		"栞栟栠栢",
    		6,
    		"栫",
    		6,
    		"栴栵栶栺栻栿桇桋桍桏桒桖",
    		5
    	],
    	[
    		"9740",
    		"桜桝桞桟桪桬",
    		7,
    		"桵桸",
    		8,
    		"梂梄梇",
    		7,
    		"梐梑梒梔梕梖梘",
    		9,
    		"梣梤梥梩梪梫梬梮梱梲梴梶梷梸"
    	],
    	[
    		"9780",
    		"梹",
    		6,
    		"棁棃",
    		5,
    		"棊棌棎棏棐棑棓棔棖棗棙棛",
    		4,
    		"棡棢棤",
    		9,
    		"棯棲棳棴棶棷棸棻棽棾棿椀椂椃椄椆",
    		4,
    		"椌椏椑椓",
    		11,
    		"椡椢椣椥",
    		7,
    		"椮椯椱椲椳椵椶椷椸椺椻椼椾楀楁楃",
    		16,
    		"楕楖楘楙楛楜楟"
    	],
    	[
    		"9840",
    		"楡楢楤楥楧楨楩楪楬業楯楰楲",
    		4,
    		"楺楻楽楾楿榁榃榅榊榋榌榎",
    		5,
    		"榖榗榙榚榝",
    		9,
    		"榩榪榬榮榯榰榲榳榵榶榸榹榺榼榽"
    	],
    	[
    		"9880",
    		"榾榿槀槂",
    		7,
    		"構槍槏槑槒槓槕",
    		5,
    		"槜槝槞槡",
    		11,
    		"槮槯槰槱槳",
    		9,
    		"槾樀",
    		9,
    		"樋",
    		11,
    		"標",
    		5,
    		"樠樢",
    		5,
    		"権樫樬樭樮樰樲樳樴樶",
    		6,
    		"樿",
    		4,
    		"橅橆橈",
    		7,
    		"橑",
    		6,
    		"橚"
    	],
    	[
    		"9940",
    		"橜",
    		4,
    		"橢橣橤橦",
    		10,
    		"橲",
    		6,
    		"橺橻橽橾橿檁檂檃檅",
    		8,
    		"檏檒",
    		4,
    		"檘",
    		7,
    		"檡",
    		5
    	],
    	[
    		"9980",
    		"檧檨檪檭",
    		114,
    		"欥欦欨",
    		6
    	],
    	[
    		"9a40",
    		"欯欰欱欳欴欵欶欸欻欼欽欿歀歁歂歄歅歈歊歋歍",
    		11,
    		"歚",
    		7,
    		"歨歩歫",
    		13,
    		"歺歽歾歿殀殅殈"
    	],
    	[
    		"9a80",
    		"殌殎殏殐殑殔殕殗殘殙殜",
    		4,
    		"殢",
    		7,
    		"殫",
    		7,
    		"殶殸",
    		6,
    		"毀毃毄毆",
    		4,
    		"毌毎毐毑毘毚毜",
    		4,
    		"毢",
    		7,
    		"毬毭毮毰毱毲毴毶毷毸毺毻毼毾",
    		6,
    		"氈",
    		4,
    		"氎氒気氜氝氞氠氣氥氫氬氭氱氳氶氷氹氺氻氼氾氿汃汄汅汈汋",
    		4,
    		"汑汒汓汖汘"
    	],
    	[
    		"9b40",
    		"汙汚汢汣汥汦汧汫",
    		4,
    		"汱汳汵汷汸決汻汼汿沀沄沇沊沋沍沎沑沒沕沖沗沘沚沜沝沞沠沢沨沬沯沰沴沵沶沷沺泀況泂泃泆泇泈泋泍泎泏泑泒泘"
    	],
    	[
    		"9b80",
    		"泙泚泜泝泟泤泦泧泩泬泭泲泴泹泿洀洂洃洅洆洈洉洊洍洏洐洑洓洔洕洖洘洜洝洟",
    		5,
    		"洦洨洩洬洭洯洰洴洶洷洸洺洿浀浂浄浉浌浐浕浖浗浘浛浝浟浡浢浤浥浧浨浫浬浭浰浱浲浳浵浶浹浺浻浽",
    		4,
    		"涃涄涆涇涊涋涍涏涐涒涖",
    		4,
    		"涜涢涥涬涭涰涱涳涴涶涷涹",
    		5,
    		"淁淂淃淈淉淊"
    	],
    	[
    		"9c40",
    		"淍淎淏淐淒淓淔淕淗淚淛淜淟淢淣淥淧淨淩淪淭淯淰淲淴淵淶淸淺淽",
    		7,
    		"渆渇済渉渋渏渒渓渕渘渙減渜渞渟渢渦渧渨渪測渮渰渱渳渵"
    	],
    	[
    		"9c80",
    		"渶渷渹渻",
    		7,
    		"湅",
    		7,
    		"湏湐湑湒湕湗湙湚湜湝湞湠",
    		10,
    		"湬湭湯",
    		14,
    		"満溁溂溄溇溈溊",
    		4,
    		"溑",
    		6,
    		"溙溚溛溝溞溠溡溣溤溦溨溩溫溬溭溮溰溳溵溸溹溼溾溿滀滃滄滅滆滈滉滊滌滍滎滐滒滖滘滙滛滜滝滣滧滪",
    		5
    	],
    	[
    		"9d40",
    		"滰滱滲滳滵滶滷滸滺",
    		7,
    		"漃漄漅漇漈漊",
    		4,
    		"漐漑漒漖",
    		9,
    		"漡漢漣漥漦漧漨漬漮漰漲漴漵漷",
    		6,
    		"漿潀潁潂"
    	],
    	[
    		"9d80",
    		"潃潄潅潈潉潊潌潎",
    		9,
    		"潙潚潛潝潟潠潡潣潤潥潧",
    		5,
    		"潯潰潱潳潵潶潷潹潻潽",
    		6,
    		"澅澆澇澊澋澏",
    		12,
    		"澝澞澟澠澢",
    		4,
    		"澨",
    		10,
    		"澴澵澷澸澺",
    		5,
    		"濁濃",
    		5,
    		"濊",
    		6,
    		"濓",
    		10,
    		"濟濢濣濤濥"
    	],
    	[
    		"9e40",
    		"濦",
    		7,
    		"濰",
    		32,
    		"瀒",
    		7,
    		"瀜",
    		6,
    		"瀤",
    		6
    	],
    	[
    		"9e80",
    		"瀫",
    		9,
    		"瀶瀷瀸瀺",
    		17,
    		"灍灎灐",
    		13,
    		"灟",
    		11,
    		"灮灱灲灳灴灷灹灺灻災炁炂炃炄炆炇炈炋炌炍炏炐炑炓炗炘炚炛炞",
    		12,
    		"炰炲炴炵炶為炾炿烄烅烆烇烉烋",
    		12,
    		"烚"
    	],
    	[
    		"9f40",
    		"烜烝烞烠烡烢烣烥烪烮烰",
    		6,
    		"烸烺烻烼烾",
    		10,
    		"焋",
    		4,
    		"焑焒焔焗焛",
    		10,
    		"焧",
    		7,
    		"焲焳焴"
    	],
    	[
    		"9f80",
    		"焵焷",
    		13,
    		"煆煇煈煉煋煍煏",
    		12,
    		"煝煟",
    		4,
    		"煥煩",
    		4,
    		"煯煰煱煴煵煶煷煹煻煼煾",
    		5,
    		"熅",
    		4,
    		"熋熌熍熎熐熑熒熓熕熖熗熚",
    		4,
    		"熡",
    		6,
    		"熩熪熫熭",
    		5,
    		"熴熶熷熸熺",
    		8,
    		"燄",
    		9,
    		"燏",
    		4
    	],
    	[
    		"a040",
    		"燖",
    		9,
    		"燡燢燣燤燦燨",
    		5,
    		"燯",
    		9,
    		"燺",
    		11,
    		"爇",
    		19
    	],
    	[
    		"a080",
    		"爛爜爞",
    		9,
    		"爩爫爭爮爯爲爳爴爺爼爾牀",
    		6,
    		"牉牊牋牎牏牐牑牓牔牕牗牘牚牜牞牠牣牤牥牨牪牫牬牭牰牱牳牴牶牷牸牻牼牽犂犃犅",
    		4,
    		"犌犎犐犑犓",
    		11,
    		"犠",
    		11,
    		"犮犱犲犳犵犺",
    		6,
    		"狅狆狇狉狊狋狌狏狑狓狔狕狖狘狚狛"
    	],
    	[
    		"a1a1",
    		"　、。·ˉˇ¨〃々—～‖…‘’“”〔〕〈",
    		7,
    		"〖〗【】±×÷∶∧∨∑∏∪∩∈∷√⊥∥∠⌒⊙∫∮≡≌≈∽∝≠≮≯≤≥∞∵∴♂♀°′″℃＄¤￠￡‰§№☆★○●◎◇◆□■△▲※→←↑↓〓"
    	],
    	[
    		"a2a1",
    		"ⅰ",
    		9
    	],
    	[
    		"a2b1",
    		"⒈",
    		19,
    		"⑴",
    		19,
    		"①",
    		9
    	],
    	[
    		"a2e5",
    		"㈠",
    		9
    	],
    	[
    		"a2f1",
    		"Ⅰ",
    		11
    	],
    	[
    		"a3a1",
    		"！＂＃￥％",
    		88,
    		"￣"
    	],
    	[
    		"a4a1",
    		"ぁ",
    		82
    	],
    	[
    		"a5a1",
    		"ァ",
    		85
    	],
    	[
    		"a6a1",
    		"Α",
    		16,
    		"Σ",
    		6
    	],
    	[
    		"a6c1",
    		"α",
    		16,
    		"σ",
    		6
    	],
    	[
    		"a6e0",
    		"︵︶︹︺︿﹀︽︾﹁﹂﹃﹄"
    	],
    	[
    		"a6ee",
    		"︻︼︷︸︱"
    	],
    	[
    		"a6f4",
    		"︳︴"
    	],
    	[
    		"a7a1",
    		"А",
    		5,
    		"ЁЖ",
    		25
    	],
    	[
    		"a7d1",
    		"а",
    		5,
    		"ёж",
    		25
    	],
    	[
    		"a840",
    		"ˊˋ˙–―‥‵℅℉↖↗↘↙∕∟∣≒≦≧⊿═",
    		35,
    		"▁",
    		6
    	],
    	[
    		"a880",
    		"█",
    		7,
    		"▓▔▕▼▽◢◣◤◥☉⊕〒〝〞"
    	],
    	[
    		"a8a1",
    		"āáǎàēéěèīíǐìōóǒòūúǔùǖǘǚǜüêɑ"
    	],
    	[
    		"a8bd",
    		"ńň"
    	],
    	[
    		"a8c0",
    		"ɡ"
    	],
    	[
    		"a8c5",
    		"ㄅ",
    		36
    	],
    	[
    		"a940",
    		"〡",
    		8,
    		"㊣㎎㎏㎜㎝㎞㎡㏄㏎㏑㏒㏕︰￢￤"
    	],
    	[
    		"a959",
    		"℡㈱"
    	],
    	[
    		"a95c",
    		"‐"
    	],
    	[
    		"a960",
    		"ー゛゜ヽヾ〆ゝゞ﹉",
    		9,
    		"﹔﹕﹖﹗﹙",
    		8
    	],
    	[
    		"a980",
    		"﹢",
    		4,
    		"﹨﹩﹪﹫"
    	],
    	[
    		"a996",
    		"〇"
    	],
    	[
    		"a9a4",
    		"─",
    		75
    	],
    	[
    		"aa40",
    		"狜狝狟狢",
    		5,
    		"狪狫狵狶狹狽狾狿猀猂猄",
    		5,
    		"猋猌猍猏猐猑猒猔猘猙猚猟猠猣猤猦猧猨猭猯猰猲猳猵猶猺猻猼猽獀",
    		8
    	],
    	[
    		"aa80",
    		"獉獊獋獌獎獏獑獓獔獕獖獘",
    		7,
    		"獡",
    		10,
    		"獮獰獱"
    	],
    	[
    		"ab40",
    		"獲",
    		11,
    		"獿",
    		4,
    		"玅玆玈玊玌玍玏玐玒玓玔玕玗玘玙玚玜玝玞玠玡玣",
    		5,
    		"玪玬玭玱玴玵玶玸玹玼玽玾玿珁珃",
    		4
    	],
    	[
    		"ab80",
    		"珋珌珎珒",
    		6,
    		"珚珛珜珝珟珡珢珣珤珦珨珪珫珬珮珯珰珱珳",
    		4
    	],
    	[
    		"ac40",
    		"珸",
    		10,
    		"琄琇琈琋琌琍琎琑",
    		8,
    		"琜",
    		5,
    		"琣琤琧琩琫琭琯琱琲琷",
    		4,
    		"琽琾琿瑀瑂",
    		11
    	],
    	[
    		"ac80",
    		"瑎",
    		6,
    		"瑖瑘瑝瑠",
    		12,
    		"瑮瑯瑱",
    		4,
    		"瑸瑹瑺"
    	],
    	[
    		"ad40",
    		"瑻瑼瑽瑿璂璄璅璆璈璉璊璌璍璏璑",
    		10,
    		"璝璟",
    		7,
    		"璪",
    		15,
    		"璻",
    		12
    	],
    	[
    		"ad80",
    		"瓈",
    		9,
    		"瓓",
    		8,
    		"瓝瓟瓡瓥瓧",
    		6,
    		"瓰瓱瓲"
    	],
    	[
    		"ae40",
    		"瓳瓵瓸",
    		6,
    		"甀甁甂甃甅",
    		7,
    		"甎甐甒甔甕甖甗甛甝甞甠",
    		4,
    		"甦甧甪甮甴甶甹甼甽甿畁畂畃畄畆畇畉畊畍畐畑畒畓畕畖畗畘"
    	],
    	[
    		"ae80",
    		"畝",
    		7,
    		"畧畨畩畫",
    		6,
    		"畳畵當畷畺",
    		4,
    		"疀疁疂疄疅疇"
    	],
    	[
    		"af40",
    		"疈疉疊疌疍疎疐疓疕疘疛疜疞疢疦",
    		4,
    		"疭疶疷疺疻疿痀痁痆痋痌痎痏痐痑痓痗痙痚痜痝痟痠痡痥痩痬痭痮痯痲痳痵痶痷痸痺痻痽痾瘂瘄瘆瘇"
    	],
    	[
    		"af80",
    		"瘈瘉瘋瘍瘎瘏瘑瘒瘓瘔瘖瘚瘜瘝瘞瘡瘣瘧瘨瘬瘮瘯瘱瘲瘶瘷瘹瘺瘻瘽癁療癄"
    	],
    	[
    		"b040",
    		"癅",
    		6,
    		"癎",
    		5,
    		"癕癗",
    		4,
    		"癝癟癠癡癢癤",
    		6,
    		"癬癭癮癰",
    		7,
    		"癹発發癿皀皁皃皅皉皊皌皍皏皐皒皔皕皗皘皚皛"
    	],
    	[
    		"b080",
    		"皜",
    		7,
    		"皥",
    		8,
    		"皯皰皳皵",
    		9,
    		"盀盁盃啊阿埃挨哎唉哀皑癌蔼矮艾碍爱隘鞍氨安俺按暗岸胺案肮昂盎凹敖熬翱袄傲奥懊澳芭捌扒叭吧笆八疤巴拔跋靶把耙坝霸罢爸白柏百摆佰败拜稗斑班搬扳般颁板版扮拌伴瓣半办绊邦帮梆榜膀绑棒磅蚌镑傍谤苞胞包褒剥"
    	],
    	[
    		"b140",
    		"盄盇盉盋盌盓盕盙盚盜盝盞盠",
    		4,
    		"盦",
    		7,
    		"盰盳盵盶盷盺盻盽盿眀眂眃眅眆眊県眎",
    		10,
    		"眛眜眝眞眡眣眤眥眧眪眫"
    	],
    	[
    		"b180",
    		"眬眮眰",
    		4,
    		"眹眻眽眾眿睂睄睅睆睈",
    		7,
    		"睒",
    		7,
    		"睜薄雹保堡饱宝抱报暴豹鲍爆杯碑悲卑北辈背贝钡倍狈备惫焙被奔苯本笨崩绷甭泵蹦迸逼鼻比鄙笔彼碧蓖蔽毕毙毖币庇痹闭敝弊必辟壁臂避陛鞭边编贬扁便变卞辨辩辫遍标彪膘表鳖憋别瘪彬斌濒滨宾摈兵冰柄丙秉饼炳"
    	],
    	[
    		"b240",
    		"睝睞睟睠睤睧睩睪睭",
    		11,
    		"睺睻睼瞁瞂瞃瞆",
    		5,
    		"瞏瞐瞓",
    		11,
    		"瞡瞣瞤瞦瞨瞫瞭瞮瞯瞱瞲瞴瞶",
    		4
    	],
    	[
    		"b280",
    		"瞼瞾矀",
    		12,
    		"矎",
    		8,
    		"矘矙矚矝",
    		4,
    		"矤病并玻菠播拨钵波博勃搏铂箔伯帛舶脖膊渤泊驳捕卜哺补埠不布步簿部怖擦猜裁材才财睬踩采彩菜蔡餐参蚕残惭惨灿苍舱仓沧藏操糙槽曹草厕策侧册测层蹭插叉茬茶查碴搽察岔差诧拆柴豺搀掺蝉馋谗缠铲产阐颤昌猖"
    	],
    	[
    		"b340",
    		"矦矨矪矯矰矱矲矴矵矷矹矺矻矼砃",
    		5,
    		"砊砋砎砏砐砓砕砙砛砞砠砡砢砤砨砪砫砮砯砱砲砳砵砶砽砿硁硂硃硄硆硈硉硊硋硍硏硑硓硔硘硙硚"
    	],
    	[
    		"b380",
    		"硛硜硞",
    		11,
    		"硯",
    		7,
    		"硸硹硺硻硽",
    		6,
    		"场尝常长偿肠厂敞畅唱倡超抄钞朝嘲潮巢吵炒车扯撤掣彻澈郴臣辰尘晨忱沉陈趁衬撑称城橙成呈乘程惩澄诚承逞骋秤吃痴持匙池迟弛驰耻齿侈尺赤翅斥炽充冲虫崇宠抽酬畴踌稠愁筹仇绸瞅丑臭初出橱厨躇锄雏滁除楚"
    	],
    	[
    		"b440",
    		"碄碅碆碈碊碋碏碐碒碔碕碖碙碝碞碠碢碤碦碨",
    		7,
    		"碵碶碷碸確碻碼碽碿磀磂磃磄磆磇磈磌磍磎磏磑磒磓磖磗磘磚",
    		9
    	],
    	[
    		"b480",
    		"磤磥磦磧磩磪磫磭",
    		4,
    		"磳磵磶磸磹磻",
    		5,
    		"礂礃礄礆",
    		6,
    		"础储矗搐触处揣川穿椽传船喘串疮窗幢床闯创吹炊捶锤垂春椿醇唇淳纯蠢戳绰疵茨磁雌辞慈瓷词此刺赐次聪葱囱匆从丛凑粗醋簇促蹿篡窜摧崔催脆瘁粹淬翠村存寸磋撮搓措挫错搭达答瘩打大呆歹傣戴带殆代贷袋待逮"
    	],
    	[
    		"b540",
    		"礍",
    		5,
    		"礔",
    		9,
    		"礟",
    		4,
    		"礥",
    		14,
    		"礵",
    		4,
    		"礽礿祂祃祄祅祇祊",
    		8,
    		"祔祕祘祙祡祣"
    	],
    	[
    		"b580",
    		"祤祦祩祪祫祬祮祰",
    		6,
    		"祹祻",
    		4,
    		"禂禃禆禇禈禉禋禌禍禎禐禑禒怠耽担丹单郸掸胆旦氮但惮淡诞弹蛋当挡党荡档刀捣蹈倒岛祷导到稻悼道盗德得的蹬灯登等瞪凳邓堤低滴迪敌笛狄涤翟嫡抵底地蒂第帝弟递缔颠掂滇碘点典靛垫电佃甸店惦奠淀殿碉叼雕凋刁掉吊钓调跌爹碟蝶迭谍叠"
    	],
    	[
    		"b640",
    		"禓",
    		6,
    		"禛",
    		11,
    		"禨",
    		10,
    		"禴",
    		4,
    		"禼禿秂秄秅秇秈秊秌秎秏秐秓秔秖秗秙",
    		5,
    		"秠秡秢秥秨秪"
    	],
    	[
    		"b680",
    		"秬秮秱",
    		6,
    		"秹秺秼秾秿稁稄稅稇稈稉稊稌稏",
    		4,
    		"稕稖稘稙稛稜丁盯叮钉顶鼎锭定订丢东冬董懂动栋侗恫冻洞兜抖斗陡豆逗痘都督毒犊独读堵睹赌杜镀肚度渡妒端短锻段断缎堆兑队对墩吨蹲敦顿囤钝盾遁掇哆多夺垛躲朵跺舵剁惰堕蛾峨鹅俄额讹娥恶厄扼遏鄂饿恩而儿耳尔饵洱二"
    	],
    	[
    		"b740",
    		"稝稟稡稢稤",
    		14,
    		"稴稵稶稸稺稾穀",
    		5,
    		"穇",
    		9,
    		"穒",
    		4,
    		"穘",
    		16
    	],
    	[
    		"b780",
    		"穩",
    		6,
    		"穱穲穳穵穻穼穽穾窂窅窇窉窊窋窌窎窏窐窓窔窙窚窛窞窡窢贰发罚筏伐乏阀法珐藩帆番翻樊矾钒繁凡烦反返范贩犯饭泛坊芳方肪房防妨仿访纺放菲非啡飞肥匪诽吠肺废沸费芬酚吩氛分纷坟焚汾粉奋份忿愤粪丰封枫蜂峰锋风疯烽逢冯缝讽奉凤佛否夫敷肤孵扶拂辐幅氟符伏俘服"
    	],
    	[
    		"b840",
    		"窣窤窧窩窪窫窮",
    		4,
    		"窴",
    		10,
    		"竀",
    		10,
    		"竌",
    		9,
    		"竗竘竚竛竜竝竡竢竤竧",
    		5,
    		"竮竰竱竲竳"
    	],
    	[
    		"b880",
    		"竴",
    		4,
    		"竻竼竾笀笁笂笅笇笉笌笍笎笐笒笓笖笗笘笚笜笝笟笡笢笣笧笩笭浮涪福袱弗甫抚辅俯釜斧脯腑府腐赴副覆赋复傅付阜父腹负富讣附妇缚咐噶嘎该改概钙盖溉干甘杆柑竿肝赶感秆敢赣冈刚钢缸肛纲岗港杠篙皋高膏羔糕搞镐稿告哥歌搁戈鸽胳疙割革葛格蛤阁隔铬个各给根跟耕更庚羹"
    	],
    	[
    		"b940",
    		"笯笰笲笴笵笶笷笹笻笽笿",
    		5,
    		"筆筈筊筍筎筓筕筗筙筜筞筟筡筣",
    		10,
    		"筯筰筳筴筶筸筺筼筽筿箁箂箃箄箆",
    		6,
    		"箎箏"
    	],
    	[
    		"b980",
    		"箑箒箓箖箘箙箚箛箞箟箠箣箤箥箮箯箰箲箳箵箶箷箹",
    		7,
    		"篂篃範埂耿梗工攻功恭龚供躬公宫弓巩汞拱贡共钩勾沟苟狗垢构购够辜菇咕箍估沽孤姑鼓古蛊骨谷股故顾固雇刮瓜剐寡挂褂乖拐怪棺关官冠观管馆罐惯灌贯光广逛瑰规圭硅归龟闺轨鬼诡癸桂柜跪贵刽辊滚棍锅郭国果裹过哈"
    	],
    	[
    		"ba40",
    		"篅篈築篊篋篍篎篏篐篒篔",
    		4,
    		"篛篜篞篟篠篢篣篤篧篨篩篫篬篭篯篰篲",
    		4,
    		"篸篹篺篻篽篿",
    		7,
    		"簈簉簊簍簎簐",
    		5,
    		"簗簘簙"
    	],
    	[
    		"ba80",
    		"簚",
    		4,
    		"簠",
    		5,
    		"簨簩簫",
    		12,
    		"簹",
    		5,
    		"籂骸孩海氦亥害骇酣憨邯韩含涵寒函喊罕翰撼捍旱憾悍焊汗汉夯杭航壕嚎豪毫郝好耗号浩呵喝荷菏核禾和何合盒貉阂河涸赫褐鹤贺嘿黑痕很狠恨哼亨横衡恒轰哄烘虹鸿洪宏弘红喉侯猴吼厚候后呼乎忽瑚壶葫胡蝴狐糊湖"
    	],
    	[
    		"bb40",
    		"籃",
    		9,
    		"籎",
    		36,
    		"籵",
    		5,
    		"籾",
    		9
    	],
    	[
    		"bb80",
    		"粈粊",
    		6,
    		"粓粔粖粙粚粛粠粡粣粦粧粨粩粫粬粭粯粰粴",
    		4,
    		"粺粻弧虎唬护互沪户花哗华猾滑画划化话槐徊怀淮坏欢环桓还缓换患唤痪豢焕涣宦幻荒慌黄磺蝗簧皇凰惶煌晃幌恍谎灰挥辉徽恢蛔回毁悔慧卉惠晦贿秽会烩汇讳诲绘荤昏婚魂浑混豁活伙火获或惑霍货祸击圾基机畸稽积箕"
    	],
    	[
    		"bc40",
    		"粿糀糂糃糄糆糉糋糎",
    		6,
    		"糘糚糛糝糞糡",
    		6,
    		"糩",
    		5,
    		"糰",
    		7,
    		"糹糺糼",
    		13,
    		"紋",
    		5
    	],
    	[
    		"bc80",
    		"紑",
    		14,
    		"紡紣紤紥紦紨紩紪紬紭紮細",
    		6,
    		"肌饥迹激讥鸡姬绩缉吉极棘辑籍集及急疾汲即嫉级挤几脊己蓟技冀季伎祭剂悸济寄寂计记既忌际妓继纪嘉枷夹佳家加荚颊贾甲钾假稼价架驾嫁歼监坚尖笺间煎兼肩艰奸缄茧检柬碱硷拣捡简俭剪减荐槛鉴践贱见键箭件"
    	],
    	[
    		"bd40",
    		"紷",
    		54,
    		"絯",
    		7
    	],
    	[
    		"bd80",
    		"絸",
    		32,
    		"健舰剑饯渐溅涧建僵姜将浆江疆蒋桨奖讲匠酱降蕉椒礁焦胶交郊浇骄娇嚼搅铰矫侥脚狡角饺缴绞剿教酵轿较叫窖揭接皆秸街阶截劫节桔杰捷睫竭洁结解姐戒藉芥界借介疥诫届巾筋斤金今津襟紧锦仅谨进靳晋禁近烬浸"
    	],
    	[
    		"be40",
    		"継",
    		12,
    		"綧",
    		6,
    		"綯",
    		42
    	],
    	[
    		"be80",
    		"線",
    		32,
    		"尽劲荆兢茎睛晶鲸京惊精粳经井警景颈静境敬镜径痉靖竟竞净炯窘揪究纠玖韭久灸九酒厩救旧臼舅咎就疚鞠拘狙疽居驹菊局咀矩举沮聚拒据巨具距踞锯俱句惧炬剧捐鹃娟倦眷卷绢撅攫抉掘倔爵觉决诀绝均菌钧军君峻"
    	],
    	[
    		"bf40",
    		"緻",
    		62
    	],
    	[
    		"bf80",
    		"縺縼",
    		4,
    		"繂",
    		4,
    		"繈",
    		21,
    		"俊竣浚郡骏喀咖卡咯开揩楷凯慨刊堪勘坎砍看康慷糠扛抗亢炕考拷烤靠坷苛柯棵磕颗科壳咳可渴克刻客课肯啃垦恳坑吭空恐孔控抠口扣寇枯哭窟苦酷库裤夸垮挎跨胯块筷侩快宽款匡筐狂框矿眶旷况亏盔岿窥葵奎魁傀"
    	],
    	[
    		"c040",
    		"繞",
    		35,
    		"纃",
    		23,
    		"纜纝纞"
    	],
    	[
    		"c080",
    		"纮纴纻纼绖绤绬绹缊缐缞缷缹缻",
    		6,
    		"罃罆",
    		9,
    		"罒罓馈愧溃坤昆捆困括扩廓阔垃拉喇蜡腊辣啦莱来赖蓝婪栏拦篮阑兰澜谰揽览懒缆烂滥琅榔狼廊郎朗浪捞劳牢老佬姥酪烙涝勒乐雷镭蕾磊累儡垒擂肋类泪棱楞冷厘梨犁黎篱狸离漓理李里鲤礼莉荔吏栗丽厉励砾历利傈例俐"
    	],
    	[
    		"c140",
    		"罖罙罛罜罝罞罠罣",
    		4,
    		"罫罬罭罯罰罳罵罶罷罸罺罻罼罽罿羀羂",
    		7,
    		"羋羍羏",
    		4,
    		"羕",
    		4,
    		"羛羜羠羢羣羥羦羨",
    		6,
    		"羱"
    	],
    	[
    		"c180",
    		"羳",
    		4,
    		"羺羻羾翀翂翃翄翆翇翈翉翋翍翏",
    		4,
    		"翖翗翙",
    		5,
    		"翢翣痢立粒沥隶力璃哩俩联莲连镰廉怜涟帘敛脸链恋炼练粮凉梁粱良两辆量晾亮谅撩聊僚疗燎寥辽潦了撂镣廖料列裂烈劣猎琳林磷霖临邻鳞淋凛赁吝拎玲菱零龄铃伶羚凌灵陵岭领另令溜琉榴硫馏留刘瘤流柳六龙聋咙笼窿"
    	],
    	[
    		"c240",
    		"翤翧翨翪翫翬翭翯翲翴",
    		6,
    		"翽翾翿耂耇耈耉耊耎耏耑耓耚耛耝耞耟耡耣耤耫",
    		5,
    		"耲耴耹耺耼耾聀聁聄聅聇聈聉聎聏聐聑聓聕聖聗"
    	],
    	[
    		"c280",
    		"聙聛",
    		13,
    		"聫",
    		5,
    		"聲",
    		11,
    		"隆垄拢陇楼娄搂篓漏陋芦卢颅庐炉掳卤虏鲁麓碌露路赂鹿潞禄录陆戮驴吕铝侣旅履屡缕虑氯律率滤绿峦挛孪滦卵乱掠略抡轮伦仑沦纶论萝螺罗逻锣箩骡裸落洛骆络妈麻玛码蚂马骂嘛吗埋买麦卖迈脉瞒馒蛮满蔓曼慢漫"
    	],
    	[
    		"c340",
    		"聾肁肂肅肈肊肍",
    		5,
    		"肔肕肗肙肞肣肦肧肨肬肰肳肵肶肸肹肻胅胇",
    		4,
    		"胏",
    		6,
    		"胘胟胠胢胣胦胮胵胷胹胻胾胿脀脁脃脄脅脇脈脋"
    	],
    	[
    		"c380",
    		"脌脕脗脙脛脜脝脟",
    		12,
    		"脭脮脰脳脴脵脷脹",
    		4,
    		"脿谩芒茫盲氓忙莽猫茅锚毛矛铆卯茂冒帽貌贸么玫枚梅酶霉煤没眉媒镁每美昧寐妹媚门闷们萌蒙檬盟锰猛梦孟眯醚靡糜迷谜弥米秘觅泌蜜密幂棉眠绵冕免勉娩缅面苗描瞄藐秒渺庙妙蔑灭民抿皿敏悯闽明螟鸣铭名命谬摸"
    	],
    	[
    		"c440",
    		"腀",
    		5,
    		"腇腉腍腎腏腒腖腗腘腛",
    		4,
    		"腡腢腣腤腦腨腪腫腬腯腲腳腵腶腷腸膁膃",
    		4,
    		"膉膋膌膍膎膐膒",
    		5,
    		"膙膚膞",
    		4,
    		"膤膥"
    	],
    	[
    		"c480",
    		"膧膩膫",
    		7,
    		"膴",
    		5,
    		"膼膽膾膿臄臅臇臈臉臋臍",
    		6,
    		"摹蘑模膜磨摩魔抹末莫墨默沫漠寞陌谋牟某拇牡亩姆母墓暮幕募慕木目睦牧穆拿哪呐钠那娜纳氖乃奶耐奈南男难囊挠脑恼闹淖呢馁内嫩能妮霓倪泥尼拟你匿腻逆溺蔫拈年碾撵捻念娘酿鸟尿捏聂孽啮镊镍涅您柠狞凝宁"
    	],
    	[
    		"c540",
    		"臔",
    		14,
    		"臤臥臦臨臩臫臮",
    		4,
    		"臵",
    		5,
    		"臽臿舃與",
    		4,
    		"舎舏舑舓舕",
    		5,
    		"舝舠舤舥舦舧舩舮舲舺舼舽舿"
    	],
    	[
    		"c580",
    		"艀艁艂艃艅艆艈艊艌艍艎艐",
    		7,
    		"艙艛艜艝艞艠",
    		7,
    		"艩拧泞牛扭钮纽脓浓农弄奴努怒女暖虐疟挪懦糯诺哦欧鸥殴藕呕偶沤啪趴爬帕怕琶拍排牌徘湃派攀潘盘磐盼畔判叛乓庞旁耪胖抛咆刨炮袍跑泡呸胚培裴赔陪配佩沛喷盆砰抨烹澎彭蓬棚硼篷膨朋鹏捧碰坯砒霹批披劈琵毗"
    	],
    	[
    		"c640",
    		"艪艫艬艭艱艵艶艷艸艻艼芀芁芃芅芆芇芉芌芐芓芔芕芖芚芛芞芠芢芣芧芲芵芶芺芻芼芿苀苂苃苅苆苉苐苖苙苚苝苢苧苨苩苪苬苭苮苰苲苳苵苶苸"
    	],
    	[
    		"c680",
    		"苺苼",
    		4,
    		"茊茋茍茐茒茓茖茘茙茝",
    		9,
    		"茩茪茮茰茲茷茻茽啤脾疲皮匹痞僻屁譬篇偏片骗飘漂瓢票撇瞥拼频贫品聘乒坪苹萍平凭瓶评屏坡泼颇婆破魄迫粕剖扑铺仆莆葡菩蒲埔朴圃普浦谱曝瀑期欺栖戚妻七凄漆柒沏其棋奇歧畦崎脐齐旗祈祁骑起岂乞企启契砌器气迄弃汽泣讫掐"
    	],
    	[
    		"c740",
    		"茾茿荁荂荄荅荈荊",
    		4,
    		"荓荕",
    		4,
    		"荝荢荰",
    		6,
    		"荹荺荾",
    		6,
    		"莇莈莊莋莌莍莏莐莑莔莕莖莗莙莚莝莟莡",
    		6,
    		"莬莭莮"
    	],
    	[
    		"c780",
    		"莯莵莻莾莿菂菃菄菆菈菉菋菍菎菐菑菒菓菕菗菙菚菛菞菢菣菤菦菧菨菫菬菭恰洽牵扦钎铅千迁签仟谦乾黔钱钳前潜遣浅谴堑嵌欠歉枪呛腔羌墙蔷强抢橇锹敲悄桥瞧乔侨巧鞘撬翘峭俏窍切茄且怯窃钦侵亲秦琴勤芹擒禽寝沁青轻氢倾卿清擎晴氰情顷请庆琼穷秋丘邱球求囚酋泅趋区蛆曲躯屈驱渠"
    	],
    	[
    		"c840",
    		"菮華菳",
    		4,
    		"菺菻菼菾菿萀萂萅萇萈萉萊萐萒",
    		5,
    		"萙萚萛萞",
    		5,
    		"萩",
    		7,
    		"萲",
    		5,
    		"萹萺萻萾",
    		7,
    		"葇葈葉"
    	],
    	[
    		"c880",
    		"葊",
    		6,
    		"葒",
    		4,
    		"葘葝葞葟葠葢葤",
    		4,
    		"葪葮葯葰葲葴葷葹葻葼取娶龋趣去圈颧权醛泉全痊拳犬券劝缺炔瘸却鹊榷确雀裙群然燃冉染瓤壤攘嚷让饶扰绕惹热壬仁人忍韧任认刃妊纫扔仍日戎茸蓉荣融熔溶容绒冗揉柔肉茹蠕儒孺如辱乳汝入褥软阮蕊瑞锐闰润若弱撒洒萨腮鳃塞赛三叁"
    	],
    	[
    		"c940",
    		"葽",
    		4,
    		"蒃蒄蒅蒆蒊蒍蒏",
    		7,
    		"蒘蒚蒛蒝蒞蒟蒠蒢",
    		12,
    		"蒰蒱蒳蒵蒶蒷蒻蒼蒾蓀蓂蓃蓅蓆蓇蓈蓋蓌蓎蓏蓒蓔蓕蓗"
    	],
    	[
    		"c980",
    		"蓘",
    		4,
    		"蓞蓡蓢蓤蓧",
    		4,
    		"蓭蓮蓯蓱",
    		10,
    		"蓽蓾蔀蔁蔂伞散桑嗓丧搔骚扫嫂瑟色涩森僧莎砂杀刹沙纱傻啥煞筛晒珊苫杉山删煽衫闪陕擅赡膳善汕扇缮墒伤商赏晌上尚裳梢捎稍烧芍勺韶少哨邵绍奢赊蛇舌舍赦摄射慑涉社设砷申呻伸身深娠绅神沈审婶甚肾慎渗声生甥牲升绳"
    	],
    	[
    		"ca40",
    		"蔃",
    		8,
    		"蔍蔎蔏蔐蔒蔔蔕蔖蔘蔙蔛蔜蔝蔞蔠蔢",
    		8,
    		"蔭",
    		9,
    		"蔾",
    		4,
    		"蕄蕅蕆蕇蕋",
    		10
    	],
    	[
    		"ca80",
    		"蕗蕘蕚蕛蕜蕝蕟",
    		4,
    		"蕥蕦蕧蕩",
    		8,
    		"蕳蕵蕶蕷蕸蕼蕽蕿薀薁省盛剩胜圣师失狮施湿诗尸虱十石拾时什食蚀实识史矢使屎驶始式示士世柿事拭誓逝势是嗜噬适仕侍释饰氏市恃室视试收手首守寿授售受瘦兽蔬枢梳殊抒输叔舒淑疏书赎孰熟薯暑曙署蜀黍鼠属术述树束戍竖墅庶数漱"
    	],
    	[
    		"cb40",
    		"薂薃薆薈",
    		6,
    		"薐",
    		10,
    		"薝",
    		6,
    		"薥薦薧薩薫薬薭薱",
    		5,
    		"薸薺",
    		6,
    		"藂",
    		6,
    		"藊",
    		4,
    		"藑藒"
    	],
    	[
    		"cb80",
    		"藔藖",
    		5,
    		"藝",
    		6,
    		"藥藦藧藨藪",
    		14,
    		"恕刷耍摔衰甩帅栓拴霜双爽谁水睡税吮瞬顺舜说硕朔烁斯撕嘶思私司丝死肆寺嗣四伺似饲巳松耸怂颂送宋讼诵搜艘擞嗽苏酥俗素速粟僳塑溯宿诉肃酸蒜算虽隋随绥髓碎岁穗遂隧祟孙损笋蓑梭唆缩琐索锁所塌他它她塔"
    	],
    	[
    		"cc40",
    		"藹藺藼藽藾蘀",
    		4,
    		"蘆",
    		10,
    		"蘒蘓蘔蘕蘗",
    		15,
    		"蘨蘪",
    		13,
    		"蘹蘺蘻蘽蘾蘿虀"
    	],
    	[
    		"cc80",
    		"虁",
    		11,
    		"虒虓處",
    		4,
    		"虛虜虝號虠虡虣",
    		7,
    		"獭挞蹋踏胎苔抬台泰酞太态汰坍摊贪瘫滩坛檀痰潭谭谈坦毯袒碳探叹炭汤塘搪堂棠膛唐糖倘躺淌趟烫掏涛滔绦萄桃逃淘陶讨套特藤腾疼誊梯剔踢锑提题蹄啼体替嚏惕涕剃屉天添填田甜恬舔腆挑条迢眺跳贴铁帖厅听烃"
    	],
    	[
    		"cd40",
    		"虭虯虰虲",
    		6,
    		"蚃",
    		6,
    		"蚎",
    		4,
    		"蚔蚖",
    		5,
    		"蚞",
    		4,
    		"蚥蚦蚫蚭蚮蚲蚳蚷蚸蚹蚻",
    		4,
    		"蛁蛂蛃蛅蛈蛌蛍蛒蛓蛕蛖蛗蛚蛜"
    	],
    	[
    		"cd80",
    		"蛝蛠蛡蛢蛣蛥蛦蛧蛨蛪蛫蛬蛯蛵蛶蛷蛺蛻蛼蛽蛿蜁蜄蜅蜆蜋蜌蜎蜏蜐蜑蜔蜖汀廷停亭庭挺艇通桐酮瞳同铜彤童桶捅筒统痛偷投头透凸秃突图徒途涂屠土吐兔湍团推颓腿蜕褪退吞屯臀拖托脱鸵陀驮驼椭妥拓唾挖哇蛙洼娃瓦袜歪外豌弯湾玩顽丸烷完碗挽晚皖惋宛婉万腕汪王亡枉网往旺望忘妄威"
    	],
    	[
    		"ce40",
    		"蜙蜛蜝蜟蜠蜤蜦蜧蜨蜪蜫蜬蜭蜯蜰蜲蜳蜵蜶蜸蜹蜺蜼蜽蝀",
    		6,
    		"蝊蝋蝍蝏蝐蝑蝒蝔蝕蝖蝘蝚",
    		5,
    		"蝡蝢蝦",
    		7,
    		"蝯蝱蝲蝳蝵"
    	],
    	[
    		"ce80",
    		"蝷蝸蝹蝺蝿螀螁螄螆螇螉螊螌螎",
    		4,
    		"螔螕螖螘",
    		6,
    		"螠",
    		4,
    		"巍微危韦违桅围唯惟为潍维苇萎委伟伪尾纬未蔚味畏胃喂魏位渭谓尉慰卫瘟温蚊文闻纹吻稳紊问嗡翁瓮挝蜗涡窝我斡卧握沃巫呜钨乌污诬屋无芜梧吾吴毋武五捂午舞伍侮坞戊雾晤物勿务悟误昔熙析西硒矽晰嘻吸锡牺"
    	],
    	[
    		"cf40",
    		"螥螦螧螩螪螮螰螱螲螴螶螷螸螹螻螼螾螿蟁",
    		4,
    		"蟇蟈蟉蟌",
    		4,
    		"蟔",
    		6,
    		"蟜蟝蟞蟟蟡蟢蟣蟤蟦蟧蟨蟩蟫蟬蟭蟯",
    		9
    	],
    	[
    		"cf80",
    		"蟺蟻蟼蟽蟿蠀蠁蠂蠄",
    		5,
    		"蠋",
    		7,
    		"蠔蠗蠘蠙蠚蠜",
    		4,
    		"蠣稀息希悉膝夕惜熄烯溪汐犀檄袭席习媳喜铣洗系隙戏细瞎虾匣霞辖暇峡侠狭下厦夏吓掀锨先仙鲜纤咸贤衔舷闲涎弦嫌显险现献县腺馅羡宪陷限线相厢镶香箱襄湘乡翔祥详想响享项巷橡像向象萧硝霄削哮嚣销消宵淆晓"
    	],
    	[
    		"d040",
    		"蠤",
    		13,
    		"蠳",
    		5,
    		"蠺蠻蠽蠾蠿衁衂衃衆",
    		5,
    		"衎",
    		5,
    		"衕衖衘衚",
    		6,
    		"衦衧衪衭衯衱衳衴衵衶衸衹衺"
    	],
    	[
    		"d080",
    		"衻衼袀袃袆袇袉袊袌袎袏袐袑袓袔袕袗",
    		4,
    		"袝",
    		4,
    		"袣袥",
    		5,
    		"小孝校肖啸笑效楔些歇蝎鞋协挟携邪斜胁谐写械卸蟹懈泄泻谢屑薪芯锌欣辛新忻心信衅星腥猩惺兴刑型形邢行醒幸杏性姓兄凶胸匈汹雄熊休修羞朽嗅锈秀袖绣墟戌需虚嘘须徐许蓄酗叙旭序畜恤絮婿绪续轩喧宣悬旋玄"
    	],
    	[
    		"d140",
    		"袬袮袯袰袲",
    		4,
    		"袸袹袺袻袽袾袿裀裃裄裇裈裊裋裌裍裏裐裑裓裖裗裚",
    		4,
    		"裠裡裦裧裩",
    		6,
    		"裲裵裶裷裺裻製裿褀褁褃",
    		5
    	],
    	[
    		"d180",
    		"褉褋",
    		4,
    		"褑褔",
    		4,
    		"褜",
    		4,
    		"褢褣褤褦褧褨褩褬褭褮褯褱褲褳褵褷选癣眩绚靴薛学穴雪血勋熏循旬询寻驯巡殉汛训讯逊迅压押鸦鸭呀丫芽牙蚜崖衙涯雅哑亚讶焉咽阉烟淹盐严研蜒岩延言颜阎炎沿奄掩眼衍演艳堰燕厌砚雁唁彦焰宴谚验殃央鸯秧杨扬佯疡羊洋阳氧仰痒养样漾邀腰妖瑶"
    	],
    	[
    		"d240",
    		"褸",
    		8,
    		"襂襃襅",
    		24,
    		"襠",
    		5,
    		"襧",
    		19,
    		"襼"
    	],
    	[
    		"d280",
    		"襽襾覀覂覄覅覇",
    		26,
    		"摇尧遥窑谣姚咬舀药要耀椰噎耶爷野冶也页掖业叶曳腋夜液一壹医揖铱依伊衣颐夷遗移仪胰疑沂宜姨彝椅蚁倚已乙矣以艺抑易邑屹亿役臆逸肄疫亦裔意毅忆义益溢诣议谊译异翼翌绎茵荫因殷音阴姻吟银淫寅饮尹引隐"
    	],
    	[
    		"d340",
    		"覢",
    		30,
    		"觃觍觓觔觕觗觘觙觛觝觟觠觡觢觤觧觨觩觪觬觭觮觰觱觲觴",
    		6
    	],
    	[
    		"d380",
    		"觻",
    		4,
    		"訁",
    		5,
    		"計",
    		21,
    		"印英樱婴鹰应缨莹萤营荧蝇迎赢盈影颖硬映哟拥佣臃痈庸雍踊蛹咏泳涌永恿勇用幽优悠忧尤由邮铀犹油游酉有友右佑釉诱又幼迂淤于盂榆虞愚舆余俞逾鱼愉渝渔隅予娱雨与屿禹宇语羽玉域芋郁吁遇喻峪御愈欲狱育誉"
    	],
    	[
    		"d440",
    		"訞",
    		31,
    		"訿",
    		8,
    		"詉",
    		21
    	],
    	[
    		"d480",
    		"詟",
    		25,
    		"詺",
    		6,
    		"浴寓裕预豫驭鸳渊冤元垣袁原援辕园员圆猿源缘远苑愿怨院曰约越跃钥岳粤月悦阅耘云郧匀陨允运蕴酝晕韵孕匝砸杂栽哉灾宰载再在咱攒暂赞赃脏葬遭糟凿藻枣早澡蚤躁噪造皂灶燥责择则泽贼怎增憎曾赠扎喳渣札轧"
    	],
    	[
    		"d540",
    		"誁",
    		7,
    		"誋",
    		7,
    		"誔",
    		46
    	],
    	[
    		"d580",
    		"諃",
    		32,
    		"铡闸眨栅榨咋乍炸诈摘斋宅窄债寨瞻毡詹粘沾盏斩辗崭展蘸栈占战站湛绽樟章彰漳张掌涨杖丈帐账仗胀瘴障招昭找沼赵照罩兆肇召遮折哲蛰辙者锗蔗这浙珍斟真甄砧臻贞针侦枕疹诊震振镇阵蒸挣睁征狰争怔整拯正政"
    	],
    	[
    		"d640",
    		"諤",
    		34,
    		"謈",
    		27
    	],
    	[
    		"d680",
    		"謤謥謧",
    		30,
    		"帧症郑证芝枝支吱蜘知肢脂汁之织职直植殖执值侄址指止趾只旨纸志挚掷至致置帜峙制智秩稚质炙痔滞治窒中盅忠钟衷终种肿重仲众舟周州洲诌粥轴肘帚咒皱宙昼骤珠株蛛朱猪诸诛逐竹烛煮拄瞩嘱主著柱助蛀贮铸筑"
    	],
    	[
    		"d740",
    		"譆",
    		31,
    		"譧",
    		4,
    		"譭",
    		25
    	],
    	[
    		"d780",
    		"讇",
    		24,
    		"讬讱讻诇诐诪谉谞住注祝驻抓爪拽专砖转撰赚篆桩庄装妆撞壮状椎锥追赘坠缀谆准捉拙卓桌琢茁酌啄着灼浊兹咨资姿滋淄孜紫仔籽滓子自渍字鬃棕踪宗综总纵邹走奏揍租足卒族祖诅阻组钻纂嘴醉最罪尊遵昨左佐柞做作坐座"
    	],
    	[
    		"d840",
    		"谸",
    		8,
    		"豂豃豄豅豈豊豋豍",
    		7,
    		"豖豗豘豙豛",
    		5,
    		"豣",
    		6,
    		"豬",
    		6,
    		"豴豵豶豷豻",
    		6,
    		"貃貄貆貇"
    	],
    	[
    		"d880",
    		"貈貋貍",
    		6,
    		"貕貖貗貙",
    		20,
    		"亍丌兀丐廿卅丕亘丞鬲孬噩丨禺丿匕乇夭爻卮氐囟胤馗毓睾鼗丶亟鼐乜乩亓芈孛啬嘏仄厍厝厣厥厮靥赝匚叵匦匮匾赜卦卣刂刈刎刭刳刿剀剌剞剡剜蒯剽劂劁劐劓冂罔亻仃仉仂仨仡仫仞伛仳伢佤仵伥伧伉伫佞佧攸佚佝"
    	],
    	[
    		"d940",
    		"貮",
    		62
    	],
    	[
    		"d980",
    		"賭",
    		32,
    		"佟佗伲伽佶佴侑侉侃侏佾佻侪佼侬侔俦俨俪俅俚俣俜俑俟俸倩偌俳倬倏倮倭俾倜倌倥倨偾偃偕偈偎偬偻傥傧傩傺僖儆僭僬僦僮儇儋仝氽佘佥俎龠汆籴兮巽黉馘冁夔勹匍訇匐凫夙兕亠兖亳衮袤亵脔裒禀嬴蠃羸冫冱冽冼"
    	],
    	[
    		"da40",
    		"贎",
    		14,
    		"贠赑赒赗赟赥赨赩赪赬赮赯赱赲赸",
    		8,
    		"趂趃趆趇趈趉趌",
    		4,
    		"趒趓趕",
    		9,
    		"趠趡"
    	],
    	[
    		"da80",
    		"趢趤",
    		12,
    		"趲趶趷趹趻趽跀跁跂跅跇跈跉跊跍跐跒跓跔凇冖冢冥讠讦讧讪讴讵讷诂诃诋诏诎诒诓诔诖诘诙诜诟诠诤诨诩诮诰诳诶诹诼诿谀谂谄谇谌谏谑谒谔谕谖谙谛谘谝谟谠谡谥谧谪谫谮谯谲谳谵谶卩卺阝阢阡阱阪阽阼陂陉陔陟陧陬陲陴隈隍隗隰邗邛邝邙邬邡邴邳邶邺"
    	],
    	[
    		"db40",
    		"跕跘跙跜跠跡跢跥跦跧跩跭跮跰跱跲跴跶跼跾",
    		6,
    		"踆踇踈踋踍踎踐踑踒踓踕",
    		7,
    		"踠踡踤",
    		4,
    		"踫踭踰踲踳踴踶踷踸踻踼踾"
    	],
    	[
    		"db80",
    		"踿蹃蹅蹆蹌",
    		4,
    		"蹓",
    		5,
    		"蹚",
    		11,
    		"蹧蹨蹪蹫蹮蹱邸邰郏郅邾郐郄郇郓郦郢郜郗郛郫郯郾鄄鄢鄞鄣鄱鄯鄹酃酆刍奂劢劬劭劾哿勐勖勰叟燮矍廴凵凼鬯厶弁畚巯坌垩垡塾墼壅壑圩圬圪圳圹圮圯坜圻坂坩垅坫垆坼坻坨坭坶坳垭垤垌垲埏垧垴垓垠埕埘埚埙埒垸埴埯埸埤埝"
    	],
    	[
    		"dc40",
    		"蹳蹵蹷",
    		4,
    		"蹽蹾躀躂躃躄躆躈",
    		6,
    		"躑躒躓躕",
    		6,
    		"躝躟",
    		11,
    		"躭躮躰躱躳",
    		6,
    		"躻",
    		7
    	],
    	[
    		"dc80",
    		"軃",
    		10,
    		"軏",
    		21,
    		"堋堍埽埭堀堞堙塄堠塥塬墁墉墚墀馨鼙懿艹艽艿芏芊芨芄芎芑芗芙芫芸芾芰苈苊苣芘芷芮苋苌苁芩芴芡芪芟苄苎芤苡茉苷苤茏茇苜苴苒苘茌苻苓茑茚茆茔茕苠苕茜荑荛荜茈莒茼茴茱莛荞茯荏荇荃荟荀茗荠茭茺茳荦荥"
    	],
    	[
    		"dd40",
    		"軥",
    		62
    	],
    	[
    		"dd80",
    		"輤",
    		32,
    		"荨茛荩荬荪荭荮莰荸莳莴莠莪莓莜莅荼莶莩荽莸荻莘莞莨莺莼菁萁菥菘堇萘萋菝菽菖萜萸萑萆菔菟萏萃菸菹菪菅菀萦菰菡葜葑葚葙葳蒇蒈葺蒉葸萼葆葩葶蒌蒎萱葭蓁蓍蓐蓦蒽蓓蓊蒿蒺蓠蒡蒹蒴蒗蓥蓣蔌甍蔸蓰蔹蔟蔺"
    	],
    	[
    		"de40",
    		"轅",
    		32,
    		"轪辀辌辒辝辠辡辢辤辥辦辧辪辬辭辮辯農辳辴辵辷辸辺辻込辿迀迃迆"
    	],
    	[
    		"de80",
    		"迉",
    		4,
    		"迏迒迖迗迚迠迡迣迧迬迯迱迲迴迵迶迺迻迼迾迿逇逈逌逎逓逕逘蕖蔻蓿蓼蕙蕈蕨蕤蕞蕺瞢蕃蕲蕻薤薨薇薏蕹薮薜薅薹薷薰藓藁藜藿蘧蘅蘩蘖蘼廾弈夼奁耷奕奚奘匏尢尥尬尴扌扪抟抻拊拚拗拮挢拶挹捋捃掭揶捱捺掎掴捭掬掊捩掮掼揲揸揠揿揄揞揎摒揆掾摅摁搋搛搠搌搦搡摞撄摭撖"
    	],
    	[
    		"df40",
    		"這逜連逤逥逧",
    		5,
    		"逰",
    		4,
    		"逷逹逺逽逿遀遃遅遆遈",
    		4,
    		"過達違遖遙遚遜",
    		5,
    		"遤遦遧適遪遫遬遯",
    		4,
    		"遶",
    		6,
    		"遾邁"
    	],
    	[
    		"df80",
    		"還邅邆邇邉邊邌",
    		4,
    		"邒邔邖邘邚邜邞邟邠邤邥邧邨邩邫邭邲邷邼邽邿郀摺撷撸撙撺擀擐擗擤擢攉攥攮弋忒甙弑卟叱叽叩叨叻吒吖吆呋呒呓呔呖呃吡呗呙吣吲咂咔呷呱呤咚咛咄呶呦咝哐咭哂咴哒咧咦哓哔呲咣哕咻咿哌哙哚哜咩咪咤哝哏哞唛哧唠哽唔哳唢唣唏唑唧唪啧喏喵啉啭啁啕唿啐唼"
    	],
    	[
    		"e040",
    		"郂郃郆郈郉郋郌郍郒郔郕郖郘郙郚郞郟郠郣郤郥郩郪郬郮郰郱郲郳郵郶郷郹郺郻郼郿鄀鄁鄃鄅",
    		19,
    		"鄚鄛鄜"
    	],
    	[
    		"e080",
    		"鄝鄟鄠鄡鄤",
    		10,
    		"鄰鄲",
    		6,
    		"鄺",
    		8,
    		"酄唷啖啵啶啷唳唰啜喋嗒喃喱喹喈喁喟啾嗖喑啻嗟喽喾喔喙嗪嗷嗉嘟嗑嗫嗬嗔嗦嗝嗄嗯嗥嗲嗳嗌嗍嗨嗵嗤辔嘞嘈嘌嘁嘤嘣嗾嘀嘧嘭噘嘹噗嘬噍噢噙噜噌噔嚆噤噱噫噻噼嚅嚓嚯囔囗囝囡囵囫囹囿圄圊圉圜帏帙帔帑帱帻帼"
    	],
    	[
    		"e140",
    		"酅酇酈酑酓酔酕酖酘酙酛酜酟酠酦酧酨酫酭酳酺酻酼醀",
    		4,
    		"醆醈醊醎醏醓",
    		6,
    		"醜",
    		5,
    		"醤",
    		5,
    		"醫醬醰醱醲醳醶醷醸醹醻"
    	],
    	[
    		"e180",
    		"醼",
    		10,
    		"釈釋釐釒",
    		9,
    		"針",
    		8,
    		"帷幄幔幛幞幡岌屺岍岐岖岈岘岙岑岚岜岵岢岽岬岫岱岣峁岷峄峒峤峋峥崂崃崧崦崮崤崞崆崛嵘崾崴崽嵬嵛嵯嵝嵫嵋嵊嵩嵴嶂嶙嶝豳嶷巅彳彷徂徇徉後徕徙徜徨徭徵徼衢彡犭犰犴犷犸狃狁狎狍狒狨狯狩狲狴狷猁狳猃狺"
    	],
    	[
    		"e240",
    		"釦",
    		62
    	],
    	[
    		"e280",
    		"鈥",
    		32,
    		"狻猗猓猡猊猞猝猕猢猹猥猬猸猱獐獍獗獠獬獯獾舛夥飧夤夂饣饧",
    		5,
    		"饴饷饽馀馄馇馊馍馐馑馓馔馕庀庑庋庖庥庠庹庵庾庳赓廒廑廛廨廪膺忄忉忖忏怃忮怄忡忤忾怅怆忪忭忸怙怵怦怛怏怍怩怫怊怿怡恸恹恻恺恂"
    	],
    	[
    		"e340",
    		"鉆",
    		45,
    		"鉵",
    		16
    	],
    	[
    		"e380",
    		"銆",
    		7,
    		"銏",
    		24,
    		"恪恽悖悚悭悝悃悒悌悛惬悻悱惝惘惆惚悴愠愦愕愣惴愀愎愫慊慵憬憔憧憷懔懵忝隳闩闫闱闳闵闶闼闾阃阄阆阈阊阋阌阍阏阒阕阖阗阙阚丬爿戕氵汔汜汊沣沅沐沔沌汨汩汴汶沆沩泐泔沭泷泸泱泗沲泠泖泺泫泮沱泓泯泾"
    	],
    	[
    		"e440",
    		"銨",
    		5,
    		"銯",
    		24,
    		"鋉",
    		31
    	],
    	[
    		"e480",
    		"鋩",
    		32,
    		"洹洧洌浃浈洇洄洙洎洫浍洮洵洚浏浒浔洳涑浯涞涠浞涓涔浜浠浼浣渚淇淅淞渎涿淠渑淦淝淙渖涫渌涮渫湮湎湫溲湟溆湓湔渲渥湄滟溱溘滠漭滢溥溧溽溻溷滗溴滏溏滂溟潢潆潇漤漕滹漯漶潋潴漪漉漩澉澍澌潸潲潼潺濑"
    	],
    	[
    		"e540",
    		"錊",
    		51,
    		"錿",
    		10
    	],
    	[
    		"e580",
    		"鍊",
    		31,
    		"鍫濉澧澹澶濂濡濮濞濠濯瀚瀣瀛瀹瀵灏灞宀宄宕宓宥宸甯骞搴寤寮褰寰蹇謇辶迓迕迥迮迤迩迦迳迨逅逄逋逦逑逍逖逡逵逶逭逯遄遑遒遐遨遘遢遛暹遴遽邂邈邃邋彐彗彖彘尻咫屐屙孱屣屦羼弪弩弭艴弼鬻屮妁妃妍妩妪妣"
    	],
    	[
    		"e640",
    		"鍬",
    		34,
    		"鎐",
    		27
    	],
    	[
    		"e680",
    		"鎬",
    		29,
    		"鏋鏌鏍妗姊妫妞妤姒妲妯姗妾娅娆姝娈姣姘姹娌娉娲娴娑娣娓婀婧婊婕娼婢婵胬媪媛婷婺媾嫫媲嫒嫔媸嫠嫣嫱嫖嫦嫘嫜嬉嬗嬖嬲嬷孀尕尜孚孥孳孑孓孢驵驷驸驺驿驽骀骁骅骈骊骐骒骓骖骘骛骜骝骟骠骢骣骥骧纟纡纣纥纨纩"
    	],
    	[
    		"e740",
    		"鏎",
    		7,
    		"鏗",
    		54
    	],
    	[
    		"e780",
    		"鐎",
    		32,
    		"纭纰纾绀绁绂绉绋绌绐绔绗绛绠绡绨绫绮绯绱绲缍绶绺绻绾缁缂缃缇缈缋缌缏缑缒缗缙缜缛缟缡",
    		6,
    		"缪缫缬缭缯",
    		4,
    		"缵幺畿巛甾邕玎玑玮玢玟珏珂珑玷玳珀珉珈珥珙顼琊珩珧珞玺珲琏琪瑛琦琥琨琰琮琬"
    	],
    	[
    		"e840",
    		"鐯",
    		14,
    		"鐿",
    		43,
    		"鑬鑭鑮鑯"
    	],
    	[
    		"e880",
    		"鑰",
    		20,
    		"钑钖钘铇铏铓铔铚铦铻锜锠琛琚瑁瑜瑗瑕瑙瑷瑭瑾璜璎璀璁璇璋璞璨璩璐璧瓒璺韪韫韬杌杓杞杈杩枥枇杪杳枘枧杵枨枞枭枋杷杼柰栉柘栊柩枰栌柙枵柚枳柝栀柃枸柢栎柁柽栲栳桠桡桎桢桄桤梃栝桕桦桁桧桀栾桊桉栩梵梏桴桷梓桫棂楮棼椟椠棹"
    	],
    	[
    		"e940",
    		"锧锳锽镃镈镋镕镚镠镮镴镵長",
    		7,
    		"門",
    		42
    	],
    	[
    		"e980",
    		"閫",
    		32,
    		"椤棰椋椁楗棣椐楱椹楠楂楝榄楫榀榘楸椴槌榇榈槎榉楦楣楹榛榧榻榫榭槔榱槁槊槟榕槠榍槿樯槭樗樘橥槲橄樾檠橐橛樵檎橹樽樨橘橼檑檐檩檗檫猷獒殁殂殇殄殒殓殍殚殛殡殪轫轭轱轲轳轵轶轸轷轹轺轼轾辁辂辄辇辋"
    	],
    	[
    		"ea40",
    		"闌",
    		27,
    		"闬闿阇阓阘阛阞阠阣",
    		6,
    		"阫阬阭阯阰阷阸阹阺阾陁陃陊陎陏陑陒陓陖陗"
    	],
    	[
    		"ea80",
    		"陘陙陚陜陝陞陠陣陥陦陫陭",
    		4,
    		"陳陸",
    		12,
    		"隇隉隊辍辎辏辘辚軎戋戗戛戟戢戡戥戤戬臧瓯瓴瓿甏甑甓攴旮旯旰昊昙杲昃昕昀炅曷昝昴昱昶昵耆晟晔晁晏晖晡晗晷暄暌暧暝暾曛曜曦曩贲贳贶贻贽赀赅赆赈赉赇赍赕赙觇觊觋觌觎觏觐觑牮犟牝牦牯牾牿犄犋犍犏犒挈挲掰"
    	],
    	[
    		"eb40",
    		"隌階隑隒隓隕隖隚際隝",
    		9,
    		"隨",
    		7,
    		"隱隲隴隵隷隸隺隻隿雂雃雈雊雋雐雑雓雔雖",
    		9,
    		"雡",
    		6,
    		"雫"
    	],
    	[
    		"eb80",
    		"雬雭雮雰雱雲雴雵雸雺電雼雽雿霂霃霅霊霋霌霐霑霒霔霕霗",
    		4,
    		"霝霟霠搿擘耄毪毳毽毵毹氅氇氆氍氕氘氙氚氡氩氤氪氲攵敕敫牍牒牖爰虢刖肟肜肓肼朊肽肱肫肭肴肷胧胨胩胪胛胂胄胙胍胗朐胝胫胱胴胭脍脎胲胼朕脒豚脶脞脬脘脲腈腌腓腴腙腚腱腠腩腼腽腭腧塍媵膈膂膑滕膣膪臌朦臊膻"
    	],
    	[
    		"ec40",
    		"霡",
    		8,
    		"霫霬霮霯霱霳",
    		4,
    		"霺霻霼霽霿",
    		18,
    		"靔靕靗靘靚靜靝靟靣靤靦靧靨靪",
    		7
    	],
    	[
    		"ec80",
    		"靲靵靷",
    		4,
    		"靽",
    		7,
    		"鞆",
    		4,
    		"鞌鞎鞏鞐鞓鞕鞖鞗鞙",
    		4,
    		"臁膦欤欷欹歃歆歙飑飒飓飕飙飚殳彀毂觳斐齑斓於旆旄旃旌旎旒旖炀炜炖炝炻烀炷炫炱烨烊焐焓焖焯焱煳煜煨煅煲煊煸煺熘熳熵熨熠燠燔燧燹爝爨灬焘煦熹戾戽扃扈扉礻祀祆祉祛祜祓祚祢祗祠祯祧祺禅禊禚禧禳忑忐"
    	],
    	[
    		"ed40",
    		"鞞鞟鞡鞢鞤",
    		6,
    		"鞬鞮鞰鞱鞳鞵",
    		46
    	],
    	[
    		"ed80",
    		"韤韥韨韮",
    		4,
    		"韴韷",
    		23,
    		"怼恝恚恧恁恙恣悫愆愍慝憩憝懋懑戆肀聿沓泶淼矶矸砀砉砗砘砑斫砭砜砝砹砺砻砟砼砥砬砣砩硎硭硖硗砦硐硇硌硪碛碓碚碇碜碡碣碲碹碥磔磙磉磬磲礅磴礓礤礞礴龛黹黻黼盱眄眍盹眇眈眚眢眙眭眦眵眸睐睑睇睃睚睨"
    	],
    	[
    		"ee40",
    		"頏",
    		62
    	],
    	[
    		"ee80",
    		"顎",
    		32,
    		"睢睥睿瞍睽瞀瞌瞑瞟瞠瞰瞵瞽町畀畎畋畈畛畲畹疃罘罡罟詈罨罴罱罹羁罾盍盥蠲钅钆钇钋钊钌钍钏钐钔钗钕钚钛钜钣钤钫钪钭钬钯钰钲钴钶",
    		4,
    		"钼钽钿铄铈",
    		6,
    		"铐铑铒铕铖铗铙铘铛铞铟铠铢铤铥铧铨铪"
    	],
    	[
    		"ef40",
    		"顯",
    		5,
    		"颋颎颒颕颙颣風",
    		37,
    		"飏飐飔飖飗飛飜飝飠",
    		4
    	],
    	[
    		"ef80",
    		"飥飦飩",
    		30,
    		"铩铫铮铯铳铴铵铷铹铼铽铿锃锂锆锇锉锊锍锎锏锒",
    		4,
    		"锘锛锝锞锟锢锪锫锩锬锱锲锴锶锷锸锼锾锿镂锵镄镅镆镉镌镎镏镒镓镔镖镗镘镙镛镞镟镝镡镢镤",
    		8,
    		"镯镱镲镳锺矧矬雉秕秭秣秫稆嵇稃稂稞稔"
    	],
    	[
    		"f040",
    		"餈",
    		4,
    		"餎餏餑",
    		28,
    		"餯",
    		26
    	],
    	[
    		"f080",
    		"饊",
    		9,
    		"饖",
    		12,
    		"饤饦饳饸饹饻饾馂馃馉稹稷穑黏馥穰皈皎皓皙皤瓞瓠甬鸠鸢鸨",
    		4,
    		"鸲鸱鸶鸸鸷鸹鸺鸾鹁鹂鹄鹆鹇鹈鹉鹋鹌鹎鹑鹕鹗鹚鹛鹜鹞鹣鹦",
    		6,
    		"鹱鹭鹳疒疔疖疠疝疬疣疳疴疸痄疱疰痃痂痖痍痣痨痦痤痫痧瘃痱痼痿瘐瘀瘅瘌瘗瘊瘥瘘瘕瘙"
    	],
    	[
    		"f140",
    		"馌馎馚",
    		10,
    		"馦馧馩",
    		47
    	],
    	[
    		"f180",
    		"駙",
    		32,
    		"瘛瘼瘢瘠癀瘭瘰瘿瘵癃瘾瘳癍癞癔癜癖癫癯翊竦穸穹窀窆窈窕窦窠窬窨窭窳衤衩衲衽衿袂袢裆袷袼裉裢裎裣裥裱褚裼裨裾裰褡褙褓褛褊褴褫褶襁襦襻疋胥皲皴矜耒耔耖耜耠耢耥耦耧耩耨耱耋耵聃聆聍聒聩聱覃顸颀颃"
    	],
    	[
    		"f240",
    		"駺",
    		62
    	],
    	[
    		"f280",
    		"騹",
    		32,
    		"颉颌颍颏颔颚颛颞颟颡颢颥颦虍虔虬虮虿虺虼虻蚨蚍蚋蚬蚝蚧蚣蚪蚓蚩蚶蛄蚵蛎蚰蚺蚱蚯蛉蛏蚴蛩蛱蛲蛭蛳蛐蜓蛞蛴蛟蛘蛑蜃蜇蛸蜈蜊蜍蜉蜣蜻蜞蜥蜮蜚蜾蝈蜴蜱蜩蜷蜿螂蜢蝽蝾蝻蝠蝰蝌蝮螋蝓蝣蝼蝤蝙蝥螓螯螨蟒"
    	],
    	[
    		"f340",
    		"驚",
    		17,
    		"驲骃骉骍骎骔骕骙骦骩",
    		6,
    		"骲骳骴骵骹骻骽骾骿髃髄髆",
    		4,
    		"髍髎髏髐髒體髕髖髗髙髚髛髜"
    	],
    	[
    		"f380",
    		"髝髞髠髢髣髤髥髧髨髩髪髬髮髰",
    		8,
    		"髺髼",
    		6,
    		"鬄鬅鬆蟆螈螅螭螗螃螫蟥螬螵螳蟋蟓螽蟑蟀蟊蟛蟪蟠蟮蠖蠓蟾蠊蠛蠡蠹蠼缶罂罄罅舐竺竽笈笃笄笕笊笫笏筇笸笪笙笮笱笠笥笤笳笾笞筘筚筅筵筌筝筠筮筻筢筲筱箐箦箧箸箬箝箨箅箪箜箢箫箴篑篁篌篝篚篥篦篪簌篾篼簏簖簋"
    	],
    	[
    		"f440",
    		"鬇鬉",
    		5,
    		"鬐鬑鬒鬔",
    		10,
    		"鬠鬡鬢鬤",
    		10,
    		"鬰鬱鬳",
    		7,
    		"鬽鬾鬿魀魆魊魋魌魎魐魒魓魕",
    		5
    	],
    	[
    		"f480",
    		"魛",
    		32,
    		"簟簪簦簸籁籀臾舁舂舄臬衄舡舢舣舭舯舨舫舸舻舳舴舾艄艉艋艏艚艟艨衾袅袈裘裟襞羝羟羧羯羰羲籼敉粑粝粜粞粢粲粼粽糁糇糌糍糈糅糗糨艮暨羿翎翕翥翡翦翩翮翳糸絷綦綮繇纛麸麴赳趄趔趑趱赧赭豇豉酊酐酎酏酤"
    	],
    	[
    		"f540",
    		"魼",
    		62
    	],
    	[
    		"f580",
    		"鮻",
    		32,
    		"酢酡酰酩酯酽酾酲酴酹醌醅醐醍醑醢醣醪醭醮醯醵醴醺豕鹾趸跫踅蹙蹩趵趿趼趺跄跖跗跚跞跎跏跛跆跬跷跸跣跹跻跤踉跽踔踝踟踬踮踣踯踺蹀踹踵踽踱蹉蹁蹂蹑蹒蹊蹰蹶蹼蹯蹴躅躏躔躐躜躞豸貂貊貅貘貔斛觖觞觚觜"
    	],
    	[
    		"f640",
    		"鯜",
    		62
    	],
    	[
    		"f680",
    		"鰛",
    		32,
    		"觥觫觯訾謦靓雩雳雯霆霁霈霏霎霪霭霰霾龀龃龅",
    		5,
    		"龌黾鼋鼍隹隼隽雎雒瞿雠銎銮鋈錾鍪鏊鎏鐾鑫鱿鲂鲅鲆鲇鲈稣鲋鲎鲐鲑鲒鲔鲕鲚鲛鲞",
    		5,
    		"鲥",
    		4,
    		"鲫鲭鲮鲰",
    		7,
    		"鲺鲻鲼鲽鳄鳅鳆鳇鳊鳋"
    	],
    	[
    		"f740",
    		"鰼",
    		62
    	],
    	[
    		"f780",
    		"鱻鱽鱾鲀鲃鲄鲉鲊鲌鲏鲓鲖鲗鲘鲙鲝鲪鲬鲯鲹鲾",
    		4,
    		"鳈鳉鳑鳒鳚鳛鳠鳡鳌",
    		4,
    		"鳓鳔鳕鳗鳘鳙鳜鳝鳟鳢靼鞅鞑鞒鞔鞯鞫鞣鞲鞴骱骰骷鹘骶骺骼髁髀髅髂髋髌髑魅魃魇魉魈魍魑飨餍餮饕饔髟髡髦髯髫髻髭髹鬈鬏鬓鬟鬣麽麾縻麂麇麈麋麒鏖麝麟黛黜黝黠黟黢黩黧黥黪黯鼢鼬鼯鼹鼷鼽鼾齄"
    	],
    	[
    		"f840",
    		"鳣",
    		62
    	],
    	[
    		"f880",
    		"鴢",
    		32
    	],
    	[
    		"f940",
    		"鵃",
    		62
    	],
    	[
    		"f980",
    		"鶂",
    		32
    	],
    	[
    		"fa40",
    		"鶣",
    		62
    	],
    	[
    		"fa80",
    		"鷢",
    		32
    	],
    	[
    		"fb40",
    		"鸃",
    		27,
    		"鸤鸧鸮鸰鸴鸻鸼鹀鹍鹐鹒鹓鹔鹖鹙鹝鹟鹠鹡鹢鹥鹮鹯鹲鹴",
    		9,
    		"麀"
    	],
    	[
    		"fb80",
    		"麁麃麄麅麆麉麊麌",
    		5,
    		"麔",
    		8,
    		"麞麠",
    		5,
    		"麧麨麩麪"
    	],
    	[
    		"fc40",
    		"麫",
    		8,
    		"麵麶麷麹麺麼麿",
    		4,
    		"黅黆黇黈黊黋黌黐黒黓黕黖黗黙黚點黡黣黤黦黨黫黬黭黮黰",
    		8,
    		"黺黽黿",
    		6
    	],
    	[
    		"fc80",
    		"鼆",
    		4,
    		"鼌鼏鼑鼒鼔鼕鼖鼘鼚",
    		5,
    		"鼡鼣",
    		8,
    		"鼭鼮鼰鼱"
    	],
    	[
    		"fd40",
    		"鼲",
    		4,
    		"鼸鼺鼼鼿",
    		4,
    		"齅",
    		10,
    		"齒",
    		38
    	],
    	[
    		"fd80",
    		"齹",
    		5,
    		"龁龂龍",
    		11,
    		"龜龝龞龡",
    		4,
    		"郎凉秊裏隣"
    	],
    	[
    		"fe40",
    		"兀嗀﨎﨏﨑﨓﨔礼﨟蘒﨡﨣﨤﨧﨨﨩"
    	]
    ];

    var require$$3$2 = [
    	[
    		"a140",
    		"",
    		62
    	],
    	[
    		"a180",
    		"",
    		32
    	],
    	[
    		"a240",
    		"",
    		62
    	],
    	[
    		"a280",
    		"",
    		32
    	],
    	[
    		"a2ab",
    		"",
    		5
    	],
    	[
    		"a2e3",
    		"€"
    	],
    	[
    		"a2ef",
    		""
    	],
    	[
    		"a2fd",
    		""
    	],
    	[
    		"a340",
    		"",
    		62
    	],
    	[
    		"a380",
    		"",
    		31,
    		"　"
    	],
    	[
    		"a440",
    		"",
    		62
    	],
    	[
    		"a480",
    		"",
    		32
    	],
    	[
    		"a4f4",
    		"",
    		10
    	],
    	[
    		"a540",
    		"",
    		62
    	],
    	[
    		"a580",
    		"",
    		32
    	],
    	[
    		"a5f7",
    		"",
    		7
    	],
    	[
    		"a640",
    		"",
    		62
    	],
    	[
    		"a680",
    		"",
    		32
    	],
    	[
    		"a6b9",
    		"",
    		7
    	],
    	[
    		"a6d9",
    		"",
    		6
    	],
    	[
    		"a6ec",
    		""
    	],
    	[
    		"a6f3",
    		""
    	],
    	[
    		"a6f6",
    		"",
    		8
    	],
    	[
    		"a740",
    		"",
    		62
    	],
    	[
    		"a780",
    		"",
    		32
    	],
    	[
    		"a7c2",
    		"",
    		14
    	],
    	[
    		"a7f2",
    		"",
    		12
    	],
    	[
    		"a896",
    		"",
    		10
    	],
    	[
    		"a8bc",
    		""
    	],
    	[
    		"a8bf",
    		"ǹ"
    	],
    	[
    		"a8c1",
    		""
    	],
    	[
    		"a8ea",
    		"",
    		20
    	],
    	[
    		"a958",
    		""
    	],
    	[
    		"a95b",
    		""
    	],
    	[
    		"a95d",
    		""
    	],
    	[
    		"a989",
    		"〾⿰",
    		11
    	],
    	[
    		"a997",
    		"",
    		12
    	],
    	[
    		"a9f0",
    		"",
    		14
    	],
    	[
    		"aaa1",
    		"",
    		93
    	],
    	[
    		"aba1",
    		"",
    		93
    	],
    	[
    		"aca1",
    		"",
    		93
    	],
    	[
    		"ada1",
    		"",
    		93
    	],
    	[
    		"aea1",
    		"",
    		93
    	],
    	[
    		"afa1",
    		"",
    		93
    	],
    	[
    		"d7fa",
    		"",
    		4
    	],
    	[
    		"f8a1",
    		"",
    		93
    	],
    	[
    		"f9a1",
    		"",
    		93
    	],
    	[
    		"faa1",
    		"",
    		93
    	],
    	[
    		"fba1",
    		"",
    		93
    	],
    	[
    		"fca1",
    		"",
    		93
    	],
    	[
    		"fda1",
    		"",
    		93
    	],
    	[
    		"fe50",
    		"⺁⺄㑳㑇⺈⺋㖞㘚㘎⺌⺗㥮㤘㧏㧟㩳㧐㭎㱮㳠⺧⺪䁖䅟⺮䌷⺳⺶⺷䎱䎬⺻䏝䓖䙡䙌"
    	],
    	[
    		"fe80",
    		"䜣䜩䝼䞍⻊䥇䥺䥽䦂䦃䦅䦆䦟䦛䦷䦶䲣䲟䲠䲡䱷䲢䴓",
    		6,
    		"䶮",
    		93
    	]
    ];

    var uChars$1 = [
    	128,
    	165,
    	169,
    	178,
    	184,
    	216,
    	226,
    	235,
    	238,
    	244,
    	248,
    	251,
    	253,
    	258,
    	276,
    	284,
    	300,
    	325,
    	329,
    	334,
    	364,
    	463,
    	465,
    	467,
    	469,
    	471,
    	473,
    	475,
    	477,
    	506,
    	594,
    	610,
    	712,
    	716,
    	730,
    	930,
    	938,
    	962,
    	970,
    	1026,
    	1104,
    	1106,
    	8209,
    	8215,
    	8218,
    	8222,
    	8231,
    	8241,
    	8244,
    	8246,
    	8252,
    	8365,
    	8452,
    	8454,
    	8458,
    	8471,
    	8482,
    	8556,
    	8570,
    	8596,
    	8602,
    	8713,
    	8720,
    	8722,
    	8726,
    	8731,
    	8737,
    	8740,
    	8742,
    	8748,
    	8751,
    	8760,
    	8766,
    	8777,
    	8781,
    	8787,
    	8802,
    	8808,
    	8816,
    	8854,
    	8858,
    	8870,
    	8896,
    	8979,
    	9322,
    	9372,
    	9548,
    	9588,
    	9616,
    	9622,
    	9634,
    	9652,
    	9662,
    	9672,
    	9676,
    	9680,
    	9702,
    	9735,
    	9738,
    	9793,
    	9795,
    	11906,
    	11909,
    	11913,
    	11917,
    	11928,
    	11944,
    	11947,
    	11951,
    	11956,
    	11960,
    	11964,
    	11979,
    	12284,
    	12292,
    	12312,
    	12319,
    	12330,
    	12351,
    	12436,
    	12447,
    	12535,
    	12543,
    	12586,
    	12842,
    	12850,
    	12964,
    	13200,
    	13215,
    	13218,
    	13253,
    	13263,
    	13267,
    	13270,
    	13384,
    	13428,
    	13727,
    	13839,
    	13851,
    	14617,
    	14703,
    	14801,
    	14816,
    	14964,
    	15183,
    	15471,
    	15585,
    	16471,
    	16736,
    	17208,
    	17325,
    	17330,
    	17374,
    	17623,
    	17997,
    	18018,
    	18212,
    	18218,
    	18301,
    	18318,
    	18760,
    	18811,
    	18814,
    	18820,
    	18823,
    	18844,
    	18848,
    	18872,
    	19576,
    	19620,
    	19738,
    	19887,
    	40870,
    	59244,
    	59336,
    	59367,
    	59413,
    	59417,
    	59423,
    	59431,
    	59437,
    	59443,
    	59452,
    	59460,
    	59478,
    	59493,
    	63789,
    	63866,
    	63894,
    	63976,
    	63986,
    	64016,
    	64018,
    	64021,
    	64025,
    	64034,
    	64037,
    	64042,
    	65074,
    	65093,
    	65107,
    	65112,
    	65127,
    	65132,
    	65375,
    	65510,
    	65536
    ];
    var gbChars$1 = [
    	0,
    	36,
    	38,
    	45,
    	50,
    	81,
    	89,
    	95,
    	96,
    	100,
    	103,
    	104,
    	105,
    	109,
    	126,
    	133,
    	148,
    	172,
    	175,
    	179,
    	208,
    	306,
    	307,
    	308,
    	309,
    	310,
    	311,
    	312,
    	313,
    	341,
    	428,
    	443,
    	544,
    	545,
    	558,
    	741,
    	742,
    	749,
    	750,
    	805,
    	819,
    	820,
    	7922,
    	7924,
    	7925,
    	7927,
    	7934,
    	7943,
    	7944,
    	7945,
    	7950,
    	8062,
    	8148,
    	8149,
    	8152,
    	8164,
    	8174,
    	8236,
    	8240,
    	8262,
    	8264,
    	8374,
    	8380,
    	8381,
    	8384,
    	8388,
    	8390,
    	8392,
    	8393,
    	8394,
    	8396,
    	8401,
    	8406,
    	8416,
    	8419,
    	8424,
    	8437,
    	8439,
    	8445,
    	8482,
    	8485,
    	8496,
    	8521,
    	8603,
    	8936,
    	8946,
    	9046,
    	9050,
    	9063,
    	9066,
    	9076,
    	9092,
    	9100,
    	9108,
    	9111,
    	9113,
    	9131,
    	9162,
    	9164,
    	9218,
    	9219,
    	11329,
    	11331,
    	11334,
    	11336,
    	11346,
    	11361,
    	11363,
    	11366,
    	11370,
    	11372,
    	11375,
    	11389,
    	11682,
    	11686,
    	11687,
    	11692,
    	11694,
    	11714,
    	11716,
    	11723,
    	11725,
    	11730,
    	11736,
    	11982,
    	11989,
    	12102,
    	12336,
    	12348,
    	12350,
    	12384,
    	12393,
    	12395,
    	12397,
    	12510,
    	12553,
    	12851,
    	12962,
    	12973,
    	13738,
    	13823,
    	13919,
    	13933,
    	14080,
    	14298,
    	14585,
    	14698,
    	15583,
    	15847,
    	16318,
    	16434,
    	16438,
    	16481,
    	16729,
    	17102,
    	17122,
    	17315,
    	17320,
    	17402,
    	17418,
    	17859,
    	17909,
    	17911,
    	17915,
    	17916,
    	17936,
    	17939,
    	17961,
    	18664,
    	18703,
    	18814,
    	18962,
    	19043,
    	33469,
    	33470,
    	33471,
    	33484,
    	33485,
    	33490,
    	33497,
    	33501,
    	33505,
    	33513,
    	33520,
    	33536,
    	33550,
    	37845,
    	37921,
    	37948,
    	38029,
    	38038,
    	38064,
    	38065,
    	38066,
    	38069,
    	38075,
    	38076,
    	38078,
    	39108,
    	39109,
    	39113,
    	39114,
    	39115,
    	39116,
    	39265,
    	39394,
    	189000
    ];
    var require$$4$2 = {
    	uChars: uChars$1,
    	gbChars: gbChars$1
    };

    var require$$5$1 = [
    	[
    		"0",
    		"\u0000",
    		127
    	],
    	[
    		"8141",
    		"갂갃갅갆갋",
    		4,
    		"갘갞갟갡갢갣갥",
    		6,
    		"갮갲갳갴"
    	],
    	[
    		"8161",
    		"갵갶갷갺갻갽갾갿걁",
    		9,
    		"걌걎",
    		5,
    		"걕"
    	],
    	[
    		"8181",
    		"걖걗걙걚걛걝",
    		18,
    		"걲걳걵걶걹걻",
    		4,
    		"겂겇겈겍겎겏겑겒겓겕",
    		6,
    		"겞겢",
    		5,
    		"겫겭겮겱",
    		6,
    		"겺겾겿곀곂곃곅곆곇곉곊곋곍",
    		7,
    		"곖곘",
    		7,
    		"곢곣곥곦곩곫곭곮곲곴곷",
    		4,
    		"곾곿괁괂괃괅괇",
    		4,
    		"괎괐괒괓"
    	],
    	[
    		"8241",
    		"괔괕괖괗괙괚괛괝괞괟괡",
    		7,
    		"괪괫괮",
    		5
    	],
    	[
    		"8261",
    		"괶괷괹괺괻괽",
    		6,
    		"굆굈굊",
    		5,
    		"굑굒굓굕굖굗"
    	],
    	[
    		"8281",
    		"굙",
    		7,
    		"굢굤",
    		7,
    		"굮굯굱굲굷굸굹굺굾궀궃",
    		4,
    		"궊궋궍궎궏궑",
    		10,
    		"궞",
    		5,
    		"궥",
    		17,
    		"궸",
    		7,
    		"귂귃귅귆귇귉",
    		6,
    		"귒귔",
    		7,
    		"귝귞귟귡귢귣귥",
    		18
    	],
    	[
    		"8341",
    		"귺귻귽귾긂",
    		5,
    		"긊긌긎",
    		5,
    		"긕",
    		7
    	],
    	[
    		"8361",
    		"긝",
    		18,
    		"긲긳긵긶긹긻긼"
    	],
    	[
    		"8381",
    		"긽긾긿깂깄깇깈깉깋깏깑깒깓깕깗",
    		4,
    		"깞깢깣깤깦깧깪깫깭깮깯깱",
    		6,
    		"깺깾",
    		5,
    		"꺆",
    		5,
    		"꺍",
    		46,
    		"꺿껁껂껃껅",
    		6,
    		"껎껒",
    		5,
    		"껚껛껝",
    		8
    	],
    	[
    		"8441",
    		"껦껧껩껪껬껮",
    		5,
    		"껵껶껷껹껺껻껽",
    		8
    	],
    	[
    		"8461",
    		"꼆꼉꼊꼋꼌꼎꼏꼑",
    		18
    	],
    	[
    		"8481",
    		"꼤",
    		7,
    		"꼮꼯꼱꼳꼵",
    		6,
    		"꼾꽀꽄꽅꽆꽇꽊",
    		5,
    		"꽑",
    		10,
    		"꽞",
    		5,
    		"꽦",
    		18,
    		"꽺",
    		5,
    		"꾁꾂꾃꾅꾆꾇꾉",
    		6,
    		"꾒꾓꾔꾖",
    		5,
    		"꾝",
    		26,
    		"꾺꾻꾽꾾"
    	],
    	[
    		"8541",
    		"꾿꿁",
    		5,
    		"꿊꿌꿏",
    		4,
    		"꿕",
    		6,
    		"꿝",
    		4
    	],
    	[
    		"8561",
    		"꿢",
    		5,
    		"꿪",
    		5,
    		"꿲꿳꿵꿶꿷꿹",
    		6,
    		"뀂뀃"
    	],
    	[
    		"8581",
    		"뀅",
    		6,
    		"뀍뀎뀏뀑뀒뀓뀕",
    		6,
    		"뀞",
    		9,
    		"뀩",
    		26,
    		"끆끇끉끋끍끏끐끑끒끖끘끚끛끜끞",
    		29,
    		"끾끿낁낂낃낅",
    		6,
    		"낎낐낒",
    		5,
    		"낛낝낞낣낤"
    	],
    	[
    		"8641",
    		"낥낦낧낪낰낲낶낷낹낺낻낽",
    		6,
    		"냆냊",
    		5,
    		"냒"
    	],
    	[
    		"8661",
    		"냓냕냖냗냙",
    		6,
    		"냡냢냣냤냦",
    		10
    	],
    	[
    		"8681",
    		"냱",
    		22,
    		"넊넍넎넏넑넔넕넖넗넚넞",
    		4,
    		"넦넧넩넪넫넭",
    		6,
    		"넶넺",
    		5,
    		"녂녃녅녆녇녉",
    		6,
    		"녒녓녖녗녙녚녛녝녞녟녡",
    		22,
    		"녺녻녽녾녿놁놃",
    		4,
    		"놊놌놎놏놐놑놕놖놗놙놚놛놝"
    	],
    	[
    		"8741",
    		"놞",
    		9,
    		"놩",
    		15
    	],
    	[
    		"8761",
    		"놹",
    		18,
    		"뇍뇎뇏뇑뇒뇓뇕"
    	],
    	[
    		"8781",
    		"뇖",
    		5,
    		"뇞뇠",
    		7,
    		"뇪뇫뇭뇮뇯뇱",
    		7,
    		"뇺뇼뇾",
    		5,
    		"눆눇눉눊눍",
    		6,
    		"눖눘눚",
    		5,
    		"눡",
    		18,
    		"눵",
    		6,
    		"눽",
    		26,
    		"뉙뉚뉛뉝뉞뉟뉡",
    		6,
    		"뉪",
    		4
    	],
    	[
    		"8841",
    		"뉯",
    		4,
    		"뉶",
    		5,
    		"뉽",
    		6,
    		"늆늇늈늊",
    		4
    	],
    	[
    		"8861",
    		"늏늒늓늕늖늗늛",
    		4,
    		"늢늤늧늨늩늫늭늮늯늱늲늳늵늶늷"
    	],
    	[
    		"8881",
    		"늸",
    		15,
    		"닊닋닍닎닏닑닓",
    		4,
    		"닚닜닞닟닠닡닣닧닩닪닰닱닲닶닼닽닾댂댃댅댆댇댉",
    		6,
    		"댒댖",
    		5,
    		"댝",
    		54,
    		"덗덙덚덝덠덡덢덣"
    	],
    	[
    		"8941",
    		"덦덨덪덬덭덯덲덳덵덶덷덹",
    		6,
    		"뎂뎆",
    		5,
    		"뎍"
    	],
    	[
    		"8961",
    		"뎎뎏뎑뎒뎓뎕",
    		10,
    		"뎢",
    		5,
    		"뎩뎪뎫뎭"
    	],
    	[
    		"8981",
    		"뎮",
    		21,
    		"돆돇돉돊돍돏돑돒돓돖돘돚돜돞돟돡돢돣돥돦돧돩",
    		18,
    		"돽",
    		18,
    		"됑",
    		6,
    		"됙됚됛됝됞됟됡",
    		6,
    		"됪됬",
    		7,
    		"됵",
    		15
    	],
    	[
    		"8a41",
    		"둅",
    		10,
    		"둒둓둕둖둗둙",
    		6,
    		"둢둤둦"
    	],
    	[
    		"8a61",
    		"둧",
    		4,
    		"둭",
    		18,
    		"뒁뒂"
    	],
    	[
    		"8a81",
    		"뒃",
    		4,
    		"뒉",
    		19,
    		"뒞",
    		5,
    		"뒥뒦뒧뒩뒪뒫뒭",
    		7,
    		"뒶뒸뒺",
    		5,
    		"듁듂듃듅듆듇듉",
    		6,
    		"듑듒듓듔듖",
    		5,
    		"듞듟듡듢듥듧",
    		4,
    		"듮듰듲",
    		5,
    		"듹",
    		26,
    		"딖딗딙딚딝"
    	],
    	[
    		"8b41",
    		"딞",
    		5,
    		"딦딫",
    		4,
    		"딲딳딵딶딷딹",
    		6,
    		"땂땆"
    	],
    	[
    		"8b61",
    		"땇땈땉땊땎땏땑땒땓땕",
    		6,
    		"땞땢",
    		8
    	],
    	[
    		"8b81",
    		"땫",
    		52,
    		"떢떣떥떦떧떩떬떭떮떯떲떶",
    		4,
    		"떾떿뗁뗂뗃뗅",
    		6,
    		"뗎뗒",
    		5,
    		"뗙",
    		18,
    		"뗭",
    		18
    	],
    	[
    		"8c41",
    		"똀",
    		15,
    		"똒똓똕똖똗똙",
    		4
    	],
    	[
    		"8c61",
    		"똞",
    		6,
    		"똦",
    		5,
    		"똭",
    		6,
    		"똵",
    		5
    	],
    	[
    		"8c81",
    		"똻",
    		12,
    		"뙉",
    		26,
    		"뙥뙦뙧뙩",
    		50,
    		"뚞뚟뚡뚢뚣뚥",
    		5,
    		"뚭뚮뚯뚰뚲",
    		16
    	],
    	[
    		"8d41",
    		"뛃",
    		16,
    		"뛕",
    		8
    	],
    	[
    		"8d61",
    		"뛞",
    		17,
    		"뛱뛲뛳뛵뛶뛷뛹뛺"
    	],
    	[
    		"8d81",
    		"뛻",
    		4,
    		"뜂뜃뜄뜆",
    		33,
    		"뜪뜫뜭뜮뜱",
    		6,
    		"뜺뜼",
    		7,
    		"띅띆띇띉띊띋띍",
    		6,
    		"띖",
    		9,
    		"띡띢띣띥띦띧띩",
    		6,
    		"띲띴띶",
    		5,
    		"띾띿랁랂랃랅",
    		6,
    		"랎랓랔랕랚랛랝랞"
    	],
    	[
    		"8e41",
    		"랟랡",
    		6,
    		"랪랮",
    		5,
    		"랶랷랹",
    		8
    	],
    	[
    		"8e61",
    		"럂",
    		4,
    		"럈럊",
    		19
    	],
    	[
    		"8e81",
    		"럞",
    		13,
    		"럮럯럱럲럳럵",
    		6,
    		"럾렂",
    		4,
    		"렊렋렍렎렏렑",
    		6,
    		"렚렜렞",
    		5,
    		"렦렧렩렪렫렭",
    		6,
    		"렶렺",
    		5,
    		"롁롂롃롅",
    		11,
    		"롒롔",
    		7,
    		"롞롟롡롢롣롥",
    		6,
    		"롮롰롲",
    		5,
    		"롹롺롻롽",
    		7
    	],
    	[
    		"8f41",
    		"뢅",
    		7,
    		"뢎",
    		17
    	],
    	[
    		"8f61",
    		"뢠",
    		7,
    		"뢩",
    		6,
    		"뢱뢲뢳뢵뢶뢷뢹",
    		4
    	],
    	[
    		"8f81",
    		"뢾뢿룂룄룆",
    		5,
    		"룍룎룏룑룒룓룕",
    		7,
    		"룞룠룢",
    		5,
    		"룪룫룭룮룯룱",
    		6,
    		"룺룼룾",
    		5,
    		"뤅",
    		18,
    		"뤙",
    		6,
    		"뤡",
    		26,
    		"뤾뤿륁륂륃륅",
    		6,
    		"륍륎륐륒",
    		5
    	],
    	[
    		"9041",
    		"륚륛륝륞륟륡",
    		6,
    		"륪륬륮",
    		5,
    		"륶륷륹륺륻륽"
    	],
    	[
    		"9061",
    		"륾",
    		5,
    		"릆릈릋릌릏",
    		15
    	],
    	[
    		"9081",
    		"릟",
    		12,
    		"릮릯릱릲릳릵",
    		6,
    		"릾맀맂",
    		5,
    		"맊맋맍맓",
    		4,
    		"맚맜맟맠맢맦맧맩맪맫맭",
    		6,
    		"맶맻",
    		4,
    		"먂",
    		5,
    		"먉",
    		11,
    		"먖",
    		33,
    		"먺먻먽먾먿멁멃멄멅멆"
    	],
    	[
    		"9141",
    		"멇멊멌멏멐멑멒멖멗멙멚멛멝",
    		6,
    		"멦멪",
    		5
    	],
    	[
    		"9161",
    		"멲멳멵멶멷멹",
    		9,
    		"몆몈몉몊몋몍",
    		5
    	],
    	[
    		"9181",
    		"몓",
    		20,
    		"몪몭몮몯몱몳",
    		4,
    		"몺몼몾",
    		5,
    		"뫅뫆뫇뫉",
    		14,
    		"뫚",
    		33,
    		"뫽뫾뫿묁묂묃묅",
    		7,
    		"묎묐묒",
    		5,
    		"묙묚묛묝묞묟묡",
    		6
    	],
    	[
    		"9241",
    		"묨묪묬",
    		7,
    		"묷묹묺묿",
    		4,
    		"뭆뭈뭊뭋뭌뭎뭑뭒"
    	],
    	[
    		"9261",
    		"뭓뭕뭖뭗뭙",
    		7,
    		"뭢뭤",
    		7,
    		"뭭",
    		4
    	],
    	[
    		"9281",
    		"뭲",
    		21,
    		"뮉뮊뮋뮍뮎뮏뮑",
    		18,
    		"뮥뮦뮧뮩뮪뮫뮭",
    		6,
    		"뮵뮶뮸",
    		7,
    		"믁믂믃믅믆믇믉",
    		6,
    		"믑믒믔",
    		35,
    		"믺믻믽믾밁"
    	],
    	[
    		"9341",
    		"밃",
    		4,
    		"밊밎밐밒밓밙밚밠밡밢밣밦밨밪밫밬밮밯밲밳밵"
    	],
    	[
    		"9361",
    		"밶밷밹",
    		6,
    		"뱂뱆뱇뱈뱊뱋뱎뱏뱑",
    		8
    	],
    	[
    		"9381",
    		"뱚뱛뱜뱞",
    		37,
    		"벆벇벉벊벍벏",
    		4,
    		"벖벘벛",
    		4,
    		"벢벣벥벦벩",
    		6,
    		"벲벶",
    		5,
    		"벾벿볁볂볃볅",
    		7,
    		"볎볒볓볔볖볗볙볚볛볝",
    		22,
    		"볷볹볺볻볽"
    	],
    	[
    		"9441",
    		"볾",
    		5,
    		"봆봈봊",
    		5,
    		"봑봒봓봕",
    		8
    	],
    	[
    		"9461",
    		"봞",
    		5,
    		"봥",
    		6,
    		"봭",
    		12
    	],
    	[
    		"9481",
    		"봺",
    		5,
    		"뵁",
    		6,
    		"뵊뵋뵍뵎뵏뵑",
    		6,
    		"뵚",
    		9,
    		"뵥뵦뵧뵩",
    		22,
    		"붂붃붅붆붋",
    		4,
    		"붒붔붖붗붘붛붝",
    		6,
    		"붥",
    		10,
    		"붱",
    		6,
    		"붹",
    		24
    	],
    	[
    		"9541",
    		"뷒뷓뷖뷗뷙뷚뷛뷝",
    		11,
    		"뷪",
    		5,
    		"뷱"
    	],
    	[
    		"9561",
    		"뷲뷳뷵뷶뷷뷹",
    		6,
    		"븁븂븄븆",
    		5,
    		"븎븏븑븒븓"
    	],
    	[
    		"9581",
    		"븕",
    		6,
    		"븞븠",
    		35,
    		"빆빇빉빊빋빍빏",
    		4,
    		"빖빘빜빝빞빟빢빣빥빦빧빩빫",
    		4,
    		"빲빶",
    		4,
    		"빾빿뺁뺂뺃뺅",
    		6,
    		"뺎뺒",
    		5,
    		"뺚",
    		13,
    		"뺩",
    		14
    	],
    	[
    		"9641",
    		"뺸",
    		23,
    		"뻒뻓"
    	],
    	[
    		"9661",
    		"뻕뻖뻙",
    		6,
    		"뻡뻢뻦",
    		5,
    		"뻭",
    		8
    	],
    	[
    		"9681",
    		"뻶",
    		10,
    		"뼂",
    		5,
    		"뼊",
    		13,
    		"뼚뼞",
    		33,
    		"뽂뽃뽅뽆뽇뽉",
    		6,
    		"뽒뽓뽔뽖",
    		44
    	],
    	[
    		"9741",
    		"뾃",
    		16,
    		"뾕",
    		8
    	],
    	[
    		"9761",
    		"뾞",
    		17,
    		"뾱",
    		7
    	],
    	[
    		"9781",
    		"뾹",
    		11,
    		"뿆",
    		5,
    		"뿎뿏뿑뿒뿓뿕",
    		6,
    		"뿝뿞뿠뿢",
    		89,
    		"쀽쀾쀿"
    	],
    	[
    		"9841",
    		"쁀",
    		16,
    		"쁒",
    		5,
    		"쁙쁚쁛"
    	],
    	[
    		"9861",
    		"쁝쁞쁟쁡",
    		6,
    		"쁪",
    		15
    	],
    	[
    		"9881",
    		"쁺",
    		21,
    		"삒삓삕삖삗삙",
    		6,
    		"삢삤삦",
    		5,
    		"삮삱삲삷",
    		4,
    		"삾샂샃샄샆샇샊샋샍샎샏샑",
    		6,
    		"샚샞",
    		5,
    		"샦샧샩샪샫샭",
    		6,
    		"샶샸샺",
    		5,
    		"섁섂섃섅섆섇섉",
    		6,
    		"섑섒섓섔섖",
    		5,
    		"섡섢섥섨섩섪섫섮"
    	],
    	[
    		"9941",
    		"섲섳섴섵섷섺섻섽섾섿셁",
    		6,
    		"셊셎",
    		5,
    		"셖셗"
    	],
    	[
    		"9961",
    		"셙셚셛셝",
    		6,
    		"셦셪",
    		5,
    		"셱셲셳셵셶셷셹셺셻"
    	],
    	[
    		"9981",
    		"셼",
    		8,
    		"솆",
    		5,
    		"솏솑솒솓솕솗",
    		4,
    		"솞솠솢솣솤솦솧솪솫솭솮솯솱",
    		11,
    		"솾",
    		5,
    		"쇅쇆쇇쇉쇊쇋쇍",
    		6,
    		"쇕쇖쇙",
    		6,
    		"쇡쇢쇣쇥쇦쇧쇩",
    		6,
    		"쇲쇴",
    		7,
    		"쇾쇿숁숂숃숅",
    		6,
    		"숎숐숒",
    		5,
    		"숚숛숝숞숡숢숣"
    	],
    	[
    		"9a41",
    		"숤숥숦숧숪숬숮숰숳숵",
    		16
    	],
    	[
    		"9a61",
    		"쉆쉇쉉",
    		6,
    		"쉒쉓쉕쉖쉗쉙",
    		6,
    		"쉡쉢쉣쉤쉦"
    	],
    	[
    		"9a81",
    		"쉧",
    		4,
    		"쉮쉯쉱쉲쉳쉵",
    		6,
    		"쉾슀슂",
    		5,
    		"슊",
    		5,
    		"슑",
    		6,
    		"슙슚슜슞",
    		5,
    		"슦슧슩슪슫슮",
    		5,
    		"슶슸슺",
    		33,
    		"싞싟싡싢싥",
    		5,
    		"싮싰싲싳싴싵싷싺싽싾싿쌁",
    		6,
    		"쌊쌋쌎쌏"
    	],
    	[
    		"9b41",
    		"쌐쌑쌒쌖쌗쌙쌚쌛쌝",
    		6,
    		"쌦쌧쌪",
    		8
    	],
    	[
    		"9b61",
    		"쌳",
    		17,
    		"썆",
    		7
    	],
    	[
    		"9b81",
    		"썎",
    		25,
    		"썪썫썭썮썯썱썳",
    		4,
    		"썺썻썾",
    		5,
    		"쎅쎆쎇쎉쎊쎋쎍",
    		50,
    		"쏁",
    		22,
    		"쏚"
    	],
    	[
    		"9c41",
    		"쏛쏝쏞쏡쏣",
    		4,
    		"쏪쏫쏬쏮",
    		5,
    		"쏶쏷쏹",
    		5
    	],
    	[
    		"9c61",
    		"쏿",
    		8,
    		"쐉",
    		6,
    		"쐑",
    		9
    	],
    	[
    		"9c81",
    		"쐛",
    		8,
    		"쐥",
    		6,
    		"쐭쐮쐯쐱쐲쐳쐵",
    		6,
    		"쐾",
    		9,
    		"쑉",
    		26,
    		"쑦쑧쑩쑪쑫쑭",
    		6,
    		"쑶쑷쑸쑺",
    		5,
    		"쒁",
    		18,
    		"쒕",
    		6,
    		"쒝",
    		12
    	],
    	[
    		"9d41",
    		"쒪",
    		13,
    		"쒹쒺쒻쒽",
    		8
    	],
    	[
    		"9d61",
    		"쓆",
    		25
    	],
    	[
    		"9d81",
    		"쓠",
    		8,
    		"쓪",
    		5,
    		"쓲쓳쓵쓶쓷쓹쓻쓼쓽쓾씂",
    		9,
    		"씍씎씏씑씒씓씕",
    		6,
    		"씝",
    		10,
    		"씪씫씭씮씯씱",
    		6,
    		"씺씼씾",
    		5,
    		"앆앇앋앏앐앑앒앖앚앛앜앟앢앣앥앦앧앩",
    		6,
    		"앲앶",
    		5,
    		"앾앿얁얂얃얅얆얈얉얊얋얎얐얒얓얔"
    	],
    	[
    		"9e41",
    		"얖얙얚얛얝얞얟얡",
    		7,
    		"얪",
    		9,
    		"얶"
    	],
    	[
    		"9e61",
    		"얷얺얿",
    		4,
    		"엋엍엏엒엓엕엖엗엙",
    		6,
    		"엢엤엦엧"
    	],
    	[
    		"9e81",
    		"엨엩엪엫엯엱엲엳엵엸엹엺엻옂옃옄옉옊옋옍옎옏옑",
    		6,
    		"옚옝",
    		6,
    		"옦옧옩옪옫옯옱옲옶옸옺옼옽옾옿왂왃왅왆왇왉",
    		6,
    		"왒왖",
    		5,
    		"왞왟왡",
    		10,
    		"왭왮왰왲",
    		5,
    		"왺왻왽왾왿욁",
    		6,
    		"욊욌욎",
    		5,
    		"욖욗욙욚욛욝",
    		6,
    		"욦"
    	],
    	[
    		"9f41",
    		"욨욪",
    		5,
    		"욲욳욵욶욷욻",
    		4,
    		"웂웄웆",
    		5,
    		"웎"
    	],
    	[
    		"9f61",
    		"웏웑웒웓웕",
    		6,
    		"웞웟웢",
    		5,
    		"웪웫웭웮웯웱웲"
    	],
    	[
    		"9f81",
    		"웳",
    		4,
    		"웺웻웼웾",
    		5,
    		"윆윇윉윊윋윍",
    		6,
    		"윖윘윚",
    		5,
    		"윢윣윥윦윧윩",
    		6,
    		"윲윴윶윸윹윺윻윾윿읁읂읃읅",
    		4,
    		"읋읎읐읙읚읛읝읞읟읡",
    		6,
    		"읩읪읬",
    		7,
    		"읶읷읹읺읻읿잀잁잂잆잋잌잍잏잒잓잕잙잛",
    		4,
    		"잢잧",
    		4,
    		"잮잯잱잲잳잵잶잷"
    	],
    	[
    		"a041",
    		"잸잹잺잻잾쟂",
    		5,
    		"쟊쟋쟍쟏쟑",
    		6,
    		"쟙쟚쟛쟜"
    	],
    	[
    		"a061",
    		"쟞",
    		5,
    		"쟥쟦쟧쟩쟪쟫쟭",
    		13
    	],
    	[
    		"a081",
    		"쟻",
    		4,
    		"젂젃젅젆젇젉젋",
    		4,
    		"젒젔젗",
    		4,
    		"젞젟젡젢젣젥",
    		6,
    		"젮젰젲",
    		5,
    		"젹젺젻젽젾젿졁",
    		6,
    		"졊졋졎",
    		5,
    		"졕",
    		26,
    		"졲졳졵졶졷졹졻",
    		4,
    		"좂좄좈좉좊좎",
    		5,
    		"좕",
    		7,
    		"좞좠좢좣좤"
    	],
    	[
    		"a141",
    		"좥좦좧좩",
    		18,
    		"좾좿죀죁"
    	],
    	[
    		"a161",
    		"죂죃죅죆죇죉죊죋죍",
    		6,
    		"죖죘죚",
    		5,
    		"죢죣죥"
    	],
    	[
    		"a181",
    		"죦",
    		14,
    		"죶",
    		5,
    		"죾죿줁줂줃줇",
    		4,
    		"줎　、。·‥…¨〃­―∥＼∼‘’“”〔〕〈",
    		9,
    		"±×÷≠≤≥∞∴°′″℃Å￠￡￥♂♀∠⊥⌒∂∇≡≒§※☆★○●◎◇◆□■△▲▽▼→←↑↓↔〓≪≫√∽∝∵∫∬∈∋⊆⊇⊂⊃∪∩∧∨￢"
    	],
    	[
    		"a241",
    		"줐줒",
    		5,
    		"줙",
    		18
    	],
    	[
    		"a261",
    		"줭",
    		6,
    		"줵",
    		18
    	],
    	[
    		"a281",
    		"쥈",
    		7,
    		"쥒쥓쥕쥖쥗쥙",
    		6,
    		"쥢쥤",
    		7,
    		"쥭쥮쥯⇒⇔∀∃´～ˇ˘˝˚˙¸˛¡¿ː∮∑∏¤℉‰◁◀▷▶♤♠♡♥♧♣⊙◈▣◐◑▒▤▥▨▧▦▩♨☏☎☜☞¶†‡↕↗↙↖↘♭♩♪♬㉿㈜№㏇™㏂㏘℡€®"
    	],
    	[
    		"a341",
    		"쥱쥲쥳쥵",
    		6,
    		"쥽",
    		10,
    		"즊즋즍즎즏"
    	],
    	[
    		"a361",
    		"즑",
    		6,
    		"즚즜즞",
    		16
    	],
    	[
    		"a381",
    		"즯",
    		16,
    		"짂짃짅짆짉짋",
    		4,
    		"짒짔짗짘짛！",
    		58,
    		"￦］",
    		32,
    		"￣"
    	],
    	[
    		"a441",
    		"짞짟짡짣짥짦짨짩짪짫짮짲",
    		5,
    		"짺짻짽짾짿쨁쨂쨃쨄"
    	],
    	[
    		"a461",
    		"쨅쨆쨇쨊쨎",
    		5,
    		"쨕쨖쨗쨙",
    		12
    	],
    	[
    		"a481",
    		"쨦쨧쨨쨪",
    		28,
    		"ㄱ",
    		93
    	],
    	[
    		"a541",
    		"쩇",
    		4,
    		"쩎쩏쩑쩒쩓쩕",
    		6,
    		"쩞쩢",
    		5,
    		"쩩쩪"
    	],
    	[
    		"a561",
    		"쩫",
    		17,
    		"쩾",
    		5,
    		"쪅쪆"
    	],
    	[
    		"a581",
    		"쪇",
    		16,
    		"쪙",
    		14,
    		"ⅰ",
    		9
    	],
    	[
    		"a5b0",
    		"Ⅰ",
    		9
    	],
    	[
    		"a5c1",
    		"Α",
    		16,
    		"Σ",
    		6
    	],
    	[
    		"a5e1",
    		"α",
    		16,
    		"σ",
    		6
    	],
    	[
    		"a641",
    		"쪨",
    		19,
    		"쪾쪿쫁쫂쫃쫅"
    	],
    	[
    		"a661",
    		"쫆",
    		5,
    		"쫎쫐쫒쫔쫕쫖쫗쫚",
    		5,
    		"쫡",
    		6
    	],
    	[
    		"a681",
    		"쫨쫩쫪쫫쫭",
    		6,
    		"쫵",
    		18,
    		"쬉쬊─│┌┐┘└├┬┤┴┼━┃┏┓┛┗┣┳┫┻╋┠┯┨┷┿┝┰┥┸╂┒┑┚┙┖┕┎┍┞┟┡┢┦┧┩┪┭┮┱┲┵┶┹┺┽┾╀╁╃",
    		7
    	],
    	[
    		"a741",
    		"쬋",
    		4,
    		"쬑쬒쬓쬕쬖쬗쬙",
    		6,
    		"쬢",
    		7
    	],
    	[
    		"a761",
    		"쬪",
    		22,
    		"쭂쭃쭄"
    	],
    	[
    		"a781",
    		"쭅쭆쭇쭊쭋쭍쭎쭏쭑",
    		6,
    		"쭚쭛쭜쭞",
    		5,
    		"쭥",
    		7,
    		"㎕㎖㎗ℓ㎘㏄㎣㎤㎥㎦㎙",
    		9,
    		"㏊㎍㎎㎏㏏㎈㎉㏈㎧㎨㎰",
    		9,
    		"㎀",
    		4,
    		"㎺",
    		5,
    		"㎐",
    		4,
    		"Ω㏀㏁㎊㎋㎌㏖㏅㎭㎮㎯㏛㎩㎪㎫㎬㏝㏐㏓㏃㏉㏜㏆"
    	],
    	[
    		"a841",
    		"쭭",
    		10,
    		"쭺",
    		14
    	],
    	[
    		"a861",
    		"쮉",
    		18,
    		"쮝",
    		6
    	],
    	[
    		"a881",
    		"쮤",
    		19,
    		"쮹",
    		11,
    		"ÆÐªĦ"
    	],
    	[
    		"a8a6",
    		"Ĳ"
    	],
    	[
    		"a8a8",
    		"ĿŁØŒºÞŦŊ"
    	],
    	[
    		"a8b1",
    		"㉠",
    		27,
    		"ⓐ",
    		25,
    		"①",
    		14,
    		"½⅓⅔¼¾⅛⅜⅝⅞"
    	],
    	[
    		"a941",
    		"쯅",
    		14,
    		"쯕",
    		10
    	],
    	[
    		"a961",
    		"쯠쯡쯢쯣쯥쯦쯨쯪",
    		18
    	],
    	[
    		"a981",
    		"쯽",
    		14,
    		"찎찏찑찒찓찕",
    		6,
    		"찞찟찠찣찤æđðħıĳĸŀłøœßþŧŋŉ㈀",
    		27,
    		"⒜",
    		25,
    		"⑴",
    		14,
    		"¹²³⁴ⁿ₁₂₃₄"
    	],
    	[
    		"aa41",
    		"찥찦찪찫찭찯찱",
    		6,
    		"찺찿",
    		4,
    		"챆챇챉챊챋챍챎"
    	],
    	[
    		"aa61",
    		"챏",
    		4,
    		"챖챚",
    		5,
    		"챡챢챣챥챧챩",
    		6,
    		"챱챲"
    	],
    	[
    		"aa81",
    		"챳챴챶",
    		29,
    		"ぁ",
    		82
    	],
    	[
    		"ab41",
    		"첔첕첖첗첚첛첝첞첟첡",
    		6,
    		"첪첮",
    		5,
    		"첶첷첹"
    	],
    	[
    		"ab61",
    		"첺첻첽",
    		6,
    		"쳆쳈쳊",
    		5,
    		"쳑쳒쳓쳕",
    		5
    	],
    	[
    		"ab81",
    		"쳛",
    		8,
    		"쳥",
    		6,
    		"쳭쳮쳯쳱",
    		12,
    		"ァ",
    		85
    	],
    	[
    		"ac41",
    		"쳾쳿촀촂",
    		5,
    		"촊촋촍촎촏촑",
    		6,
    		"촚촜촞촟촠"
    	],
    	[
    		"ac61",
    		"촡촢촣촥촦촧촩촪촫촭",
    		11,
    		"촺",
    		4
    	],
    	[
    		"ac81",
    		"촿",
    		28,
    		"쵝쵞쵟А",
    		5,
    		"ЁЖ",
    		25
    	],
    	[
    		"acd1",
    		"а",
    		5,
    		"ёж",
    		25
    	],
    	[
    		"ad41",
    		"쵡쵢쵣쵥",
    		6,
    		"쵮쵰쵲",
    		5,
    		"쵹",
    		7
    	],
    	[
    		"ad61",
    		"춁",
    		6,
    		"춉",
    		10,
    		"춖춗춙춚춛춝춞춟"
    	],
    	[
    		"ad81",
    		"춠춡춢춣춦춨춪",
    		5,
    		"춱",
    		18,
    		"췅"
    	],
    	[
    		"ae41",
    		"췆",
    		5,
    		"췍췎췏췑",
    		16
    	],
    	[
    		"ae61",
    		"췢",
    		5,
    		"췩췪췫췭췮췯췱",
    		6,
    		"췺췼췾",
    		4
    	],
    	[
    		"ae81",
    		"츃츅츆츇츉츊츋츍",
    		6,
    		"츕츖츗츘츚",
    		5,
    		"츢츣츥츦츧츩츪츫"
    	],
    	[
    		"af41",
    		"츬츭츮츯츲츴츶",
    		19
    	],
    	[
    		"af61",
    		"칊",
    		13,
    		"칚칛칝칞칢",
    		5,
    		"칪칬"
    	],
    	[
    		"af81",
    		"칮",
    		5,
    		"칶칷칹칺칻칽",
    		6,
    		"캆캈캊",
    		5,
    		"캒캓캕캖캗캙"
    	],
    	[
    		"b041",
    		"캚",
    		5,
    		"캢캦",
    		5,
    		"캮",
    		12
    	],
    	[
    		"b061",
    		"캻",
    		5,
    		"컂",
    		19
    	],
    	[
    		"b081",
    		"컖",
    		13,
    		"컦컧컩컪컭",
    		6,
    		"컶컺",
    		5,
    		"가각간갇갈갉갊감",
    		7,
    		"같",
    		4,
    		"갠갤갬갭갯갰갱갸갹갼걀걋걍걔걘걜거걱건걷걸걺검겁것겄겅겆겉겊겋게겐겔겜겝겟겠겡겨격겪견겯결겸겹겻겼경곁계곈곌곕곗고곡곤곧골곪곬곯곰곱곳공곶과곽관괄괆"
    	],
    	[
    		"b141",
    		"켂켃켅켆켇켉",
    		6,
    		"켒켔켖",
    		5,
    		"켝켞켟켡켢켣"
    	],
    	[
    		"b161",
    		"켥",
    		6,
    		"켮켲",
    		5,
    		"켹",
    		11
    	],
    	[
    		"b181",
    		"콅",
    		14,
    		"콖콗콙콚콛콝",
    		6,
    		"콦콨콪콫콬괌괍괏광괘괜괠괩괬괭괴괵괸괼굄굅굇굉교굔굘굡굣구국군굳굴굵굶굻굼굽굿궁궂궈궉권궐궜궝궤궷귀귁귄귈귐귑귓규균귤그극근귿글긁금급긋긍긔기긱긴긷길긺김깁깃깅깆깊까깍깎깐깔깖깜깝깟깠깡깥깨깩깬깰깸"
    	],
    	[
    		"b241",
    		"콭콮콯콲콳콵콶콷콹",
    		6,
    		"쾁쾂쾃쾄쾆",
    		5,
    		"쾍"
    	],
    	[
    		"b261",
    		"쾎",
    		18,
    		"쾢",
    		5,
    		"쾩"
    	],
    	[
    		"b281",
    		"쾪",
    		5,
    		"쾱",
    		18,
    		"쿅",
    		6,
    		"깹깻깼깽꺄꺅꺌꺼꺽꺾껀껄껌껍껏껐껑께껙껜껨껫껭껴껸껼꼇꼈꼍꼐꼬꼭꼰꼲꼴꼼꼽꼿꽁꽂꽃꽈꽉꽐꽜꽝꽤꽥꽹꾀꾄꾈꾐꾑꾕꾜꾸꾹꾼꿀꿇꿈꿉꿋꿍꿎꿔꿜꿨꿩꿰꿱꿴꿸뀀뀁뀄뀌뀐뀔뀜뀝뀨끄끅끈끊끌끎끓끔끕끗끙"
    	],
    	[
    		"b341",
    		"쿌",
    		19,
    		"쿢쿣쿥쿦쿧쿩"
    	],
    	[
    		"b361",
    		"쿪",
    		5,
    		"쿲쿴쿶",
    		5,
    		"쿽쿾쿿퀁퀂퀃퀅",
    		5
    	],
    	[
    		"b381",
    		"퀋",
    		5,
    		"퀒",
    		5,
    		"퀙",
    		19,
    		"끝끼끽낀낄낌낍낏낑나낙낚난낟날낡낢남납낫",
    		4,
    		"낱낳내낵낸낼냄냅냇냈냉냐냑냔냘냠냥너넉넋넌널넒넓넘넙넛넜넝넣네넥넨넬넴넵넷넸넹녀녁년녈념녑녔녕녘녜녠노녹논놀놂놈놉놋농높놓놔놘놜놨뇌뇐뇔뇜뇝"
    	],
    	[
    		"b441",
    		"퀮",
    		5,
    		"퀶퀷퀹퀺퀻퀽",
    		6,
    		"큆큈큊",
    		5
    	],
    	[
    		"b461",
    		"큑큒큓큕큖큗큙",
    		6,
    		"큡",
    		10,
    		"큮큯"
    	],
    	[
    		"b481",
    		"큱큲큳큵",
    		6,
    		"큾큿킀킂",
    		18,
    		"뇟뇨뇩뇬뇰뇹뇻뇽누눅눈눋눌눔눕눗눙눠눴눼뉘뉜뉠뉨뉩뉴뉵뉼늄늅늉느늑는늘늙늚늠늡늣능늦늪늬늰늴니닉닌닐닒님닙닛닝닢다닥닦단닫",
    		4,
    		"닳담답닷",
    		4,
    		"닿대댁댄댈댐댑댓댔댕댜더덕덖던덛덜덞덟덤덥"
    	],
    	[
    		"b541",
    		"킕",
    		14,
    		"킦킧킩킪킫킭",
    		5
    	],
    	[
    		"b561",
    		"킳킶킸킺",
    		5,
    		"탂탃탅탆탇탊",
    		5,
    		"탒탖",
    		4
    	],
    	[
    		"b581",
    		"탛탞탟탡탢탣탥",
    		6,
    		"탮탲",
    		5,
    		"탹",
    		11,
    		"덧덩덫덮데덱덴델뎀뎁뎃뎄뎅뎌뎐뎔뎠뎡뎨뎬도독돈돋돌돎돐돔돕돗동돛돝돠돤돨돼됐되된될됨됩됫됴두둑둔둘둠둡둣둥둬뒀뒈뒝뒤뒨뒬뒵뒷뒹듀듄듈듐듕드득든듣들듦듬듭듯등듸디딕딘딛딜딤딥딧딨딩딪따딱딴딸"
    	],
    	[
    		"b641",
    		"턅",
    		7,
    		"턎",
    		17
    	],
    	[
    		"b661",
    		"턠",
    		15,
    		"턲턳턵턶턷턹턻턼턽턾"
    	],
    	[
    		"b681",
    		"턿텂텆",
    		5,
    		"텎텏텑텒텓텕",
    		6,
    		"텞텠텢",
    		5,
    		"텩텪텫텭땀땁땃땄땅땋때땍땐땔땜땝땟땠땡떠떡떤떨떪떫떰떱떳떴떵떻떼떽뗀뗄뗌뗍뗏뗐뗑뗘뗬또똑똔똘똥똬똴뙈뙤뙨뚜뚝뚠뚤뚫뚬뚱뛔뛰뛴뛸뜀뜁뜅뜨뜩뜬뜯뜰뜸뜹뜻띄띈띌띔띕띠띤띨띰띱띳띵라락란랄람랍랏랐랑랒랖랗"
    	],
    	[
    		"b741",
    		"텮",
    		13,
    		"텽",
    		6,
    		"톅톆톇톉톊"
    	],
    	[
    		"b761",
    		"톋",
    		20,
    		"톢톣톥톦톧"
    	],
    	[
    		"b781",
    		"톩",
    		6,
    		"톲톴톶톷톸톹톻톽톾톿퇁",
    		14,
    		"래랙랜랠램랩랫랬랭랴략랸럇량러럭런럴럼럽럿렀렁렇레렉렌렐렘렙렛렝려력련렬렴렵렷렸령례롄롑롓로록론롤롬롭롯롱롸롼뢍뢨뢰뢴뢸룀룁룃룅료룐룔룝룟룡루룩룬룰룸룹룻룽뤄뤘뤠뤼뤽륀륄륌륏륑류륙륜률륨륩"
    	],
    	[
    		"b841",
    		"퇐",
    		7,
    		"퇙",
    		17
    	],
    	[
    		"b861",
    		"퇫",
    		8,
    		"퇵퇶퇷퇹",
    		13
    	],
    	[
    		"b881",
    		"툈툊",
    		5,
    		"툑",
    		24,
    		"륫륭르륵른를름릅릇릉릊릍릎리릭린릴림립릿링마막만많",
    		4,
    		"맘맙맛망맞맡맣매맥맨맬맴맵맷맸맹맺먀먁먈먕머먹먼멀멂멈멉멋멍멎멓메멕멘멜멤멥멧멨멩며멱면멸몃몄명몇몌모목몫몬몰몲몸몹못몽뫄뫈뫘뫙뫼"
    	],
    	[
    		"b941",
    		"툪툫툮툯툱툲툳툵",
    		6,
    		"툾퉀퉂",
    		5,
    		"퉉퉊퉋퉌"
    	],
    	[
    		"b961",
    		"퉍",
    		14,
    		"퉝",
    		6,
    		"퉥퉦퉧퉨"
    	],
    	[
    		"b981",
    		"퉩",
    		22,
    		"튂튃튅튆튇튉튊튋튌묀묄묍묏묑묘묜묠묩묫무묵묶문묻물묽묾뭄뭅뭇뭉뭍뭏뭐뭔뭘뭡뭣뭬뮈뮌뮐뮤뮨뮬뮴뮷므믄믈믐믓미믹민믿밀밂밈밉밋밌밍및밑바",
    		4,
    		"받",
    		4,
    		"밤밥밧방밭배백밴밸뱀뱁뱃뱄뱅뱉뱌뱍뱐뱝버벅번벋벌벎범법벗"
    	],
    	[
    		"ba41",
    		"튍튎튏튒튓튔튖",
    		5,
    		"튝튞튟튡튢튣튥",
    		6,
    		"튭"
    	],
    	[
    		"ba61",
    		"튮튯튰튲",
    		5,
    		"튺튻튽튾틁틃",
    		4,
    		"틊틌",
    		5
    	],
    	[
    		"ba81",
    		"틒틓틕틖틗틙틚틛틝",
    		6,
    		"틦",
    		9,
    		"틲틳틵틶틷틹틺벙벚베벡벤벧벨벰벱벳벴벵벼벽변별볍볏볐병볕볘볜보복볶본볼봄봅봇봉봐봔봤봬뵀뵈뵉뵌뵐뵘뵙뵤뵨부북분붇불붉붊붐붑붓붕붙붚붜붤붰붸뷔뷕뷘뷜뷩뷰뷴뷸븀븃븅브븍븐블븜븝븟비빅빈빌빎빔빕빗빙빚빛빠빡빤"
    	],
    	[
    		"bb41",
    		"틻",
    		4,
    		"팂팄팆",
    		5,
    		"팏팑팒팓팕팗",
    		4,
    		"팞팢팣"
    	],
    	[
    		"bb61",
    		"팤팦팧팪팫팭팮팯팱",
    		6,
    		"팺팾",
    		5,
    		"퍆퍇퍈퍉"
    	],
    	[
    		"bb81",
    		"퍊",
    		31,
    		"빨빪빰빱빳빴빵빻빼빽뺀뺄뺌뺍뺏뺐뺑뺘뺙뺨뻐뻑뻔뻗뻘뻠뻣뻤뻥뻬뼁뼈뼉뼘뼙뼛뼜뼝뽀뽁뽄뽈뽐뽑뽕뾔뾰뿅뿌뿍뿐뿔뿜뿟뿡쀼쁑쁘쁜쁠쁨쁩삐삑삔삘삠삡삣삥사삭삯산삳살삵삶삼삽삿샀상샅새색샌샐샘샙샛샜생샤"
    	],
    	[
    		"bc41",
    		"퍪",
    		17,
    		"퍾퍿펁펂펃펅펆펇"
    	],
    	[
    		"bc61",
    		"펈펉펊펋펎펒",
    		5,
    		"펚펛펝펞펟펡",
    		6,
    		"펪펬펮"
    	],
    	[
    		"bc81",
    		"펯",
    		4,
    		"펵펶펷펹펺펻펽",
    		6,
    		"폆폇폊",
    		5,
    		"폑",
    		5,
    		"샥샨샬샴샵샷샹섀섄섈섐섕서",
    		4,
    		"섣설섦섧섬섭섯섰성섶세섹센셀셈셉셋셌셍셔셕션셜셤셥셧셨셩셰셴셸솅소속솎손솔솖솜솝솟송솥솨솩솬솰솽쇄쇈쇌쇔쇗쇘쇠쇤쇨쇰쇱쇳쇼쇽숀숄숌숍숏숑수숙순숟술숨숩숫숭"
    	],
    	[
    		"bd41",
    		"폗폙",
    		7,
    		"폢폤",
    		7,
    		"폮폯폱폲폳폵폶폷"
    	],
    	[
    		"bd61",
    		"폸폹폺폻폾퐀퐂",
    		5,
    		"퐉",
    		13
    	],
    	[
    		"bd81",
    		"퐗",
    		5,
    		"퐞",
    		25,
    		"숯숱숲숴쉈쉐쉑쉔쉘쉠쉥쉬쉭쉰쉴쉼쉽쉿슁슈슉슐슘슛슝스슥슨슬슭슴습슷승시식신싣실싫심십싯싱싶싸싹싻싼쌀쌈쌉쌌쌍쌓쌔쌕쌘쌜쌤쌥쌨쌩썅써썩썬썰썲썸썹썼썽쎄쎈쎌쏀쏘쏙쏜쏟쏠쏢쏨쏩쏭쏴쏵쏸쐈쐐쐤쐬쐰"
    	],
    	[
    		"be41",
    		"퐸",
    		7,
    		"푁푂푃푅",
    		14
    	],
    	[
    		"be61",
    		"푔",
    		7,
    		"푝푞푟푡푢푣푥",
    		7,
    		"푮푰푱푲"
    	],
    	[
    		"be81",
    		"푳",
    		4,
    		"푺푻푽푾풁풃",
    		4,
    		"풊풌풎",
    		5,
    		"풕",
    		8,
    		"쐴쐼쐽쑈쑤쑥쑨쑬쑴쑵쑹쒀쒔쒜쒸쒼쓩쓰쓱쓴쓸쓺쓿씀씁씌씐씔씜씨씩씬씰씸씹씻씽아악안앉않알앍앎앓암압앗았앙앝앞애액앤앨앰앱앳앴앵야약얀얄얇얌얍얏양얕얗얘얜얠얩어억언얹얻얼얽얾엄",
    		6,
    		"엌엎"
    	],
    	[
    		"bf41",
    		"풞",
    		10,
    		"풪",
    		14
    	],
    	[
    		"bf61",
    		"풹",
    		18,
    		"퓍퓎퓏퓑퓒퓓퓕"
    	],
    	[
    		"bf81",
    		"퓖",
    		5,
    		"퓝퓞퓠",
    		7,
    		"퓩퓪퓫퓭퓮퓯퓱",
    		6,
    		"퓹퓺퓼에엑엔엘엠엡엣엥여역엮연열엶엷염",
    		5,
    		"옅옆옇예옌옐옘옙옛옜오옥온올옭옮옰옳옴옵옷옹옻와왁완왈왐왑왓왔왕왜왝왠왬왯왱외왹왼욀욈욉욋욍요욕욘욜욤욥욧용우욱운울욹욺움웁웃웅워웍원월웜웝웠웡웨"
    	],
    	[
    		"c041",
    		"퓾",
    		5,
    		"픅픆픇픉픊픋픍",
    		6,
    		"픖픘",
    		5
    	],
    	[
    		"c061",
    		"픞",
    		25
    	],
    	[
    		"c081",
    		"픸픹픺픻픾픿핁핂핃핅",
    		6,
    		"핎핐핒",
    		5,
    		"핚핛핝핞핟핡핢핣웩웬웰웸웹웽위윅윈윌윔윕윗윙유육윤율윰윱윳융윷으윽은을읊음읍읏응",
    		7,
    		"읜읠읨읫이익인일읽읾잃임입잇있잉잊잎자작잔잖잗잘잚잠잡잣잤장잦재잭잰잴잼잽잿쟀쟁쟈쟉쟌쟎쟐쟘쟝쟤쟨쟬저적전절젊"
    	],
    	[
    		"c141",
    		"핤핦핧핪핬핮",
    		5,
    		"핶핷핹핺핻핽",
    		6,
    		"햆햊햋"
    	],
    	[
    		"c161",
    		"햌햍햎햏햑",
    		19,
    		"햦햧"
    	],
    	[
    		"c181",
    		"햨",
    		31,
    		"점접젓정젖제젝젠젤젬젭젯젱져젼졀졈졉졌졍졔조족존졸졺좀좁좃종좆좇좋좌좍좔좝좟좡좨좼좽죄죈죌죔죕죗죙죠죡죤죵주죽준줄줅줆줌줍줏중줘줬줴쥐쥑쥔쥘쥠쥡쥣쥬쥰쥴쥼즈즉즌즐즘즙즛증지직진짇질짊짐집짓"
    	],
    	[
    		"c241",
    		"헊헋헍헎헏헑헓",
    		4,
    		"헚헜헞",
    		5,
    		"헦헧헩헪헫헭헮"
    	],
    	[
    		"c261",
    		"헯",
    		4,
    		"헶헸헺",
    		5,
    		"혂혃혅혆혇혉",
    		6,
    		"혒"
    	],
    	[
    		"c281",
    		"혖",
    		5,
    		"혝혞혟혡혢혣혥",
    		7,
    		"혮",
    		9,
    		"혺혻징짖짙짚짜짝짠짢짤짧짬짭짯짰짱째짹짼쨀쨈쨉쨋쨌쨍쨔쨘쨩쩌쩍쩐쩔쩜쩝쩟쩠쩡쩨쩽쪄쪘쪼쪽쫀쫄쫌쫍쫏쫑쫓쫘쫙쫠쫬쫴쬈쬐쬔쬘쬠쬡쭁쭈쭉쭌쭐쭘쭙쭝쭤쭸쭹쮜쮸쯔쯤쯧쯩찌찍찐찔찜찝찡찢찧차착찬찮찰참찹찻"
    	],
    	[
    		"c341",
    		"혽혾혿홁홂홃홄홆홇홊홌홎홏홐홒홓홖홗홙홚홛홝",
    		4
    	],
    	[
    		"c361",
    		"홢",
    		4,
    		"홨홪",
    		5,
    		"홲홳홵",
    		11
    	],
    	[
    		"c381",
    		"횁횂횄횆",
    		5,
    		"횎횏횑횒횓횕",
    		7,
    		"횞횠횢",
    		5,
    		"횩횪찼창찾채책챈챌챔챕챗챘챙챠챤챦챨챰챵처척천철첨첩첫첬청체첵첸첼쳄쳅쳇쳉쳐쳔쳤쳬쳰촁초촉촌촐촘촙촛총촤촨촬촹최쵠쵤쵬쵭쵯쵱쵸춈추축춘출춤춥춧충춰췄췌췐취췬췰췸췹췻췽츄츈츌츔츙츠측츤츨츰츱츳층"
    	],
    	[
    		"c441",
    		"횫횭횮횯횱",
    		7,
    		"횺횼",
    		7,
    		"훆훇훉훊훋"
    	],
    	[
    		"c461",
    		"훍훎훏훐훒훓훕훖훘훚",
    		5,
    		"훡훢훣훥훦훧훩",
    		4
    	],
    	[
    		"c481",
    		"훮훯훱훲훳훴훶",
    		5,
    		"훾훿휁휂휃휅",
    		11,
    		"휒휓휔치칙친칟칠칡침칩칫칭카칵칸칼캄캅캇캉캐캑캔캘캠캡캣캤캥캬캭컁커컥컨컫컬컴컵컷컸컹케켁켄켈켐켑켓켕켜켠켤켬켭켯켰켱켸코콕콘콜콤콥콧콩콰콱콴콸쾀쾅쾌쾡쾨쾰쿄쿠쿡쿤쿨쿰쿱쿳쿵쿼퀀퀄퀑퀘퀭퀴퀵퀸퀼"
    	],
    	[
    		"c541",
    		"휕휖휗휚휛휝휞휟휡",
    		6,
    		"휪휬휮",
    		5,
    		"휶휷휹"
    	],
    	[
    		"c561",
    		"휺휻휽",
    		6,
    		"흅흆흈흊",
    		5,
    		"흒흓흕흚",
    		4
    	],
    	[
    		"c581",
    		"흟흢흤흦흧흨흪흫흭흮흯흱흲흳흵",
    		6,
    		"흾흿힀힂",
    		5,
    		"힊힋큄큅큇큉큐큔큘큠크큭큰클큼큽킁키킥킨킬킴킵킷킹타탁탄탈탉탐탑탓탔탕태택탠탤탬탭탯탰탱탸턍터턱턴털턺텀텁텃텄텅테텍텐텔템텝텟텡텨텬텼톄톈토톡톤톨톰톱톳통톺톼퇀퇘퇴퇸툇툉툐투툭툰툴툼툽툿퉁퉈퉜"
    	],
    	[
    		"c641",
    		"힍힎힏힑",
    		6,
    		"힚힜힞",
    		5
    	],
    	[
    		"c6a1",
    		"퉤튀튁튄튈튐튑튕튜튠튤튬튱트특튼튿틀틂틈틉틋틔틘틜틤틥티틱틴틸팀팁팃팅파팍팎판팔팖팜팝팟팠팡팥패팩팬팰팸팹팻팼팽퍄퍅퍼퍽펀펄펌펍펏펐펑페펙펜펠펨펩펫펭펴편펼폄폅폈평폐폘폡폣포폭폰폴폼폽폿퐁"
    	],
    	[
    		"c7a1",
    		"퐈퐝푀푄표푠푤푭푯푸푹푼푿풀풂품풉풋풍풔풩퓌퓐퓔퓜퓟퓨퓬퓰퓸퓻퓽프픈플픔픕픗피픽핀필핌핍핏핑하학한할핥함합핫항해핵핸핼햄햅햇했행햐향허헉헌헐헒험헙헛헝헤헥헨헬헴헵헷헹혀혁현혈혐협혓혔형혜혠"
    	],
    	[
    		"c8a1",
    		"혤혭호혹혼홀홅홈홉홋홍홑화확환활홧황홰홱홴횃횅회획횐횔횝횟횡효횬횰횹횻후훅훈훌훑훔훗훙훠훤훨훰훵훼훽휀휄휑휘휙휜휠휨휩휫휭휴휵휸휼흄흇흉흐흑흔흖흗흘흙흠흡흣흥흩희흰흴흼흽힁히힉힌힐힘힙힛힝"
    	],
    	[
    		"caa1",
    		"伽佳假價加可呵哥嘉嫁家暇架枷柯歌珂痂稼苛茄街袈訶賈跏軻迦駕刻却各恪慤殼珏脚覺角閣侃刊墾奸姦干幹懇揀杆柬桿澗癎看磵稈竿簡肝艮艱諫間乫喝曷渴碣竭葛褐蝎鞨勘坎堪嵌感憾戡敢柑橄減甘疳監瞰紺邯鑑鑒龕"
    	],
    	[
    		"cba1",
    		"匣岬甲胛鉀閘剛堈姜岡崗康强彊慷江畺疆糠絳綱羌腔舡薑襁講鋼降鱇介价個凱塏愷愾慨改槪漑疥皆盖箇芥蓋豈鎧開喀客坑更粳羹醵倨去居巨拒据據擧渠炬祛距踞車遽鉅鋸乾件健巾建愆楗腱虔蹇鍵騫乞傑杰桀儉劍劒檢"
    	],
    	[
    		"cca1",
    		"瞼鈐黔劫怯迲偈憩揭擊格檄激膈覡隔堅牽犬甄絹繭肩見譴遣鵑抉決潔結缺訣兼慊箝謙鉗鎌京俓倞傾儆勁勍卿坰境庚徑慶憬擎敬景暻更梗涇炅烱璟璥瓊痙硬磬竟競絅經耕耿脛莖警輕逕鏡頃頸驚鯨係啓堺契季屆悸戒桂械"
    	],
    	[
    		"cda1",
    		"棨溪界癸磎稽系繫繼計誡谿階鷄古叩告呱固姑孤尻庫拷攷故敲暠枯槁沽痼皐睾稿羔考股膏苦苽菰藁蠱袴誥賈辜錮雇顧高鼓哭斛曲梏穀谷鵠困坤崑昆梱棍滾琨袞鯤汨滑骨供公共功孔工恐恭拱控攻珙空蚣貢鞏串寡戈果瓜"
    	],
    	[
    		"cea1",
    		"科菓誇課跨過鍋顆廓槨藿郭串冠官寬慣棺款灌琯瓘管罐菅觀貫關館刮恝括适侊光匡壙廣曠洸炚狂珖筐胱鑛卦掛罫乖傀塊壞怪愧拐槐魁宏紘肱轟交僑咬喬嬌嶠巧攪敎校橋狡皎矯絞翹膠蕎蛟較轎郊餃驕鮫丘久九仇俱具勾"
    	],
    	[
    		"cfa1",
    		"區口句咎嘔坵垢寇嶇廐懼拘救枸柩構歐毆毬求溝灸狗玖球瞿矩究絿耉臼舅舊苟衢謳購軀逑邱鉤銶駒驅鳩鷗龜國局菊鞠鞫麴君窘群裙軍郡堀屈掘窟宮弓穹窮芎躬倦券勸卷圈拳捲權淃眷厥獗蕨蹶闕机櫃潰詭軌饋句晷歸貴"
    	],
    	[
    		"d0a1",
    		"鬼龜叫圭奎揆槻珪硅窺竅糾葵規赳逵閨勻均畇筠菌鈞龜橘克剋劇戟棘極隙僅劤勤懃斤根槿瑾筋芹菫覲謹近饉契今妗擒昑檎琴禁禽芩衾衿襟金錦伋及急扱汲級給亘兢矜肯企伎其冀嗜器圻基埼夔奇妓寄岐崎己幾忌技旗旣"
    	],
    	[
    		"d1a1",
    		"朞期杞棋棄機欺氣汽沂淇玘琦琪璂璣畸畿碁磯祁祇祈祺箕紀綺羈耆耭肌記譏豈起錡錤飢饑騎騏驥麒緊佶吉拮桔金喫儺喇奈娜懦懶拏拿癩",
    		5,
    		"那樂",
    		4,
    		"諾酪駱亂卵暖欄煖爛蘭難鸞捏捺南嵐枏楠湳濫男藍襤拉"
    	],
    	[
    		"d2a1",
    		"納臘蠟衲囊娘廊",
    		4,
    		"乃來內奈柰耐冷女年撚秊念恬拈捻寧寗努勞奴弩怒擄櫓爐瑙盧",
    		5,
    		"駑魯",
    		10,
    		"濃籠聾膿農惱牢磊腦賂雷尿壘",
    		7,
    		"嫩訥杻紐勒",
    		5,
    		"能菱陵尼泥匿溺多茶"
    	],
    	[
    		"d3a1",
    		"丹亶但單團壇彖斷旦檀段湍短端簞緞蛋袒鄲鍛撻澾獺疸達啖坍憺擔曇淡湛潭澹痰聃膽蕁覃談譚錟沓畓答踏遝唐堂塘幢戇撞棠當糖螳黨代垈坮大對岱帶待戴擡玳臺袋貸隊黛宅德悳倒刀到圖堵塗導屠島嶋度徒悼挑掉搗桃"
    	],
    	[
    		"d4a1",
    		"棹櫂淘渡滔濤燾盜睹禱稻萄覩賭跳蹈逃途道都鍍陶韜毒瀆牘犢獨督禿篤纛讀墩惇敦旽暾沌焞燉豚頓乭突仝冬凍動同憧東桐棟洞潼疼瞳童胴董銅兜斗杜枓痘竇荳讀豆逗頭屯臀芚遁遯鈍得嶝橙燈登等藤謄鄧騰喇懶拏癩羅"
    	],
    	[
    		"d5a1",
    		"蘿螺裸邏樂洛烙珞絡落諾酪駱丹亂卵欄欒瀾爛蘭鸞剌辣嵐擥攬欖濫籃纜藍襤覽拉臘蠟廊朗浪狼琅瑯螂郞來崍徠萊冷掠略亮倆兩凉梁樑粮粱糧良諒輛量侶儷勵呂廬慮戾旅櫚濾礪藜蠣閭驢驪麗黎力曆歷瀝礫轢靂憐戀攣漣"
    	],
    	[
    		"d6a1",
    		"煉璉練聯蓮輦連鍊冽列劣洌烈裂廉斂殮濂簾獵令伶囹寧岺嶺怜玲笭羚翎聆逞鈴零靈領齡例澧禮醴隷勞怒撈擄櫓潞瀘爐盧老蘆虜路輅露魯鷺鹵碌祿綠菉錄鹿麓論壟弄朧瀧瓏籠聾儡瀨牢磊賂賚賴雷了僚寮廖料燎療瞭聊蓼"
    	],
    	[
    		"d7a1",
    		"遼鬧龍壘婁屢樓淚漏瘻累縷蔞褸鏤陋劉旒柳榴流溜瀏琉瑠留瘤硫謬類六戮陸侖倫崙淪綸輪律慄栗率隆勒肋凜凌楞稜綾菱陵俚利厘吏唎履悧李梨浬犁狸理璃異痢籬罹羸莉裏裡里釐離鯉吝潾燐璘藺躪隣鱗麟林淋琳臨霖砬"
    	],
    	[
    		"d8a1",
    		"立笠粒摩瑪痲碼磨馬魔麻寞幕漠膜莫邈万卍娩巒彎慢挽晩曼滿漫灣瞞萬蔓蠻輓饅鰻唜抹末沫茉襪靺亡妄忘忙望網罔芒茫莽輞邙埋妹媒寐昧枚梅每煤罵買賣邁魅脈貊陌驀麥孟氓猛盲盟萌冪覓免冕勉棉沔眄眠綿緬面麵滅"
    	],
    	[
    		"d9a1",
    		"蔑冥名命明暝椧溟皿瞑茗蓂螟酩銘鳴袂侮冒募姆帽慕摸摹暮某模母毛牟牡瑁眸矛耗芼茅謀謨貌木沐牧目睦穆鶩歿沒夢朦蒙卯墓妙廟描昴杳渺猫竗苗錨務巫憮懋戊拇撫无楙武毋無珷畝繆舞茂蕪誣貿霧鵡墨默們刎吻問文"
    	],
    	[
    		"daa1",
    		"汶紊紋聞蚊門雯勿沕物味媚尾嵋彌微未梶楣渼湄眉米美薇謎迷靡黴岷悶愍憫敏旻旼民泯玟珉緡閔密蜜謐剝博拍搏撲朴樸泊珀璞箔粕縛膊舶薄迫雹駁伴半反叛拌搬攀斑槃泮潘班畔瘢盤盼磐磻礬絆般蟠返頒飯勃拔撥渤潑"
    	],
    	[
    		"dba1",
    		"發跋醱鉢髮魃倣傍坊妨尨幇彷房放方旁昉枋榜滂磅紡肪膀舫芳蒡蚌訪謗邦防龐倍俳北培徘拜排杯湃焙盃背胚裴裵褙賠輩配陪伯佰帛柏栢白百魄幡樊煩燔番磻繁蕃藩飜伐筏罰閥凡帆梵氾汎泛犯範范法琺僻劈壁擘檗璧癖"
    	],
    	[
    		"dca1",
    		"碧蘗闢霹便卞弁變辨辯邊別瞥鱉鼈丙倂兵屛幷昞昺柄棅炳甁病秉竝輧餠騈保堡報寶普步洑湺潽珤甫菩補褓譜輔伏僕匐卜宓復服福腹茯蔔複覆輹輻馥鰒本乶俸奉封峯峰捧棒烽熢琫縫蓬蜂逢鋒鳳不付俯傅剖副否咐埠夫婦"
    	],
    	[
    		"dda1",
    		"孚孵富府復扶敷斧浮溥父符簿缶腐腑膚艀芙莩訃負賦賻赴趺部釜阜附駙鳧北分吩噴墳奔奮忿憤扮昐汾焚盆粉糞紛芬賁雰不佛弗彿拂崩朋棚硼繃鵬丕備匕匪卑妃婢庇悲憊扉批斐枇榧比毖毗毘沸泌琵痺砒碑秕秘粃緋翡肥"
    	],
    	[
    		"dea1",
    		"脾臂菲蜚裨誹譬費鄙非飛鼻嚬嬪彬斌檳殯浜濱瀕牝玭貧賓頻憑氷聘騁乍事些仕伺似使俟僿史司唆嗣四士奢娑寫寺射巳師徙思捨斜斯柶査梭死沙泗渣瀉獅砂社祀祠私篩紗絲肆舍莎蓑蛇裟詐詞謝賜赦辭邪飼駟麝削數朔索"
    	],
    	[
    		"dfa1",
    		"傘刪山散汕珊産疝算蒜酸霰乷撒殺煞薩三參杉森渗芟蔘衫揷澁鈒颯上傷像償商喪嘗孀尙峠常床庠廂想桑橡湘爽牀狀相祥箱翔裳觴詳象賞霜塞璽賽嗇塞穡索色牲生甥省笙墅壻嶼序庶徐恕抒捿敍暑曙書栖棲犀瑞筮絮緖署"
    	],
    	[
    		"e0a1",
    		"胥舒薯西誓逝鋤黍鼠夕奭席惜昔晳析汐淅潟石碩蓆釋錫仙僊先善嬋宣扇敾旋渲煽琁瑄璇璿癬禪線繕羨腺膳船蘚蟬詵跣選銑鐥饍鮮卨屑楔泄洩渫舌薛褻設說雪齧剡暹殲纖蟾贍閃陝攝涉燮葉城姓宬性惺成星晟猩珹盛省筬"
    	],
    	[
    		"e1a1",
    		"聖聲腥誠醒世勢歲洗稅笹細說貰召嘯塑宵小少巢所掃搔昭梳沼消溯瀟炤燒甦疏疎瘙笑篠簫素紹蔬蕭蘇訴逍遡邵銷韶騷俗屬束涑粟續謖贖速孫巽損蓀遜飡率宋悚松淞訟誦送頌刷殺灑碎鎖衰釗修受嗽囚垂壽嫂守岫峀帥愁"
    	],
    	[
    		"e2a1",
    		"戍手授搜收數樹殊水洙漱燧狩獸琇璲瘦睡秀穗竪粹綏綬繡羞脩茱蒐蓚藪袖誰讐輸遂邃酬銖銹隋隧隨雖需須首髓鬚叔塾夙孰宿淑潚熟琡璹肅菽巡徇循恂旬栒楯橓殉洵淳珣盾瞬筍純脣舜荀蓴蕣詢諄醇錞順馴戌術述鉥崇崧"
    	],
    	[
    		"e3a1",
    		"嵩瑟膝蝨濕拾習褶襲丞乘僧勝升承昇繩蠅陞侍匙嘶始媤尸屎屍市弑恃施是時枾柴猜矢示翅蒔蓍視試詩諡豕豺埴寔式息拭植殖湜熄篒蝕識軾食飾伸侁信呻娠宸愼新晨燼申神紳腎臣莘薪藎蜃訊身辛辰迅失室實悉審尋心沁"
    	],
    	[
    		"e4a1",
    		"沈深瀋甚芯諶什十拾雙氏亞俄兒啞娥峨我牙芽莪蛾衙訝阿雅餓鴉鵝堊岳嶽幄惡愕握樂渥鄂鍔顎鰐齷安岸按晏案眼雁鞍顔鮟斡謁軋閼唵岩巖庵暗癌菴闇壓押狎鴨仰央怏昻殃秧鴦厓哀埃崖愛曖涯碍艾隘靄厄扼掖液縊腋額"
    	],
    	[
    		"e5a1",
    		"櫻罌鶯鸚也倻冶夜惹揶椰爺耶若野弱掠略約若葯蒻藥躍亮佯兩凉壤孃恙揚攘敭暘梁楊樣洋瀁煬痒瘍禳穰糧羊良襄諒讓釀陽量養圄御於漁瘀禦語馭魚齬億憶抑檍臆偃堰彦焉言諺孼蘖俺儼嚴奄掩淹嶪業円予余勵呂女如廬"
    	],
    	[
    		"e6a1",
    		"旅歟汝濾璵礖礪與艅茹輿轝閭餘驪麗黎亦力域役易曆歷疫繹譯轢逆驛嚥堧姸娟宴年延憐戀捐挻撚椽沇沿涎涓淵演漣烟然煙煉燃燕璉硏硯秊筵緣練縯聯衍軟輦蓮連鉛鍊鳶列劣咽悅涅烈熱裂說閱厭廉念捻染殮炎焰琰艶苒"
    	],
    	[
    		"e7a1",
    		"簾閻髥鹽曄獵燁葉令囹塋寧嶺嶸影怜映暎楹榮永泳渶潁濚瀛瀯煐營獰玲瑛瑩瓔盈穎纓羚聆英詠迎鈴鍈零霙靈領乂倪例刈叡曳汭濊猊睿穢芮藝蘂禮裔詣譽豫醴銳隸霓預五伍俉傲午吾吳嗚塢墺奧娛寤悟惡懊敖旿晤梧汚澳"
    	],
    	[
    		"e8a1",
    		"烏熬獒筽蜈誤鰲鼇屋沃獄玉鈺溫瑥瘟穩縕蘊兀壅擁瓮甕癰翁邕雍饔渦瓦窩窪臥蛙蝸訛婉完宛梡椀浣玩琓琬碗緩翫脘腕莞豌阮頑曰往旺枉汪王倭娃歪矮外嵬巍猥畏了僚僥凹堯夭妖姚寥寮尿嶢拗搖撓擾料曜樂橈燎燿瑤療"
    	],
    	[
    		"e9a1",
    		"窈窯繇繞耀腰蓼蟯要謠遙遼邀饒慾欲浴縟褥辱俑傭冗勇埇墉容庸慂榕涌湧溶熔瑢用甬聳茸蓉踊鎔鏞龍于佑偶優又友右宇寓尤愚憂旴牛玗瑀盂祐禑禹紆羽芋藕虞迂遇郵釪隅雨雩勖彧旭昱栯煜稶郁頊云暈橒殞澐熉耘芸蕓"
    	],
    	[
    		"eaa1",
    		"運隕雲韻蔚鬱亐熊雄元原員圓園垣媛嫄寃怨愿援沅洹湲源爰猿瑗苑袁轅遠阮院願鴛月越鉞位偉僞危圍委威尉慰暐渭爲瑋緯胃萎葦蔿蝟衛褘謂違韋魏乳侑儒兪劉唯喩孺宥幼幽庾悠惟愈愉揄攸有杻柔柚柳楡楢油洧流游溜"
    	],
    	[
    		"eba1",
    		"濡猶猷琉瑜由留癒硫紐維臾萸裕誘諛諭踰蹂遊逾遺酉釉鍮類六堉戮毓肉育陸倫允奫尹崙淪潤玧胤贇輪鈗閏律慄栗率聿戎瀜絨融隆垠恩慇殷誾銀隱乙吟淫蔭陰音飮揖泣邑凝應膺鷹依倚儀宜意懿擬椅毅疑矣義艤薏蟻衣誼"
    	],
    	[
    		"eca1",
    		"議醫二以伊利吏夷姨履已弛彛怡易李梨泥爾珥理異痍痢移罹而耳肄苡荑裏裡貽貳邇里離飴餌匿溺瀷益翊翌翼謚人仁刃印吝咽因姻寅引忍湮燐璘絪茵藺蚓認隣靭靷鱗麟一佚佾壹日溢逸鎰馹任壬妊姙恁林淋稔臨荏賃入卄"
    	],
    	[
    		"eda1",
    		"立笠粒仍剩孕芿仔刺咨姉姿子字孜恣慈滋炙煮玆瓷疵磁紫者自茨蔗藉諮資雌作勺嚼斫昨灼炸爵綽芍酌雀鵲孱棧殘潺盞岑暫潛箴簪蠶雜丈仗匠場墻壯奬將帳庄張掌暲杖樟檣欌漿牆狀獐璋章粧腸臟臧莊葬蔣薔藏裝贓醬長"
    	],
    	[
    		"eea1",
    		"障再哉在宰才材栽梓渽滓災縡裁財載齋齎爭箏諍錚佇低儲咀姐底抵杵楮樗沮渚狙猪疽箸紵苧菹著藷詛貯躇這邸雎齟勣吊嫡寂摘敵滴狄炙的積笛籍績翟荻謫賊赤跡蹟迪迹適鏑佃佺傳全典前剪塡塼奠專展廛悛戰栓殿氈澱"
    	],
    	[
    		"efa1",
    		"煎琠田甸畑癲筌箋箭篆纏詮輾轉鈿銓錢鐫電顚顫餞切截折浙癤竊節絶占岾店漸点粘霑鮎點接摺蝶丁井亭停偵呈姃定幀庭廷征情挺政整旌晶晸柾楨檉正汀淀淨渟湞瀞炡玎珽町睛碇禎程穽精綎艇訂諪貞鄭酊釘鉦鋌錠霆靖"
    	],
    	[
    		"f0a1",
    		"靜頂鼎制劑啼堤帝弟悌提梯濟祭第臍薺製諸蹄醍除際霽題齊俎兆凋助嘲弔彫措操早晁曺曹朝條棗槽漕潮照燥爪璪眺祖祚租稠窕粗糟組繰肇藻蚤詔調趙躁造遭釣阻雕鳥族簇足鏃存尊卒拙猝倧宗從悰慫棕淙琮種終綜縱腫"
    	],
    	[
    		"f1a1",
    		"踪踵鍾鐘佐坐左座挫罪主住侏做姝胄呪周嗾奏宙州廚晝朱柱株注洲湊澍炷珠疇籌紂紬綢舟蛛註誅走躊輳週酎酒鑄駐竹粥俊儁准埈寯峻晙樽浚準濬焌畯竣蠢逡遵雋駿茁中仲衆重卽櫛楫汁葺增憎曾拯烝甑症繒蒸證贈之只"
    	],
    	[
    		"f2a1",
    		"咫地址志持指摯支旨智枝枳止池沚漬知砥祉祗紙肢脂至芝芷蜘誌識贄趾遲直稙稷織職唇嗔塵振搢晉晋桭榛殄津溱珍瑨璡畛疹盡眞瞋秦縉縝臻蔯袗診賑軫辰進鎭陣陳震侄叱姪嫉帙桎瓆疾秩窒膣蛭質跌迭斟朕什執潗緝輯"
    	],
    	[
    		"f3a1",
    		"鏶集徵懲澄且侘借叉嗟嵯差次此磋箚茶蹉車遮捉搾着窄錯鑿齪撰澯燦璨瓚竄簒纂粲纘讚贊鑽餐饌刹察擦札紮僭參塹慘慙懺斬站讒讖倉倡創唱娼廠彰愴敞昌昶暢槍滄漲猖瘡窓脹艙菖蒼債埰寀寨彩採砦綵菜蔡采釵冊柵策"
    	],
    	[
    		"f4a1",
    		"責凄妻悽處倜刺剔尺慽戚拓擲斥滌瘠脊蹠陟隻仟千喘天川擅泉淺玔穿舛薦賤踐遷釧闡阡韆凸哲喆徹撤澈綴輟轍鐵僉尖沾添甛瞻簽籤詹諂堞妾帖捷牒疊睫諜貼輒廳晴淸聽菁請靑鯖切剃替涕滯締諦逮遞體初剿哨憔抄招梢"
    	],
    	[
    		"f5a1",
    		"椒楚樵炒焦硝礁礎秒稍肖艸苕草蕉貂超酢醋醮促囑燭矗蜀觸寸忖村邨叢塚寵悤憁摠總聰蔥銃撮催崔最墜抽推椎楸樞湫皺秋芻萩諏趨追鄒酋醜錐錘鎚雛騶鰍丑畜祝竺筑築縮蓄蹙蹴軸逐春椿瑃出朮黜充忠沖蟲衝衷悴膵萃"
    	],
    	[
    		"f6a1",
    		"贅取吹嘴娶就炊翠聚脆臭趣醉驟鷲側仄厠惻測層侈値嗤峙幟恥梔治淄熾痔痴癡稚穉緇緻置致蚩輜雉馳齒則勅飭親七柒漆侵寢枕沈浸琛砧針鍼蟄秤稱快他咤唾墮妥惰打拖朶楕舵陀馱駝倬卓啄坼度托拓擢晫柝濁濯琢琸託"
    	],
    	[
    		"f7a1",
    		"鐸呑嘆坦彈憚歎灘炭綻誕奪脫探眈耽貪塔搭榻宕帑湯糖蕩兌台太怠態殆汰泰笞胎苔跆邰颱宅擇澤撑攄兎吐土討慟桶洞痛筒統通堆槌腿褪退頹偸套妬投透鬪慝特闖坡婆巴把播擺杷波派爬琶破罷芭跛頗判坂板版瓣販辦鈑"
    	],
    	[
    		"f8a1",
    		"阪八叭捌佩唄悖敗沛浿牌狽稗覇貝彭澎烹膨愎便偏扁片篇編翩遍鞭騙貶坪平枰萍評吠嬖幣廢弊斃肺蔽閉陛佈包匍匏咆哺圃布怖抛抱捕暴泡浦疱砲胞脯苞葡蒲袍褒逋鋪飽鮑幅暴曝瀑爆輻俵剽彪慓杓標漂瓢票表豹飇飄驃"
    	],
    	[
    		"f9a1",
    		"品稟楓諷豊風馮彼披疲皮被避陂匹弼必泌珌畢疋筆苾馝乏逼下何厦夏廈昰河瑕荷蝦賀遐霞鰕壑學虐謔鶴寒恨悍旱汗漢澣瀚罕翰閑閒限韓割轄函含咸啣喊檻涵緘艦銜陷鹹合哈盒蛤閤闔陜亢伉姮嫦巷恒抗杭桁沆港缸肛航"
    	],
    	[
    		"faa1",
    		"行降項亥偕咳垓奚孩害懈楷海瀣蟹解該諧邂駭骸劾核倖幸杏荇行享向嚮珦鄕響餉饗香噓墟虛許憲櫶獻軒歇險驗奕爀赫革俔峴弦懸晛泫炫玄玹現眩睍絃絢縣舷衒見賢鉉顯孑穴血頁嫌俠協夾峽挾浹狹脅脇莢鋏頰亨兄刑型"
    	],
    	[
    		"fba1",
    		"形泂滎瀅灐炯熒珩瑩荊螢衡逈邢鎣馨兮彗惠慧暳蕙蹊醯鞋乎互呼壕壺好岵弧戶扈昊晧毫浩淏湖滸澔濠濩灝狐琥瑚瓠皓祜糊縞胡芦葫蒿虎號蝴護豪鎬頀顥惑或酷婚昏混渾琿魂忽惚笏哄弘汞泓洪烘紅虹訌鴻化和嬅樺火畵"
    	],
    	[
    		"fca1",
    		"禍禾花華話譁貨靴廓擴攫確碻穫丸喚奐宦幻患換歡晥桓渙煥環紈還驩鰥活滑猾豁闊凰幌徨恍惶愰慌晃晄榥況湟滉潢煌璜皇篁簧荒蝗遑隍黃匯回廻徊恢悔懷晦會檜淮澮灰獪繪膾茴蛔誨賄劃獲宖橫鐄哮嚆孝效斅曉梟涍淆"
    	],
    	[
    		"fda1",
    		"爻肴酵驍侯候厚后吼喉嗅帿後朽煦珝逅勛勳塤壎焄熏燻薰訓暈薨喧暄煊萱卉喙毁彙徽揮暉煇諱輝麾休携烋畦虧恤譎鷸兇凶匈洶胸黑昕欣炘痕吃屹紇訖欠欽歆吸恰洽翕興僖凞喜噫囍姬嬉希憙憘戱晞曦熙熹熺犧禧稀羲詰"
    	]
    ];

    var require$$6$1 = [
    	[
    		"0",
    		"\u0000",
    		127
    	],
    	[
    		"a140",
    		"　，、。．‧；：？！︰…‥﹐﹑﹒·﹔﹕﹖﹗｜–︱—︳╴︴﹏（）︵︶｛｝︷︸〔〕︹︺【】︻︼《》︽︾〈〉︿﹀「」﹁﹂『』﹃﹄﹙﹚"
    	],
    	[
    		"a1a1",
    		"﹛﹜﹝﹞‘’“”〝〞‵′＃＆＊※§〃○●△▲◎☆★◇◆□■▽▼㊣℅¯￣＿ˍ﹉﹊﹍﹎﹋﹌﹟﹠﹡＋－×÷±√＜＞＝≦≧≠∞≒≡﹢",
    		4,
    		"～∩∪⊥∠∟⊿㏒㏑∫∮∵∴♀♂⊕⊙↑↓←→↖↗↙↘∥∣／"
    	],
    	[
    		"a240",
    		"＼∕﹨＄￥〒￠￡％＠℃℉﹩﹪﹫㏕㎜㎝㎞㏎㎡㎎㎏㏄°兙兛兞兝兡兣嗧瓩糎▁",
    		7,
    		"▏▎▍▌▋▊▉┼┴┬┤├▔─│▕┌┐└┘╭"
    	],
    	[
    		"a2a1",
    		"╮╰╯═╞╪╡◢◣◥◤╱╲╳０",
    		9,
    		"Ⅰ",
    		9,
    		"〡",
    		8,
    		"十卄卅Ａ",
    		25,
    		"ａ",
    		21
    	],
    	[
    		"a340",
    		"ｗｘｙｚΑ",
    		16,
    		"Σ",
    		6,
    		"α",
    		16,
    		"σ",
    		6,
    		"ㄅ",
    		10
    	],
    	[
    		"a3a1",
    		"ㄐ",
    		25,
    		"˙ˉˊˇˋ"
    	],
    	[
    		"a3e1",
    		"€"
    	],
    	[
    		"a440",
    		"一乙丁七乃九了二人儿入八几刀刁力匕十卜又三下丈上丫丸凡久么也乞于亡兀刃勺千叉口土士夕大女子孑孓寸小尢尸山川工己已巳巾干廾弋弓才"
    	],
    	[
    		"a4a1",
    		"丑丐不中丰丹之尹予云井互五亢仁什仃仆仇仍今介仄元允內六兮公冗凶分切刈勻勾勿化匹午升卅卞厄友及反壬天夫太夭孔少尤尺屯巴幻廿弔引心戈戶手扎支文斗斤方日曰月木欠止歹毋比毛氏水火爪父爻片牙牛犬王丙"
    	],
    	[
    		"a540",
    		"世丕且丘主乍乏乎以付仔仕他仗代令仙仞充兄冉冊冬凹出凸刊加功包匆北匝仟半卉卡占卯卮去可古右召叮叩叨叼司叵叫另只史叱台句叭叻四囚外"
    	],
    	[
    		"a5a1",
    		"央失奴奶孕它尼巨巧左市布平幼弁弘弗必戊打扔扒扑斥旦朮本未末札正母民氐永汁汀氾犯玄玉瓜瓦甘生用甩田由甲申疋白皮皿目矛矢石示禾穴立丞丟乒乓乩亙交亦亥仿伉伙伊伕伍伐休伏仲件任仰仳份企伋光兇兆先全"
    	],
    	[
    		"a640",
    		"共再冰列刑划刎刖劣匈匡匠印危吉吏同吊吐吁吋各向名合吃后吆吒因回囝圳地在圭圬圯圩夙多夷夸妄奸妃好她如妁字存宇守宅安寺尖屹州帆并年"
    	],
    	[
    		"a6a1",
    		"式弛忙忖戎戌戍成扣扛托收早旨旬旭曲曳有朽朴朱朵次此死氖汝汗汙江池汐汕污汛汍汎灰牟牝百竹米糸缶羊羽老考而耒耳聿肉肋肌臣自至臼舌舛舟艮色艾虫血行衣西阡串亨位住佇佗佞伴佛何估佐佑伽伺伸佃佔似但佣"
    	],
    	[
    		"a740",
    		"作你伯低伶余佝佈佚兌克免兵冶冷別判利刪刨劫助努劬匣即卵吝吭吞吾否呎吧呆呃吳呈呂君吩告吹吻吸吮吵吶吠吼呀吱含吟听囪困囤囫坊坑址坍"
    	],
    	[
    		"a7a1",
    		"均坎圾坐坏圻壯夾妝妒妨妞妣妙妖妍妤妓妊妥孝孜孚孛完宋宏尬局屁尿尾岐岑岔岌巫希序庇床廷弄弟彤形彷役忘忌志忍忱快忸忪戒我抄抗抖技扶抉扭把扼找批扳抒扯折扮投抓抑抆改攻攸旱更束李杏材村杜杖杞杉杆杠"
    	],
    	[
    		"a840",
    		"杓杗步每求汞沙沁沈沉沅沛汪決沐汰沌汨沖沒汽沃汲汾汴沆汶沍沔沘沂灶灼災灸牢牡牠狄狂玖甬甫男甸皂盯矣私秀禿究系罕肖肓肝肘肛肚育良芒"
    	],
    	[
    		"a8a1",
    		"芋芍見角言谷豆豕貝赤走足身車辛辰迂迆迅迄巡邑邢邪邦那酉釆里防阮阱阪阬並乖乳事些亞享京佯依侍佳使佬供例來侃佰併侈佩佻侖佾侏侑佺兔兒兕兩具其典冽函刻券刷刺到刮制剁劾劻卒協卓卑卦卷卸卹取叔受味呵"
    	],
    	[
    		"a940",
    		"咖呸咕咀呻呷咄咒咆呼咐呱呶和咚呢周咋命咎固垃坷坪坩坡坦坤坼夜奉奇奈奄奔妾妻委妹妮姑姆姐姍始姓姊妯妳姒姅孟孤季宗定官宜宙宛尚屈居"
    	],
    	[
    		"a9a1",
    		"屆岷岡岸岩岫岱岳帘帚帖帕帛帑幸庚店府底庖延弦弧弩往征彿彼忝忠忽念忿怏怔怯怵怖怪怕怡性怩怫怛或戕房戾所承拉拌拄抿拂抹拒招披拓拔拋拈抨抽押拐拙拇拍抵拚抱拘拖拗拆抬拎放斧於旺昔易昌昆昂明昀昏昕昊"
    	],
    	[
    		"aa40",
    		"昇服朋杭枋枕東果杳杷枇枝林杯杰板枉松析杵枚枓杼杪杲欣武歧歿氓氛泣注泳沱泌泥河沽沾沼波沫法泓沸泄油況沮泗泅泱沿治泡泛泊沬泯泜泖泠"
    	],
    	[
    		"aaa1",
    		"炕炎炒炊炙爬爭爸版牧物狀狎狙狗狐玩玨玟玫玥甽疝疙疚的盂盲直知矽社祀祁秉秈空穹竺糾罔羌羋者肺肥肢肱股肫肩肴肪肯臥臾舍芳芝芙芭芽芟芹花芬芥芯芸芣芰芾芷虎虱初表軋迎返近邵邸邱邶采金長門阜陀阿阻附"
    	],
    	[
    		"ab40",
    		"陂隹雨青非亟亭亮信侵侯便俠俑俏保促侶俘俟俊俗侮俐俄係俚俎俞侷兗冒冑冠剎剃削前剌剋則勇勉勃勁匍南卻厚叛咬哀咨哎哉咸咦咳哇哂咽咪品"
    	],
    	[
    		"aba1",
    		"哄哈咯咫咱咻咩咧咿囿垂型垠垣垢城垮垓奕契奏奎奐姜姘姿姣姨娃姥姪姚姦威姻孩宣宦室客宥封屎屏屍屋峙峒巷帝帥帟幽庠度建弈弭彥很待徊律徇後徉怒思怠急怎怨恍恰恨恢恆恃恬恫恪恤扁拜挖按拼拭持拮拽指拱拷"
    	],
    	[
    		"ac40",
    		"拯括拾拴挑挂政故斫施既春昭映昧是星昨昱昤曷柿染柱柔某柬架枯柵柩柯柄柑枴柚查枸柏柞柳枰柙柢柝柒歪殃殆段毒毗氟泉洋洲洪流津洌洱洞洗"
    	],
    	[
    		"aca1",
    		"活洽派洶洛泵洹洧洸洩洮洵洎洫炫為炳炬炯炭炸炮炤爰牲牯牴狩狠狡玷珊玻玲珍珀玳甚甭畏界畎畋疫疤疥疢疣癸皆皇皈盈盆盃盅省盹相眉看盾盼眇矜砂研砌砍祆祉祈祇禹禺科秒秋穿突竿竽籽紂紅紀紉紇約紆缸美羿耄"
    	],
    	[
    		"ad40",
    		"耐耍耑耶胖胥胚胃胄背胡胛胎胞胤胝致舢苧范茅苣苛苦茄若茂茉苒苗英茁苜苔苑苞苓苟苯茆虐虹虻虺衍衫要觔計訂訃貞負赴赳趴軍軌述迦迢迪迥"
    	],
    	[
    		"ada1",
    		"迭迫迤迨郊郎郁郃酋酊重閂限陋陌降面革韋韭音頁風飛食首香乘亳倌倍倣俯倦倥俸倩倖倆值借倚倒們俺倀倔倨俱倡個候倘俳修倭倪俾倫倉兼冤冥冢凍凌准凋剖剜剔剛剝匪卿原厝叟哨唐唁唷哼哥哲唆哺唔哩哭員唉哮哪"
    	],
    	[
    		"ae40",
    		"哦唧唇哽唏圃圄埂埔埋埃堉夏套奘奚娑娘娜娟娛娓姬娠娣娩娥娌娉孫屘宰害家宴宮宵容宸射屑展屐峭峽峻峪峨峰島崁峴差席師庫庭座弱徒徑徐恙"
    	],
    	[
    		"aea1",
    		"恣恥恐恕恭恩息悄悟悚悍悔悌悅悖扇拳挈拿捎挾振捕捂捆捏捉挺捐挽挪挫挨捍捌效敉料旁旅時晉晏晃晒晌晅晁書朔朕朗校核案框桓根桂桔栩梳栗桌桑栽柴桐桀格桃株桅栓栘桁殊殉殷氣氧氨氦氤泰浪涕消涇浦浸海浙涓"
    	],
    	[
    		"af40",
    		"浬涉浮浚浴浩涌涊浹涅浥涔烊烘烤烙烈烏爹特狼狹狽狸狷玆班琉珮珠珪珞畔畝畜畚留疾病症疲疳疽疼疹痂疸皋皰益盍盎眩真眠眨矩砰砧砸砝破砷"
    	],
    	[
    		"afa1",
    		"砥砭砠砟砲祕祐祠祟祖神祝祗祚秤秣秧租秦秩秘窄窈站笆笑粉紡紗紋紊素索純紐紕級紜納紙紛缺罟羔翅翁耆耘耕耙耗耽耿胱脂胰脅胭胴脆胸胳脈能脊胼胯臭臬舀舐航舫舨般芻茫荒荔荊茸荐草茵茴荏茲茹茶茗荀茱茨荃"
    	],
    	[
    		"b040",
    		"虔蚊蚪蚓蚤蚩蚌蚣蚜衰衷袁袂衽衹記訐討訌訕訊託訓訖訏訑豈豺豹財貢起躬軒軔軏辱送逆迷退迺迴逃追逅迸邕郡郝郢酒配酌釘針釗釜釙閃院陣陡"
    	],
    	[
    		"b0a1",
    		"陛陝除陘陞隻飢馬骨高鬥鬲鬼乾偺偽停假偃偌做偉健偶偎偕偵側偷偏倏偯偭兜冕凰剪副勒務勘動匐匏匙匿區匾參曼商啪啦啄啞啡啃啊唱啖問啕唯啤唸售啜唬啣唳啁啗圈國圉域堅堊堆埠埤基堂堵執培夠奢娶婁婉婦婪婀"
    	],
    	[
    		"b140",
    		"娼婢婚婆婊孰寇寅寄寂宿密尉專將屠屜屝崇崆崎崛崖崢崑崩崔崙崤崧崗巢常帶帳帷康庸庶庵庾張強彗彬彩彫得徙從徘御徠徜恿患悉悠您惋悴惦悽"
    	],
    	[
    		"b1a1",
    		"情悻悵惜悼惘惕惆惟悸惚惇戚戛扈掠控捲掖探接捷捧掘措捱掩掉掃掛捫推掄授掙採掬排掏掀捻捩捨捺敝敖救教敗啟敏敘敕敔斜斛斬族旋旌旎晝晚晤晨晦晞曹勗望梁梯梢梓梵桿桶梱梧梗械梃棄梭梆梅梔條梨梟梡梂欲殺"
    	],
    	[
    		"b240",
    		"毫毬氫涎涼淳淙液淡淌淤添淺清淇淋涯淑涮淞淹涸混淵淅淒渚涵淚淫淘淪深淮淨淆淄涪淬涿淦烹焉焊烽烯爽牽犁猜猛猖猓猙率琅琊球理現琍瓠瓶"
    	],
    	[
    		"b2a1",
    		"瓷甜產略畦畢異疏痔痕疵痊痍皎盔盒盛眷眾眼眶眸眺硫硃硎祥票祭移窒窕笠笨笛第符笙笞笮粒粗粕絆絃統紮紹紼絀細紳組累終紲紱缽羞羚翌翎習耜聊聆脯脖脣脫脩脰脤舂舵舷舶船莎莞莘荸莢莖莽莫莒莊莓莉莠荷荻荼"
    	],
    	[
    		"b340",
    		"莆莧處彪蛇蛀蚶蛄蚵蛆蛋蚱蚯蛉術袞袈被袒袖袍袋覓規訪訝訣訥許設訟訛訢豉豚販責貫貨貪貧赧赦趾趺軛軟這逍通逗連速逝逐逕逞造透逢逖逛途"
    	],
    	[
    		"b3a1",
    		"部郭都酗野釵釦釣釧釭釩閉陪陵陳陸陰陴陶陷陬雀雪雩章竟頂頃魚鳥鹵鹿麥麻傢傍傅備傑傀傖傘傚最凱割剴創剩勞勝勛博厥啻喀喧啼喊喝喘喂喜喪喔喇喋喃喳單喟唾喲喚喻喬喱啾喉喫喙圍堯堪場堤堰報堡堝堠壹壺奠"
    	],
    	[
    		"b440",
    		"婷媚婿媒媛媧孳孱寒富寓寐尊尋就嵌嵐崴嵇巽幅帽幀幃幾廊廁廂廄弼彭復循徨惑惡悲悶惠愜愣惺愕惰惻惴慨惱愎惶愉愀愒戟扉掣掌描揀揩揉揆揍"
    	],
    	[
    		"b4a1",
    		"插揣提握揖揭揮捶援揪換摒揚揹敞敦敢散斑斐斯普晰晴晶景暑智晾晷曾替期朝棺棕棠棘棗椅棟棵森棧棹棒棲棣棋棍植椒椎棉棚楮棻款欺欽殘殖殼毯氮氯氬港游湔渡渲湧湊渠渥渣減湛湘渤湖湮渭渦湯渴湍渺測湃渝渾滋"
    	],
    	[
    		"b540",
    		"溉渙湎湣湄湲湩湟焙焚焦焰無然煮焜牌犄犀猶猥猴猩琺琪琳琢琥琵琶琴琯琛琦琨甥甦畫番痢痛痣痙痘痞痠登發皖皓皴盜睏短硝硬硯稍稈程稅稀窘"
    	],
    	[
    		"b5a1",
    		"窗窖童竣等策筆筐筒答筍筋筏筑粟粥絞結絨絕紫絮絲絡給絢絰絳善翔翕耋聒肅腕腔腋腑腎脹腆脾腌腓腴舒舜菩萃菸萍菠菅萋菁華菱菴著萊菰萌菌菽菲菊萸萎萄菜萇菔菟虛蛟蛙蛭蛔蛛蛤蛐蛞街裁裂袱覃視註詠評詞証詁"
    	],
    	[
    		"b640",
    		"詔詛詐詆訴診訶詖象貂貯貼貳貽賁費賀貴買貶貿貸越超趁跎距跋跚跑跌跛跆軻軸軼辜逮逵週逸進逶鄂郵鄉郾酣酥量鈔鈕鈣鈉鈞鈍鈐鈇鈑閔閏開閑"
    	],
    	[
    		"b6a1",
    		"間閒閎隊階隋陽隅隆隍陲隄雁雅雄集雇雯雲韌項順須飧飪飯飩飲飭馮馭黃黍黑亂傭債傲傳僅傾催傷傻傯僇剿剷剽募勦勤勢勣匯嗟嗨嗓嗦嗎嗜嗇嗑嗣嗤嗯嗚嗡嗅嗆嗥嗉園圓塞塑塘塗塚塔填塌塭塊塢塒塋奧嫁嫉嫌媾媽媼"
    	],
    	[
    		"b740",
    		"媳嫂媲嵩嵯幌幹廉廈弒彙徬微愚意慈感想愛惹愁愈慎慌慄慍愾愴愧愍愆愷戡戢搓搾搞搪搭搽搬搏搜搔損搶搖搗搆敬斟新暗暉暇暈暖暄暘暍會榔業"
    	],
    	[
    		"b7a1",
    		"楚楷楠楔極椰概楊楨楫楞楓楹榆楝楣楛歇歲毀殿毓毽溢溯滓溶滂源溝滇滅溥溘溼溺溫滑準溜滄滔溪溧溴煎煙煩煤煉照煜煬煦煌煥煞煆煨煖爺牒猷獅猿猾瑯瑚瑕瑟瑞瑁琿瑙瑛瑜當畸瘀痰瘁痲痱痺痿痴痳盞盟睛睫睦睞督"
    	],
    	[
    		"b840",
    		"睹睪睬睜睥睨睢矮碎碰碗碘碌碉硼碑碓硿祺祿禁萬禽稜稚稠稔稟稞窟窠筷節筠筮筧粱粳粵經絹綑綁綏絛置罩罪署義羨群聖聘肆肄腱腰腸腥腮腳腫"
    	],
    	[
    		"b8a1",
    		"腹腺腦舅艇蒂葷落萱葵葦葫葉葬葛萼萵葡董葩葭葆虞虜號蛹蜓蜈蜇蜀蛾蛻蜂蜃蜆蜊衙裟裔裙補裘裝裡裊裕裒覜解詫該詳試詩詰誇詼詣誠話誅詭詢詮詬詹詻訾詨豢貊貉賊資賈賄貲賃賂賅跡跟跨路跳跺跪跤跦躲較載軾輊"
    	],
    	[
    		"b940",
    		"辟農運遊道遂達逼違遐遇遏過遍遑逾遁鄒鄗酬酪酩釉鈷鉗鈸鈽鉀鈾鉛鉋鉤鉑鈴鉉鉍鉅鈹鈿鉚閘隘隔隕雍雋雉雊雷電雹零靖靴靶預頑頓頊頒頌飼飴"
    	],
    	[
    		"b9a1",
    		"飽飾馳馱馴髡鳩麂鼎鼓鼠僧僮僥僖僭僚僕像僑僱僎僩兢凳劃劂匱厭嗾嘀嘛嘗嗽嘔嘆嘉嘍嘎嗷嘖嘟嘈嘐嗶團圖塵塾境墓墊塹墅塽壽夥夢夤奪奩嫡嫦嫩嫗嫖嫘嫣孵寞寧寡寥實寨寢寤察對屢嶄嶇幛幣幕幗幔廓廖弊彆彰徹慇"
    	],
    	[
    		"ba40",
    		"愿態慷慢慣慟慚慘慵截撇摘摔撤摸摟摺摑摧搴摭摻敲斡旗旖暢暨暝榜榨榕槁榮槓構榛榷榻榫榴槐槍榭槌榦槃榣歉歌氳漳演滾漓滴漩漾漠漬漏漂漢"
    	],
    	[
    		"baa1",
    		"滿滯漆漱漸漲漣漕漫漯澈漪滬漁滲滌滷熔熙煽熊熄熒爾犒犖獄獐瑤瑣瑪瑰瑭甄疑瘧瘍瘋瘉瘓盡監瞄睽睿睡磁碟碧碳碩碣禎福禍種稱窪窩竭端管箕箋筵算箝箔箏箸箇箄粹粽精綻綰綜綽綾綠緊綴網綱綺綢綿綵綸維緒緇綬"
    	],
    	[
    		"bb40",
    		"罰翠翡翟聞聚肇腐膀膏膈膊腿膂臧臺與舔舞艋蓉蒿蓆蓄蒙蒞蒲蒜蓋蒸蓀蓓蒐蒼蓑蓊蜿蜜蜻蜢蜥蜴蜘蝕蜷蜩裳褂裴裹裸製裨褚裯誦誌語誣認誡誓誤"
    	],
    	[
    		"bba1",
    		"說誥誨誘誑誚誧豪貍貌賓賑賒赫趙趕跼輔輒輕輓辣遠遘遜遣遙遞遢遝遛鄙鄘鄞酵酸酷酴鉸銀銅銘銖鉻銓銜銨鉼銑閡閨閩閣閥閤隙障際雌雒需靼鞅韶頗領颯颱餃餅餌餉駁骯骰髦魁魂鳴鳶鳳麼鼻齊億儀僻僵價儂儈儉儅凜"
    	],
    	[
    		"bc40",
    		"劇劈劉劍劊勰厲嘮嘻嘹嘲嘿嘴嘩噓噎噗噴嘶嘯嘰墀墟增墳墜墮墩墦奭嬉嫻嬋嫵嬌嬈寮寬審寫層履嶝嶔幢幟幡廢廚廟廝廣廠彈影德徵慶慧慮慝慕憂"
    	],
    	[
    		"bca1",
    		"慼慰慫慾憧憐憫憎憬憚憤憔憮戮摩摯摹撞撲撈撐撰撥撓撕撩撒撮播撫撚撬撙撢撳敵敷數暮暫暴暱樣樟槨樁樞標槽模樓樊槳樂樅槭樑歐歎殤毅毆漿潼澄潑潦潔澆潭潛潸潮澎潺潰潤澗潘滕潯潠潟熟熬熱熨牖犛獎獗瑩璋璃"
    	],
    	[
    		"bd40",
    		"瑾璀畿瘠瘩瘟瘤瘦瘡瘢皚皺盤瞎瞇瞌瞑瞋磋磅確磊碾磕碼磐稿稼穀稽稷稻窯窮箭箱範箴篆篇篁箠篌糊締練緯緻緘緬緝編緣線緞緩綞緙緲緹罵罷羯"
    	],
    	[
    		"bda1",
    		"翩耦膛膜膝膠膚膘蔗蔽蔚蓮蔬蔭蔓蔑蔣蔡蔔蓬蔥蓿蔆螂蝴蝶蝠蝦蝸蝨蝙蝗蝌蝓衛衝褐複褒褓褕褊誼諒談諄誕請諸課諉諂調誰論諍誶誹諛豌豎豬賠賞賦賤賬賭賢賣賜質賡赭趟趣踫踐踝踢踏踩踟踡踞躺輝輛輟輩輦輪輜輞"
    	],
    	[
    		"be40",
    		"輥適遮遨遭遷鄰鄭鄧鄱醇醉醋醃鋅銻銷鋪銬鋤鋁銳銼鋒鋇鋰銲閭閱霄霆震霉靠鞍鞋鞏頡頫頜颳養餓餒餘駝駐駟駛駑駕駒駙骷髮髯鬧魅魄魷魯鴆鴉"
    	],
    	[
    		"bea1",
    		"鴃麩麾黎墨齒儒儘儔儐儕冀冪凝劑劓勳噙噫噹噩噤噸噪器噥噱噯噬噢噶壁墾壇壅奮嬝嬴學寰導彊憲憑憩憊懍憶憾懊懈戰擅擁擋撻撼據擄擇擂操撿擒擔撾整曆曉暹曄曇暸樽樸樺橙橫橘樹橄橢橡橋橇樵機橈歙歷氅濂澱澡"
    	],
    	[
    		"bf40",
    		"濃澤濁澧澳激澹澶澦澠澴熾燉燐燒燈燕熹燎燙燜燃燄獨璜璣璘璟璞瓢甌甍瘴瘸瘺盧盥瞠瞞瞟瞥磨磚磬磧禦積穎穆穌穋窺篙簑築篤篛篡篩篦糕糖縊"
    	],
    	[
    		"bfa1",
    		"縑縈縛縣縞縝縉縐罹羲翰翱翮耨膳膩膨臻興艘艙蕊蕙蕈蕨蕩蕃蕉蕭蕪蕞螃螟螞螢融衡褪褲褥褫褡親覦諦諺諫諱謀諜諧諮諾謁謂諷諭諳諶諼豫豭貓賴蹄踱踴蹂踹踵輻輯輸輳辨辦遵遴選遲遼遺鄴醒錠錶鋸錳錯錢鋼錫錄錚"
    	],
    	[
    		"c040",
    		"錐錦錡錕錮錙閻隧隨險雕霎霑霖霍霓霏靛靜靦鞘頰頸頻頷頭頹頤餐館餞餛餡餚駭駢駱骸骼髻髭鬨鮑鴕鴣鴦鴨鴒鴛默黔龍龜優償儡儲勵嚎嚀嚐嚅嚇"
    	],
    	[
    		"c0a1",
    		"嚏壕壓壑壎嬰嬪嬤孺尷屨嶼嶺嶽嶸幫彌徽應懂懇懦懋戲戴擎擊擘擠擰擦擬擱擢擭斂斃曙曖檀檔檄檢檜櫛檣橾檗檐檠歜殮毚氈濘濱濟濠濛濤濫濯澀濬濡濩濕濮濰燧營燮燦燥燭燬燴燠爵牆獰獲璩環璦璨癆療癌盪瞳瞪瞰瞬"
    	],
    	[
    		"c140",
    		"瞧瞭矯磷磺磴磯礁禧禪穗窿簇簍篾篷簌篠糠糜糞糢糟糙糝縮績繆縷縲繃縫總縱繅繁縴縹繈縵縿縯罄翳翼聱聲聰聯聳臆臃膺臂臀膿膽臉膾臨舉艱薪"
    	],
    	[
    		"c1a1",
    		"薄蕾薜薑薔薯薛薇薨薊虧蟀蟑螳蟒蟆螫螻螺蟈蟋褻褶襄褸褽覬謎謗謙講謊謠謝謄謐豁谿豳賺賽購賸賻趨蹉蹋蹈蹊轄輾轂轅輿避遽還邁邂邀鄹醣醞醜鍍鎂錨鍵鍊鍥鍋錘鍾鍬鍛鍰鍚鍔闊闋闌闈闆隱隸雖霜霞鞠韓顆颶餵騁"
    	],
    	[
    		"c240",
    		"駿鮮鮫鮪鮭鴻鴿麋黏點黜黝黛鼾齋叢嚕嚮壙壘嬸彝懣戳擴擲擾攆擺擻擷斷曜朦檳檬櫃檻檸櫂檮檯歟歸殯瀉瀋濾瀆濺瀑瀏燻燼燾燸獷獵璧璿甕癖癘"
    	],
    	[
    		"c2a1",
    		"癒瞽瞿瞻瞼礎禮穡穢穠竄竅簫簧簪簞簣簡糧織繕繞繚繡繒繙罈翹翻職聶臍臏舊藏薩藍藐藉薰薺薹薦蟯蟬蟲蟠覆覲觴謨謹謬謫豐贅蹙蹣蹦蹤蹟蹕軀轉轍邇邃邈醫醬釐鎔鎊鎖鎢鎳鎮鎬鎰鎘鎚鎗闔闖闐闕離雜雙雛雞霤鞣鞦"
    	],
    	[
    		"c340",
    		"鞭韹額顏題顎顓颺餾餿餽餮馥騎髁鬃鬆魏魎魍鯊鯉鯽鯈鯀鵑鵝鵠黠鼕鼬儳嚥壞壟壢寵龐廬懲懷懶懵攀攏曠曝櫥櫝櫚櫓瀛瀟瀨瀚瀝瀕瀘爆爍牘犢獸"
    	],
    	[
    		"c3a1",
    		"獺璽瓊瓣疇疆癟癡矇礙禱穫穩簾簿簸簽簷籀繫繭繹繩繪羅繳羶羹羸臘藩藝藪藕藤藥藷蟻蠅蠍蟹蟾襠襟襖襞譁譜識證譚譎譏譆譙贈贊蹼蹲躇蹶蹬蹺蹴轔轎辭邊邋醱醮鏡鏑鏟鏃鏈鏜鏝鏖鏢鏍鏘鏤鏗鏨關隴難霪霧靡韜韻類"
    	],
    	[
    		"c440",
    		"願顛颼饅饉騖騙鬍鯨鯧鯖鯛鶉鵡鵲鵪鵬麒麗麓麴勸嚨嚷嚶嚴嚼壤孀孃孽寶巉懸懺攘攔攙曦朧櫬瀾瀰瀲爐獻瓏癢癥礦礪礬礫竇競籌籃籍糯糰辮繽繼"
    	],
    	[
    		"c4a1",
    		"纂罌耀臚艦藻藹蘑藺蘆蘋蘇蘊蠔蠕襤覺觸議譬警譯譟譫贏贍躉躁躅躂醴釋鐘鐃鏽闡霰飄饒饑馨騫騰騷騵鰓鰍鹹麵黨鼯齟齣齡儷儸囁囀囂夔屬巍懼懾攝攜斕曩櫻欄櫺殲灌爛犧瓖瓔癩矓籐纏續羼蘗蘭蘚蠣蠢蠡蠟襪襬覽譴"
    	],
    	[
    		"c540",
    		"護譽贓躊躍躋轟辯醺鐮鐳鐵鐺鐸鐲鐫闢霸霹露響顧顥饗驅驃驀騾髏魔魑鰭鰥鶯鶴鷂鶸麝黯鼙齜齦齧儼儻囈囊囉孿巔巒彎懿攤權歡灑灘玀瓤疊癮癬"
    	],
    	[
    		"c5a1",
    		"禳籠籟聾聽臟襲襯觼讀贖贗躑躓轡酈鑄鑑鑒霽霾韃韁顫饕驕驍髒鬚鱉鰱鰾鰻鷓鷗鼴齬齪龔囌巖戀攣攫攪曬欐瓚竊籤籣籥纓纖纔臢蘸蘿蠱變邐邏鑣鑠鑤靨顯饜驚驛驗髓體髑鱔鱗鱖鷥麟黴囑壩攬灞癱癲矗罐羈蠶蠹衢讓讒"
    	],
    	[
    		"c640",
    		"讖艷贛釀鑪靂靈靄韆顰驟鬢魘鱟鷹鷺鹼鹽鼇齷齲廳欖灣籬籮蠻觀躡釁鑲鑰顱饞髖鬣黌灤矚讚鑷韉驢驥纜讜躪釅鑽鑾鑼鱷鱸黷豔鑿鸚爨驪鬱鸛鸞籲"
    	],
    	[
    		"c940",
    		"乂乜凵匚厂万丌乇亍囗兀屮彳丏冇与丮亓仂仉仈冘勼卬厹圠夃夬尐巿旡殳毌气爿丱丼仨仜仩仡仝仚刌匜卌圢圣夗夯宁宄尒尻屴屳帄庀庂忉戉扐氕"
    	],
    	[
    		"c9a1",
    		"氶汃氿氻犮犰玊禸肊阞伎优伬仵伔仱伀价伈伝伂伅伢伓伄仴伒冱刓刉刐劦匢匟卍厊吇囡囟圮圪圴夼妀奼妅奻奾奷奿孖尕尥屼屺屻屾巟幵庄异弚彴忕忔忏扜扞扤扡扦扢扙扠扚扥旯旮朾朹朸朻机朿朼朳氘汆汒汜汏汊汔汋"
    	],
    	[
    		"ca40",
    		"汌灱牞犴犵玎甪癿穵网艸艼芀艽艿虍襾邙邗邘邛邔阢阤阠阣佖伻佢佉体佤伾佧佒佟佁佘伭伳伿佡冏冹刜刞刡劭劮匉卣卲厎厏吰吷吪呔呅吙吜吥吘"
    	],
    	[
    		"caa1",
    		"吽呏呁吨吤呇囮囧囥坁坅坌坉坋坒夆奀妦妘妠妗妎妢妐妏妧妡宎宒尨尪岍岏岈岋岉岒岊岆岓岕巠帊帎庋庉庌庈庍弅弝彸彶忒忑忐忭忨忮忳忡忤忣忺忯忷忻怀忴戺抃抌抎抏抔抇扱扻扺扰抁抈扷扽扲扴攷旰旴旳旲旵杅杇"
    	],
    	[
    		"cb40",
    		"杙杕杌杈杝杍杚杋毐氙氚汸汧汫沄沋沏汱汯汩沚汭沇沕沜汦汳汥汻沎灴灺牣犿犽狃狆狁犺狅玕玗玓玔玒町甹疔疕皁礽耴肕肙肐肒肜芐芏芅芎芑芓"
    	],
    	[
    		"cba1",
    		"芊芃芄豸迉辿邟邡邥邞邧邠阰阨阯阭丳侘佼侅佽侀侇佶佴侉侄佷佌侗佪侚佹侁佸侐侜侔侞侒侂侕佫佮冞冼冾刵刲刳剆刱劼匊匋匼厒厔咇呿咁咑咂咈呫呺呾呥呬呴呦咍呯呡呠咘呣呧呤囷囹坯坲坭坫坱坰坶垀坵坻坳坴坢"
    	],
    	[
    		"cc40",
    		"坨坽夌奅妵妺姏姎妲姌姁妶妼姃姖妱妽姀姈妴姇孢孥宓宕屄屇岮岤岠岵岯岨岬岟岣岭岢岪岧岝岥岶岰岦帗帔帙弨弢弣弤彔徂彾彽忞忥怭怦怙怲怋"
    	],
    	[
    		"cca1",
    		"怴怊怗怳怚怞怬怢怍怐怮怓怑怌怉怜戔戽抭抴拑抾抪抶拊抮抳抯抻抩抰抸攽斨斻昉旼昄昒昈旻昃昋昍昅旽昑昐曶朊枅杬枎枒杶杻枘枆构杴枍枌杺枟枑枙枃杽极杸杹枔欥殀歾毞氝沓泬泫泮泙沶泔沭泧沷泐泂沺泃泆泭泲"
    	],
    	[
    		"cd40",
    		"泒泝沴沊沝沀泞泀洰泍泇沰泹泏泩泑炔炘炅炓炆炄炑炖炂炚炃牪狖狋狘狉狜狒狔狚狌狑玤玡玭玦玢玠玬玝瓝瓨甿畀甾疌疘皯盳盱盰盵矸矼矹矻矺"
    	],
    	[
    		"cda1",
    		"矷祂礿秅穸穻竻籵糽耵肏肮肣肸肵肭舠芠苀芫芚芘芛芵芧芮芼芞芺芴芨芡芩苂芤苃芶芢虰虯虭虮豖迒迋迓迍迖迕迗邲邴邯邳邰阹阽阼阺陃俍俅俓侲俉俋俁俔俜俙侻侳俛俇俖侺俀侹俬剄剉勀勂匽卼厗厖厙厘咺咡咭咥哏"
    	],
    	[
    		"ce40",
    		"哃茍咷咮哖咶哅哆咠呰咼咢咾呲哞咰垵垞垟垤垌垗垝垛垔垘垏垙垥垚垕壴复奓姡姞姮娀姱姝姺姽姼姶姤姲姷姛姩姳姵姠姾姴姭宨屌峐峘峌峗峋峛"
    	],
    	[
    		"cea1",
    		"峞峚峉峇峊峖峓峔峏峈峆峎峟峸巹帡帢帣帠帤庰庤庢庛庣庥弇弮彖徆怷怹恔恲恞恅恓恇恉恛恌恀恂恟怤恄恘恦恮扂扃拏挍挋拵挎挃拫拹挏挌拸拶挀挓挔拺挕拻拰敁敃斪斿昶昡昲昵昜昦昢昳昫昺昝昴昹昮朏朐柁柲柈枺"
    	],
    	[
    		"cf40",
    		"柜枻柸柘柀枷柅柫柤柟枵柍枳柷柶柮柣柂枹柎柧柰枲柼柆柭柌枮柦柛柺柉柊柃柪柋欨殂殄殶毖毘毠氠氡洨洴洭洟洼洿洒洊泚洳洄洙洺洚洑洀洝浂"
    	],
    	[
    		"cfa1",
    		"洁洘洷洃洏浀洇洠洬洈洢洉洐炷炟炾炱炰炡炴炵炩牁牉牊牬牰牳牮狊狤狨狫狟狪狦狣玅珌珂珈珅玹玶玵玴珫玿珇玾珃珆玸珋瓬瓮甮畇畈疧疪癹盄眈眃眄眅眊盷盻盺矧矨砆砑砒砅砐砏砎砉砃砓祊祌祋祅祄秕种秏秖秎窀"
    	],
    	[
    		"d040",
    		"穾竑笀笁籺籸籹籿粀粁紃紈紁罘羑羍羾耇耎耏耔耷胘胇胠胑胈胂胐胅胣胙胜胊胕胉胏胗胦胍臿舡芔苙苾苹茇苨茀苕茺苫苖苴苬苡苲苵茌苻苶苰苪"
    	],
    	[
    		"d0a1",
    		"苤苠苺苳苭虷虴虼虳衁衎衧衪衩觓訄訇赲迣迡迮迠郱邽邿郕郅邾郇郋郈釔釓陔陏陑陓陊陎倞倅倇倓倢倰倛俵俴倳倷倬俶俷倗倜倠倧倵倯倱倎党冔冓凊凄凅凈凎剡剚剒剞剟剕剢勍匎厞唦哢唗唒哧哳哤唚哿唄唈哫唑唅哱"
    	],
    	[
    		"d140",
    		"唊哻哷哸哠唎唃唋圁圂埌堲埕埒垺埆垽垼垸垶垿埇埐垹埁夎奊娙娖娭娮娕娏娗娊娞娳孬宧宭宬尃屖屔峬峿峮峱峷崀峹帩帨庨庮庪庬弳弰彧恝恚恧"
    	],
    	[
    		"d1a1",
    		"恁悢悈悀悒悁悝悃悕悛悗悇悜悎戙扆拲挐捖挬捄捅挶捃揤挹捋捊挼挩捁挴捘捔捙挭捇挳捚捑挸捗捀捈敊敆旆旃旄旂晊晟晇晑朒朓栟栚桉栲栳栻桋桏栖栱栜栵栫栭栯桎桄栴栝栒栔栦栨栮桍栺栥栠欬欯欭欱欴歭肂殈毦毤"
    	],
    	[
    		"d240",
    		"毨毣毢毧氥浺浣浤浶洍浡涒浘浢浭浯涑涍淯浿涆浞浧浠涗浰浼浟涂涘洯浨涋浾涀涄洖涃浻浽浵涐烜烓烑烝烋缹烢烗烒烞烠烔烍烅烆烇烚烎烡牂牸"
    	],
    	[
    		"d2a1",
    		"牷牶猀狺狴狾狶狳狻猁珓珙珥珖玼珧珣珩珜珒珛珔珝珚珗珘珨瓞瓟瓴瓵甡畛畟疰痁疻痄痀疿疶疺皊盉眝眛眐眓眒眣眑眕眙眚眢眧砣砬砢砵砯砨砮砫砡砩砳砪砱祔祛祏祜祓祒祑秫秬秠秮秭秪秜秞秝窆窉窅窋窌窊窇竘笐"
    	],
    	[
    		"d340",
    		"笄笓笅笏笈笊笎笉笒粄粑粊粌粈粍粅紞紝紑紎紘紖紓紟紒紏紌罜罡罞罠罝罛羖羒翃翂翀耖耾耹胺胲胹胵脁胻脀舁舯舥茳茭荄茙荑茥荖茿荁茦茜茢"
    	],
    	[
    		"d3a1",
    		"荂荎茛茪茈茼荍茖茤茠茷茯茩荇荅荌荓茞茬荋茧荈虓虒蚢蚨蚖蚍蚑蚞蚇蚗蚆蚋蚚蚅蚥蚙蚡蚧蚕蚘蚎蚝蚐蚔衃衄衭衵衶衲袀衱衿衯袃衾衴衼訒豇豗豻貤貣赶赸趵趷趶軑軓迾迵适迿迻逄迼迶郖郠郙郚郣郟郥郘郛郗郜郤酐"
    	],
    	[
    		"d440",
    		"酎酏釕釢釚陜陟隼飣髟鬯乿偰偪偡偞偠偓偋偝偲偈偍偁偛偊偢倕偅偟偩偫偣偤偆偀偮偳偗偑凐剫剭剬剮勖勓匭厜啵啶唼啍啐唴唪啑啢唶唵唰啒啅"
    	],
    	[
    		"d4a1",
    		"唌唲啥啎唹啈唭唻啀啋圊圇埻堔埢埶埜埴堀埭埽堈埸堋埳埏堇埮埣埲埥埬埡堎埼堐埧堁堌埱埩埰堍堄奜婠婘婕婧婞娸娵婭婐婟婥婬婓婤婗婃婝婒婄婛婈媎娾婍娹婌婰婩婇婑婖婂婜孲孮寁寀屙崞崋崝崚崠崌崨崍崦崥崏"
    	],
    	[
    		"d540",
    		"崰崒崣崟崮帾帴庱庴庹庲庳弶弸徛徖徟悊悐悆悾悰悺惓惔惏惤惙惝惈悱惛悷惊悿惃惍惀挲捥掊掂捽掽掞掭掝掗掫掎捯掇掐据掯捵掜捭掮捼掤挻掟"
    	],
    	[
    		"d5a1",
    		"捸掅掁掑掍捰敓旍晥晡晛晙晜晢朘桹梇梐梜桭桮梮梫楖桯梣梬梩桵桴梲梏桷梒桼桫桲梪梀桱桾梛梖梋梠梉梤桸桻梑梌梊桽欶欳欷欸殑殏殍殎殌氪淀涫涴涳湴涬淩淢涷淶淔渀淈淠淟淖涾淥淜淝淛淴淊涽淭淰涺淕淂淏淉"
    	],
    	[
    		"d640",
    		"淐淲淓淽淗淍淣涻烺焍烷焗烴焌烰焄烳焐烼烿焆焓焀烸烶焋焂焎牾牻牼牿猝猗猇猑猘猊猈狿猏猞玈珶珸珵琄琁珽琇琀珺珼珿琌琋珴琈畤畣痎痒痏"
    	],
    	[
    		"d6a1",
    		"痋痌痑痐皏皉盓眹眯眭眱眲眴眳眽眥眻眵硈硒硉硍硊硌砦硅硐祤祧祩祪祣祫祡离秺秸秶秷窏窔窐笵筇笴笥笰笢笤笳笘笪笝笱笫笭笯笲笸笚笣粔粘粖粣紵紽紸紶紺絅紬紩絁絇紾紿絊紻紨罣羕羜羝羛翊翋翍翐翑翇翏翉耟"
    	],
    	[
    		"d740",
    		"耞耛聇聃聈脘脥脙脛脭脟脬脞脡脕脧脝脢舑舸舳舺舴舲艴莐莣莨莍荺荳莤荴莏莁莕莙荵莔莩荽莃莌莝莛莪莋荾莥莯莈莗莰荿莦莇莮荶莚虙虖蚿蚷"
    	],
    	[
    		"d7a1",
    		"蛂蛁蛅蚺蚰蛈蚹蚳蚸蛌蚴蚻蚼蛃蚽蚾衒袉袕袨袢袪袚袑袡袟袘袧袙袛袗袤袬袌袓袎覂觖觙觕訰訧訬訞谹谻豜豝豽貥赽赻赹趼跂趹趿跁軘軞軝軜軗軠軡逤逋逑逜逌逡郯郪郰郴郲郳郔郫郬郩酖酘酚酓酕釬釴釱釳釸釤釹釪"
    	],
    	[
    		"d840",
    		"釫釷釨釮镺閆閈陼陭陫陱陯隿靪頄飥馗傛傕傔傞傋傣傃傌傎傝偨傜傒傂傇兟凔匒匑厤厧喑喨喥喭啷噅喢喓喈喏喵喁喣喒喤啽喌喦啿喕喡喎圌堩堷"
    	],
    	[
    		"d8a1",
    		"堙堞堧堣堨埵塈堥堜堛堳堿堶堮堹堸堭堬堻奡媯媔媟婺媢媞婸媦婼媥媬媕媮娷媄媊媗媃媋媩婻婽媌媜媏媓媝寪寍寋寔寑寊寎尌尰崷嵃嵫嵁嵋崿崵嵑嵎嵕崳崺嵒崽崱嵙嵂崹嵉崸崼崲崶嵀嵅幄幁彘徦徥徫惉悹惌惢惎惄愔"
    	],
    	[
    		"d940",
    		"惲愊愖愅惵愓惸惼惾惁愃愘愝愐惿愄愋扊掔掱掰揎揥揨揯揃撝揳揊揠揶揕揲揵摡揟掾揝揜揄揘揓揂揇揌揋揈揰揗揙攲敧敪敤敜敨敥斌斝斞斮旐旒"
    	],
    	[
    		"d9a1",
    		"晼晬晻暀晱晹晪晲朁椌棓椄棜椪棬棪棱椏棖棷棫棤棶椓椐棳棡椇棌椈楰梴椑棯棆椔棸棐棽棼棨椋椊椗棎棈棝棞棦棴棑椆棔棩椕椥棇欹欻欿欼殔殗殙殕殽毰毲毳氰淼湆湇渟湉溈渼渽湅湢渫渿湁湝湳渜渳湋湀湑渻渃渮湞"
    	],
    	[
    		"da40",
    		"湨湜湡渱渨湠湱湫渹渢渰湓湥渧湸湤湷湕湹湒湦渵渶湚焠焞焯烻焮焱焣焥焢焲焟焨焺焛牋牚犈犉犆犅犋猒猋猰猢猱猳猧猲猭猦猣猵猌琮琬琰琫琖"
    	],
    	[
    		"daa1",
    		"琚琡琭琱琤琣琝琩琠琲瓻甯畯畬痧痚痡痦痝痟痤痗皕皒盚睆睇睄睍睅睊睎睋睌矞矬硠硤硥硜硭硱硪确硰硩硨硞硢祴祳祲祰稂稊稃稌稄窙竦竤筊笻筄筈筌筎筀筘筅粢粞粨粡絘絯絣絓絖絧絪絏絭絜絫絒絔絩絑絟絎缾缿罥"
    	],
    	[
    		"db40",
    		"罦羢羠羡翗聑聏聐胾胔腃腊腒腏腇脽腍脺臦臮臷臸臹舄舼舽舿艵茻菏菹萣菀菨萒菧菤菼菶萐菆菈菫菣莿萁菝菥菘菿菡菋菎菖菵菉萉萏菞萑萆菂菳"
    	],
    	[
    		"dba1",
    		"菕菺菇菑菪萓菃菬菮菄菻菗菢萛菛菾蛘蛢蛦蛓蛣蛚蛪蛝蛫蛜蛬蛩蛗蛨蛑衈衖衕袺裗袹袸裀袾袶袼袷袽袲褁裉覕覘覗觝觚觛詎詍訹詙詀詗詘詄詅詒詈詑詊詌詏豟貁貀貺貾貰貹貵趄趀趉跘跓跍跇跖跜跏跕跙跈跗跅軯軷軺"
    	],
    	[
    		"dc40",
    		"軹軦軮軥軵軧軨軶軫軱軬軴軩逭逴逯鄆鄬鄄郿郼鄈郹郻鄁鄀鄇鄅鄃酡酤酟酢酠鈁鈊鈥鈃鈚鈦鈏鈌鈀鈒釿釽鈆鈄鈧鈂鈜鈤鈙鈗鈅鈖镻閍閌閐隇陾隈"
    	],
    	[
    		"dca1",
    		"隉隃隀雂雈雃雱雰靬靰靮頇颩飫鳦黹亃亄亶傽傿僆傮僄僊傴僈僂傰僁傺傱僋僉傶傸凗剺剸剻剼嗃嗛嗌嗐嗋嗊嗝嗀嗔嗄嗩喿嗒喍嗏嗕嗢嗖嗈嗲嗍嗙嗂圔塓塨塤塏塍塉塯塕塎塝塙塥塛堽塣塱壼嫇嫄嫋媺媸媱媵媰媿嫈媻嫆"
    	],
    	[
    		"dd40",
    		"媷嫀嫊媴媶嫍媹媐寖寘寙尟尳嵱嵣嵊嵥嵲嵬嵞嵨嵧嵢巰幏幎幊幍幋廅廌廆廋廇彀徯徭惷慉慊愫慅愶愲愮慆愯慏愩慀戠酨戣戥戤揅揱揫搐搒搉搠搤"
    	],
    	[
    		"dda1",
    		"搳摃搟搕搘搹搷搢搣搌搦搰搨摁搵搯搊搚摀搥搧搋揧搛搮搡搎敯斒旓暆暌暕暐暋暊暙暔晸朠楦楟椸楎楢楱椿楅楪椹楂楗楙楺楈楉椵楬椳椽楥棰楸椴楩楀楯楄楶楘楁楴楌椻楋椷楜楏楑椲楒椯楻椼歆歅歃歂歈歁殛嗀毻毼"
    	],
    	[
    		"de40",
    		"毹毷毸溛滖滈溏滀溟溓溔溠溱溹滆滒溽滁溞滉溷溰滍溦滏溲溾滃滜滘溙溒溎溍溤溡溿溳滐滊溗溮溣煇煔煒煣煠煁煝煢煲煸煪煡煂煘煃煋煰煟煐煓"
    	],
    	[
    		"dea1",
    		"煄煍煚牏犍犌犑犐犎猼獂猻猺獀獊獉瑄瑊瑋瑒瑑瑗瑀瑏瑐瑎瑂瑆瑍瑔瓡瓿瓾瓽甝畹畷榃痯瘏瘃痷痾痼痹痸瘐痻痶痭痵痽皙皵盝睕睟睠睒睖睚睩睧睔睙睭矠碇碚碔碏碄碕碅碆碡碃硹碙碀碖硻祼禂祽祹稑稘稙稒稗稕稢稓"
    	],
    	[
    		"df40",
    		"稛稐窣窢窞竫筦筤筭筴筩筲筥筳筱筰筡筸筶筣粲粴粯綈綆綀綍絿綅絺綎絻綃絼綌綔綄絽綒罭罫罧罨罬羦羥羧翛翜耡腤腠腷腜腩腛腢腲朡腞腶腧腯"
    	],
    	[
    		"dfa1",
    		"腄腡舝艉艄艀艂艅蓱萿葖葶葹蒏蒍葥葑葀蒆葧萰葍葽葚葙葴葳葝蔇葞萷萺萴葺葃葸萲葅萩菙葋萯葂萭葟葰萹葎葌葒葯蓅蒎萻葇萶萳葨葾葄萫葠葔葮葐蜋蜄蛷蜌蛺蛖蛵蝍蛸蜎蜉蜁蛶蜍蜅裖裋裍裎裞裛裚裌裐覅覛觟觥觤"
    	],
    	[
    		"e040",
    		"觡觠觢觜触詶誆詿詡訿詷誂誄詵誃誁詴詺谼豋豊豥豤豦貆貄貅賌赨赩趑趌趎趏趍趓趔趐趒跰跠跬跱跮跐跩跣跢跧跲跫跴輆軿輁輀輅輇輈輂輋遒逿"
    	],
    	[
    		"e0a1",
    		"遄遉逽鄐鄍鄏鄑鄖鄔鄋鄎酮酯鉈鉒鈰鈺鉦鈳鉥鉞銃鈮鉊鉆鉭鉬鉏鉠鉧鉯鈶鉡鉰鈱鉔鉣鉐鉲鉎鉓鉌鉖鈲閟閜閞閛隒隓隑隗雎雺雽雸雵靳靷靸靲頏頍頎颬飶飹馯馲馰馵骭骫魛鳪鳭鳧麀黽僦僔僗僨僳僛僪僝僤僓僬僰僯僣僠"
    	],
    	[
    		"e140",
    		"凘劀劁勩勫匰厬嘧嘕嘌嘒嗼嘏嘜嘁嘓嘂嗺嘝嘄嗿嗹墉塼墐墘墆墁塿塴墋塺墇墑墎塶墂墈塻墔墏壾奫嫜嫮嫥嫕嫪嫚嫭嫫嫳嫢嫠嫛嫬嫞嫝嫙嫨嫟孷寠"
    	],
    	[
    		"e1a1",
    		"寣屣嶂嶀嵽嶆嵺嶁嵷嶊嶉嶈嵾嵼嶍嵹嵿幘幙幓廘廑廗廎廜廕廙廒廔彄彃彯徶愬愨慁慞慱慳慒慓慲慬憀慴慔慺慛慥愻慪慡慖戩戧戫搫摍摛摝摴摶摲摳摽摵摦撦摎撂摞摜摋摓摠摐摿搿摬摫摙摥摷敳斠暡暠暟朅朄朢榱榶槉"
    	],
    	[
    		"e240",
    		"榠槎榖榰榬榼榑榙榎榧榍榩榾榯榿槄榽榤槔榹槊榚槏榳榓榪榡榞槙榗榐槂榵榥槆歊歍歋殞殟殠毃毄毾滎滵滱漃漥滸漷滻漮漉潎漙漚漧漘漻漒滭漊"
    	],
    	[
    		"e2a1",
    		"漶潳滹滮漭潀漰漼漵滫漇漎潃漅滽滶漹漜滼漺漟漍漞漈漡熇熐熉熀熅熂熏煻熆熁熗牄牓犗犕犓獃獍獑獌瑢瑳瑱瑵瑲瑧瑮甀甂甃畽疐瘖瘈瘌瘕瘑瘊瘔皸瞁睼瞅瞂睮瞀睯睾瞃碲碪碴碭碨硾碫碞碥碠碬碢碤禘禊禋禖禕禔禓"
    	],
    	[
    		"e340",
    		"禗禈禒禐稫穊稰稯稨稦窨窫窬竮箈箜箊箑箐箖箍箌箛箎箅箘劄箙箤箂粻粿粼粺綧綷緂綣綪緁緀緅綝緎緄緆緋緌綯綹綖綼綟綦綮綩綡緉罳翢翣翥翞"
    	],
    	[
    		"e3a1",
    		"耤聝聜膉膆膃膇膍膌膋舕蒗蒤蒡蒟蒺蓎蓂蒬蒮蒫蒹蒴蓁蓍蒪蒚蒱蓐蒝蒧蒻蒢蒔蓇蓌蒛蒩蒯蒨蓖蒘蒶蓏蒠蓗蓔蓒蓛蒰蒑虡蜳蜣蜨蝫蝀蜮蜞蜡蜙蜛蝃蜬蝁蜾蝆蜠蜲蜪蜭蜼蜒蜺蜱蜵蝂蜦蜧蜸蜤蜚蜰蜑裷裧裱裲裺裾裮裼裶裻"
    	],
    	[
    		"e440",
    		"裰裬裫覝覡覟覞觩觫觨誫誙誋誒誏誖谽豨豩賕賏賗趖踉踂跿踍跽踊踃踇踆踅跾踀踄輐輑輎輍鄣鄜鄠鄢鄟鄝鄚鄤鄡鄛酺酲酹酳銥銤鉶銛鉺銠銔銪銍"
    	],
    	[
    		"e4a1",
    		"銦銚銫鉹銗鉿銣鋮銎銂銕銢鉽銈銡銊銆銌銙銧鉾銇銩銝銋鈭隞隡雿靘靽靺靾鞃鞀鞂靻鞄鞁靿韎韍頖颭颮餂餀餇馝馜駃馹馻馺駂馽駇骱髣髧鬾鬿魠魡魟鳱鳲鳵麧僿儃儰僸儆儇僶僾儋儌僽儊劋劌勱勯噈噂噌嘵噁噊噉噆噘"
    	],
    	[
    		"e540",
    		"噚噀嘳嘽嘬嘾嘸嘪嘺圚墫墝墱墠墣墯墬墥墡壿嫿嫴嫽嫷嫶嬃嫸嬂嫹嬁嬇嬅嬏屧嶙嶗嶟嶒嶢嶓嶕嶠嶜嶡嶚嶞幩幝幠幜緳廛廞廡彉徲憋憃慹憱憰憢憉"
    	],
    	[
    		"e5a1",
    		"憛憓憯憭憟憒憪憡憍慦憳戭摮摰撖撠撅撗撜撏撋撊撌撣撟摨撱撘敶敺敹敻斲斳暵暰暩暲暷暪暯樀樆樗槥槸樕槱槤樠槿槬槢樛樝槾樧槲槮樔槷槧橀樈槦槻樍槼槫樉樄樘樥樏槶樦樇槴樖歑殥殣殢殦氁氀毿氂潁漦潾澇濆澒"
    	],
    	[
    		"e640",
    		"澍澉澌潢潏澅潚澖潶潬澂潕潲潒潐潗澔澓潝漀潡潫潽潧澐潓澋潩潿澕潣潷潪潻熲熯熛熰熠熚熩熵熝熥熞熤熡熪熜熧熳犘犚獘獒獞獟獠獝獛獡獚獙"
    	],
    	[
    		"e6a1",
    		"獢璇璉璊璆璁瑽璅璈瑼瑹甈甇畾瘥瘞瘙瘝瘜瘣瘚瘨瘛皜皝皞皛瞍瞏瞉瞈磍碻磏磌磑磎磔磈磃磄磉禚禡禠禜禢禛歶稹窲窴窳箷篋箾箬篎箯箹篊箵糅糈糌糋緷緛緪緧緗緡縃緺緦緶緱緰緮緟罶羬羰羭翭翫翪翬翦翨聤聧膣膟"
    	],
    	[
    		"e740",
    		"膞膕膢膙膗舖艏艓艒艐艎艑蔤蔻蔏蔀蔩蔎蔉蔍蔟蔊蔧蔜蓻蔫蓺蔈蔌蓴蔪蓲蔕蓷蓫蓳蓼蔒蓪蓩蔖蓾蔨蔝蔮蔂蓽蔞蓶蔱蔦蓧蓨蓰蓯蓹蔘蔠蔰蔋蔙蔯虢"
    	],
    	[
    		"e7a1",
    		"蝖蝣蝤蝷蟡蝳蝘蝔蝛蝒蝡蝚蝑蝞蝭蝪蝐蝎蝟蝝蝯蝬蝺蝮蝜蝥蝏蝻蝵蝢蝧蝩衚褅褌褔褋褗褘褙褆褖褑褎褉覢覤覣觭觰觬諏諆誸諓諑諔諕誻諗誾諀諅諘諃誺誽諙谾豍貏賥賟賙賨賚賝賧趠趜趡趛踠踣踥踤踮踕踛踖踑踙踦踧"
    	],
    	[
    		"e840",
    		"踔踒踘踓踜踗踚輬輤輘輚輠輣輖輗遳遰遯遧遫鄯鄫鄩鄪鄲鄦鄮醅醆醊醁醂醄醀鋐鋃鋄鋀鋙銶鋏鋱鋟鋘鋩鋗鋝鋌鋯鋂鋨鋊鋈鋎鋦鋍鋕鋉鋠鋞鋧鋑鋓"
    	],
    	[
    		"e8a1",
    		"銵鋡鋆銴镼閬閫閮閰隤隢雓霅霈霂靚鞊鞎鞈韐韏頞頝頦頩頨頠頛頧颲餈飺餑餔餖餗餕駜駍駏駓駔駎駉駖駘駋駗駌骳髬髫髳髲髱魆魃魧魴魱魦魶魵魰魨魤魬鳼鳺鳽鳿鳷鴇鴀鳹鳻鴈鴅鴄麃黓鼏鼐儜儓儗儚儑凞匴叡噰噠噮"
    	],
    	[
    		"e940",
    		"噳噦噣噭噲噞噷圜圛壈墽壉墿墺壂墼壆嬗嬙嬛嬡嬔嬓嬐嬖嬨嬚嬠嬞寯嶬嶱嶩嶧嶵嶰嶮嶪嶨嶲嶭嶯嶴幧幨幦幯廩廧廦廨廥彋徼憝憨憖懅憴懆懁懌憺"
    	],
    	[
    		"e9a1",
    		"憿憸憌擗擖擐擏擉撽撉擃擛擳擙攳敿敼斢曈暾曀曊曋曏暽暻暺曌朣樴橦橉橧樲橨樾橝橭橶橛橑樨橚樻樿橁橪橤橐橏橔橯橩橠樼橞橖橕橍橎橆歕歔歖殧殪殫毈毇氄氃氆澭濋澣濇澼濎濈潞濄澽澞濊澨瀄澥澮澺澬澪濏澿澸"
    	],
    	[
    		"ea40",
    		"澢濉澫濍澯澲澰燅燂熿熸燖燀燁燋燔燊燇燏熽燘熼燆燚燛犝犞獩獦獧獬獥獫獪瑿璚璠璔璒璕璡甋疀瘯瘭瘱瘽瘳瘼瘵瘲瘰皻盦瞚瞝瞡瞜瞛瞢瞣瞕瞙"
    	],
    	[
    		"eaa1",
    		"瞗磝磩磥磪磞磣磛磡磢磭磟磠禤穄穈穇窶窸窵窱窷篞篣篧篝篕篥篚篨篹篔篪篢篜篫篘篟糒糔糗糐糑縒縡縗縌縟縠縓縎縜縕縚縢縋縏縖縍縔縥縤罃罻罼罺羱翯耪耩聬膱膦膮膹膵膫膰膬膴膲膷膧臲艕艖艗蕖蕅蕫蕍蕓蕡蕘"
    	],
    	[
    		"eb40",
    		"蕀蕆蕤蕁蕢蕄蕑蕇蕣蔾蕛蕱蕎蕮蕵蕕蕧蕠薌蕦蕝蕔蕥蕬虣虥虤螛螏螗螓螒螈螁螖螘蝹螇螣螅螐螑螝螄螔螜螚螉褞褦褰褭褮褧褱褢褩褣褯褬褟觱諠"
    	],
    	[
    		"eba1",
    		"諢諲諴諵諝謔諤諟諰諈諞諡諨諿諯諻貑貒貐賵賮賱賰賳赬赮趥趧踳踾踸蹀蹅踶踼踽蹁踰踿躽輶輮輵輲輹輷輴遶遹遻邆郺鄳鄵鄶醓醐醑醍醏錧錞錈錟錆錏鍺錸錼錛錣錒錁鍆錭錎錍鋋錝鋺錥錓鋹鋷錴錂錤鋿錩錹錵錪錔錌"
    	],
    	[
    		"ec40",
    		"錋鋾錉錀鋻錖閼闍閾閹閺閶閿閵閽隩雔霋霒霐鞙鞗鞔韰韸頵頯頲餤餟餧餩馞駮駬駥駤駰駣駪駩駧骹骿骴骻髶髺髹髷鬳鮀鮅鮇魼魾魻鮂鮓鮒鮐魺鮕"
    	],
    	[
    		"eca1",
    		"魽鮈鴥鴗鴠鴞鴔鴩鴝鴘鴢鴐鴙鴟麈麆麇麮麭黕黖黺鼒鼽儦儥儢儤儠儩勴嚓嚌嚍嚆嚄嚃噾嚂噿嚁壖壔壏壒嬭嬥嬲嬣嬬嬧嬦嬯嬮孻寱寲嶷幬幪徾徻懃憵憼懧懠懥懤懨懞擯擩擣擫擤擨斁斀斶旚曒檍檖檁檥檉檟檛檡檞檇檓檎"
    	],
    	[
    		"ed40",
    		"檕檃檨檤檑橿檦檚檅檌檒歛殭氉濌澩濴濔濣濜濭濧濦濞濲濝濢濨燡燱燨燲燤燰燢獳獮獯璗璲璫璐璪璭璱璥璯甐甑甒甏疄癃癈癉癇皤盩瞵瞫瞲瞷瞶"
    	],
    	[
    		"eda1",
    		"瞴瞱瞨矰磳磽礂磻磼磲礅磹磾礄禫禨穜穛穖穘穔穚窾竀竁簅簏篲簀篿篻簎篴簋篳簂簉簃簁篸篽簆篰篱簐簊糨縭縼繂縳顈縸縪繉繀繇縩繌縰縻縶繄縺罅罿罾罽翴翲耬膻臄臌臊臅臇膼臩艛艚艜薃薀薏薧薕薠薋薣蕻薤薚薞"
    	],
    	[
    		"ee40",
    		"蕷蕼薉薡蕺蕸蕗薎薖薆薍薙薝薁薢薂薈薅蕹蕶薘薐薟虨螾螪螭蟅螰螬螹螵螼螮蟉蟃蟂蟌螷螯蟄蟊螴螶螿螸螽蟞螲褵褳褼褾襁襒褷襂覭覯覮觲觳謞"
    	],
    	[
    		"eea1",
    		"謘謖謑謅謋謢謏謒謕謇謍謈謆謜謓謚豏豰豲豱豯貕貔賹赯蹎蹍蹓蹐蹌蹇轃轀邅遾鄸醚醢醛醙醟醡醝醠鎡鎃鎯鍤鍖鍇鍼鍘鍜鍶鍉鍐鍑鍠鍭鎏鍌鍪鍹鍗鍕鍒鍏鍱鍷鍻鍡鍞鍣鍧鎀鍎鍙闇闀闉闃闅閷隮隰隬霠霟霘霝霙鞚鞡鞜"
    	],
    	[
    		"ef40",
    		"鞞鞝韕韔韱顁顄顊顉顅顃餥餫餬餪餳餲餯餭餱餰馘馣馡騂駺駴駷駹駸駶駻駽駾駼騃骾髾髽鬁髼魈鮚鮨鮞鮛鮦鮡鮥鮤鮆鮢鮠鮯鴳鵁鵧鴶鴮鴯鴱鴸鴰"
    	],
    	[
    		"efa1",
    		"鵅鵂鵃鴾鴷鵀鴽翵鴭麊麉麍麰黈黚黻黿鼤鼣鼢齔龠儱儭儮嚘嚜嚗嚚嚝嚙奰嬼屩屪巀幭幮懘懟懭懮懱懪懰懫懖懩擿攄擽擸攁攃擼斔旛曚曛曘櫅檹檽櫡櫆檺檶檷櫇檴檭歞毉氋瀇瀌瀍瀁瀅瀔瀎濿瀀濻瀦濼濷瀊爁燿燹爃燽獶"
    	],
    	[
    		"f040",
    		"璸瓀璵瓁璾璶璻瓂甔甓癜癤癙癐癓癗癚皦皽盬矂瞺磿礌礓礔礉礐礒礑禭禬穟簜簩簙簠簟簭簝簦簨簢簥簰繜繐繖繣繘繢繟繑繠繗繓羵羳翷翸聵臑臒"
    	],
    	[
    		"f0a1",
    		"臐艟艞薴藆藀藃藂薳薵薽藇藄薿藋藎藈藅薱薶藒蘤薸薷薾虩蟧蟦蟢蟛蟫蟪蟥蟟蟳蟤蟔蟜蟓蟭蟘蟣螤蟗蟙蠁蟴蟨蟝襓襋襏襌襆襐襑襉謪謧謣謳謰謵譇謯謼謾謱謥謷謦謶謮謤謻謽謺豂豵貙貘貗賾贄贂贀蹜蹢蹠蹗蹖蹞蹥蹧"
    	],
    	[
    		"f140",
    		"蹛蹚蹡蹝蹩蹔轆轇轈轋鄨鄺鄻鄾醨醥醧醯醪鎵鎌鎒鎷鎛鎝鎉鎧鎎鎪鎞鎦鎕鎈鎙鎟鎍鎱鎑鎲鎤鎨鎴鎣鎥闒闓闑隳雗雚巂雟雘雝霣霢霥鞬鞮鞨鞫鞤鞪"
    	],
    	[
    		"f1a1",
    		"鞢鞥韗韙韖韘韺顐顑顒颸饁餼餺騏騋騉騍騄騑騊騅騇騆髀髜鬈鬄鬅鬩鬵魊魌魋鯇鯆鯃鮿鯁鮵鮸鯓鮶鯄鮹鮽鵜鵓鵏鵊鵛鵋鵙鵖鵌鵗鵒鵔鵟鵘鵚麎麌黟鼁鼀鼖鼥鼫鼪鼩鼨齌齕儴儵劖勷厴嚫嚭嚦嚧嚪嚬壚壝壛夒嬽嬾嬿巃幰"
    	],
    	[
    		"f240",
    		"徿懻攇攐攍攉攌攎斄旞旝曞櫧櫠櫌櫑櫙櫋櫟櫜櫐櫫櫏櫍櫞歠殰氌瀙瀧瀠瀖瀫瀡瀢瀣瀩瀗瀤瀜瀪爌爊爇爂爅犥犦犤犣犡瓋瓅璷瓃甖癠矉矊矄矱礝礛"
    	],
    	[
    		"f2a1",
    		"礡礜礗礞禰穧穨簳簼簹簬簻糬糪繶繵繸繰繷繯繺繲繴繨罋罊羃羆羷翽翾聸臗臕艤艡艣藫藱藭藙藡藨藚藗藬藲藸藘藟藣藜藑藰藦藯藞藢蠀蟺蠃蟶蟷蠉蠌蠋蠆蟼蠈蟿蠊蠂襢襚襛襗襡襜襘襝襙覈覷覶觶譐譈譊譀譓譖譔譋譕"
    	],
    	[
    		"f340",
    		"譑譂譒譗豃豷豶貚贆贇贉趬趪趭趫蹭蹸蹳蹪蹯蹻軂轒轑轏轐轓辴酀鄿醰醭鏞鏇鏏鏂鏚鏐鏹鏬鏌鏙鎩鏦鏊鏔鏮鏣鏕鏄鏎鏀鏒鏧镽闚闛雡霩霫霬霨霦"
    	],
    	[
    		"f3a1",
    		"鞳鞷鞶韝韞韟顜顙顝顗颿颽颻颾饈饇饃馦馧騚騕騥騝騤騛騢騠騧騣騞騜騔髂鬋鬊鬎鬌鬷鯪鯫鯠鯞鯤鯦鯢鯰鯔鯗鯬鯜鯙鯥鯕鯡鯚鵷鶁鶊鶄鶈鵱鶀鵸鶆鶋鶌鵽鵫鵴鵵鵰鵩鶅鵳鵻鶂鵯鵹鵿鶇鵨麔麑黀黼鼭齀齁齍齖齗齘匷嚲"
    	],
    	[
    		"f440",
    		"嚵嚳壣孅巆巇廮廯忀忁懹攗攖攕攓旟曨曣曤櫳櫰櫪櫨櫹櫱櫮櫯瀼瀵瀯瀷瀴瀱灂瀸瀿瀺瀹灀瀻瀳灁爓爔犨獽獼璺皫皪皾盭矌矎矏矍矲礥礣礧礨礤礩"
    	],
    	[
    		"f4a1",
    		"禲穮穬穭竷籉籈籊籇籅糮繻繾纁纀羺翿聹臛臙舋艨艩蘢藿蘁藾蘛蘀藶蘄蘉蘅蘌藽蠙蠐蠑蠗蠓蠖襣襦覹觷譠譪譝譨譣譥譧譭趮躆躈躄轙轖轗轕轘轚邍酃酁醷醵醲醳鐋鐓鏻鐠鐏鐔鏾鐕鐐鐨鐙鐍鏵鐀鏷鐇鐎鐖鐒鏺鐉鏸鐊鏿"
    	],
    	[
    		"f540",
    		"鏼鐌鏶鐑鐆闞闠闟霮霯鞹鞻韽韾顠顢顣顟飁飂饐饎饙饌饋饓騲騴騱騬騪騶騩騮騸騭髇髊髆鬐鬒鬑鰋鰈鯷鰅鰒鯸鱀鰇鰎鰆鰗鰔鰉鶟鶙鶤鶝鶒鶘鶐鶛"
    	],
    	[
    		"f5a1",
    		"鶠鶔鶜鶪鶗鶡鶚鶢鶨鶞鶣鶿鶩鶖鶦鶧麙麛麚黥黤黧黦鼰鼮齛齠齞齝齙龑儺儹劘劗囃嚽嚾孈孇巋巏廱懽攛欂櫼欃櫸欀灃灄灊灈灉灅灆爝爚爙獾甗癪矐礭礱礯籔籓糲纊纇纈纋纆纍罍羻耰臝蘘蘪蘦蘟蘣蘜蘙蘧蘮蘡蘠蘩蘞蘥"
    	],
    	[
    		"f640",
    		"蠩蠝蠛蠠蠤蠜蠫衊襭襩襮襫觺譹譸譅譺譻贐贔趯躎躌轞轛轝酆酄酅醹鐿鐻鐶鐩鐽鐼鐰鐹鐪鐷鐬鑀鐱闥闤闣霵霺鞿韡顤飉飆飀饘饖騹騽驆驄驂驁騺"
    	],
    	[
    		"f6a1",
    		"騿髍鬕鬗鬘鬖鬺魒鰫鰝鰜鰬鰣鰨鰩鰤鰡鶷鶶鶼鷁鷇鷊鷏鶾鷅鷃鶻鶵鷎鶹鶺鶬鷈鶱鶭鷌鶳鷍鶲鹺麜黫黮黭鼛鼘鼚鼱齎齥齤龒亹囆囅囋奱孋孌巕巑廲攡攠攦攢欋欈欉氍灕灖灗灒爞爟犩獿瓘瓕瓙瓗癭皭礵禴穰穱籗籜籙籛籚"
    	],
    	[
    		"f740",
    		"糴糱纑罏羇臞艫蘴蘵蘳蘬蘲蘶蠬蠨蠦蠪蠥襱覿覾觻譾讄讂讆讅譿贕躕躔躚躒躐躖躗轠轢酇鑌鑐鑊鑋鑏鑇鑅鑈鑉鑆霿韣顪顩飋饔饛驎驓驔驌驏驈驊"
    	],
    	[
    		"f7a1",
    		"驉驒驐髐鬙鬫鬻魖魕鱆鱈鰿鱄鰹鰳鱁鰼鰷鰴鰲鰽鰶鷛鷒鷞鷚鷋鷐鷜鷑鷟鷩鷙鷘鷖鷵鷕鷝麶黰鼵鼳鼲齂齫龕龢儽劙壨壧奲孍巘蠯彏戁戃戄攩攥斖曫欑欒欏毊灛灚爢玂玁玃癰矔籧籦纕艬蘺虀蘹蘼蘱蘻蘾蠰蠲蠮蠳襶襴襳觾"
    	],
    	[
    		"f840",
    		"讌讎讋讈豅贙躘轤轣醼鑢鑕鑝鑗鑞韄韅頀驖驙鬞鬟鬠鱒鱘鱐鱊鱍鱋鱕鱙鱌鱎鷻鷷鷯鷣鷫鷸鷤鷶鷡鷮鷦鷲鷰鷢鷬鷴鷳鷨鷭黂黐黲黳鼆鼜鼸鼷鼶齃齏"
    	],
    	[
    		"f8a1",
    		"齱齰齮齯囓囍孎屭攭曭曮欓灟灡灝灠爣瓛瓥矕礸禷禶籪纗羉艭虃蠸蠷蠵衋讔讕躞躟躠躝醾醽釂鑫鑨鑩雥靆靃靇韇韥驞髕魙鱣鱧鱦鱢鱞鱠鸂鷾鸇鸃鸆鸅鸀鸁鸉鷿鷽鸄麠鼞齆齴齵齶囔攮斸欘欙欗欚灢爦犪矘矙礹籩籫糶纚"
    	],
    	[
    		"f940",
    		"纘纛纙臠臡虆虇虈襹襺襼襻觿讘讙躥躤躣鑮鑭鑯鑱鑳靉顲饟鱨鱮鱭鸋鸍鸐鸏鸒鸑麡黵鼉齇齸齻齺齹圞灦籯蠼趲躦釃鑴鑸鑶鑵驠鱴鱳鱱鱵鸔鸓黶鼊"
    	],
    	[
    		"f9a1",
    		"龤灨灥糷虪蠾蠽蠿讞貜躩軉靋顳顴飌饡馫驤驦驧鬤鸕鸗齈戇欞爧虌躨钂钀钁驩驨鬮鸙爩虋讟钃鱹麷癵驫鱺鸝灩灪麤齾齉龘碁銹裏墻恒粧嫺╔╦╗╠╬╣╚╩╝╒╤╕╞╪╡╘╧╛╓╥╖╟╫╢╙╨╜║═╭╮╰╯▓"
    	]
    ];

    var require$$7$1 = [
    	[
    		"8740",
    		"䏰䰲䘃䖦䕸𧉧䵷䖳𧲱䳢𧳅㮕䜶䝄䱇䱀𤊿𣘗𧍒𦺋𧃒䱗𪍑䝏䗚䲅𧱬䴇䪤䚡𦬣爥𥩔𡩣𣸆𣽡晍囻"
    	],
    	[
    		"8767",
    		"綕夝𨮹㷴霴𧯯寛𡵞媤㘥𩺰嫑宷峼杮薓𩥅瑡璝㡵𡵓𣚞𦀡㻬"
    	],
    	[
    		"87a1",
    		"𥣞㫵竼龗𤅡𨤍𣇪𠪊𣉞䌊蒄龖鐯䤰蘓墖靊鈘秐稲晠権袝瑌篅枂稬剏遆㓦珄𥶹瓆鿇垳䤯呌䄱𣚎堘穲𧭥讏䚮𦺈䆁𥶙箮𢒼鿈𢓁𢓉𢓌鿉蔄𣖻䂴鿊䓡𪷿拁灮鿋"
    	],
    	[
    		"8840",
    		"㇀",
    		4,
    		"𠄌㇅𠃑𠃍㇆㇇𠃋𡿨㇈𠃊㇉㇊㇋㇌𠄎㇍㇎ĀÁǍÀĒÉĚÈŌÓǑÒ࿿Ê̄Ế࿿Ê̌ỀÊāáǎàɑēéěèīíǐìōóǒòūúǔùǖǘǚ"
    	],
    	[
    		"88a1",
    		"ǜü࿿ê̄ế࿿ê̌ềêɡ⏚⏛"
    	],
    	[
    		"8940",
    		"𪎩𡅅"
    	],
    	[
    		"8943",
    		"攊"
    	],
    	[
    		"8946",
    		"丽滝鵎釟"
    	],
    	[
    		"894c",
    		"𧜵撑会伨侨兖兴农凤务动医华发变团声处备夲头学实実岚庆总斉柾栄桥济炼电纤纬纺织经统缆缷艺苏药视设询车轧轮"
    	],
    	[
    		"89a1",
    		"琑糼緍楆竉刧"
    	],
    	[
    		"89ab",
    		"醌碸酞肼"
    	],
    	[
    		"89b0",
    		"贋胶𠧧"
    	],
    	[
    		"89b5",
    		"肟黇䳍鷉鸌䰾𩷶𧀎鸊𪄳㗁"
    	],
    	[
    		"89c1",
    		"溚舾甙"
    	],
    	[
    		"89c5",
    		"䤑马骏龙禇𨑬𡷊𠗐𢫦两亁亀亇亿仫伷㑌侽㹈倃傈㑽㒓㒥円夅凛凼刅争剹劐匧㗇厩㕑厰㕓参吣㕭㕲㚁咓咣咴咹哐哯唘唣唨㖘唿㖥㖿嗗㗅"
    	],
    	[
    		"8a40",
    		"𧶄唥"
    	],
    	[
    		"8a43",
    		"𠱂𠴕𥄫喐𢳆㧬𠍁蹆𤶸𩓥䁓𨂾睺𢰸㨴䟕𨅝𦧲𤷪擝𠵼𠾴𠳕𡃴撍蹾𠺖𠰋𠽤𢲩𨉖𤓓"
    	],
    	[
    		"8a64",
    		"𠵆𩩍𨃩䟴𤺧𢳂骲㩧𩗴㿭㔆𥋇𩟔𧣈𢵄鵮頕"
    	],
    	[
    		"8a76",
    		"䏙𦂥撴哣𢵌𢯊𡁷㧻𡁯"
    	],
    	[
    		"8aa1",
    		"𦛚𦜖𧦠擪𥁒𠱃蹨𢆡𨭌𠜱"
    	],
    	[
    		"8aac",
    		"䠋𠆩㿺塳𢶍"
    	],
    	[
    		"8ab2",
    		"𤗈𠓼𦂗𠽌𠶖啹䂻䎺"
    	],
    	[
    		"8abb",
    		"䪴𢩦𡂝膪飵𠶜捹㧾𢝵跀嚡摼㹃"
    	],
    	[
    		"8ac9",
    		"𪘁𠸉𢫏𢳉"
    	],
    	[
    		"8ace",
    		"𡃈𣧂㦒㨆𨊛㕸𥹉𢃇噒𠼱𢲲𩜠㒼氽𤸻"
    	],
    	[
    		"8adf",
    		"𧕴𢺋𢈈𪙛𨳍𠹺𠰴𦠜羓𡃏𢠃𢤹㗻𥇣𠺌𠾍𠺪㾓𠼰𠵇𡅏𠹌"
    	],
    	[
    		"8af6",
    		"𠺫𠮩𠵈𡃀𡄽㿹𢚖搲𠾭"
    	],
    	[
    		"8b40",
    		"𣏴𧘹𢯎𠵾𠵿𢱑𢱕㨘𠺘𡃇𠼮𪘲𦭐𨳒𨶙𨳊閪哌苄喹"
    	],
    	[
    		"8b55",
    		"𩻃鰦骶𧝞𢷮煀腭胬尜𦕲脴㞗卟𨂽醶𠻺𠸏𠹷𠻻㗝𤷫㘉𠳖嚯𢞵𡃉𠸐𠹸𡁸𡅈𨈇𡑕𠹹𤹐𢶤婔𡀝𡀞𡃵𡃶垜𠸑"
    	],
    	[
    		"8ba1",
    		"𧚔𨋍𠾵𠹻𥅾㜃𠾶𡆀𥋘𪊽𤧚𡠺𤅷𨉼墙剨㘚𥜽箲孨䠀䬬鼧䧧鰟鮍𥭴𣄽嗻㗲嚉丨夂𡯁屮靑𠂆乛亻㔾尣彑忄㣺扌攵歺氵氺灬爫丬犭𤣩罒礻糹罓𦉪㓁"
    	],
    	[
    		"8bde",
    		"𦍋耂肀𦘒𦥑卝衤见𧢲讠贝钅镸长门𨸏韦页风飞饣𩠐鱼鸟黄歯龜丷𠂇阝户钢"
    	],
    	[
    		"8c40",
    		"倻淾𩱳龦㷉袏𤅎灷峵䬠𥇍㕙𥴰愢𨨲辧釶熑朙玺𣊁𪄇㲋𡦀䬐磤琂冮𨜏䀉橣𪊺䈣蘏𠩯稪𩥇𨫪靕灍匤𢁾鏴盙𨧣龧矝亣俰傼丯众龨吴綋墒壐𡶶庒庙忂𢜒斋"
    	],
    	[
    		"8ca1",
    		"𣏹椙橃𣱣泿"
    	],
    	[
    		"8ca7",
    		"爀𤔅玌㻛𤨓嬕璹讃𥲤𥚕窓篬糃繬苸薗龩袐龪躹龫迏蕟駠鈡龬𨶹𡐿䁱䊢娚"
    	],
    	[
    		"8cc9",
    		"顨杫䉶圽"
    	],
    	[
    		"8cce",
    		"藖𤥻芿𧄍䲁𦵴嵻𦬕𦾾龭龮宖龯曧繛湗秊㶈䓃𣉖𢞖䎚䔶"
    	],
    	[
    		"8ce6",
    		"峕𣬚諹屸㴒𣕑嵸龲煗䕘𤃬𡸣䱷㥸㑊𠆤𦱁諌侴𠈹妿腬顖𩣺弻"
    	],
    	[
    		"8d40",
    		"𠮟"
    	],
    	[
    		"8d42",
    		"𢇁𨥭䄂䚻𩁹㼇龳𪆵䃸㟖䛷𦱆䅼𨚲𧏿䕭㣔𥒚䕡䔛䶉䱻䵶䗪㿈𤬏㙡䓞䒽䇭崾嵈嵖㷼㠏嶤嶹㠠㠸幂庽弥徃㤈㤔㤿㥍惗愽峥㦉憷憹懏㦸戬抐拥挘㧸嚱"
    	],
    	[
    		"8da1",
    		"㨃揢揻搇摚㩋擀崕嘡龟㪗斆㪽旿晓㫲暒㬢朖㭂枤栀㭘桊梄㭲㭱㭻椉楃牜楤榟榅㮼槖㯝橥橴橱檂㯬檙㯲檫檵櫔櫶殁毁毪汵沪㳋洂洆洦涁㳯涤涱渕渘温溆𨧀溻滢滚齿滨滩漤漴㵆𣽁澁澾㵪㵵熷岙㶊瀬㶑灐灔灯灿炉𠌥䏁㗱𠻘"
    	],
    	[
    		"8e40",
    		"𣻗垾𦻓焾𥟠㙎榢𨯩孴穉𥣡𩓙穥穽𥦬窻窰竂竃燑𦒍䇊竚竝竪䇯咲𥰁笋筕笩𥌎𥳾箢筯莜𥮴𦱿篐萡箒箸𥴠㶭𥱥蒒篺簆簵𥳁籄粃𤢂粦晽𤕸糉糇糦籴糳糵糎"
    	],
    	[
    		"8ea1",
    		"繧䔝𦹄絝𦻖璍綉綫焵綳緒𤁗𦀩緤㴓緵𡟹緥𨍭縝𦄡𦅚繮纒䌫鑬縧罀罁罇礶𦋐駡羗𦍑羣𡙡𠁨䕜𣝦䔃𨌺翺𦒉者耈耝耨耯𪂇𦳃耻耼聡𢜔䦉𦘦𣷣𦛨朥肧𨩈脇脚墰𢛶汿𦒘𤾸擧𡒊舘𡡞橓𤩥𤪕䑺舩𠬍𦩒𣵾俹𡓽蓢荢𦬊𤦧𣔰𡝳𣷸芪椛芳䇛"
    	],
    	[
    		"8f40",
    		"蕋苐茚𠸖𡞴㛁𣅽𣕚艻苢茘𣺋𦶣𦬅𦮗𣗎㶿茝嗬莅䔋𦶥莬菁菓㑾𦻔橗蕚㒖𦹂𢻯葘𥯤葱㷓䓤檧葊𣲵祘蒨𦮖𦹷𦹃蓞萏莑䒠蒓蓤𥲑䉀𥳀䕃蔴嫲𦺙䔧蕳䔖枿蘖"
    	],
    	[
    		"8fa1",
    		"𨘥𨘻藁𧂈蘂𡖂𧃍䕫䕪蘨㙈𡢢号𧎚虾蝱𪃸蟮𢰧螱蟚蠏噡虬桖䘏衅衆𧗠𣶹𧗤衞袜䙛袴袵揁装睷𧜏覇覊覦覩覧覼𨨥觧𧤤𧪽誜瞓釾誐𧩙竩𧬺𣾏䜓𧬸煼謌謟𥐰𥕥謿譌譍誩𤩺讐讛誯𡛟䘕衏貛𧵔𧶏貫㜥𧵓賖𧶘𧶽贒贃𡤐賛灜贑𤳉㻐起"
    	],
    	[
    		"9040",
    		"趩𨀂𡀔𤦊㭼𨆼𧄌竧躭躶軃鋔輙輭𨍥𨐒辥錃𪊟𠩐辳䤪𨧞𨔽𣶻廸𣉢迹𪀔𨚼𨔁𢌥㦀𦻗逷𨔼𧪾遡𨕬𨘋邨𨜓郄𨛦邮都酧㫰醩釄粬𨤳𡺉鈎沟鉁鉢𥖹銹𨫆𣲛𨬌𥗛"
    	],
    	[
    		"90a1",
    		"𠴱錬鍫𨫡𨯫炏嫃𨫢𨫥䥥鉄𨯬𨰹𨯿鍳鑛躼閅閦鐦閠濶䊹𢙺𨛘𡉼𣸮䧟氜陻隖䅬隣𦻕懚隶磵𨫠隽双䦡𦲸𠉴𦐐𩂯𩃥𤫑𡤕𣌊霱虂霶䨏䔽䖅𤫩灵孁霛靜𩇕靗孊𩇫靟鐥僐𣂷𣂼鞉鞟鞱鞾韀韒韠𥑬韮琜𩐳響韵𩐝𧥺䫑頴頳顋顦㬎𧅵㵑𠘰𤅜"
    	],
    	[
    		"9140",
    		"𥜆飊颷飈飇䫿𦴧𡛓喰飡飦飬鍸餹𤨩䭲𩡗𩤅駵騌騻騐驘𥜥㛄𩂱𩯕髠髢𩬅髴䰎鬔鬭𨘀倴鬴𦦨㣃𣁽魐魀𩴾婅𡡣鮎𤉋鰂鯿鰌𩹨鷔𩾷𪆒𪆫𪃡𪄣𪇟鵾鶃𪄴鸎梈"
    	],
    	[
    		"91a1",
    		"鷄𢅛𪆓𪈠𡤻𪈳鴹𪂹𪊴麐麕麞麢䴴麪麯𤍤黁㭠㧥㴝伲㞾𨰫鼂鼈䮖鐤𦶢鼗鼖鼹嚟嚊齅馸𩂋韲葿齢齩竜龎爖䮾𤥵𤦻煷𤧸𤍈𤩑玞𨯚𡣺禟𨥾𨸶鍩鏳𨩄鋬鎁鏋𨥬𤒹爗㻫睲穃烐𤑳𤏸煾𡟯炣𡢾𣖙㻇𡢅𥐯𡟸㜢𡛻𡠹㛡𡝴𡣑𥽋㜣𡛀坛𤨥𡏾𡊨"
    	],
    	[
    		"9240",
    		"𡏆𡒶蔃𣚦蔃葕𤦔𧅥𣸱𥕜𣻻𧁒䓴𣛮𩦝𦼦柹㜳㰕㷧塬𡤢栐䁗𣜿𤃡𤂋𤄏𦰡哋嚞𦚱嚒𠿟𠮨𠸍鏆𨬓鎜仸儫㠙𤐶亼𠑥𠍿佋侊𥙑婨𠆫𠏋㦙𠌊𠐔㐵伩𠋀𨺳𠉵諚𠈌亘"
    	],
    	[
    		"92a1",
    		"働儍侢伃𤨎𣺊佂倮偬傁俌俥偘僼兙兛兝兞湶𣖕𣸹𣺿浲𡢄𣺉冨凃𠗠䓝𠒣𠒒𠒑赺𨪜𠜎剙劤𠡳勡鍮䙺熌𤎌𠰠𤦬𡃤槑𠸝瑹㻞璙琔瑖玘䮎𤪼𤂍叐㖄爏𤃉喴𠍅响𠯆圝鉝雴鍦埝垍坿㘾壋媙𨩆𡛺𡝯𡜐娬妸銏婾嫏娒𥥆𡧳𡡡𤊕㛵洅瑃娡𥺃"
    	],
    	[
    		"9340",
    		"媁𨯗𠐓鏠璌𡌃焅䥲鐈𨧻鎽㞠尞岞幞幈𡦖𡥼𣫮廍孏𡤃𡤄㜁𡢠㛝𡛾㛓脪𨩇𡶺𣑲𨦨弌弎𡤧𡞫婫𡜻孄蘔𧗽衠恾𢡠𢘫忛㺸𢖯𢖾𩂈𦽳懀𠀾𠁆𢘛憙憘恵𢲛𢴇𤛔𩅍"
    	],
    	[
    		"93a1",
    		"摱𤙥𢭪㨩𢬢𣑐𩣪𢹸挷𪑛撶挱揑𤧣𢵧护𢲡搻敫楲㯴𣂎𣊭𤦉𣊫唍𣋠𡣙𩐿曎𣊉𣆳㫠䆐𥖄𨬢𥖏𡛼𥕛𥐥磮𣄃𡠪𣈴㑤𣈏𣆂𤋉暎𦴤晫䮓昰𧡰𡷫晣𣋒𣋡昞𥡲㣑𣠺𣞼㮙𣞢𣏾瓐㮖枏𤘪梶栞㯄檾㡣𣟕𤒇樳橒櫉欅𡤒攑梘橌㯗橺歗𣿀𣲚鎠鋲𨯪𨫋"
    	],
    	[
    		"9440",
    		"銉𨀞𨧜鑧涥漋𤧬浧𣽿㶏渄𤀼娽渊塇洤硂焻𤌚𤉶烱牐犇犔𤞏𤜥兹𤪤𠗫瑺𣻸𣙟𤩊𤤗𥿡㼆㺱𤫟𨰣𣼵悧㻳瓌琼鎇琷䒟𦷪䕑疃㽣𤳙𤴆㽘畕癳𪗆㬙瑨𨫌𤦫𤦎㫻"
    	],
    	[
    		"94a1",
    		"㷍𤩎㻿𤧅𤣳釺圲鍂𨫣𡡤僟𥈡𥇧睸𣈲眎眏睻𤚗𣞁㩞𤣰琸璛㺿𤪺𤫇䃈𤪖𦆮錇𥖁砞碍碈磒珐祙𧝁𥛣䄎禛蒖禥樭𣻺稺秴䅮𡛦䄲鈵秱𠵌𤦌𠊙𣶺𡝮㖗啫㕰㚪𠇔𠰍竢婙𢛵𥪯𥪜娍𠉛磰娪𥯆竾䇹籝籭䈑𥮳𥺼𥺦糍𤧹𡞰粎籼粮檲緜縇緓罎𦉡"
    	],
    	[
    		"9540",
    		"𦅜𧭈綗𥺂䉪𦭵𠤖柖𠁎𣗏埄𦐒𦏸𤥢翝笧𠠬𥫩𥵃笌𥸎駦虅驣樜𣐿㧢𤧷𦖭騟𦖠蒀𧄧𦳑䓪脷䐂胆脉腂𦞴飃𦩂艢艥𦩑葓𦶧蘐𧈛媆䅿𡡀嬫𡢡嫤𡣘蚠蜨𣶏蠭𧐢娂"
    	],
    	[
    		"95a1",
    		"衮佅袇袿裦襥襍𥚃襔𧞅𧞄𨯵𨯙𨮜𨧹㺭蒣䛵䛏㟲訽訜𩑈彍鈫𤊄旔焩烄𡡅鵭貟賩𧷜妚矃姰䍮㛔踪躧𤰉輰轊䋴汘澻𢌡䢛潹溋𡟚鯩㚵𤤯邻邗啱䤆醻鐄𨩋䁢𨫼鐧𨰝𨰻蓥訫閙閧閗閖𨴴瑅㻂𤣿𤩂𤏪㻧𣈥随𨻧𨹦𨹥㻌𤧭𤩸𣿮琒瑫㻼靁𩂰"
    	],
    	[
    		"9640",
    		"桇䨝𩂓𥟟靝鍨𨦉𨰦𨬯𦎾銺嬑譩䤼珹𤈛鞛靱餸𠼦巁𨯅𤪲頟𩓚鋶𩗗釥䓀𨭐𤩧𨭤飜𨩅㼀鈪䤥萔餻饍𧬆㷽馛䭯馪驜𨭥𥣈檏騡嫾騯𩣱䮐𩥈馼䮽䮗鍽塲𡌂堢𤦸"
    	],
    	[
    		"96a1",
    		"𡓨硄𢜟𣶸棅㵽鑘㤧慐𢞁𢥫愇鱏鱓鱻鰵鰐魿鯏𩸭鮟𪇵𪃾鴡䲮𤄄鸘䲰鴌𪆴𪃭𪃳𩤯鶥蒽𦸒𦿟𦮂藼䔳𦶤𦺄𦷰萠藮𦸀𣟗𦁤秢𣖜𣙀䤭𤧞㵢鏛銾鍈𠊿碹鉷鑍俤㑀遤𥕝砽硔碶硋𡝗𣇉𤥁㚚佲濚濙瀞瀞吔𤆵垻壳垊鴖埗焴㒯𤆬燫𦱀𤾗嬨𡞵𨩉"
    	],
    	[
    		"9740",
    		"愌嫎娋䊼𤒈㜬䭻𨧼鎻鎸𡣖𠼝葲𦳀𡐓𤋺𢰦𤏁妔𣶷𦝁綨𦅛𦂤𤦹𤦋𨧺鋥珢㻩璴𨭣𡢟㻡𤪳櫘珳珻㻖𤨾𤪔𡟙𤩦𠎧𡐤𤧥瑈𤤖炥𤥶銄珦鍟𠓾錱𨫎𨨖鎆𨯧𥗕䤵𨪂煫"
    	],
    	[
    		"97a1",
    		"𤥃𠳿嚤𠘚𠯫𠲸唂秄𡟺緾𡛂𤩐𡡒䔮鐁㜊𨫀𤦭妰𡢿𡢃𧒄媡㛢𣵛㚰鉟婹𨪁𡡢鍴㳍𠪴䪖㦊僴㵩㵌𡎜煵䋻𨈘渏𩃤䓫浗𧹏灧沯㳖𣿭𣸭渂漌㵯𠏵畑㚼㓈䚀㻚䡱姄鉮䤾轁𨰜𦯀堒埈㛖𡑒烾𤍢𤩱𢿣𡊰𢎽梹楧𡎘𣓥𧯴𣛟𨪃𣟖𣏺𤲟樚𣚭𦲷萾䓟䓎"
    	],
    	[
    		"9840",
    		"𦴦𦵑𦲂𦿞漗𧄉茽𡜺菭𦲀𧁓𡟛妉媂𡞳婡婱𡤅𤇼㜭姯𡜼㛇熎鎐暚𤊥婮娫𤊓樫𣻹𧜶𤑛𤋊焝𤉙𨧡侰𦴨峂𤓎𧹍𤎽樌𤉖𡌄炦焳𤏩㶥泟勇𤩏繥姫崯㷳彜𤩝𡟟綤萦"
    	],
    	[
    		"98a1",
    		"咅𣫺𣌀𠈔坾𠣕𠘙㿥𡾞𪊶瀃𩅛嵰玏糓𨩙𩐠俈翧狍猐𧫴猸猹𥛶獁獈㺩𧬘遬燵𤣲珡臶㻊県㻑沢国琙琞琟㻢㻰㻴㻺瓓㼎㽓畂畭畲疍㽼痈痜㿀癍㿗癴㿜発𤽜熈嘣覀塩䀝睃䀹条䁅㗛瞘䁪䁯属瞾矋売砘点砜䂨砹硇硑硦葈𥔵礳栃礲䄃"
    	],
    	[
    		"9940",
    		"䄉禑禙辻稆込䅧窑䆲窼艹䇄竏竛䇏両筢筬筻簒簛䉠䉺类粜䊌粸䊔糭输烀𠳏総緔緐緽羮羴犟䎗耠耥笹耮耱联㷌垴炠肷胩䏭脌猪脎脒畠脔䐁㬹腖腙腚"
    	],
    	[
    		"99a1",
    		"䐓堺腼膄䐥膓䐭膥埯臁臤艔䒏芦艶苊苘苿䒰荗险榊萅烵葤惣蒈䔄蒾蓡蓸蔐蔸蕒䔻蕯蕰藠䕷虲蚒蚲蛯际螋䘆䘗袮裿褤襇覑𧥧訩訸誔誴豑賔賲贜䞘塟跃䟭仮踺嗘坔蹱嗵躰䠷軎転軤軭軲辷迁迊迌逳駄䢭飠鈓䤞鈨鉘鉫銱銮銿"
    	],
    	[
    		"9a40",
    		"鋣鋫鋳鋴鋽鍃鎄鎭䥅䥑麿鐗匁鐝鐭鐾䥪鑔鑹锭関䦧间阳䧥枠䨤靀䨵鞲韂噔䫤惨颹䬙飱塄餎餙冴餜餷饂饝饢䭰駅䮝騼鬏窃魩鮁鯝鯱鯴䱭鰠㝯𡯂鵉鰺"
    	],
    	[
    		"9aa1",
    		"黾噐鶓鶽鷀鷼银辶鹻麬麱麽黆铜黢黱黸竈齄𠂔𠊷𠎠椚铃妬𠓗塀铁㞹𠗕𠘕𠙶𡚺块煳𠫂𠫍𠮿呪吆𠯋咞𠯻𠰻𠱓𠱥𠱼惧𠲍噺𠲵𠳝𠳭𠵯𠶲𠷈楕鰯螥𠸄𠸎𠻗𠾐𠼭𠹳尠𠾼帋𡁜𡁏𡁶朞𡁻𡂈𡂖㙇𡂿𡃓𡄯𡄻卤蒭𡋣𡍵𡌶讁𡕷𡘙𡟃𡟇乸炻𡠭𡥪"
    	],
    	[
    		"9b40",
    		"𡨭𡩅𡰪𡱰𡲬𡻈拃𡻕𡼕熘桕𢁅槩㛈𢉼𢏗𢏺𢜪𢡱𢥏苽𢥧𢦓𢫕覥𢫨辠𢬎鞸𢬿顇骽𢱌"
    	],
    	[
    		"9b62",
    		"𢲈𢲷𥯨𢴈𢴒𢶷𢶕𢹂𢽴𢿌𣀳𣁦𣌟𣏞徱晈暿𧩹𣕧𣗳爁𤦺矗𣘚𣜖纇𠍆墵朎"
    	],
    	[
    		"9ba1",
    		"椘𣪧𧙗𥿢𣸑𣺹𧗾𢂚䣐䪸𤄙𨪚𤋮𤌍𤀻𤌴𤎖𤩅𠗊凒𠘑妟𡺨㮾𣳿𤐄𤓖垈𤙴㦛𤜯𨗨𩧉㝢𢇃譞𨭎駖𤠒𤣻𤨕爉𤫀𠱸奥𤺥𤾆𠝹軚𥀬劏圿煱𥊙𥐙𣽊𤪧喼𥑆𥑮𦭒釔㑳𥔿𧘲𥕞䜘𥕢𥕦𥟇𤤿𥡝偦㓻𣏌惞𥤃䝼𨥈𥪮𥮉𥰆𡶐垡煑澶𦄂𧰒遖𦆲𤾚譢𦐂𦑊"
    	],
    	[
    		"9c40",
    		"嵛𦯷輶𦒄𡤜諪𤧶𦒈𣿯𦔒䯀𦖿𦚵𢜛鑥𥟡憕娧晉侻嚹𤔡𦛼乪𤤴陖涏𦲽㘘襷𦞙𦡮𦐑𦡞營𦣇筂𩃀𠨑𦤦鄄𦤹穅鷰𦧺騦𦨭㙟𦑩𠀡禃𦨴𦭛崬𣔙菏𦮝䛐𦲤画补𦶮墶"
    	],
    	[
    		"9ca1",
    		"㜜𢖍𧁋𧇍㱔𧊀𧊅銁𢅺𧊋錰𧋦𤧐氹钟𧑐𠻸蠧裵𢤦𨑳𡞱溸𤨪𡠠㦤㚹尐秣䔿暶𩲭𩢤襃𧟌𧡘囖䃟𡘊㦡𣜯𨃨𡏅熭荦𧧝𩆨婧䲷𧂯𨦫𧧽𧨊𧬋𧵦𤅺筃祾𨀉澵𪋟樃𨌘厢𦸇鎿栶靝𨅯𨀣𦦵𡏭𣈯𨁈嶅𨰰𨂃圕頣𨥉嶫𤦈斾槕叒𤪥𣾁㰑朶𨂐𨃴𨄮𡾡𨅏"
    	],
    	[
    		"9d40",
    		"𨆉𨆯𨈚𨌆𨌯𨎊㗊𨑨𨚪䣺揦𨥖砈鉕𨦸䏲𨧧䏟𨧨𨭆𨯔姸𨰉輋𨿅𩃬筑𩄐𩄼㷷𩅞𤫊运犏嚋𩓧𩗩𩖰𩖸𩜲𩣑𩥉𩥪𩧃𩨨𩬎𩵚𩶛纟𩻸𩼣䲤镇𪊓熢𪋿䶑递𪗋䶜𠲜达嗁"
    	],
    	[
    		"9da1",
    		"辺𢒰边𤪓䔉繿潖檱仪㓤𨬬𧢝㜺躀𡟵𨀤𨭬𨮙𧨾𦚯㷫𧙕𣲷𥘵𥥖亚𥺁𦉘嚿𠹭踎孭𣺈𤲞揞拐𡟶𡡻攰嘭𥱊吚𥌑㷆𩶘䱽嘢嘞罉𥻘奵𣵀蝰东𠿪𠵉𣚺脗鵞贘瘻鱅癎瞹鍅吲腈苷嘥脲萘肽嗪祢噃吖𠺝㗎嘅嗱曱𨋢㘭甴嗰喺咗啲𠱁𠲖廐𥅈𠹶𢱢"
    	],
    	[
    		"9e40",
    		"𠺢麫絚嗞𡁵抝靭咔賍燶酶揼掹揾啩𢭃鱲𢺳冚㓟𠶧冧呍唞唓癦踭𦢊疱肶蠄螆裇膶萜𡃁䓬猄𤜆宐茋𦢓噻𢛴𧴯𤆣𧵳𦻐𧊶酰𡇙鈈𣳼𪚩𠺬𠻹牦𡲢䝎𤿂𧿹𠿫䃺"
    	],
    	[
    		"9ea1",
    		"鱝攟𢶠䣳𤟠𩵼𠿬𠸊恢𧖣𠿭"
    	],
    	[
    		"9ead",
    		"𦁈𡆇熣纎鵐业丄㕷嬍沲卧㚬㧜卽㚥𤘘墚𤭮舭呋垪𥪕𠥹"
    	],
    	[
    		"9ec5",
    		"㩒𢑥獴𩺬䴉鯭𣳾𩼰䱛𤾩𩖞𩿞葜𣶶𧊲𦞳𣜠挮紥𣻷𣸬㨪逈勌㹴㙺䗩𠒎癀嫰𠺶硺𧼮墧䂿噼鮋嵴癔𪐴麅䳡痹㟻愙𣃚𤏲"
    	],
    	[
    		"9ef5",
    		"噝𡊩垧𤥣𩸆刴𧂮㖭汊鵼"
    	],
    	[
    		"9f40",
    		"籖鬹埞𡝬屓擓𩓐𦌵𧅤蚭𠴨𦴢𤫢𠵱"
    	],
    	[
    		"9f4f",
    		"凾𡼏嶎霃𡷑麁遌笟鬂峑箣扨挵髿篏鬪籾鬮籂粆鰕篼鬉鼗鰛𤤾齚啳寃俽麘俲剠㸆勑坧偖妷帒韈鶫轜呩鞴饀鞺匬愰"
    	],
    	[
    		"9fa1",
    		"椬叚鰊鴂䰻陁榀傦畆𡝭駚剳"
    	],
    	[
    		"9fae",
    		"酙隁酜"
    	],
    	[
    		"9fb2",
    		"酑𨺗捿𦴣櫊嘑醎畺抅𠏼獏籰𥰡𣳽"
    	],
    	[
    		"9fc1",
    		"𤤙盖鮝个𠳔莾衂"
    	],
    	[
    		"9fc9",
    		"届槀僭坺刟巵从氱𠇲伹咜哚劚趂㗾弌㗳"
    	],
    	[
    		"9fdb",
    		"歒酼龥鮗頮颴骺麨麄煺笔"
    	],
    	[
    		"9fe7",
    		"毺蠘罸"
    	],
    	[
    		"9feb",
    		"嘠𪙊蹷齓"
    	],
    	[
    		"9ff0",
    		"跔蹏鸜踁抂𨍽踨蹵竓𤩷稾磘泪詧瘇"
    	],
    	[
    		"a040",
    		"𨩚鼦泎蟖痃𪊲硓咢贌狢獱謭猂瓱賫𤪻蘯徺袠䒷"
    	],
    	[
    		"a055",
    		"𡠻𦸅"
    	],
    	[
    		"a058",
    		"詾𢔛"
    	],
    	[
    		"a05b",
    		"惽癧髗鵄鍮鮏蟵"
    	],
    	[
    		"a063",
    		"蠏賷猬霡鮰㗖犲䰇籑饊𦅙慙䰄麖慽"
    	],
    	[
    		"a073",
    		"坟慯抦戹拎㩜懢厪𣏵捤栂㗒"
    	],
    	[
    		"a0a1",
    		"嵗𨯂迚𨸹"
    	],
    	[
    		"a0a6",
    		"僙𡵆礆匲阸𠼻䁥"
    	],
    	[
    		"a0ae",
    		"矾"
    	],
    	[
    		"a0b0",
    		"糂𥼚糚稭聦聣絍甅瓲覔舚朌聢𧒆聛瓰脃眤覉𦟌畓𦻑螩蟎臈螌詉貭譃眫瓸蓚㘵榲趦"
    	],
    	[
    		"a0d4",
    		"覩瑨涹蟁𤀑瓧㷛煶悤憜㳑煢恷"
    	],
    	[
    		"a0e2",
    		"罱𨬭牐惩䭾删㰘𣳇𥻗𧙖𥔱𡥄𡋾𩤃𦷜𧂭峁𦆭𨨏𣙷𠃮𦡆𤼎䕢嬟𦍌齐麦𦉫"
    	],
    	[
    		"a3c0",
    		"␀",
    		31,
    		"␡"
    	],
    	[
    		"c6a1",
    		"①",
    		9,
    		"⑴",
    		9,
    		"ⅰ",
    		9,
    		"丶丿亅亠冂冖冫勹匸卩厶夊宀巛⼳广廴彐彡攴无疒癶辵隶¨ˆヽヾゝゞ〃仝々〆〇ー［］✽ぁ",
    		23
    	],
    	[
    		"c740",
    		"す",
    		58,
    		"ァアィイ"
    	],
    	[
    		"c7a1",
    		"ゥ",
    		81,
    		"А",
    		5,
    		"ЁЖ",
    		4
    	],
    	[
    		"c840",
    		"Л",
    		26,
    		"ёж",
    		25,
    		"⇧↸↹㇏𠃌乚𠂊刂䒑"
    	],
    	[
    		"c8a1",
    		"龰冈龱𧘇"
    	],
    	[
    		"c8cd",
    		"￢￤＇＂㈱№℡゛゜⺀⺄⺆⺇⺈⺊⺌⺍⺕⺜⺝⺥⺧⺪⺬⺮⺶⺼⺾⻆⻊⻌⻍⻏⻖⻗⻞⻣"
    	],
    	[
    		"c8f5",
    		"ʃɐɛɔɵœøŋʊɪ"
    	],
    	[
    		"f9fe",
    		"￭"
    	],
    	[
    		"fa40",
    		"𠕇鋛𠗟𣿅蕌䊵珯况㙉𤥂𨧤鍄𡧛苮𣳈砼杄拟𤤳𨦪𠊠𦮳𡌅侫𢓭倈𦴩𧪄𣘀𤪱𢔓倩𠍾徤𠎀𠍇滛𠐟偽儁㑺儎顬㝃萖𤦤𠒇兠𣎴兪𠯿𢃼𠋥𢔰𠖎𣈳𡦃宂蝽𠖳𣲙冲冸"
    	],
    	[
    		"faa1",
    		"鴴凉减凑㳜凓𤪦决凢卂凭菍椾𣜭彻刋刦刼劵剗劔効勅簕蕂勠蘍𦬓包𨫞啉滙𣾀𠥔𣿬匳卄𠯢泋𡜦栛珕恊㺪㣌𡛨燝䒢卭却𨚫卾卿𡖖𡘓矦厓𨪛厠厫厮玧𥝲㽙玜叁叅汉义埾叙㪫𠮏叠𣿫𢶣叶𠱷吓灹唫晗浛呭𦭓𠵴啝咏咤䞦𡜍𠻝㶴𠵍"
    	],
    	[
    		"fb40",
    		"𨦼𢚘啇䳭启琗喆喩嘅𡣗𤀺䕒𤐵暳𡂴嘷曍𣊊暤暭噍噏磱囱鞇叾圀囯园𨭦㘣𡉏坆𤆥汮炋坂㚱𦱾埦𡐖堃𡑔𤍣堦𤯵塜墪㕡壠壜𡈼壻寿坃𪅐𤉸鏓㖡够梦㛃湙"
    	],
    	[
    		"fba1",
    		"𡘾娤啓𡚒蔅姉𠵎𦲁𦴪𡟜姙𡟻𡞲𦶦浱𡠨𡛕姹𦹅媫婣㛦𤦩婷㜈媖瑥嫓𦾡𢕔㶅𡤑㜲𡚸広勐孶斈孼𧨎䀄䡝𠈄寕慠𡨴𥧌𠖥寳宝䴐尅𡭄尓珎尔𡲥𦬨屉䣝岅峩峯嶋𡷹𡸷崐崘嵆𡺤岺巗苼㠭𤤁𢁉𢅳芇㠶㯂帮檊幵幺𤒼𠳓厦亷廐厨𡝱帉廴𨒂"
    	],
    	[
    		"fc40",
    		"廹廻㢠廼栾鐛弍𠇁弢㫞䢮𡌺强𦢈𢏐彘𢑱彣鞽𦹮彲鍀𨨶徧嶶㵟𥉐𡽪𧃸𢙨釖𠊞𨨩怱暅𡡷㥣㷇㘹垐𢞴祱㹀悞悤悳𤦂𤦏𧩓璤僡媠慤萤慂慈𦻒憁凴𠙖憇宪𣾷"
    	],
    	[
    		"fca1",
    		"𢡟懓𨮝𩥝懐㤲𢦀𢣁怣慜攞掋𠄘担𡝰拕𢸍捬𤧟㨗搸揸𡎎𡟼撐澊𢸶頔𤂌𥜝擡擥鑻㩦携㩗敍漖𤨨𤨣斅敭敟𣁾斵𤥀䬷旑䃘𡠩无旣忟𣐀昘𣇷𣇸晄𣆤𣆥晋𠹵晧𥇦晳晴𡸽𣈱𨗴𣇈𥌓矅𢣷馤朂𤎜𤨡㬫槺𣟂杞杧杢𤇍𩃭柗䓩栢湐鈼栁𣏦𦶠桝"
    	],
    	[
    		"fd40",
    		"𣑯槡樋𨫟楳棃𣗍椁椀㴲㨁𣘼㮀枬楡𨩊䋼椶榘㮡𠏉荣傐槹𣙙𢄪橅𣜃檝㯳枱櫈𩆜㰍欝𠤣惞欵歴𢟍溵𣫛𠎵𡥘㝀吡𣭚毡𣻼毜氷𢒋𤣱𦭑汚舦汹𣶼䓅𣶽𤆤𤤌𤤀"
    	],
    	[
    		"fda1",
    		"𣳉㛥㳫𠴲鮃𣇹𢒑羏样𦴥𦶡𦷫涖浜湼漄𤥿𤂅𦹲蔳𦽴凇沜渝萮𨬡港𣸯瑓𣾂秌湏媑𣁋濸㜍澝𣸰滺𡒗𤀽䕕鏰潄潜㵎潴𩅰㴻澟𤅄濓𤂑𤅕𤀹𣿰𣾴𤄿凟𤅖𤅗𤅀𦇝灋灾炧炁烌烕烖烟䄄㷨熴熖𤉷焫煅媈煊煮岜𤍥煏鍢𤋁焬𤑚𤨧𤨢熺𨯨炽爎"
    	],
    	[
    		"fe40",
    		"鑂爕夑鑃爤鍁𥘅爮牀𤥴梽牕牗㹕𣁄栍漽犂猪猫𤠣𨠫䣭𨠄猨献珏玪𠰺𦨮珉瑉𤇢𡛧𤨤昣㛅𤦷𤦍𤧻珷琕椃𤨦琹𠗃㻗瑜𢢭瑠𨺲瑇珤瑶莹瑬㜰瑴鏱樬璂䥓𤪌"
    	],
    	[
    		"fea1",
    		"𤅟𤩹𨮏孆𨰃𡢞瓈𡦈甎瓩甞𨻙𡩋寗𨺬鎅畍畊畧畮𤾂㼄𤴓疎瑝疞疴瘂瘬癑癏癯癶𦏵皐臯㟸𦤑𦤎皡皥皷盌𦾟葢𥂝𥅽𡸜眞眦着撯𥈠睘𣊬瞯𨥤𨥨𡛁矴砉𡍶𤨒棊碯磇磓隥礮𥗠磗礴碱𧘌辸袄𨬫𦂃𢘜禆褀椂禀𥡗禝𧬹礼禩渪𧄦㺨秆𩄍秔"
    	]
    ];

    // Description of supported double byte encodings and aliases.
    // Tables are not require()-d until they are needed to speed up library load.
    // require()-s are direct to support Browserify.

    var dbcsData$1 = {
        
        // == Japanese/ShiftJIS ====================================================
        // All japanese encodings are based on JIS X set of standards:
        // JIS X 0201 - Single-byte encoding of ASCII + ¥ + Kana chars at 0xA1-0xDF.
        // JIS X 0208 - Main set of 6879 characters, placed in 94x94 plane, to be encoded by 2 bytes. 
        //              Has several variations in 1978, 1983, 1990 and 1997.
        // JIS X 0212 - Supplementary plane of 6067 chars in 94x94 plane. 1990. Effectively dead.
        // JIS X 0213 - Extension and modern replacement of 0208 and 0212. Total chars: 11233.
        //              2 planes, first is superset of 0208, second - revised 0212.
        //              Introduced in 2000, revised 2004. Some characters are in Unicode Plane 2 (0x2xxxx)

        // Byte encodings are:
        //  * Shift_JIS: Compatible with 0201, uses not defined chars in top half as lead bytes for double-byte
        //               encoding of 0208. Lead byte ranges: 0x81-0x9F, 0xE0-0xEF; Trail byte ranges: 0x40-0x7E, 0x80-0x9E, 0x9F-0xFC.
        //               Windows CP932 is a superset of Shift_JIS. Some companies added more chars, notably KDDI.
        //  * EUC-JP:    Up to 3 bytes per character. Used mostly on *nixes.
        //               0x00-0x7F       - lower part of 0201
        //               0x8E, 0xA1-0xDF - upper part of 0201
        //               (0xA1-0xFE)x2   - 0208 plane (94x94).
        //               0x8F, (0xA1-0xFE)x2 - 0212 plane (94x94).
        //  * JIS X 208: 7-bit, direct encoding of 0208. Byte ranges: 0x21-0x7E (94 values). Uncommon.
        //               Used as-is in ISO2022 family.
        //  * ISO2022-JP: Stateful encoding, with escape sequences to switch between ASCII, 
        //                0201-1976 Roman, 0208-1978, 0208-1983.
        //  * ISO2022-JP-1: Adds esc seq for 0212-1990.
        //  * ISO2022-JP-2: Adds esc seq for GB2313-1980, KSX1001-1992, ISO8859-1, ISO8859-7.
        //  * ISO2022-JP-3: Adds esc seq for 0201-1976 Kana set, 0213-2000 Planes 1, 2.
        //  * ISO2022-JP-2004: Adds 0213-2004 Plane 1.
        //
        // After JIS X 0213 appeared, Shift_JIS-2004, EUC-JISX0213 and ISO2022-JP-2004 followed, with just changing the planes.
        //
        // Overall, it seems that it's a mess :( http://www8.plala.or.jp/tkubota1/unicode-symbols-map2.html

        'shiftjis': {
            type: '_dbcs',
            table: function() { return require$$0$2 },
            encodeAdd: {'\u00a5': 0x5C, '\u203E': 0x7E},
            encodeSkipVals: [{from: 0xED40, to: 0xF940}],
        },
        'csshiftjis': 'shiftjis',
        'mskanji': 'shiftjis',
        'sjis': 'shiftjis',
        'windows31j': 'shiftjis',
        'ms31j': 'shiftjis',
        'xsjis': 'shiftjis',
        'windows932': 'shiftjis',
        'ms932': 'shiftjis',
        '932': 'shiftjis',
        'cp932': 'shiftjis',

        'eucjp': {
            type: '_dbcs',
            table: function() { return require$$1$2 },
            encodeAdd: {'\u00a5': 0x5C, '\u203E': 0x7E},
        },

        // TODO: KDDI extension to Shift_JIS
        // TODO: IBM CCSID 942 = CP932, but F0-F9 custom chars and other char changes.
        // TODO: IBM CCSID 943 = Shift_JIS = CP932 with original Shift_JIS lower 128 chars.


        // == Chinese/GBK ==========================================================
        // http://en.wikipedia.org/wiki/GBK
        // We mostly implement W3C recommendation: https://www.w3.org/TR/encoding/#gbk-encoder

        // Oldest GB2312 (1981, ~7600 chars) is a subset of CP936
        'gb2312': 'cp936',
        'gb231280': 'cp936',
        'gb23121980': 'cp936',
        'csgb2312': 'cp936',
        'csiso58gb231280': 'cp936',
        'euccn': 'cp936',

        // Microsoft's CP936 is a subset and approximation of GBK.
        'windows936': 'cp936',
        'ms936': 'cp936',
        '936': 'cp936',
        'cp936': {
            type: '_dbcs',
            table: function() { return require$$2$1 },
        },

        // GBK (~22000 chars) is an extension of CP936 that added user-mapped chars and some other.
        'gbk': {
            type: '_dbcs',
            table: function() { return require$$2$1.concat(require$$3$2) },
        },
        'xgbk': 'gbk',
        'isoir58': 'gbk',

        // GB18030 is an algorithmic extension of GBK.
        // Main source: https://www.w3.org/TR/encoding/#gbk-encoder
        // http://icu-project.org/docs/papers/gb18030.html
        // http://source.icu-project.org/repos/icu/data/trunk/charset/data/xml/gb-18030-2000.xml
        // http://www.khngai.com/chinese/charmap/tblgbk.php?page=0
        'gb18030': {
            type: '_dbcs',
            table: function() { return require$$2$1.concat(require$$3$2) },
            gb18030: function() { return require$$4$2 },
            encodeSkipVals: [0x80],
            encodeAdd: {'€': 0xA2E3},
        },

        'chinese': 'gb18030',


        // == Korean ===============================================================
        // EUC-KR, KS_C_5601 and KS X 1001 are exactly the same.
        'windows949': 'cp949',
        'ms949': 'cp949',
        '949': 'cp949',
        'cp949': {
            type: '_dbcs',
            table: function() { return require$$5$1 },
        },

        'cseuckr': 'cp949',
        'csksc56011987': 'cp949',
        'euckr': 'cp949',
        'isoir149': 'cp949',
        'korean': 'cp949',
        'ksc56011987': 'cp949',
        'ksc56011989': 'cp949',
        'ksc5601': 'cp949',


        // == Big5/Taiwan/Hong Kong ================================================
        // There are lots of tables for Big5 and cp950. Please see the following links for history:
        // http://moztw.org/docs/big5/  http://www.haible.de/bruno/charsets/conversion-tables/Big5.html
        // Variations, in roughly number of defined chars:
        //  * Windows CP 950: Microsoft variant of Big5. Canonical: http://www.unicode.org/Public/MAPPINGS/VENDORS/MICSFT/WINDOWS/CP950.TXT
        //  * Windows CP 951: Microsoft variant of Big5-HKSCS-2001. Seems to be never public. http://me.abelcheung.org/articles/research/what-is-cp951/
        //  * Big5-2003 (Taiwan standard) almost superset of cp950.
        //  * Unicode-at-on (UAO) / Mozilla 1.8. Falling out of use on the Web. Not supported by other browsers.
        //  * Big5-HKSCS (-2001, -2004, -2008). Hong Kong standard. 
        //    many unicode code points moved from PUA to Supplementary plane (U+2XXXX) over the years.
        //    Plus, it has 4 combining sequences.
        //    Seems that Mozilla refused to support it for 10 yrs. https://bugzilla.mozilla.org/show_bug.cgi?id=162431 https://bugzilla.mozilla.org/show_bug.cgi?id=310299
        //    because big5-hkscs is the only encoding to include astral characters in non-algorithmic way.
        //    Implementations are not consistent within browsers; sometimes labeled as just big5.
        //    MS Internet Explorer switches from big5 to big5-hkscs when a patch applied.
        //    Great discussion & recap of what's going on https://bugzilla.mozilla.org/show_bug.cgi?id=912470#c31
        //    In the encoder, it might make sense to support encoding old PUA mappings to Big5 bytes seq-s.
        //    Official spec: http://www.ogcio.gov.hk/en/business/tech_promotion/ccli/terms/doc/2003cmp_2008.txt
        //                   http://www.ogcio.gov.hk/tc/business/tech_promotion/ccli/terms/doc/hkscs-2008-big5-iso.txt
        // 
        // Current understanding of how to deal with Big5(-HKSCS) is in the Encoding Standard, http://encoding.spec.whatwg.org/#big5-encoder
        // Unicode mapping (http://www.unicode.org/Public/MAPPINGS/OBSOLETE/EASTASIA/OTHER/BIG5.TXT) is said to be wrong.

        'windows950': 'cp950',
        'ms950': 'cp950',
        '950': 'cp950',
        'cp950': {
            type: '_dbcs',
            table: function() { return require$$6$1 },
        },

        // Big5 has many variations and is an extension of cp950. We use Encoding Standard's as a consensus.
        'big5': 'big5hkscs',
        'big5hkscs': {
            type: '_dbcs',
            table: function() { return require$$6$1.concat(require$$7$1) },
            encodeSkipVals: [0xa2cc],
        },

        'cnbig5': 'big5hkscs',
        'csbig5': 'big5hkscs',
        'xxbig5': 'big5hkscs',
    };

    (function (exports) {

    // Update this array if you add/rename/remove files in this directory.
    // We support Browserify by skipping automatic module discovery and requiring modules directly.
    var modules = [
        internal$1,
        utf16$1,
        utf7$1,
        sbcsCodec$1,
        sbcsData$1,
        sbcsDataGenerated$1,
        dbcsCodec$1,
        dbcsData$1,
    ];

    // Put all encoding/alias/codec definitions to single object and export it. 
    for (var i = 0; i < modules.length; i++) {
        var module = modules[i];
        for (var enc in module)
            if (Object.prototype.hasOwnProperty.call(module, enc))
                exports[enc] = module[enc];
    }
    }(encodings$1));

    var Buffer$b = require$$0__default$2["default"].Buffer,
        Transform$1 = require$$0__default$1["default"].Transform;


    // == Exports ==================================================================
    var streams$1 = function(iconv) {
        
        // Additional Public API.
        iconv.encodeStream = function encodeStream(encoding, options) {
            return new IconvLiteEncoderStream$1(iconv.getEncoder(encoding, options), options);
        };

        iconv.decodeStream = function decodeStream(encoding, options) {
            return new IconvLiteDecoderStream$1(iconv.getDecoder(encoding, options), options);
        };

        iconv.supportsStreams = true;


        // Not published yet.
        iconv.IconvLiteEncoderStream = IconvLiteEncoderStream$1;
        iconv.IconvLiteDecoderStream = IconvLiteDecoderStream$1;
        iconv._collect = IconvLiteDecoderStream$1.prototype.collect;
    };


    // == Encoder stream =======================================================
    function IconvLiteEncoderStream$1(conv, options) {
        this.conv = conv;
        options = options || {};
        options.decodeStrings = false; // We accept only strings, so we don't need to decode them.
        Transform$1.call(this, options);
    }

    IconvLiteEncoderStream$1.prototype = Object.create(Transform$1.prototype, {
        constructor: { value: IconvLiteEncoderStream$1 }
    });

    IconvLiteEncoderStream$1.prototype._transform = function(chunk, encoding, done) {
        if (typeof chunk != 'string')
            return done(new Error("Iconv encoding stream needs strings as its input."));
        try {
            var res = this.conv.write(chunk);
            if (res && res.length) this.push(res);
            done();
        }
        catch (e) {
            done(e);
        }
    };

    IconvLiteEncoderStream$1.prototype._flush = function(done) {
        try {
            var res = this.conv.end();
            if (res && res.length) this.push(res);
            done();
        }
        catch (e) {
            done(e);
        }
    };

    IconvLiteEncoderStream$1.prototype.collect = function(cb) {
        var chunks = [];
        this.on('error', cb);
        this.on('data', function(chunk) { chunks.push(chunk); });
        this.on('end', function() {
            cb(null, Buffer$b.concat(chunks));
        });
        return this;
    };


    // == Decoder stream =======================================================
    function IconvLiteDecoderStream$1(conv, options) {
        this.conv = conv;
        options = options || {};
        options.encoding = this.encoding = 'utf8'; // We output strings.
        Transform$1.call(this, options);
    }

    IconvLiteDecoderStream$1.prototype = Object.create(Transform$1.prototype, {
        constructor: { value: IconvLiteDecoderStream$1 }
    });

    IconvLiteDecoderStream$1.prototype._transform = function(chunk, encoding, done) {
        if (!Buffer$b.isBuffer(chunk))
            return done(new Error("Iconv decoding stream needs buffers as its input."));
        try {
            var res = this.conv.write(chunk);
            if (res && res.length) this.push(res, this.encoding);
            done();
        }
        catch (e) {
            done(e);
        }
    };

    IconvLiteDecoderStream$1.prototype._flush = function(done) {
        try {
            var res = this.conv.end();
            if (res && res.length) this.push(res, this.encoding);                
            done();
        }
        catch (e) {
            done(e);
        }
    };

    IconvLiteDecoderStream$1.prototype.collect = function(cb) {
        var res = '';
        this.on('error', cb);
        this.on('data', function(chunk) { res += chunk; });
        this.on('end', function() {
            cb(null, res);
        });
        return this;
    };

    var Buffer$a = require$$0__default$2["default"].Buffer;
    // Note: not polyfilled with safer-buffer on a purpose, as overrides Buffer

    // == Extend Node primitives to use iconv-lite =================================

    var extendNode$1 = function (iconv) {
        var original = undefined; // Place to keep original methods.

        // Node authors rewrote Buffer internals to make it compatible with
        // Uint8Array and we cannot patch key functions since then.
        // Note: this does use older Buffer API on a purpose
        iconv.supportsNodeEncodingsExtension = !(Buffer$a.from || new Buffer$a(0) instanceof Uint8Array);

        iconv.extendNodeEncodings = function extendNodeEncodings() {
            if (original) return;
            original = {};

            if (!iconv.supportsNodeEncodingsExtension) {
                console.error("ACTION NEEDED: require('iconv-lite').extendNodeEncodings() is not supported in your version of Node");
                console.error("See more info at https://github.com/ashtuchkin/iconv-lite/wiki/Node-v4-compatibility");
                return;
            }

            var nodeNativeEncodings = {
                'hex': true, 'utf8': true, 'utf-8': true, 'ascii': true, 'binary': true, 
                'base64': true, 'ucs2': true, 'ucs-2': true, 'utf16le': true, 'utf-16le': true,
            };

            Buffer$a.isNativeEncoding = function(enc) {
                return enc && nodeNativeEncodings[enc.toLowerCase()];
            };

            // -- SlowBuffer -----------------------------------------------------------
            var SlowBuffer = require$$0__default$2["default"].SlowBuffer;

            original.SlowBufferToString = SlowBuffer.prototype.toString;
            SlowBuffer.prototype.toString = function(encoding, start, end) {
                encoding = String(encoding || 'utf8').toLowerCase();

                // Use native conversion when possible
                if (Buffer$a.isNativeEncoding(encoding))
                    return original.SlowBufferToString.call(this, encoding, start, end);

                // Otherwise, use our decoding method.
                if (typeof start == 'undefined') start = 0;
                if (typeof end == 'undefined') end = this.length;
                return iconv.decode(this.slice(start, end), encoding);
            };

            original.SlowBufferWrite = SlowBuffer.prototype.write;
            SlowBuffer.prototype.write = function(string, offset, length, encoding) {
                // Support both (string, offset, length, encoding)
                // and the legacy (string, encoding, offset, length)
                if (isFinite(offset)) {
                    if (!isFinite(length)) {
                        encoding = length;
                        length = undefined;
                    }
                } else {  // legacy
                    var swap = encoding;
                    encoding = offset;
                    offset = length;
                    length = swap;
                }

                offset = +offset || 0;
                var remaining = this.length - offset;
                if (!length) {
                    length = remaining;
                } else {
                    length = +length;
                    if (length > remaining) {
                        length = remaining;
                    }
                }
                encoding = String(encoding || 'utf8').toLowerCase();

                // Use native conversion when possible
                if (Buffer$a.isNativeEncoding(encoding))
                    return original.SlowBufferWrite.call(this, string, offset, length, encoding);

                if (string.length > 0 && (length < 0 || offset < 0))
                    throw new RangeError('attempt to write beyond buffer bounds');

                // Otherwise, use our encoding method.
                var buf = iconv.encode(string, encoding);
                if (buf.length < length) length = buf.length;
                buf.copy(this, offset, 0, length);
                return length;
            };

            // -- Buffer ---------------------------------------------------------------

            original.BufferIsEncoding = Buffer$a.isEncoding;
            Buffer$a.isEncoding = function(encoding) {
                return Buffer$a.isNativeEncoding(encoding) || iconv.encodingExists(encoding);
            };

            original.BufferByteLength = Buffer$a.byteLength;
            Buffer$a.byteLength = SlowBuffer.byteLength = function(str, encoding) {
                encoding = String(encoding || 'utf8').toLowerCase();

                // Use native conversion when possible
                if (Buffer$a.isNativeEncoding(encoding))
                    return original.BufferByteLength.call(this, str, encoding);

                // Slow, I know, but we don't have a better way yet.
                return iconv.encode(str, encoding).length;
            };

            original.BufferToString = Buffer$a.prototype.toString;
            Buffer$a.prototype.toString = function(encoding, start, end) {
                encoding = String(encoding || 'utf8').toLowerCase();

                // Use native conversion when possible
                if (Buffer$a.isNativeEncoding(encoding))
                    return original.BufferToString.call(this, encoding, start, end);

                // Otherwise, use our decoding method.
                if (typeof start == 'undefined') start = 0;
                if (typeof end == 'undefined') end = this.length;
                return iconv.decode(this.slice(start, end), encoding);
            };

            original.BufferWrite = Buffer$a.prototype.write;
            Buffer$a.prototype.write = function(string, offset, length, encoding) {
                var _offset = offset, _length = length, _encoding = encoding;
                // Support both (string, offset, length, encoding)
                // and the legacy (string, encoding, offset, length)
                if (isFinite(offset)) {
                    if (!isFinite(length)) {
                        encoding = length;
                        length = undefined;
                    }
                } else {  // legacy
                    var swap = encoding;
                    encoding = offset;
                    offset = length;
                    length = swap;
                }

                encoding = String(encoding || 'utf8').toLowerCase();

                // Use native conversion when possible
                if (Buffer$a.isNativeEncoding(encoding))
                    return original.BufferWrite.call(this, string, _offset, _length, _encoding);

                offset = +offset || 0;
                var remaining = this.length - offset;
                if (!length) {
                    length = remaining;
                } else {
                    length = +length;
                    if (length > remaining) {
                        length = remaining;
                    }
                }

                if (string.length > 0 && (length < 0 || offset < 0))
                    throw new RangeError('attempt to write beyond buffer bounds');

                // Otherwise, use our encoding method.
                var buf = iconv.encode(string, encoding);
                if (buf.length < length) length = buf.length;
                buf.copy(this, offset, 0, length);
                return length;

                // TODO: Set _charsWritten.
            };


            // -- Readable -------------------------------------------------------------
            if (iconv.supportsStreams) {
                var Readable = require$$0__default$1["default"].Readable;

                original.ReadableSetEncoding = Readable.prototype.setEncoding;
                Readable.prototype.setEncoding = function setEncoding(enc, options) {
                    // Use our own decoder, it has the same interface.
                    // We cannot use original function as it doesn't handle BOM-s.
                    this._readableState.decoder = iconv.getDecoder(enc, options);
                    this._readableState.encoding = enc;
                };

                Readable.prototype.collect = iconv._collect;
            }
        };

        // Remove iconv-lite Node primitive extensions.
        iconv.undoExtendNodeEncodings = function undoExtendNodeEncodings() {
            if (!iconv.supportsNodeEncodingsExtension)
                return;
            if (!original)
                throw new Error("require('iconv-lite').undoExtendNodeEncodings(): Nothing to undo; extendNodeEncodings() is not called.")

            delete Buffer$a.isNativeEncoding;

            var SlowBuffer = require$$0__default$2["default"].SlowBuffer;

            SlowBuffer.prototype.toString = original.SlowBufferToString;
            SlowBuffer.prototype.write = original.SlowBufferWrite;

            Buffer$a.isEncoding = original.BufferIsEncoding;
            Buffer$a.byteLength = original.BufferByteLength;
            Buffer$a.prototype.toString = original.BufferToString;
            Buffer$a.prototype.write = original.BufferWrite;

            if (iconv.supportsStreams) {
                var Readable = require$$0__default$1["default"].Readable;

                Readable.prototype.setEncoding = original.ReadableSetEncoding;
                delete Readable.prototype.collect;
            }

            original = undefined;
        };
    };

    (function (module) {

    // Some environments don't have global Buffer (e.g. React Native).
    // Solution would be installing npm modules "buffer" and "stream" explicitly.
    var Buffer = safer_1$1.Buffer;

    var bomHandling = bomHandling$1,
        iconv = module.exports;

    // All codecs and aliases are kept here, keyed by encoding name/alias.
    // They are lazy loaded in `iconv.getCodec` from `encodings/index.js`.
    iconv.encodings = null;

    // Characters emitted in case of error.
    iconv.defaultCharUnicode = '�';
    iconv.defaultCharSingleByte = '?';

    // Public API.
    iconv.encode = function encode(str, encoding, options) {
        str = "" + (str || ""); // Ensure string.

        var encoder = iconv.getEncoder(encoding, options);

        var res = encoder.write(str);
        var trail = encoder.end();
        
        return (trail && trail.length > 0) ? Buffer.concat([res, trail]) : res;
    };

    iconv.decode = function decode(buf, encoding, options) {
        if (typeof buf === 'string') {
            if (!iconv.skipDecodeWarning) {
                console.error('Iconv-lite warning: decode()-ing strings is deprecated. Refer to https://github.com/ashtuchkin/iconv-lite/wiki/Use-Buffers-when-decoding');
                iconv.skipDecodeWarning = true;
            }

            buf = Buffer.from("" + (buf || ""), "binary"); // Ensure buffer.
        }

        var decoder = iconv.getDecoder(encoding, options);

        var res = decoder.write(buf);
        var trail = decoder.end();

        return trail ? (res + trail) : res;
    };

    iconv.encodingExists = function encodingExists(enc) {
        try {
            iconv.getCodec(enc);
            return true;
        } catch (e) {
            return false;
        }
    };

    // Legacy aliases to convert functions
    iconv.toEncoding = iconv.encode;
    iconv.fromEncoding = iconv.decode;

    // Search for a codec in iconv.encodings. Cache codec data in iconv._codecDataCache.
    iconv._codecDataCache = {};
    iconv.getCodec = function getCodec(encoding) {
        if (!iconv.encodings)
            iconv.encodings = encodings$1; // Lazy load all encoding definitions.
        
        // Canonicalize encoding name: strip all non-alphanumeric chars and appended year.
        var enc = iconv._canonicalizeEncoding(encoding);

        // Traverse iconv.encodings to find actual codec.
        var codecOptions = {};
        while (true) {
            var codec = iconv._codecDataCache[enc];
            if (codec)
                return codec;

            var codecDef = iconv.encodings[enc];

            switch (typeof codecDef) {
                case "string": // Direct alias to other encoding.
                    enc = codecDef;
                    break;

                case "object": // Alias with options. Can be layered.
                    for (var key in codecDef)
                        codecOptions[key] = codecDef[key];

                    if (!codecOptions.encodingName)
                        codecOptions.encodingName = enc;
                    
                    enc = codecDef.type;
                    break;

                case "function": // Codec itself.
                    if (!codecOptions.encodingName)
                        codecOptions.encodingName = enc;

                    // The codec function must load all tables and return object with .encoder and .decoder methods.
                    // It'll be called only once (for each different options object).
                    codec = new codecDef(codecOptions, iconv);

                    iconv._codecDataCache[codecOptions.encodingName] = codec; // Save it to be reused later.
                    return codec;

                default:
                    throw new Error("Encoding not recognized: '" + encoding + "' (searched as: '"+enc+"')");
            }
        }
    };

    iconv._canonicalizeEncoding = function(encoding) {
        // Canonicalize encoding name: strip all non-alphanumeric chars and appended year.
        return (''+encoding).toLowerCase().replace(/:\d{4}$|[^0-9a-z]/g, "");
    };

    iconv.getEncoder = function getEncoder(encoding, options) {
        var codec = iconv.getCodec(encoding),
            encoder = new codec.encoder(options, codec);

        if (codec.bomAware && options && options.addBOM)
            encoder = new bomHandling.PrependBOM(encoder, options);

        return encoder;
    };

    iconv.getDecoder = function getDecoder(encoding, options) {
        var codec = iconv.getCodec(encoding),
            decoder = new codec.decoder(options, codec);

        if (codec.bomAware && !(options && options.stripBOM === false))
            decoder = new bomHandling.StripBOM(decoder, options);

        return decoder;
    };


    // Load extensions in Node. All of them are omitted in Browserify build via 'browser' field in package.json.
    var nodeVer = typeof process !== 'undefined' && process.versions && process.versions.node;
    if (nodeVer) {

        // Load streaming support in Node v0.10+
        var nodeVerArr = nodeVer.split(".").map(Number);
        if (nodeVerArr[0] > 0 || nodeVerArr[1] >= 10) {
            streams$1(iconv);
        }

        // Load Node primitive extensions.
        extendNode$1(iconv);
    }
    }(lib$1));

    var tmp$1 = {};

    var isWindows$2 = process.platform === 'win32';
    var trailingSlashRe$1 = isWindows$2 ? /[^:]\\$/ : /.\/$/;

    // https://github.com/nodejs/node/blob/3e7a14381497a3b73dda68d05b5130563cdab420/lib/os.js#L25-L43
    var osTmpdir$1 = function () {
    	var path;

    	if (isWindows$2) {
    		path = process.env.TEMP ||
    			process.env.TMP ||
    			(process.env.SystemRoot || process.env.windir) + '\\temp';
    	} else {
    		path = process.env.TMPDIR ||
    			process.env.TMP ||
    			process.env.TEMP ||
    			'/tmp';
    	}

    	if (trailingSlashRe$1.test(path)) {
    		path = path.slice(0, -1);
    	}

    	return path;
    };

    /*!
     * Tmp
     *
     * Copyright (c) 2011-2017 KARASZI Istvan <github@spam.raszi.hu>
     *
     * MIT Licensed
     */

    /*
     * Module dependencies.
     */
    const fs$5 = require$$0__default$6["default"];
    const path$5 = path__default["default"];
    const crypto$1 = require$$2__default$2["default"];
    const osTmpDir$1 = osTmpdir$1;
    const _c$1 = process.binding('constants');

    /*
     * The working inner variables.
     */
    const
      /**
       * The temporary directory.
       * @type {string}
       */
      tmpDir$1 = osTmpDir$1(),

      // the random characters to choose from
      RANDOM_CHARS$1 = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz',

      TEMPLATE_PATTERN$1 = /XXXXXX/,

      DEFAULT_TRIES$1 = 3,

      CREATE_FLAGS$1 = (_c$1.O_CREAT || _c$1.fs.O_CREAT) | (_c$1.O_EXCL || _c$1.fs.O_EXCL) | (_c$1.O_RDWR || _c$1.fs.O_RDWR),

      EBADF$1 = _c$1.EBADF || _c$1.os.errno.EBADF,
      ENOENT$1 = _c$1.ENOENT || _c$1.os.errno.ENOENT,

      DIR_MODE$1 = 448 /* 0o700 */,
      FILE_MODE$1 = 384 /* 0o600 */,

      // this will hold the objects need to be removed on exit
      _removeObjects$1 = [];

    var
      _gracefulCleanup$1 = false,
      _uncaughtException$1 = false;

    /**
     * Random name generator based on crypto.
     * Adapted from http://blog.tompawlak.org/how-to-generate-random-values-nodejs-javascript
     *
     * @param {number} howMany
     * @returns {string} the generated random name
     * @private
     */
    function _randomChars$1(howMany) {
      var
        value = [],
        rnd = null;

      // make sure that we do not fail because we ran out of entropy
      try {
        rnd = crypto$1.randomBytes(howMany);
      } catch (e) {
        rnd = crypto$1.pseudoRandomBytes(howMany);
      }

      for (var i = 0; i < howMany; i++) {
        value.push(RANDOM_CHARS$1[rnd[i] % RANDOM_CHARS$1.length]);
      }

      return value.join('');
    }

    /**
     * Checks whether the `obj` parameter is defined or not.
     *
     * @param {Object} obj
     * @returns {boolean} true if the object is undefined
     * @private
     */
    function _isUndefined$1(obj) {
      return typeof obj === 'undefined';
    }

    /**
     * Parses the function arguments.
     *
     * This function helps to have optional arguments.
     *
     * @param {(Options|Function)} options
     * @param {Function} callback
     * @returns {Array} parsed arguments
     * @private
     */
    function _parseArguments$1(options, callback) {
      if (typeof options == 'function') {
        return [callback || {}, options];
      }

      if (_isUndefined$1(options)) {
        return [{}, callback];
      }

      return [options, callback];
    }

    /**
     * Generates a new temporary name.
     *
     * @param {Object} opts
     * @returns {string} the new random name according to opts
     * @private
     */
    function _generateTmpName$1(opts) {
      if (opts.name) {
        return path$5.join(opts.dir || tmpDir$1, opts.name);
      }

      // mkstemps like template
      if (opts.template) {
        return opts.template.replace(TEMPLATE_PATTERN$1, _randomChars$1(6));
      }

      // prefix and postfix
      const name = [
        opts.prefix || 'tmp-',
        process.pid,
        _randomChars$1(12),
        opts.postfix || ''
      ].join('');

      return path$5.join(opts.dir || tmpDir$1, name);
    }

    /**
     * Gets a temporary file name.
     *
     * @param {(Options|tmpNameCallback)} options options or callback
     * @param {?tmpNameCallback} callback the callback function
     */
    function tmpName$1(options, callback) {
      var
        args = _parseArguments$1(options, callback),
        opts = args[0],
        cb = args[1],
        tries = opts.name ? 1 : opts.tries || DEFAULT_TRIES$1;

      if (isNaN(tries) || tries < 0)
        return cb(new Error('Invalid tries'));

      if (opts.template && !opts.template.match(TEMPLATE_PATTERN$1))
        return cb(new Error('Invalid template provided'));

      (function _getUniqueName() {
        const name = _generateTmpName$1(opts);

        // check whether the path exists then retry if needed
        fs$5.stat(name, function (err) {
          if (!err) {
            if (tries-- > 0) return _getUniqueName();

            return cb(new Error('Could not get a unique tmp filename, max tries reached ' + name));
          }

          cb(null, name);
        });
      }());
    }

    /**
     * Synchronous version of tmpName.
     *
     * @param {Object} options
     * @returns {string} the generated random name
     * @throws {Error} if the options are invalid or could not generate a filename
     */
    function tmpNameSync$1(options) {
      var
        args = _parseArguments$1(options),
        opts = args[0],
        tries = opts.name ? 1 : opts.tries || DEFAULT_TRIES$1;

      if (isNaN(tries) || tries < 0)
        throw new Error('Invalid tries');

      if (opts.template && !opts.template.match(TEMPLATE_PATTERN$1))
        throw new Error('Invalid template provided');

      do {
        const name = _generateTmpName$1(opts);
        try {
          fs$5.statSync(name);
        } catch (e) {
          return name;
        }
      } while (tries-- > 0);

      throw new Error('Could not get a unique tmp filename, max tries reached');
    }

    /**
     * Creates and opens a temporary file.
     *
     * @param {(Options|fileCallback)} options the config options or the callback function
     * @param {?fileCallback} callback
     */
    function file$1(options, callback) {
      var
        args = _parseArguments$1(options, callback),
        opts = args[0],
        cb = args[1];

      opts.postfix = (_isUndefined$1(opts.postfix)) ? '.tmp' : opts.postfix;

      // gets a temporary filename
      tmpName$1(opts, function _tmpNameCreated(err, name) {
        if (err) return cb(err);

        // create and open the file
        fs$5.open(name, CREATE_FLAGS$1, opts.mode || FILE_MODE$1, function _fileCreated(err, fd) {
          if (err) return cb(err);

          if (opts.discardDescriptor) {
            return fs$5.close(fd, function _discardCallback(err) {
              if (err) {
                // Low probability, and the file exists, so this could be
                // ignored.  If it isn't we certainly need to unlink the
                // file, and if that fails too its error is more
                // important.
                try {
                  fs$5.unlinkSync(name);
                } catch (e) {
                  if (!isENOENT$1(e)) {
                    err = e;
                  }
                }
                return cb(err);
              }
              cb(null, name, undefined, _prepareTmpFileRemoveCallback$1(name, -1, opts));
            });
          }
          if (opts.detachDescriptor) {
            return cb(null, name, fd, _prepareTmpFileRemoveCallback$1(name, -1, opts));
          }
          cb(null, name, fd, _prepareTmpFileRemoveCallback$1(name, fd, opts));
        });
      });
    }

    /**
     * Synchronous version of file.
     *
     * @param {Options} options
     * @returns {FileSyncObject} object consists of name, fd and removeCallback
     * @throws {Error} if cannot create a file
     */
    function fileSync$1(options) {
      var
        args = _parseArguments$1(options),
        opts = args[0];

      opts.postfix = opts.postfix || '.tmp';

      const discardOrDetachDescriptor = opts.discardDescriptor || opts.detachDescriptor;
      const name = tmpNameSync$1(opts);
      var fd = fs$5.openSync(name, CREATE_FLAGS$1, opts.mode || FILE_MODE$1);
      if (opts.discardDescriptor) {
        fs$5.closeSync(fd); 
        fd = undefined;
      }

      return {
        name: name,
        fd: fd,
        removeCallback: _prepareTmpFileRemoveCallback$1(name, discardOrDetachDescriptor ? -1 : fd, opts)
      };
    }

    /**
     * Removes files and folders in a directory recursively.
     *
     * @param {string} root
     * @private
     */
    function _rmdirRecursiveSync$1(root) {
      const dirs = [root];

      do {
        var
          dir = dirs.pop(),
          deferred = false,
          files = fs$5.readdirSync(dir);

        for (var i = 0, length = files.length; i < length; i++) {
          var
            file = path$5.join(dir, files[i]),
            stat = fs$5.lstatSync(file); // lstat so we don't recurse into symlinked directories

          if (stat.isDirectory()) {
            if (!deferred) {
              deferred = true;
              dirs.push(dir);
            }
            dirs.push(file);
          } else {
            fs$5.unlinkSync(file);
          }
        }

        if (!deferred) {
          fs$5.rmdirSync(dir);
        }
      } while (dirs.length !== 0);
    }

    /**
     * Creates a temporary directory.
     *
     * @param {(Options|dirCallback)} options the options or the callback function
     * @param {?dirCallback} callback
     */
    function dir$1(options, callback) {
      var
        args = _parseArguments$1(options, callback),
        opts = args[0],
        cb = args[1];

      // gets a temporary filename
      tmpName$1(opts, function _tmpNameCreated(err, name) {
        if (err) return cb(err);

        // create the directory
        fs$5.mkdir(name, opts.mode || DIR_MODE$1, function _dirCreated(err) {
          if (err) return cb(err);

          cb(null, name, _prepareTmpDirRemoveCallback$1(name, opts));
        });
      });
    }

    /**
     * Synchronous version of dir.
     *
     * @param {Options} options
     * @returns {DirSyncObject} object consists of name and removeCallback
     * @throws {Error} if it cannot create a directory
     */
    function dirSync$1(options) {
      var
        args = _parseArguments$1(options),
        opts = args[0];

      const name = tmpNameSync$1(opts);
      fs$5.mkdirSync(name, opts.mode || DIR_MODE$1);

      return {
        name: name,
        removeCallback: _prepareTmpDirRemoveCallback$1(name, opts)
      };
    }

    /**
     * Prepares the callback for removal of the temporary file.
     *
     * @param {string} name the path of the file
     * @param {number} fd file descriptor
     * @param {Object} opts
     * @returns {fileCallback}
     * @private
     */
    function _prepareTmpFileRemoveCallback$1(name, fd, opts) {
      const removeCallback = _prepareRemoveCallback$1(function _removeCallback(fdPath) {
        try {
          if (0 <= fdPath[0]) {
            fs$5.closeSync(fdPath[0]);
          }
        }
        catch (e) {
          // under some node/windows related circumstances, a temporary file
          // may have not be created as expected or the file was already closed
          // by the user, in which case we will simply ignore the error
          if (!isEBADF$1(e) && !isENOENT$1(e)) {
            // reraise any unanticipated error
            throw e;
          }
        }
        try {
          fs$5.unlinkSync(fdPath[1]);
        }
        catch (e) {
          if (!isENOENT$1(e)) {
            // reraise any unanticipated error
            throw e;
          }
        }
      }, [fd, name]);

      if (!opts.keep) {
        _removeObjects$1.unshift(removeCallback);
      }

      return removeCallback;
    }

    /**
     * Prepares the callback for removal of the temporary directory.
     *
     * @param {string} name
     * @param {Object} opts
     * @returns {Function} the callback
     * @private
     */
    function _prepareTmpDirRemoveCallback$1(name, opts) {
      const removeFunction = opts.unsafeCleanup ? _rmdirRecursiveSync$1 : fs$5.rmdirSync.bind(fs$5);
      const removeCallback = _prepareRemoveCallback$1(removeFunction, name);

      if (!opts.keep) {
        _removeObjects$1.unshift(removeCallback);
      }

      return removeCallback;
    }

    /**
     * Creates a guarded function wrapping the removeFunction call.
     *
     * @param {Function} removeFunction
     * @param {Object} arg
     * @returns {Function}
     * @private
     */
    function _prepareRemoveCallback$1(removeFunction, arg) {
      var called = false;

      return function _cleanupCallback(next) {
        if (!called) {
          const index = _removeObjects$1.indexOf(_cleanupCallback);
          if (index >= 0) {
            _removeObjects$1.splice(index, 1);
          }

          called = true;
          removeFunction(arg);
        }

        if (next) next(null);
      };
    }

    /**
     * The garbage collector.
     *
     * @private
     */
    function _garbageCollector$1() {
      if (_uncaughtException$1 && !_gracefulCleanup$1) {
        return;
      }

      // the function being called removes itself from _removeObjects,
      // loop until _removeObjects is empty
      while (_removeObjects$1.length) {
        try {
          _removeObjects$1[0].call(null);
        } catch (e) {
          // already removed?
        }
      }
    }

    /**
     * Helper for testing against EBADF to compensate changes made to Node 7.x under Windows.
     */
    function isEBADF$1(error) {
      return isExpectedError$1(error, -EBADF$1, 'EBADF');
    }

    /**
     * Helper for testing against ENOENT to compensate changes made to Node 7.x under Windows.
     */
    function isENOENT$1(error) {
      return isExpectedError$1(error, -ENOENT$1, 'ENOENT');
    }

    /**
     * Helper to determine whether the expected error code matches the actual code and errno,
     * which will differ between the supported node versions.
     *
     * - Node >= 7.0:
     *   error.code {String}
     *   error.errno {String|Number} any numerical value will be negated
     *
     * - Node >= 6.0 < 7.0:
     *   error.code {String}
     *   error.errno {Number} negated
     *
     * - Node >= 4.0 < 6.0: introduces SystemError
     *   error.code {String}
     *   error.errno {Number} negated
     *
     * - Node >= 0.10 < 4.0:
     *   error.code {Number} negated
     *   error.errno n/a
     */
    function isExpectedError$1(error, code, errno) {
      return error.code == code || error.code == errno;
    }

    /**
     * Sets the graceful cleanup.
     *
     * Also removes the created files and directories when an uncaught exception occurs.
     */
    function setGracefulCleanup$1() {
      _gracefulCleanup$1 = true;
    }

    const version$3 = process.versions.node.split('.').map(function (value) {
      return parseInt(value, 10);
    });

    if (version$3[0] === 0 && (version$3[1] < 9 || version$3[1] === 9 && version$3[2] < 5)) {
      process.addListener('uncaughtException', function _uncaughtExceptionThrown(err) {
        _uncaughtException$1 = true;
        _garbageCollector$1();

        throw err;
      });
    }

    process.addListener('exit', function _exit(code) {
      if (code) _uncaughtException$1 = true;
      _garbageCollector$1();
    });

    /**
     * Configuration options.
     *
     * @typedef {Object} Options
     * @property {?number} tries the number of tries before give up the name generation
     * @property {?string} template the "mkstemp" like filename template
     * @property {?string} name fix name
     * @property {?string} dir the tmp directory to use
     * @property {?string} prefix prefix for the generated name
     * @property {?string} postfix postfix for the generated name
     */

    /**
     * @typedef {Object} FileSyncObject
     * @property {string} name the name of the file
     * @property {string} fd the file descriptor
     * @property {fileCallback} removeCallback the callback function to remove the file
     */

    /**
     * @typedef {Object} DirSyncObject
     * @property {string} name the name of the directory
     * @property {fileCallback} removeCallback the callback function to remove the directory
     */

    /**
     * @callback tmpNameCallback
     * @param {?Error} err the error object if anything goes wrong
     * @param {string} name the temporary file name
     */

    /**
     * @callback fileCallback
     * @param {?Error} err the error object if anything goes wrong
     * @param {string} name the temporary file name
     * @param {number} fd the file descriptor
     * @param {cleanupCallback} fn the cleanup callback function
     */

    /**
     * @callback dirCallback
     * @param {?Error} err the error object if anything goes wrong
     * @param {string} name the temporary file name
     * @param {cleanupCallback} fn the cleanup callback function
     */

    /**
     * Removes the temporary created file or directory.
     *
     * @callback cleanupCallback
     * @param {simpleCallback} [next] function to call after entry was removed
     */

    /**
     * Callback function for function composition.
     * @see {@link https://github.com/raszi/node-tmp/issues/57|raszi/node-tmp#57}
     *
     * @callback simpleCallback
     */

    // exporting all the needed methods
    tmp$1.tmpdir = tmpDir$1;

    tmp$1.dir = dir$1;
    tmp$1.dirSync = dirSync$1;

    tmp$1.file = file$1;
    tmp$1.fileSync = fileSync$1;

    tmp$1.tmpName = tmpName$1;
    tmp$1.tmpNameSync = tmpNameSync$1;

    tmp$1.setGracefulCleanup = setGracefulCleanup$1;

    var CreateFileError$3 = {};

    /***
     * Node External Editor
     *
     * Kevin Gravier <kevin@mrkmg.com>
     * MIT 2018
     */
    var __extends$8 = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    Object.defineProperty(CreateFileError$3, "__esModule", { value: true });
    var CreateFileError$2 = /** @class */ (function (_super) {
        __extends$8(CreateFileError, _super);
        function CreateFileError(originalError) {
            var _newTarget = this.constructor;
            var _this = _super.call(this, "Failed to create temporary file for editor") || this;
            _this.originalError = originalError;
            var proto = _newTarget.prototype;
            if (Object.setPrototypeOf) {
                Object.setPrototypeOf(_this, proto);
            }
            else {
                _this.__proto__ = _newTarget.prototype;
            }
            return _this;
        }
        return CreateFileError;
    }(Error));
    CreateFileError$3.CreateFileError = CreateFileError$2;

    var LaunchEditorError$3 = {};

    /***
     * Node External Editor
     *
     * Kevin Gravier <kevin@mrkmg.com>
     * MIT 2018
     */
    var __extends$7 = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    Object.defineProperty(LaunchEditorError$3, "__esModule", { value: true });
    var LaunchEditorError$2 = /** @class */ (function (_super) {
        __extends$7(LaunchEditorError, _super);
        function LaunchEditorError(originalError) {
            var _newTarget = this.constructor;
            var _this = _super.call(this, "Failed launch editor") || this;
            _this.originalError = originalError;
            var proto = _newTarget.prototype;
            if (Object.setPrototypeOf) {
                Object.setPrototypeOf(_this, proto);
            }
            else {
                _this.__proto__ = _newTarget.prototype;
            }
            return _this;
        }
        return LaunchEditorError;
    }(Error));
    LaunchEditorError$3.LaunchEditorError = LaunchEditorError$2;

    var ReadFileError$3 = {};

    /***
     * Node External Editor
     *
     * Kevin Gravier <kevin@mrkmg.com>
     * MIT 2018
     */
    var __extends$6 = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    Object.defineProperty(ReadFileError$3, "__esModule", { value: true });
    var ReadFileError$2 = /** @class */ (function (_super) {
        __extends$6(ReadFileError, _super);
        function ReadFileError(originalError) {
            var _newTarget = this.constructor;
            var _this = _super.call(this, "Failed to read temporary file") || this;
            _this.originalError = originalError;
            var proto = _newTarget.prototype;
            if (Object.setPrototypeOf) {
                Object.setPrototypeOf(_this, proto);
            }
            else {
                _this.__proto__ = _newTarget.prototype;
            }
            return _this;
        }
        return ReadFileError;
    }(Error));
    ReadFileError$3.ReadFileError = ReadFileError$2;

    var RemoveFileError$3 = {};

    /***
     * Node External Editor
     *
     * Kevin Gravier <kevin@mrkmg.com>
     * MIT 2018
     */
    var __extends$5 = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    Object.defineProperty(RemoveFileError$3, "__esModule", { value: true });
    var RemoveFileError$2 = /** @class */ (function (_super) {
        __extends$5(RemoveFileError, _super);
        function RemoveFileError(originalError) {
            var _newTarget = this.constructor;
            var _this = _super.call(this, "Failed to cleanup temporary file") || this;
            _this.originalError = originalError;
            var proto = _newTarget.prototype;
            if (Object.setPrototypeOf) {
                Object.setPrototypeOf(_this, proto);
            }
            else {
                _this.__proto__ = _newTarget.prototype;
            }
            return _this;
        }
        return RemoveFileError;
    }(Error));
    RemoveFileError$3.RemoveFileError = RemoveFileError$2;

    /***
     * Node External Editor
     *
     * Kevin Gravier <kevin@mrkmg.com>
     * MIT 2019
     */
    Object.defineProperty(main$4, "__esModule", { value: true });
    var chardet_1$1 = chardet$1;
    var child_process_1$1 = require$$1__default$1["default"];
    var fs_1$1 = require$$0__default$6["default"];
    var iconv_lite_1$1 = lib$1.exports;
    var tmp_1$1 = tmp$1;
    var CreateFileError_1$1 = CreateFileError$3;
    main$4.CreateFileError = CreateFileError_1$1.CreateFileError;
    var LaunchEditorError_1$1 = LaunchEditorError$3;
    main$4.LaunchEditorError = LaunchEditorError_1$1.LaunchEditorError;
    var ReadFileError_1$1 = ReadFileError$3;
    main$4.ReadFileError = ReadFileError_1$1.ReadFileError;
    var RemoveFileError_1$1 = RemoveFileError$3;
    main$4.RemoveFileError = RemoveFileError_1$1.RemoveFileError;
    function edit$1(text, fileOptions) {
        if (text === void 0) { text = ""; }
        var editor = new ExternalEditor$1(text, fileOptions);
        editor.run();
        editor.cleanup();
        return editor.text;
    }
    main$4.edit = edit$1;
    function editAsync$3(text, callback, fileOptions) {
        if (text === void 0) { text = ""; }
        var editor = new ExternalEditor$1(text, fileOptions);
        editor.runAsync(function (err, result) {
            if (err) {
                setImmediate(callback, err, null);
            }
            else {
                try {
                    editor.cleanup();
                    setImmediate(callback, null, result);
                }
                catch (cleanupError) {
                    setImmediate(callback, cleanupError, null);
                }
            }
        });
    }
    main$4.editAsync = editAsync$3;
    var ExternalEditor$1 = /** @class */ (function () {
        function ExternalEditor(text, fileOptions) {
            if (text === void 0) { text = ""; }
            this.text = "";
            this.fileOptions = {};
            this.text = text;
            if (fileOptions) {
                this.fileOptions = fileOptions;
            }
            this.determineEditor();
            this.createTemporaryFile();
        }
        ExternalEditor.splitStringBySpace = function (str) {
            var pieces = [];
            var currentString = "";
            for (var strIndex = 0; strIndex < str.length; strIndex++) {
                var currentLetter = str[strIndex];
                if (strIndex > 0 && currentLetter === " " && str[strIndex - 1] !== "\\" && currentString.length > 0) {
                    pieces.push(currentString);
                    currentString = "";
                }
                else {
                    currentString += currentLetter;
                }
            }
            if (currentString.length > 0) {
                pieces.push(currentString);
            }
            return pieces;
        };
        Object.defineProperty(ExternalEditor.prototype, "temp_file", {
            get: function () {
                console.log("DEPRECATED: temp_file. Use tempFile moving forward.");
                return this.tempFile;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ExternalEditor.prototype, "last_exit_status", {
            get: function () {
                console.log("DEPRECATED: last_exit_status. Use lastExitStatus moving forward.");
                return this.lastExitStatus;
            },
            enumerable: true,
            configurable: true
        });
        ExternalEditor.prototype.run = function () {
            this.launchEditor();
            this.readTemporaryFile();
            return this.text;
        };
        ExternalEditor.prototype.runAsync = function (callback) {
            var _this = this;
            try {
                this.launchEditorAsync(function () {
                    try {
                        _this.readTemporaryFile();
                        setImmediate(callback, null, _this.text);
                    }
                    catch (readError) {
                        setImmediate(callback, readError, null);
                    }
                });
            }
            catch (launchError) {
                setImmediate(callback, launchError, null);
            }
        };
        ExternalEditor.prototype.cleanup = function () {
            this.removeTemporaryFile();
        };
        ExternalEditor.prototype.determineEditor = function () {
            var editor = process.env.VISUAL ? process.env.VISUAL :
                process.env.EDITOR ? process.env.EDITOR :
                    /^win/.test(process.platform) ? "notepad" :
                        "vim";
            var editorOpts = ExternalEditor.splitStringBySpace(editor).map(function (piece) { return piece.replace("\\ ", " "); });
            var bin = editorOpts.shift();
            this.editor = { args: editorOpts, bin: bin };
        };
        ExternalEditor.prototype.createTemporaryFile = function () {
            try {
                this.tempFile = tmp_1$1.tmpNameSync(this.fileOptions);
                var opt = { encoding: "utf8" };
                if (this.fileOptions.hasOwnProperty("mode")) {
                    opt.mode = this.fileOptions.mode;
                }
                fs_1$1.writeFileSync(this.tempFile, this.text, opt);
            }
            catch (createFileError) {
                throw new CreateFileError_1$1.CreateFileError(createFileError);
            }
        };
        ExternalEditor.prototype.readTemporaryFile = function () {
            try {
                var tempFileBuffer = fs_1$1.readFileSync(this.tempFile);
                if (tempFileBuffer.length === 0) {
                    this.text = "";
                }
                else {
                    var encoding = chardet_1$1.detect(tempFileBuffer).toString();
                    if (!iconv_lite_1$1.encodingExists(encoding)) {
                        // Probably a bad idea, but will at least prevent crashing
                        encoding = "utf8";
                    }
                    this.text = iconv_lite_1$1.decode(tempFileBuffer, encoding);
                }
            }
            catch (readFileError) {
                throw new ReadFileError_1$1.ReadFileError(readFileError);
            }
        };
        ExternalEditor.prototype.removeTemporaryFile = function () {
            try {
                fs_1$1.unlinkSync(this.tempFile);
            }
            catch (removeFileError) {
                throw new RemoveFileError_1$1.RemoveFileError(removeFileError);
            }
        };
        ExternalEditor.prototype.launchEditor = function () {
            try {
                var editorProcess = child_process_1$1.spawnSync(this.editor.bin, this.editor.args.concat([this.tempFile]), { stdio: "inherit" });
                this.lastExitStatus = editorProcess.status;
            }
            catch (launchError) {
                throw new LaunchEditorError_1$1.LaunchEditorError(launchError);
            }
        };
        ExternalEditor.prototype.launchEditorAsync = function (callback) {
            var _this = this;
            try {
                var editorProcess = child_process_1$1.spawn(this.editor.bin, this.editor.args.concat([this.tempFile]), { stdio: "inherit" });
                editorProcess.on("exit", function (code) {
                    _this.lastExitStatus = code;
                    setImmediate(callback);
                });
            }
            catch (launchError) {
                throw new LaunchEditorError_1$1.LaunchEditorError(launchError);
            }
        };
        return ExternalEditor;
    }());
    main$4.ExternalEditor = ExternalEditor$1;

    /**
     * `editor` type prompt
     */

    const chalk$e = source$1;
    const { editAsync: editAsync$2 } = main$4;
    const Base$a = base$1;
    const observe$8 = events$2;
    const { Subject: Subject$2 } = require$$4$3;

    class EditorPrompt$1 extends Base$a {
      /**
       * Start the Inquiry session
       * @param  {Function} cb      Callback when prompt is done
       * @return {this}
       */

      _run(cb) {
        this.done = cb;

        this.editorResult = new Subject$2();

        // Open Editor on "line" (Enter Key)
        const events = observe$8(this.rl);
        this.lineSubscription = events.line.subscribe(this.startExternalEditor.bind(this));

        // Trigger Validation when editor closes
        const validation = this.handleSubmitEvents(this.editorResult);
        validation.success.forEach(this.onEnd.bind(this));
        validation.error.forEach(this.onError.bind(this));

        // Prevents default from being printed on screen (can look weird with multiple lines)
        this.currentText = this.opt.default;
        this.opt.default = null;

        // Init
        this.render();

        return this;
      }

      /**
       * Render the prompt to screen
       * @return {EditorPrompt} self
       */

      render(error) {
        let bottomContent = '';
        let message = this.getQuestion();

        if (this.status === 'answered') {
          message += chalk$e.dim('Received');
        } else {
          message += chalk$e.dim('Press <enter> to launch your preferred editor.');
        }

        if (error) {
          bottomContent = chalk$e.red('>> ') + error;
        }

        this.screen.render(message, bottomContent);
      }

      /**
       * Launch $EDITOR on user press enter
       */

      startExternalEditor() {
        // Pause Readline to prevent stdin and stdout from being modified while the editor is showing
        this.rl.pause();
        editAsync$2(this.currentText, this.endExternalEditor.bind(this));
      }

      endExternalEditor(error, result) {
        this.rl.resume();
        if (error) {
          this.editorResult.error(error);
        } else {
          this.editorResult.next(result);
        }
      }

      onEnd(state) {
        this.editorResult.unsubscribe();
        this.lineSubscription.unsubscribe();
        this.answer = state.value;
        this.status = 'answered';
        // Re-render prompt
        this.render();
        this.screen.done();
        this.done(this.answer);
      }

      onError(state) {
        this.render(state.isValid);
      }
    }

    var editor$1 = EditorPrompt$1;

    (function (module) {
    /**
     * Inquirer.js
     * A collection of common interactive command line user interfaces.
     */

    const inquirer = module.exports;

    /**
     * Client interfaces
     */

    inquirer.prompts = {};

    inquirer.Separator = separator$1;

    inquirer.ui = {
      BottomBar: bottomBar$1,
      Prompt: prompt$1,
    };

    /**
     * Create a new self-contained prompt module.
     */
    inquirer.createPromptModule = function (opt) {
      const promptModule = function (questions, answers) {
        let ui;
        try {
          ui = new inquirer.ui.Prompt(promptModule.prompts, opt);
        } catch (error) {
          return Promise.reject(error);
        }
        const promise = ui.run(questions, answers);

        // Monkey patch the UI on the promise object so
        // that it remains publicly accessible.
        promise.ui = ui;

        return promise;
      };

      promptModule.prompts = {};

      /**
       * Register a prompt type
       * @param {String} name     Prompt type name
       * @param {Function} prompt Prompt constructor
       * @return {inquirer}
       */

      promptModule.registerPrompt = function (name, prompt) {
        promptModule.prompts[name] = prompt;
        return this;
      };

      /**
       * Register the defaults provider prompts
       */

      promptModule.restoreDefaultPrompts = function () {
        this.registerPrompt('list', list$1);
        this.registerPrompt('input', input$1);
        this.registerPrompt('number', number$1);
        this.registerPrompt('confirm', confirm$1);
        this.registerPrompt('rawlist', rawlist$1);
        this.registerPrompt('expand', expand$4);
        this.registerPrompt('checkbox', checkbox$1);
        this.registerPrompt('password', password$1);
        this.registerPrompt('editor', editor$1);
      };

      promptModule.restoreDefaultPrompts();

      return promptModule;
    };

    /**
     * Public CLI helper interface
     * @param  {Array|Object|Rx.Observable} questions - Questions settings array
     * @param  {Function} cb - Callback being passed the user answers
     * @return {inquirer.ui.Prompt}
     */

    inquirer.prompt = inquirer.createPromptModule();

    // Expose helper functions on the top level for easiest usage by common users
    inquirer.registerPrompt = function (name, prompt) {
      inquirer.prompt.registerPrompt(name, prompt);
    };

    inquirer.restoreDefaultPrompts = function () {
      inquirer.prompt.restoreDefaultPrompts();
    };
    }(inquirer$2));

    var terminalLink = {exports: {}};

    const supportsColor$1 = supportsColor_1$1;
    const hasFlag$2 = hasFlag$4;

    function parseVersion(versionString) {
    	if (/^\d{3,4}$/.test(versionString)) {
    		// Env var doesn't always use dots. example: 4601 => 46.1.0
    		const m = /(\d{1,2})(\d{2})/.exec(versionString);
    		return {
    			major: 0,
    			minor: parseInt(m[1], 10),
    			patch: parseInt(m[2], 10)
    		};
    	}

    	const versions = (versionString || '').split('.').map(n => parseInt(n, 10));
    	return {
    		major: versions[0],
    		minor: versions[1],
    		patch: versions[2]
    	};
    }

    function supportsHyperlink(stream) {
    	const {env} = process;

    	if ('FORCE_HYPERLINK' in env) {
    		return !(env.FORCE_HYPERLINK.length > 0 && parseInt(env.FORCE_HYPERLINK, 10) === 0);
    	}

    	if (hasFlag$2('no-hyperlink') || hasFlag$2('no-hyperlinks') || hasFlag$2('hyperlink=false') || hasFlag$2('hyperlink=never')) {
    		return false;
    	}

    	if (hasFlag$2('hyperlink=true') || hasFlag$2('hyperlink=always')) {
    		return true;
    	}

    	// If they specify no colors, they probably don't want hyperlinks.
    	if (!supportsColor$1.supportsColor(stream)) {
    		return false;
    	}

    	if (stream && !stream.isTTY) {
    		return false;
    	}

    	if (process.platform === 'win32') {
    		return false;
    	}

    	if ('NETLIFY' in env) {
    		return true;
    	}

    	if ('CI' in env) {
    		return false;
    	}

    	if ('TEAMCITY_VERSION' in env) {
    		return false;
    	}

    	if ('TERM_PROGRAM' in env) {
    		const version = parseVersion(env.TERM_PROGRAM_VERSION);

    		switch (env.TERM_PROGRAM) {
    			case 'iTerm.app':
    				if (version.major === 3) {
    					return version.minor >= 1;
    				}

    				return version.major > 3;
    			// No default
    		}
    	}

    	if ('VTE_VERSION' in env) {
    		// 0.50.0 was supposed to support hyperlinks, but throws a segfault
    		if (env.VTE_VERSION === '0.50.0') {
    			return false;
    		}

    		const version = parseVersion(env.VTE_VERSION);
    		return version.major > 0 || version.minor >= 50;
    	}

    	return false;
    }

    var supportsHyperlinks = {
    	supportsHyperlink,
    	stdout: supportsHyperlink(process.stdout),
    	stderr: supportsHyperlink(process.stderr)
    };

    (function (module) {
    const ansiEscapes = ansiEscapes$3.exports;
    const supportsHyperlinks$1 = supportsHyperlinks;

    const terminalLink = (text, url, {target = 'stdout', ...options} = {}) => {
    	if (!supportsHyperlinks$1[target]) {
    		// If the fallback has been explicitly disabled, don't modify the text itself.
    		if (options.fallback === false) {
    			return text;
    		}

    		return typeof options.fallback === 'function' ? options.fallback(text, url) : `${text} (\u200B${url}\u200B)`;
    	}

    	return ansiEscapes.link(text, url);
    };

    module.exports = (text, url, options = {}) => terminalLink(text, url, options);

    module.exports.stderr = (text, url, options = {}) => terminalLink(text, url, {target: 'stderr', ...options});

    module.exports.isSupported = supportsHyperlinks$1.stdout;
    module.exports.stderr.isSupported = supportsHyperlinks$1.stderr;
    }(terminalLink));

    var axios$1 = {exports: {}};

    var bind$2 = function bind(fn, thisArg) {
      return function wrap() {
        var args = new Array(arguments.length);
        for (var i = 0; i < args.length; i++) {
          args[i] = arguments[i];
        }
        return fn.apply(thisArg, args);
      };
    };

    var bind$1 = bind$2;

    // utils is a library of generic helper functions non-specific to axios

    var toString$2 = Object.prototype.toString;

    /**
     * Determine if a value is an Array
     *
     * @param {Object} val The value to test
     * @returns {boolean} True if value is an Array, otherwise false
     */
    function isArray$j(val) {
      return Array.isArray(val);
    }

    /**
     * Determine if a value is undefined
     *
     * @param {Object} val The value to test
     * @returns {boolean} True if the value is undefined, otherwise false
     */
    function isUndefined(val) {
      return typeof val === 'undefined';
    }

    /**
     * Determine if a value is a Buffer
     *
     * @param {Object} val The value to test
     * @returns {boolean} True if value is a Buffer, otherwise false
     */
    function isBuffer$4(val) {
      return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor)
        && typeof val.constructor.isBuffer === 'function' && val.constructor.isBuffer(val);
    }

    /**
     * Determine if a value is an ArrayBuffer
     *
     * @param {Object} val The value to test
     * @returns {boolean} True if value is an ArrayBuffer, otherwise false
     */
    function isArrayBuffer(val) {
      return toString$2.call(val) === '[object ArrayBuffer]';
    }

    /**
     * Determine if a value is a FormData
     *
     * @param {Object} val The value to test
     * @returns {boolean} True if value is an FormData, otherwise false
     */
    function isFormData(val) {
      return toString$2.call(val) === '[object FormData]';
    }

    /**
     * Determine if a value is a view on an ArrayBuffer
     *
     * @param {Object} val The value to test
     * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false
     */
    function isArrayBufferView(val) {
      var result;
      if ((typeof ArrayBuffer !== 'undefined') && (ArrayBuffer.isView)) {
        result = ArrayBuffer.isView(val);
      } else {
        result = (val) && (val.buffer) && (isArrayBuffer(val.buffer));
      }
      return result;
    }

    /**
     * Determine if a value is a String
     *
     * @param {Object} val The value to test
     * @returns {boolean} True if value is a String, otherwise false
     */
    function isString$1(val) {
      return typeof val === 'string';
    }

    /**
     * Determine if a value is a Number
     *
     * @param {Object} val The value to test
     * @returns {boolean} True if value is a Number, otherwise false
     */
    function isNumber$1(val) {
      return typeof val === 'number';
    }

    /**
     * Determine if a value is an Object
     *
     * @param {Object} val The value to test
     * @returns {boolean} True if value is an Object, otherwise false
     */
    function isObject$a(val) {
      return val !== null && typeof val === 'object';
    }

    /**
     * Determine if a value is a plain Object
     *
     * @param {Object} val The value to test
     * @return {boolean} True if value is a plain Object, otherwise false
     */
    function isPlainObject$2(val) {
      if (toString$2.call(val) !== '[object Object]') {
        return false;
      }

      var prototype = Object.getPrototypeOf(val);
      return prototype === null || prototype === Object.prototype;
    }

    /**
     * Determine if a value is a Date
     *
     * @param {Object} val The value to test
     * @returns {boolean} True if value is a Date, otherwise false
     */
    function isDate(val) {
      return toString$2.call(val) === '[object Date]';
    }

    /**
     * Determine if a value is a File
     *
     * @param {Object} val The value to test
     * @returns {boolean} True if value is a File, otherwise false
     */
    function isFile(val) {
      return toString$2.call(val) === '[object File]';
    }

    /**
     * Determine if a value is a Blob
     *
     * @param {Object} val The value to test
     * @returns {boolean} True if value is a Blob, otherwise false
     */
    function isBlob(val) {
      return toString$2.call(val) === '[object Blob]';
    }

    /**
     * Determine if a value is a Function
     *
     * @param {Object} val The value to test
     * @returns {boolean} True if value is a Function, otherwise false
     */
    function isFunction$4(val) {
      return toString$2.call(val) === '[object Function]';
    }

    /**
     * Determine if a value is a Stream
     *
     * @param {Object} val The value to test
     * @returns {boolean} True if value is a Stream, otherwise false
     */
    function isStream(val) {
      return isObject$a(val) && isFunction$4(val.pipe);
    }

    /**
     * Determine if a value is a URLSearchParams object
     *
     * @param {Object} val The value to test
     * @returns {boolean} True if value is a URLSearchParams object, otherwise false
     */
    function isURLSearchParams(val) {
      return toString$2.call(val) === '[object URLSearchParams]';
    }

    /**
     * Trim excess whitespace off the beginning and end of a string
     *
     * @param {String} str The String to trim
     * @returns {String} The String freed of excess whitespace
     */
    function trim(str) {
      return str.trim ? str.trim() : str.replace(/^\s+|\s+$/g, '');
    }

    /**
     * Determine if we're running in a standard browser environment
     *
     * This allows axios to run in a web worker, and react-native.
     * Both environments support XMLHttpRequest, but not fully standard globals.
     *
     * web workers:
     *  typeof window -> undefined
     *  typeof document -> undefined
     *
     * react-native:
     *  navigator.product -> 'ReactNative'
     * nativescript
     *  navigator.product -> 'NativeScript' or 'NS'
     */
    function isStandardBrowserEnv() {
      if (typeof navigator !== 'undefined' && (navigator.product === 'ReactNative' ||
                                               navigator.product === 'NativeScript' ||
                                               navigator.product === 'NS')) {
        return false;
      }
      return (
        typeof window !== 'undefined' &&
        typeof document !== 'undefined'
      );
    }

    /**
     * Iterate over an Array or an Object invoking a function for each item.
     *
     * If `obj` is an Array callback will be called passing
     * the value, index, and complete array for each item.
     *
     * If 'obj' is an Object callback will be called passing
     * the value, key, and complete object for each property.
     *
     * @param {Object|Array} obj The object to iterate
     * @param {Function} fn The callback to invoke for each item
     */
    function forEach(obj, fn) {
      // Don't bother if no value provided
      if (obj === null || typeof obj === 'undefined') {
        return;
      }

      // Force an array if not already something iterable
      if (typeof obj !== 'object') {
        /*eslint no-param-reassign:0*/
        obj = [obj];
      }

      if (isArray$j(obj)) {
        // Iterate over array values
        for (var i = 0, l = obj.length; i < l; i++) {
          fn.call(null, obj[i], i, obj);
        }
      } else {
        // Iterate over object keys
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) {
            fn.call(null, obj[key], key, obj);
          }
        }
      }
    }

    /**
     * Accepts varargs expecting each argument to be an object, then
     * immutably merges the properties of each object and returns result.
     *
     * When multiple objects contain the same key the later object in
     * the arguments list will take precedence.
     *
     * Example:
     *
     * ```js
     * var result = merge({foo: 123}, {foo: 456});
     * console.log(result.foo); // outputs 456
     * ```
     *
     * @param {Object} obj1 Object to merge
     * @returns {Object} Result of all merge properties
     */
    function merge$2(/* obj1, obj2, obj3, ... */) {
      var result = {};
      function assignValue(val, key) {
        if (isPlainObject$2(result[key]) && isPlainObject$2(val)) {
          result[key] = merge$2(result[key], val);
        } else if (isPlainObject$2(val)) {
          result[key] = merge$2({}, val);
        } else if (isArray$j(val)) {
          result[key] = val.slice();
        } else {
          result[key] = val;
        }
      }

      for (var i = 0, l = arguments.length; i < l; i++) {
        forEach(arguments[i], assignValue);
      }
      return result;
    }

    /**
     * Extends object a by mutably adding to it the properties of object b.
     *
     * @param {Object} a The object to be extended
     * @param {Object} b The object to copy properties from
     * @param {Object} thisArg The object to bind function to
     * @return {Object} The resulting value of object a
     */
    function extend$2(a, b, thisArg) {
      forEach(b, function assignValue(val, key) {
        if (thisArg && typeof val === 'function') {
          a[key] = bind$1(val, thisArg);
        } else {
          a[key] = val;
        }
      });
      return a;
    }

    /**
     * Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)
     *
     * @param {string} content with BOM
     * @return {string} content value without BOM
     */
    function stripBOM(content) {
      if (content.charCodeAt(0) === 0xFEFF) {
        content = content.slice(1);
      }
      return content;
    }

    var utils$i = {
      isArray: isArray$j,
      isArrayBuffer: isArrayBuffer,
      isBuffer: isBuffer$4,
      isFormData: isFormData,
      isArrayBufferView: isArrayBufferView,
      isString: isString$1,
      isNumber: isNumber$1,
      isObject: isObject$a,
      isPlainObject: isPlainObject$2,
      isUndefined: isUndefined,
      isDate: isDate,
      isFile: isFile,
      isBlob: isBlob,
      isFunction: isFunction$4,
      isStream: isStream,
      isURLSearchParams: isURLSearchParams,
      isStandardBrowserEnv: isStandardBrowserEnv,
      forEach: forEach,
      merge: merge$2,
      extend: extend$2,
      trim: trim,
      stripBOM: stripBOM
    };

    var utils$h = utils$i;

    function encode(val) {
      return encodeURIComponent(val).
        replace(/%3A/gi, ':').
        replace(/%24/g, '$').
        replace(/%2C/gi, ',').
        replace(/%20/g, '+').
        replace(/%5B/gi, '[').
        replace(/%5D/gi, ']');
    }

    /**
     * Build a URL by appending params to the end
     *
     * @param {string} url The base of the url (e.g., http://www.google.com)
     * @param {object} [params] The params to be appended
     * @returns {string} The formatted url
     */
    var buildURL$3 = function buildURL(url, params, paramsSerializer) {
      /*eslint no-param-reassign:0*/
      if (!params) {
        return url;
      }

      var serializedParams;
      if (paramsSerializer) {
        serializedParams = paramsSerializer(params);
      } else if (utils$h.isURLSearchParams(params)) {
        serializedParams = params.toString();
      } else {
        var parts = [];

        utils$h.forEach(params, function serialize(val, key) {
          if (val === null || typeof val === 'undefined') {
            return;
          }

          if (utils$h.isArray(val)) {
            key = key + '[]';
          } else {
            val = [val];
          }

          utils$h.forEach(val, function parseValue(v) {
            if (utils$h.isDate(v)) {
              v = v.toISOString();
            } else if (utils$h.isObject(v)) {
              v = JSON.stringify(v);
            }
            parts.push(encode(key) + '=' + encode(v));
          });
        });

        serializedParams = parts.join('&');
      }

      if (serializedParams) {
        var hashmarkIndex = url.indexOf('#');
        if (hashmarkIndex !== -1) {
          url = url.slice(0, hashmarkIndex);
        }

        url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;
      }

      return url;
    };

    var utils$g = utils$i;

    function InterceptorManager$1() {
      this.handlers = [];
    }

    /**
     * Add a new interceptor to the stack
     *
     * @param {Function} fulfilled The function to handle `then` for a `Promise`
     * @param {Function} rejected The function to handle `reject` for a `Promise`
     *
     * @return {Number} An ID used to remove interceptor later
     */
    InterceptorManager$1.prototype.use = function use(fulfilled, rejected, options) {
      this.handlers.push({
        fulfilled: fulfilled,
        rejected: rejected,
        synchronous: options ? options.synchronous : false,
        runWhen: options ? options.runWhen : null
      });
      return this.handlers.length - 1;
    };

    /**
     * Remove an interceptor from the stack
     *
     * @param {Number} id The ID that was returned by `use`
     */
    InterceptorManager$1.prototype.eject = function eject(id) {
      if (this.handlers[id]) {
        this.handlers[id] = null;
      }
    };

    /**
     * Iterate over all the registered interceptors
     *
     * This method is particularly useful for skipping over any
     * interceptors that may have become `null` calling `eject`.
     *
     * @param {Function} fn The function to call for each interceptor
     */
    InterceptorManager$1.prototype.forEach = function forEach(fn) {
      utils$g.forEach(this.handlers, function forEachHandler(h) {
        if (h !== null) {
          fn(h);
        }
      });
    };

    var InterceptorManager_1 = InterceptorManager$1;

    var utils$f = utils$i;

    var normalizeHeaderName$1 = function normalizeHeaderName(headers, normalizedName) {
      utils$f.forEach(headers, function processHeader(value, name) {
        if (name !== normalizedName && name.toUpperCase() === normalizedName.toUpperCase()) {
          headers[normalizedName] = value;
          delete headers[name];
        }
      });
    };

    /**
     * Update an Error with the specified config, error code, and response.
     *
     * @param {Error} error The error to update.
     * @param {Object} config The config.
     * @param {string} [code] The error code (for example, 'ECONNABORTED').
     * @param {Object} [request] The request.
     * @param {Object} [response] The response.
     * @returns {Error} The error.
     */
    var enhanceError$3 = function enhanceError(error, config, code, request, response) {
      error.config = config;
      if (code) {
        error.code = code;
      }

      error.request = request;
      error.response = response;
      error.isAxiosError = true;

      error.toJSON = function toJSON() {
        return {
          // Standard
          message: this.message,
          name: this.name,
          // Microsoft
          description: this.description,
          number: this.number,
          // Mozilla
          fileName: this.fileName,
          lineNumber: this.lineNumber,
          columnNumber: this.columnNumber,
          stack: this.stack,
          // Axios
          config: this.config,
          code: this.code,
          status: this.response && this.response.status ? this.response.status : null
        };
      };
      return error;
    };

    var enhanceError$2 = enhanceError$3;

    /**
     * Create an Error with the specified message, config, error code, request and response.
     *
     * @param {string} message The error message.
     * @param {Object} config The config.
     * @param {string} [code] The error code (for example, 'ECONNABORTED').
     * @param {Object} [request] The request.
     * @param {Object} [response] The response.
     * @returns {Error} The created error.
     */
    var createError$3 = function createError(message, config, code, request, response) {
      var error = new Error(message);
      return enhanceError$2(error, config, code, request, response);
    };

    var createError$2 = createError$3;

    /**
     * Resolve or reject a Promise based on response status.
     *
     * @param {Function} resolve A function that resolves the promise.
     * @param {Function} reject A function that rejects the promise.
     * @param {object} response The response.
     */
    var settle$2 = function settle(resolve, reject, response) {
      var validateStatus = response.config.validateStatus;
      if (!response.status || !validateStatus || validateStatus(response.status)) {
        resolve(response);
      } else {
        reject(createError$2(
          'Request failed with status code ' + response.status,
          response.config,
          null,
          response.request,
          response
        ));
      }
    };

    var utils$e = utils$i;

    var cookies$1 = (
      utils$e.isStandardBrowserEnv() ?

      // Standard browser envs support document.cookie
        (function standardBrowserEnv() {
          return {
            write: function write(name, value, expires, path, domain, secure) {
              var cookie = [];
              cookie.push(name + '=' + encodeURIComponent(value));

              if (utils$e.isNumber(expires)) {
                cookie.push('expires=' + new Date(expires).toGMTString());
              }

              if (utils$e.isString(path)) {
                cookie.push('path=' + path);
              }

              if (utils$e.isString(domain)) {
                cookie.push('domain=' + domain);
              }

              if (secure === true) {
                cookie.push('secure');
              }

              document.cookie = cookie.join('; ');
            },

            read: function read(name) {
              var match = document.cookie.match(new RegExp('(^|;\\s*)(' + name + ')=([^;]*)'));
              return (match ? decodeURIComponent(match[3]) : null);
            },

            remove: function remove(name) {
              this.write(name, '', Date.now() - 86400000);
            }
          };
        })() :

      // Non standard browser env (web workers, react-native) lack needed support.
        (function nonStandardBrowserEnv() {
          return {
            write: function write() {},
            read: function read() { return null; },
            remove: function remove() {}
          };
        })()
    );

    /**
     * Determines whether the specified URL is absolute
     *
     * @param {string} url The URL to test
     * @returns {boolean} True if the specified URL is absolute, otherwise false
     */
    var isAbsoluteURL$1 = function isAbsoluteURL(url) {
      // A URL is considered absolute if it begins with "<scheme>://" or "//" (protocol-relative URL).
      // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed
      // by any combination of letters, digits, plus, period, or hyphen.
      return /^([a-z][a-z\d+\-.]*:)?\/\//i.test(url);
    };

    /**
     * Creates a new URL by combining the specified URLs
     *
     * @param {string} baseURL The base URL
     * @param {string} relativeURL The relative URL
     * @returns {string} The combined URL
     */
    var combineURLs$1 = function combineURLs(baseURL, relativeURL) {
      return relativeURL
        ? baseURL.replace(/\/+$/, '') + '/' + relativeURL.replace(/^\/+/, '')
        : baseURL;
    };

    var isAbsoluteURL = isAbsoluteURL$1;
    var combineURLs = combineURLs$1;

    /**
     * Creates a new URL by combining the baseURL with the requestedURL,
     * only when the requestedURL is not already an absolute URL.
     * If the requestURL is absolute, this function returns the requestedURL untouched.
     *
     * @param {string} baseURL The base URL
     * @param {string} requestedURL Absolute or relative URL to combine
     * @returns {string} The combined full path
     */
    var buildFullPath$2 = function buildFullPath(baseURL, requestedURL) {
      if (baseURL && !isAbsoluteURL(requestedURL)) {
        return combineURLs(baseURL, requestedURL);
      }
      return requestedURL;
    };

    var utils$d = utils$i;

    // Headers whose duplicates are ignored by node
    // c.f. https://nodejs.org/api/http.html#http_message_headers
    var ignoreDuplicateOf = [
      'age', 'authorization', 'content-length', 'content-type', 'etag',
      'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since',
      'last-modified', 'location', 'max-forwards', 'proxy-authorization',
      'referer', 'retry-after', 'user-agent'
    ];

    /**
     * Parse headers into an object
     *
     * ```
     * Date: Wed, 27 Aug 2014 08:58:49 GMT
     * Content-Type: application/json
     * Connection: keep-alive
     * Transfer-Encoding: chunked
     * ```
     *
     * @param {String} headers Headers needing to be parsed
     * @returns {Object} Headers parsed into an object
     */
    var parseHeaders$1 = function parseHeaders(headers) {
      var parsed = {};
      var key;
      var val;
      var i;

      if (!headers) { return parsed; }

      utils$d.forEach(headers.split('\n'), function parser(line) {
        i = line.indexOf(':');
        key = utils$d.trim(line.substr(0, i)).toLowerCase();
        val = utils$d.trim(line.substr(i + 1));

        if (key) {
          if (parsed[key] && ignoreDuplicateOf.indexOf(key) >= 0) {
            return;
          }
          if (key === 'set-cookie') {
            parsed[key] = (parsed[key] ? parsed[key] : []).concat([val]);
          } else {
            parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;
          }
        }
      });

      return parsed;
    };

    var utils$c = utils$i;

    var isURLSameOrigin$1 = (
      utils$c.isStandardBrowserEnv() ?

      // Standard browser envs have full support of the APIs needed to test
      // whether the request URL is of the same origin as current location.
        (function standardBrowserEnv() {
          var msie = /(msie|trident)/i.test(navigator.userAgent);
          var urlParsingNode = document.createElement('a');
          var originURL;

          /**
        * Parse a URL to discover it's components
        *
        * @param {String} url The URL to be parsed
        * @returns {Object}
        */
          function resolveURL(url) {
            var href = url;

            if (msie) {
            // IE needs attribute set twice to normalize properties
              urlParsingNode.setAttribute('href', href);
              href = urlParsingNode.href;
            }

            urlParsingNode.setAttribute('href', href);

            // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils
            return {
              href: urlParsingNode.href,
              protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',
              host: urlParsingNode.host,
              search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, '') : '',
              hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',
              hostname: urlParsingNode.hostname,
              port: urlParsingNode.port,
              pathname: (urlParsingNode.pathname.charAt(0) === '/') ?
                urlParsingNode.pathname :
                '/' + urlParsingNode.pathname
            };
          }

          originURL = resolveURL(window.location.href);

          /**
        * Determine if a URL shares the same origin as the current location
        *
        * @param {String} requestURL The URL to test
        * @returns {boolean} True if URL shares the same origin, otherwise false
        */
          return function isURLSameOrigin(requestURL) {
            var parsed = (utils$c.isString(requestURL)) ? resolveURL(requestURL) : requestURL;
            return (parsed.protocol === originURL.protocol &&
                parsed.host === originURL.host);
          };
        })() :

      // Non standard browser envs (web workers, react-native) lack needed support.
        (function nonStandardBrowserEnv() {
          return function isURLSameOrigin() {
            return true;
          };
        })()
    );

    /**
     * A `Cancel` is an object that is thrown when an operation is canceled.
     *
     * @class
     * @param {string=} message The message.
     */
    function Cancel$4(message) {
      this.message = message;
    }

    Cancel$4.prototype.toString = function toString() {
      return 'Cancel' + (this.message ? ': ' + this.message : '');
    };

    Cancel$4.prototype.__CANCEL__ = true;

    var Cancel_1 = Cancel$4;

    var utils$b = utils$i;
    var settle$1 = settle$2;
    var cookies = cookies$1;
    var buildURL$2 = buildURL$3;
    var buildFullPath$1 = buildFullPath$2;
    var parseHeaders = parseHeaders$1;
    var isURLSameOrigin = isURLSameOrigin$1;
    var createError$1 = createError$3;
    var defaults$8 = defaults_1$1;
    var Cancel$3 = Cancel_1;

    var xhr = function xhrAdapter(config) {
      return new Promise(function dispatchXhrRequest(resolve, reject) {
        var requestData = config.data;
        var requestHeaders = config.headers;
        var responseType = config.responseType;
        var onCanceled;
        function done() {
          if (config.cancelToken) {
            config.cancelToken.unsubscribe(onCanceled);
          }

          if (config.signal) {
            config.signal.removeEventListener('abort', onCanceled);
          }
        }

        if (utils$b.isFormData(requestData)) {
          delete requestHeaders['Content-Type']; // Let the browser set it
        }

        var request = new XMLHttpRequest();

        // HTTP basic authentication
        if (config.auth) {
          var username = config.auth.username || '';
          var password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : '';
          requestHeaders.Authorization = 'Basic ' + btoa(username + ':' + password);
        }

        var fullPath = buildFullPath$1(config.baseURL, config.url);
        request.open(config.method.toUpperCase(), buildURL$2(fullPath, config.params, config.paramsSerializer), true);

        // Set the request timeout in MS
        request.timeout = config.timeout;

        function onloadend() {
          if (!request) {
            return;
          }
          // Prepare the response
          var responseHeaders = 'getAllResponseHeaders' in request ? parseHeaders(request.getAllResponseHeaders()) : null;
          var responseData = !responseType || responseType === 'text' ||  responseType === 'json' ?
            request.responseText : request.response;
          var response = {
            data: responseData,
            status: request.status,
            statusText: request.statusText,
            headers: responseHeaders,
            config: config,
            request: request
          };

          settle$1(function _resolve(value) {
            resolve(value);
            done();
          }, function _reject(err) {
            reject(err);
            done();
          }, response);

          // Clean up request
          request = null;
        }

        if ('onloadend' in request) {
          // Use onloadend if available
          request.onloadend = onloadend;
        } else {
          // Listen for ready state to emulate onloadend
          request.onreadystatechange = function handleLoad() {
            if (!request || request.readyState !== 4) {
              return;
            }

            // The request errored out and we didn't get a response, this will be
            // handled by onerror instead
            // With one exception: request that using file: protocol, most browsers
            // will return status as 0 even though it's a successful request
            if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {
              return;
            }
            // readystate handler is calling before onerror or ontimeout handlers,
            // so we should call onloadend on the next 'tick'
            setTimeout(onloadend);
          };
        }

        // Handle browser request cancellation (as opposed to a manual cancellation)
        request.onabort = function handleAbort() {
          if (!request) {
            return;
          }

          reject(createError$1('Request aborted', config, 'ECONNABORTED', request));

          // Clean up request
          request = null;
        };

        // Handle low level network errors
        request.onerror = function handleError() {
          // Real errors are hidden from us by the browser
          // onerror should only fire if it's a network error
          reject(createError$1('Network Error', config, null, request));

          // Clean up request
          request = null;
        };

        // Handle timeout
        request.ontimeout = function handleTimeout() {
          var timeoutErrorMessage = config.timeout ? 'timeout of ' + config.timeout + 'ms exceeded' : 'timeout exceeded';
          var transitional = config.transitional || defaults$8.transitional;
          if (config.timeoutErrorMessage) {
            timeoutErrorMessage = config.timeoutErrorMessage;
          }
          reject(createError$1(
            timeoutErrorMessage,
            config,
            transitional.clarifyTimeoutError ? 'ETIMEDOUT' : 'ECONNABORTED',
            request));

          // Clean up request
          request = null;
        };

        // Add xsrf header
        // This is only done if running in a standard browser environment.
        // Specifically not if we're in a web worker, or react-native.
        if (utils$b.isStandardBrowserEnv()) {
          // Add xsrf header
          var xsrfValue = (config.withCredentials || isURLSameOrigin(fullPath)) && config.xsrfCookieName ?
            cookies.read(config.xsrfCookieName) :
            undefined;

          if (xsrfValue) {
            requestHeaders[config.xsrfHeaderName] = xsrfValue;
          }
        }

        // Add headers to the request
        if ('setRequestHeader' in request) {
          utils$b.forEach(requestHeaders, function setRequestHeader(val, key) {
            if (typeof requestData === 'undefined' && key.toLowerCase() === 'content-type') {
              // Remove Content-Type if data is undefined
              delete requestHeaders[key];
            } else {
              // Otherwise add header to the request
              request.setRequestHeader(key, val);
            }
          });
        }

        // Add withCredentials to request if needed
        if (!utils$b.isUndefined(config.withCredentials)) {
          request.withCredentials = !!config.withCredentials;
        }

        // Add responseType to request if needed
        if (responseType && responseType !== 'json') {
          request.responseType = config.responseType;
        }

        // Handle progress if needed
        if (typeof config.onDownloadProgress === 'function') {
          request.addEventListener('progress', config.onDownloadProgress);
        }

        // Not all browsers support upload events
        if (typeof config.onUploadProgress === 'function' && request.upload) {
          request.upload.addEventListener('progress', config.onUploadProgress);
        }

        if (config.cancelToken || config.signal) {
          // Handle cancellation
          // eslint-disable-next-line func-names
          onCanceled = function(cancel) {
            if (!request) {
              return;
            }
            reject(!cancel || (cancel && cancel.type) ? new Cancel$3('canceled') : cancel);
            request.abort();
            request = null;
          };

          config.cancelToken && config.cancelToken.subscribe(onCanceled);
          if (config.signal) {
            config.signal.aborted ? onCanceled() : config.signal.addEventListener('abort', onCanceled);
          }
        }

        if (!requestData) {
          requestData = null;
        }

        // Send the request
        request.send(requestData);
      });
    };

    var followRedirects = {exports: {}};

    var debug$1;

    var debug_1 = function () {
      if (!debug$1) {
        try {
          /* eslint global-require: off */
          debug$1 = require("debug")("follow-redirects");
        }
        catch (error) { /* */ }
        if (typeof debug$1 !== "function") {
          debug$1 = function () { /* */ };
        }
      }
      debug$1.apply(null, arguments);
    };

    var url$1 = require$$0__default$5["default"];
    var URL = url$1.URL;
    var http$1 = require$$1__default["default"];
    var https$1 = require$$2__default$1["default"];
    var Writable = require$$0__default$1["default"].Writable;
    var assert$3 = require$$0__default$4["default"];
    var debug = debug_1;

    // Create handlers that pass events from native requests
    var events$1 = ["abort", "aborted", "connect", "error", "socket", "timeout"];
    var eventHandlers = Object.create(null);
    events$1.forEach(function (event) {
      eventHandlers[event] = function (arg1, arg2, arg3) {
        this._redirectable.emit(event, arg1, arg2, arg3);
      };
    });

    // Error types with codes
    var RedirectionError = createErrorType(
      "ERR_FR_REDIRECTION_FAILURE",
      "Redirected request failed"
    );
    var TooManyRedirectsError = createErrorType(
      "ERR_FR_TOO_MANY_REDIRECTS",
      "Maximum number of redirects exceeded"
    );
    var MaxBodyLengthExceededError = createErrorType(
      "ERR_FR_MAX_BODY_LENGTH_EXCEEDED",
      "Request body larger than maxBodyLength limit"
    );
    var WriteAfterEndError = createErrorType(
      "ERR_STREAM_WRITE_AFTER_END",
      "write after end"
    );

    // An HTTP(S) request that can be redirected
    function RedirectableRequest(options, responseCallback) {
      // Initialize the request
      Writable.call(this);
      this._sanitizeOptions(options);
      this._options = options;
      this._ended = false;
      this._ending = false;
      this._redirectCount = 0;
      this._redirects = [];
      this._requestBodyLength = 0;
      this._requestBodyBuffers = [];

      // Attach a callback if passed
      if (responseCallback) {
        this.on("response", responseCallback);
      }

      // React to responses of native requests
      var self = this;
      this._onNativeResponse = function (response) {
        self._processResponse(response);
      };

      // Perform the first request
      this._performRequest();
    }
    RedirectableRequest.prototype = Object.create(Writable.prototype);

    RedirectableRequest.prototype.abort = function () {
      abortRequest(this._currentRequest);
      this.emit("abort");
    };

    // Writes buffered data to the current native request
    RedirectableRequest.prototype.write = function (data, encoding, callback) {
      // Writing is not allowed if end has been called
      if (this._ending) {
        throw new WriteAfterEndError();
      }

      // Validate input and shift parameters if necessary
      if (!(typeof data === "string" || typeof data === "object" && ("length" in data))) {
        throw new TypeError("data should be a string, Buffer or Uint8Array");
      }
      if (typeof encoding === "function") {
        callback = encoding;
        encoding = null;
      }

      // Ignore empty buffers, since writing them doesn't invoke the callback
      // https://github.com/nodejs/node/issues/22066
      if (data.length === 0) {
        if (callback) {
          callback();
        }
        return;
      }
      // Only write when we don't exceed the maximum body length
      if (this._requestBodyLength + data.length <= this._options.maxBodyLength) {
        this._requestBodyLength += data.length;
        this._requestBodyBuffers.push({ data: data, encoding: encoding });
        this._currentRequest.write(data, encoding, callback);
      }
      // Error when we exceed the maximum body length
      else {
        this.emit("error", new MaxBodyLengthExceededError());
        this.abort();
      }
    };

    // Ends the current native request
    RedirectableRequest.prototype.end = function (data, encoding, callback) {
      // Shift parameters if necessary
      if (typeof data === "function") {
        callback = data;
        data = encoding = null;
      }
      else if (typeof encoding === "function") {
        callback = encoding;
        encoding = null;
      }

      // Write data if needed and end
      if (!data) {
        this._ended = this._ending = true;
        this._currentRequest.end(null, null, callback);
      }
      else {
        var self = this;
        var currentRequest = this._currentRequest;
        this.write(data, encoding, function () {
          self._ended = true;
          currentRequest.end(null, null, callback);
        });
        this._ending = true;
      }
    };

    // Sets a header value on the current native request
    RedirectableRequest.prototype.setHeader = function (name, value) {
      this._options.headers[name] = value;
      this._currentRequest.setHeader(name, value);
    };

    // Clears a header value on the current native request
    RedirectableRequest.prototype.removeHeader = function (name) {
      delete this._options.headers[name];
      this._currentRequest.removeHeader(name);
    };

    // Global timeout for all underlying requests
    RedirectableRequest.prototype.setTimeout = function (msecs, callback) {
      var self = this;

      // Destroys the socket on timeout
      function destroyOnTimeout(socket) {
        socket.setTimeout(msecs);
        socket.removeListener("timeout", socket.destroy);
        socket.addListener("timeout", socket.destroy);
      }

      // Sets up a timer to trigger a timeout event
      function startTimer(socket) {
        if (self._timeout) {
          clearTimeout(self._timeout);
        }
        self._timeout = setTimeout(function () {
          self.emit("timeout");
          clearTimer();
        }, msecs);
        destroyOnTimeout(socket);
      }

      // Stops a timeout from triggering
      function clearTimer() {
        // Clear the timeout
        if (self._timeout) {
          clearTimeout(self._timeout);
          self._timeout = null;
        }

        // Clean up all attached listeners
        self.removeListener("abort", clearTimer);
        self.removeListener("error", clearTimer);
        self.removeListener("response", clearTimer);
        if (callback) {
          self.removeListener("timeout", callback);
        }
        if (!self.socket) {
          self._currentRequest.removeListener("socket", startTimer);
        }
      }

      // Attach callback if passed
      if (callback) {
        this.on("timeout", callback);
      }

      // Start the timer if or when the socket is opened
      if (this.socket) {
        startTimer(this.socket);
      }
      else {
        this._currentRequest.once("socket", startTimer);
      }

      // Clean up on events
      this.on("socket", destroyOnTimeout);
      this.on("abort", clearTimer);
      this.on("error", clearTimer);
      this.on("response", clearTimer);

      return this;
    };

    // Proxy all other public ClientRequest methods
    [
      "flushHeaders", "getHeader",
      "setNoDelay", "setSocketKeepAlive",
    ].forEach(function (method) {
      RedirectableRequest.prototype[method] = function (a, b) {
        return this._currentRequest[method](a, b);
      };
    });

    // Proxy all public ClientRequest properties
    ["aborted", "connection", "socket"].forEach(function (property) {
      Object.defineProperty(RedirectableRequest.prototype, property, {
        get: function () { return this._currentRequest[property]; },
      });
    });

    RedirectableRequest.prototype._sanitizeOptions = function (options) {
      // Ensure headers are always present
      if (!options.headers) {
        options.headers = {};
      }

      // Since http.request treats host as an alias of hostname,
      // but the url module interprets host as hostname plus port,
      // eliminate the host property to avoid confusion.
      if (options.host) {
        // Use hostname if set, because it has precedence
        if (!options.hostname) {
          options.hostname = options.host;
        }
        delete options.host;
      }

      // Complete the URL object when necessary
      if (!options.pathname && options.path) {
        var searchPos = options.path.indexOf("?");
        if (searchPos < 0) {
          options.pathname = options.path;
        }
        else {
          options.pathname = options.path.substring(0, searchPos);
          options.search = options.path.substring(searchPos);
        }
      }
    };


    // Executes the next native request (initial or redirect)
    RedirectableRequest.prototype._performRequest = function () {
      // Load the native protocol
      var protocol = this._options.protocol;
      var nativeProtocol = this._options.nativeProtocols[protocol];
      if (!nativeProtocol) {
        this.emit("error", new TypeError("Unsupported protocol " + protocol));
        return;
      }

      // If specified, use the agent corresponding to the protocol
      // (HTTP and HTTPS use different types of agents)
      if (this._options.agents) {
        var scheme = protocol.substr(0, protocol.length - 1);
        this._options.agent = this._options.agents[scheme];
      }

      // Create the native request
      var request = this._currentRequest =
            nativeProtocol.request(this._options, this._onNativeResponse);
      this._currentUrl = url$1.format(this._options);

      // Set up event handlers
      request._redirectable = this;
      for (var e = 0; e < events$1.length; e++) {
        request.on(events$1[e], eventHandlers[events$1[e]]);
      }

      // End a redirected request
      // (The first request must be ended explicitly with RedirectableRequest#end)
      if (this._isRedirect) {
        // Write the request entity and end.
        var i = 0;
        var self = this;
        var buffers = this._requestBodyBuffers;
        (function writeNext(error) {
          // Only write if this request has not been redirected yet
          /* istanbul ignore else */
          if (request === self._currentRequest) {
            // Report any write errors
            /* istanbul ignore if */
            if (error) {
              self.emit("error", error);
            }
            // Write the next buffer if there are still left
            else if (i < buffers.length) {
              var buffer = buffers[i++];
              /* istanbul ignore else */
              if (!request.finished) {
                request.write(buffer.data, buffer.encoding, writeNext);
              }
            }
            // End the request if `end` has been called on us
            else if (self._ended) {
              request.end();
            }
          }
        }());
      }
    };

    // Processes a response from the current native request
    RedirectableRequest.prototype._processResponse = function (response) {
      // Store the redirected response
      var statusCode = response.statusCode;
      if (this._options.trackRedirects) {
        this._redirects.push({
          url: this._currentUrl,
          headers: response.headers,
          statusCode: statusCode,
        });
      }

      // RFC7231§6.4: The 3xx (Redirection) class of status code indicates
      // that further action needs to be taken by the user agent in order to
      // fulfill the request. If a Location header field is provided,
      // the user agent MAY automatically redirect its request to the URI
      // referenced by the Location field value,
      // even if the specific status code is not understood.
      var location = response.headers.location;
      if (location && this._options.followRedirects !== false &&
          statusCode >= 300 && statusCode < 400) {
        // Abort the current request
        abortRequest(this._currentRequest);
        // Discard the remainder of the response to avoid waiting for data
        response.destroy();

        // RFC7231§6.4: A client SHOULD detect and intervene
        // in cyclical redirections (i.e., "infinite" redirection loops).
        if (++this._redirectCount > this._options.maxRedirects) {
          this.emit("error", new TooManyRedirectsError());
          return;
        }

        // RFC7231§6.4: Automatic redirection needs to done with
        // care for methods not known to be safe, […]
        // RFC7231§6.4.2–3: For historical reasons, a user agent MAY change
        // the request method from POST to GET for the subsequent request.
        if ((statusCode === 301 || statusCode === 302) && this._options.method === "POST" ||
            // RFC7231§6.4.4: The 303 (See Other) status code indicates that
            // the server is redirecting the user agent to a different resource […]
            // A user agent can perform a retrieval request targeting that URI
            // (a GET or HEAD request if using HTTP) […]
            (statusCode === 303) && !/^(?:GET|HEAD)$/.test(this._options.method)) {
          this._options.method = "GET";
          // Drop a possible entity and headers related to it
          this._requestBodyBuffers = [];
          removeMatchingHeaders(/^content-/i, this._options.headers);
        }

        // Drop the Host header, as the redirect might lead to a different host
        var currentHostHeader = removeMatchingHeaders(/^host$/i, this._options.headers);

        // If the redirect is relative, carry over the host of the last request
        var currentUrlParts = url$1.parse(this._currentUrl);
        var currentHost = currentHostHeader || currentUrlParts.host;
        var currentUrl = /^\w+:/.test(location) ? this._currentUrl :
          url$1.format(Object.assign(currentUrlParts, { host: currentHost }));

        // Determine the URL of the redirection
        var redirectUrl;
        try {
          redirectUrl = url$1.resolve(currentUrl, location);
        }
        catch (cause) {
          this.emit("error", new RedirectionError(cause));
          return;
        }

        // Create the redirected request
        debug("redirecting to", redirectUrl);
        this._isRedirect = true;
        var redirectUrlParts = url$1.parse(redirectUrl);
        Object.assign(this._options, redirectUrlParts);

        // Drop the confidential headers when redirecting to another domain
        if (!(redirectUrlParts.host === currentHost || isSubdomainOf(redirectUrlParts.host, currentHost))) {
          removeMatchingHeaders(/^(?:authorization|cookie)$/i, this._options.headers);
        }

        // Evaluate the beforeRedirect callback
        if (typeof this._options.beforeRedirect === "function") {
          var responseDetails = { headers: response.headers };
          try {
            this._options.beforeRedirect.call(null, this._options, responseDetails);
          }
          catch (err) {
            this.emit("error", err);
            return;
          }
          this._sanitizeOptions(this._options);
        }

        // Perform the redirected request
        try {
          this._performRequest();
        }
        catch (cause) {
          this.emit("error", new RedirectionError(cause));
        }
      }
      else {
        // The response is not a redirect; return it as-is
        response.responseUrl = this._currentUrl;
        response.redirects = this._redirects;
        this.emit("response", response);

        // Clean up
        this._requestBodyBuffers = [];
      }
    };

    // Wraps the key/value object of protocols with redirect functionality
    function wrap(protocols) {
      // Default settings
      var exports = {
        maxRedirects: 21,
        maxBodyLength: 10 * 1024 * 1024,
      };

      // Wrap each protocol
      var nativeProtocols = {};
      Object.keys(protocols).forEach(function (scheme) {
        var protocol = scheme + ":";
        var nativeProtocol = nativeProtocols[protocol] = protocols[scheme];
        var wrappedProtocol = exports[scheme] = Object.create(nativeProtocol);

        // Executes a request, following redirects
        function request(input, options, callback) {
          // Parse parameters
          if (typeof input === "string") {
            var urlStr = input;
            try {
              input = urlToOptions(new URL(urlStr));
            }
            catch (err) {
              /* istanbul ignore next */
              input = url$1.parse(urlStr);
            }
          }
          else if (URL && (input instanceof URL)) {
            input = urlToOptions(input);
          }
          else {
            callback = options;
            options = input;
            input = { protocol: protocol };
          }
          if (typeof options === "function") {
            callback = options;
            options = null;
          }

          // Set defaults
          options = Object.assign({
            maxRedirects: exports.maxRedirects,
            maxBodyLength: exports.maxBodyLength,
          }, input, options);
          options.nativeProtocols = nativeProtocols;

          assert$3.equal(options.protocol, protocol, "protocol mismatch");
          debug("options", options);
          return new RedirectableRequest(options, callback);
        }

        // Executes a GET request, following redirects
        function get(input, options, callback) {
          var wrappedRequest = wrappedProtocol.request(input, options, callback);
          wrappedRequest.end();
          return wrappedRequest;
        }

        // Expose the properties on the wrapped protocol
        Object.defineProperties(wrappedProtocol, {
          request: { value: request, configurable: true, enumerable: true, writable: true },
          get: { value: get, configurable: true, enumerable: true, writable: true },
        });
      });
      return exports;
    }

    /* istanbul ignore next */
    function noop$3() { /* empty */ }

    // from https://github.com/nodejs/node/blob/master/lib/internal/url.js
    function urlToOptions(urlObject) {
      var options = {
        protocol: urlObject.protocol,
        hostname: urlObject.hostname.startsWith("[") ?
          /* istanbul ignore next */
          urlObject.hostname.slice(1, -1) :
          urlObject.hostname,
        hash: urlObject.hash,
        search: urlObject.search,
        pathname: urlObject.pathname,
        path: urlObject.pathname + urlObject.search,
        href: urlObject.href,
      };
      if (urlObject.port !== "") {
        options.port = Number(urlObject.port);
      }
      return options;
    }

    function removeMatchingHeaders(regex, headers) {
      var lastValue;
      for (var header in headers) {
        if (regex.test(header)) {
          lastValue = headers[header];
          delete headers[header];
        }
      }
      return (lastValue === null || typeof lastValue === "undefined") ?
        undefined : String(lastValue).trim();
    }

    function createErrorType(code, defaultMessage) {
      function CustomError(cause) {
        Error.captureStackTrace(this, this.constructor);
        if (!cause) {
          this.message = defaultMessage;
        }
        else {
          this.message = defaultMessage + ": " + cause.message;
          this.cause = cause;
        }
      }
      CustomError.prototype = new Error();
      CustomError.prototype.constructor = CustomError;
      CustomError.prototype.name = "Error [" + code + "]";
      CustomError.prototype.code = code;
      return CustomError;
    }

    function abortRequest(request) {
      for (var e = 0; e < events$1.length; e++) {
        request.removeListener(events$1[e], eventHandlers[events$1[e]]);
      }
      request.on("error", noop$3);
      request.abort();
    }

    function isSubdomainOf(subdomain, domain) {
      const dot = subdomain.length - domain.length - 1;
      return dot > 0 && subdomain[dot] === "." && subdomain.endsWith(domain);
    }

    // Exports
    followRedirects.exports = wrap({ http: http$1, https: https$1 });
    followRedirects.exports.wrap = wrap;

    var data = {
      "version": "0.25.0"
    };

    var utils$a = utils$i;
    var settle = settle$2;
    var buildFullPath = buildFullPath$2;
    var buildURL$1 = buildURL$3;
    var http = require$$1__default["default"];
    var https = require$$2__default$1["default"];
    var httpFollow = followRedirects.exports.http;
    var httpsFollow = followRedirects.exports.https;
    var url = require$$0__default$5["default"];
    var zlib = require$$8__default["default"];
    var VERSION$1 = data.version;
    var createError = createError$3;
    var enhanceError$1 = enhanceError$3;
    var defaults$7 = defaults_1$1;
    var Cancel$2 = Cancel_1;

    var isHttps = /https:?/;

    /**
     *
     * @param {http.ClientRequestArgs} options
     * @param {AxiosProxyConfig} proxy
     * @param {string} location
     */
    function setProxy(options, proxy, location) {
      options.hostname = proxy.host;
      options.host = proxy.host;
      options.port = proxy.port;
      options.path = location;

      // Basic proxy authorization
      if (proxy.auth) {
        var base64 = Buffer.from(proxy.auth.username + ':' + proxy.auth.password, 'utf8').toString('base64');
        options.headers['Proxy-Authorization'] = 'Basic ' + base64;
      }

      // If a proxy is used, any redirects must also pass through the proxy
      options.beforeRedirect = function beforeRedirect(redirection) {
        redirection.headers.host = redirection.host;
        setProxy(redirection, proxy, redirection.href);
      };
    }

    /*eslint consistent-return:0*/
    var http_1 = function httpAdapter(config) {
      return new Promise(function dispatchHttpRequest(resolvePromise, rejectPromise) {
        var onCanceled;
        function done() {
          if (config.cancelToken) {
            config.cancelToken.unsubscribe(onCanceled);
          }

          if (config.signal) {
            config.signal.removeEventListener('abort', onCanceled);
          }
        }
        var resolve = function resolve(value) {
          done();
          resolvePromise(value);
        };
        var rejected = false;
        var reject = function reject(value) {
          done();
          rejected = true;
          rejectPromise(value);
        };
        var data = config.data;
        var headers = config.headers;
        var headerNames = {};

        Object.keys(headers).forEach(function storeLowerName(name) {
          headerNames[name.toLowerCase()] = name;
        });

        // Set User-Agent (required by some servers)
        // See https://github.com/axios/axios/issues/69
        if ('user-agent' in headerNames) {
          // User-Agent is specified; handle case where no UA header is desired
          if (!headers[headerNames['user-agent']]) {
            delete headers[headerNames['user-agent']];
          }
          // Otherwise, use specified value
        } else {
          // Only set header if it hasn't been set in config
          headers['User-Agent'] = 'axios/' + VERSION$1;
        }

        if (data && !utils$a.isStream(data)) {
          if (Buffer.isBuffer(data)) ; else if (utils$a.isArrayBuffer(data)) {
            data = Buffer.from(new Uint8Array(data));
          } else if (utils$a.isString(data)) {
            data = Buffer.from(data, 'utf-8');
          } else {
            return reject(createError(
              'Data after transformation must be a string, an ArrayBuffer, a Buffer, or a Stream',
              config
            ));
          }

          if (config.maxBodyLength > -1 && data.length > config.maxBodyLength) {
            return reject(createError('Request body larger than maxBodyLength limit', config));
          }

          // Add Content-Length header if data exists
          if (!headerNames['content-length']) {
            headers['Content-Length'] = data.length;
          }
        }

        // HTTP basic authentication
        var auth = undefined;
        if (config.auth) {
          var username = config.auth.username || '';
          var password = config.auth.password || '';
          auth = username + ':' + password;
        }

        // Parse url
        var fullPath = buildFullPath(config.baseURL, config.url);
        var parsed = url.parse(fullPath);
        var protocol = parsed.protocol || 'http:';

        if (!auth && parsed.auth) {
          var urlAuth = parsed.auth.split(':');
          var urlUsername = urlAuth[0] || '';
          var urlPassword = urlAuth[1] || '';
          auth = urlUsername + ':' + urlPassword;
        }

        if (auth && headerNames.authorization) {
          delete headers[headerNames.authorization];
        }

        var isHttpsRequest = isHttps.test(protocol);
        var agent = isHttpsRequest ? config.httpsAgent : config.httpAgent;

        var options = {
          path: buildURL$1(parsed.path, config.params, config.paramsSerializer).replace(/^\?/, ''),
          method: config.method.toUpperCase(),
          headers: headers,
          agent: agent,
          agents: { http: config.httpAgent, https: config.httpsAgent },
          auth: auth
        };

        if (config.socketPath) {
          options.socketPath = config.socketPath;
        } else {
          options.hostname = parsed.hostname;
          options.port = parsed.port;
        }

        var proxy = config.proxy;
        if (!proxy && proxy !== false) {
          var proxyEnv = protocol.slice(0, -1) + '_proxy';
          var proxyUrl = process.env[proxyEnv] || process.env[proxyEnv.toUpperCase()];
          if (proxyUrl) {
            var parsedProxyUrl = url.parse(proxyUrl);
            var noProxyEnv = process.env.no_proxy || process.env.NO_PROXY;
            var shouldProxy = true;

            if (noProxyEnv) {
              var noProxy = noProxyEnv.split(',').map(function trim(s) {
                return s.trim();
              });

              shouldProxy = !noProxy.some(function proxyMatch(proxyElement) {
                if (!proxyElement) {
                  return false;
                }
                if (proxyElement === '*') {
                  return true;
                }
                if (proxyElement[0] === '.' &&
                    parsed.hostname.substr(parsed.hostname.length - proxyElement.length) === proxyElement) {
                  return true;
                }

                return parsed.hostname === proxyElement;
              });
            }

            if (shouldProxy) {
              proxy = {
                host: parsedProxyUrl.hostname,
                port: parsedProxyUrl.port,
                protocol: parsedProxyUrl.protocol
              };

              if (parsedProxyUrl.auth) {
                var proxyUrlAuth = parsedProxyUrl.auth.split(':');
                proxy.auth = {
                  username: proxyUrlAuth[0],
                  password: proxyUrlAuth[1]
                };
              }
            }
          }
        }

        if (proxy) {
          options.headers.host = parsed.hostname + (parsed.port ? ':' + parsed.port : '');
          setProxy(options, proxy, protocol + '//' + parsed.hostname + (parsed.port ? ':' + parsed.port : '') + options.path);
        }

        var transport;
        var isHttpsProxy = isHttpsRequest && (proxy ? isHttps.test(proxy.protocol) : true);
        if (config.transport) {
          transport = config.transport;
        } else if (config.maxRedirects === 0) {
          transport = isHttpsProxy ? https : http;
        } else {
          if (config.maxRedirects) {
            options.maxRedirects = config.maxRedirects;
          }
          transport = isHttpsProxy ? httpsFollow : httpFollow;
        }

        if (config.maxBodyLength > -1) {
          options.maxBodyLength = config.maxBodyLength;
        }

        if (config.insecureHTTPParser) {
          options.insecureHTTPParser = config.insecureHTTPParser;
        }

        // Create the request
        var req = transport.request(options, function handleResponse(res) {
          if (req.aborted) return;

          // uncompress the response body transparently if required
          var stream = res;

          // return the last request in case of redirects
          var lastRequest = res.req || req;


          // if no content, is HEAD request or decompress disabled we should not decompress
          if (res.statusCode !== 204 && lastRequest.method !== 'HEAD' && config.decompress !== false) {
            switch (res.headers['content-encoding']) {
            /*eslint default-case:0*/
            case 'gzip':
            case 'compress':
            case 'deflate':
            // add the unzipper to the body stream processing pipeline
              stream = stream.pipe(zlib.createUnzip());

              // remove the content-encoding in order to not confuse downstream operations
              delete res.headers['content-encoding'];
              break;
            }
          }

          var response = {
            status: res.statusCode,
            statusText: res.statusMessage,
            headers: res.headers,
            config: config,
            request: lastRequest
          };

          if (config.responseType === 'stream') {
            response.data = stream;
            settle(resolve, reject, response);
          } else {
            var responseBuffer = [];
            var totalResponseBytes = 0;
            stream.on('data', function handleStreamData(chunk) {
              responseBuffer.push(chunk);
              totalResponseBytes += chunk.length;

              // make sure the content length is not over the maxContentLength if specified
              if (config.maxContentLength > -1 && totalResponseBytes > config.maxContentLength) {
                // stream.destoy() emit aborted event before calling reject() on Node.js v16
                rejected = true;
                stream.destroy();
                reject(createError('maxContentLength size of ' + config.maxContentLength + ' exceeded',
                  config, null, lastRequest));
              }
            });

            stream.on('aborted', function handlerStreamAborted() {
              if (rejected) {
                return;
              }
              stream.destroy();
              reject(createError('error request aborted', config, 'ERR_REQUEST_ABORTED', lastRequest));
            });

            stream.on('error', function handleStreamError(err) {
              if (req.aborted) return;
              reject(enhanceError$1(err, config, null, lastRequest));
            });

            stream.on('end', function handleStreamEnd() {
              try {
                var responseData = responseBuffer.length === 1 ? responseBuffer[0] : Buffer.concat(responseBuffer);
                if (config.responseType !== 'arraybuffer') {
                  responseData = responseData.toString(config.responseEncoding);
                  if (!config.responseEncoding || config.responseEncoding === 'utf8') {
                    responseData = utils$a.stripBOM(responseData);
                  }
                }
                response.data = responseData;
              } catch (err) {
                reject(enhanceError$1(err, config, err.code, response.request, response));
              }
              settle(resolve, reject, response);
            });
          }
        });

        // Handle errors
        req.on('error', function handleRequestError(err) {
          if (req.aborted && err.code !== 'ERR_FR_TOO_MANY_REDIRECTS') return;
          reject(enhanceError$1(err, config, null, req));
        });

        // set tcp keep alive to prevent drop connection by peer
        req.on('socket', function handleRequestSocket(socket) {
          // default interval of sending ack packet is 1 minute
          socket.setKeepAlive(true, 1000 * 60);
        });

        // Handle request timeout
        if (config.timeout) {
          // This is forcing a int timeout to avoid problems if the `req` interface doesn't handle other types.
          var timeout = parseInt(config.timeout, 10);

          if (isNaN(timeout)) {
            reject(createError(
              'error trying to parse `config.timeout` to int',
              config,
              'ERR_PARSE_TIMEOUT',
              req
            ));

            return;
          }

          // Sometime, the response will be very slow, and does not respond, the connect event will be block by event loop system.
          // And timer callback will be fired, and abort() will be invoked before connection, then get "socket hang up" and code ECONNRESET.
          // At this time, if we have a large number of request, nodejs will hang up some socket on background. and the number will up and up.
          // And then these socket which be hang up will devoring CPU little by little.
          // ClientRequest.setTimeout will be fired on the specify milliseconds, and can make sure that abort() will be fired after connect.
          req.setTimeout(timeout, function handleRequestTimeout() {
            req.abort();
            var transitional = config.transitional || defaults$7.transitional;
            reject(createError(
              'timeout of ' + timeout + 'ms exceeded',
              config,
              transitional.clarifyTimeoutError ? 'ETIMEDOUT' : 'ECONNABORTED',
              req
            ));
          });
        }

        if (config.cancelToken || config.signal) {
          // Handle cancellation
          // eslint-disable-next-line func-names
          onCanceled = function(cancel) {
            if (req.aborted) return;

            req.abort();
            reject(!cancel || (cancel && cancel.type) ? new Cancel$2('canceled') : cancel);
          };

          config.cancelToken && config.cancelToken.subscribe(onCanceled);
          if (config.signal) {
            config.signal.aborted ? onCanceled() : config.signal.addEventListener('abort', onCanceled);
          }
        }


        // Send the request
        if (utils$a.isStream(data)) {
          data.on('error', function handleStreamError(err) {
            reject(enhanceError$1(err, config, null, req));
          }).pipe(req);
        } else {
          req.end(data);
        }
      });
    };

    var utils$9 = utils$i;
    var normalizeHeaderName = normalizeHeaderName$1;
    var enhanceError = enhanceError$3;

    var DEFAULT_CONTENT_TYPE = {
      'Content-Type': 'application/x-www-form-urlencoded'
    };

    function setContentTypeIfUnset(headers, value) {
      if (!utils$9.isUndefined(headers) && utils$9.isUndefined(headers['Content-Type'])) {
        headers['Content-Type'] = value;
      }
    }

    function getDefaultAdapter() {
      var adapter;
      if (typeof XMLHttpRequest !== 'undefined') {
        // For browsers use XHR adapter
        adapter = xhr;
      } else if (typeof process !== 'undefined' && Object.prototype.toString.call(process) === '[object process]') {
        // For node use HTTP adapter
        adapter = http_1;
      }
      return adapter;
    }

    function stringifySafely(rawValue, parser, encoder) {
      if (utils$9.isString(rawValue)) {
        try {
          (parser || JSON.parse)(rawValue);
          return utils$9.trim(rawValue);
        } catch (e) {
          if (e.name !== 'SyntaxError') {
            throw e;
          }
        }
      }

      return (encoder || JSON.stringify)(rawValue);
    }

    var defaults$6 = {

      transitional: {
        silentJSONParsing: true,
        forcedJSONParsing: true,
        clarifyTimeoutError: false
      },

      adapter: getDefaultAdapter(),

      transformRequest: [function transformRequest(data, headers) {
        normalizeHeaderName(headers, 'Accept');
        normalizeHeaderName(headers, 'Content-Type');

        if (utils$9.isFormData(data) ||
          utils$9.isArrayBuffer(data) ||
          utils$9.isBuffer(data) ||
          utils$9.isStream(data) ||
          utils$9.isFile(data) ||
          utils$9.isBlob(data)
        ) {
          return data;
        }
        if (utils$9.isArrayBufferView(data)) {
          return data.buffer;
        }
        if (utils$9.isURLSearchParams(data)) {
          setContentTypeIfUnset(headers, 'application/x-www-form-urlencoded;charset=utf-8');
          return data.toString();
        }
        if (utils$9.isObject(data) || (headers && headers['Content-Type'] === 'application/json')) {
          setContentTypeIfUnset(headers, 'application/json');
          return stringifySafely(data);
        }
        return data;
      }],

      transformResponse: [function transformResponse(data) {
        var transitional = this.transitional || defaults$6.transitional;
        var silentJSONParsing = transitional && transitional.silentJSONParsing;
        var forcedJSONParsing = transitional && transitional.forcedJSONParsing;
        var strictJSONParsing = !silentJSONParsing && this.responseType === 'json';

        if (strictJSONParsing || (forcedJSONParsing && utils$9.isString(data) && data.length)) {
          try {
            return JSON.parse(data);
          } catch (e) {
            if (strictJSONParsing) {
              if (e.name === 'SyntaxError') {
                throw enhanceError(e, this, 'E_JSON_PARSE');
              }
              throw e;
            }
          }
        }

        return data;
      }],

      /**
       * A timeout in milliseconds to abort a request. If set to 0 (default) a
       * timeout is not created.
       */
      timeout: 0,

      xsrfCookieName: 'XSRF-TOKEN',
      xsrfHeaderName: 'X-XSRF-TOKEN',

      maxContentLength: -1,
      maxBodyLength: -1,

      validateStatus: function validateStatus(status) {
        return status >= 200 && status < 300;
      },

      headers: {
        common: {
          'Accept': 'application/json, text/plain, */*'
        }
      }
    };

    utils$9.forEach(['delete', 'get', 'head'], function forEachMethodNoData(method) {
      defaults$6.headers[method] = {};
    });

    utils$9.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
      defaults$6.headers[method] = utils$9.merge(DEFAULT_CONTENT_TYPE);
    });

    var defaults_1$1 = defaults$6;

    var utils$8 = utils$i;
    var defaults$5 = defaults_1$1;

    /**
     * Transform the data for a request or a response
     *
     * @param {Object|String} data The data to be transformed
     * @param {Array} headers The headers for the request or response
     * @param {Array|Function} fns A single function or Array of functions
     * @returns {*} The resulting transformed data
     */
    var transformData$1 = function transformData(data, headers, fns) {
      var context = this || defaults$5;
      /*eslint no-param-reassign:0*/
      utils$8.forEach(fns, function transform(fn) {
        data = fn.call(context, data, headers);
      });

      return data;
    };

    var isCancel$1 = function isCancel(value) {
      return !!(value && value.__CANCEL__);
    };

    var utils$7 = utils$i;
    var transformData = transformData$1;
    var isCancel = isCancel$1;
    var defaults$4 = defaults_1$1;
    var Cancel$1 = Cancel_1;

    /**
     * Throws a `Cancel` if cancellation has been requested.
     */
    function throwIfCancellationRequested(config) {
      if (config.cancelToken) {
        config.cancelToken.throwIfRequested();
      }

      if (config.signal && config.signal.aborted) {
        throw new Cancel$1('canceled');
      }
    }

    /**
     * Dispatch a request to the server using the configured adapter.
     *
     * @param {object} config The config that is to be used for the request
     * @returns {Promise} The Promise to be fulfilled
     */
    var dispatchRequest$1 = function dispatchRequest(config) {
      throwIfCancellationRequested(config);

      // Ensure headers exist
      config.headers = config.headers || {};

      // Transform request data
      config.data = transformData.call(
        config,
        config.data,
        config.headers,
        config.transformRequest
      );

      // Flatten headers
      config.headers = utils$7.merge(
        config.headers.common || {},
        config.headers[config.method] || {},
        config.headers
      );

      utils$7.forEach(
        ['delete', 'get', 'head', 'post', 'put', 'patch', 'common'],
        function cleanHeaderConfig(method) {
          delete config.headers[method];
        }
      );

      var adapter = config.adapter || defaults$4.adapter;

      return adapter(config).then(function onAdapterResolution(response) {
        throwIfCancellationRequested(config);

        // Transform response data
        response.data = transformData.call(
          config,
          response.data,
          response.headers,
          config.transformResponse
        );

        return response;
      }, function onAdapterRejection(reason) {
        if (!isCancel(reason)) {
          throwIfCancellationRequested(config);

          // Transform response data
          if (reason && reason.response) {
            reason.response.data = transformData.call(
              config,
              reason.response.data,
              reason.response.headers,
              config.transformResponse
            );
          }
        }

        return Promise.reject(reason);
      });
    };

    var utils$6 = utils$i;

    /**
     * Config-specific merge-function which creates a new config-object
     * by merging two configuration objects together.
     *
     * @param {Object} config1
     * @param {Object} config2
     * @returns {Object} New object resulting from merging config2 to config1
     */
    var mergeConfig$2 = function mergeConfig(config1, config2) {
      // eslint-disable-next-line no-param-reassign
      config2 = config2 || {};
      var config = {};

      function getMergedValue(target, source) {
        if (utils$6.isPlainObject(target) && utils$6.isPlainObject(source)) {
          return utils$6.merge(target, source);
        } else if (utils$6.isPlainObject(source)) {
          return utils$6.merge({}, source);
        } else if (utils$6.isArray(source)) {
          return source.slice();
        }
        return source;
      }

      // eslint-disable-next-line consistent-return
      function mergeDeepProperties(prop) {
        if (!utils$6.isUndefined(config2[prop])) {
          return getMergedValue(config1[prop], config2[prop]);
        } else if (!utils$6.isUndefined(config1[prop])) {
          return getMergedValue(undefined, config1[prop]);
        }
      }

      // eslint-disable-next-line consistent-return
      function valueFromConfig2(prop) {
        if (!utils$6.isUndefined(config2[prop])) {
          return getMergedValue(undefined, config2[prop]);
        }
      }

      // eslint-disable-next-line consistent-return
      function defaultToConfig2(prop) {
        if (!utils$6.isUndefined(config2[prop])) {
          return getMergedValue(undefined, config2[prop]);
        } else if (!utils$6.isUndefined(config1[prop])) {
          return getMergedValue(undefined, config1[prop]);
        }
      }

      // eslint-disable-next-line consistent-return
      function mergeDirectKeys(prop) {
        if (prop in config2) {
          return getMergedValue(config1[prop], config2[prop]);
        } else if (prop in config1) {
          return getMergedValue(undefined, config1[prop]);
        }
      }

      var mergeMap = {
        'url': valueFromConfig2,
        'method': valueFromConfig2,
        'data': valueFromConfig2,
        'baseURL': defaultToConfig2,
        'transformRequest': defaultToConfig2,
        'transformResponse': defaultToConfig2,
        'paramsSerializer': defaultToConfig2,
        'timeout': defaultToConfig2,
        'timeoutMessage': defaultToConfig2,
        'withCredentials': defaultToConfig2,
        'adapter': defaultToConfig2,
        'responseType': defaultToConfig2,
        'xsrfCookieName': defaultToConfig2,
        'xsrfHeaderName': defaultToConfig2,
        'onUploadProgress': defaultToConfig2,
        'onDownloadProgress': defaultToConfig2,
        'decompress': defaultToConfig2,
        'maxContentLength': defaultToConfig2,
        'maxBodyLength': defaultToConfig2,
        'transport': defaultToConfig2,
        'httpAgent': defaultToConfig2,
        'httpsAgent': defaultToConfig2,
        'cancelToken': defaultToConfig2,
        'socketPath': defaultToConfig2,
        'responseEncoding': defaultToConfig2,
        'validateStatus': mergeDirectKeys
      };

      utils$6.forEach(Object.keys(config1).concat(Object.keys(config2)), function computeConfigValue(prop) {
        var merge = mergeMap[prop] || mergeDeepProperties;
        var configValue = merge(prop);
        (utils$6.isUndefined(configValue) && merge !== mergeDirectKeys) || (config[prop] = configValue);
      });

      return config;
    };

    var VERSION = data.version;

    var validators$1 = {};

    // eslint-disable-next-line func-names
    ['object', 'boolean', 'number', 'function', 'string', 'symbol'].forEach(function(type, i) {
      validators$1[type] = function validator(thing) {
        return typeof thing === type || 'a' + (i < 1 ? 'n ' : ' ') + type;
      };
    });

    var deprecatedWarnings = {};

    /**
     * Transitional option validator
     * @param {function|boolean?} validator - set to false if the transitional option has been removed
     * @param {string?} version - deprecated version / removed since version
     * @param {string?} message - some message with additional info
     * @returns {function}
     */
    validators$1.transitional = function transitional(validator, version, message) {
      function formatMessage(opt, desc) {
        return '[Axios v' + VERSION + '] Transitional option \'' + opt + '\'' + desc + (message ? '. ' + message : '');
      }

      // eslint-disable-next-line func-names
      return function(value, opt, opts) {
        if (validator === false) {
          throw new Error(formatMessage(opt, ' has been removed' + (version ? ' in ' + version : '')));
        }

        if (version && !deprecatedWarnings[opt]) {
          deprecatedWarnings[opt] = true;
          // eslint-disable-next-line no-console
          console.warn(
            formatMessage(
              opt,
              ' has been deprecated since v' + version + ' and will be removed in the near future'
            )
          );
        }

        return validator ? validator(value, opt, opts) : true;
      };
    };

    /**
     * Assert object's properties type
     * @param {object} options
     * @param {object} schema
     * @param {boolean?} allowUnknown
     */

    function assertOptions(options, schema, allowUnknown) {
      if (typeof options !== 'object') {
        throw new TypeError('options must be an object');
      }
      var keys = Object.keys(options);
      var i = keys.length;
      while (i-- > 0) {
        var opt = keys[i];
        var validator = schema[opt];
        if (validator) {
          var value = options[opt];
          var result = value === undefined || validator(value, opt, options);
          if (result !== true) {
            throw new TypeError('option ' + opt + ' must be ' + result);
          }
          continue;
        }
        if (allowUnknown !== true) {
          throw Error('Unknown option ' + opt);
        }
      }
    }

    var validator$1 = {
      assertOptions: assertOptions,
      validators: validators$1
    };

    var utils$5 = utils$i;
    var buildURL = buildURL$3;
    var InterceptorManager = InterceptorManager_1;
    var dispatchRequest = dispatchRequest$1;
    var mergeConfig$1 = mergeConfig$2;
    var validator = validator$1;

    var validators = validator.validators;
    /**
     * Create a new instance of Axios
     *
     * @param {Object} instanceConfig The default config for the instance
     */
    function Axios$1(instanceConfig) {
      this.defaults = instanceConfig;
      this.interceptors = {
        request: new InterceptorManager(),
        response: new InterceptorManager()
      };
    }

    /**
     * Dispatch a request
     *
     * @param {Object} config The config specific for this request (merged with this.defaults)
     */
    Axios$1.prototype.request = function request(configOrUrl, config) {
      /*eslint no-param-reassign:0*/
      // Allow for axios('example/url'[, config]) a la fetch API
      if (typeof configOrUrl === 'string') {
        config = config || {};
        config.url = configOrUrl;
      } else {
        config = configOrUrl || {};
      }

      if (!config.url) {
        throw new Error('Provided config url is not valid');
      }

      config = mergeConfig$1(this.defaults, config);

      // Set config.method
      if (config.method) {
        config.method = config.method.toLowerCase();
      } else if (this.defaults.method) {
        config.method = this.defaults.method.toLowerCase();
      } else {
        config.method = 'get';
      }

      var transitional = config.transitional;

      if (transitional !== undefined) {
        validator.assertOptions(transitional, {
          silentJSONParsing: validators.transitional(validators.boolean),
          forcedJSONParsing: validators.transitional(validators.boolean),
          clarifyTimeoutError: validators.transitional(validators.boolean)
        }, false);
      }

      // filter out skipped interceptors
      var requestInterceptorChain = [];
      var synchronousRequestInterceptors = true;
      this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
        if (typeof interceptor.runWhen === 'function' && interceptor.runWhen(config) === false) {
          return;
        }

        synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;

        requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
      });

      var responseInterceptorChain = [];
      this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
        responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
      });

      var promise;

      if (!synchronousRequestInterceptors) {
        var chain = [dispatchRequest, undefined];

        Array.prototype.unshift.apply(chain, requestInterceptorChain);
        chain = chain.concat(responseInterceptorChain);

        promise = Promise.resolve(config);
        while (chain.length) {
          promise = promise.then(chain.shift(), chain.shift());
        }

        return promise;
      }


      var newConfig = config;
      while (requestInterceptorChain.length) {
        var onFulfilled = requestInterceptorChain.shift();
        var onRejected = requestInterceptorChain.shift();
        try {
          newConfig = onFulfilled(newConfig);
        } catch (error) {
          onRejected(error);
          break;
        }
      }

      try {
        promise = dispatchRequest(newConfig);
      } catch (error) {
        return Promise.reject(error);
      }

      while (responseInterceptorChain.length) {
        promise = promise.then(responseInterceptorChain.shift(), responseInterceptorChain.shift());
      }

      return promise;
    };

    Axios$1.prototype.getUri = function getUri(config) {
      if (!config.url) {
        throw new Error('Provided config url is not valid');
      }
      config = mergeConfig$1(this.defaults, config);
      return buildURL(config.url, config.params, config.paramsSerializer).replace(/^\?/, '');
    };

    // Provide aliases for supported request methods
    utils$5.forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {
      /*eslint func-names:0*/
      Axios$1.prototype[method] = function(url, config) {
        return this.request(mergeConfig$1(config || {}, {
          method: method,
          url: url,
          data: (config || {}).data
        }));
      };
    });

    utils$5.forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
      /*eslint func-names:0*/
      Axios$1.prototype[method] = function(url, data, config) {
        return this.request(mergeConfig$1(config || {}, {
          method: method,
          url: url,
          data: data
        }));
      };
    });

    var Axios_1 = Axios$1;

    var Cancel = Cancel_1;

    /**
     * A `CancelToken` is an object that can be used to request cancellation of an operation.
     *
     * @class
     * @param {Function} executor The executor function.
     */
    function CancelToken(executor) {
      if (typeof executor !== 'function') {
        throw new TypeError('executor must be a function.');
      }

      var resolvePromise;

      this.promise = new Promise(function promiseExecutor(resolve) {
        resolvePromise = resolve;
      });

      var token = this;

      // eslint-disable-next-line func-names
      this.promise.then(function(cancel) {
        if (!token._listeners) return;

        var i;
        var l = token._listeners.length;

        for (i = 0; i < l; i++) {
          token._listeners[i](cancel);
        }
        token._listeners = null;
      });

      // eslint-disable-next-line func-names
      this.promise.then = function(onfulfilled) {
        var _resolve;
        // eslint-disable-next-line func-names
        var promise = new Promise(function(resolve) {
          token.subscribe(resolve);
          _resolve = resolve;
        }).then(onfulfilled);

        promise.cancel = function reject() {
          token.unsubscribe(_resolve);
        };

        return promise;
      };

      executor(function cancel(message) {
        if (token.reason) {
          // Cancellation has already been requested
          return;
        }

        token.reason = new Cancel(message);
        resolvePromise(token.reason);
      });
    }

    /**
     * Throws a `Cancel` if cancellation has been requested.
     */
    CancelToken.prototype.throwIfRequested = function throwIfRequested() {
      if (this.reason) {
        throw this.reason;
      }
    };

    /**
     * Subscribe to the cancel signal
     */

    CancelToken.prototype.subscribe = function subscribe(listener) {
      if (this.reason) {
        listener(this.reason);
        return;
      }

      if (this._listeners) {
        this._listeners.push(listener);
      } else {
        this._listeners = [listener];
      }
    };

    /**
     * Unsubscribe from the cancel signal
     */

    CancelToken.prototype.unsubscribe = function unsubscribe(listener) {
      if (!this._listeners) {
        return;
      }
      var index = this._listeners.indexOf(listener);
      if (index !== -1) {
        this._listeners.splice(index, 1);
      }
    };

    /**
     * Returns an object that contains a new `CancelToken` and a function that, when called,
     * cancels the `CancelToken`.
     */
    CancelToken.source = function source() {
      var cancel;
      var token = new CancelToken(function executor(c) {
        cancel = c;
      });
      return {
        token: token,
        cancel: cancel
      };
    };

    var CancelToken_1 = CancelToken;

    /**
     * Syntactic sugar for invoking a function and expanding an array for arguments.
     *
     * Common use case would be to use `Function.prototype.apply`.
     *
     *  ```js
     *  function f(x, y, z) {}
     *  var args = [1, 2, 3];
     *  f.apply(null, args);
     *  ```
     *
     * With `spread` this example can be re-written.
     *
     *  ```js
     *  spread(function(x, y, z) {})([1, 2, 3]);
     *  ```
     *
     * @param {Function} callback
     * @returns {Function}
     */
    var spread = function spread(callback) {
      return function wrap(arr) {
        return callback.apply(null, arr);
      };
    };

    var utils$4 = utils$i;

    /**
     * Determines whether the payload is an error thrown by Axios
     *
     * @param {*} payload The value to test
     * @returns {boolean} True if the payload is an error thrown by Axios, otherwise false
     */
    var isAxiosError = function isAxiosError(payload) {
      return utils$4.isObject(payload) && (payload.isAxiosError === true);
    };

    var utils$3 = utils$i;
    var bind = bind$2;
    var Axios = Axios_1;
    var mergeConfig = mergeConfig$2;
    var defaults$3 = defaults_1$1;

    /**
     * Create an instance of Axios
     *
     * @param {Object} defaultConfig The default config for the instance
     * @return {Axios} A new instance of Axios
     */
    function createInstance(defaultConfig) {
      var context = new Axios(defaultConfig);
      var instance = bind(Axios.prototype.request, context);

      // Copy axios.prototype to instance
      utils$3.extend(instance, Axios.prototype, context);

      // Copy context to instance
      utils$3.extend(instance, context);

      // Factory for creating new instances
      instance.create = function create(instanceConfig) {
        return createInstance(mergeConfig(defaultConfig, instanceConfig));
      };

      return instance;
    }

    // Create the default instance to be exported
    var axios = createInstance(defaults$3);

    // Expose Axios class to allow class inheritance
    axios.Axios = Axios;

    // Expose Cancel & CancelToken
    axios.Cancel = Cancel_1;
    axios.CancelToken = CancelToken_1;
    axios.isCancel = isCancel$1;
    axios.VERSION = data.version;

    // Expose all/spread
    axios.all = function all(promises) {
      return Promise.all(promises);
    };
    axios.spread = spread;

    // Expose isAxiosError
    axios.isAxiosError = isAxiosError;

    axios$1.exports = axios;

    // Allow use of default import syntax in TypeScript
    axios$1.exports.default = axios;

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */

    function __awaiter$1(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    const npminstall = require('npminstall');
    const pathExists = _pathExists.sync;
    class Package {
        constructor(options) {
            if (!options) {
                throw new Error('Package 类的 options 参数不能为空');
            }
            if (!isObject$l(options)) {
                throw new Error('Package 类的 options 参数必需为对象');
            }
            this.targetPath = options.targetPath;
            this.storeDir = options.storeDir;
            this.packageName = options.packageName;
            this.packageVersion = options.packageVersion;
            this.cacheFilePathPrefix = this.packageName.replace('/', '_');
        }
        exists() {
            return __awaiter$1(this, void 0, void 0, function* () {
                if (this.storeDir) {
                    yield this.prepare();
                    return pathExists(this.cacheFilePath);
                }
                else {
                    return pathExists(this.targetPath);
                }
            });
        }
        prepare() {
            return __awaiter$1(this, void 0, void 0, function* () {
                if (this.storeDir && !pathExists(this.storeDir)) {
                    lib$2.mkdirpSync(this.storeDir);
                }
                if (this.packageVersion === 'latest') {
                    this.packageVersion = yield getNpmInfo$1.getNpmLatestVersion(this.packageName);
                }
            });
        }
        getSpecificCacheFilePath(packageVersion) {
            return path__default["default"].resolve(this.storeDir, `_${this.cacheFilePathPrefix}@${packageVersion}@${this.packageName}`);
        }
        install() {
            return npminstall({
                root: this.targetPath,
                storeDir: this.storeDir,
                registry: getNpmInfo$1.getDefaultRegistry(),
                pkgs: [
                    { name: this.packageName, version: this.packageVersion }
                ]
            });
        }
        update() {
            return __awaiter$1(this, void 0, void 0, function* () {
                yield this.prepare();
                const latestPackageVersion = yield getNpmInfo$1.getNpmLatestVersion(this.packageName);
                const latestFilePath = this.getSpecificCacheFilePath(latestPackageVersion);
                if (!pathExists(latestFilePath)) {
                    yield npminstall({
                        root: this.targetPath,
                        storeDir: this.storeDir,
                        registry: getNpmInfo$1.getDefaultRegistry(),
                        pkgs: [
                            { name: this.packageName, version: latestPackageVersion }
                        ]
                    });
                    this.packageVersion = latestPackageVersion;
                }
                else {
                    this.packageVersion = latestPackageVersion;
                }
            });
        }
        get cacheFilePath() {
            return path__default["default"].resolve(this.storeDir, `_${this.cacheFilePathPrefix}@${this.packageVersion}@${this.packageName}`);
        }
        _getRootFilePath(targetPath) {
            const dir = pkgDir$1.sync(targetPath);
            if (dir) {
                const pkgFile = require(path__default["default"].resolve(dir, 'package.json'));
                if (pkgFile && pkgFile.main) {
                    return path__default["default"].resolve(dir, pkgFile.main);
                }
            }
            return null;
        }
        getRootFilePath() {
            if (this.storeDir) {
                return this._getRootFilePath(this.cacheFilePath);
            }
            else {
                return this._getRootFilePath(this.targetPath);
            }
        }
    }

    const LOWEST_NODE_VERSION = '12.0.0';
    class Command {
        constructor(argv) {
            this._cmd = '';
            if (!argv) {
                throw new Error('参数不能为空');
            }
            if (!Array.isArray(argv)) {
                throw new Error('参数类型必需为数组');
            }
            if (argv.length < 1) {
                throw new Error('参数列表为空');
            }
            this._argv = argv;
            new Promise((resolve, reject) => {
                let chain = Promise.resolve();
                chain = chain.then(() => { this.checkNodeVersion(); });
                chain = chain.then(() => this.initArgs());
                chain = chain.then(() => this.init());
                chain = chain.then(() => this.exec());
                chain.catch(err => log.error('command constructor', err.message));
            });
        }
        initArgs() {
            this._cmd = this._argv[this._argv.length - 1];
            this._argv = this._argv.slice(0, this._argv.length - 1);
        }
        checkNodeVersion() {
            const currentVersion = process.version;
            const lowestVersion = LOWEST_NODE_VERSION;
            if (!semver$2.gte(currentVersion, lowestVersion)) {
                throw new Error(log.warn('checkNodeVersion', `js-cli 需要安装 v${lowestVersion} 以上 node 版本`));
            }
            console.log(process.version);
        }
    }

    var inquirer$1 = {exports: {}};

    var ansiStyles$1 = {exports: {}};

    var colorName = {
    	"aliceblue": [240, 248, 255],
    	"antiquewhite": [250, 235, 215],
    	"aqua": [0, 255, 255],
    	"aquamarine": [127, 255, 212],
    	"azure": [240, 255, 255],
    	"beige": [245, 245, 220],
    	"bisque": [255, 228, 196],
    	"black": [0, 0, 0],
    	"blanchedalmond": [255, 235, 205],
    	"blue": [0, 0, 255],
    	"blueviolet": [138, 43, 226],
    	"brown": [165, 42, 42],
    	"burlywood": [222, 184, 135],
    	"cadetblue": [95, 158, 160],
    	"chartreuse": [127, 255, 0],
    	"chocolate": [210, 105, 30],
    	"coral": [255, 127, 80],
    	"cornflowerblue": [100, 149, 237],
    	"cornsilk": [255, 248, 220],
    	"crimson": [220, 20, 60],
    	"cyan": [0, 255, 255],
    	"darkblue": [0, 0, 139],
    	"darkcyan": [0, 139, 139],
    	"darkgoldenrod": [184, 134, 11],
    	"darkgray": [169, 169, 169],
    	"darkgreen": [0, 100, 0],
    	"darkgrey": [169, 169, 169],
    	"darkkhaki": [189, 183, 107],
    	"darkmagenta": [139, 0, 139],
    	"darkolivegreen": [85, 107, 47],
    	"darkorange": [255, 140, 0],
    	"darkorchid": [153, 50, 204],
    	"darkred": [139, 0, 0],
    	"darksalmon": [233, 150, 122],
    	"darkseagreen": [143, 188, 143],
    	"darkslateblue": [72, 61, 139],
    	"darkslategray": [47, 79, 79],
    	"darkslategrey": [47, 79, 79],
    	"darkturquoise": [0, 206, 209],
    	"darkviolet": [148, 0, 211],
    	"deeppink": [255, 20, 147],
    	"deepskyblue": [0, 191, 255],
    	"dimgray": [105, 105, 105],
    	"dimgrey": [105, 105, 105],
    	"dodgerblue": [30, 144, 255],
    	"firebrick": [178, 34, 34],
    	"floralwhite": [255, 250, 240],
    	"forestgreen": [34, 139, 34],
    	"fuchsia": [255, 0, 255],
    	"gainsboro": [220, 220, 220],
    	"ghostwhite": [248, 248, 255],
    	"gold": [255, 215, 0],
    	"goldenrod": [218, 165, 32],
    	"gray": [128, 128, 128],
    	"green": [0, 128, 0],
    	"greenyellow": [173, 255, 47],
    	"grey": [128, 128, 128],
    	"honeydew": [240, 255, 240],
    	"hotpink": [255, 105, 180],
    	"indianred": [205, 92, 92],
    	"indigo": [75, 0, 130],
    	"ivory": [255, 255, 240],
    	"khaki": [240, 230, 140],
    	"lavender": [230, 230, 250],
    	"lavenderblush": [255, 240, 245],
    	"lawngreen": [124, 252, 0],
    	"lemonchiffon": [255, 250, 205],
    	"lightblue": [173, 216, 230],
    	"lightcoral": [240, 128, 128],
    	"lightcyan": [224, 255, 255],
    	"lightgoldenrodyellow": [250, 250, 210],
    	"lightgray": [211, 211, 211],
    	"lightgreen": [144, 238, 144],
    	"lightgrey": [211, 211, 211],
    	"lightpink": [255, 182, 193],
    	"lightsalmon": [255, 160, 122],
    	"lightseagreen": [32, 178, 170],
    	"lightskyblue": [135, 206, 250],
    	"lightslategray": [119, 136, 153],
    	"lightslategrey": [119, 136, 153],
    	"lightsteelblue": [176, 196, 222],
    	"lightyellow": [255, 255, 224],
    	"lime": [0, 255, 0],
    	"limegreen": [50, 205, 50],
    	"linen": [250, 240, 230],
    	"magenta": [255, 0, 255],
    	"maroon": [128, 0, 0],
    	"mediumaquamarine": [102, 205, 170],
    	"mediumblue": [0, 0, 205],
    	"mediumorchid": [186, 85, 211],
    	"mediumpurple": [147, 112, 219],
    	"mediumseagreen": [60, 179, 113],
    	"mediumslateblue": [123, 104, 238],
    	"mediumspringgreen": [0, 250, 154],
    	"mediumturquoise": [72, 209, 204],
    	"mediumvioletred": [199, 21, 133],
    	"midnightblue": [25, 25, 112],
    	"mintcream": [245, 255, 250],
    	"mistyrose": [255, 228, 225],
    	"moccasin": [255, 228, 181],
    	"navajowhite": [255, 222, 173],
    	"navy": [0, 0, 128],
    	"oldlace": [253, 245, 230],
    	"olive": [128, 128, 0],
    	"olivedrab": [107, 142, 35],
    	"orange": [255, 165, 0],
    	"orangered": [255, 69, 0],
    	"orchid": [218, 112, 214],
    	"palegoldenrod": [238, 232, 170],
    	"palegreen": [152, 251, 152],
    	"paleturquoise": [175, 238, 238],
    	"palevioletred": [219, 112, 147],
    	"papayawhip": [255, 239, 213],
    	"peachpuff": [255, 218, 185],
    	"peru": [205, 133, 63],
    	"pink": [255, 192, 203],
    	"plum": [221, 160, 221],
    	"powderblue": [176, 224, 230],
    	"purple": [128, 0, 128],
    	"rebeccapurple": [102, 51, 153],
    	"red": [255, 0, 0],
    	"rosybrown": [188, 143, 143],
    	"royalblue": [65, 105, 225],
    	"saddlebrown": [139, 69, 19],
    	"salmon": [250, 128, 114],
    	"sandybrown": [244, 164, 96],
    	"seagreen": [46, 139, 87],
    	"seashell": [255, 245, 238],
    	"sienna": [160, 82, 45],
    	"silver": [192, 192, 192],
    	"skyblue": [135, 206, 235],
    	"slateblue": [106, 90, 205],
    	"slategray": [112, 128, 144],
    	"slategrey": [112, 128, 144],
    	"snow": [255, 250, 250],
    	"springgreen": [0, 255, 127],
    	"steelblue": [70, 130, 180],
    	"tan": [210, 180, 140],
    	"teal": [0, 128, 128],
    	"thistle": [216, 191, 216],
    	"tomato": [255, 99, 71],
    	"turquoise": [64, 224, 208],
    	"violet": [238, 130, 238],
    	"wheat": [245, 222, 179],
    	"white": [255, 255, 255],
    	"whitesmoke": [245, 245, 245],
    	"yellow": [255, 255, 0],
    	"yellowgreen": [154, 205, 50]
    };

    /* MIT license */

    /* eslint-disable no-mixed-operators */
    const cssKeywords = colorName;

    // NOTE: conversions should only return primitive values (i.e. arrays, or
    //       values that give correct `typeof` results).
    //       do not use box values types (i.e. Number(), String(), etc.)

    const reverseKeywords = {};
    for (const key of Object.keys(cssKeywords)) {
    	reverseKeywords[cssKeywords[key]] = key;
    }

    const convert$1 = {
    	rgb: {channels: 3, labels: 'rgb'},
    	hsl: {channels: 3, labels: 'hsl'},
    	hsv: {channels: 3, labels: 'hsv'},
    	hwb: {channels: 3, labels: 'hwb'},
    	cmyk: {channels: 4, labels: 'cmyk'},
    	xyz: {channels: 3, labels: 'xyz'},
    	lab: {channels: 3, labels: 'lab'},
    	lch: {channels: 3, labels: 'lch'},
    	hex: {channels: 1, labels: ['hex']},
    	keyword: {channels: 1, labels: ['keyword']},
    	ansi16: {channels: 1, labels: ['ansi16']},
    	ansi256: {channels: 1, labels: ['ansi256']},
    	hcg: {channels: 3, labels: ['h', 'c', 'g']},
    	apple: {channels: 3, labels: ['r16', 'g16', 'b16']},
    	gray: {channels: 1, labels: ['gray']}
    };

    var conversions$2 = convert$1;

    // Hide .channels and .labels properties
    for (const model of Object.keys(convert$1)) {
    	if (!('channels' in convert$1[model])) {
    		throw new Error('missing channels property: ' + model);
    	}

    	if (!('labels' in convert$1[model])) {
    		throw new Error('missing channel labels property: ' + model);
    	}

    	if (convert$1[model].labels.length !== convert$1[model].channels) {
    		throw new Error('channel and label counts mismatch: ' + model);
    	}

    	const {channels, labels} = convert$1[model];
    	delete convert$1[model].channels;
    	delete convert$1[model].labels;
    	Object.defineProperty(convert$1[model], 'channels', {value: channels});
    	Object.defineProperty(convert$1[model], 'labels', {value: labels});
    }

    convert$1.rgb.hsl = function (rgb) {
    	const r = rgb[0] / 255;
    	const g = rgb[1] / 255;
    	const b = rgb[2] / 255;
    	const min = Math.min(r, g, b);
    	const max = Math.max(r, g, b);
    	const delta = max - min;
    	let h;
    	let s;

    	if (max === min) {
    		h = 0;
    	} else if (r === max) {
    		h = (g - b) / delta;
    	} else if (g === max) {
    		h = 2 + (b - r) / delta;
    	} else if (b === max) {
    		h = 4 + (r - g) / delta;
    	}

    	h = Math.min(h * 60, 360);

    	if (h < 0) {
    		h += 360;
    	}

    	const l = (min + max) / 2;

    	if (max === min) {
    		s = 0;
    	} else if (l <= 0.5) {
    		s = delta / (max + min);
    	} else {
    		s = delta / (2 - max - min);
    	}

    	return [h, s * 100, l * 100];
    };

    convert$1.rgb.hsv = function (rgb) {
    	let rdif;
    	let gdif;
    	let bdif;
    	let h;
    	let s;

    	const r = rgb[0] / 255;
    	const g = rgb[1] / 255;
    	const b = rgb[2] / 255;
    	const v = Math.max(r, g, b);
    	const diff = v - Math.min(r, g, b);
    	const diffc = function (c) {
    		return (v - c) / 6 / diff + 1 / 2;
    	};

    	if (diff === 0) {
    		h = 0;
    		s = 0;
    	} else {
    		s = diff / v;
    		rdif = diffc(r);
    		gdif = diffc(g);
    		bdif = diffc(b);

    		if (r === v) {
    			h = bdif - gdif;
    		} else if (g === v) {
    			h = (1 / 3) + rdif - bdif;
    		} else if (b === v) {
    			h = (2 / 3) + gdif - rdif;
    		}

    		if (h < 0) {
    			h += 1;
    		} else if (h > 1) {
    			h -= 1;
    		}
    	}

    	return [
    		h * 360,
    		s * 100,
    		v * 100
    	];
    };

    convert$1.rgb.hwb = function (rgb) {
    	const r = rgb[0];
    	const g = rgb[1];
    	let b = rgb[2];
    	const h = convert$1.rgb.hsl(rgb)[0];
    	const w = 1 / 255 * Math.min(r, Math.min(g, b));

    	b = 1 - 1 / 255 * Math.max(r, Math.max(g, b));

    	return [h, w * 100, b * 100];
    };

    convert$1.rgb.cmyk = function (rgb) {
    	const r = rgb[0] / 255;
    	const g = rgb[1] / 255;
    	const b = rgb[2] / 255;

    	const k = Math.min(1 - r, 1 - g, 1 - b);
    	const c = (1 - r - k) / (1 - k) || 0;
    	const m = (1 - g - k) / (1 - k) || 0;
    	const y = (1 - b - k) / (1 - k) || 0;

    	return [c * 100, m * 100, y * 100, k * 100];
    };

    function comparativeDistance(x, y) {
    	/*
    		See https://en.m.wikipedia.org/wiki/Euclidean_distance#Squared_Euclidean_distance
    	*/
    	return (
    		((x[0] - y[0]) ** 2) +
    		((x[1] - y[1]) ** 2) +
    		((x[2] - y[2]) ** 2)
    	);
    }

    convert$1.rgb.keyword = function (rgb) {
    	const reversed = reverseKeywords[rgb];
    	if (reversed) {
    		return reversed;
    	}

    	let currentClosestDistance = Infinity;
    	let currentClosestKeyword;

    	for (const keyword of Object.keys(cssKeywords)) {
    		const value = cssKeywords[keyword];

    		// Compute comparative distance
    		const distance = comparativeDistance(rgb, value);

    		// Check if its less, if so set as closest
    		if (distance < currentClosestDistance) {
    			currentClosestDistance = distance;
    			currentClosestKeyword = keyword;
    		}
    	}

    	return currentClosestKeyword;
    };

    convert$1.keyword.rgb = function (keyword) {
    	return cssKeywords[keyword];
    };

    convert$1.rgb.xyz = function (rgb) {
    	let r = rgb[0] / 255;
    	let g = rgb[1] / 255;
    	let b = rgb[2] / 255;

    	// Assume sRGB
    	r = r > 0.04045 ? (((r + 0.055) / 1.055) ** 2.4) : (r / 12.92);
    	g = g > 0.04045 ? (((g + 0.055) / 1.055) ** 2.4) : (g / 12.92);
    	b = b > 0.04045 ? (((b + 0.055) / 1.055) ** 2.4) : (b / 12.92);

    	const x = (r * 0.4124) + (g * 0.3576) + (b * 0.1805);
    	const y = (r * 0.2126) + (g * 0.7152) + (b * 0.0722);
    	const z = (r * 0.0193) + (g * 0.1192) + (b * 0.9505);

    	return [x * 100, y * 100, z * 100];
    };

    convert$1.rgb.lab = function (rgb) {
    	const xyz = convert$1.rgb.xyz(rgb);
    	let x = xyz[0];
    	let y = xyz[1];
    	let z = xyz[2];

    	x /= 95.047;
    	y /= 100;
    	z /= 108.883;

    	x = x > 0.008856 ? (x ** (1 / 3)) : (7.787 * x) + (16 / 116);
    	y = y > 0.008856 ? (y ** (1 / 3)) : (7.787 * y) + (16 / 116);
    	z = z > 0.008856 ? (z ** (1 / 3)) : (7.787 * z) + (16 / 116);

    	const l = (116 * y) - 16;
    	const a = 500 * (x - y);
    	const b = 200 * (y - z);

    	return [l, a, b];
    };

    convert$1.hsl.rgb = function (hsl) {
    	const h = hsl[0] / 360;
    	const s = hsl[1] / 100;
    	const l = hsl[2] / 100;
    	let t2;
    	let t3;
    	let val;

    	if (s === 0) {
    		val = l * 255;
    		return [val, val, val];
    	}

    	if (l < 0.5) {
    		t2 = l * (1 + s);
    	} else {
    		t2 = l + s - l * s;
    	}

    	const t1 = 2 * l - t2;

    	const rgb = [0, 0, 0];
    	for (let i = 0; i < 3; i++) {
    		t3 = h + 1 / 3 * -(i - 1);
    		if (t3 < 0) {
    			t3++;
    		}

    		if (t3 > 1) {
    			t3--;
    		}

    		if (6 * t3 < 1) {
    			val = t1 + (t2 - t1) * 6 * t3;
    		} else if (2 * t3 < 1) {
    			val = t2;
    		} else if (3 * t3 < 2) {
    			val = t1 + (t2 - t1) * (2 / 3 - t3) * 6;
    		} else {
    			val = t1;
    		}

    		rgb[i] = val * 255;
    	}

    	return rgb;
    };

    convert$1.hsl.hsv = function (hsl) {
    	const h = hsl[0];
    	let s = hsl[1] / 100;
    	let l = hsl[2] / 100;
    	let smin = s;
    	const lmin = Math.max(l, 0.01);

    	l *= 2;
    	s *= (l <= 1) ? l : 2 - l;
    	smin *= lmin <= 1 ? lmin : 2 - lmin;
    	const v = (l + s) / 2;
    	const sv = l === 0 ? (2 * smin) / (lmin + smin) : (2 * s) / (l + s);

    	return [h, sv * 100, v * 100];
    };

    convert$1.hsv.rgb = function (hsv) {
    	const h = hsv[0] / 60;
    	const s = hsv[1] / 100;
    	let v = hsv[2] / 100;
    	const hi = Math.floor(h) % 6;

    	const f = h - Math.floor(h);
    	const p = 255 * v * (1 - s);
    	const q = 255 * v * (1 - (s * f));
    	const t = 255 * v * (1 - (s * (1 - f)));
    	v *= 255;

    	switch (hi) {
    		case 0:
    			return [v, t, p];
    		case 1:
    			return [q, v, p];
    		case 2:
    			return [p, v, t];
    		case 3:
    			return [p, q, v];
    		case 4:
    			return [t, p, v];
    		case 5:
    			return [v, p, q];
    	}
    };

    convert$1.hsv.hsl = function (hsv) {
    	const h = hsv[0];
    	const s = hsv[1] / 100;
    	const v = hsv[2] / 100;
    	const vmin = Math.max(v, 0.01);
    	let sl;
    	let l;

    	l = (2 - s) * v;
    	const lmin = (2 - s) * vmin;
    	sl = s * vmin;
    	sl /= (lmin <= 1) ? lmin : 2 - lmin;
    	sl = sl || 0;
    	l /= 2;

    	return [h, sl * 100, l * 100];
    };

    // http://dev.w3.org/csswg/css-color/#hwb-to-rgb
    convert$1.hwb.rgb = function (hwb) {
    	const h = hwb[0] / 360;
    	let wh = hwb[1] / 100;
    	let bl = hwb[2] / 100;
    	const ratio = wh + bl;
    	let f;

    	// Wh + bl cant be > 1
    	if (ratio > 1) {
    		wh /= ratio;
    		bl /= ratio;
    	}

    	const i = Math.floor(6 * h);
    	const v = 1 - bl;
    	f = 6 * h - i;

    	if ((i & 0x01) !== 0) {
    		f = 1 - f;
    	}

    	const n = wh + f * (v - wh); // Linear interpolation

    	let r;
    	let g;
    	let b;
    	/* eslint-disable max-statements-per-line,no-multi-spaces */
    	switch (i) {
    		default:
    		case 6:
    		case 0: r = v;  g = n;  b = wh; break;
    		case 1: r = n;  g = v;  b = wh; break;
    		case 2: r = wh; g = v;  b = n; break;
    		case 3: r = wh; g = n;  b = v; break;
    		case 4: r = n;  g = wh; b = v; break;
    		case 5: r = v;  g = wh; b = n; break;
    	}
    	/* eslint-enable max-statements-per-line,no-multi-spaces */

    	return [r * 255, g * 255, b * 255];
    };

    convert$1.cmyk.rgb = function (cmyk) {
    	const c = cmyk[0] / 100;
    	const m = cmyk[1] / 100;
    	const y = cmyk[2] / 100;
    	const k = cmyk[3] / 100;

    	const r = 1 - Math.min(1, c * (1 - k) + k);
    	const g = 1 - Math.min(1, m * (1 - k) + k);
    	const b = 1 - Math.min(1, y * (1 - k) + k);

    	return [r * 255, g * 255, b * 255];
    };

    convert$1.xyz.rgb = function (xyz) {
    	const x = xyz[0] / 100;
    	const y = xyz[1] / 100;
    	const z = xyz[2] / 100;
    	let r;
    	let g;
    	let b;

    	r = (x * 3.2406) + (y * -1.5372) + (z * -0.4986);
    	g = (x * -0.9689) + (y * 1.8758) + (z * 0.0415);
    	b = (x * 0.0557) + (y * -0.2040) + (z * 1.0570);

    	// Assume sRGB
    	r = r > 0.0031308
    		? ((1.055 * (r ** (1.0 / 2.4))) - 0.055)
    		: r * 12.92;

    	g = g > 0.0031308
    		? ((1.055 * (g ** (1.0 / 2.4))) - 0.055)
    		: g * 12.92;

    	b = b > 0.0031308
    		? ((1.055 * (b ** (1.0 / 2.4))) - 0.055)
    		: b * 12.92;

    	r = Math.min(Math.max(0, r), 1);
    	g = Math.min(Math.max(0, g), 1);
    	b = Math.min(Math.max(0, b), 1);

    	return [r * 255, g * 255, b * 255];
    };

    convert$1.xyz.lab = function (xyz) {
    	let x = xyz[0];
    	let y = xyz[1];
    	let z = xyz[2];

    	x /= 95.047;
    	y /= 100;
    	z /= 108.883;

    	x = x > 0.008856 ? (x ** (1 / 3)) : (7.787 * x) + (16 / 116);
    	y = y > 0.008856 ? (y ** (1 / 3)) : (7.787 * y) + (16 / 116);
    	z = z > 0.008856 ? (z ** (1 / 3)) : (7.787 * z) + (16 / 116);

    	const l = (116 * y) - 16;
    	const a = 500 * (x - y);
    	const b = 200 * (y - z);

    	return [l, a, b];
    };

    convert$1.lab.xyz = function (lab) {
    	const l = lab[0];
    	const a = lab[1];
    	const b = lab[2];
    	let x;
    	let y;
    	let z;

    	y = (l + 16) / 116;
    	x = a / 500 + y;
    	z = y - b / 200;

    	const y2 = y ** 3;
    	const x2 = x ** 3;
    	const z2 = z ** 3;
    	y = y2 > 0.008856 ? y2 : (y - 16 / 116) / 7.787;
    	x = x2 > 0.008856 ? x2 : (x - 16 / 116) / 7.787;
    	z = z2 > 0.008856 ? z2 : (z - 16 / 116) / 7.787;

    	x *= 95.047;
    	y *= 100;
    	z *= 108.883;

    	return [x, y, z];
    };

    convert$1.lab.lch = function (lab) {
    	const l = lab[0];
    	const a = lab[1];
    	const b = lab[2];
    	let h;

    	const hr = Math.atan2(b, a);
    	h = hr * 360 / 2 / Math.PI;

    	if (h < 0) {
    		h += 360;
    	}

    	const c = Math.sqrt(a * a + b * b);

    	return [l, c, h];
    };

    convert$1.lch.lab = function (lch) {
    	const l = lch[0];
    	const c = lch[1];
    	const h = lch[2];

    	const hr = h / 360 * 2 * Math.PI;
    	const a = c * Math.cos(hr);
    	const b = c * Math.sin(hr);

    	return [l, a, b];
    };

    convert$1.rgb.ansi16 = function (args, saturation = null) {
    	const [r, g, b] = args;
    	let value = saturation === null ? convert$1.rgb.hsv(args)[2] : saturation; // Hsv -> ansi16 optimization

    	value = Math.round(value / 50);

    	if (value === 0) {
    		return 30;
    	}

    	let ansi = 30
    		+ ((Math.round(b / 255) << 2)
    		| (Math.round(g / 255) << 1)
    		| Math.round(r / 255));

    	if (value === 2) {
    		ansi += 60;
    	}

    	return ansi;
    };

    convert$1.hsv.ansi16 = function (args) {
    	// Optimization here; we already know the value and don't need to get
    	// it converted for us.
    	return convert$1.rgb.ansi16(convert$1.hsv.rgb(args), args[2]);
    };

    convert$1.rgb.ansi256 = function (args) {
    	const r = args[0];
    	const g = args[1];
    	const b = args[2];

    	// We use the extended greyscale palette here, with the exception of
    	// black and white. normal palette only has 4 greyscale shades.
    	if (r === g && g === b) {
    		if (r < 8) {
    			return 16;
    		}

    		if (r > 248) {
    			return 231;
    		}

    		return Math.round(((r - 8) / 247) * 24) + 232;
    	}

    	const ansi = 16
    		+ (36 * Math.round(r / 255 * 5))
    		+ (6 * Math.round(g / 255 * 5))
    		+ Math.round(b / 255 * 5);

    	return ansi;
    };

    convert$1.ansi16.rgb = function (args) {
    	let color = args % 10;

    	// Handle greyscale
    	if (color === 0 || color === 7) {
    		if (args > 50) {
    			color += 3.5;
    		}

    		color = color / 10.5 * 255;

    		return [color, color, color];
    	}

    	const mult = (~~(args > 50) + 1) * 0.5;
    	const r = ((color & 1) * mult) * 255;
    	const g = (((color >> 1) & 1) * mult) * 255;
    	const b = (((color >> 2) & 1) * mult) * 255;

    	return [r, g, b];
    };

    convert$1.ansi256.rgb = function (args) {
    	// Handle greyscale
    	if (args >= 232) {
    		const c = (args - 232) * 10 + 8;
    		return [c, c, c];
    	}

    	args -= 16;

    	let rem;
    	const r = Math.floor(args / 36) / 5 * 255;
    	const g = Math.floor((rem = args % 36) / 6) / 5 * 255;
    	const b = (rem % 6) / 5 * 255;

    	return [r, g, b];
    };

    convert$1.rgb.hex = function (args) {
    	const integer = ((Math.round(args[0]) & 0xFF) << 16)
    		+ ((Math.round(args[1]) & 0xFF) << 8)
    		+ (Math.round(args[2]) & 0xFF);

    	const string = integer.toString(16).toUpperCase();
    	return '000000'.substring(string.length) + string;
    };

    convert$1.hex.rgb = function (args) {
    	const match = args.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);
    	if (!match) {
    		return [0, 0, 0];
    	}

    	let colorString = match[0];

    	if (match[0].length === 3) {
    		colorString = colorString.split('').map(char => {
    			return char + char;
    		}).join('');
    	}

    	const integer = parseInt(colorString, 16);
    	const r = (integer >> 16) & 0xFF;
    	const g = (integer >> 8) & 0xFF;
    	const b = integer & 0xFF;

    	return [r, g, b];
    };

    convert$1.rgb.hcg = function (rgb) {
    	const r = rgb[0] / 255;
    	const g = rgb[1] / 255;
    	const b = rgb[2] / 255;
    	const max = Math.max(Math.max(r, g), b);
    	const min = Math.min(Math.min(r, g), b);
    	const chroma = (max - min);
    	let grayscale;
    	let hue;

    	if (chroma < 1) {
    		grayscale = min / (1 - chroma);
    	} else {
    		grayscale = 0;
    	}

    	if (chroma <= 0) {
    		hue = 0;
    	} else
    	if (max === r) {
    		hue = ((g - b) / chroma) % 6;
    	} else
    	if (max === g) {
    		hue = 2 + (b - r) / chroma;
    	} else {
    		hue = 4 + (r - g) / chroma;
    	}

    	hue /= 6;
    	hue %= 1;

    	return [hue * 360, chroma * 100, grayscale * 100];
    };

    convert$1.hsl.hcg = function (hsl) {
    	const s = hsl[1] / 100;
    	const l = hsl[2] / 100;

    	const c = l < 0.5 ? (2.0 * s * l) : (2.0 * s * (1.0 - l));

    	let f = 0;
    	if (c < 1.0) {
    		f = (l - 0.5 * c) / (1.0 - c);
    	}

    	return [hsl[0], c * 100, f * 100];
    };

    convert$1.hsv.hcg = function (hsv) {
    	const s = hsv[1] / 100;
    	const v = hsv[2] / 100;

    	const c = s * v;
    	let f = 0;

    	if (c < 1.0) {
    		f = (v - c) / (1 - c);
    	}

    	return [hsv[0], c * 100, f * 100];
    };

    convert$1.hcg.rgb = function (hcg) {
    	const h = hcg[0] / 360;
    	const c = hcg[1] / 100;
    	const g = hcg[2] / 100;

    	if (c === 0.0) {
    		return [g * 255, g * 255, g * 255];
    	}

    	const pure = [0, 0, 0];
    	const hi = (h % 1) * 6;
    	const v = hi % 1;
    	const w = 1 - v;
    	let mg = 0;

    	/* eslint-disable max-statements-per-line */
    	switch (Math.floor(hi)) {
    		case 0:
    			pure[0] = 1; pure[1] = v; pure[2] = 0; break;
    		case 1:
    			pure[0] = w; pure[1] = 1; pure[2] = 0; break;
    		case 2:
    			pure[0] = 0; pure[1] = 1; pure[2] = v; break;
    		case 3:
    			pure[0] = 0; pure[1] = w; pure[2] = 1; break;
    		case 4:
    			pure[0] = v; pure[1] = 0; pure[2] = 1; break;
    		default:
    			pure[0] = 1; pure[1] = 0; pure[2] = w;
    	}
    	/* eslint-enable max-statements-per-line */

    	mg = (1.0 - c) * g;

    	return [
    		(c * pure[0] + mg) * 255,
    		(c * pure[1] + mg) * 255,
    		(c * pure[2] + mg) * 255
    	];
    };

    convert$1.hcg.hsv = function (hcg) {
    	const c = hcg[1] / 100;
    	const g = hcg[2] / 100;

    	const v = c + g * (1.0 - c);
    	let f = 0;

    	if (v > 0.0) {
    		f = c / v;
    	}

    	return [hcg[0], f * 100, v * 100];
    };

    convert$1.hcg.hsl = function (hcg) {
    	const c = hcg[1] / 100;
    	const g = hcg[2] / 100;

    	const l = g * (1.0 - c) + 0.5 * c;
    	let s = 0;

    	if (l > 0.0 && l < 0.5) {
    		s = c / (2 * l);
    	} else
    	if (l >= 0.5 && l < 1.0) {
    		s = c / (2 * (1 - l));
    	}

    	return [hcg[0], s * 100, l * 100];
    };

    convert$1.hcg.hwb = function (hcg) {
    	const c = hcg[1] / 100;
    	const g = hcg[2] / 100;
    	const v = c + g * (1.0 - c);
    	return [hcg[0], (v - c) * 100, (1 - v) * 100];
    };

    convert$1.hwb.hcg = function (hwb) {
    	const w = hwb[1] / 100;
    	const b = hwb[2] / 100;
    	const v = 1 - b;
    	const c = v - w;
    	let g = 0;

    	if (c < 1) {
    		g = (v - c) / (1 - c);
    	}

    	return [hwb[0], c * 100, g * 100];
    };

    convert$1.apple.rgb = function (apple) {
    	return [(apple[0] / 65535) * 255, (apple[1] / 65535) * 255, (apple[2] / 65535) * 255];
    };

    convert$1.rgb.apple = function (rgb) {
    	return [(rgb[0] / 255) * 65535, (rgb[1] / 255) * 65535, (rgb[2] / 255) * 65535];
    };

    convert$1.gray.rgb = function (args) {
    	return [args[0] / 100 * 255, args[0] / 100 * 255, args[0] / 100 * 255];
    };

    convert$1.gray.hsl = function (args) {
    	return [0, 0, args[0]];
    };

    convert$1.gray.hsv = convert$1.gray.hsl;

    convert$1.gray.hwb = function (gray) {
    	return [0, 100, gray[0]];
    };

    convert$1.gray.cmyk = function (gray) {
    	return [0, 0, 0, gray[0]];
    };

    convert$1.gray.lab = function (gray) {
    	return [gray[0], 0, 0];
    };

    convert$1.gray.hex = function (gray) {
    	const val = Math.round(gray[0] / 100 * 255) & 0xFF;
    	const integer = (val << 16) + (val << 8) + val;

    	const string = integer.toString(16).toUpperCase();
    	return '000000'.substring(string.length) + string;
    };

    convert$1.rgb.gray = function (rgb) {
    	const val = (rgb[0] + rgb[1] + rgb[2]) / 3;
    	return [val / 255 * 100];
    };

    const conversions$1 = conversions$2;

    /*
    	This function routes a model to all other models.

    	all functions that are routed have a property `.conversion` attached
    	to the returned synthetic function. This property is an array
    	of strings, each with the steps in between the 'from' and 'to'
    	color models (inclusive).

    	conversions that are not possible simply are not included.
    */

    function buildGraph() {
    	const graph = {};
    	// https://jsperf.com/object-keys-vs-for-in-with-closure/3
    	const models = Object.keys(conversions$1);

    	for (let len = models.length, i = 0; i < len; i++) {
    		graph[models[i]] = {
    			// http://jsperf.com/1-vs-infinity
    			// micro-opt, but this is simple.
    			distance: -1,
    			parent: null
    		};
    	}

    	return graph;
    }

    // https://en.wikipedia.org/wiki/Breadth-first_search
    function deriveBFS(fromModel) {
    	const graph = buildGraph();
    	const queue = [fromModel]; // Unshift -> queue -> pop

    	graph[fromModel].distance = 0;

    	while (queue.length) {
    		const current = queue.pop();
    		const adjacents = Object.keys(conversions$1[current]);

    		for (let len = adjacents.length, i = 0; i < len; i++) {
    			const adjacent = adjacents[i];
    			const node = graph[adjacent];

    			if (node.distance === -1) {
    				node.distance = graph[current].distance + 1;
    				node.parent = current;
    				queue.unshift(adjacent);
    			}
    		}
    	}

    	return graph;
    }

    function link(from, to) {
    	return function (args) {
    		return to(from(args));
    	};
    }

    function wrapConversion(toModel, graph) {
    	const path = [graph[toModel].parent, toModel];
    	let fn = conversions$1[graph[toModel].parent][toModel];

    	let cur = graph[toModel].parent;
    	while (graph[cur].parent) {
    		path.unshift(graph[cur].parent);
    		fn = link(conversions$1[graph[cur].parent][cur], fn);
    		cur = graph[cur].parent;
    	}

    	fn.conversion = path;
    	return fn;
    }

    var route$1 = function (fromModel) {
    	const graph = deriveBFS(fromModel);
    	const conversion = {};

    	const models = Object.keys(graph);
    	for (let len = models.length, i = 0; i < len; i++) {
    		const toModel = models[i];
    		const node = graph[toModel];

    		if (node.parent === null) {
    			// No possible conversion, or this node is the source model.
    			continue;
    		}

    		conversion[toModel] = wrapConversion(toModel, graph);
    	}

    	return conversion;
    };

    const conversions = conversions$2;
    const route = route$1;

    const convert = {};

    const models = Object.keys(conversions);

    function wrapRaw(fn) {
    	const wrappedFn = function (...args) {
    		const arg0 = args[0];
    		if (arg0 === undefined || arg0 === null) {
    			return arg0;
    		}

    		if (arg0.length > 1) {
    			args = arg0;
    		}

    		return fn(args);
    	};

    	// Preserve .conversion property if there is one
    	if ('conversion' in fn) {
    		wrappedFn.conversion = fn.conversion;
    	}

    	return wrappedFn;
    }

    function wrapRounded(fn) {
    	const wrappedFn = function (...args) {
    		const arg0 = args[0];

    		if (arg0 === undefined || arg0 === null) {
    			return arg0;
    		}

    		if (arg0.length > 1) {
    			args = arg0;
    		}

    		const result = fn(args);

    		// We're assuming the result is an array here.
    		// see notice in conversions.js; don't use box types
    		// in conversion functions.
    		if (typeof result === 'object') {
    			for (let len = result.length, i = 0; i < len; i++) {
    				result[i] = Math.round(result[i]);
    			}
    		}

    		return result;
    	};

    	// Preserve .conversion property if there is one
    	if ('conversion' in fn) {
    		wrappedFn.conversion = fn.conversion;
    	}

    	return wrappedFn;
    }

    models.forEach(fromModel => {
    	convert[fromModel] = {};

    	Object.defineProperty(convert[fromModel], 'channels', {value: conversions[fromModel].channels});
    	Object.defineProperty(convert[fromModel], 'labels', {value: conversions[fromModel].labels});

    	const routes = route(fromModel);
    	const routeModels = Object.keys(routes);

    	routeModels.forEach(toModel => {
    		const fn = routes[toModel];

    		convert[fromModel][toModel] = wrapRounded(fn);
    		convert[fromModel][toModel].raw = wrapRaw(fn);
    	});
    });

    var colorConvert = convert;

    (function (module) {

    const wrapAnsi16 = (fn, offset) => (...args) => {
    	const code = fn(...args);
    	return `\u001B[${code + offset}m`;
    };

    const wrapAnsi256 = (fn, offset) => (...args) => {
    	const code = fn(...args);
    	return `\u001B[${38 + offset};5;${code}m`;
    };

    const wrapAnsi16m = (fn, offset) => (...args) => {
    	const rgb = fn(...args);
    	return `\u001B[${38 + offset};2;${rgb[0]};${rgb[1]};${rgb[2]}m`;
    };

    const ansi2ansi = n => n;
    const rgb2rgb = (r, g, b) => [r, g, b];

    const setLazyProperty = (object, property, get) => {
    	Object.defineProperty(object, property, {
    		get: () => {
    			const value = get();

    			Object.defineProperty(object, property, {
    				value,
    				enumerable: true,
    				configurable: true
    			});

    			return value;
    		},
    		enumerable: true,
    		configurable: true
    	});
    };

    /** @type {typeof import('color-convert')} */
    let colorConvert$1;
    const makeDynamicStyles = (wrap, targetSpace, identity, isBackground) => {
    	if (colorConvert$1 === undefined) {
    		colorConvert$1 = colorConvert;
    	}

    	const offset = isBackground ? 10 : 0;
    	const styles = {};

    	for (const [sourceSpace, suite] of Object.entries(colorConvert$1)) {
    		const name = sourceSpace === 'ansi16' ? 'ansi' : sourceSpace;
    		if (sourceSpace === targetSpace) {
    			styles[name] = wrap(identity, offset);
    		} else if (typeof suite === 'object') {
    			styles[name] = wrap(suite[targetSpace], offset);
    		}
    	}

    	return styles;
    };

    function assembleStyles() {
    	const codes = new Map();
    	const styles = {
    		modifier: {
    			reset: [0, 0],
    			// 21 isn't widely supported and 22 does the same thing
    			bold: [1, 22],
    			dim: [2, 22],
    			italic: [3, 23],
    			underline: [4, 24],
    			inverse: [7, 27],
    			hidden: [8, 28],
    			strikethrough: [9, 29]
    		},
    		color: {
    			black: [30, 39],
    			red: [31, 39],
    			green: [32, 39],
    			yellow: [33, 39],
    			blue: [34, 39],
    			magenta: [35, 39],
    			cyan: [36, 39],
    			white: [37, 39],

    			// Bright color
    			blackBright: [90, 39],
    			redBright: [91, 39],
    			greenBright: [92, 39],
    			yellowBright: [93, 39],
    			blueBright: [94, 39],
    			magentaBright: [95, 39],
    			cyanBright: [96, 39],
    			whiteBright: [97, 39]
    		},
    		bgColor: {
    			bgBlack: [40, 49],
    			bgRed: [41, 49],
    			bgGreen: [42, 49],
    			bgYellow: [43, 49],
    			bgBlue: [44, 49],
    			bgMagenta: [45, 49],
    			bgCyan: [46, 49],
    			bgWhite: [47, 49],

    			// Bright color
    			bgBlackBright: [100, 49],
    			bgRedBright: [101, 49],
    			bgGreenBright: [102, 49],
    			bgYellowBright: [103, 49],
    			bgBlueBright: [104, 49],
    			bgMagentaBright: [105, 49],
    			bgCyanBright: [106, 49],
    			bgWhiteBright: [107, 49]
    		}
    	};

    	// Alias bright black as gray (and grey)
    	styles.color.gray = styles.color.blackBright;
    	styles.bgColor.bgGray = styles.bgColor.bgBlackBright;
    	styles.color.grey = styles.color.blackBright;
    	styles.bgColor.bgGrey = styles.bgColor.bgBlackBright;

    	for (const [groupName, group] of Object.entries(styles)) {
    		for (const [styleName, style] of Object.entries(group)) {
    			styles[styleName] = {
    				open: `\u001B[${style[0]}m`,
    				close: `\u001B[${style[1]}m`
    			};

    			group[styleName] = styles[styleName];

    			codes.set(style[0], style[1]);
    		}

    		Object.defineProperty(styles, groupName, {
    			value: group,
    			enumerable: false
    		});
    	}

    	Object.defineProperty(styles, 'codes', {
    		value: codes,
    		enumerable: false
    	});

    	styles.color.close = '\u001B[39m';
    	styles.bgColor.close = '\u001B[49m';

    	setLazyProperty(styles.color, 'ansi', () => makeDynamicStyles(wrapAnsi16, 'ansi16', ansi2ansi, false));
    	setLazyProperty(styles.color, 'ansi256', () => makeDynamicStyles(wrapAnsi256, 'ansi256', ansi2ansi, false));
    	setLazyProperty(styles.color, 'ansi16m', () => makeDynamicStyles(wrapAnsi16m, 'rgb', rgb2rgb, false));
    	setLazyProperty(styles.bgColor, 'ansi', () => makeDynamicStyles(wrapAnsi16, 'ansi16', ansi2ansi, true));
    	setLazyProperty(styles.bgColor, 'ansi256', () => makeDynamicStyles(wrapAnsi256, 'ansi256', ansi2ansi, true));
    	setLazyProperty(styles.bgColor, 'ansi16m', () => makeDynamicStyles(wrapAnsi16m, 'rgb', rgb2rgb, true));

    	return styles;
    }

    // Make the export immutable
    Object.defineProperty(module, 'exports', {
    	enumerable: true,
    	get: assembleStyles
    });
    }(ansiStyles$1));

    var hasFlag$1 = (flag, argv = process.argv) => {
    	const prefix = flag.startsWith('-') ? '' : (flag.length === 1 ? '-' : '--');
    	const position = argv.indexOf(prefix + flag);
    	const terminatorPosition = argv.indexOf('--');
    	return position !== -1 && (terminatorPosition === -1 || position < terminatorPosition);
    };

    const os = require$$0__default$3["default"];
    const tty = require$$0__default$8["default"];
    const hasFlag = hasFlag$1;

    const {env} = process;

    let forceColor;
    if (hasFlag('no-color') ||
    	hasFlag('no-colors') ||
    	hasFlag('color=false') ||
    	hasFlag('color=never')) {
    	forceColor = 0;
    } else if (hasFlag('color') ||
    	hasFlag('colors') ||
    	hasFlag('color=true') ||
    	hasFlag('color=always')) {
    	forceColor = 1;
    }

    if ('FORCE_COLOR' in env) {
    	if (env.FORCE_COLOR === 'true') {
    		forceColor = 1;
    	} else if (env.FORCE_COLOR === 'false') {
    		forceColor = 0;
    	} else {
    		forceColor = env.FORCE_COLOR.length === 0 ? 1 : Math.min(parseInt(env.FORCE_COLOR, 10), 3);
    	}
    }

    function translateLevel(level) {
    	if (level === 0) {
    		return false;
    	}

    	return {
    		level,
    		hasBasic: true,
    		has256: level >= 2,
    		has16m: level >= 3
    	};
    }

    function supportsColor(haveStream, streamIsTTY) {
    	if (forceColor === 0) {
    		return 0;
    	}

    	if (hasFlag('color=16m') ||
    		hasFlag('color=full') ||
    		hasFlag('color=truecolor')) {
    		return 3;
    	}

    	if (hasFlag('color=256')) {
    		return 2;
    	}

    	if (haveStream && !streamIsTTY && forceColor === undefined) {
    		return 0;
    	}

    	const min = forceColor || 0;

    	if (env.TERM === 'dumb') {
    		return min;
    	}

    	if (process.platform === 'win32') {
    		// Windows 10 build 10586 is the first Windows release that supports 256 colors.
    		// Windows 10 build 14931 is the first release that supports 16m/TrueColor.
    		const osRelease = os.release().split('.');
    		if (
    			Number(osRelease[0]) >= 10 &&
    			Number(osRelease[2]) >= 10586
    		) {
    			return Number(osRelease[2]) >= 14931 ? 3 : 2;
    		}

    		return 1;
    	}

    	if ('CI' in env) {
    		if (['TRAVIS', 'CIRCLECI', 'APPVEYOR', 'GITLAB_CI', 'GITHUB_ACTIONS', 'BUILDKITE'].some(sign => sign in env) || env.CI_NAME === 'codeship') {
    			return 1;
    		}

    		return min;
    	}

    	if ('TEAMCITY_VERSION' in env) {
    		return /^(9\.(0*[1-9]\d*)\.|\d{2,}\.)/.test(env.TEAMCITY_VERSION) ? 1 : 0;
    	}

    	if (env.COLORTERM === 'truecolor') {
    		return 3;
    	}

    	if ('TERM_PROGRAM' in env) {
    		const version = parseInt((env.TERM_PROGRAM_VERSION || '').split('.')[0], 10);

    		switch (env.TERM_PROGRAM) {
    			case 'iTerm.app':
    				return version >= 3 ? 3 : 2;
    			case 'Apple_Terminal':
    				return 2;
    			// No default
    		}
    	}

    	if (/-256(color)?$/i.test(env.TERM)) {
    		return 2;
    	}

    	if (/^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(env.TERM)) {
    		return 1;
    	}

    	if ('COLORTERM' in env) {
    		return 1;
    	}

    	return min;
    }

    function getSupportLevel(stream) {
    	const level = supportsColor(stream, stream && stream.isTTY);
    	return translateLevel(level);
    }

    var supportsColor_1 = {
    	supportsColor: getSupportLevel,
    	stdout: translateLevel(supportsColor(true, tty.isatty(1))),
    	stderr: translateLevel(supportsColor(true, tty.isatty(2)))
    };

    const stringReplaceAll$1 = (string, substring, replacer) => {
    	let index = string.indexOf(substring);
    	if (index === -1) {
    		return string;
    	}

    	const substringLength = substring.length;
    	let endIndex = 0;
    	let returnValue = '';
    	do {
    		returnValue += string.substr(endIndex, index - endIndex) + substring + replacer;
    		endIndex = index + substringLength;
    		index = string.indexOf(substring, endIndex);
    	} while (index !== -1);

    	returnValue += string.substr(endIndex);
    	return returnValue;
    };

    const stringEncaseCRLFWithFirstIndex$1 = (string, prefix, postfix, index) => {
    	let endIndex = 0;
    	let returnValue = '';
    	do {
    		const gotCR = string[index - 1] === '\r';
    		returnValue += string.substr(endIndex, (gotCR ? index - 1 : index) - endIndex) + prefix + (gotCR ? '\r\n' : '\n') + postfix;
    		endIndex = index + 1;
    		index = string.indexOf('\n', endIndex);
    	} while (index !== -1);

    	returnValue += string.substr(endIndex);
    	return returnValue;
    };

    var util$1 = {
    	stringReplaceAll: stringReplaceAll$1,
    	stringEncaseCRLFWithFirstIndex: stringEncaseCRLFWithFirstIndex$1
    };

    const TEMPLATE_REGEX = /(?:\\(u(?:[a-f\d]{4}|\{[a-f\d]{1,6}\})|x[a-f\d]{2}|.))|(?:\{(~)?(\w+(?:\([^)]*\))?(?:\.\w+(?:\([^)]*\))?)*)(?:[ \t]|(?=\r?\n)))|(\})|((?:.|[\r\n\f])+?)/gi;
    const STYLE_REGEX = /(?:^|\.)(\w+)(?:\(([^)]*)\))?/g;
    const STRING_REGEX = /^(['"])((?:\\.|(?!\1)[^\\])*)\1$/;
    const ESCAPE_REGEX = /\\(u(?:[a-f\d]{4}|{[a-f\d]{1,6}})|x[a-f\d]{2}|.)|([^\\])/gi;

    const ESCAPES = new Map([
    	['n', '\n'],
    	['r', '\r'],
    	['t', '\t'],
    	['b', '\b'],
    	['f', '\f'],
    	['v', '\v'],
    	['0', '\0'],
    	['\\', '\\'],
    	['e', '\u001B'],
    	['a', '\u0007']
    ]);

    function unescape$1(c) {
    	const u = c[0] === 'u';
    	const bracket = c[1] === '{';

    	if ((u && !bracket && c.length === 5) || (c[0] === 'x' && c.length === 3)) {
    		return String.fromCharCode(parseInt(c.slice(1), 16));
    	}

    	if (u && bracket) {
    		return String.fromCodePoint(parseInt(c.slice(2, -1), 16));
    	}

    	return ESCAPES.get(c) || c;
    }

    function parseArguments(name, arguments_) {
    	const results = [];
    	const chunks = arguments_.trim().split(/\s*,\s*/g);
    	let matches;

    	for (const chunk of chunks) {
    		const number = Number(chunk);
    		if (!Number.isNaN(number)) {
    			results.push(number);
    		} else if ((matches = chunk.match(STRING_REGEX))) {
    			results.push(matches[2].replace(ESCAPE_REGEX, (m, escape, character) => escape ? unescape$1(escape) : character));
    		} else {
    			throw new Error(`Invalid Chalk template style argument: ${chunk} (in style '${name}')`);
    		}
    	}

    	return results;
    }

    function parseStyle(style) {
    	STYLE_REGEX.lastIndex = 0;

    	const results = [];
    	let matches;

    	while ((matches = STYLE_REGEX.exec(style)) !== null) {
    		const name = matches[1];

    		if (matches[2]) {
    			const args = parseArguments(name, matches[2]);
    			results.push([name].concat(args));
    		} else {
    			results.push([name]);
    		}
    	}

    	return results;
    }

    function buildStyle(chalk, styles) {
    	const enabled = {};

    	for (const layer of styles) {
    		for (const style of layer.styles) {
    			enabled[style[0]] = layer.inverse ? null : style.slice(1);
    		}
    	}

    	let current = chalk;
    	for (const [styleName, styles] of Object.entries(enabled)) {
    		if (!Array.isArray(styles)) {
    			continue;
    		}

    		if (!(styleName in current)) {
    			throw new Error(`Unknown Chalk style: ${styleName}`);
    		}

    		current = styles.length > 0 ? current[styleName](...styles) : current[styleName];
    	}

    	return current;
    }

    var templates = (chalk, temporary) => {
    	const styles = [];
    	const chunks = [];
    	let chunk = [];

    	// eslint-disable-next-line max-params
    	temporary.replace(TEMPLATE_REGEX, (m, escapeCharacter, inverse, style, close, character) => {
    		if (escapeCharacter) {
    			chunk.push(unescape$1(escapeCharacter));
    		} else if (style) {
    			const string = chunk.join('');
    			chunk = [];
    			chunks.push(styles.length === 0 ? string : buildStyle(chalk, styles)(string));
    			styles.push({inverse, styles: parseStyle(style)});
    		} else if (close) {
    			if (styles.length === 0) {
    				throw new Error('Found extraneous } in Chalk template literal');
    			}

    			chunks.push(buildStyle(chalk, styles)(chunk.join('')));
    			chunk = [];
    			styles.pop();
    		} else {
    			chunk.push(character);
    		}
    	});

    	chunks.push(chunk.join(''));

    	if (styles.length > 0) {
    		const errMessage = `Chalk template literal is missing ${styles.length} closing bracket${styles.length === 1 ? '' : 's'} (\`}\`)`;
    		throw new Error(errMessage);
    	}

    	return chunks.join('');
    };

    const ansiStyles = ansiStyles$1.exports;
    const {stdout: stdoutColor, stderr: stderrColor} = supportsColor_1;
    const {
    	stringReplaceAll,
    	stringEncaseCRLFWithFirstIndex
    } = util$1;

    const {isArray: isArray$i} = Array;

    // `supportsColor.level` → `ansiStyles.color[name]` mapping
    const levelMapping = [
    	'ansi',
    	'ansi',
    	'ansi256',
    	'ansi16m'
    ];

    const styles = Object.create(null);

    const applyOptions = (object, options = {}) => {
    	if (options.level && !(Number.isInteger(options.level) && options.level >= 0 && options.level <= 3)) {
    		throw new Error('The `level` option should be an integer from 0 to 3');
    	}

    	// Detect level if not set manually
    	const colorLevel = stdoutColor ? stdoutColor.level : 0;
    	object.level = options.level === undefined ? colorLevel : options.level;
    };

    class ChalkClass {
    	constructor(options) {
    		// eslint-disable-next-line no-constructor-return
    		return chalkFactory(options);
    	}
    }

    const chalkFactory = options => {
    	const chalk = {};
    	applyOptions(chalk, options);

    	chalk.template = (...arguments_) => chalkTag(chalk.template, ...arguments_);

    	Object.setPrototypeOf(chalk, Chalk.prototype);
    	Object.setPrototypeOf(chalk.template, chalk);

    	chalk.template.constructor = () => {
    		throw new Error('`chalk.constructor()` is deprecated. Use `new chalk.Instance()` instead.');
    	};

    	chalk.template.Instance = ChalkClass;

    	return chalk.template;
    };

    function Chalk(options) {
    	return chalkFactory(options);
    }

    for (const [styleName, style] of Object.entries(ansiStyles)) {
    	styles[styleName] = {
    		get() {
    			const builder = createBuilder(this, createStyler(style.open, style.close, this._styler), this._isEmpty);
    			Object.defineProperty(this, styleName, {value: builder});
    			return builder;
    		}
    	};
    }

    styles.visible = {
    	get() {
    		const builder = createBuilder(this, this._styler, true);
    		Object.defineProperty(this, 'visible', {value: builder});
    		return builder;
    	}
    };

    const usedModels = ['rgb', 'hex', 'keyword', 'hsl', 'hsv', 'hwb', 'ansi', 'ansi256'];

    for (const model of usedModels) {
    	styles[model] = {
    		get() {
    			const {level} = this;
    			return function (...arguments_) {
    				const styler = createStyler(ansiStyles.color[levelMapping[level]][model](...arguments_), ansiStyles.color.close, this._styler);
    				return createBuilder(this, styler, this._isEmpty);
    			};
    		}
    	};
    }

    for (const model of usedModels) {
    	const bgModel = 'bg' + model[0].toUpperCase() + model.slice(1);
    	styles[bgModel] = {
    		get() {
    			const {level} = this;
    			return function (...arguments_) {
    				const styler = createStyler(ansiStyles.bgColor[levelMapping[level]][model](...arguments_), ansiStyles.bgColor.close, this._styler);
    				return createBuilder(this, styler, this._isEmpty);
    			};
    		}
    	};
    }

    const proto = Object.defineProperties(() => {}, {
    	...styles,
    	level: {
    		enumerable: true,
    		get() {
    			return this._generator.level;
    		},
    		set(level) {
    			this._generator.level = level;
    		}
    	}
    });

    const createStyler = (open, close, parent) => {
    	let openAll;
    	let closeAll;
    	if (parent === undefined) {
    		openAll = open;
    		closeAll = close;
    	} else {
    		openAll = parent.openAll + open;
    		closeAll = close + parent.closeAll;
    	}

    	return {
    		open,
    		close,
    		openAll,
    		closeAll,
    		parent
    	};
    };

    const createBuilder = (self, _styler, _isEmpty) => {
    	const builder = (...arguments_) => {
    		if (isArray$i(arguments_[0]) && isArray$i(arguments_[0].raw)) {
    			// Called as a template literal, for example: chalk.red`2 + 3 = {bold ${2+3}}`
    			return applyStyle(builder, chalkTag(builder, ...arguments_));
    		}

    		// Single argument is hot path, implicit coercion is faster than anything
    		// eslint-disable-next-line no-implicit-coercion
    		return applyStyle(builder, (arguments_.length === 1) ? ('' + arguments_[0]) : arguments_.join(' '));
    	};

    	// We alter the prototype because we must return a function, but there is
    	// no way to create a function with a different prototype
    	Object.setPrototypeOf(builder, proto);

    	builder._generator = self;
    	builder._styler = _styler;
    	builder._isEmpty = _isEmpty;

    	return builder;
    };

    const applyStyle = (self, string) => {
    	if (self.level <= 0 || !string) {
    		return self._isEmpty ? '' : string;
    	}

    	let styler = self._styler;

    	if (styler === undefined) {
    		return string;
    	}

    	const {openAll, closeAll} = styler;
    	if (string.indexOf('\u001B') !== -1) {
    		while (styler !== undefined) {
    			// Replace any instances already present with a re-opening code
    			// otherwise only the part of the string until said closing code
    			// will be colored, and the rest will simply be 'plain'.
    			string = stringReplaceAll(string, styler.close, styler.open);

    			styler = styler.parent;
    		}
    	}

    	// We can move both next actions out of loop, because remaining actions in loop won't have
    	// any/visible effect on parts we add here. Close the styling before a linebreak and reopen
    	// after next line to fix a bleed issue on macOS: https://github.com/chalk/chalk/pull/92
    	const lfIndex = string.indexOf('\n');
    	if (lfIndex !== -1) {
    		string = stringEncaseCRLFWithFirstIndex(string, closeAll, openAll, lfIndex);
    	}

    	return openAll + string + closeAll;
    };

    let template;
    const chalkTag = (chalk, ...strings) => {
    	const [firstString] = strings;

    	if (!isArray$i(firstString) || !isArray$i(firstString.raw)) {
    		// If chalk() was called by itself or with a string,
    		// return the string itself as a string.
    		return strings.join(' ');
    	}

    	const arguments_ = strings.slice(1);
    	const parts = [firstString.raw[0]];

    	for (let i = 1; i < firstString.length; i++) {
    		parts.push(
    			String(arguments_[i - 1]).replace(/[{}\\]/g, '\\$&'),
    			String(firstString.raw[i])
    		);
    	}

    	if (template === undefined) {
    		template = templates;
    	}

    	return template(chalk, parts.join(''));
    };

    Object.defineProperties(Chalk.prototype, styles);

    const chalk$d = Chalk(); // eslint-disable-line new-cap
    chalk$d.supportsColor = stdoutColor;
    chalk$d.stderr = Chalk({level: stderrColor ? stderrColor.level : 0}); // eslint-disable-line new-cap
    chalk$d.stderr.supportsColor = stderrColor;

    var source = chalk$d;

    var figures$4 = {exports: {}};

    var matchOperatorsRe = /[|\\{}()[\]^$+*?.]/g;

    var escapeStringRegexp$1 = function (str) {
    	if (typeof str !== 'string') {
    		throw new TypeError('Expected a string');
    	}

    	return str.replace(matchOperatorsRe, '\\$&');
    };

    const escapeStringRegexp = escapeStringRegexp$1;

    const {platform} = process;

    const main$3 = {
    	tick: '✔',
    	cross: '✖',
    	star: '★',
    	square: '▇',
    	squareSmall: '◻',
    	squareSmallFilled: '◼',
    	play: '▶',
    	circle: '◯',
    	circleFilled: '◉',
    	circleDotted: '◌',
    	circleDouble: '◎',
    	circleCircle: 'ⓞ',
    	circleCross: 'ⓧ',
    	circlePipe: 'Ⓘ',
    	circleQuestionMark: '?⃝',
    	bullet: '●',
    	dot: '․',
    	line: '─',
    	ellipsis: '…',
    	pointer: '❯',
    	pointerSmall: '›',
    	info: 'ℹ',
    	warning: '⚠',
    	hamburger: '☰',
    	smiley: '㋡',
    	mustache: '෴',
    	heart: '♥',
    	nodejs: '⬢',
    	arrowUp: '↑',
    	arrowDown: '↓',
    	arrowLeft: '←',
    	arrowRight: '→',
    	radioOn: '◉',
    	radioOff: '◯',
    	checkboxOn: '☒',
    	checkboxOff: '☐',
    	checkboxCircleOn: 'ⓧ',
    	checkboxCircleOff: 'Ⓘ',
    	questionMarkPrefix: '?⃝',
    	oneHalf: '½',
    	oneThird: '⅓',
    	oneQuarter: '¼',
    	oneFifth: '⅕',
    	oneSixth: '⅙',
    	oneSeventh: '⅐',
    	oneEighth: '⅛',
    	oneNinth: '⅑',
    	oneTenth: '⅒',
    	twoThirds: '⅔',
    	twoFifths: '⅖',
    	threeQuarters: '¾',
    	threeFifths: '⅗',
    	threeEighths: '⅜',
    	fourFifths: '⅘',
    	fiveSixths: '⅚',
    	fiveEighths: '⅝',
    	sevenEighths: '⅞'
    };

    const windows = {
    	tick: '√',
    	cross: '×',
    	star: '*',
    	square: '█',
    	squareSmall: '[ ]',
    	squareSmallFilled: '[█]',
    	play: '►',
    	circle: '( )',
    	circleFilled: '(*)',
    	circleDotted: '( )',
    	circleDouble: '( )',
    	circleCircle: '(○)',
    	circleCross: '(×)',
    	circlePipe: '(│)',
    	circleQuestionMark: '(?)',
    	bullet: '*',
    	dot: '.',
    	line: '─',
    	ellipsis: '...',
    	pointer: '>',
    	pointerSmall: '»',
    	info: 'i',
    	warning: '‼',
    	hamburger: '≡',
    	smiley: '☺',
    	mustache: '┌─┐',
    	heart: main$3.heart,
    	nodejs: '♦',
    	arrowUp: main$3.arrowUp,
    	arrowDown: main$3.arrowDown,
    	arrowLeft: main$3.arrowLeft,
    	arrowRight: main$3.arrowRight,
    	radioOn: '(*)',
    	radioOff: '( )',
    	checkboxOn: '[×]',
    	checkboxOff: '[ ]',
    	checkboxCircleOn: '(×)',
    	checkboxCircleOff: '( )',
    	questionMarkPrefix: '？',
    	oneHalf: '1/2',
    	oneThird: '1/3',
    	oneQuarter: '1/4',
    	oneFifth: '1/5',
    	oneSixth: '1/6',
    	oneSeventh: '1/7',
    	oneEighth: '1/8',
    	oneNinth: '1/9',
    	oneTenth: '1/10',
    	twoThirds: '2/3',
    	twoFifths: '2/5',
    	threeQuarters: '3/4',
    	threeFifths: '3/5',
    	threeEighths: '3/8',
    	fourFifths: '4/5',
    	fiveSixths: '5/6',
    	fiveEighths: '5/8',
    	sevenEighths: '7/8'
    };

    if (platform === 'linux') {
    	// The main one doesn't look that good on Ubuntu.
    	main$3.questionMarkPrefix = '?';
    }

    const figures$3 = platform === 'win32' ? windows : main$3;

    const fn = string => {
    	if (figures$3 === main$3) {
    		return string;
    	}

    	for (const [key, value] of Object.entries(main$3)) {
    		if (value === figures$3[key]) {
    			continue;
    		}

    		string = string.replace(new RegExp(escapeStringRegexp(value), 'g'), figures$3[key]);
    	}

    	return string;
    };

    figures$4.exports = Object.assign(fn, figures$3);
    figures$4.exports.main = main$3;
    figures$4.exports.windows = windows;

    const chalk$c = source;
    const figures$2 = figures$4.exports;

    /**
     * Separator object
     * Used to space/separate choices group
     * @constructor
     * @param {String} line   Separation line content (facultative)
     */

    class Separator$3 {
      constructor(line) {
        this.type = 'separator';
        this.line = chalk$c.dim(line || new Array(15).join(figures$2.line));
      }

      /**
       * Stringify separator
       * @return {String} the separator display string
       */
      toString() {
        return this.line;
      }
    }

    /**
     * Helper function returning false if object is a separator
     * @param  {Object} obj object to test against
     * @return {Boolean}    `false` if object is a separator
     */

    Separator$3.exclude = function (obj) {
      return obj.type !== 'separator';
    };

    var separator = Separator$3;

    var through$1 = {exports: {}};

    (function (module, exports) {
    var Stream = require$$0__default$1["default"];

    // through
    //
    // a stream that does nothing but re-emit the input.
    // useful for aggregating a series of changing but not ending streams into one stream)

    module.exports = through;
    through.through = through;

    //create a readable writable stream.

    function through (write, end, opts) {
      write = write || function (data) { this.queue(data); };
      end = end || function () { this.queue(null); };

      var ended = false, destroyed = false, buffer = [], _ended = false;
      var stream = new Stream();
      stream.readable = stream.writable = true;
      stream.paused = false;

    //  stream.autoPause   = !(opts && opts.autoPause   === false)
      stream.autoDestroy = !(opts && opts.autoDestroy === false);

      stream.write = function (data) {
        write.call(this, data);
        return !stream.paused
      };

      function drain() {
        while(buffer.length && !stream.paused) {
          var data = buffer.shift();
          if(null === data)
            return stream.emit('end')
          else
            stream.emit('data', data);
        }
      }

      stream.queue = stream.push = function (data) {
    //    console.error(ended)
        if(_ended) return stream
        if(data === null) _ended = true;
        buffer.push(data);
        drain();
        return stream
      };

      //this will be registered as the first 'end' listener
      //must call destroy next tick, to make sure we're after any
      //stream piped from here.
      //this is only a problem if end is not emitted synchronously.
      //a nicer way to do this is to make sure this is the last listener for 'end'

      stream.on('end', function () {
        stream.readable = false;
        if(!stream.writable && stream.autoDestroy)
          process.nextTick(function () {
            stream.destroy();
          });
      });

      function _end () {
        stream.writable = false;
        end.call(stream);
        if(!stream.readable && stream.autoDestroy)
          stream.destroy();
      }

      stream.end = function (data) {
        if(ended) return
        ended = true;
        if(arguments.length) stream.write(data);
        _end(); // will emit or queue
        return stream
      };

      stream.destroy = function () {
        if(destroyed) return
        destroyed = true;
        ended = true;
        buffer.length = 0;
        stream.writable = stream.readable = false;
        stream.emit('close');
        return stream
      };

      stream.pause = function () {
        if(stream.paused) return
        stream.paused = true;
        return stream
      };

      stream.resume = function () {
        if(stream.paused) {
          stream.paused = false;
          stream.emit('resume');
        }
        drain();
        //may have become paused again,
        //as drain emits 'data'.
        if(!stream.paused)
          stream.emit('drain');
        return stream
      };
      return stream
    }
    }(through$1));

    /** Detect free variable `global` from Node.js. */

    var freeGlobal$1 = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;

    var _freeGlobal = freeGlobal$1;

    var freeGlobal = _freeGlobal;

    /** Detect free variable `self`. */
    var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

    /** Used as a reference to the global object. */
    var root$8 = freeGlobal || freeSelf || Function('return this')();

    var _root = root$8;

    var root$7 = _root;

    /** Built-in value references. */
    var Symbol$7 = root$7.Symbol;

    var _Symbol = Symbol$7;

    var Symbol$6 = _Symbol;

    /** Used for built-in method references. */
    var objectProto$i = Object.prototype;

    /** Used to check objects for own properties. */
    var hasOwnProperty$e = objectProto$i.hasOwnProperty;

    /**
     * Used to resolve the
     * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
     * of values.
     */
    var nativeObjectToString$1 = objectProto$i.toString;

    /** Built-in value references. */
    var symToStringTag$1 = Symbol$6 ? Symbol$6.toStringTag : undefined;

    /**
     * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the raw `toStringTag`.
     */
    function getRawTag$1(value) {
      var isOwn = hasOwnProperty$e.call(value, symToStringTag$1),
          tag = value[symToStringTag$1];

      try {
        value[symToStringTag$1] = undefined;
        var unmasked = true;
      } catch (e) {}

      var result = nativeObjectToString$1.call(value);
      if (unmasked) {
        if (isOwn) {
          value[symToStringTag$1] = tag;
        } else {
          delete value[symToStringTag$1];
        }
      }
      return result;
    }

    var _getRawTag = getRawTag$1;

    /** Used for built-in method references. */

    var objectProto$h = Object.prototype;

    /**
     * Used to resolve the
     * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
     * of values.
     */
    var nativeObjectToString = objectProto$h.toString;

    /**
     * Converts `value` to a string using `Object.prototype.toString`.
     *
     * @private
     * @param {*} value The value to convert.
     * @returns {string} Returns the converted string.
     */
    function objectToString$1(value) {
      return nativeObjectToString.call(value);
    }

    var _objectToString = objectToString$1;

    var Symbol$5 = _Symbol,
        getRawTag = _getRawTag,
        objectToString = _objectToString;

    /** `Object#toString` result references. */
    var nullTag = '[object Null]',
        undefinedTag = '[object Undefined]';

    /** Built-in value references. */
    var symToStringTag = Symbol$5 ? Symbol$5.toStringTag : undefined;

    /**
     * The base implementation of `getTag` without fallbacks for buggy environments.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */
    function baseGetTag$9(value) {
      if (value == null) {
        return value === undefined ? undefinedTag : nullTag;
      }
      return (symToStringTag && symToStringTag in Object(value))
        ? getRawTag(value)
        : objectToString(value);
    }

    var _baseGetTag = baseGetTag$9;

    /**
     * Checks if `value` is the
     * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
     * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an object, else `false`.
     * @example
     *
     * _.isObject({});
     * // => true
     *
     * _.isObject([1, 2, 3]);
     * // => true
     *
     * _.isObject(_.noop);
     * // => true
     *
     * _.isObject(null);
     * // => false
     */

    function isObject$9(value) {
      var type = typeof value;
      return value != null && (type == 'object' || type == 'function');
    }

    var isObject_1 = isObject$9;

    var baseGetTag$8 = _baseGetTag,
        isObject$8 = isObject_1;

    /** `Object#toString` result references. */
    var asyncTag = '[object AsyncFunction]',
        funcTag$2 = '[object Function]',
        genTag$1 = '[object GeneratorFunction]',
        proxyTag = '[object Proxy]';

    /**
     * Checks if `value` is classified as a `Function` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a function, else `false`.
     * @example
     *
     * _.isFunction(_);
     * // => true
     *
     * _.isFunction(/abc/);
     * // => false
     */
    function isFunction$3(value) {
      if (!isObject$8(value)) {
        return false;
      }
      // The use of `Object#toString` avoids issues with the `typeof` operator
      // in Safari 9 which returns 'object' for typed arrays and other constructors.
      var tag = baseGetTag$8(value);
      return tag == funcTag$2 || tag == genTag$1 || tag == asyncTag || tag == proxyTag;
    }

    var isFunction_1 = isFunction$3;

    var root$6 = _root;

    /** Used to detect overreaching core-js shims. */
    var coreJsData$1 = root$6['__core-js_shared__'];

    var _coreJsData = coreJsData$1;

    var coreJsData = _coreJsData;

    /** Used to detect methods masquerading as native. */
    var maskSrcKey = (function() {
      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
      return uid ? ('Symbol(src)_1.' + uid) : '';
    }());

    /**
     * Checks if `func` has its source masked.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` is masked, else `false`.
     */
    function isMasked$1(func) {
      return !!maskSrcKey && (maskSrcKey in func);
    }

    var _isMasked = isMasked$1;

    /** Used for built-in method references. */

    var funcProto$2 = Function.prototype;

    /** Used to resolve the decompiled source of functions. */
    var funcToString$2 = funcProto$2.toString;

    /**
     * Converts `func` to its source code.
     *
     * @private
     * @param {Function} func The function to convert.
     * @returns {string} Returns the source code.
     */
    function toSource$2(func) {
      if (func != null) {
        try {
          return funcToString$2.call(func);
        } catch (e) {}
        try {
          return (func + '');
        } catch (e) {}
      }
      return '';
    }

    var _toSource = toSource$2;

    var isFunction$2 = isFunction_1,
        isMasked = _isMasked,
        isObject$7 = isObject_1,
        toSource$1 = _toSource;

    /**
     * Used to match `RegExp`
     * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
     */
    var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

    /** Used to detect host constructors (Safari). */
    var reIsHostCtor = /^\[object .+?Constructor\]$/;

    /** Used for built-in method references. */
    var funcProto$1 = Function.prototype,
        objectProto$g = Object.prototype;

    /** Used to resolve the decompiled source of functions. */
    var funcToString$1 = funcProto$1.toString;

    /** Used to check objects for own properties. */
    var hasOwnProperty$d = objectProto$g.hasOwnProperty;

    /** Used to detect if a method is native. */
    var reIsNative = RegExp('^' +
      funcToString$1.call(hasOwnProperty$d).replace(reRegExpChar, '\\$&')
      .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
    );

    /**
     * The base implementation of `_.isNative` without bad shim checks.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function,
     *  else `false`.
     */
    function baseIsNative$1(value) {
      if (!isObject$7(value) || isMasked(value)) {
        return false;
      }
      var pattern = isFunction$2(value) ? reIsNative : reIsHostCtor;
      return pattern.test(toSource$1(value));
    }

    var _baseIsNative = baseIsNative$1;

    /**
     * Gets the value at `key` of `object`.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {string} key The key of the property to get.
     * @returns {*} Returns the property value.
     */

    function getValue$1(object, key) {
      return object == null ? undefined : object[key];
    }

    var _getValue = getValue$1;

    var baseIsNative = _baseIsNative,
        getValue = _getValue;

    /**
     * Gets the native function at `key` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {string} key The key of the method to get.
     * @returns {*} Returns the function if it's native, else `undefined`.
     */
    function getNative$7(object, key) {
      var value = getValue(object, key);
      return baseIsNative(value) ? value : undefined;
    }

    var _getNative = getNative$7;

    var getNative$6 = _getNative;

    var defineProperty$2 = (function() {
      try {
        var func = getNative$6(Object, 'defineProperty');
        func({}, '', {});
        return func;
      } catch (e) {}
    }());

    var _defineProperty = defineProperty$2;

    var defineProperty$1 = _defineProperty;

    /**
     * The base implementation of `assignValue` and `assignMergeValue` without
     * value checks.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function baseAssignValue$2(object, key, value) {
      if (key == '__proto__' && defineProperty$1) {
        defineProperty$1(object, key, {
          'configurable': true,
          'enumerable': true,
          'value': value,
          'writable': true
        });
      } else {
        object[key] = value;
      }
    }

    var _baseAssignValue = baseAssignValue$2;

    /**
     * Performs a
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * comparison between two values to determine if they are equivalent.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'a': 1 };
     * var other = { 'a': 1 };
     *
     * _.eq(object, object);
     * // => true
     *
     * _.eq(object, other);
     * // => false
     *
     * _.eq('a', 'a');
     * // => true
     *
     * _.eq('a', Object('a'));
     * // => false
     *
     * _.eq(NaN, NaN);
     * // => true
     */

    function eq$5(value, other) {
      return value === other || (value !== value && other !== other);
    }

    var eq_1 = eq$5;

    var baseAssignValue$1 = _baseAssignValue,
        eq$4 = eq_1;

    /** Used for built-in method references. */
    var objectProto$f = Object.prototype;

    /** Used to check objects for own properties. */
    var hasOwnProperty$c = objectProto$f.hasOwnProperty;

    /**
     * Assigns `value` to `key` of `object` if the existing value is not equivalent
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function assignValue$4(object, key, value) {
      var objValue = object[key];
      if (!(hasOwnProperty$c.call(object, key) && eq$4(objValue, value)) ||
          (value === undefined && !(key in object))) {
        baseAssignValue$1(object, key, value);
      }
    }

    var _assignValue = assignValue$4;

    var assignValue$3 = _assignValue,
        baseAssignValue = _baseAssignValue;

    /**
     * Copies properties of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy properties from.
     * @param {Array} props The property identifiers to copy.
     * @param {Object} [object={}] The object to copy properties to.
     * @param {Function} [customizer] The function to customize copied values.
     * @returns {Object} Returns `object`.
     */
    function copyObject$7(source, props, object, customizer) {
      var isNew = !object;
      object || (object = {});

      var index = -1,
          length = props.length;

      while (++index < length) {
        var key = props[index];

        var newValue = customizer
          ? customizer(object[key], source[key], key, object, source)
          : undefined;

        if (newValue === undefined) {
          newValue = source[key];
        }
        if (isNew) {
          baseAssignValue(object, key, newValue);
        } else {
          assignValue$3(object, key, newValue);
        }
      }
      return object;
    }

    var _copyObject = copyObject$7;

    /**
     * This method returns the first argument it receives.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {*} value Any value.
     * @returns {*} Returns `value`.
     * @example
     *
     * var object = { 'a': 1 };
     *
     * console.log(_.identity(object) === object);
     * // => true
     */

    function identity$5(value) {
      return value;
    }

    var identity_1 = identity$5;

    /**
     * A faster alternative to `Function#apply`, this function invokes `func`
     * with the `this` binding of `thisArg` and the arguments of `args`.
     *
     * @private
     * @param {Function} func The function to invoke.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {Array} args The arguments to invoke `func` with.
     * @returns {*} Returns the result of `func`.
     */

    function apply$1(func, thisArg, args) {
      switch (args.length) {
        case 0: return func.call(thisArg);
        case 1: return func.call(thisArg, args[0]);
        case 2: return func.call(thisArg, args[0], args[1]);
        case 3: return func.call(thisArg, args[0], args[1], args[2]);
      }
      return func.apply(thisArg, args);
    }

    var _apply = apply$1;

    var apply = _apply;

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeMax$1 = Math.max;

    /**
     * A specialized version of `baseRest` which transforms the rest array.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @param {Function} transform The rest array transform.
     * @returns {Function} Returns the new function.
     */
    function overRest$2(func, start, transform) {
      start = nativeMax$1(start === undefined ? (func.length - 1) : start, 0);
      return function() {
        var args = arguments,
            index = -1,
            length = nativeMax$1(args.length - start, 0),
            array = Array(length);

        while (++index < length) {
          array[index] = args[start + index];
        }
        index = -1;
        var otherArgs = Array(start + 1);
        while (++index < start) {
          otherArgs[index] = args[index];
        }
        otherArgs[start] = transform(array);
        return apply(func, this, otherArgs);
      };
    }

    var _overRest = overRest$2;

    /**
     * Creates a function that returns `value`.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Util
     * @param {*} value The value to return from the new function.
     * @returns {Function} Returns the new constant function.
     * @example
     *
     * var objects = _.times(2, _.constant({ 'a': 1 }));
     *
     * console.log(objects);
     * // => [{ 'a': 1 }, { 'a': 1 }]
     *
     * console.log(objects[0] === objects[1]);
     * // => true
     */

    function constant$1(value) {
      return function() {
        return value;
      };
    }

    var constant_1 = constant$1;

    var constant = constant_1,
        defineProperty = _defineProperty,
        identity$4 = identity_1;

    /**
     * The base implementation of `setToString` without support for hot loop shorting.
     *
     * @private
     * @param {Function} func The function to modify.
     * @param {Function} string The `toString` result.
     * @returns {Function} Returns `func`.
     */
    var baseSetToString$1 = !defineProperty ? identity$4 : function(func, string) {
      return defineProperty(func, 'toString', {
        'configurable': true,
        'enumerable': false,
        'value': constant(string),
        'writable': true
      });
    };

    var _baseSetToString = baseSetToString$1;

    /** Used to detect hot functions by number of calls within a span of milliseconds. */

    var HOT_COUNT = 800,
        HOT_SPAN = 16;

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeNow = Date.now;

    /**
     * Creates a function that'll short out and invoke `identity` instead
     * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
     * milliseconds.
     *
     * @private
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new shortable function.
     */
    function shortOut$1(func) {
      var count = 0,
          lastCalled = 0;

      return function() {
        var stamp = nativeNow(),
            remaining = HOT_SPAN - (stamp - lastCalled);

        lastCalled = stamp;
        if (remaining > 0) {
          if (++count >= HOT_COUNT) {
            return arguments[0];
          }
        } else {
          count = 0;
        }
        return func.apply(undefined, arguments);
      };
    }

    var _shortOut = shortOut$1;

    var baseSetToString = _baseSetToString,
        shortOut = _shortOut;

    /**
     * Sets the `toString` method of `func` to return `string`.
     *
     * @private
     * @param {Function} func The function to modify.
     * @param {Function} string The `toString` result.
     * @returns {Function} Returns `func`.
     */
    var setToString$2 = shortOut(baseSetToString);

    var _setToString = setToString$2;

    var identity$3 = identity_1,
        overRest$1 = _overRest,
        setToString$1 = _setToString;

    /**
     * The base implementation of `_.rest` which doesn't validate or coerce arguments.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @returns {Function} Returns the new function.
     */
    function baseRest$2(func, start) {
      return setToString$1(overRest$1(func, start, identity$3), func + '');
    }

    var _baseRest = baseRest$2;

    /** Used as references for various `Number` constants. */

    var MAX_SAFE_INTEGER$1 = 9007199254740991;

    /**
     * Checks if `value` is a valid array-like length.
     *
     * **Note:** This method is loosely based on
     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
     * @example
     *
     * _.isLength(3);
     * // => true
     *
     * _.isLength(Number.MIN_VALUE);
     * // => false
     *
     * _.isLength(Infinity);
     * // => false
     *
     * _.isLength('3');
     * // => false
     */
    function isLength$3(value) {
      return typeof value == 'number' &&
        value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER$1;
    }

    var isLength_1 = isLength$3;

    var isFunction$1 = isFunction_1,
        isLength$2 = isLength_1;

    /**
     * Checks if `value` is array-like. A value is considered array-like if it's
     * not a function and has a `value.length` that's an integer greater than or
     * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
     * @example
     *
     * _.isArrayLike([1, 2, 3]);
     * // => true
     *
     * _.isArrayLike(document.body.children);
     * // => true
     *
     * _.isArrayLike('abc');
     * // => true
     *
     * _.isArrayLike(_.noop);
     * // => false
     */
    function isArrayLike$8(value) {
      return value != null && isLength$2(value.length) && !isFunction$1(value);
    }

    var isArrayLike_1 = isArrayLike$8;

    /** Used as references for various `Number` constants. */

    var MAX_SAFE_INTEGER = 9007199254740991;

    /** Used to detect unsigned integer values. */
    var reIsUint = /^(?:0|[1-9]\d*)$/;

    /**
     * Checks if `value` is a valid array-like index.
     *
     * @private
     * @param {*} value The value to check.
     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
     */
    function isIndex$4(value, length) {
      var type = typeof value;
      length = length == null ? MAX_SAFE_INTEGER : length;

      return !!length &&
        (type == 'number' ||
          (type != 'symbol' && reIsUint.test(value))) &&
            (value > -1 && value % 1 == 0 && value < length);
    }

    var _isIndex = isIndex$4;

    var eq$3 = eq_1,
        isArrayLike$7 = isArrayLike_1,
        isIndex$3 = _isIndex,
        isObject$6 = isObject_1;

    /**
     * Checks if the given arguments are from an iteratee call.
     *
     * @private
     * @param {*} value The potential iteratee value argument.
     * @param {*} index The potential iteratee index or key argument.
     * @param {*} object The potential iteratee object argument.
     * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
     *  else `false`.
     */
    function isIterateeCall$2(value, index, object) {
      if (!isObject$6(object)) {
        return false;
      }
      var type = typeof index;
      if (type == 'number'
            ? (isArrayLike$7(object) && isIndex$3(index, object.length))
            : (type == 'string' && index in object)
          ) {
        return eq$3(object[index], value);
      }
      return false;
    }

    var _isIterateeCall = isIterateeCall$2;

    var baseRest$1 = _baseRest,
        isIterateeCall$1 = _isIterateeCall;

    /**
     * Creates a function like `_.assign`.
     *
     * @private
     * @param {Function} assigner The function to assign values.
     * @returns {Function} Returns the new assigner function.
     */
    function createAssigner$2(assigner) {
      return baseRest$1(function(object, sources) {
        var index = -1,
            length = sources.length,
            customizer = length > 1 ? sources[length - 1] : undefined,
            guard = length > 2 ? sources[2] : undefined;

        customizer = (assigner.length > 3 && typeof customizer == 'function')
          ? (length--, customizer)
          : undefined;

        if (guard && isIterateeCall$1(sources[0], sources[1], guard)) {
          customizer = length < 3 ? undefined : customizer;
          length = 1;
        }
        object = Object(object);
        while (++index < length) {
          var source = sources[index];
          if (source) {
            assigner(object, source, index, customizer);
          }
        }
        return object;
      });
    }

    var _createAssigner = createAssigner$2;

    /**
     * The base implementation of `_.times` without support for iteratee shorthands
     * or max array length checks.
     *
     * @private
     * @param {number} n The number of times to invoke `iteratee`.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns the array of results.
     */

    function baseTimes$1(n, iteratee) {
      var index = -1,
          result = Array(n);

      while (++index < n) {
        result[index] = iteratee(index);
      }
      return result;
    }

    var _baseTimes = baseTimes$1;

    /**
     * Checks if `value` is object-like. A value is object-like if it's not `null`
     * and has a `typeof` result of "object".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
     * @example
     *
     * _.isObjectLike({});
     * // => true
     *
     * _.isObjectLike([1, 2, 3]);
     * // => true
     *
     * _.isObjectLike(_.noop);
     * // => false
     *
     * _.isObjectLike(null);
     * // => false
     */

    function isObjectLike$b(value) {
      return value != null && typeof value == 'object';
    }

    var isObjectLike_1 = isObjectLike$b;

    var baseGetTag$7 = _baseGetTag,
        isObjectLike$a = isObjectLike_1;

    /** `Object#toString` result references. */
    var argsTag$3 = '[object Arguments]';

    /**
     * The base implementation of `_.isArguments`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
     */
    function baseIsArguments$1(value) {
      return isObjectLike$a(value) && baseGetTag$7(value) == argsTag$3;
    }

    var _baseIsArguments = baseIsArguments$1;

    var baseIsArguments = _baseIsArguments,
        isObjectLike$9 = isObjectLike_1;

    /** Used for built-in method references. */
    var objectProto$e = Object.prototype;

    /** Used to check objects for own properties. */
    var hasOwnProperty$b = objectProto$e.hasOwnProperty;

    /** Built-in value references. */
    var propertyIsEnumerable$1 = objectProto$e.propertyIsEnumerable;

    /**
     * Checks if `value` is likely an `arguments` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
     *  else `false`.
     * @example
     *
     * _.isArguments(function() { return arguments; }());
     * // => true
     *
     * _.isArguments([1, 2, 3]);
     * // => false
     */
    var isArguments$3 = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
      return isObjectLike$9(value) && hasOwnProperty$b.call(value, 'callee') &&
        !propertyIsEnumerable$1.call(value, 'callee');
    };

    var isArguments_1 = isArguments$3;

    /**
     * Checks if `value` is classified as an `Array` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array, else `false`.
     * @example
     *
     * _.isArray([1, 2, 3]);
     * // => true
     *
     * _.isArray(document.body.children);
     * // => false
     *
     * _.isArray('abc');
     * // => false
     *
     * _.isArray(_.noop);
     * // => false
     */

    var isArray$h = Array.isArray;

    var isArray_1 = isArray$h;

    var isBuffer$3 = {exports: {}};

    /**
     * This method returns `false`.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {boolean} Returns `false`.
     * @example
     *
     * _.times(2, _.stubFalse);
     * // => [false, false]
     */

    function stubFalse() {
      return false;
    }

    var stubFalse_1 = stubFalse;

    (function (module, exports) {
    var root = _root,
        stubFalse = stubFalse_1;

    /** Detect free variable `exports`. */
    var freeExports = exports && !exports.nodeType && exports;

    /** Detect free variable `module`. */
    var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;

    /** Detect the popular CommonJS extension `module.exports`. */
    var moduleExports = freeModule && freeModule.exports === freeExports;

    /** Built-in value references. */
    var Buffer = moduleExports ? root.Buffer : undefined;

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;

    /**
     * Checks if `value` is a buffer.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
     * @example
     *
     * _.isBuffer(new Buffer(2));
     * // => true
     *
     * _.isBuffer(new Uint8Array(2));
     * // => false
     */
    var isBuffer = nativeIsBuffer || stubFalse;

    module.exports = isBuffer;
    }(isBuffer$3, isBuffer$3.exports));

    var baseGetTag$6 = _baseGetTag,
        isLength$1 = isLength_1,
        isObjectLike$8 = isObjectLike_1;

    /** `Object#toString` result references. */
    var argsTag$2 = '[object Arguments]',
        arrayTag$2 = '[object Array]',
        boolTag$4 = '[object Boolean]',
        dateTag$3 = '[object Date]',
        errorTag$2 = '[object Error]',
        funcTag$1 = '[object Function]',
        mapTag$5 = '[object Map]',
        numberTag$4 = '[object Number]',
        objectTag$4 = '[object Object]',
        regexpTag$3 = '[object RegExp]',
        setTag$5 = '[object Set]',
        stringTag$4 = '[object String]',
        weakMapTag$2 = '[object WeakMap]';

    var arrayBufferTag$3 = '[object ArrayBuffer]',
        dataViewTag$4 = '[object DataView]',
        float32Tag$2 = '[object Float32Array]',
        float64Tag$2 = '[object Float64Array]',
        int8Tag$2 = '[object Int8Array]',
        int16Tag$2 = '[object Int16Array]',
        int32Tag$2 = '[object Int32Array]',
        uint8Tag$2 = '[object Uint8Array]',
        uint8ClampedTag$2 = '[object Uint8ClampedArray]',
        uint16Tag$2 = '[object Uint16Array]',
        uint32Tag$2 = '[object Uint32Array]';

    /** Used to identify `toStringTag` values of typed arrays. */
    var typedArrayTags = {};
    typedArrayTags[float32Tag$2] = typedArrayTags[float64Tag$2] =
    typedArrayTags[int8Tag$2] = typedArrayTags[int16Tag$2] =
    typedArrayTags[int32Tag$2] = typedArrayTags[uint8Tag$2] =
    typedArrayTags[uint8ClampedTag$2] = typedArrayTags[uint16Tag$2] =
    typedArrayTags[uint32Tag$2] = true;
    typedArrayTags[argsTag$2] = typedArrayTags[arrayTag$2] =
    typedArrayTags[arrayBufferTag$3] = typedArrayTags[boolTag$4] =
    typedArrayTags[dataViewTag$4] = typedArrayTags[dateTag$3] =
    typedArrayTags[errorTag$2] = typedArrayTags[funcTag$1] =
    typedArrayTags[mapTag$5] = typedArrayTags[numberTag$4] =
    typedArrayTags[objectTag$4] = typedArrayTags[regexpTag$3] =
    typedArrayTags[setTag$5] = typedArrayTags[stringTag$4] =
    typedArrayTags[weakMapTag$2] = false;

    /**
     * The base implementation of `_.isTypedArray` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
     */
    function baseIsTypedArray$1(value) {
      return isObjectLike$8(value) &&
        isLength$1(value.length) && !!typedArrayTags[baseGetTag$6(value)];
    }

    var _baseIsTypedArray = baseIsTypedArray$1;

    /**
     * The base implementation of `_.unary` without support for storing metadata.
     *
     * @private
     * @param {Function} func The function to cap arguments for.
     * @returns {Function} Returns the new capped function.
     */

    function baseUnary$3(func) {
      return function(value) {
        return func(value);
      };
    }

    var _baseUnary = baseUnary$3;

    var _nodeUtil = {exports: {}};

    (function (module, exports) {
    var freeGlobal = _freeGlobal;

    /** Detect free variable `exports`. */
    var freeExports = exports && !exports.nodeType && exports;

    /** Detect free variable `module`. */
    var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;

    /** Detect the popular CommonJS extension `module.exports`. */
    var moduleExports = freeModule && freeModule.exports === freeExports;

    /** Detect free variable `process` from Node.js. */
    var freeProcess = moduleExports && freeGlobal.process;

    /** Used to access faster Node.js helpers. */
    var nodeUtil = (function() {
      try {
        // Use `util.types` for Node.js 10+.
        var types = freeModule && freeModule.require && freeModule.require('util').types;

        if (types) {
          return types;
        }

        // Legacy `process.binding('util')` for Node.js < 10.
        return freeProcess && freeProcess.binding && freeProcess.binding('util');
      } catch (e) {}
    }());

    module.exports = nodeUtil;
    }(_nodeUtil, _nodeUtil.exports));

    var baseIsTypedArray = _baseIsTypedArray,
        baseUnary$2 = _baseUnary,
        nodeUtil$2 = _nodeUtil.exports;

    /* Node.js helper references. */
    var nodeIsTypedArray = nodeUtil$2 && nodeUtil$2.isTypedArray;

    /**
     * Checks if `value` is classified as a typed array.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
     * @example
     *
     * _.isTypedArray(new Uint8Array);
     * // => true
     *
     * _.isTypedArray([]);
     * // => false
     */
    var isTypedArray$2 = nodeIsTypedArray ? baseUnary$2(nodeIsTypedArray) : baseIsTypedArray;

    var isTypedArray_1 = isTypedArray$2;

    var baseTimes = _baseTimes,
        isArguments$2 = isArguments_1,
        isArray$g = isArray_1,
        isBuffer$2 = isBuffer$3.exports,
        isIndex$2 = _isIndex,
        isTypedArray$1 = isTypedArray_1;

    /** Used for built-in method references. */
    var objectProto$d = Object.prototype;

    /** Used to check objects for own properties. */
    var hasOwnProperty$a = objectProto$d.hasOwnProperty;

    /**
     * Creates an array of the enumerable property names of the array-like `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @param {boolean} inherited Specify returning inherited property names.
     * @returns {Array} Returns the array of property names.
     */
    function arrayLikeKeys$2(value, inherited) {
      var isArr = isArray$g(value),
          isArg = !isArr && isArguments$2(value),
          isBuff = !isArr && !isArg && isBuffer$2(value),
          isType = !isArr && !isArg && !isBuff && isTypedArray$1(value),
          skipIndexes = isArr || isArg || isBuff || isType,
          result = skipIndexes ? baseTimes(value.length, String) : [],
          length = result.length;

      for (var key in value) {
        if ((inherited || hasOwnProperty$a.call(value, key)) &&
            !(skipIndexes && (
               // Safari 9 has enumerable `arguments.length` in strict mode.
               key == 'length' ||
               // Node.js 0.10 has enumerable non-index properties on buffers.
               (isBuff && (key == 'offset' || key == 'parent')) ||
               // PhantomJS 2 has enumerable non-index properties on typed arrays.
               (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
               // Skip index properties.
               isIndex$2(key, length)
            ))) {
          result.push(key);
        }
      }
      return result;
    }

    var _arrayLikeKeys = arrayLikeKeys$2;

    /** Used for built-in method references. */

    var objectProto$c = Object.prototype;

    /**
     * Checks if `value` is likely a prototype object.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
     */
    function isPrototype$4(value) {
      var Ctor = value && value.constructor,
          proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto$c;

      return value === proto;
    }

    var _isPrototype = isPrototype$4;

    /**
     * This function is like
     * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
     * except that it includes inherited enumerable properties.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */

    function nativeKeysIn$1(object) {
      var result = [];
      if (object != null) {
        for (var key in Object(object)) {
          result.push(key);
        }
      }
      return result;
    }

    var _nativeKeysIn = nativeKeysIn$1;

    var isObject$5 = isObject_1,
        isPrototype$3 = _isPrototype,
        nativeKeysIn = _nativeKeysIn;

    /** Used for built-in method references. */
    var objectProto$b = Object.prototype;

    /** Used to check objects for own properties. */
    var hasOwnProperty$9 = objectProto$b.hasOwnProperty;

    /**
     * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function baseKeysIn$1(object) {
      if (!isObject$5(object)) {
        return nativeKeysIn(object);
      }
      var isProto = isPrototype$3(object),
          result = [];

      for (var key in object) {
        if (!(key == 'constructor' && (isProto || !hasOwnProperty$9.call(object, key)))) {
          result.push(key);
        }
      }
      return result;
    }

    var _baseKeysIn = baseKeysIn$1;

    var arrayLikeKeys$1 = _arrayLikeKeys,
        baseKeysIn = _baseKeysIn,
        isArrayLike$6 = isArrayLike_1;

    /**
     * Creates an array of the own and inherited enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keysIn(new Foo);
     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
     */
    function keysIn$5(object) {
      return isArrayLike$6(object) ? arrayLikeKeys$1(object, true) : baseKeysIn(object);
    }

    var keysIn_1 = keysIn$5;

    var copyObject$6 = _copyObject,
        createAssigner$1 = _createAssigner,
        keysIn$4 = keysIn_1;

    /**
     * This method is like `_.assign` except that it iterates over own and
     * inherited source properties.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias extend
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.assign
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * function Bar() {
     *   this.c = 3;
     * }
     *
     * Foo.prototype.b = 2;
     * Bar.prototype.d = 4;
     *
     * _.assignIn({ 'a': 0 }, new Foo, new Bar);
     * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }
     */
    var assignIn = createAssigner$1(function(object, source) {
      copyObject$6(source, keysIn$4(source), object);
    });

    var assignIn_1 = assignIn;

    var extend$1 = assignIn_1;

    /**
     * A specialized version of `_.map` for arrays without support for iteratee
     * shorthands.
     *
     * @private
     * @param {Array} [array] The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     */

    function arrayMap$3(array, iteratee) {
      var index = -1,
          length = array == null ? 0 : array.length,
          result = Array(length);

      while (++index < length) {
        result[index] = iteratee(array[index], index, array);
      }
      return result;
    }

    var _arrayMap = arrayMap$3;

    /**
     * Removes all key-value entries from the list cache.
     *
     * @private
     * @name clear
     * @memberOf ListCache
     */

    function listCacheClear$1() {
      this.__data__ = [];
      this.size = 0;
    }

    var _listCacheClear = listCacheClear$1;

    var eq$2 = eq_1;

    /**
     * Gets the index at which the `key` is found in `array` of key-value pairs.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {*} key The key to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     */
    function assocIndexOf$4(array, key) {
      var length = array.length;
      while (length--) {
        if (eq$2(array[length][0], key)) {
          return length;
        }
      }
      return -1;
    }

    var _assocIndexOf = assocIndexOf$4;

    var assocIndexOf$3 = _assocIndexOf;

    /** Used for built-in method references. */
    var arrayProto = Array.prototype;

    /** Built-in value references. */
    var splice = arrayProto.splice;

    /**
     * Removes `key` and its value from the list cache.
     *
     * @private
     * @name delete
     * @memberOf ListCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function listCacheDelete$1(key) {
      var data = this.__data__,
          index = assocIndexOf$3(data, key);

      if (index < 0) {
        return false;
      }
      var lastIndex = data.length - 1;
      if (index == lastIndex) {
        data.pop();
      } else {
        splice.call(data, index, 1);
      }
      --this.size;
      return true;
    }

    var _listCacheDelete = listCacheDelete$1;

    var assocIndexOf$2 = _assocIndexOf;

    /**
     * Gets the list cache value for `key`.
     *
     * @private
     * @name get
     * @memberOf ListCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function listCacheGet$1(key) {
      var data = this.__data__,
          index = assocIndexOf$2(data, key);

      return index < 0 ? undefined : data[index][1];
    }

    var _listCacheGet = listCacheGet$1;

    var assocIndexOf$1 = _assocIndexOf;

    /**
     * Checks if a list cache value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf ListCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function listCacheHas$1(key) {
      return assocIndexOf$1(this.__data__, key) > -1;
    }

    var _listCacheHas = listCacheHas$1;

    var assocIndexOf = _assocIndexOf;

    /**
     * Sets the list cache `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf ListCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the list cache instance.
     */
    function listCacheSet$1(key, value) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      if (index < 0) {
        ++this.size;
        data.push([key, value]);
      } else {
        data[index][1] = value;
      }
      return this;
    }

    var _listCacheSet = listCacheSet$1;

    var listCacheClear = _listCacheClear,
        listCacheDelete = _listCacheDelete,
        listCacheGet = _listCacheGet,
        listCacheHas = _listCacheHas,
        listCacheSet = _listCacheSet;

    /**
     * Creates an list cache object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function ListCache$4(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    // Add methods to `ListCache`.
    ListCache$4.prototype.clear = listCacheClear;
    ListCache$4.prototype['delete'] = listCacheDelete;
    ListCache$4.prototype.get = listCacheGet;
    ListCache$4.prototype.has = listCacheHas;
    ListCache$4.prototype.set = listCacheSet;

    var _ListCache = ListCache$4;

    var ListCache$3 = _ListCache;

    /**
     * Removes all key-value entries from the stack.
     *
     * @private
     * @name clear
     * @memberOf Stack
     */
    function stackClear$1() {
      this.__data__ = new ListCache$3;
      this.size = 0;
    }

    var _stackClear = stackClear$1;

    /**
     * Removes `key` and its value from the stack.
     *
     * @private
     * @name delete
     * @memberOf Stack
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */

    function stackDelete$1(key) {
      var data = this.__data__,
          result = data['delete'](key);

      this.size = data.size;
      return result;
    }

    var _stackDelete = stackDelete$1;

    /**
     * Gets the stack value for `key`.
     *
     * @private
     * @name get
     * @memberOf Stack
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */

    function stackGet$1(key) {
      return this.__data__.get(key);
    }

    var _stackGet = stackGet$1;

    /**
     * Checks if a stack value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Stack
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */

    function stackHas$1(key) {
      return this.__data__.has(key);
    }

    var _stackHas = stackHas$1;

    var getNative$5 = _getNative,
        root$5 = _root;

    /* Built-in method references that are verified to be native. */
    var Map$4 = getNative$5(root$5, 'Map');

    var _Map = Map$4;

    var getNative$4 = _getNative;

    /* Built-in method references that are verified to be native. */
    var nativeCreate$4 = getNative$4(Object, 'create');

    var _nativeCreate = nativeCreate$4;

    var nativeCreate$3 = _nativeCreate;

    /**
     * Removes all key-value entries from the hash.
     *
     * @private
     * @name clear
     * @memberOf Hash
     */
    function hashClear$1() {
      this.__data__ = nativeCreate$3 ? nativeCreate$3(null) : {};
      this.size = 0;
    }

    var _hashClear = hashClear$1;

    /**
     * Removes `key` and its value from the hash.
     *
     * @private
     * @name delete
     * @memberOf Hash
     * @param {Object} hash The hash to modify.
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */

    function hashDelete$1(key) {
      var result = this.has(key) && delete this.__data__[key];
      this.size -= result ? 1 : 0;
      return result;
    }

    var _hashDelete = hashDelete$1;

    var nativeCreate$2 = _nativeCreate;

    /** Used to stand-in for `undefined` hash values. */
    var HASH_UNDEFINED$2 = '__lodash_hash_undefined__';

    /** Used for built-in method references. */
    var objectProto$a = Object.prototype;

    /** Used to check objects for own properties. */
    var hasOwnProperty$8 = objectProto$a.hasOwnProperty;

    /**
     * Gets the hash value for `key`.
     *
     * @private
     * @name get
     * @memberOf Hash
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function hashGet$1(key) {
      var data = this.__data__;
      if (nativeCreate$2) {
        var result = data[key];
        return result === HASH_UNDEFINED$2 ? undefined : result;
      }
      return hasOwnProperty$8.call(data, key) ? data[key] : undefined;
    }

    var _hashGet = hashGet$1;

    var nativeCreate$1 = _nativeCreate;

    /** Used for built-in method references. */
    var objectProto$9 = Object.prototype;

    /** Used to check objects for own properties. */
    var hasOwnProperty$7 = objectProto$9.hasOwnProperty;

    /**
     * Checks if a hash value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Hash
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function hashHas$1(key) {
      var data = this.__data__;
      return nativeCreate$1 ? (data[key] !== undefined) : hasOwnProperty$7.call(data, key);
    }

    var _hashHas = hashHas$1;

    var nativeCreate = _nativeCreate;

    /** Used to stand-in for `undefined` hash values. */
    var HASH_UNDEFINED$1 = '__lodash_hash_undefined__';

    /**
     * Sets the hash `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Hash
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the hash instance.
     */
    function hashSet$1(key, value) {
      var data = this.__data__;
      this.size += this.has(key) ? 0 : 1;
      data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED$1 : value;
      return this;
    }

    var _hashSet = hashSet$1;

    var hashClear = _hashClear,
        hashDelete = _hashDelete,
        hashGet = _hashGet,
        hashHas = _hashHas,
        hashSet = _hashSet;

    /**
     * Creates a hash object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function Hash$1(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    // Add methods to `Hash`.
    Hash$1.prototype.clear = hashClear;
    Hash$1.prototype['delete'] = hashDelete;
    Hash$1.prototype.get = hashGet;
    Hash$1.prototype.has = hashHas;
    Hash$1.prototype.set = hashSet;

    var _Hash = Hash$1;

    var Hash = _Hash,
        ListCache$2 = _ListCache,
        Map$3 = _Map;

    /**
     * Removes all key-value entries from the map.
     *
     * @private
     * @name clear
     * @memberOf MapCache
     */
    function mapCacheClear$1() {
      this.size = 0;
      this.__data__ = {
        'hash': new Hash,
        'map': new (Map$3 || ListCache$2),
        'string': new Hash
      };
    }

    var _mapCacheClear = mapCacheClear$1;

    /**
     * Checks if `value` is suitable for use as unique object key.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
     */

    function isKeyable$1(value) {
      var type = typeof value;
      return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
        ? (value !== '__proto__')
        : (value === null);
    }

    var _isKeyable = isKeyable$1;

    var isKeyable = _isKeyable;

    /**
     * Gets the data for `map`.
     *
     * @private
     * @param {Object} map The map to query.
     * @param {string} key The reference key.
     * @returns {*} Returns the map data.
     */
    function getMapData$4(map, key) {
      var data = map.__data__;
      return isKeyable(key)
        ? data[typeof key == 'string' ? 'string' : 'hash']
        : data.map;
    }

    var _getMapData = getMapData$4;

    var getMapData$3 = _getMapData;

    /**
     * Removes `key` and its value from the map.
     *
     * @private
     * @name delete
     * @memberOf MapCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function mapCacheDelete$1(key) {
      var result = getMapData$3(this, key)['delete'](key);
      this.size -= result ? 1 : 0;
      return result;
    }

    var _mapCacheDelete = mapCacheDelete$1;

    var getMapData$2 = _getMapData;

    /**
     * Gets the map value for `key`.
     *
     * @private
     * @name get
     * @memberOf MapCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function mapCacheGet$1(key) {
      return getMapData$2(this, key).get(key);
    }

    var _mapCacheGet = mapCacheGet$1;

    var getMapData$1 = _getMapData;

    /**
     * Checks if a map value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf MapCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function mapCacheHas$1(key) {
      return getMapData$1(this, key).has(key);
    }

    var _mapCacheHas = mapCacheHas$1;

    var getMapData = _getMapData;

    /**
     * Sets the map `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf MapCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the map cache instance.
     */
    function mapCacheSet$1(key, value) {
      var data = getMapData(this, key),
          size = data.size;

      data.set(key, value);
      this.size += data.size == size ? 0 : 1;
      return this;
    }

    var _mapCacheSet = mapCacheSet$1;

    var mapCacheClear = _mapCacheClear,
        mapCacheDelete = _mapCacheDelete,
        mapCacheGet = _mapCacheGet,
        mapCacheHas = _mapCacheHas,
        mapCacheSet = _mapCacheSet;

    /**
     * Creates a map cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function MapCache$3(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    // Add methods to `MapCache`.
    MapCache$3.prototype.clear = mapCacheClear;
    MapCache$3.prototype['delete'] = mapCacheDelete;
    MapCache$3.prototype.get = mapCacheGet;
    MapCache$3.prototype.has = mapCacheHas;
    MapCache$3.prototype.set = mapCacheSet;

    var _MapCache = MapCache$3;

    var ListCache$1 = _ListCache,
        Map$2 = _Map,
        MapCache$2 = _MapCache;

    /** Used as the size to enable large array optimizations. */
    var LARGE_ARRAY_SIZE$1 = 200;

    /**
     * Sets the stack `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Stack
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the stack cache instance.
     */
    function stackSet$1(key, value) {
      var data = this.__data__;
      if (data instanceof ListCache$1) {
        var pairs = data.__data__;
        if (!Map$2 || (pairs.length < LARGE_ARRAY_SIZE$1 - 1)) {
          pairs.push([key, value]);
          this.size = ++data.size;
          return this;
        }
        data = this.__data__ = new MapCache$2(pairs);
      }
      data.set(key, value);
      this.size = data.size;
      return this;
    }

    var _stackSet = stackSet$1;

    var ListCache = _ListCache,
        stackClear = _stackClear,
        stackDelete = _stackDelete,
        stackGet = _stackGet,
        stackHas = _stackHas,
        stackSet = _stackSet;

    /**
     * Creates a stack cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function Stack$3(entries) {
      var data = this.__data__ = new ListCache(entries);
      this.size = data.size;
    }

    // Add methods to `Stack`.
    Stack$3.prototype.clear = stackClear;
    Stack$3.prototype['delete'] = stackDelete;
    Stack$3.prototype.get = stackGet;
    Stack$3.prototype.has = stackHas;
    Stack$3.prototype.set = stackSet;

    var _Stack = Stack$3;

    /**
     * A specialized version of `_.forEach` for arrays without support for
     * iteratee shorthands.
     *
     * @private
     * @param {Array} [array] The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns `array`.
     */

    function arrayEach$1(array, iteratee) {
      var index = -1,
          length = array == null ? 0 : array.length;

      while (++index < length) {
        if (iteratee(array[index], index, array) === false) {
          break;
        }
      }
      return array;
    }

    var _arrayEach = arrayEach$1;

    /**
     * Creates a unary function that invokes `func` with its argument transformed.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {Function} transform The argument transform.
     * @returns {Function} Returns the new function.
     */

    function overArg$2(func, transform) {
      return function(arg) {
        return func(transform(arg));
      };
    }

    var _overArg = overArg$2;

    var overArg$1 = _overArg;

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeKeys$1 = overArg$1(Object.keys, Object);

    var _nativeKeys = nativeKeys$1;

    var isPrototype$2 = _isPrototype,
        nativeKeys = _nativeKeys;

    /** Used for built-in method references. */
    var objectProto$8 = Object.prototype;

    /** Used to check objects for own properties. */
    var hasOwnProperty$6 = objectProto$8.hasOwnProperty;

    /**
     * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function baseKeys$1(object) {
      if (!isPrototype$2(object)) {
        return nativeKeys(object);
      }
      var result = [];
      for (var key in Object(object)) {
        if (hasOwnProperty$6.call(object, key) && key != 'constructor') {
          result.push(key);
        }
      }
      return result;
    }

    var _baseKeys = baseKeys$1;

    var arrayLikeKeys = _arrayLikeKeys,
        baseKeys = _baseKeys,
        isArrayLike$5 = isArrayLike_1;

    /**
     * Creates an array of the own enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects. See the
     * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
     * for more details.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keys(new Foo);
     * // => ['a', 'b'] (iteration order is not guaranteed)
     *
     * _.keys('hi');
     * // => ['0', '1']
     */
    function keys$7(object) {
      return isArrayLike$5(object) ? arrayLikeKeys(object) : baseKeys(object);
    }

    var keys_1 = keys$7;

    var copyObject$5 = _copyObject,
        keys$6 = keys_1;

    /**
     * The base implementation of `_.assign` without support for multiple sources
     * or `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */
    function baseAssign$1(object, source) {
      return object && copyObject$5(source, keys$6(source), object);
    }

    var _baseAssign = baseAssign$1;

    var copyObject$4 = _copyObject,
        keysIn$3 = keysIn_1;

    /**
     * The base implementation of `_.assignIn` without support for multiple sources
     * or `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */
    function baseAssignIn$1(object, source) {
      return object && copyObject$4(source, keysIn$3(source), object);
    }

    var _baseAssignIn = baseAssignIn$1;

    var _cloneBuffer = {exports: {}};

    (function (module, exports) {
    var root = _root;

    /** Detect free variable `exports`. */
    var freeExports = exports && !exports.nodeType && exports;

    /** Detect free variable `module`. */
    var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;

    /** Detect the popular CommonJS extension `module.exports`. */
    var moduleExports = freeModule && freeModule.exports === freeExports;

    /** Built-in value references. */
    var Buffer = moduleExports ? root.Buffer : undefined,
        allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined;

    /**
     * Creates a clone of  `buffer`.
     *
     * @private
     * @param {Buffer} buffer The buffer to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Buffer} Returns the cloned buffer.
     */
    function cloneBuffer(buffer, isDeep) {
      if (isDeep) {
        return buffer.slice();
      }
      var length = buffer.length,
          result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);

      buffer.copy(result);
      return result;
    }

    module.exports = cloneBuffer;
    }(_cloneBuffer, _cloneBuffer.exports));

    /**
     * Copies the values of `source` to `array`.
     *
     * @private
     * @param {Array} source The array to copy values from.
     * @param {Array} [array=[]] The array to copy values to.
     * @returns {Array} Returns `array`.
     */

    function copyArray$1(source, array) {
      var index = -1,
          length = source.length;

      array || (array = Array(length));
      while (++index < length) {
        array[index] = source[index];
      }
      return array;
    }

    var _copyArray = copyArray$1;

    /**
     * A specialized version of `_.filter` for arrays without support for
     * iteratee shorthands.
     *
     * @private
     * @param {Array} [array] The array to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     */

    function arrayFilter$2(array, predicate) {
      var index = -1,
          length = array == null ? 0 : array.length,
          resIndex = 0,
          result = [];

      while (++index < length) {
        var value = array[index];
        if (predicate(value, index, array)) {
          result[resIndex++] = value;
        }
      }
      return result;
    }

    var _arrayFilter = arrayFilter$2;

    /**
     * This method returns a new empty array.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {Array} Returns the new empty array.
     * @example
     *
     * var arrays = _.times(2, _.stubArray);
     *
     * console.log(arrays);
     * // => [[], []]
     *
     * console.log(arrays[0] === arrays[1]);
     * // => false
     */

    function stubArray$2() {
      return [];
    }

    var stubArray_1 = stubArray$2;

    var arrayFilter$1 = _arrayFilter,
        stubArray$1 = stubArray_1;

    /** Used for built-in method references. */
    var objectProto$7 = Object.prototype;

    /** Built-in value references. */
    var propertyIsEnumerable = objectProto$7.propertyIsEnumerable;

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeGetSymbols$1 = Object.getOwnPropertySymbols;

    /**
     * Creates an array of the own enumerable symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of symbols.
     */
    var getSymbols$3 = !nativeGetSymbols$1 ? stubArray$1 : function(object) {
      if (object == null) {
        return [];
      }
      object = Object(object);
      return arrayFilter$1(nativeGetSymbols$1(object), function(symbol) {
        return propertyIsEnumerable.call(object, symbol);
      });
    };

    var _getSymbols = getSymbols$3;

    var copyObject$3 = _copyObject,
        getSymbols$2 = _getSymbols;

    /**
     * Copies own symbols of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy symbols from.
     * @param {Object} [object={}] The object to copy symbols to.
     * @returns {Object} Returns `object`.
     */
    function copySymbols$1(source, object) {
      return copyObject$3(source, getSymbols$2(source), object);
    }

    var _copySymbols = copySymbols$1;

    /**
     * Appends the elements of `values` to `array`.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {Array} values The values to append.
     * @returns {Array} Returns `array`.
     */

    function arrayPush$3(array, values) {
      var index = -1,
          length = values.length,
          offset = array.length;

      while (++index < length) {
        array[offset + index] = values[index];
      }
      return array;
    }

    var _arrayPush = arrayPush$3;

    var overArg = _overArg;

    /** Built-in value references. */
    var getPrototype$3 = overArg(Object.getPrototypeOf, Object);

    var _getPrototype = getPrototype$3;

    var arrayPush$2 = _arrayPush,
        getPrototype$2 = _getPrototype,
        getSymbols$1 = _getSymbols,
        stubArray = stubArray_1;

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeGetSymbols = Object.getOwnPropertySymbols;

    /**
     * Creates an array of the own and inherited enumerable symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of symbols.
     */
    var getSymbolsIn$2 = !nativeGetSymbols ? stubArray : function(object) {
      var result = [];
      while (object) {
        arrayPush$2(result, getSymbols$1(object));
        object = getPrototype$2(object);
      }
      return result;
    };

    var _getSymbolsIn = getSymbolsIn$2;

    var copyObject$2 = _copyObject,
        getSymbolsIn$1 = _getSymbolsIn;

    /**
     * Copies own and inherited symbols of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy symbols from.
     * @param {Object} [object={}] The object to copy symbols to.
     * @returns {Object} Returns `object`.
     */
    function copySymbolsIn$1(source, object) {
      return copyObject$2(source, getSymbolsIn$1(source), object);
    }

    var _copySymbolsIn = copySymbolsIn$1;

    var arrayPush$1 = _arrayPush,
        isArray$f = isArray_1;

    /**
     * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
     * `keysFunc` and `symbolsFunc` to get the enumerable property names and
     * symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @param {Function} symbolsFunc The function to get the symbols of `object`.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function baseGetAllKeys$2(object, keysFunc, symbolsFunc) {
      var result = keysFunc(object);
      return isArray$f(object) ? result : arrayPush$1(result, symbolsFunc(object));
    }

    var _baseGetAllKeys = baseGetAllKeys$2;

    var baseGetAllKeys$1 = _baseGetAllKeys,
        getSymbols = _getSymbols,
        keys$5 = keys_1;

    /**
     * Creates an array of own enumerable property names and symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function getAllKeys$2(object) {
      return baseGetAllKeys$1(object, keys$5, getSymbols);
    }

    var _getAllKeys = getAllKeys$2;

    var baseGetAllKeys = _baseGetAllKeys,
        getSymbolsIn = _getSymbolsIn,
        keysIn$2 = keysIn_1;

    /**
     * Creates an array of own and inherited enumerable property names and
     * symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function getAllKeysIn$2(object) {
      return baseGetAllKeys(object, keysIn$2, getSymbolsIn);
    }

    var _getAllKeysIn = getAllKeysIn$2;

    var getNative$3 = _getNative,
        root$4 = _root;

    /* Built-in method references that are verified to be native. */
    var DataView$1 = getNative$3(root$4, 'DataView');

    var _DataView = DataView$1;

    var getNative$2 = _getNative,
        root$3 = _root;

    /* Built-in method references that are verified to be native. */
    var Promise$2 = getNative$2(root$3, 'Promise');

    var _Promise = Promise$2;

    var getNative$1 = _getNative,
        root$2 = _root;

    /* Built-in method references that are verified to be native. */
    var Set$3 = getNative$1(root$2, 'Set');

    var _Set = Set$3;

    var getNative = _getNative,
        root$1 = _root;

    /* Built-in method references that are verified to be native. */
    var WeakMap$2 = getNative(root$1, 'WeakMap');

    var _WeakMap = WeakMap$2;

    var DataView = _DataView,
        Map$1 = _Map,
        Promise$1 = _Promise,
        Set$2 = _Set,
        WeakMap$1 = _WeakMap,
        baseGetTag$5 = _baseGetTag,
        toSource = _toSource;

    /** `Object#toString` result references. */
    var mapTag$4 = '[object Map]',
        objectTag$3 = '[object Object]',
        promiseTag = '[object Promise]',
        setTag$4 = '[object Set]',
        weakMapTag$1 = '[object WeakMap]';

    var dataViewTag$3 = '[object DataView]';

    /** Used to detect maps, sets, and weakmaps. */
    var dataViewCtorString = toSource(DataView),
        mapCtorString = toSource(Map$1),
        promiseCtorString = toSource(Promise$1),
        setCtorString = toSource(Set$2),
        weakMapCtorString = toSource(WeakMap$1);

    /**
     * Gets the `toStringTag` of `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */
    var getTag$4 = baseGetTag$5;

    // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
    if ((DataView && getTag$4(new DataView(new ArrayBuffer(1))) != dataViewTag$3) ||
        (Map$1 && getTag$4(new Map$1) != mapTag$4) ||
        (Promise$1 && getTag$4(Promise$1.resolve()) != promiseTag) ||
        (Set$2 && getTag$4(new Set$2) != setTag$4) ||
        (WeakMap$1 && getTag$4(new WeakMap$1) != weakMapTag$1)) {
      getTag$4 = function(value) {
        var result = baseGetTag$5(value),
            Ctor = result == objectTag$3 ? value.constructor : undefined,
            ctorString = Ctor ? toSource(Ctor) : '';

        if (ctorString) {
          switch (ctorString) {
            case dataViewCtorString: return dataViewTag$3;
            case mapCtorString: return mapTag$4;
            case promiseCtorString: return promiseTag;
            case setCtorString: return setTag$4;
            case weakMapCtorString: return weakMapTag$1;
          }
        }
        return result;
      };
    }

    var _getTag = getTag$4;

    /** Used for built-in method references. */

    var objectProto$6 = Object.prototype;

    /** Used to check objects for own properties. */
    var hasOwnProperty$5 = objectProto$6.hasOwnProperty;

    /**
     * Initializes an array clone.
     *
     * @private
     * @param {Array} array The array to clone.
     * @returns {Array} Returns the initialized clone.
     */
    function initCloneArray$1(array) {
      var length = array.length,
          result = new array.constructor(length);

      // Add properties assigned by `RegExp#exec`.
      if (length && typeof array[0] == 'string' && hasOwnProperty$5.call(array, 'index')) {
        result.index = array.index;
        result.input = array.input;
      }
      return result;
    }

    var _initCloneArray = initCloneArray$1;

    var root = _root;

    /** Built-in value references. */
    var Uint8Array$3 = root.Uint8Array;

    var _Uint8Array = Uint8Array$3;

    var Uint8Array$2 = _Uint8Array;

    /**
     * Creates a clone of `arrayBuffer`.
     *
     * @private
     * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
     * @returns {ArrayBuffer} Returns the cloned array buffer.
     */
    function cloneArrayBuffer$3(arrayBuffer) {
      var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
      new Uint8Array$2(result).set(new Uint8Array$2(arrayBuffer));
      return result;
    }

    var _cloneArrayBuffer = cloneArrayBuffer$3;

    var cloneArrayBuffer$2 = _cloneArrayBuffer;

    /**
     * Creates a clone of `dataView`.
     *
     * @private
     * @param {Object} dataView The data view to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned data view.
     */
    function cloneDataView$1(dataView, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer$2(dataView.buffer) : dataView.buffer;
      return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
    }

    var _cloneDataView = cloneDataView$1;

    /** Used to match `RegExp` flags from their coerced string values. */

    var reFlags = /\w*$/;

    /**
     * Creates a clone of `regexp`.
     *
     * @private
     * @param {Object} regexp The regexp to clone.
     * @returns {Object} Returns the cloned regexp.
     */
    function cloneRegExp$1(regexp) {
      var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
      result.lastIndex = regexp.lastIndex;
      return result;
    }

    var _cloneRegExp = cloneRegExp$1;

    var Symbol$4 = _Symbol;

    /** Used to convert symbols to primitives and strings. */
    var symbolProto$2 = Symbol$4 ? Symbol$4.prototype : undefined,
        symbolValueOf$1 = symbolProto$2 ? symbolProto$2.valueOf : undefined;

    /**
     * Creates a clone of the `symbol` object.
     *
     * @private
     * @param {Object} symbol The symbol object to clone.
     * @returns {Object} Returns the cloned symbol object.
     */
    function cloneSymbol$1(symbol) {
      return symbolValueOf$1 ? Object(symbolValueOf$1.call(symbol)) : {};
    }

    var _cloneSymbol = cloneSymbol$1;

    var cloneArrayBuffer$1 = _cloneArrayBuffer;

    /**
     * Creates a clone of `typedArray`.
     *
     * @private
     * @param {Object} typedArray The typed array to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned typed array.
     */
    function cloneTypedArray$1(typedArray, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer$1(typedArray.buffer) : typedArray.buffer;
      return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
    }

    var _cloneTypedArray = cloneTypedArray$1;

    var cloneArrayBuffer = _cloneArrayBuffer,
        cloneDataView = _cloneDataView,
        cloneRegExp = _cloneRegExp,
        cloneSymbol = _cloneSymbol,
        cloneTypedArray = _cloneTypedArray;

    /** `Object#toString` result references. */
    var boolTag$3 = '[object Boolean]',
        dateTag$2 = '[object Date]',
        mapTag$3 = '[object Map]',
        numberTag$3 = '[object Number]',
        regexpTag$2 = '[object RegExp]',
        setTag$3 = '[object Set]',
        stringTag$3 = '[object String]',
        symbolTag$3 = '[object Symbol]';

    var arrayBufferTag$2 = '[object ArrayBuffer]',
        dataViewTag$2 = '[object DataView]',
        float32Tag$1 = '[object Float32Array]',
        float64Tag$1 = '[object Float64Array]',
        int8Tag$1 = '[object Int8Array]',
        int16Tag$1 = '[object Int16Array]',
        int32Tag$1 = '[object Int32Array]',
        uint8Tag$1 = '[object Uint8Array]',
        uint8ClampedTag$1 = '[object Uint8ClampedArray]',
        uint16Tag$1 = '[object Uint16Array]',
        uint32Tag$1 = '[object Uint32Array]';

    /**
     * Initializes an object clone based on its `toStringTag`.
     *
     * **Note:** This function only supports cloning values with tags of
     * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
     *
     * @private
     * @param {Object} object The object to clone.
     * @param {string} tag The `toStringTag` of the object to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the initialized clone.
     */
    function initCloneByTag$1(object, tag, isDeep) {
      var Ctor = object.constructor;
      switch (tag) {
        case arrayBufferTag$2:
          return cloneArrayBuffer(object);

        case boolTag$3:
        case dateTag$2:
          return new Ctor(+object);

        case dataViewTag$2:
          return cloneDataView(object, isDeep);

        case float32Tag$1: case float64Tag$1:
        case int8Tag$1: case int16Tag$1: case int32Tag$1:
        case uint8Tag$1: case uint8ClampedTag$1: case uint16Tag$1: case uint32Tag$1:
          return cloneTypedArray(object, isDeep);

        case mapTag$3:
          return new Ctor;

        case numberTag$3:
        case stringTag$3:
          return new Ctor(object);

        case regexpTag$2:
          return cloneRegExp(object);

        case setTag$3:
          return new Ctor;

        case symbolTag$3:
          return cloneSymbol(object);
      }
    }

    var _initCloneByTag = initCloneByTag$1;

    var isObject$4 = isObject_1;

    /** Built-in value references. */
    var objectCreate = Object.create;

    /**
     * The base implementation of `_.create` without support for assigning
     * properties to the created object.
     *
     * @private
     * @param {Object} proto The object to inherit from.
     * @returns {Object} Returns the new object.
     */
    var baseCreate$1 = (function() {
      function object() {}
      return function(proto) {
        if (!isObject$4(proto)) {
          return {};
        }
        if (objectCreate) {
          return objectCreate(proto);
        }
        object.prototype = proto;
        var result = new object;
        object.prototype = undefined;
        return result;
      };
    }());

    var _baseCreate = baseCreate$1;

    var baseCreate = _baseCreate,
        getPrototype$1 = _getPrototype,
        isPrototype$1 = _isPrototype;

    /**
     * Initializes an object clone.
     *
     * @private
     * @param {Object} object The object to clone.
     * @returns {Object} Returns the initialized clone.
     */
    function initCloneObject$1(object) {
      return (typeof object.constructor == 'function' && !isPrototype$1(object))
        ? baseCreate(getPrototype$1(object))
        : {};
    }

    var _initCloneObject = initCloneObject$1;

    var getTag$3 = _getTag,
        isObjectLike$7 = isObjectLike_1;

    /** `Object#toString` result references. */
    var mapTag$2 = '[object Map]';

    /**
     * The base implementation of `_.isMap` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
     */
    function baseIsMap$1(value) {
      return isObjectLike$7(value) && getTag$3(value) == mapTag$2;
    }

    var _baseIsMap = baseIsMap$1;

    var baseIsMap = _baseIsMap,
        baseUnary$1 = _baseUnary,
        nodeUtil$1 = _nodeUtil.exports;

    /* Node.js helper references. */
    var nodeIsMap = nodeUtil$1 && nodeUtil$1.isMap;

    /**
     * Checks if `value` is classified as a `Map` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
     * @example
     *
     * _.isMap(new Map);
     * // => true
     *
     * _.isMap(new WeakMap);
     * // => false
     */
    var isMap$1 = nodeIsMap ? baseUnary$1(nodeIsMap) : baseIsMap;

    var isMap_1 = isMap$1;

    var getTag$2 = _getTag,
        isObjectLike$6 = isObjectLike_1;

    /** `Object#toString` result references. */
    var setTag$2 = '[object Set]';

    /**
     * The base implementation of `_.isSet` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
     */
    function baseIsSet$1(value) {
      return isObjectLike$6(value) && getTag$2(value) == setTag$2;
    }

    var _baseIsSet = baseIsSet$1;

    var baseIsSet = _baseIsSet,
        baseUnary = _baseUnary,
        nodeUtil = _nodeUtil.exports;

    /* Node.js helper references. */
    var nodeIsSet = nodeUtil && nodeUtil.isSet;

    /**
     * Checks if `value` is classified as a `Set` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
     * @example
     *
     * _.isSet(new Set);
     * // => true
     *
     * _.isSet(new WeakSet);
     * // => false
     */
    var isSet$1 = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;

    var isSet_1 = isSet$1;

    var Stack$2 = _Stack,
        arrayEach = _arrayEach,
        assignValue$2 = _assignValue,
        baseAssign = _baseAssign,
        baseAssignIn = _baseAssignIn,
        cloneBuffer = _cloneBuffer.exports,
        copyArray = _copyArray,
        copySymbols = _copySymbols,
        copySymbolsIn = _copySymbolsIn,
        getAllKeys$1 = _getAllKeys,
        getAllKeysIn$1 = _getAllKeysIn,
        getTag$1 = _getTag,
        initCloneArray = _initCloneArray,
        initCloneByTag = _initCloneByTag,
        initCloneObject = _initCloneObject,
        isArray$e = isArray_1,
        isBuffer$1 = isBuffer$3.exports,
        isMap = isMap_1,
        isObject$3 = isObject_1,
        isSet = isSet_1,
        keys$4 = keys_1,
        keysIn$1 = keysIn_1;

    /** Used to compose bitmasks for cloning. */
    var CLONE_DEEP_FLAG$1 = 1,
        CLONE_FLAT_FLAG$1 = 2,
        CLONE_SYMBOLS_FLAG$2 = 4;

    /** `Object#toString` result references. */
    var argsTag$1 = '[object Arguments]',
        arrayTag$1 = '[object Array]',
        boolTag$2 = '[object Boolean]',
        dateTag$1 = '[object Date]',
        errorTag$1 = '[object Error]',
        funcTag = '[object Function]',
        genTag = '[object GeneratorFunction]',
        mapTag$1 = '[object Map]',
        numberTag$2 = '[object Number]',
        objectTag$2 = '[object Object]',
        regexpTag$1 = '[object RegExp]',
        setTag$1 = '[object Set]',
        stringTag$2 = '[object String]',
        symbolTag$2 = '[object Symbol]',
        weakMapTag = '[object WeakMap]';

    var arrayBufferTag$1 = '[object ArrayBuffer]',
        dataViewTag$1 = '[object DataView]',
        float32Tag = '[object Float32Array]',
        float64Tag = '[object Float64Array]',
        int8Tag = '[object Int8Array]',
        int16Tag = '[object Int16Array]',
        int32Tag = '[object Int32Array]',
        uint8Tag = '[object Uint8Array]',
        uint8ClampedTag = '[object Uint8ClampedArray]',
        uint16Tag = '[object Uint16Array]',
        uint32Tag = '[object Uint32Array]';

    /** Used to identify `toStringTag` values supported by `_.clone`. */
    var cloneableTags = {};
    cloneableTags[argsTag$1] = cloneableTags[arrayTag$1] =
    cloneableTags[arrayBufferTag$1] = cloneableTags[dataViewTag$1] =
    cloneableTags[boolTag$2] = cloneableTags[dateTag$1] =
    cloneableTags[float32Tag] = cloneableTags[float64Tag] =
    cloneableTags[int8Tag] = cloneableTags[int16Tag] =
    cloneableTags[int32Tag] = cloneableTags[mapTag$1] =
    cloneableTags[numberTag$2] = cloneableTags[objectTag$2] =
    cloneableTags[regexpTag$1] = cloneableTags[setTag$1] =
    cloneableTags[stringTag$2] = cloneableTags[symbolTag$2] =
    cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
    cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
    cloneableTags[errorTag$1] = cloneableTags[funcTag] =
    cloneableTags[weakMapTag] = false;

    /**
     * The base implementation of `_.clone` and `_.cloneDeep` which tracks
     * traversed objects.
     *
     * @private
     * @param {*} value The value to clone.
     * @param {boolean} bitmask The bitmask flags.
     *  1 - Deep clone
     *  2 - Flatten inherited properties
     *  4 - Clone symbols
     * @param {Function} [customizer] The function to customize cloning.
     * @param {string} [key] The key of `value`.
     * @param {Object} [object] The parent object of `value`.
     * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
     * @returns {*} Returns the cloned value.
     */
    function baseClone$2(value, bitmask, customizer, key, object, stack) {
      var result,
          isDeep = bitmask & CLONE_DEEP_FLAG$1,
          isFlat = bitmask & CLONE_FLAT_FLAG$1,
          isFull = bitmask & CLONE_SYMBOLS_FLAG$2;

      if (customizer) {
        result = object ? customizer(value, key, object, stack) : customizer(value);
      }
      if (result !== undefined) {
        return result;
      }
      if (!isObject$3(value)) {
        return value;
      }
      var isArr = isArray$e(value);
      if (isArr) {
        result = initCloneArray(value);
        if (!isDeep) {
          return copyArray(value, result);
        }
      } else {
        var tag = getTag$1(value),
            isFunc = tag == funcTag || tag == genTag;

        if (isBuffer$1(value)) {
          return cloneBuffer(value, isDeep);
        }
        if (tag == objectTag$2 || tag == argsTag$1 || (isFunc && !object)) {
          result = (isFlat || isFunc) ? {} : initCloneObject(value);
          if (!isDeep) {
            return isFlat
              ? copySymbolsIn(value, baseAssignIn(result, value))
              : copySymbols(value, baseAssign(result, value));
          }
        } else {
          if (!cloneableTags[tag]) {
            return object ? value : {};
          }
          result = initCloneByTag(value, tag, isDeep);
        }
      }
      // Check for circular references and return its corresponding clone.
      stack || (stack = new Stack$2);
      var stacked = stack.get(value);
      if (stacked) {
        return stacked;
      }
      stack.set(value, result);

      if (isSet(value)) {
        value.forEach(function(subValue) {
          result.add(baseClone$2(subValue, bitmask, customizer, subValue, value, stack));
        });
      } else if (isMap(value)) {
        value.forEach(function(subValue, key) {
          result.set(key, baseClone$2(subValue, bitmask, customizer, key, value, stack));
        });
      }

      var keysFunc = isFull
        ? (isFlat ? getAllKeysIn$1 : getAllKeys$1)
        : (isFlat ? keysIn$1 : keys$4);

      var props = isArr ? undefined : keysFunc(value);
      arrayEach(props || value, function(subValue, key) {
        if (props) {
          key = subValue;
          subValue = value[key];
        }
        // Recursively populate clone (susceptible to call stack limits).
        assignValue$2(result, key, baseClone$2(subValue, bitmask, customizer, key, value, stack));
      });
      return result;
    }

    var _baseClone = baseClone$2;

    var baseGetTag$4 = _baseGetTag,
        isObjectLike$5 = isObjectLike_1;

    /** `Object#toString` result references. */
    var symbolTag$1 = '[object Symbol]';

    /**
     * Checks if `value` is classified as a `Symbol` primitive or object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
     * @example
     *
     * _.isSymbol(Symbol.iterator);
     * // => true
     *
     * _.isSymbol('abc');
     * // => false
     */
    function isSymbol$4(value) {
      return typeof value == 'symbol' ||
        (isObjectLike$5(value) && baseGetTag$4(value) == symbolTag$1);
    }

    var isSymbol_1 = isSymbol$4;

    var isArray$d = isArray_1,
        isSymbol$3 = isSymbol_1;

    /** Used to match property names within property paths. */
    var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
        reIsPlainProp = /^\w*$/;

    /**
     * Checks if `value` is a property name and not a property path.
     *
     * @private
     * @param {*} value The value to check.
     * @param {Object} [object] The object to query keys on.
     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
     */
    function isKey$3(value, object) {
      if (isArray$d(value)) {
        return false;
      }
      var type = typeof value;
      if (type == 'number' || type == 'symbol' || type == 'boolean' ||
          value == null || isSymbol$3(value)) {
        return true;
      }
      return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
        (object != null && value in Object(object));
    }

    var _isKey = isKey$3;

    var MapCache$1 = _MapCache;

    /** Error message constants. */
    var FUNC_ERROR_TEXT = 'Expected a function';

    /**
     * Creates a function that memoizes the result of `func`. If `resolver` is
     * provided, it determines the cache key for storing the result based on the
     * arguments provided to the memoized function. By default, the first argument
     * provided to the memoized function is used as the map cache key. The `func`
     * is invoked with the `this` binding of the memoized function.
     *
     * **Note:** The cache is exposed as the `cache` property on the memoized
     * function. Its creation may be customized by replacing the `_.memoize.Cache`
     * constructor with one whose instances implement the
     * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
     * method interface of `clear`, `delete`, `get`, `has`, and `set`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to have its output memoized.
     * @param {Function} [resolver] The function to resolve the cache key.
     * @returns {Function} Returns the new memoized function.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     * var other = { 'c': 3, 'd': 4 };
     *
     * var values = _.memoize(_.values);
     * values(object);
     * // => [1, 2]
     *
     * values(other);
     * // => [3, 4]
     *
     * object.a = 2;
     * values(object);
     * // => [1, 2]
     *
     * // Modify the result cache.
     * values.cache.set(object, ['a', 'b']);
     * values(object);
     * // => ['a', 'b']
     *
     * // Replace `_.memoize.Cache`.
     * _.memoize.Cache = WeakMap;
     */
    function memoize$1(func, resolver) {
      if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var memoized = function() {
        var args = arguments,
            key = resolver ? resolver.apply(this, args) : args[0],
            cache = memoized.cache;

        if (cache.has(key)) {
          return cache.get(key);
        }
        var result = func.apply(this, args);
        memoized.cache = cache.set(key, result) || cache;
        return result;
      };
      memoized.cache = new (memoize$1.Cache || MapCache$1);
      return memoized;
    }

    // Expose `MapCache`.
    memoize$1.Cache = MapCache$1;

    var memoize_1 = memoize$1;

    var memoize = memoize_1;

    /** Used as the maximum memoize cache size. */
    var MAX_MEMOIZE_SIZE = 500;

    /**
     * A specialized version of `_.memoize` which clears the memoized function's
     * cache when it exceeds `MAX_MEMOIZE_SIZE`.
     *
     * @private
     * @param {Function} func The function to have its output memoized.
     * @returns {Function} Returns the new memoized function.
     */
    function memoizeCapped$1(func) {
      var result = memoize(func, function(key) {
        if (cache.size === MAX_MEMOIZE_SIZE) {
          cache.clear();
        }
        return key;
      });

      var cache = result.cache;
      return result;
    }

    var _memoizeCapped = memoizeCapped$1;

    var memoizeCapped = _memoizeCapped;

    /** Used to match property names within property paths. */
    var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

    /** Used to match backslashes in property paths. */
    var reEscapeChar = /\\(\\)?/g;

    /**
     * Converts `string` to a property path array.
     *
     * @private
     * @param {string} string The string to convert.
     * @returns {Array} Returns the property path array.
     */
    var stringToPath$1 = memoizeCapped(function(string) {
      var result = [];
      if (string.charCodeAt(0) === 46 /* . */) {
        result.push('');
      }
      string.replace(rePropName, function(match, number, quote, subString) {
        result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));
      });
      return result;
    });

    var _stringToPath = stringToPath$1;

    var Symbol$3 = _Symbol,
        arrayMap$2 = _arrayMap,
        isArray$c = isArray_1,
        isSymbol$2 = isSymbol_1;

    /** Used as references for various `Number` constants. */
    var INFINITY$3 = 1 / 0;

    /** Used to convert symbols to primitives and strings. */
    var symbolProto$1 = Symbol$3 ? Symbol$3.prototype : undefined,
        symbolToString = symbolProto$1 ? symbolProto$1.toString : undefined;

    /**
     * The base implementation of `_.toString` which doesn't convert nullish
     * values to empty strings.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {string} Returns the string.
     */
    function baseToString$1(value) {
      // Exit early for strings to avoid a performance hit in some environments.
      if (typeof value == 'string') {
        return value;
      }
      if (isArray$c(value)) {
        // Recursively convert values (susceptible to call stack limits).
        return arrayMap$2(value, baseToString$1) + '';
      }
      if (isSymbol$2(value)) {
        return symbolToString ? symbolToString.call(value) : '';
      }
      var result = (value + '');
      return (result == '0' && (1 / value) == -INFINITY$3) ? '-0' : result;
    }

    var _baseToString = baseToString$1;

    var baseToString = _baseToString;

    /**
     * Converts `value` to a string. An empty string is returned for `null`
     * and `undefined` values. The sign of `-0` is preserved.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.toString(null);
     * // => ''
     *
     * _.toString(-0);
     * // => '-0'
     *
     * _.toString([1, 2, 3]);
     * // => '1,2,3'
     */
    function toString$1(value) {
      return value == null ? '' : baseToString(value);
    }

    var toString_1 = toString$1;

    var isArray$b = isArray_1,
        isKey$2 = _isKey,
        stringToPath = _stringToPath,
        toString = toString_1;

    /**
     * Casts `value` to a path array if it's not one.
     *
     * @private
     * @param {*} value The value to inspect.
     * @param {Object} [object] The object to query keys on.
     * @returns {Array} Returns the cast property path array.
     */
    function castPath$5(value, object) {
      if (isArray$b(value)) {
        return value;
      }
      return isKey$2(value, object) ? [value] : stringToPath(toString(value));
    }

    var _castPath = castPath$5;

    /**
     * Gets the last element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the last element of `array`.
     * @example
     *
     * _.last([1, 2, 3]);
     * // => 3
     */

    function last$3(array) {
      var length = array == null ? 0 : array.length;
      return length ? array[length - 1] : undefined;
    }

    var last_1 = last$3;

    var isSymbol$1 = isSymbol_1;

    /** Used as references for various `Number` constants. */
    var INFINITY$2 = 1 / 0;

    /**
     * Converts `value` to a string key if it's not a string or symbol.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {string|symbol} Returns the key.
     */
    function toKey$6(value) {
      if (typeof value == 'string' || isSymbol$1(value)) {
        return value;
      }
      var result = (value + '');
      return (result == '0' && (1 / value) == -INFINITY$2) ? '-0' : result;
    }

    var _toKey = toKey$6;

    var castPath$4 = _castPath,
        toKey$5 = _toKey;

    /**
     * The base implementation of `_.get` without support for default values.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @returns {*} Returns the resolved value.
     */
    function baseGet$3(object, path) {
      path = castPath$4(path, object);

      var index = 0,
          length = path.length;

      while (object != null && index < length) {
        object = object[toKey$5(path[index++])];
      }
      return (index && index == length) ? object : undefined;
    }

    var _baseGet = baseGet$3;

    /**
     * The base implementation of `_.slice` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */

    function baseSlice$1(array, start, end) {
      var index = -1,
          length = array.length;

      if (start < 0) {
        start = -start > length ? 0 : (length + start);
      }
      end = end > length ? length : end;
      if (end < 0) {
        end += length;
      }
      length = start > end ? 0 : ((end - start) >>> 0);
      start >>>= 0;

      var result = Array(length);
      while (++index < length) {
        result[index] = array[index + start];
      }
      return result;
    }

    var _baseSlice = baseSlice$1;

    var baseGet$2 = _baseGet,
        baseSlice = _baseSlice;

    /**
     * Gets the parent value at `path` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array} path The path to get the parent value of.
     * @returns {*} Returns the parent value.
     */
    function parent$1(object, path) {
      return path.length < 2 ? object : baseGet$2(object, baseSlice(path, 0, -1));
    }

    var _parent = parent$1;

    var castPath$3 = _castPath,
        last$2 = last_1,
        parent = _parent,
        toKey$4 = _toKey;

    /**
     * The base implementation of `_.unset`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The property path to unset.
     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
     */
    function baseUnset$1(object, path) {
      path = castPath$3(path, object);
      object = parent(object, path);
      return object == null || delete object[toKey$4(last$2(path))];
    }

    var _baseUnset = baseUnset$1;

    var baseGetTag$3 = _baseGetTag,
        getPrototype = _getPrototype,
        isObjectLike$4 = isObjectLike_1;

    /** `Object#toString` result references. */
    var objectTag$1 = '[object Object]';

    /** Used for built-in method references. */
    var funcProto = Function.prototype,
        objectProto$5 = Object.prototype;

    /** Used to resolve the decompiled source of functions. */
    var funcToString = funcProto.toString;

    /** Used to check objects for own properties. */
    var hasOwnProperty$4 = objectProto$5.hasOwnProperty;

    /** Used to infer the `Object` constructor. */
    var objectCtorString = funcToString.call(Object);

    /**
     * Checks if `value` is a plain object, that is, an object created by the
     * `Object` constructor or one with a `[[Prototype]]` of `null`.
     *
     * @static
     * @memberOf _
     * @since 0.8.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * _.isPlainObject(new Foo);
     * // => false
     *
     * _.isPlainObject([1, 2, 3]);
     * // => false
     *
     * _.isPlainObject({ 'x': 0, 'y': 0 });
     * // => true
     *
     * _.isPlainObject(Object.create(null));
     * // => true
     */
    function isPlainObject$1(value) {
      if (!isObjectLike$4(value) || baseGetTag$3(value) != objectTag$1) {
        return false;
      }
      var proto = getPrototype(value);
      if (proto === null) {
        return true;
      }
      var Ctor = hasOwnProperty$4.call(proto, 'constructor') && proto.constructor;
      return typeof Ctor == 'function' && Ctor instanceof Ctor &&
        funcToString.call(Ctor) == objectCtorString;
    }

    var isPlainObject_1 = isPlainObject$1;

    var isPlainObject = isPlainObject_1;

    /**
     * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain
     * objects.
     *
     * @private
     * @param {*} value The value to inspect.
     * @param {string} key The key of the property to inspect.
     * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.
     */
    function customOmitClone$1(value) {
      return isPlainObject(value) ? undefined : value;
    }

    var _customOmitClone = customOmitClone$1;

    var Symbol$2 = _Symbol,
        isArguments$1 = isArguments_1,
        isArray$a = isArray_1;

    /** Built-in value references. */
    var spreadableSymbol = Symbol$2 ? Symbol$2.isConcatSpreadable : undefined;

    /**
     * Checks if `value` is a flattenable `arguments` object or array.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
     */
    function isFlattenable$1(value) {
      return isArray$a(value) || isArguments$1(value) ||
        !!(spreadableSymbol && value && value[spreadableSymbol]);
    }

    var _isFlattenable = isFlattenable$1;

    var arrayPush = _arrayPush,
        isFlattenable = _isFlattenable;

    /**
     * The base implementation of `_.flatten` with support for restricting flattening.
     *
     * @private
     * @param {Array} array The array to flatten.
     * @param {number} depth The maximum recursion depth.
     * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
     * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
     * @param {Array} [result=[]] The initial result value.
     * @returns {Array} Returns the new flattened array.
     */
    function baseFlatten$1(array, depth, predicate, isStrict, result) {
      var index = -1,
          length = array.length;

      predicate || (predicate = isFlattenable);
      result || (result = []);

      while (++index < length) {
        var value = array[index];
        if (depth > 0 && predicate(value)) {
          if (depth > 1) {
            // Recursively flatten arrays (susceptible to call stack limits).
            baseFlatten$1(value, depth - 1, predicate, isStrict, result);
          } else {
            arrayPush(result, value);
          }
        } else if (!isStrict) {
          result[result.length] = value;
        }
      }
      return result;
    }

    var _baseFlatten = baseFlatten$1;

    var baseFlatten = _baseFlatten;

    /**
     * Flattens `array` a single level deep.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flatten([1, [2, [3, [4]], 5]]);
     * // => [1, 2, [3, [4]], 5]
     */
    function flatten$1(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseFlatten(array, 1) : [];
    }

    var flatten_1 = flatten$1;

    var flatten = flatten_1,
        overRest = _overRest,
        setToString = _setToString;

    /**
     * A specialized version of `baseRest` which flattens the rest array.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @returns {Function} Returns the new function.
     */
    function flatRest$1(func) {
      return setToString(overRest(func, undefined, flatten), func + '');
    }

    var _flatRest = flatRest$1;

    var arrayMap$1 = _arrayMap,
        baseClone$1 = _baseClone,
        baseUnset = _baseUnset,
        castPath$2 = _castPath,
        copyObject$1 = _copyObject,
        customOmitClone = _customOmitClone,
        flatRest = _flatRest,
        getAllKeysIn = _getAllKeysIn;

    /** Used to compose bitmasks for cloning. */
    var CLONE_DEEP_FLAG = 1,
        CLONE_FLAT_FLAG = 2,
        CLONE_SYMBOLS_FLAG$1 = 4;

    /**
     * The opposite of `_.pick`; this method creates an object composed of the
     * own and inherited enumerable property paths of `object` that are not omitted.
     *
     * **Note:** This method is considerably slower than `_.pick`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {...(string|string[])} [paths] The property paths to omit.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.omit(object, ['a', 'c']);
     * // => { 'b': '2' }
     */
    var omit = flatRest(function(object, paths) {
      var result = {};
      if (object == null) {
        return result;
      }
      var isDeep = false;
      paths = arrayMap$1(paths, function(path) {
        path = castPath$2(path, object);
        isDeep || (isDeep = path.length > 1);
        return path;
      });
      copyObject$1(object, getAllKeysIn(object), result);
      if (isDeep) {
        result = baseClone$1(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG$1, customOmitClone);
      }
      var length = paths.length;
      while (length--) {
        baseUnset(result, paths[length]);
      }
      return result;
    });

    var omit_1 = omit;

    var Stream = require$$0__default$1["default"];

    var mute = MuteStream$1;

    // var out = new MuteStream(process.stdout)
    // argument auto-pipes
    function MuteStream$1 (opts) {
      Stream.apply(this);
      opts = opts || {};
      this.writable = this.readable = true;
      this.muted = false;
      this.on('pipe', this._onpipe);
      this.replace = opts.replace;

      // For readline-type situations
      // This much at the start of a line being redrawn after a ctrl char
      // is seen (such as backspace) won't be redrawn as the replacement
      this._prompt = opts.prompt || null;
      this._hadControl = false;
    }

    MuteStream$1.prototype = Object.create(Stream.prototype);

    Object.defineProperty(MuteStream$1.prototype, 'constructor', {
      value: MuteStream$1,
      enumerable: false
    });

    MuteStream$1.prototype.mute = function () {
      this.muted = true;
    };

    MuteStream$1.prototype.unmute = function () {
      this.muted = false;
    };

    Object.defineProperty(MuteStream$1.prototype, '_onpipe', {
      value: onPipe,
      enumerable: false,
      writable: true,
      configurable: true
    });

    function onPipe (src) {
      this._src = src;
    }

    Object.defineProperty(MuteStream$1.prototype, 'isTTY', {
      get: getIsTTY,
      set: setIsTTY,
      enumerable: true,
      configurable: true
    });

    function getIsTTY () {
      return( (this._dest) ? this._dest.isTTY
            : (this._src) ? this._src.isTTY
            : false
            )
    }

    // basically just get replace the getter/setter with a regular value
    function setIsTTY (isTTY) {
      Object.defineProperty(this, 'isTTY', {
        value: isTTY,
        enumerable: true,
        writable: true,
        configurable: true
      });
    }

    Object.defineProperty(MuteStream$1.prototype, 'rows', {
      get: function () {
        return( this._dest ? this._dest.rows
              : this._src ? this._src.rows
              : undefined )
      }, enumerable: true, configurable: true });

    Object.defineProperty(MuteStream$1.prototype, 'columns', {
      get: function () {
        return( this._dest ? this._dest.columns
              : this._src ? this._src.columns
              : undefined )
      }, enumerable: true, configurable: true });


    MuteStream$1.prototype.pipe = function (dest, options) {
      this._dest = dest;
      return Stream.prototype.pipe.call(this, dest, options)
    };

    MuteStream$1.prototype.pause = function () {
      if (this._src) return this._src.pause()
    };

    MuteStream$1.prototype.resume = function () {
      if (this._src) return this._src.resume()
    };

    MuteStream$1.prototype.write = function (c) {
      if (this.muted) {
        if (!this.replace) return true
        if (c.match(/^\u001b/)) {
          if(c.indexOf(this._prompt) === 0) {
            c = c.substr(this._prompt.length);
            c = c.replace(/./g, this.replace);
            c = this._prompt + c;
          }
          this._hadControl = true;
          return this.emit('data', c)
        } else {
          if (this._prompt && this._hadControl &&
              c.indexOf(this._prompt) === 0) {
            this._hadControl = false;
            this.emit('data', this._prompt);
            c = c.substr(this._prompt.length);
          }
          c = c.toString().replace(/./g, this.replace);
        }
      }
      this.emit('data', c);
    };

    MuteStream$1.prototype.end = function (c) {
      if (this.muted) {
        if (c && this.replace) {
          c = c.toString().replace(/./g, this.replace);
        } else {
          c = null;
        }
      }
      if (c) this.emit('data', c);
      this.emit('end');
    };

    function proxy (fn) { return function () {
      var d = this._dest;
      var s = this._src;
      if (d && d[fn]) d[fn].apply(d, arguments);
      if (s && s[fn]) s[fn].apply(s, arguments);
    }}

    MuteStream$1.prototype.destroy = proxy('destroy');
    MuteStream$1.prototype.destroySoon = proxy('destroySoon');
    MuteStream$1.prototype.close = proxy('close');

    const _$d = {
      extend: extend$1,
      omit: omit_1,
    };
    const MuteStream = mute;
    const readline$2 = require$$3__default["default"];

    /**
     * Base interface class other can inherits from
     */

    class UI {
      constructor(opt) {
        // Instantiate the Readline interface
        // @Note: Don't reassign if already present (allow test to override the Stream)
        if (!this.rl) {
          this.rl = readline$2.createInterface(setupReadlineOptions(opt));
        }

        this.rl.resume();

        this.onForceClose = this.onForceClose.bind(this);

        // Make sure new prompt start on a newline when closing
        process.on('exit', this.onForceClose);

        // Terminate process on SIGINT (which will call process.on('exit') in return)
        this.rl.on('SIGINT', this.onForceClose);
      }

      /**
       * Handle the ^C exit
       * @return {null}
       */

      onForceClose() {
        this.close();
        process.kill(process.pid, 'SIGINT');
        console.log('');
      }

      /**
       * Close the interface and cleanup listeners
       */

      close() {
        // Remove events listeners
        this.rl.removeListener('SIGINT', this.onForceClose);
        process.removeListener('exit', this.onForceClose);

        this.rl.output.unmute();

        if (this.activePrompt && typeof this.activePrompt.close === 'function') {
          this.activePrompt.close();
        }

        // Close the readline
        this.rl.output.end();
        this.rl.pause();
        this.rl.close();
      }
    }

    function setupReadlineOptions(opt) {
      opt = opt || {};
      // Inquirer 8.x:
      // opt.skipTTYChecks = opt.skipTTYChecks === undefined ? opt.input !== undefined : opt.skipTTYChecks;
      opt.skipTTYChecks = opt.skipTTYChecks === undefined ? true : opt.skipTTYChecks;

      // Default `input` to stdin
      const input = opt.input || process.stdin;

      // Check if prompt is being called in TTY environment
      // If it isn't return a failed promise
      if (!opt.skipTTYChecks && !input.isTTY) {
        const nonTtyError = new Error(
          'Prompts can not be meaningfully rendered in non-TTY environments'
        );
        nonTtyError.isTtyError = true;
        throw nonTtyError;
      }

      // Add mute capabilities to the output
      const ms = new MuteStream();
      ms.pipe(opt.output || process.stdout);
      const output = ms;

      return _$d.extend(
        {
          terminal: true,
          input,
          output,
        },
        _$d.omit(opt, ['input', 'output'])
      );
    }

    var baseUI = UI;

    var readline$1 = {};

    var ansiEscapes$1 = {exports: {}};

    (function (module) {
    const ansiEscapes = module.exports;
    // TODO: remove this in the next major version
    module.exports.default = ansiEscapes;

    const ESC = '\u001B[';
    const OSC = '\u001B]';
    const BEL = '\u0007';
    const SEP = ';';
    const isTerminalApp = process.env.TERM_PROGRAM === 'Apple_Terminal';

    ansiEscapes.cursorTo = (x, y) => {
    	if (typeof x !== 'number') {
    		throw new TypeError('The `x` argument is required');
    	}

    	if (typeof y !== 'number') {
    		return ESC + (x + 1) + 'G';
    	}

    	return ESC + (y + 1) + ';' + (x + 1) + 'H';
    };

    ansiEscapes.cursorMove = (x, y) => {
    	if (typeof x !== 'number') {
    		throw new TypeError('The `x` argument is required');
    	}

    	let ret = '';

    	if (x < 0) {
    		ret += ESC + (-x) + 'D';
    	} else if (x > 0) {
    		ret += ESC + x + 'C';
    	}

    	if (y < 0) {
    		ret += ESC + (-y) + 'A';
    	} else if (y > 0) {
    		ret += ESC + y + 'B';
    	}

    	return ret;
    };

    ansiEscapes.cursorUp = (count = 1) => ESC + count + 'A';
    ansiEscapes.cursorDown = (count = 1) => ESC + count + 'B';
    ansiEscapes.cursorForward = (count = 1) => ESC + count + 'C';
    ansiEscapes.cursorBackward = (count = 1) => ESC + count + 'D';

    ansiEscapes.cursorLeft = ESC + 'G';
    ansiEscapes.cursorSavePosition = isTerminalApp ? '\u001B7' : ESC + 's';
    ansiEscapes.cursorRestorePosition = isTerminalApp ? '\u001B8' : ESC + 'u';
    ansiEscapes.cursorGetPosition = ESC + '6n';
    ansiEscapes.cursorNextLine = ESC + 'E';
    ansiEscapes.cursorPrevLine = ESC + 'F';
    ansiEscapes.cursorHide = ESC + '?25l';
    ansiEscapes.cursorShow = ESC + '?25h';

    ansiEscapes.eraseLines = count => {
    	let clear = '';

    	for (let i = 0; i < count; i++) {
    		clear += ansiEscapes.eraseLine + (i < count - 1 ? ansiEscapes.cursorUp() : '');
    	}

    	if (count) {
    		clear += ansiEscapes.cursorLeft;
    	}

    	return clear;
    };

    ansiEscapes.eraseEndLine = ESC + 'K';
    ansiEscapes.eraseStartLine = ESC + '1K';
    ansiEscapes.eraseLine = ESC + '2K';
    ansiEscapes.eraseDown = ESC + 'J';
    ansiEscapes.eraseUp = ESC + '1J';
    ansiEscapes.eraseScreen = ESC + '2J';
    ansiEscapes.scrollUp = ESC + 'S';
    ansiEscapes.scrollDown = ESC + 'T';

    ansiEscapes.clearScreen = '\u001Bc';

    ansiEscapes.clearTerminal = process.platform === 'win32' ?
    	`${ansiEscapes.eraseScreen}${ESC}0f` :
    	// 1. Erases the screen (Only done in case `2` is not supported)
    	// 2. Erases the whole screen including scrollback buffer
    	// 3. Moves cursor to the top-left position
    	// More info: https://www.real-world-systems.com/docs/ANSIcode.html
    	`${ansiEscapes.eraseScreen}${ESC}3J${ESC}H`;

    ansiEscapes.beep = BEL;

    ansiEscapes.link = (text, url) => {
    	return [
    		OSC,
    		'8',
    		SEP,
    		SEP,
    		url,
    		BEL,
    		text,
    		OSC,
    		'8',
    		SEP,
    		SEP,
    		BEL
    	].join('');
    };

    ansiEscapes.image = (buffer, options = {}) => {
    	let ret = `${OSC}1337;File=inline=1`;

    	if (options.width) {
    		ret += `;width=${options.width}`;
    	}

    	if (options.height) {
    		ret += `;height=${options.height}`;
    	}

    	if (options.preserveAspectRatio === false) {
    		ret += ';preserveAspectRatio=0';
    	}

    	return ret + ':' + buffer.toString('base64') + BEL;
    };

    ansiEscapes.iTerm = {
    	setCwd: (cwd = process.cwd()) => `${OSC}50;CurrentDir=${cwd}${BEL}`,

    	annotation: (message, options = {}) => {
    		let ret = `${OSC}1337;`;

    		const hasX = typeof options.x !== 'undefined';
    		const hasY = typeof options.y !== 'undefined';
    		if ((hasX || hasY) && !(hasX && hasY && typeof options.length !== 'undefined')) {
    			throw new Error('`x`, `y` and `length` must be defined when `x` or `y` is defined');
    		}

    		message = message.replace(/\|/g, '');

    		ret += options.isHidden ? 'AddHiddenAnnotation=' : 'AddAnnotation=';

    		if (options.length > 0) {
    			ret +=
    					(hasX ?
    						[message, options.length, options.x, options.y] :
    						[options.length, message]).join('|');
    		} else {
    			ret += message;
    		}

    		return ret + BEL;
    	}
    };
    }(ansiEscapes$1));

    const ansiEscapes = ansiEscapes$1.exports;

    /**
     * Move cursor left by `x`
     * @param  {Readline} rl - Readline instance
     * @param  {Number}   x  - How far to go left (default to 1)
     */

    readline$1.left = function (rl, x) {
      rl.output.write(ansiEscapes.cursorBackward(x));
    };

    /**
     * Move cursor right by `x`
     * @param  {Readline} rl - Readline instance
     * @param  {Number}   x  - How far to go left (default to 1)
     */

    readline$1.right = function (rl, x) {
      rl.output.write(ansiEscapes.cursorForward(x));
    };

    /**
     * Move cursor up by `x`
     * @param  {Readline} rl - Readline instance
     * @param  {Number}   x  - How far to go up (default to 1)
     */

    readline$1.up = function (rl, x) {
      rl.output.write(ansiEscapes.cursorUp(x));
    };

    /**
     * Move cursor down by `x`
     * @param  {Readline} rl - Readline instance
     * @param  {Number}   x  - How far to go down (default to 1)
     */

    readline$1.down = function (rl, x) {
      rl.output.write(ansiEscapes.cursorDown(x));
    };

    /**
     * Clear current line
     * @param  {Readline} rl  - Readline instance
     * @param  {Number}   len - number of line to delete
     */
    readline$1.clearLine = function (rl, len) {
      rl.output.write(ansiEscapes.eraseLines(len));
    };

    /**
     * Sticky bottom bar user interface
     */

    const through = through$1.exports;
    const Base$9 = baseUI;
    const rlUtils = readline$1;
    const _$c = {
      last: last_1,
    };

    class BottomBar extends Base$9 {
      constructor(opt) {
        opt = opt || {};

        super(opt);

        this.log = through(this.writeLog.bind(this));
        this.bottomBar = opt.bottomBar || '';
        this.render();
      }

      /**
       * Render the prompt to screen
       * @return {BottomBar} self
       */

      render() {
        this.write(this.bottomBar);
        return this;
      }

      clean() {
        rlUtils.clearLine(this.rl, this.bottomBar.split('\n').length);
        return this;
      }

      /**
       * Update the bottom bar content and rerender
       * @param  {String} bottomBar Bottom bar content
       * @return {BottomBar}           self
       */

      updateBottomBar(bottomBar) {
        rlUtils.clearLine(this.rl, 1);
        this.rl.output.unmute();
        this.clean();
        this.bottomBar = bottomBar;
        this.render();
        this.rl.output.mute();
        return this;
      }

      /**
       * Write out log data
       * @param {String} data - The log data to be output
       * @return {BottomBar} self
       */

      writeLog(data) {
        this.rl.output.unmute();
        this.clean();
        this.rl.output.write(this.enforceLF(data.toString()));
        this.render();
        this.rl.output.mute();
        return this;
      }

      /**
       * Make sure line end on a line feed
       * @param  {String} str Input string
       * @return {String}     The input string with a final line feed
       */

      enforceLF(str) {
        return str.match(/[\r\n]$/) ? str : str + '\n';
      }

      /**
       * Helper for writing message in Prompt
       * @param {BottomBar} prompt  - The Prompt object that extends tty
       * @param {String} message - The message to be output
       */
      write(message) {
        const msgLines = message.split(/\n/);
        this.height = msgLines.length;

        // Write message to screen and setPrompt to control backspace
        this.rl.setPrompt(_$c.last(msgLines));

        if (this.rl.output.rows === 0 && this.rl.output.columns === 0) {
          /* When it's a tty through serial port there's no terminal info and the render will malfunction,
             so we need enforce the cursor to locate to the leftmost position for rendering. */
          rlUtils.left(this.rl, message.length + this.rl.line.length);
        }

        this.rl.output.write(message);
      }
    }

    var bottomBar = BottomBar;

    var baseClone = _baseClone;

    /** Used to compose bitmasks for cloning. */
    var CLONE_SYMBOLS_FLAG = 4;

    /**
     * Creates a shallow clone of `value`.
     *
     * **Note:** This method is loosely based on the
     * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
     * and supports cloning arrays, array buffers, booleans, date objects, maps,
     * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
     * arrays. The own enumerable properties of `arguments` objects are cloned
     * as plain objects. An empty object is returned for uncloneable values such
     * as error objects, functions, DOM nodes, and WeakMaps.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to clone.
     * @returns {*} Returns the cloned value.
     * @see _.cloneDeep
     * @example
     *
     * var objects = [{ 'a': 1 }, { 'b': 2 }];
     *
     * var shallow = _.clone(objects);
     * console.log(shallow[0] === objects[0]);
     * // => true
     */
    function clone$2(value) {
      return baseClone(value, CLONE_SYMBOLS_FLAG);
    }

    var clone_1 = clone$2;

    var baseGet$1 = _baseGet;

    /**
     * Gets the value at `path` of `object`. If the resolved value is
     * `undefined`, the `defaultValue` is returned in its place.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.get(object, 'a[0].b.c');
     * // => 3
     *
     * _.get(object, ['a', '0', 'b', 'c']);
     * // => 3
     *
     * _.get(object, 'a.b.c', 'default');
     * // => 'default'
     */
    function get$1(object, path, defaultValue) {
      var result = object == null ? undefined : baseGet$1(object, path);
      return result === undefined ? defaultValue : result;
    }

    var get_1 = get$1;

    var assignValue$1 = _assignValue,
        castPath$1 = _castPath,
        isIndex$1 = _isIndex,
        isObject$2 = isObject_1,
        toKey$3 = _toKey;

    /**
     * The base implementation of `_.set`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @param {Function} [customizer] The function to customize path creation.
     * @returns {Object} Returns `object`.
     */
    function baseSet$1(object, path, value, customizer) {
      if (!isObject$2(object)) {
        return object;
      }
      path = castPath$1(path, object);

      var index = -1,
          length = path.length,
          lastIndex = length - 1,
          nested = object;

      while (nested != null && ++index < length) {
        var key = toKey$3(path[index]),
            newValue = value;

        if (key === '__proto__' || key === 'constructor' || key === 'prototype') {
          return object;
        }

        if (index != lastIndex) {
          var objValue = nested[key];
          newValue = customizer ? customizer(objValue, key, nested) : undefined;
          if (newValue === undefined) {
            newValue = isObject$2(objValue)
              ? objValue
              : (isIndex$1(path[index + 1]) ? [] : {});
          }
        }
        assignValue$1(nested, key, newValue);
        nested = nested[key];
      }
      return object;
    }

    var _baseSet = baseSet$1;

    var baseSet = _baseSet;

    /**
     * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,
     * it's created. Arrays are created for missing index properties while objects
     * are created for all other missing properties. Use `_.setWith` to customize
     * `path` creation.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.set(object, 'a[0].b.c', 4);
     * console.log(object.a[0].b.c);
     * // => 4
     *
     * _.set(object, ['x', '0', 'y', 'z'], 5);
     * console.log(object.x[0].y.z);
     * // => 5
     */
    function set(object, path, value) {
      return object == null ? object : baseSet(object, path, value);
    }

    var set_1 = set;

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends$4(d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    }

    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m) return m.call(o);
        if (o && typeof o.length === "number") return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }

    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    }

    function __spreadArray(to, from) {
        for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
            to[j] = from[i];
        return to;
    }

    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }

    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
    }

    function __asyncValues(o) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
    }

    function isFunction(value) {
        return typeof value === 'function';
    }

    function createErrorClass(createImpl) {
        var _super = function (instance) {
            Error.call(instance);
            instance.stack = new Error().stack;
        };
        var ctorFunc = createImpl(_super);
        ctorFunc.prototype = Object.create(Error.prototype);
        ctorFunc.prototype.constructor = ctorFunc;
        return ctorFunc;
    }

    var UnsubscriptionError = createErrorClass(function (_super) {
        return function UnsubscriptionErrorImpl(errors) {
            _super(this);
            this.message = errors
                ? errors.length + " errors occurred during unsubscription:\n" + errors.map(function (err, i) { return i + 1 + ") " + err.toString(); }).join('\n  ')
                : '';
            this.name = 'UnsubscriptionError';
            this.errors = errors;
        };
    });

    function arrRemove(arr, item) {
        if (arr) {
            var index = arr.indexOf(item);
            0 <= index && arr.splice(index, 1);
        }
    }

    var Subscription = (function () {
        function Subscription(initialTeardown) {
            this.initialTeardown = initialTeardown;
            this.closed = false;
            this._parentage = null;
            this._teardowns = null;
        }
        Subscription.prototype.unsubscribe = function () {
            var e_1, _a, e_2, _b;
            var errors;
            if (!this.closed) {
                this.closed = true;
                var _parentage = this._parentage;
                if (_parentage) {
                    this._parentage = null;
                    if (Array.isArray(_parentage)) {
                        try {
                            for (var _parentage_1 = __values(_parentage), _parentage_1_1 = _parentage_1.next(); !_parentage_1_1.done; _parentage_1_1 = _parentage_1.next()) {
                                var parent_1 = _parentage_1_1.value;
                                parent_1.remove(this);
                            }
                        }
                        catch (e_1_1) { e_1 = { error: e_1_1 }; }
                        finally {
                            try {
                                if (_parentage_1_1 && !_parentage_1_1.done && (_a = _parentage_1.return)) _a.call(_parentage_1);
                            }
                            finally { if (e_1) throw e_1.error; }
                        }
                    }
                    else {
                        _parentage.remove(this);
                    }
                }
                var initialTeardown = this.initialTeardown;
                if (isFunction(initialTeardown)) {
                    try {
                        initialTeardown();
                    }
                    catch (e) {
                        errors = e instanceof UnsubscriptionError ? e.errors : [e];
                    }
                }
                var _teardowns = this._teardowns;
                if (_teardowns) {
                    this._teardowns = null;
                    try {
                        for (var _teardowns_1 = __values(_teardowns), _teardowns_1_1 = _teardowns_1.next(); !_teardowns_1_1.done; _teardowns_1_1 = _teardowns_1.next()) {
                            var teardown_1 = _teardowns_1_1.value;
                            try {
                                execTeardown(teardown_1);
                            }
                            catch (err) {
                                errors = errors !== null && errors !== void 0 ? errors : [];
                                if (err instanceof UnsubscriptionError) {
                                    errors = __spreadArray(__spreadArray([], __read(errors)), __read(err.errors));
                                }
                                else {
                                    errors.push(err);
                                }
                            }
                        }
                    }
                    catch (e_2_1) { e_2 = { error: e_2_1 }; }
                    finally {
                        try {
                            if (_teardowns_1_1 && !_teardowns_1_1.done && (_b = _teardowns_1.return)) _b.call(_teardowns_1);
                        }
                        finally { if (e_2) throw e_2.error; }
                    }
                }
                if (errors) {
                    throw new UnsubscriptionError(errors);
                }
            }
        };
        Subscription.prototype.add = function (teardown) {
            var _a;
            if (teardown && teardown !== this) {
                if (this.closed) {
                    execTeardown(teardown);
                }
                else {
                    if (teardown instanceof Subscription) {
                        if (teardown.closed || teardown._hasParent(this)) {
                            return;
                        }
                        teardown._addParent(this);
                    }
                    (this._teardowns = (_a = this._teardowns) !== null && _a !== void 0 ? _a : []).push(teardown);
                }
            }
        };
        Subscription.prototype._hasParent = function (parent) {
            var _parentage = this._parentage;
            return _parentage === parent || (Array.isArray(_parentage) && _parentage.includes(parent));
        };
        Subscription.prototype._addParent = function (parent) {
            var _parentage = this._parentage;
            this._parentage = Array.isArray(_parentage) ? (_parentage.push(parent), _parentage) : _parentage ? [_parentage, parent] : parent;
        };
        Subscription.prototype._removeParent = function (parent) {
            var _parentage = this._parentage;
            if (_parentage === parent) {
                this._parentage = null;
            }
            else if (Array.isArray(_parentage)) {
                arrRemove(_parentage, parent);
            }
        };
        Subscription.prototype.remove = function (teardown) {
            var _teardowns = this._teardowns;
            _teardowns && arrRemove(_teardowns, teardown);
            if (teardown instanceof Subscription) {
                teardown._removeParent(this);
            }
        };
        Subscription.EMPTY = (function () {
            var empty = new Subscription();
            empty.closed = true;
            return empty;
        })();
        return Subscription;
    }());
    var EMPTY_SUBSCRIPTION = Subscription.EMPTY;
    function isSubscription(value) {
        return (value instanceof Subscription ||
            (value && 'closed' in value && isFunction(value.remove) && isFunction(value.add) && isFunction(value.unsubscribe)));
    }
    function execTeardown(teardown) {
        if (isFunction(teardown)) {
            teardown();
        }
        else {
            teardown.unsubscribe();
        }
    }

    var config = {
        onUnhandledError: null,
        onStoppedNotification: null,
        Promise: undefined,
        useDeprecatedSynchronousErrorHandling: false,
        useDeprecatedNextContext: false,
    };

    var timeoutProvider = {
        setTimeout: function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            var delegate = timeoutProvider.delegate;
            return ((delegate === null || delegate === void 0 ? void 0 : delegate.setTimeout) || setTimeout).apply(void 0, __spreadArray([], __read(args)));
        },
        clearTimeout: function (handle) {
            var delegate = timeoutProvider.delegate;
            return ((delegate === null || delegate === void 0 ? void 0 : delegate.clearTimeout) || clearTimeout)(handle);
        },
        delegate: undefined,
    };

    function reportUnhandledError(err) {
        timeoutProvider.setTimeout(function () {
            var onUnhandledError = config.onUnhandledError;
            if (onUnhandledError) {
                onUnhandledError(err);
            }
            else {
                throw err;
            }
        });
    }

    function noop$2() { }

    var COMPLETE_NOTIFICATION = (function () { return createNotification('C', undefined, undefined); })();
    function errorNotification(error) {
        return createNotification('E', undefined, error);
    }
    function nextNotification(value) {
        return createNotification('N', value, undefined);
    }
    function createNotification(kind, value, error) {
        return {
            kind: kind,
            value: value,
            error: error,
        };
    }

    var context = null;
    function errorContext(cb) {
        if (config.useDeprecatedSynchronousErrorHandling) {
            var isRoot = !context;
            if (isRoot) {
                context = { errorThrown: false, error: null };
            }
            cb();
            if (isRoot) {
                var _a = context, errorThrown = _a.errorThrown, error = _a.error;
                context = null;
                if (errorThrown) {
                    throw error;
                }
            }
        }
        else {
            cb();
        }
    }
    function captureError(err) {
        if (config.useDeprecatedSynchronousErrorHandling && context) {
            context.errorThrown = true;
            context.error = err;
        }
    }

    var Subscriber = (function (_super) {
        __extends$4(Subscriber, _super);
        function Subscriber(destination) {
            var _this = _super.call(this) || this;
            _this.isStopped = false;
            if (destination) {
                _this.destination = destination;
                if (isSubscription(destination)) {
                    destination.add(_this);
                }
            }
            else {
                _this.destination = EMPTY_OBSERVER;
            }
            return _this;
        }
        Subscriber.create = function (next, error, complete) {
            return new SafeSubscriber(next, error, complete);
        };
        Subscriber.prototype.next = function (value) {
            if (this.isStopped) {
                handleStoppedNotification(nextNotification(value), this);
            }
            else {
                this._next(value);
            }
        };
        Subscriber.prototype.error = function (err) {
            if (this.isStopped) {
                handleStoppedNotification(errorNotification(err), this);
            }
            else {
                this.isStopped = true;
                this._error(err);
            }
        };
        Subscriber.prototype.complete = function () {
            if (this.isStopped) {
                handleStoppedNotification(COMPLETE_NOTIFICATION, this);
            }
            else {
                this.isStopped = true;
                this._complete();
            }
        };
        Subscriber.prototype.unsubscribe = function () {
            if (!this.closed) {
                this.isStopped = true;
                _super.prototype.unsubscribe.call(this);
                this.destination = null;
            }
        };
        Subscriber.prototype._next = function (value) {
            this.destination.next(value);
        };
        Subscriber.prototype._error = function (err) {
            try {
                this.destination.error(err);
            }
            finally {
                this.unsubscribe();
            }
        };
        Subscriber.prototype._complete = function () {
            try {
                this.destination.complete();
            }
            finally {
                this.unsubscribe();
            }
        };
        return Subscriber;
    }(Subscription));
    var SafeSubscriber = (function (_super) {
        __extends$4(SafeSubscriber, _super);
        function SafeSubscriber(observerOrNext, error, complete) {
            var _this = _super.call(this) || this;
            var next;
            if (isFunction(observerOrNext)) {
                next = observerOrNext;
            }
            else if (observerOrNext) {
                (next = observerOrNext.next, error = observerOrNext.error, complete = observerOrNext.complete);
                var context_1;
                if (_this && config.useDeprecatedNextContext) {
                    context_1 = Object.create(observerOrNext);
                    context_1.unsubscribe = function () { return _this.unsubscribe(); };
                }
                else {
                    context_1 = observerOrNext;
                }
                next = next === null || next === void 0 ? void 0 : next.bind(context_1);
                error = error === null || error === void 0 ? void 0 : error.bind(context_1);
                complete = complete === null || complete === void 0 ? void 0 : complete.bind(context_1);
            }
            _this.destination = {
                next: next ? wrapForErrorHandling(next) : noop$2,
                error: wrapForErrorHandling(error !== null && error !== void 0 ? error : defaultErrorHandler),
                complete: complete ? wrapForErrorHandling(complete) : noop$2,
            };
            return _this;
        }
        return SafeSubscriber;
    }(Subscriber));
    function wrapForErrorHandling(handler, instance) {
        return function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            try {
                handler.apply(void 0, __spreadArray([], __read(args)));
            }
            catch (err) {
                if (config.useDeprecatedSynchronousErrorHandling) {
                    captureError(err);
                }
                else {
                    reportUnhandledError(err);
                }
            }
        };
    }
    function defaultErrorHandler(err) {
        throw err;
    }
    function handleStoppedNotification(notification, subscriber) {
        var onStoppedNotification = config.onStoppedNotification;
        onStoppedNotification && timeoutProvider.setTimeout(function () { return onStoppedNotification(notification, subscriber); });
    }
    var EMPTY_OBSERVER = {
        closed: true,
        next: noop$2,
        error: defaultErrorHandler,
        complete: noop$2,
    };

    var observable = (function () { return (typeof Symbol === 'function' && Symbol.observable) || '@@observable'; })();

    function identity$2(x) {
        return x;
    }

    function pipe$1() {
        var fns = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            fns[_i] = arguments[_i];
        }
        return pipeFromArray(fns);
    }
    function pipeFromArray(fns) {
        if (fns.length === 0) {
            return identity$2;
        }
        if (fns.length === 1) {
            return fns[0];
        }
        return function piped(input) {
            return fns.reduce(function (prev, fn) { return fn(prev); }, input);
        };
    }

    var Observable = (function () {
        function Observable(subscribe) {
            if (subscribe) {
                this._subscribe = subscribe;
            }
        }
        Observable.prototype.lift = function (operator) {
            var observable = new Observable();
            observable.source = this;
            observable.operator = operator;
            return observable;
        };
        Observable.prototype.subscribe = function (observerOrNext, error, complete) {
            var _this = this;
            var subscriber = isSubscriber(observerOrNext) ? observerOrNext : new SafeSubscriber(observerOrNext, error, complete);
            errorContext(function () {
                var _a = _this, operator = _a.operator, source = _a.source;
                subscriber.add(operator
                    ?
                        operator.call(subscriber, source)
                    : source
                        ?
                            _this._subscribe(subscriber)
                        :
                            _this._trySubscribe(subscriber));
            });
            return subscriber;
        };
        Observable.prototype._trySubscribe = function (sink) {
            try {
                return this._subscribe(sink);
            }
            catch (err) {
                sink.error(err);
            }
        };
        Observable.prototype.forEach = function (next, promiseCtor) {
            var _this = this;
            promiseCtor = getPromiseCtor(promiseCtor);
            return new promiseCtor(function (resolve, reject) {
                var subscription;
                subscription = _this.subscribe(function (value) {
                    try {
                        next(value);
                    }
                    catch (err) {
                        reject(err);
                        subscription === null || subscription === void 0 ? void 0 : subscription.unsubscribe();
                    }
                }, reject, resolve);
            });
        };
        Observable.prototype._subscribe = function (subscriber) {
            var _a;
            return (_a = this.source) === null || _a === void 0 ? void 0 : _a.subscribe(subscriber);
        };
        Observable.prototype[observable] = function () {
            return this;
        };
        Observable.prototype.pipe = function () {
            var operations = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                operations[_i] = arguments[_i];
            }
            return pipeFromArray(operations)(this);
        };
        Observable.prototype.toPromise = function (promiseCtor) {
            var _this = this;
            promiseCtor = getPromiseCtor(promiseCtor);
            return new promiseCtor(function (resolve, reject) {
                var value;
                _this.subscribe(function (x) { return (value = x); }, function (err) { return reject(err); }, function () { return resolve(value); });
            });
        };
        Observable.create = function (subscribe) {
            return new Observable(subscribe);
        };
        return Observable;
    }());
    function getPromiseCtor(promiseCtor) {
        var _a;
        return (_a = promiseCtor !== null && promiseCtor !== void 0 ? promiseCtor : config.Promise) !== null && _a !== void 0 ? _a : Promise;
    }
    function isObserver(value) {
        return value && isFunction(value.next) && isFunction(value.error) && isFunction(value.complete);
    }
    function isSubscriber(value) {
        return (value && value instanceof Subscriber) || (isObserver(value) && isSubscription(value));
    }

    function hasLift(source) {
        return isFunction(source === null || source === void 0 ? void 0 : source.lift);
    }
    function operate(init) {
        return function (source) {
            if (hasLift(source)) {
                return source.lift(function (liftedSource) {
                    try {
                        return init(liftedSource, this);
                    }
                    catch (err) {
                        this.error(err);
                    }
                });
            }
            throw new TypeError('Unable to lift unknown Observable type');
        };
    }

    var OperatorSubscriber = (function (_super) {
        __extends$4(OperatorSubscriber, _super);
        function OperatorSubscriber(destination, onNext, onComplete, onError, onFinalize) {
            var _this = _super.call(this, destination) || this;
            _this.onFinalize = onFinalize;
            _this._next = onNext
                ? function (value) {
                    try {
                        onNext(value);
                    }
                    catch (err) {
                        destination.error(err);
                    }
                }
                : _super.prototype._next;
            _this._error = onError
                ? function (err) {
                    try {
                        onError(err);
                    }
                    catch (err) {
                        destination.error(err);
                    }
                    finally {
                        this.unsubscribe();
                    }
                }
                : _super.prototype._error;
            _this._complete = onComplete
                ? function () {
                    try {
                        onComplete();
                    }
                    catch (err) {
                        destination.error(err);
                    }
                    finally {
                        this.unsubscribe();
                    }
                }
                : _super.prototype._complete;
            return _this;
        }
        OperatorSubscriber.prototype.unsubscribe = function () {
            var _a;
            var closed = this.closed;
            _super.prototype.unsubscribe.call(this);
            !closed && ((_a = this.onFinalize) === null || _a === void 0 ? void 0 : _a.call(this));
        };
        return OperatorSubscriber;
    }(Subscriber));

    function refCount() {
        return operate(function (source, subscriber) {
            var connection = null;
            source._refCount++;
            var refCounter = new OperatorSubscriber(subscriber, undefined, undefined, undefined, function () {
                if (!source || source._refCount <= 0 || 0 < --source._refCount) {
                    connection = null;
                    return;
                }
                var sharedConnection = source._connection;
                var conn = connection;
                connection = null;
                if (sharedConnection && (!conn || sharedConnection === conn)) {
                    sharedConnection.unsubscribe();
                }
                subscriber.unsubscribe();
            });
            source.subscribe(refCounter);
            if (!refCounter.closed) {
                connection = source.connect();
            }
        });
    }

    var ConnectableObservable = (function (_super) {
        __extends$4(ConnectableObservable, _super);
        function ConnectableObservable(source, subjectFactory) {
            var _this = _super.call(this) || this;
            _this.source = source;
            _this.subjectFactory = subjectFactory;
            _this._subject = null;
            _this._refCount = 0;
            _this._connection = null;
            if (hasLift(source)) {
                _this.lift = source.lift;
            }
            return _this;
        }
        ConnectableObservable.prototype._subscribe = function (subscriber) {
            return this.getSubject().subscribe(subscriber);
        };
        ConnectableObservable.prototype.getSubject = function () {
            var subject = this._subject;
            if (!subject || subject.isStopped) {
                this._subject = this.subjectFactory();
            }
            return this._subject;
        };
        ConnectableObservable.prototype._teardown = function () {
            this._refCount = 0;
            var _connection = this._connection;
            this._subject = this._connection = null;
            _connection === null || _connection === void 0 ? void 0 : _connection.unsubscribe();
        };
        ConnectableObservable.prototype.connect = function () {
            var _this = this;
            var connection = this._connection;
            if (!connection) {
                connection = this._connection = new Subscription();
                var subject_1 = this.getSubject();
                connection.add(this.source.subscribe(new OperatorSubscriber(subject_1, undefined, function () {
                    _this._teardown();
                    subject_1.complete();
                }, function (err) {
                    _this._teardown();
                    subject_1.error(err);
                }, function () { return _this._teardown(); })));
                if (connection.closed) {
                    this._connection = null;
                    connection = Subscription.EMPTY;
                }
            }
            return connection;
        };
        ConnectableObservable.prototype.refCount = function () {
            return refCount()(this);
        };
        return ConnectableObservable;
    }(Observable));

    var performanceTimestampProvider = {
        now: function () {
            return (performanceTimestampProvider.delegate || performance).now();
        },
        delegate: undefined,
    };

    var animationFrameProvider = {
        schedule: function (callback) {
            var request = requestAnimationFrame;
            var cancel = cancelAnimationFrame;
            var delegate = animationFrameProvider.delegate;
            if (delegate) {
                request = delegate.requestAnimationFrame;
                cancel = delegate.cancelAnimationFrame;
            }
            var handle = request(function (timestamp) {
                cancel = undefined;
                callback(timestamp);
            });
            return new Subscription(function () { return cancel === null || cancel === void 0 ? void 0 : cancel(handle); });
        },
        requestAnimationFrame: function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            var delegate = animationFrameProvider.delegate;
            return ((delegate === null || delegate === void 0 ? void 0 : delegate.requestAnimationFrame) || requestAnimationFrame).apply(void 0, __spreadArray([], __read(args)));
        },
        cancelAnimationFrame: function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            var delegate = animationFrameProvider.delegate;
            return ((delegate === null || delegate === void 0 ? void 0 : delegate.cancelAnimationFrame) || cancelAnimationFrame).apply(void 0, __spreadArray([], __read(args)));
        },
        delegate: undefined,
    };

    function animationFrames(timestampProvider) {
        return timestampProvider ? animationFramesFactory(timestampProvider) : DEFAULT_ANIMATION_FRAMES;
    }
    function animationFramesFactory(timestampProvider) {
        var schedule = animationFrameProvider.schedule;
        return new Observable(function (subscriber) {
            var subscription = new Subscription();
            var provider = timestampProvider || performanceTimestampProvider;
            var start = provider.now();
            var run = function (timestamp) {
                var now = provider.now();
                subscriber.next({
                    timestamp: timestampProvider ? now : timestamp,
                    elapsed: now - start
                });
                if (!subscriber.closed) {
                    subscription.add(schedule(run));
                }
            };
            subscription.add(schedule(run));
            return subscription;
        });
    }
    var DEFAULT_ANIMATION_FRAMES = animationFramesFactory();

    var ObjectUnsubscribedError = createErrorClass(function (_super) {
        return function ObjectUnsubscribedErrorImpl() {
            _super(this);
            this.name = 'ObjectUnsubscribedError';
            this.message = 'object unsubscribed';
        };
    });

    var Subject$1 = (function (_super) {
        __extends$4(Subject, _super);
        function Subject() {
            var _this = _super.call(this) || this;
            _this.closed = false;
            _this.observers = [];
            _this.isStopped = false;
            _this.hasError = false;
            _this.thrownError = null;
            return _this;
        }
        Subject.prototype.lift = function (operator) {
            var subject = new AnonymousSubject(this, this);
            subject.operator = operator;
            return subject;
        };
        Subject.prototype._throwIfClosed = function () {
            if (this.closed) {
                throw new ObjectUnsubscribedError();
            }
        };
        Subject.prototype.next = function (value) {
            var _this = this;
            errorContext(function () {
                var e_1, _a;
                _this._throwIfClosed();
                if (!_this.isStopped) {
                    var copy = _this.observers.slice();
                    try {
                        for (var copy_1 = __values(copy), copy_1_1 = copy_1.next(); !copy_1_1.done; copy_1_1 = copy_1.next()) {
                            var observer = copy_1_1.value;
                            observer.next(value);
                        }
                    }
                    catch (e_1_1) { e_1 = { error: e_1_1 }; }
                    finally {
                        try {
                            if (copy_1_1 && !copy_1_1.done && (_a = copy_1.return)) _a.call(copy_1);
                        }
                        finally { if (e_1) throw e_1.error; }
                    }
                }
            });
        };
        Subject.prototype.error = function (err) {
            var _this = this;
            errorContext(function () {
                _this._throwIfClosed();
                if (!_this.isStopped) {
                    _this.hasError = _this.isStopped = true;
                    _this.thrownError = err;
                    var observers = _this.observers;
                    while (observers.length) {
                        observers.shift().error(err);
                    }
                }
            });
        };
        Subject.prototype.complete = function () {
            var _this = this;
            errorContext(function () {
                _this._throwIfClosed();
                if (!_this.isStopped) {
                    _this.isStopped = true;
                    var observers = _this.observers;
                    while (observers.length) {
                        observers.shift().complete();
                    }
                }
            });
        };
        Subject.prototype.unsubscribe = function () {
            this.isStopped = this.closed = true;
            this.observers = null;
        };
        Object.defineProperty(Subject.prototype, "observed", {
            get: function () {
                var _a;
                return ((_a = this.observers) === null || _a === void 0 ? void 0 : _a.length) > 0;
            },
            enumerable: false,
            configurable: true
        });
        Subject.prototype._trySubscribe = function (subscriber) {
            this._throwIfClosed();
            return _super.prototype._trySubscribe.call(this, subscriber);
        };
        Subject.prototype._subscribe = function (subscriber) {
            this._throwIfClosed();
            this._checkFinalizedStatuses(subscriber);
            return this._innerSubscribe(subscriber);
        };
        Subject.prototype._innerSubscribe = function (subscriber) {
            var _a = this, hasError = _a.hasError, isStopped = _a.isStopped, observers = _a.observers;
            return hasError || isStopped
                ? EMPTY_SUBSCRIPTION
                : (observers.push(subscriber), new Subscription(function () { return arrRemove(observers, subscriber); }));
        };
        Subject.prototype._checkFinalizedStatuses = function (subscriber) {
            var _a = this, hasError = _a.hasError, thrownError = _a.thrownError, isStopped = _a.isStopped;
            if (hasError) {
                subscriber.error(thrownError);
            }
            else if (isStopped) {
                subscriber.complete();
            }
        };
        Subject.prototype.asObservable = function () {
            var observable = new Observable();
            observable.source = this;
            return observable;
        };
        Subject.create = function (destination, source) {
            return new AnonymousSubject(destination, source);
        };
        return Subject;
    }(Observable));
    var AnonymousSubject = (function (_super) {
        __extends$4(AnonymousSubject, _super);
        function AnonymousSubject(destination, source) {
            var _this = _super.call(this) || this;
            _this.destination = destination;
            _this.source = source;
            return _this;
        }
        AnonymousSubject.prototype.next = function (value) {
            var _a, _b;
            (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.next) === null || _b === void 0 ? void 0 : _b.call(_a, value);
        };
        AnonymousSubject.prototype.error = function (err) {
            var _a, _b;
            (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.error) === null || _b === void 0 ? void 0 : _b.call(_a, err);
        };
        AnonymousSubject.prototype.complete = function () {
            var _a, _b;
            (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.complete) === null || _b === void 0 ? void 0 : _b.call(_a);
        };
        AnonymousSubject.prototype._subscribe = function (subscriber) {
            var _a, _b;
            return (_b = (_a = this.source) === null || _a === void 0 ? void 0 : _a.subscribe(subscriber)) !== null && _b !== void 0 ? _b : EMPTY_SUBSCRIPTION;
        };
        return AnonymousSubject;
    }(Subject$1));

    var BehaviorSubject = (function (_super) {
        __extends$4(BehaviorSubject, _super);
        function BehaviorSubject(_value) {
            var _this = _super.call(this) || this;
            _this._value = _value;
            return _this;
        }
        Object.defineProperty(BehaviorSubject.prototype, "value", {
            get: function () {
                return this.getValue();
            },
            enumerable: false,
            configurable: true
        });
        BehaviorSubject.prototype._subscribe = function (subscriber) {
            var subscription = _super.prototype._subscribe.call(this, subscriber);
            !subscription.closed && subscriber.next(this._value);
            return subscription;
        };
        BehaviorSubject.prototype.getValue = function () {
            var _a = this, hasError = _a.hasError, thrownError = _a.thrownError, _value = _a._value;
            if (hasError) {
                throw thrownError;
            }
            this._throwIfClosed();
            return _value;
        };
        BehaviorSubject.prototype.next = function (value) {
            _super.prototype.next.call(this, (this._value = value));
        };
        return BehaviorSubject;
    }(Subject$1));

    var dateTimestampProvider = {
        now: function () {
            return (dateTimestampProvider.delegate || Date).now();
        },
        delegate: undefined,
    };

    var ReplaySubject = (function (_super) {
        __extends$4(ReplaySubject, _super);
        function ReplaySubject(_bufferSize, _windowTime, _timestampProvider) {
            if (_bufferSize === void 0) { _bufferSize = Infinity; }
            if (_windowTime === void 0) { _windowTime = Infinity; }
            if (_timestampProvider === void 0) { _timestampProvider = dateTimestampProvider; }
            var _this = _super.call(this) || this;
            _this._bufferSize = _bufferSize;
            _this._windowTime = _windowTime;
            _this._timestampProvider = _timestampProvider;
            _this._buffer = [];
            _this._infiniteTimeWindow = true;
            _this._infiniteTimeWindow = _windowTime === Infinity;
            _this._bufferSize = Math.max(1, _bufferSize);
            _this._windowTime = Math.max(1, _windowTime);
            return _this;
        }
        ReplaySubject.prototype.next = function (value) {
            var _a = this, isStopped = _a.isStopped, _buffer = _a._buffer, _infiniteTimeWindow = _a._infiniteTimeWindow, _timestampProvider = _a._timestampProvider, _windowTime = _a._windowTime;
            if (!isStopped) {
                _buffer.push(value);
                !_infiniteTimeWindow && _buffer.push(_timestampProvider.now() + _windowTime);
            }
            this._trimBuffer();
            _super.prototype.next.call(this, value);
        };
        ReplaySubject.prototype._subscribe = function (subscriber) {
            this._throwIfClosed();
            this._trimBuffer();
            var subscription = this._innerSubscribe(subscriber);
            var _a = this, _infiniteTimeWindow = _a._infiniteTimeWindow, _buffer = _a._buffer;
            var copy = _buffer.slice();
            for (var i = 0; i < copy.length && !subscriber.closed; i += _infiniteTimeWindow ? 1 : 2) {
                subscriber.next(copy[i]);
            }
            this._checkFinalizedStatuses(subscriber);
            return subscription;
        };
        ReplaySubject.prototype._trimBuffer = function () {
            var _a = this, _bufferSize = _a._bufferSize, _timestampProvider = _a._timestampProvider, _buffer = _a._buffer, _infiniteTimeWindow = _a._infiniteTimeWindow;
            var adjustedBufferSize = (_infiniteTimeWindow ? 1 : 2) * _bufferSize;
            _bufferSize < Infinity && adjustedBufferSize < _buffer.length && _buffer.splice(0, _buffer.length - adjustedBufferSize);
            if (!_infiniteTimeWindow) {
                var now = _timestampProvider.now();
                var last = 0;
                for (var i = 1; i < _buffer.length && _buffer[i] <= now; i += 2) {
                    last = i;
                }
                last && _buffer.splice(0, last + 1);
            }
        };
        return ReplaySubject;
    }(Subject$1));

    var AsyncSubject = (function (_super) {
        __extends$4(AsyncSubject, _super);
        function AsyncSubject() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this._value = null;
            _this._hasValue = false;
            _this._isComplete = false;
            return _this;
        }
        AsyncSubject.prototype._checkFinalizedStatuses = function (subscriber) {
            var _a = this, hasError = _a.hasError, _hasValue = _a._hasValue, _value = _a._value, thrownError = _a.thrownError, isStopped = _a.isStopped, _isComplete = _a._isComplete;
            if (hasError) {
                subscriber.error(thrownError);
            }
            else if (isStopped || _isComplete) {
                _hasValue && subscriber.next(_value);
                subscriber.complete();
            }
        };
        AsyncSubject.prototype.next = function (value) {
            if (!this.isStopped) {
                this._value = value;
                this._hasValue = true;
            }
        };
        AsyncSubject.prototype.complete = function () {
            var _a = this, _hasValue = _a._hasValue, _value = _a._value, _isComplete = _a._isComplete;
            if (!_isComplete) {
                this._isComplete = true;
                _hasValue && _super.prototype.next.call(this, _value);
                _super.prototype.complete.call(this);
            }
        };
        return AsyncSubject;
    }(Subject$1));

    var Action = (function (_super) {
        __extends$4(Action, _super);
        function Action(scheduler, work) {
            return _super.call(this) || this;
        }
        Action.prototype.schedule = function (state, delay) {
            return this;
        };
        return Action;
    }(Subscription));

    var intervalProvider = {
        setInterval: function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            var delegate = intervalProvider.delegate;
            return ((delegate === null || delegate === void 0 ? void 0 : delegate.setInterval) || setInterval).apply(void 0, __spreadArray([], __read(args)));
        },
        clearInterval: function (handle) {
            var delegate = intervalProvider.delegate;
            return ((delegate === null || delegate === void 0 ? void 0 : delegate.clearInterval) || clearInterval)(handle);
        },
        delegate: undefined,
    };

    var AsyncAction = (function (_super) {
        __extends$4(AsyncAction, _super);
        function AsyncAction(scheduler, work) {
            var _this = _super.call(this, scheduler, work) || this;
            _this.scheduler = scheduler;
            _this.work = work;
            _this.pending = false;
            return _this;
        }
        AsyncAction.prototype.schedule = function (state, delay) {
            if (delay === void 0) { delay = 0; }
            if (this.closed) {
                return this;
            }
            this.state = state;
            var id = this.id;
            var scheduler = this.scheduler;
            if (id != null) {
                this.id = this.recycleAsyncId(scheduler, id, delay);
            }
            this.pending = true;
            this.delay = delay;
            this.id = this.id || this.requestAsyncId(scheduler, this.id, delay);
            return this;
        };
        AsyncAction.prototype.requestAsyncId = function (scheduler, _id, delay) {
            if (delay === void 0) { delay = 0; }
            return intervalProvider.setInterval(scheduler.flush.bind(scheduler, this), delay);
        };
        AsyncAction.prototype.recycleAsyncId = function (_scheduler, id, delay) {
            if (delay === void 0) { delay = 0; }
            if (delay != null && this.delay === delay && this.pending === false) {
                return id;
            }
            intervalProvider.clearInterval(id);
            return undefined;
        };
        AsyncAction.prototype.execute = function (state, delay) {
            if (this.closed) {
                return new Error('executing a cancelled action');
            }
            this.pending = false;
            var error = this._execute(state, delay);
            if (error) {
                return error;
            }
            else if (this.pending === false && this.id != null) {
                this.id = this.recycleAsyncId(this.scheduler, this.id, null);
            }
        };
        AsyncAction.prototype._execute = function (state, _delay) {
            var errored = false;
            var errorValue;
            try {
                this.work(state);
            }
            catch (e) {
                errored = true;
                errorValue = e ? e : new Error('Scheduled action threw falsy error');
            }
            if (errored) {
                this.unsubscribe();
                return errorValue;
            }
        };
        AsyncAction.prototype.unsubscribe = function () {
            if (!this.closed) {
                var _a = this, id = _a.id, scheduler = _a.scheduler;
                var actions = scheduler.actions;
                this.work = this.state = this.scheduler = null;
                this.pending = false;
                arrRemove(actions, this);
                if (id != null) {
                    this.id = this.recycleAsyncId(scheduler, id, null);
                }
                this.delay = null;
                _super.prototype.unsubscribe.call(this);
            }
        };
        return AsyncAction;
    }(Action));

    var nextHandle = 1;
    var resolved;
    var activeHandles = {};
    function findAndClearHandle(handle) {
        if (handle in activeHandles) {
            delete activeHandles[handle];
            return true;
        }
        return false;
    }
    var Immediate = {
        setImmediate: function (cb) {
            var handle = nextHandle++;
            activeHandles[handle] = true;
            if (!resolved) {
                resolved = Promise.resolve();
            }
            resolved.then(function () { return findAndClearHandle(handle) && cb(); });
            return handle;
        },
        clearImmediate: function (handle) {
            findAndClearHandle(handle);
        },
    };

    var setImmediate$1 = Immediate.setImmediate, clearImmediate = Immediate.clearImmediate;
    var immediateProvider = {
        setImmediate: function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            var delegate = immediateProvider.delegate;
            return ((delegate === null || delegate === void 0 ? void 0 : delegate.setImmediate) || setImmediate$1).apply(void 0, __spreadArray([], __read(args)));
        },
        clearImmediate: function (handle) {
            var delegate = immediateProvider.delegate;
            return ((delegate === null || delegate === void 0 ? void 0 : delegate.clearImmediate) || clearImmediate)(handle);
        },
        delegate: undefined,
    };

    var AsapAction = (function (_super) {
        __extends$4(AsapAction, _super);
        function AsapAction(scheduler, work) {
            var _this = _super.call(this, scheduler, work) || this;
            _this.scheduler = scheduler;
            _this.work = work;
            return _this;
        }
        AsapAction.prototype.requestAsyncId = function (scheduler, id, delay) {
            if (delay === void 0) { delay = 0; }
            if (delay !== null && delay > 0) {
                return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);
            }
            scheduler.actions.push(this);
            return scheduler._scheduled || (scheduler._scheduled = immediateProvider.setImmediate(scheduler.flush.bind(scheduler, undefined)));
        };
        AsapAction.prototype.recycleAsyncId = function (scheduler, id, delay) {
            if (delay === void 0) { delay = 0; }
            if ((delay != null && delay > 0) || (delay == null && this.delay > 0)) {
                return _super.prototype.recycleAsyncId.call(this, scheduler, id, delay);
            }
            if (scheduler.actions.length === 0) {
                immediateProvider.clearImmediate(id);
                scheduler._scheduled = undefined;
            }
            return undefined;
        };
        return AsapAction;
    }(AsyncAction));

    var Scheduler = (function () {
        function Scheduler(schedulerActionCtor, now) {
            if (now === void 0) { now = Scheduler.now; }
            this.schedulerActionCtor = schedulerActionCtor;
            this.now = now;
        }
        Scheduler.prototype.schedule = function (work, delay, state) {
            if (delay === void 0) { delay = 0; }
            return new this.schedulerActionCtor(this, work).schedule(state, delay);
        };
        Scheduler.now = dateTimestampProvider.now;
        return Scheduler;
    }());

    var AsyncScheduler = (function (_super) {
        __extends$4(AsyncScheduler, _super);
        function AsyncScheduler(SchedulerAction, now) {
            if (now === void 0) { now = Scheduler.now; }
            var _this = _super.call(this, SchedulerAction, now) || this;
            _this.actions = [];
            _this._active = false;
            _this._scheduled = undefined;
            return _this;
        }
        AsyncScheduler.prototype.flush = function (action) {
            var actions = this.actions;
            if (this._active) {
                actions.push(action);
                return;
            }
            var error;
            this._active = true;
            do {
                if ((error = action.execute(action.state, action.delay))) {
                    break;
                }
            } while ((action = actions.shift()));
            this._active = false;
            if (error) {
                while ((action = actions.shift())) {
                    action.unsubscribe();
                }
                throw error;
            }
        };
        return AsyncScheduler;
    }(Scheduler));

    var AsapScheduler = (function (_super) {
        __extends$4(AsapScheduler, _super);
        function AsapScheduler() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        AsapScheduler.prototype.flush = function (action) {
            this._active = true;
            this._scheduled = undefined;
            var actions = this.actions;
            var error;
            var index = -1;
            action = action || actions.shift();
            var count = actions.length;
            do {
                if ((error = action.execute(action.state, action.delay))) {
                    break;
                }
            } while (++index < count && (action = actions.shift()));
            this._active = false;
            if (error) {
                while (++index < count && (action = actions.shift())) {
                    action.unsubscribe();
                }
                throw error;
            }
        };
        return AsapScheduler;
    }(AsyncScheduler));

    var asapScheduler = new AsapScheduler(AsapAction);
    var asap = asapScheduler;

    var asyncScheduler = new AsyncScheduler(AsyncAction);
    var async = asyncScheduler;

    var QueueAction = (function (_super) {
        __extends$4(QueueAction, _super);
        function QueueAction(scheduler, work) {
            var _this = _super.call(this, scheduler, work) || this;
            _this.scheduler = scheduler;
            _this.work = work;
            return _this;
        }
        QueueAction.prototype.schedule = function (state, delay) {
            if (delay === void 0) { delay = 0; }
            if (delay > 0) {
                return _super.prototype.schedule.call(this, state, delay);
            }
            this.delay = delay;
            this.state = state;
            this.scheduler.flush(this);
            return this;
        };
        QueueAction.prototype.execute = function (state, delay) {
            return (delay > 0 || this.closed) ?
                _super.prototype.execute.call(this, state, delay) :
                this._execute(state, delay);
        };
        QueueAction.prototype.requestAsyncId = function (scheduler, id, delay) {
            if (delay === void 0) { delay = 0; }
            if ((delay != null && delay > 0) || (delay == null && this.delay > 0)) {
                return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);
            }
            return scheduler.flush(this);
        };
        return QueueAction;
    }(AsyncAction));

    var QueueScheduler = (function (_super) {
        __extends$4(QueueScheduler, _super);
        function QueueScheduler() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return QueueScheduler;
    }(AsyncScheduler));

    var queueScheduler = new QueueScheduler(QueueAction);
    var queue = queueScheduler;

    var AnimationFrameAction = (function (_super) {
        __extends$4(AnimationFrameAction, _super);
        function AnimationFrameAction(scheduler, work) {
            var _this = _super.call(this, scheduler, work) || this;
            _this.scheduler = scheduler;
            _this.work = work;
            return _this;
        }
        AnimationFrameAction.prototype.requestAsyncId = function (scheduler, id, delay) {
            if (delay === void 0) { delay = 0; }
            if (delay !== null && delay > 0) {
                return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);
            }
            scheduler.actions.push(this);
            return scheduler._scheduled || (scheduler._scheduled = animationFrameProvider.requestAnimationFrame(function () { return scheduler.flush(undefined); }));
        };
        AnimationFrameAction.prototype.recycleAsyncId = function (scheduler, id, delay) {
            if (delay === void 0) { delay = 0; }
            if ((delay != null && delay > 0) || (delay == null && this.delay > 0)) {
                return _super.prototype.recycleAsyncId.call(this, scheduler, id, delay);
            }
            if (scheduler.actions.length === 0) {
                animationFrameProvider.cancelAnimationFrame(id);
                scheduler._scheduled = undefined;
            }
            return undefined;
        };
        return AnimationFrameAction;
    }(AsyncAction));

    var AnimationFrameScheduler = (function (_super) {
        __extends$4(AnimationFrameScheduler, _super);
        function AnimationFrameScheduler() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        AnimationFrameScheduler.prototype.flush = function (action) {
            this._active = true;
            this._scheduled = undefined;
            var actions = this.actions;
            var error;
            var index = -1;
            action = action || actions.shift();
            var count = actions.length;
            do {
                if ((error = action.execute(action.state, action.delay))) {
                    break;
                }
            } while (++index < count && (action = actions.shift()));
            this._active = false;
            if (error) {
                while (++index < count && (action = actions.shift())) {
                    action.unsubscribe();
                }
                throw error;
            }
        };
        return AnimationFrameScheduler;
    }(AsyncScheduler));

    var animationFrameScheduler = new AnimationFrameScheduler(AnimationFrameAction);
    var animationFrame = animationFrameScheduler;

    var VirtualTimeScheduler = (function (_super) {
        __extends$4(VirtualTimeScheduler, _super);
        function VirtualTimeScheduler(schedulerActionCtor, maxFrames) {
            if (schedulerActionCtor === void 0) { schedulerActionCtor = VirtualAction; }
            if (maxFrames === void 0) { maxFrames = Infinity; }
            var _this = _super.call(this, schedulerActionCtor, function () { return _this.frame; }) || this;
            _this.maxFrames = maxFrames;
            _this.frame = 0;
            _this.index = -1;
            return _this;
        }
        VirtualTimeScheduler.prototype.flush = function () {
            var _a = this, actions = _a.actions, maxFrames = _a.maxFrames;
            var error;
            var action;
            while ((action = actions[0]) && action.delay <= maxFrames) {
                actions.shift();
                this.frame = action.delay;
                if ((error = action.execute(action.state, action.delay))) {
                    break;
                }
            }
            if (error) {
                while ((action = actions.shift())) {
                    action.unsubscribe();
                }
                throw error;
            }
        };
        VirtualTimeScheduler.frameTimeFactor = 10;
        return VirtualTimeScheduler;
    }(AsyncScheduler));
    var VirtualAction = (function (_super) {
        __extends$4(VirtualAction, _super);
        function VirtualAction(scheduler, work, index) {
            if (index === void 0) { index = (scheduler.index += 1); }
            var _this = _super.call(this, scheduler, work) || this;
            _this.scheduler = scheduler;
            _this.work = work;
            _this.index = index;
            _this.active = true;
            _this.index = scheduler.index = index;
            return _this;
        }
        VirtualAction.prototype.schedule = function (state, delay) {
            if (delay === void 0) { delay = 0; }
            if (Number.isFinite(delay)) {
                if (!this.id) {
                    return _super.prototype.schedule.call(this, state, delay);
                }
                this.active = false;
                var action = new VirtualAction(this.scheduler, this.work);
                this.add(action);
                return action.schedule(state, delay);
            }
            else {
                return Subscription.EMPTY;
            }
        };
        VirtualAction.prototype.requestAsyncId = function (scheduler, id, delay) {
            if (delay === void 0) { delay = 0; }
            this.delay = scheduler.frame + delay;
            var actions = scheduler.actions;
            actions.push(this);
            actions.sort(VirtualAction.sortActions);
            return true;
        };
        VirtualAction.prototype.recycleAsyncId = function (scheduler, id, delay) {
            return undefined;
        };
        VirtualAction.prototype._execute = function (state, delay) {
            if (this.active === true) {
                return _super.prototype._execute.call(this, state, delay);
            }
        };
        VirtualAction.sortActions = function (a, b) {
            if (a.delay === b.delay) {
                if (a.index === b.index) {
                    return 0;
                }
                else if (a.index > b.index) {
                    return 1;
                }
                else {
                    return -1;
                }
            }
            else if (a.delay > b.delay) {
                return 1;
            }
            else {
                return -1;
            }
        };
        return VirtualAction;
    }(AsyncAction));

    var EMPTY = new Observable(function (subscriber) { return subscriber.complete(); });
    function empty$1(scheduler) {
        return scheduler ? emptyScheduled(scheduler) : EMPTY;
    }
    function emptyScheduled(scheduler) {
        return new Observable(function (subscriber) { return scheduler.schedule(function () { return subscriber.complete(); }); });
    }

    function isScheduler(value) {
        return value && isFunction(value.schedule);
    }

    function last$1(arr) {
        return arr[arr.length - 1];
    }
    function popResultSelector(args) {
        return isFunction(last$1(args)) ? args.pop() : undefined;
    }
    function popScheduler(args) {
        return isScheduler(last$1(args)) ? args.pop() : undefined;
    }
    function popNumber(args, defaultValue) {
        return typeof last$1(args) === 'number' ? args.pop() : defaultValue;
    }

    var isArrayLike$4 = (function (x) { return x && typeof x.length === 'number' && typeof x !== 'function'; });

    function isPromise$1(value) {
        return isFunction(value === null || value === void 0 ? void 0 : value.then);
    }

    function isInteropObservable(input) {
        return isFunction(input[observable]);
    }

    function isAsyncIterable(obj) {
        return Symbol.asyncIterator && isFunction(obj === null || obj === void 0 ? void 0 : obj[Symbol.asyncIterator]);
    }

    function createInvalidObservableTypeError(input) {
        return new TypeError("You provided " + (input !== null && typeof input === 'object' ? 'an invalid object' : "'" + input + "'") + " where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.");
    }

    function getSymbolIterator() {
        if (typeof Symbol !== 'function' || !Symbol.iterator) {
            return '@@iterator';
        }
        return Symbol.iterator;
    }
    var iterator = getSymbolIterator();

    function isIterable(input) {
        return isFunction(input === null || input === void 0 ? void 0 : input[iterator]);
    }

    function readableStreamLikeToAsyncGenerator(readableStream) {
        return __asyncGenerator(this, arguments, function readableStreamLikeToAsyncGenerator_1() {
            var reader, _a, value, done;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        reader = readableStream.getReader();
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, , 9, 10]);
                        _b.label = 2;
                    case 2:
                        return [4, __await(reader.read())];
                    case 3:
                        _a = _b.sent(), value = _a.value, done = _a.done;
                        if (!done) return [3, 5];
                        return [4, __await(void 0)];
                    case 4: return [2, _b.sent()];
                    case 5: return [4, __await(value)];
                    case 6: return [4, _b.sent()];
                    case 7:
                        _b.sent();
                        return [3, 2];
                    case 8: return [3, 10];
                    case 9:
                        reader.releaseLock();
                        return [7];
                    case 10: return [2];
                }
            });
        });
    }
    function isReadableStreamLike(obj) {
        return isFunction(obj === null || obj === void 0 ? void 0 : obj.getReader);
    }

    function innerFrom(input) {
        if (input instanceof Observable) {
            return input;
        }
        if (input != null) {
            if (isInteropObservable(input)) {
                return fromInteropObservable(input);
            }
            if (isArrayLike$4(input)) {
                return fromArrayLike(input);
            }
            if (isPromise$1(input)) {
                return fromPromise(input);
            }
            if (isAsyncIterable(input)) {
                return fromAsyncIterable(input);
            }
            if (isIterable(input)) {
                return fromIterable(input);
            }
            if (isReadableStreamLike(input)) {
                return fromReadableStreamLike(input);
            }
        }
        throw createInvalidObservableTypeError(input);
    }
    function fromInteropObservable(obj) {
        return new Observable(function (subscriber) {
            var obs = obj[observable]();
            if (isFunction(obs.subscribe)) {
                return obs.subscribe(subscriber);
            }
            throw new TypeError('Provided object does not correctly implement Symbol.observable');
        });
    }
    function fromArrayLike(array) {
        return new Observable(function (subscriber) {
            for (var i = 0; i < array.length && !subscriber.closed; i++) {
                subscriber.next(array[i]);
            }
            subscriber.complete();
        });
    }
    function fromPromise(promise) {
        return new Observable(function (subscriber) {
            promise
                .then(function (value) {
                if (!subscriber.closed) {
                    subscriber.next(value);
                    subscriber.complete();
                }
            }, function (err) { return subscriber.error(err); })
                .then(null, reportUnhandledError);
        });
    }
    function fromIterable(iterable) {
        return new Observable(function (subscriber) {
            var e_1, _a;
            try {
                for (var iterable_1 = __values(iterable), iterable_1_1 = iterable_1.next(); !iterable_1_1.done; iterable_1_1 = iterable_1.next()) {
                    var value = iterable_1_1.value;
                    subscriber.next(value);
                    if (subscriber.closed) {
                        return;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (iterable_1_1 && !iterable_1_1.done && (_a = iterable_1.return)) _a.call(iterable_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
            subscriber.complete();
        });
    }
    function fromAsyncIterable(asyncIterable) {
        return new Observable(function (subscriber) {
            process$1(asyncIterable, subscriber).catch(function (err) { return subscriber.error(err); });
        });
    }
    function fromReadableStreamLike(readableStream) {
        return fromAsyncIterable(readableStreamLikeToAsyncGenerator(readableStream));
    }
    function process$1(asyncIterable, subscriber) {
        var asyncIterable_1, asyncIterable_1_1;
        var e_2, _a;
        return __awaiter(this, void 0, void 0, function () {
            var value, e_2_1;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _b.trys.push([0, 5, 6, 11]);
                        asyncIterable_1 = __asyncValues(asyncIterable);
                        _b.label = 1;
                    case 1: return [4, asyncIterable_1.next()];
                    case 2:
                        if (!(asyncIterable_1_1 = _b.sent(), !asyncIterable_1_1.done)) return [3, 4];
                        value = asyncIterable_1_1.value;
                        subscriber.next(value);
                        if (subscriber.closed) {
                            return [2];
                        }
                        _b.label = 3;
                    case 3: return [3, 1];
                    case 4: return [3, 11];
                    case 5:
                        e_2_1 = _b.sent();
                        e_2 = { error: e_2_1 };
                        return [3, 11];
                    case 6:
                        _b.trys.push([6, , 9, 10]);
                        if (!(asyncIterable_1_1 && !asyncIterable_1_1.done && (_a = asyncIterable_1.return))) return [3, 8];
                        return [4, _a.call(asyncIterable_1)];
                    case 7:
                        _b.sent();
                        _b.label = 8;
                    case 8: return [3, 10];
                    case 9:
                        if (e_2) throw e_2.error;
                        return [7];
                    case 10: return [7];
                    case 11:
                        subscriber.complete();
                        return [2];
                }
            });
        });
    }

    function executeSchedule(parentSubscription, scheduler, work, delay, repeat) {
        if (delay === void 0) { delay = 0; }
        if (repeat === void 0) { repeat = false; }
        var scheduleSubscription = scheduler.schedule(function () {
            work();
            if (repeat) {
                parentSubscription.add(this.schedule(null, delay));
            }
            else {
                this.unsubscribe();
            }
        }, delay);
        parentSubscription.add(scheduleSubscription);
        if (!repeat) {
            return scheduleSubscription;
        }
    }

    function observeOn(scheduler, delay) {
        if (delay === void 0) { delay = 0; }
        return operate(function (source, subscriber) {
            source.subscribe(new OperatorSubscriber(subscriber, function (value) { return executeSchedule(subscriber, scheduler, function () { return subscriber.next(value); }, delay); }, function () { return executeSchedule(subscriber, scheduler, function () { return subscriber.complete(); }, delay); }, function (err) { return executeSchedule(subscriber, scheduler, function () { return subscriber.error(err); }, delay); }));
        });
    }

    function subscribeOn(scheduler, delay) {
        if (delay === void 0) { delay = 0; }
        return operate(function (source, subscriber) {
            subscriber.add(scheduler.schedule(function () { return source.subscribe(subscriber); }, delay));
        });
    }

    function scheduleObservable(input, scheduler) {
        return innerFrom(input).pipe(subscribeOn(scheduler), observeOn(scheduler));
    }

    function schedulePromise(input, scheduler) {
        return innerFrom(input).pipe(subscribeOn(scheduler), observeOn(scheduler));
    }

    function scheduleArray(input, scheduler) {
        return new Observable(function (subscriber) {
            var i = 0;
            return scheduler.schedule(function () {
                if (i === input.length) {
                    subscriber.complete();
                }
                else {
                    subscriber.next(input[i++]);
                    if (!subscriber.closed) {
                        this.schedule();
                    }
                }
            });
        });
    }

    function scheduleIterable(input, scheduler) {
        return new Observable(function (subscriber) {
            var iterator$1;
            executeSchedule(subscriber, scheduler, function () {
                iterator$1 = input[iterator]();
                executeSchedule(subscriber, scheduler, function () {
                    var _a;
                    var value;
                    var done;
                    try {
                        (_a = iterator$1.next(), value = _a.value, done = _a.done);
                    }
                    catch (err) {
                        subscriber.error(err);
                        return;
                    }
                    if (done) {
                        subscriber.complete();
                    }
                    else {
                        subscriber.next(value);
                    }
                }, 0, true);
            });
            return function () { return isFunction(iterator$1 === null || iterator$1 === void 0 ? void 0 : iterator$1.return) && iterator$1.return(); };
        });
    }

    function scheduleAsyncIterable(input, scheduler) {
        if (!input) {
            throw new Error('Iterable cannot be null');
        }
        return new Observable(function (subscriber) {
            executeSchedule(subscriber, scheduler, function () {
                var iterator = input[Symbol.asyncIterator]();
                executeSchedule(subscriber, scheduler, function () {
                    iterator.next().then(function (result) {
                        if (result.done) {
                            subscriber.complete();
                        }
                        else {
                            subscriber.next(result.value);
                        }
                    });
                }, 0, true);
            });
        });
    }

    function scheduleReadableStreamLike(input, scheduler) {
        return scheduleAsyncIterable(readableStreamLikeToAsyncGenerator(input), scheduler);
    }

    function scheduled(input, scheduler) {
        if (input != null) {
            if (isInteropObservable(input)) {
                return scheduleObservable(input, scheduler);
            }
            if (isArrayLike$4(input)) {
                return scheduleArray(input, scheduler);
            }
            if (isPromise$1(input)) {
                return schedulePromise(input, scheduler);
            }
            if (isAsyncIterable(input)) {
                return scheduleAsyncIterable(input, scheduler);
            }
            if (isIterable(input)) {
                return scheduleIterable(input, scheduler);
            }
            if (isReadableStreamLike(input)) {
                return scheduleReadableStreamLike(input, scheduler);
            }
        }
        throw createInvalidObservableTypeError(input);
    }

    function from$2(input, scheduler) {
        return scheduler ? scheduled(input, scheduler) : innerFrom(input);
    }

    function of$2() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var scheduler = popScheduler(args);
        return from$2(args, scheduler);
    }

    function throwError(errorOrErrorFactory, scheduler) {
        var errorFactory = isFunction(errorOrErrorFactory) ? errorOrErrorFactory : function () { return errorOrErrorFactory; };
        var init = function (subscriber) { return subscriber.error(errorFactory()); };
        return new Observable(scheduler ? function (subscriber) { return scheduler.schedule(init, 0, subscriber); } : init);
    }

    var NotificationKind;
    (function (NotificationKind) {
        NotificationKind["NEXT"] = "N";
        NotificationKind["ERROR"] = "E";
        NotificationKind["COMPLETE"] = "C";
    })(NotificationKind || (NotificationKind = {}));
    var Notification = (function () {
        function Notification(kind, value, error) {
            this.kind = kind;
            this.value = value;
            this.error = error;
            this.hasValue = kind === 'N';
        }
        Notification.prototype.observe = function (observer) {
            return observeNotification(this, observer);
        };
        Notification.prototype.do = function (nextHandler, errorHandler, completeHandler) {
            var _a = this, kind = _a.kind, value = _a.value, error = _a.error;
            return kind === 'N' ? nextHandler === null || nextHandler === void 0 ? void 0 : nextHandler(value) : kind === 'E' ? errorHandler === null || errorHandler === void 0 ? void 0 : errorHandler(error) : completeHandler === null || completeHandler === void 0 ? void 0 : completeHandler();
        };
        Notification.prototype.accept = function (nextOrObserver, error, complete) {
            var _a;
            return isFunction((_a = nextOrObserver) === null || _a === void 0 ? void 0 : _a.next)
                ? this.observe(nextOrObserver)
                : this.do(nextOrObserver, error, complete);
        };
        Notification.prototype.toObservable = function () {
            var _a = this, kind = _a.kind, value = _a.value, error = _a.error;
            var result = kind === 'N'
                ?
                    of$2(value)
                :
                    kind === 'E'
                        ?
                            throwError(function () { return error; })
                        :
                            kind === 'C'
                                ?
                                    EMPTY
                                :
                                    0;
            if (!result) {
                throw new TypeError("Unexpected notification kind " + kind);
            }
            return result;
        };
        Notification.createNext = function (value) {
            return new Notification('N', value);
        };
        Notification.createError = function (err) {
            return new Notification('E', undefined, err);
        };
        Notification.createComplete = function () {
            return Notification.completeNotification;
        };
        Notification.completeNotification = new Notification('C');
        return Notification;
    }());
    function observeNotification(notification, observer) {
        var _a, _b, _c;
        var _d = notification, kind = _d.kind, value = _d.value, error = _d.error;
        if (typeof kind !== 'string') {
            throw new TypeError('Invalid notification, missing "kind"');
        }
        kind === 'N' ? (_a = observer.next) === null || _a === void 0 ? void 0 : _a.call(observer, value) : kind === 'E' ? (_b = observer.error) === null || _b === void 0 ? void 0 : _b.call(observer, error) : (_c = observer.complete) === null || _c === void 0 ? void 0 : _c.call(observer);
    }

    function isObservable(obj) {
        return !!obj && (obj instanceof Observable || (isFunction(obj.lift) && isFunction(obj.subscribe)));
    }

    var EmptyError = createErrorClass(function (_super) { return function EmptyErrorImpl() {
        _super(this);
        this.name = 'EmptyError';
        this.message = 'no elements in sequence';
    }; });

    function lastValueFrom(source, config) {
        var hasConfig = typeof config === 'object';
        return new Promise(function (resolve, reject) {
            var _hasValue = false;
            var _value;
            source.subscribe({
                next: function (value) {
                    _value = value;
                    _hasValue = true;
                },
                error: reject,
                complete: function () {
                    if (_hasValue) {
                        resolve(_value);
                    }
                    else if (hasConfig) {
                        resolve(config.defaultValue);
                    }
                    else {
                        reject(new EmptyError());
                    }
                },
            });
        });
    }

    function firstValueFrom(source, config) {
        var hasConfig = typeof config === 'object';
        return new Promise(function (resolve, reject) {
            var subscriber = new SafeSubscriber({
                next: function (value) {
                    resolve(value);
                    subscriber.unsubscribe();
                },
                error: reject,
                complete: function () {
                    if (hasConfig) {
                        resolve(config.defaultValue);
                    }
                    else {
                        reject(new EmptyError());
                    }
                },
            });
            source.subscribe(subscriber);
        });
    }

    var ArgumentOutOfRangeError = createErrorClass(function (_super) {
        return function ArgumentOutOfRangeErrorImpl() {
            _super(this);
            this.name = 'ArgumentOutOfRangeError';
            this.message = 'argument out of range';
        };
    });

    var NotFoundError = createErrorClass(function (_super) {
        return function NotFoundErrorImpl(message) {
            _super(this);
            this.name = 'NotFoundError';
            this.message = message;
        };
    });

    var SequenceError = createErrorClass(function (_super) {
        return function SequenceErrorImpl(message) {
            _super(this);
            this.name = 'SequenceError';
            this.message = message;
        };
    });

    function isValidDate(value) {
        return value instanceof Date && !isNaN(value);
    }

    var TimeoutError = createErrorClass(function (_super) {
        return function TimeoutErrorImpl(info) {
            if (info === void 0) { info = null; }
            _super(this);
            this.message = 'Timeout has occurred';
            this.name = 'TimeoutError';
            this.info = info;
        };
    });
    function timeout(config, schedulerArg) {
        var _a = (isValidDate(config)
            ? { first: config }
            : typeof config === 'number'
                ? { each: config }
                : config), first = _a.first, each = _a.each, _b = _a.with, _with = _b === void 0 ? timeoutErrorFactory : _b, _c = _a.scheduler, scheduler = _c === void 0 ? schedulerArg !== null && schedulerArg !== void 0 ? schedulerArg : asyncScheduler : _c, _d = _a.meta, meta = _d === void 0 ? null : _d;
        if (first == null && each == null) {
            throw new TypeError('No timeout provided.');
        }
        return operate(function (source, subscriber) {
            var originalSourceSubscription;
            var timerSubscription;
            var lastValue = null;
            var seen = 0;
            var startTimer = function (delay) {
                timerSubscription = executeSchedule(subscriber, scheduler, function () {
                    try {
                        originalSourceSubscription.unsubscribe();
                        innerFrom(_with({
                            meta: meta,
                            lastValue: lastValue,
                            seen: seen,
                        })).subscribe(subscriber);
                    }
                    catch (err) {
                        subscriber.error(err);
                    }
                }, delay);
            };
            originalSourceSubscription = source.subscribe(new OperatorSubscriber(subscriber, function (value) {
                timerSubscription === null || timerSubscription === void 0 ? void 0 : timerSubscription.unsubscribe();
                seen++;
                subscriber.next((lastValue = value));
                each > 0 && startTimer(each);
            }, undefined, undefined, function () {
                if (!(timerSubscription === null || timerSubscription === void 0 ? void 0 : timerSubscription.closed)) {
                    timerSubscription === null || timerSubscription === void 0 ? void 0 : timerSubscription.unsubscribe();
                }
                lastValue = null;
            }));
            startTimer(first != null ? (typeof first === 'number' ? first : +first - scheduler.now()) : each);
        });
    }
    function timeoutErrorFactory(info) {
        throw new TimeoutError(info);
    }

    function map$8(project, thisArg) {
        return operate(function (source, subscriber) {
            var index = 0;
            source.subscribe(new OperatorSubscriber(subscriber, function (value) {
                subscriber.next(project.call(thisArg, value, index++));
            }));
        });
    }

    var isArray$9 = Array.isArray;
    function callOrApply(fn, args) {
        return isArray$9(args) ? fn.apply(void 0, __spreadArray([], __read(args))) : fn(args);
    }
    function mapOneOrManyArgs(fn) {
        return map$8(function (args) { return callOrApply(fn, args); });
    }

    function bindCallbackInternals(isNodeStyle, callbackFunc, resultSelector, scheduler) {
        if (resultSelector) {
            if (isScheduler(resultSelector)) {
                scheduler = resultSelector;
            }
            else {
                return function () {
                    var args = [];
                    for (var _i = 0; _i < arguments.length; _i++) {
                        args[_i] = arguments[_i];
                    }
                    return bindCallbackInternals(isNodeStyle, callbackFunc, scheduler)
                        .apply(this, args)
                        .pipe(mapOneOrManyArgs(resultSelector));
                };
            }
        }
        if (scheduler) {
            return function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                return bindCallbackInternals(isNodeStyle, callbackFunc)
                    .apply(this, args)
                    .pipe(subscribeOn(scheduler), observeOn(scheduler));
            };
        }
        return function () {
            var _this = this;
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            var subject = new AsyncSubject();
            var uninitialized = true;
            return new Observable(function (subscriber) {
                var subs = subject.subscribe(subscriber);
                if (uninitialized) {
                    uninitialized = false;
                    var isAsync_1 = false;
                    var isComplete_1 = false;
                    callbackFunc.apply(_this, __spreadArray(__spreadArray([], __read(args)), [
                        function () {
                            var results = [];
                            for (var _i = 0; _i < arguments.length; _i++) {
                                results[_i] = arguments[_i];
                            }
                            if (isNodeStyle) {
                                var err = results.shift();
                                if (err != null) {
                                    subject.error(err);
                                    return;
                                }
                            }
                            subject.next(1 < results.length ? results : results[0]);
                            isComplete_1 = true;
                            if (isAsync_1) {
                                subject.complete();
                            }
                        },
                    ]));
                    if (isComplete_1) {
                        subject.complete();
                    }
                    isAsync_1 = true;
                }
                return subs;
            });
        };
    }

    function bindCallback(callbackFunc, resultSelector, scheduler) {
        return bindCallbackInternals(false, callbackFunc, resultSelector, scheduler);
    }

    function bindNodeCallback(callbackFunc, resultSelector, scheduler) {
        return bindCallbackInternals(true, callbackFunc, resultSelector, scheduler);
    }

    var isArray$8 = Array.isArray;
    var getPrototypeOf = Object.getPrototypeOf, objectProto$4 = Object.prototype, getKeys = Object.keys;
    function argsArgArrayOrObject(args) {
        if (args.length === 1) {
            var first_1 = args[0];
            if (isArray$8(first_1)) {
                return { args: first_1, keys: null };
            }
            if (isPOJO(first_1)) {
                var keys = getKeys(first_1);
                return {
                    args: keys.map(function (key) { return first_1[key]; }),
                    keys: keys,
                };
            }
        }
        return { args: args, keys: null };
    }
    function isPOJO(obj) {
        return obj && typeof obj === 'object' && getPrototypeOf(obj) === objectProto$4;
    }

    function createObject(keys, values) {
        return keys.reduce(function (result, key, i) { return ((result[key] = values[i]), result); }, {});
    }

    function combineLatest$1() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var scheduler = popScheduler(args);
        var resultSelector = popResultSelector(args);
        var _a = argsArgArrayOrObject(args), observables = _a.args, keys = _a.keys;
        if (observables.length === 0) {
            return from$2([], scheduler);
        }
        var result = new Observable(combineLatestInit(observables, scheduler, keys
            ?
                function (values) { return createObject(keys, values); }
            :
                identity$2));
        return resultSelector ? result.pipe(mapOneOrManyArgs(resultSelector)) : result;
    }
    function combineLatestInit(observables, scheduler, valueTransform) {
        if (valueTransform === void 0) { valueTransform = identity$2; }
        return function (subscriber) {
            maybeSchedule(scheduler, function () {
                var length = observables.length;
                var values = new Array(length);
                var active = length;
                var remainingFirstValues = length;
                var _loop_1 = function (i) {
                    maybeSchedule(scheduler, function () {
                        var source = from$2(observables[i], scheduler);
                        var hasFirstValue = false;
                        source.subscribe(new OperatorSubscriber(subscriber, function (value) {
                            values[i] = value;
                            if (!hasFirstValue) {
                                hasFirstValue = true;
                                remainingFirstValues--;
                            }
                            if (!remainingFirstValues) {
                                subscriber.next(valueTransform(values.slice()));
                            }
                        }, function () {
                            if (!--active) {
                                subscriber.complete();
                            }
                        }));
                    }, subscriber);
                };
                for (var i = 0; i < length; i++) {
                    _loop_1(i);
                }
            }, subscriber);
        };
    }
    function maybeSchedule(scheduler, execute, subscription) {
        if (scheduler) {
            executeSchedule(subscription, scheduler, execute);
        }
        else {
            execute();
        }
    }

    function mergeInternals(source, subscriber, project, concurrent, onBeforeNext, expand, innerSubScheduler, additionalTeardown) {
        var buffer = [];
        var active = 0;
        var index = 0;
        var isComplete = false;
        var checkComplete = function () {
            if (isComplete && !buffer.length && !active) {
                subscriber.complete();
            }
        };
        var outerNext = function (value) { return (active < concurrent ? doInnerSub(value) : buffer.push(value)); };
        var doInnerSub = function (value) {
            expand && subscriber.next(value);
            active++;
            var innerComplete = false;
            innerFrom(project(value, index++)).subscribe(new OperatorSubscriber(subscriber, function (innerValue) {
                onBeforeNext === null || onBeforeNext === void 0 ? void 0 : onBeforeNext(innerValue);
                if (expand) {
                    outerNext(innerValue);
                }
                else {
                    subscriber.next(innerValue);
                }
            }, function () {
                innerComplete = true;
            }, undefined, function () {
                if (innerComplete) {
                    try {
                        active--;
                        var _loop_1 = function () {
                            var bufferedValue = buffer.shift();
                            if (innerSubScheduler) {
                                executeSchedule(subscriber, innerSubScheduler, function () { return doInnerSub(bufferedValue); });
                            }
                            else {
                                doInnerSub(bufferedValue);
                            }
                        };
                        while (buffer.length && active < concurrent) {
                            _loop_1();
                        }
                        checkComplete();
                    }
                    catch (err) {
                        subscriber.error(err);
                    }
                }
            }));
        };
        source.subscribe(new OperatorSubscriber(subscriber, outerNext, function () {
            isComplete = true;
            checkComplete();
        }));
        return function () {
            additionalTeardown === null || additionalTeardown === void 0 ? void 0 : additionalTeardown();
        };
    }

    function mergeMap(project, resultSelector, concurrent) {
        if (concurrent === void 0) { concurrent = Infinity; }
        if (isFunction(resultSelector)) {
            return mergeMap(function (a, i) { return map$8(function (b, ii) { return resultSelector(a, b, i, ii); })(innerFrom(project(a, i))); }, concurrent);
        }
        else if (typeof resultSelector === 'number') {
            concurrent = resultSelector;
        }
        return operate(function (source, subscriber) { return mergeInternals(source, subscriber, project, concurrent); });
    }

    function mergeAll(concurrent) {
        if (concurrent === void 0) { concurrent = Infinity; }
        return mergeMap(identity$2, concurrent);
    }

    function concatAll() {
        return mergeAll(1);
    }

    function concat$1() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return concatAll()(from$2(args, popScheduler(args)));
    }

    function defer$1(observableFactory) {
        return new Observable(function (subscriber) {
            innerFrom(observableFactory()).subscribe(subscriber);
        });
    }

    var DEFAULT_CONFIG$1 = {
        connector: function () { return new Subject$1(); },
        resetOnDisconnect: true,
    };
    function connectable(source, config) {
        if (config === void 0) { config = DEFAULT_CONFIG$1; }
        var connection = null;
        var connector = config.connector, _a = config.resetOnDisconnect, resetOnDisconnect = _a === void 0 ? true : _a;
        var subject = connector();
        var result = new Observable(function (subscriber) {
            return subject.subscribe(subscriber);
        });
        result.connect = function () {
            if (!connection || connection.closed) {
                connection = defer$1(function () { return source; }).subscribe(subject);
                if (resetOnDisconnect) {
                    connection.add(function () { return (subject = connector()); });
                }
            }
            return connection;
        };
        return result;
    }

    function forkJoin() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var resultSelector = popResultSelector(args);
        var _a = argsArgArrayOrObject(args), sources = _a.args, keys = _a.keys;
        var result = new Observable(function (subscriber) {
            var length = sources.length;
            if (!length) {
                subscriber.complete();
                return;
            }
            var values = new Array(length);
            var remainingCompletions = length;
            var remainingEmissions = length;
            var _loop_1 = function (sourceIndex) {
                var hasValue = false;
                innerFrom(sources[sourceIndex]).subscribe(new OperatorSubscriber(subscriber, function (value) {
                    if (!hasValue) {
                        hasValue = true;
                        remainingEmissions--;
                    }
                    values[sourceIndex] = value;
                }, function () { return remainingCompletions--; }, undefined, function () {
                    if (!remainingCompletions || !hasValue) {
                        if (!remainingEmissions) {
                            subscriber.next(keys ? createObject(keys, values) : values);
                        }
                        subscriber.complete();
                    }
                }));
            };
            for (var sourceIndex = 0; sourceIndex < length; sourceIndex++) {
                _loop_1(sourceIndex);
            }
        });
        return resultSelector ? result.pipe(mapOneOrManyArgs(resultSelector)) : result;
    }

    var nodeEventEmitterMethods = ['addListener', 'removeListener'];
    var eventTargetMethods = ['addEventListener', 'removeEventListener'];
    var jqueryMethods = ['on', 'off'];
    function fromEvent$1(target, eventName, options, resultSelector) {
        if (isFunction(options)) {
            resultSelector = options;
            options = undefined;
        }
        if (resultSelector) {
            return fromEvent$1(target, eventName, options).pipe(mapOneOrManyArgs(resultSelector));
        }
        var _a = __read(isEventTarget(target)
            ? eventTargetMethods.map(function (methodName) { return function (handler) { return target[methodName](eventName, handler, options); }; })
            :
                isNodeStyleEventEmitter(target)
                    ? nodeEventEmitterMethods.map(toCommonHandlerRegistry(target, eventName))
                    : isJQueryStyleEventEmitter(target)
                        ? jqueryMethods.map(toCommonHandlerRegistry(target, eventName))
                        : [], 2), add = _a[0], remove = _a[1];
        if (!add) {
            if (isArrayLike$4(target)) {
                return mergeMap(function (subTarget) { return fromEvent$1(subTarget, eventName, options); })(innerFrom(target));
            }
        }
        if (!add) {
            throw new TypeError('Invalid event target');
        }
        return new Observable(function (subscriber) {
            var handler = function () {
                var args = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    args[_i] = arguments[_i];
                }
                return subscriber.next(1 < args.length ? args : args[0]);
            };
            add(handler);
            return function () { return remove(handler); };
        });
    }
    function toCommonHandlerRegistry(target, eventName) {
        return function (methodName) { return function (handler) { return target[methodName](eventName, handler); }; };
    }
    function isNodeStyleEventEmitter(target) {
        return isFunction(target.addListener) && isFunction(target.removeListener);
    }
    function isJQueryStyleEventEmitter(target) {
        return isFunction(target.on) && isFunction(target.off);
    }
    function isEventTarget(target) {
        return isFunction(target.addEventListener) && isFunction(target.removeEventListener);
    }

    function fromEventPattern(addHandler, removeHandler, resultSelector) {
        if (resultSelector) {
            return fromEventPattern(addHandler, removeHandler).pipe(mapOneOrManyArgs(resultSelector));
        }
        return new Observable(function (subscriber) {
            var handler = function () {
                var e = [];
                for (var _i = 0; _i < arguments.length; _i++) {
                    e[_i] = arguments[_i];
                }
                return subscriber.next(e.length === 1 ? e[0] : e);
            };
            var retValue = addHandler(handler);
            return isFunction(removeHandler) ? function () { return removeHandler(handler, retValue); } : undefined;
        });
    }

    function generate(initialStateOrOptions, condition, iterate, resultSelectorOrScheduler, scheduler) {
        var _a, _b;
        var resultSelector;
        var initialState;
        if (arguments.length === 1) {
            (_a = initialStateOrOptions, initialState = _a.initialState, condition = _a.condition, iterate = _a.iterate, _b = _a.resultSelector, resultSelector = _b === void 0 ? identity$2 : _b, scheduler = _a.scheduler);
        }
        else {
            initialState = initialStateOrOptions;
            if (!resultSelectorOrScheduler || isScheduler(resultSelectorOrScheduler)) {
                resultSelector = identity$2;
                scheduler = resultSelectorOrScheduler;
            }
            else {
                resultSelector = resultSelectorOrScheduler;
            }
        }
        function gen() {
            var state;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        state = initialState;
                        _a.label = 1;
                    case 1:
                        if (!(!condition || condition(state))) return [3, 4];
                        return [4, resultSelector(state)];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3:
                        state = iterate(state);
                        return [3, 1];
                    case 4: return [2];
                }
            });
        }
        return defer$1((scheduler
            ?
                function () { return scheduleIterable(gen(), scheduler); }
            :
                gen));
    }

    function iif(condition, trueResult, falseResult) {
        return defer$1(function () { return (condition() ? trueResult : falseResult); });
    }

    function timer(dueTime, intervalOrScheduler, scheduler) {
        if (dueTime === void 0) { dueTime = 0; }
        if (scheduler === void 0) { scheduler = async; }
        var intervalDuration = -1;
        if (intervalOrScheduler != null) {
            if (isScheduler(intervalOrScheduler)) {
                scheduler = intervalOrScheduler;
            }
            else {
                intervalDuration = intervalOrScheduler;
            }
        }
        return new Observable(function (subscriber) {
            var due = isValidDate(dueTime) ? +dueTime - scheduler.now() : dueTime;
            if (due < 0) {
                due = 0;
            }
            var n = 0;
            return scheduler.schedule(function () {
                if (!subscriber.closed) {
                    subscriber.next(n++);
                    if (0 <= intervalDuration) {
                        this.schedule(undefined, intervalDuration);
                    }
                    else {
                        subscriber.complete();
                    }
                }
            }, due);
        });
    }

    function interval(period, scheduler) {
        if (period === void 0) { period = 0; }
        if (scheduler === void 0) { scheduler = asyncScheduler; }
        if (period < 0) {
            period = 0;
        }
        return timer(period, period, scheduler);
    }

    function merge$1() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var scheduler = popScheduler(args);
        var concurrent = popNumber(args, Infinity);
        var sources = args;
        return !sources.length
            ?
                EMPTY
            : sources.length === 1
                ?
                    innerFrom(sources[0])
                :
                    mergeAll(concurrent)(from$2(sources, scheduler));
    }

    var NEVER = new Observable(noop$2);
    function never() {
        return NEVER;
    }

    var isArray$7 = Array.isArray;
    function argsOrArgArray(args) {
        return args.length === 1 && isArray$7(args[0]) ? args[0] : args;
    }

    function onErrorResumeNext$1() {
        var sources = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            sources[_i] = arguments[_i];
        }
        var nextSources = argsOrArgArray(sources);
        return operate(function (source, subscriber) {
            var remaining = __spreadArray([source], __read(nextSources));
            var subscribeNext = function () {
                if (!subscriber.closed) {
                    if (remaining.length > 0) {
                        var nextSource = void 0;
                        try {
                            nextSource = innerFrom(remaining.shift());
                        }
                        catch (err) {
                            subscribeNext();
                            return;
                        }
                        var innerSub = new OperatorSubscriber(subscriber, undefined, noop$2, noop$2);
                        subscriber.add(nextSource.subscribe(innerSub));
                        innerSub.add(subscribeNext);
                    }
                    else {
                        subscriber.complete();
                    }
                }
            };
            subscribeNext();
        });
    }

    function onErrorResumeNext() {
        var sources = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            sources[_i] = arguments[_i];
        }
        return onErrorResumeNext$1(argsOrArgArray(sources))(EMPTY);
    }

    function pairs(obj, scheduler) {
        return from$2(Object.entries(obj), scheduler);
    }

    function not(pred, thisArg) {
        return function (value, index) { return !pred.call(thisArg, value, index); };
    }

    function filter$5(predicate, thisArg) {
        return operate(function (source, subscriber) {
            var index = 0;
            source.subscribe(new OperatorSubscriber(subscriber, function (value) { return predicate.call(thisArg, value, index++) && subscriber.next(value); }));
        });
    }

    function partition$1(source, predicate, thisArg) {
        return [filter$5(predicate, thisArg)(innerFrom(source)), filter$5(not(predicate, thisArg))(innerFrom(source))];
    }

    function race$1() {
        var sources = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            sources[_i] = arguments[_i];
        }
        sources = argsOrArgArray(sources);
        return sources.length === 1 ? innerFrom(sources[0]) : new Observable(raceInit(sources));
    }
    function raceInit(sources) {
        return function (subscriber) {
            var subscriptions = [];
            var _loop_1 = function (i) {
                subscriptions.push(innerFrom(sources[i]).subscribe(new OperatorSubscriber(subscriber, function (value) {
                    if (subscriptions) {
                        for (var s = 0; s < subscriptions.length; s++) {
                            s !== i && subscriptions[s].unsubscribe();
                        }
                        subscriptions = null;
                    }
                    subscriber.next(value);
                })));
            };
            for (var i = 0; subscriptions && !subscriber.closed && i < sources.length; i++) {
                _loop_1(i);
            }
        };
    }

    function range$1(start, count, scheduler) {
        if (count == null) {
            count = start;
            start = 0;
        }
        if (count <= 0) {
            return EMPTY;
        }
        var end = count + start;
        return new Observable(scheduler
            ?
                function (subscriber) {
                    var n = start;
                    return scheduler.schedule(function () {
                        if (n < end) {
                            subscriber.next(n++);
                            this.schedule();
                        }
                        else {
                            subscriber.complete();
                        }
                    });
                }
            :
                function (subscriber) {
                    var n = start;
                    while (n < end && !subscriber.closed) {
                        subscriber.next(n++);
                    }
                    subscriber.complete();
                });
    }

    function using(resourceFactory, observableFactory) {
        return new Observable(function (subscriber) {
            var resource = resourceFactory();
            var result = observableFactory(resource);
            var source = result ? innerFrom(result) : EMPTY;
            source.subscribe(subscriber);
            return function () {
                if (resource) {
                    resource.unsubscribe();
                }
            };
        });
    }

    function zip$1() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var resultSelector = popResultSelector(args);
        var sources = argsOrArgArray(args);
        return sources.length
            ? new Observable(function (subscriber) {
                var buffers = sources.map(function () { return []; });
                var completed = sources.map(function () { return false; });
                subscriber.add(function () {
                    buffers = completed = null;
                });
                var _loop_1 = function (sourceIndex) {
                    innerFrom(sources[sourceIndex]).subscribe(new OperatorSubscriber(subscriber, function (value) {
                        buffers[sourceIndex].push(value);
                        if (buffers.every(function (buffer) { return buffer.length; })) {
                            var result = buffers.map(function (buffer) { return buffer.shift(); });
                            subscriber.next(resultSelector ? resultSelector.apply(void 0, __spreadArray([], __read(result))) : result);
                            if (buffers.some(function (buffer, i) { return !buffer.length && completed[i]; })) {
                                subscriber.complete();
                            }
                        }
                    }, function () {
                        completed[sourceIndex] = true;
                        !buffers[sourceIndex].length && subscriber.complete();
                    }));
                };
                for (var sourceIndex = 0; !subscriber.closed && sourceIndex < sources.length; sourceIndex++) {
                    _loop_1(sourceIndex);
                }
                return function () {
                    buffers = completed = null;
                };
            })
            : EMPTY;
    }

    function audit(durationSelector) {
        return operate(function (source, subscriber) {
            var hasValue = false;
            var lastValue = null;
            var durationSubscriber = null;
            var isComplete = false;
            var endDuration = function () {
                durationSubscriber === null || durationSubscriber === void 0 ? void 0 : durationSubscriber.unsubscribe();
                durationSubscriber = null;
                if (hasValue) {
                    hasValue = false;
                    var value = lastValue;
                    lastValue = null;
                    subscriber.next(value);
                }
                isComplete && subscriber.complete();
            };
            var cleanupDuration = function () {
                durationSubscriber = null;
                isComplete && subscriber.complete();
            };
            source.subscribe(new OperatorSubscriber(subscriber, function (value) {
                hasValue = true;
                lastValue = value;
                if (!durationSubscriber) {
                    innerFrom(durationSelector(value)).subscribe((durationSubscriber = new OperatorSubscriber(subscriber, endDuration, cleanupDuration)));
                }
            }, function () {
                isComplete = true;
                (!hasValue || !durationSubscriber || durationSubscriber.closed) && subscriber.complete();
            }));
        });
    }

    function auditTime(duration, scheduler) {
        if (scheduler === void 0) { scheduler = async; }
        return audit(function () { return timer(duration, scheduler); });
    }

    function buffer$1(closingNotifier) {
        return operate(function (source, subscriber) {
            var currentBuffer = [];
            source.subscribe(new OperatorSubscriber(subscriber, function (value) { return currentBuffer.push(value); }, function () {
                subscriber.next(currentBuffer);
                subscriber.complete();
            }));
            closingNotifier.subscribe(new OperatorSubscriber(subscriber, function () {
                var b = currentBuffer;
                currentBuffer = [];
                subscriber.next(b);
            }, noop$2));
            return function () {
                currentBuffer = null;
            };
        });
    }

    function bufferCount(bufferSize, startBufferEvery) {
        if (startBufferEvery === void 0) { startBufferEvery = null; }
        startBufferEvery = startBufferEvery !== null && startBufferEvery !== void 0 ? startBufferEvery : bufferSize;
        return operate(function (source, subscriber) {
            var buffers = [];
            var count = 0;
            source.subscribe(new OperatorSubscriber(subscriber, function (value) {
                var e_1, _a, e_2, _b;
                var toEmit = null;
                if (count++ % startBufferEvery === 0) {
                    buffers.push([]);
                }
                try {
                    for (var buffers_1 = __values(buffers), buffers_1_1 = buffers_1.next(); !buffers_1_1.done; buffers_1_1 = buffers_1.next()) {
                        var buffer = buffers_1_1.value;
                        buffer.push(value);
                        if (bufferSize <= buffer.length) {
                            toEmit = toEmit !== null && toEmit !== void 0 ? toEmit : [];
                            toEmit.push(buffer);
                        }
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (buffers_1_1 && !buffers_1_1.done && (_a = buffers_1.return)) _a.call(buffers_1);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
                if (toEmit) {
                    try {
                        for (var toEmit_1 = __values(toEmit), toEmit_1_1 = toEmit_1.next(); !toEmit_1_1.done; toEmit_1_1 = toEmit_1.next()) {
                            var buffer = toEmit_1_1.value;
                            arrRemove(buffers, buffer);
                            subscriber.next(buffer);
                        }
                    }
                    catch (e_2_1) { e_2 = { error: e_2_1 }; }
                    finally {
                        try {
                            if (toEmit_1_1 && !toEmit_1_1.done && (_b = toEmit_1.return)) _b.call(toEmit_1);
                        }
                        finally { if (e_2) throw e_2.error; }
                    }
                }
            }, function () {
                var e_3, _a;
                try {
                    for (var buffers_2 = __values(buffers), buffers_2_1 = buffers_2.next(); !buffers_2_1.done; buffers_2_1 = buffers_2.next()) {
                        var buffer = buffers_2_1.value;
                        subscriber.next(buffer);
                    }
                }
                catch (e_3_1) { e_3 = { error: e_3_1 }; }
                finally {
                    try {
                        if (buffers_2_1 && !buffers_2_1.done && (_a = buffers_2.return)) _a.call(buffers_2);
                    }
                    finally { if (e_3) throw e_3.error; }
                }
                subscriber.complete();
            }, undefined, function () {
                buffers = null;
            }));
        });
    }

    function bufferTime(bufferTimeSpan) {
        var _a, _b;
        var otherArgs = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            otherArgs[_i - 1] = arguments[_i];
        }
        var scheduler = (_a = popScheduler(otherArgs)) !== null && _a !== void 0 ? _a : asyncScheduler;
        var bufferCreationInterval = (_b = otherArgs[0]) !== null && _b !== void 0 ? _b : null;
        var maxBufferSize = otherArgs[1] || Infinity;
        return operate(function (source, subscriber) {
            var bufferRecords = [];
            var restartOnEmit = false;
            var emit = function (record) {
                var buffer = record.buffer, subs = record.subs;
                subs.unsubscribe();
                arrRemove(bufferRecords, record);
                subscriber.next(buffer);
                restartOnEmit && startBuffer();
            };
            var startBuffer = function () {
                if (bufferRecords) {
                    var subs = new Subscription();
                    subscriber.add(subs);
                    var buffer = [];
                    var record_1 = {
                        buffer: buffer,
                        subs: subs,
                    };
                    bufferRecords.push(record_1);
                    executeSchedule(subs, scheduler, function () { return emit(record_1); }, bufferTimeSpan);
                }
            };
            if (bufferCreationInterval !== null && bufferCreationInterval >= 0) {
                executeSchedule(subscriber, scheduler, startBuffer, bufferCreationInterval, true);
            }
            else {
                restartOnEmit = true;
            }
            startBuffer();
            var bufferTimeSubscriber = new OperatorSubscriber(subscriber, function (value) {
                var e_1, _a;
                var recordsCopy = bufferRecords.slice();
                try {
                    for (var recordsCopy_1 = __values(recordsCopy), recordsCopy_1_1 = recordsCopy_1.next(); !recordsCopy_1_1.done; recordsCopy_1_1 = recordsCopy_1.next()) {
                        var record = recordsCopy_1_1.value;
                        var buffer = record.buffer;
                        buffer.push(value);
                        maxBufferSize <= buffer.length && emit(record);
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (recordsCopy_1_1 && !recordsCopy_1_1.done && (_a = recordsCopy_1.return)) _a.call(recordsCopy_1);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
            }, function () {
                while (bufferRecords === null || bufferRecords === void 0 ? void 0 : bufferRecords.length) {
                    subscriber.next(bufferRecords.shift().buffer);
                }
                bufferTimeSubscriber === null || bufferTimeSubscriber === void 0 ? void 0 : bufferTimeSubscriber.unsubscribe();
                subscriber.complete();
                subscriber.unsubscribe();
            }, undefined, function () { return (bufferRecords = null); });
            source.subscribe(bufferTimeSubscriber);
        });
    }

    function bufferToggle(openings, closingSelector) {
        return operate(function (source, subscriber) {
            var buffers = [];
            innerFrom(openings).subscribe(new OperatorSubscriber(subscriber, function (openValue) {
                var buffer = [];
                buffers.push(buffer);
                var closingSubscription = new Subscription();
                var emitBuffer = function () {
                    arrRemove(buffers, buffer);
                    subscriber.next(buffer);
                    closingSubscription.unsubscribe();
                };
                closingSubscription.add(innerFrom(closingSelector(openValue)).subscribe(new OperatorSubscriber(subscriber, emitBuffer, noop$2)));
            }, noop$2));
            source.subscribe(new OperatorSubscriber(subscriber, function (value) {
                var e_1, _a;
                try {
                    for (var buffers_1 = __values(buffers), buffers_1_1 = buffers_1.next(); !buffers_1_1.done; buffers_1_1 = buffers_1.next()) {
                        var buffer = buffers_1_1.value;
                        buffer.push(value);
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (buffers_1_1 && !buffers_1_1.done && (_a = buffers_1.return)) _a.call(buffers_1);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
            }, function () {
                while (buffers.length > 0) {
                    subscriber.next(buffers.shift());
                }
                subscriber.complete();
            }));
        });
    }

    function bufferWhen(closingSelector) {
        return operate(function (source, subscriber) {
            var buffer = null;
            var closingSubscriber = null;
            var openBuffer = function () {
                closingSubscriber === null || closingSubscriber === void 0 ? void 0 : closingSubscriber.unsubscribe();
                var b = buffer;
                buffer = [];
                b && subscriber.next(b);
                innerFrom(closingSelector()).subscribe((closingSubscriber = new OperatorSubscriber(subscriber, openBuffer, noop$2)));
            };
            openBuffer();
            source.subscribe(new OperatorSubscriber(subscriber, function (value) { return buffer === null || buffer === void 0 ? void 0 : buffer.push(value); }, function () {
                buffer && subscriber.next(buffer);
                subscriber.complete();
            }, undefined, function () { return (buffer = closingSubscriber = null); }));
        });
    }

    function catchError(selector) {
        return operate(function (source, subscriber) {
            var innerSub = null;
            var syncUnsub = false;
            var handledResult;
            innerSub = source.subscribe(new OperatorSubscriber(subscriber, undefined, undefined, function (err) {
                handledResult = innerFrom(selector(err, catchError(selector)(source)));
                if (innerSub) {
                    innerSub.unsubscribe();
                    innerSub = null;
                    handledResult.subscribe(subscriber);
                }
                else {
                    syncUnsub = true;
                }
            }));
            if (syncUnsub) {
                innerSub.unsubscribe();
                innerSub = null;
                handledResult.subscribe(subscriber);
            }
        });
    }

    function scanInternals(accumulator, seed, hasSeed, emitOnNext, emitBeforeComplete) {
        return function (source, subscriber) {
            var hasState = hasSeed;
            var state = seed;
            var index = 0;
            source.subscribe(new OperatorSubscriber(subscriber, function (value) {
                var i = index++;
                state = hasState
                    ?
                        accumulator(state, value, i)
                    :
                        ((hasState = true), value);
                emitOnNext && subscriber.next(state);
            }, emitBeforeComplete &&
                (function () {
                    hasState && subscriber.next(state);
                    subscriber.complete();
                })));
        };
    }

    function reduce$1(accumulator, seed) {
        return operate(scanInternals(accumulator, seed, arguments.length >= 2, false, true));
    }

    var arrReducer = function (arr, value) { return (arr.push(value), arr); };
    function toArray() {
        return operate(function (source, subscriber) {
            reduce$1(arrReducer, [])(source).subscribe(subscriber);
        });
    }

    function joinAllInternals(joinFn, project) {
        return pipe$1(toArray(), mergeMap(function (sources) { return joinFn(sources); }), project ? mapOneOrManyArgs(project) : identity$2);
    }

    function combineLatestAll(project) {
        return joinAllInternals(combineLatest$1, project);
    }

    var combineAll = combineLatestAll;

    function combineLatest() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var resultSelector = popResultSelector(args);
        return resultSelector
            ? pipe$1(combineLatest.apply(void 0, __spreadArray([], __read(args))), mapOneOrManyArgs(resultSelector))
            : operate(function (source, subscriber) {
                combineLatestInit(__spreadArray([source], __read(argsOrArgArray(args))))(subscriber);
            });
    }

    function combineLatestWith() {
        var otherSources = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            otherSources[_i] = arguments[_i];
        }
        return combineLatest.apply(void 0, __spreadArray([], __read(otherSources)));
    }

    function concatMap$3(project, resultSelector) {
        return isFunction(resultSelector) ? mergeMap(project, resultSelector, 1) : mergeMap(project, 1);
    }

    function concatMapTo(innerObservable, resultSelector) {
        return isFunction(resultSelector) ? concatMap$3(function () { return innerObservable; }, resultSelector) : concatMap$3(function () { return innerObservable; });
    }

    function concat() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var scheduler = popScheduler(args);
        return operate(function (source, subscriber) {
            concatAll()(from$2(__spreadArray([source], __read(args)), scheduler)).subscribe(subscriber);
        });
    }

    function concatWith() {
        var otherSources = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            otherSources[_i] = arguments[_i];
        }
        return concat.apply(void 0, __spreadArray([], __read(otherSources)));
    }

    function fromSubscribable(subscribable) {
        return new Observable(function (subscriber) { return subscribable.subscribe(subscriber); });
    }

    var DEFAULT_CONFIG = {
        connector: function () { return new Subject$1(); },
    };
    function connect(selector, config) {
        if (config === void 0) { config = DEFAULT_CONFIG; }
        var connector = config.connector;
        return operate(function (source, subscriber) {
            var subject = connector();
            from$2(selector(fromSubscribable(subject))).subscribe(subscriber);
            subscriber.add(source.subscribe(subject));
        });
    }

    function count(predicate) {
        return reduce$1(function (total, value, i) { return (!predicate || predicate(value, i) ? total + 1 : total); }, 0);
    }

    function debounce(durationSelector) {
        return operate(function (source, subscriber) {
            var hasValue = false;
            var lastValue = null;
            var durationSubscriber = null;
            var emit = function () {
                durationSubscriber === null || durationSubscriber === void 0 ? void 0 : durationSubscriber.unsubscribe();
                durationSubscriber = null;
                if (hasValue) {
                    hasValue = false;
                    var value = lastValue;
                    lastValue = null;
                    subscriber.next(value);
                }
            };
            source.subscribe(new OperatorSubscriber(subscriber, function (value) {
                durationSubscriber === null || durationSubscriber === void 0 ? void 0 : durationSubscriber.unsubscribe();
                hasValue = true;
                lastValue = value;
                durationSubscriber = new OperatorSubscriber(subscriber, emit, noop$2);
                innerFrom(durationSelector(value)).subscribe(durationSubscriber);
            }, function () {
                emit();
                subscriber.complete();
            }, undefined, function () {
                lastValue = durationSubscriber = null;
            }));
        });
    }

    function debounceTime(dueTime, scheduler) {
        if (scheduler === void 0) { scheduler = asyncScheduler; }
        return operate(function (source, subscriber) {
            var activeTask = null;
            var lastValue = null;
            var lastTime = null;
            var emit = function () {
                if (activeTask) {
                    activeTask.unsubscribe();
                    activeTask = null;
                    var value = lastValue;
                    lastValue = null;
                    subscriber.next(value);
                }
            };
            function emitWhenIdle() {
                var targetTime = lastTime + dueTime;
                var now = scheduler.now();
                if (now < targetTime) {
                    activeTask = this.schedule(undefined, targetTime - now);
                    subscriber.add(activeTask);
                    return;
                }
                emit();
            }
            source.subscribe(new OperatorSubscriber(subscriber, function (value) {
                lastValue = value;
                lastTime = scheduler.now();
                if (!activeTask) {
                    activeTask = scheduler.schedule(emitWhenIdle, dueTime);
                    subscriber.add(activeTask);
                }
            }, function () {
                emit();
                subscriber.complete();
            }, undefined, function () {
                lastValue = activeTask = null;
            }));
        });
    }

    function defaultIfEmpty(defaultValue) {
        return operate(function (source, subscriber) {
            var hasValue = false;
            source.subscribe(new OperatorSubscriber(subscriber, function (value) {
                hasValue = true;
                subscriber.next(value);
            }, function () {
                if (!hasValue) {
                    subscriber.next(defaultValue);
                }
                subscriber.complete();
            }));
        });
    }

    function take$3(count) {
        return count <= 0
            ?
                function () { return EMPTY; }
            : operate(function (source, subscriber) {
                var seen = 0;
                source.subscribe(new OperatorSubscriber(subscriber, function (value) {
                    if (++seen <= count) {
                        subscriber.next(value);
                        if (count <= seen) {
                            subscriber.complete();
                        }
                    }
                }));
            });
    }

    function ignoreElements() {
        return operate(function (source, subscriber) {
            source.subscribe(new OperatorSubscriber(subscriber, noop$2));
        });
    }

    function mapTo(value) {
        return map$8(function () { return value; });
    }

    function delayWhen(delayDurationSelector, subscriptionDelay) {
        if (subscriptionDelay) {
            return function (source) {
                return concat$1(subscriptionDelay.pipe(take$3(1), ignoreElements()), source.pipe(delayWhen(delayDurationSelector)));
            };
        }
        return mergeMap(function (value, index) { return delayDurationSelector(value, index).pipe(take$3(1), mapTo(value)); });
    }

    function delay(due, scheduler) {
        if (scheduler === void 0) { scheduler = asyncScheduler; }
        var duration = timer(due, scheduler);
        return delayWhen(function () { return duration; });
    }

    function dematerialize() {
        return operate(function (source, subscriber) {
            source.subscribe(new OperatorSubscriber(subscriber, function (notification) { return observeNotification(notification, subscriber); }));
        });
    }

    function distinct(keySelector, flushes) {
        return operate(function (source, subscriber) {
            var distinctKeys = new Set();
            source.subscribe(new OperatorSubscriber(subscriber, function (value) {
                var key = keySelector ? keySelector(value) : value;
                if (!distinctKeys.has(key)) {
                    distinctKeys.add(key);
                    subscriber.next(value);
                }
            }));
            flushes === null || flushes === void 0 ? void 0 : flushes.subscribe(new OperatorSubscriber(subscriber, function () { return distinctKeys.clear(); }, noop$2));
        });
    }

    function distinctUntilChanged(comparator, keySelector) {
        if (keySelector === void 0) { keySelector = identity$2; }
        comparator = comparator !== null && comparator !== void 0 ? comparator : defaultCompare;
        return operate(function (source, subscriber) {
            var previousKey;
            var first = true;
            source.subscribe(new OperatorSubscriber(subscriber, function (value) {
                var currentKey = keySelector(value);
                if (first || !comparator(previousKey, currentKey)) {
                    first = false;
                    previousKey = currentKey;
                    subscriber.next(value);
                }
            }));
        });
    }
    function defaultCompare(a, b) {
        return a === b;
    }

    function distinctUntilKeyChanged(key, compare) {
        return distinctUntilChanged(function (x, y) { return compare ? compare(x[key], y[key]) : x[key] === y[key]; });
    }

    function throwIfEmpty(errorFactory) {
        if (errorFactory === void 0) { errorFactory = defaultErrorFactory; }
        return operate(function (source, subscriber) {
            var hasValue = false;
            source.subscribe(new OperatorSubscriber(subscriber, function (value) {
                hasValue = true;
                subscriber.next(value);
            }, function () { return (hasValue ? subscriber.complete() : subscriber.error(errorFactory())); }));
        });
    }
    function defaultErrorFactory() {
        return new EmptyError();
    }

    function elementAt(index, defaultValue) {
        if (index < 0) {
            throw new ArgumentOutOfRangeError();
        }
        var hasDefaultValue = arguments.length >= 2;
        return function (source) {
            return source.pipe(filter$5(function (v, i) { return i === index; }), take$3(1), hasDefaultValue ? defaultIfEmpty(defaultValue) : throwIfEmpty(function () { return new ArgumentOutOfRangeError(); }));
        };
    }

    function endWith() {
        var values = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            values[_i] = arguments[_i];
        }
        return function (source) { return concat$1(source, of$2.apply(void 0, __spreadArray([], __read(values)))); };
    }

    function every(predicate, thisArg) {
        return operate(function (source, subscriber) {
            var index = 0;
            source.subscribe(new OperatorSubscriber(subscriber, function (value) {
                if (!predicate.call(thisArg, value, index++, source)) {
                    subscriber.next(false);
                    subscriber.complete();
                }
            }, function () {
                subscriber.next(true);
                subscriber.complete();
            }));
        });
    }

    function exhaustAll() {
        return operate(function (source, subscriber) {
            var isComplete = false;
            var innerSub = null;
            source.subscribe(new OperatorSubscriber(subscriber, function (inner) {
                if (!innerSub) {
                    innerSub = innerFrom(inner).subscribe(new OperatorSubscriber(subscriber, undefined, function () {
                        innerSub = null;
                        isComplete && subscriber.complete();
                    }));
                }
            }, function () {
                isComplete = true;
                !innerSub && subscriber.complete();
            }));
        });
    }

    var exhaust = exhaustAll;

    function exhaustMap(project, resultSelector) {
        if (resultSelector) {
            return function (source) {
                return source.pipe(exhaustMap(function (a, i) { return innerFrom(project(a, i)).pipe(map$8(function (b, ii) { return resultSelector(a, b, i, ii); })); }));
            };
        }
        return operate(function (source, subscriber) {
            var index = 0;
            var innerSub = null;
            var isComplete = false;
            source.subscribe(new OperatorSubscriber(subscriber, function (outerValue) {
                if (!innerSub) {
                    innerSub = new OperatorSubscriber(subscriber, undefined, function () {
                        innerSub = null;
                        isComplete && subscriber.complete();
                    });
                    innerFrom(project(outerValue, index++)).subscribe(innerSub);
                }
            }, function () {
                isComplete = true;
                !innerSub && subscriber.complete();
            }));
        });
    }

    function expand$3(project, concurrent, scheduler) {
        if (concurrent === void 0) { concurrent = Infinity; }
        concurrent = (concurrent || 0) < 1 ? Infinity : concurrent;
        return operate(function (source, subscriber) {
            return mergeInternals(source, subscriber, project, concurrent, undefined, true, scheduler);
        });
    }

    function finalize(callback) {
        return operate(function (source, subscriber) {
            try {
                source.subscribe(subscriber);
            }
            finally {
                subscriber.add(callback);
            }
        });
    }

    function find$1(predicate, thisArg) {
        return operate(createFind$2(predicate, thisArg, 'value'));
    }
    function createFind$2(predicate, thisArg, emit) {
        var findIndex = emit === 'index';
        return function (source, subscriber) {
            var index = 0;
            source.subscribe(new OperatorSubscriber(subscriber, function (value) {
                var i = index++;
                if (predicate.call(thisArg, value, i, source)) {
                    subscriber.next(findIndex ? i : value);
                    subscriber.complete();
                }
            }, function () {
                subscriber.next(findIndex ? -1 : undefined);
                subscriber.complete();
            }));
        };
    }

    function findIndex$2(predicate, thisArg) {
        return operate(createFind$2(predicate, thisArg, 'index'));
    }

    function first(predicate, defaultValue) {
        var hasDefaultValue = arguments.length >= 2;
        return function (source) {
            return source.pipe(predicate ? filter$5(function (v, i) { return predicate(v, i, source); }) : identity$2, take$3(1), hasDefaultValue ? defaultIfEmpty(defaultValue) : throwIfEmpty(function () { return new EmptyError(); }));
        };
    }

    function groupBy(keySelector, elementOrOptions, duration, connector) {
        return operate(function (source, subscriber) {
            var element;
            if (!elementOrOptions || typeof elementOrOptions === 'function') {
                element = elementOrOptions;
            }
            else {
                (duration = elementOrOptions.duration, element = elementOrOptions.element, connector = elementOrOptions.connector);
            }
            var groups = new Map();
            var notify = function (cb) {
                groups.forEach(cb);
                cb(subscriber);
            };
            var handleError = function (err) { return notify(function (consumer) { return consumer.error(err); }); };
            var groupBySourceSubscriber = new GroupBySubscriber(subscriber, function (value) {
                try {
                    var key_1 = keySelector(value);
                    var group_1 = groups.get(key_1);
                    if (!group_1) {
                        groups.set(key_1, (group_1 = connector ? connector() : new Subject$1()));
                        var grouped = createGroupedObservable(key_1, group_1);
                        subscriber.next(grouped);
                        if (duration) {
                            var durationSubscriber_1 = new OperatorSubscriber(group_1, function () {
                                group_1.complete();
                                durationSubscriber_1 === null || durationSubscriber_1 === void 0 ? void 0 : durationSubscriber_1.unsubscribe();
                            }, undefined, undefined, function () { return groups.delete(key_1); });
                            groupBySourceSubscriber.add(innerFrom(duration(grouped)).subscribe(durationSubscriber_1));
                        }
                    }
                    group_1.next(element ? element(value) : value);
                }
                catch (err) {
                    handleError(err);
                }
            }, function () { return notify(function (consumer) { return consumer.complete(); }); }, handleError, function () { return groups.clear(); });
            source.subscribe(groupBySourceSubscriber);
            function createGroupedObservable(key, groupSubject) {
                var result = new Observable(function (groupSubscriber) {
                    groupBySourceSubscriber.activeGroups++;
                    var innerSub = groupSubject.subscribe(groupSubscriber);
                    return function () {
                        innerSub.unsubscribe();
                        --groupBySourceSubscriber.activeGroups === 0 &&
                            groupBySourceSubscriber.teardownAttempted &&
                            groupBySourceSubscriber.unsubscribe();
                    };
                });
                result.key = key;
                return result;
            }
        });
    }
    var GroupBySubscriber = (function (_super) {
        __extends$4(GroupBySubscriber, _super);
        function GroupBySubscriber() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.activeGroups = 0;
            _this.teardownAttempted = false;
            return _this;
        }
        GroupBySubscriber.prototype.unsubscribe = function () {
            this.teardownAttempted = true;
            this.activeGroups === 0 && _super.prototype.unsubscribe.call(this);
        };
        return GroupBySubscriber;
    }(OperatorSubscriber));

    function isEmpty() {
        return operate(function (source, subscriber) {
            source.subscribe(new OperatorSubscriber(subscriber, function () {
                subscriber.next(false);
                subscriber.complete();
            }, function () {
                subscriber.next(true);
                subscriber.complete();
            }));
        });
    }

    function takeLast(count) {
        return count <= 0
            ? function () { return EMPTY; }
            : operate(function (source, subscriber) {
                var buffer = [];
                source.subscribe(new OperatorSubscriber(subscriber, function (value) {
                    buffer.push(value);
                    count < buffer.length && buffer.shift();
                }, function () {
                    var e_1, _a;
                    try {
                        for (var buffer_1 = __values(buffer), buffer_1_1 = buffer_1.next(); !buffer_1_1.done; buffer_1_1 = buffer_1.next()) {
                            var value = buffer_1_1.value;
                            subscriber.next(value);
                        }
                    }
                    catch (e_1_1) { e_1 = { error: e_1_1 }; }
                    finally {
                        try {
                            if (buffer_1_1 && !buffer_1_1.done && (_a = buffer_1.return)) _a.call(buffer_1);
                        }
                        finally { if (e_1) throw e_1.error; }
                    }
                    subscriber.complete();
                }, undefined, function () {
                    buffer = null;
                }));
            });
    }

    function last(predicate, defaultValue) {
        var hasDefaultValue = arguments.length >= 2;
        return function (source) {
            return source.pipe(predicate ? filter$5(function (v, i) { return predicate(v, i, source); }) : identity$2, takeLast(1), hasDefaultValue ? defaultIfEmpty(defaultValue) : throwIfEmpty(function () { return new EmptyError(); }));
        };
    }

    function materialize() {
        return operate(function (source, subscriber) {
            source.subscribe(new OperatorSubscriber(subscriber, function (value) {
                subscriber.next(Notification.createNext(value));
            }, function () {
                subscriber.next(Notification.createComplete());
                subscriber.complete();
            }, function (err) {
                subscriber.next(Notification.createError(err));
                subscriber.complete();
            }));
        });
    }

    function max(comparer) {
        return reduce$1(isFunction(comparer) ? function (x, y) { return (comparer(x, y) > 0 ? x : y); } : function (x, y) { return (x > y ? x : y); });
    }

    var flatMap$2 = mergeMap;

    function mergeMapTo(innerObservable, resultSelector, concurrent) {
        if (concurrent === void 0) { concurrent = Infinity; }
        if (isFunction(resultSelector)) {
            return mergeMap(function () { return innerObservable; }, resultSelector, concurrent);
        }
        if (typeof resultSelector === 'number') {
            concurrent = resultSelector;
        }
        return mergeMap(function () { return innerObservable; }, concurrent);
    }

    function mergeScan(accumulator, seed, concurrent) {
        if (concurrent === void 0) { concurrent = Infinity; }
        return operate(function (source, subscriber) {
            var state = seed;
            return mergeInternals(source, subscriber, function (value, index) { return accumulator(state, value, index); }, concurrent, function (value) {
                state = value;
            }, false, undefined, function () { return (state = null); });
        });
    }

    function merge() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var scheduler = popScheduler(args);
        var concurrent = popNumber(args, Infinity);
        args = argsOrArgArray(args);
        return operate(function (source, subscriber) {
            mergeAll(concurrent)(from$2(__spreadArray([source], __read(args)), scheduler)).subscribe(subscriber);
        });
    }

    function mergeWith() {
        var otherSources = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            otherSources[_i] = arguments[_i];
        }
        return merge.apply(void 0, __spreadArray([], __read(otherSources)));
    }

    function min(comparer) {
        return reduce$1(isFunction(comparer) ? function (x, y) { return (comparer(x, y) < 0 ? x : y); } : function (x, y) { return (x < y ? x : y); });
    }

    function multicast(subjectOrSubjectFactory, selector) {
        var subjectFactory = isFunction(subjectOrSubjectFactory) ? subjectOrSubjectFactory : function () { return subjectOrSubjectFactory; };
        if (isFunction(selector)) {
            return connect(selector, {
                connector: subjectFactory,
            });
        }
        return function (source) { return new ConnectableObservable(source, subjectFactory); };
    }

    function pairwise() {
        return operate(function (source, subscriber) {
            var prev;
            var hasPrev = false;
            source.subscribe(new OperatorSubscriber(subscriber, function (value) {
                var p = prev;
                prev = value;
                hasPrev && subscriber.next([p, value]);
                hasPrev = true;
            }));
        });
    }

    function pluck() {
        var properties = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            properties[_i] = arguments[_i];
        }
        var length = properties.length;
        if (length === 0) {
            throw new Error('list of properties cannot be empty.');
        }
        return map$8(function (x) {
            var currentProp = x;
            for (var i = 0; i < length; i++) {
                var p = currentProp === null || currentProp === void 0 ? void 0 : currentProp[properties[i]];
                if (typeof p !== 'undefined') {
                    currentProp = p;
                }
                else {
                    return undefined;
                }
            }
            return currentProp;
        });
    }

    function publish$1(selector) {
        return selector ? function (source) { return connect(selector)(source); } : function (source) { return multicast(new Subject$1())(source); };
    }

    function publishBehavior(initialValue) {
        return function (source) {
            var subject = new BehaviorSubject(initialValue);
            return new ConnectableObservable(source, function () { return subject; });
        };
    }

    function publishLast() {
        return function (source) {
            var subject = new AsyncSubject();
            return new ConnectableObservable(source, function () { return subject; });
        };
    }

    function publishReplay(bufferSize, windowTime, selectorOrScheduler, timestampProvider) {
        if (selectorOrScheduler && !isFunction(selectorOrScheduler)) {
            timestampProvider = selectorOrScheduler;
        }
        var selector = isFunction(selectorOrScheduler) ? selectorOrScheduler : undefined;
        return function (source) { return multicast(new ReplaySubject(bufferSize, windowTime, timestampProvider), selector)(source); };
    }

    function raceWith() {
        var otherSources = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            otherSources[_i] = arguments[_i];
        }
        return !otherSources.length
            ? identity$2
            : operate(function (source, subscriber) {
                raceInit(__spreadArray([source], __read(otherSources)))(subscriber);
            });
    }

    function repeat(count) {
        if (count === void 0) { count = Infinity; }
        return count <= 0
            ? function () { return EMPTY; }
            : operate(function (source, subscriber) {
                var soFar = 0;
                var innerSub;
                var subscribeForRepeat = function () {
                    var syncUnsub = false;
                    innerSub = source.subscribe(new OperatorSubscriber(subscriber, undefined, function () {
                        if (++soFar < count) {
                            if (innerSub) {
                                innerSub.unsubscribe();
                                innerSub = null;
                                subscribeForRepeat();
                            }
                            else {
                                syncUnsub = true;
                            }
                        }
                        else {
                            subscriber.complete();
                        }
                    }));
                    if (syncUnsub) {
                        innerSub.unsubscribe();
                        innerSub = null;
                        subscribeForRepeat();
                    }
                };
                subscribeForRepeat();
            });
    }

    function repeatWhen(notifier) {
        return operate(function (source, subscriber) {
            var innerSub;
            var syncResub = false;
            var completions$;
            var isNotifierComplete = false;
            var isMainComplete = false;
            var checkComplete = function () { return isMainComplete && isNotifierComplete && (subscriber.complete(), true); };
            var getCompletionSubject = function () {
                if (!completions$) {
                    completions$ = new Subject$1();
                    notifier(completions$).subscribe(new OperatorSubscriber(subscriber, function () {
                        if (innerSub) {
                            subscribeForRepeatWhen();
                        }
                        else {
                            syncResub = true;
                        }
                    }, function () {
                        isNotifierComplete = true;
                        checkComplete();
                    }));
                }
                return completions$;
            };
            var subscribeForRepeatWhen = function () {
                isMainComplete = false;
                innerSub = source.subscribe(new OperatorSubscriber(subscriber, undefined, function () {
                    isMainComplete = true;
                    !checkComplete() && getCompletionSubject().next();
                }));
                if (syncResub) {
                    innerSub.unsubscribe();
                    innerSub = null;
                    syncResub = false;
                    subscribeForRepeatWhen();
                }
            };
            subscribeForRepeatWhen();
        });
    }

    function retry(configOrCount) {
        if (configOrCount === void 0) { configOrCount = Infinity; }
        var config;
        if (configOrCount && typeof configOrCount === 'object') {
            config = configOrCount;
        }
        else {
            config = {
                count: configOrCount,
            };
        }
        var _a = config.count, count = _a === void 0 ? Infinity : _a, delay = config.delay, _b = config.resetOnSuccess, resetOnSuccess = _b === void 0 ? false : _b;
        return count <= 0
            ? identity$2
            : operate(function (source, subscriber) {
                var soFar = 0;
                var innerSub;
                var subscribeForRetry = function () {
                    var syncUnsub = false;
                    innerSub = source.subscribe(new OperatorSubscriber(subscriber, function (value) {
                        if (resetOnSuccess) {
                            soFar = 0;
                        }
                        subscriber.next(value);
                    }, undefined, function (err) {
                        if (soFar++ < count) {
                            var resub_1 = function () {
                                if (innerSub) {
                                    innerSub.unsubscribe();
                                    innerSub = null;
                                    subscribeForRetry();
                                }
                                else {
                                    syncUnsub = true;
                                }
                            };
                            if (delay != null) {
                                var notifier = typeof delay === 'number' ? timer(delay) : innerFrom(delay(err, soFar));
                                var notifierSubscriber_1 = new OperatorSubscriber(subscriber, function () {
                                    notifierSubscriber_1.unsubscribe();
                                    resub_1();
                                }, function () {
                                    subscriber.complete();
                                });
                                notifier.subscribe(notifierSubscriber_1);
                            }
                            else {
                                resub_1();
                            }
                        }
                        else {
                            subscriber.error(err);
                        }
                    }));
                    if (syncUnsub) {
                        innerSub.unsubscribe();
                        innerSub = null;
                        subscribeForRetry();
                    }
                };
                subscribeForRetry();
            });
    }

    function retryWhen(notifier) {
        return operate(function (source, subscriber) {
            var innerSub;
            var syncResub = false;
            var errors$;
            var subscribeForRetryWhen = function () {
                innerSub = source.subscribe(new OperatorSubscriber(subscriber, undefined, undefined, function (err) {
                    if (!errors$) {
                        errors$ = new Subject$1();
                        notifier(errors$).subscribe(new OperatorSubscriber(subscriber, function () {
                            return innerSub ? subscribeForRetryWhen() : (syncResub = true);
                        }));
                    }
                    if (errors$) {
                        errors$.next(err);
                    }
                }));
                if (syncResub) {
                    innerSub.unsubscribe();
                    innerSub = null;
                    syncResub = false;
                    subscribeForRetryWhen();
                }
            };
            subscribeForRetryWhen();
        });
    }

    function sample$1(notifier) {
        return operate(function (source, subscriber) {
            var hasValue = false;
            var lastValue = null;
            source.subscribe(new OperatorSubscriber(subscriber, function (value) {
                hasValue = true;
                lastValue = value;
            }));
            var emit = function () {
                if (hasValue) {
                    hasValue = false;
                    var value = lastValue;
                    lastValue = null;
                    subscriber.next(value);
                }
            };
            notifier.subscribe(new OperatorSubscriber(subscriber, emit, noop$2));
        });
    }

    function sampleTime(period, scheduler) {
        if (scheduler === void 0) { scheduler = asyncScheduler; }
        return sample$1(interval(period, scheduler));
    }

    function scan(accumulator, seed) {
        return operate(scanInternals(accumulator, seed, arguments.length >= 2, true));
    }

    function sequenceEqual(compareTo, comparator) {
        if (comparator === void 0) { comparator = function (a, b) { return a === b; }; }
        return operate(function (source, subscriber) {
            var aState = createState();
            var bState = createState();
            var emit = function (isEqual) {
                subscriber.next(isEqual);
                subscriber.complete();
            };
            var createSubscriber = function (selfState, otherState) {
                var sequenceEqualSubscriber = new OperatorSubscriber(subscriber, function (a) {
                    var buffer = otherState.buffer, complete = otherState.complete;
                    if (buffer.length === 0) {
                        complete ? emit(false) : selfState.buffer.push(a);
                    }
                    else {
                        !comparator(a, buffer.shift()) && emit(false);
                    }
                }, function () {
                    selfState.complete = true;
                    var complete = otherState.complete, buffer = otherState.buffer;
                    complete && emit(buffer.length === 0);
                    sequenceEqualSubscriber === null || sequenceEqualSubscriber === void 0 ? void 0 : sequenceEqualSubscriber.unsubscribe();
                });
                return sequenceEqualSubscriber;
            };
            source.subscribe(createSubscriber(aState, bState));
            compareTo.subscribe(createSubscriber(bState, aState));
        });
    }
    function createState() {
        return {
            buffer: [],
            complete: false,
        };
    }

    function share$2(options) {
        if (options === void 0) { options = {}; }
        var _a = options.connector, connector = _a === void 0 ? function () { return new Subject$1(); } : _a, _b = options.resetOnError, resetOnError = _b === void 0 ? true : _b, _c = options.resetOnComplete, resetOnComplete = _c === void 0 ? true : _c, _d = options.resetOnRefCountZero, resetOnRefCountZero = _d === void 0 ? true : _d;
        return function (wrapperSource) {
            var connection = null;
            var resetConnection = null;
            var subject = null;
            var refCount = 0;
            var hasCompleted = false;
            var hasErrored = false;
            var cancelReset = function () {
                resetConnection === null || resetConnection === void 0 ? void 0 : resetConnection.unsubscribe();
                resetConnection = null;
            };
            var reset = function () {
                cancelReset();
                connection = subject = null;
                hasCompleted = hasErrored = false;
            };
            var resetAndUnsubscribe = function () {
                var conn = connection;
                reset();
                conn === null || conn === void 0 ? void 0 : conn.unsubscribe();
            };
            return operate(function (source, subscriber) {
                refCount++;
                if (!hasErrored && !hasCompleted) {
                    cancelReset();
                }
                var dest = (subject = subject !== null && subject !== void 0 ? subject : connector());
                subscriber.add(function () {
                    refCount--;
                    if (refCount === 0 && !hasErrored && !hasCompleted) {
                        resetConnection = handleReset(resetAndUnsubscribe, resetOnRefCountZero);
                    }
                });
                dest.subscribe(subscriber);
                if (!connection) {
                    connection = new SafeSubscriber({
                        next: function (value) { return dest.next(value); },
                        error: function (err) {
                            hasErrored = true;
                            cancelReset();
                            resetConnection = handleReset(reset, resetOnError, err);
                            dest.error(err);
                        },
                        complete: function () {
                            hasCompleted = true;
                            cancelReset();
                            resetConnection = handleReset(reset, resetOnComplete);
                            dest.complete();
                        },
                    });
                    from$2(source).subscribe(connection);
                }
            })(wrapperSource);
        };
    }
    function handleReset(reset, on) {
        var args = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            args[_i - 2] = arguments[_i];
        }
        if (on === true) {
            reset();
            return null;
        }
        if (on === false) {
            return null;
        }
        return on.apply(void 0, __spreadArray([], __read(args))).pipe(take$3(1))
            .subscribe(function () { return reset(); });
    }

    function shareReplay(configOrBufferSize, windowTime, scheduler) {
        var _a, _b;
        var bufferSize;
        var refCount = false;
        if (configOrBufferSize && typeof configOrBufferSize === 'object') {
            bufferSize = (_a = configOrBufferSize.bufferSize) !== null && _a !== void 0 ? _a : Infinity;
            windowTime = (_b = configOrBufferSize.windowTime) !== null && _b !== void 0 ? _b : Infinity;
            refCount = !!configOrBufferSize.refCount;
            scheduler = configOrBufferSize.scheduler;
        }
        else {
            bufferSize = configOrBufferSize !== null && configOrBufferSize !== void 0 ? configOrBufferSize : Infinity;
        }
        return share$2({
            connector: function () { return new ReplaySubject(bufferSize, windowTime, scheduler); },
            resetOnError: true,
            resetOnComplete: false,
            resetOnRefCountZero: refCount
        });
    }

    function single(predicate) {
        return operate(function (source, subscriber) {
            var hasValue = false;
            var singleValue;
            var seenValue = false;
            var index = 0;
            source.subscribe(new OperatorSubscriber(subscriber, function (value) {
                seenValue = true;
                if (!predicate || predicate(value, index++, source)) {
                    hasValue && subscriber.error(new SequenceError('Too many matching values'));
                    hasValue = true;
                    singleValue = value;
                }
            }, function () {
                if (hasValue) {
                    subscriber.next(singleValue);
                    subscriber.complete();
                }
                else {
                    subscriber.error(seenValue ? new NotFoundError('No matching values') : new EmptyError());
                }
            }));
        });
    }

    function skip(count) {
        return filter$5(function (_, index) { return count <= index; });
    }

    function skipLast(skipCount) {
        return skipCount <= 0
            ?
                identity$2
            : operate(function (source, subscriber) {
                var ring = new Array(skipCount);
                var seen = 0;
                source.subscribe(new OperatorSubscriber(subscriber, function (value) {
                    var valueIndex = seen++;
                    if (valueIndex < skipCount) {
                        ring[valueIndex] = value;
                    }
                    else {
                        var index = valueIndex % skipCount;
                        var oldValue = ring[index];
                        ring[index] = value;
                        subscriber.next(oldValue);
                    }
                }));
                return function () {
                    ring = null;
                };
            });
    }

    function skipUntil(notifier) {
        return operate(function (source, subscriber) {
            var taking = false;
            var skipSubscriber = new OperatorSubscriber(subscriber, function () {
                skipSubscriber === null || skipSubscriber === void 0 ? void 0 : skipSubscriber.unsubscribe();
                taking = true;
            }, noop$2);
            innerFrom(notifier).subscribe(skipSubscriber);
            source.subscribe(new OperatorSubscriber(subscriber, function (value) { return taking && subscriber.next(value); }));
        });
    }

    function skipWhile(predicate) {
        return operate(function (source, subscriber) {
            var taking = false;
            var index = 0;
            source.subscribe(new OperatorSubscriber(subscriber, function (value) { return (taking || (taking = !predicate(value, index++))) && subscriber.next(value); }));
        });
    }

    function startWith() {
        var values = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            values[_i] = arguments[_i];
        }
        var scheduler = popScheduler(values);
        return operate(function (source, subscriber) {
            (scheduler ? concat$1(values, source, scheduler) : concat$1(values, source)).subscribe(subscriber);
        });
    }

    function switchMap(project, resultSelector) {
        return operate(function (source, subscriber) {
            var innerSubscriber = null;
            var index = 0;
            var isComplete = false;
            var checkComplete = function () { return isComplete && !innerSubscriber && subscriber.complete(); };
            source.subscribe(new OperatorSubscriber(subscriber, function (value) {
                innerSubscriber === null || innerSubscriber === void 0 ? void 0 : innerSubscriber.unsubscribe();
                var innerIndex = 0;
                var outerIndex = index++;
                innerFrom(project(value, outerIndex)).subscribe((innerSubscriber = new OperatorSubscriber(subscriber, function (innerValue) { return subscriber.next(resultSelector ? resultSelector(value, innerValue, outerIndex, innerIndex++) : innerValue); }, function () {
                    innerSubscriber = null;
                    checkComplete();
                })));
            }, function () {
                isComplete = true;
                checkComplete();
            }));
        });
    }

    function switchAll() {
        return switchMap(identity$2);
    }

    function switchMapTo(innerObservable, resultSelector) {
        return isFunction(resultSelector) ? switchMap(function () { return innerObservable; }, resultSelector) : switchMap(function () { return innerObservable; });
    }

    function switchScan(accumulator, seed) {
        return operate(function (source, subscriber) {
            var state = seed;
            switchMap(function (value, index) { return accumulator(state, value, index); }, function (_, innerValue) { return ((state = innerValue), innerValue); })(source).subscribe(subscriber);
            return function () {
                state = null;
            };
        });
    }

    function takeUntil$9(notifier) {
        return operate(function (source, subscriber) {
            innerFrom(notifier).subscribe(new OperatorSubscriber(subscriber, function () { return subscriber.complete(); }, noop$2));
            !subscriber.closed && source.subscribe(subscriber);
        });
    }

    function takeWhile(predicate, inclusive) {
        if (inclusive === void 0) { inclusive = false; }
        return operate(function (source, subscriber) {
            var index = 0;
            source.subscribe(new OperatorSubscriber(subscriber, function (value) {
                var result = predicate(value, index++);
                (result || inclusive) && subscriber.next(value);
                !result && subscriber.complete();
            }));
        });
    }

    function tap(observerOrNext, error, complete) {
        var tapObserver = isFunction(observerOrNext) || error || complete
            ?
                { next: observerOrNext, error: error, complete: complete }
            : observerOrNext;
        return tapObserver
            ? operate(function (source, subscriber) {
                var _a;
                (_a = tapObserver.subscribe) === null || _a === void 0 ? void 0 : _a.call(tapObserver);
                var isUnsub = true;
                source.subscribe(new OperatorSubscriber(subscriber, function (value) {
                    var _a;
                    (_a = tapObserver.next) === null || _a === void 0 ? void 0 : _a.call(tapObserver, value);
                    subscriber.next(value);
                }, function () {
                    var _a;
                    isUnsub = false;
                    (_a = tapObserver.complete) === null || _a === void 0 ? void 0 : _a.call(tapObserver);
                    subscriber.complete();
                }, function (err) {
                    var _a;
                    isUnsub = false;
                    (_a = tapObserver.error) === null || _a === void 0 ? void 0 : _a.call(tapObserver, err);
                    subscriber.error(err);
                }, function () {
                    var _a, _b;
                    if (isUnsub) {
                        (_a = tapObserver.unsubscribe) === null || _a === void 0 ? void 0 : _a.call(tapObserver);
                    }
                    (_b = tapObserver.finalize) === null || _b === void 0 ? void 0 : _b.call(tapObserver);
                }));
            })
            :
                identity$2;
    }

    var defaultThrottleConfig = {
        leading: true,
        trailing: false,
    };
    function throttle(durationSelector, _a) {
        var _b = _a === void 0 ? defaultThrottleConfig : _a, leading = _b.leading, trailing = _b.trailing;
        return operate(function (source, subscriber) {
            var hasValue = false;
            var sendValue = null;
            var throttled = null;
            var isComplete = false;
            var endThrottling = function () {
                throttled === null || throttled === void 0 ? void 0 : throttled.unsubscribe();
                throttled = null;
                if (trailing) {
                    send();
                    isComplete && subscriber.complete();
                }
            };
            var cleanupThrottling = function () {
                throttled = null;
                isComplete && subscriber.complete();
            };
            var startThrottle = function (value) {
                return (throttled = innerFrom(durationSelector(value)).subscribe(new OperatorSubscriber(subscriber, endThrottling, cleanupThrottling)));
            };
            var send = function () {
                if (hasValue) {
                    hasValue = false;
                    var value = sendValue;
                    sendValue = null;
                    subscriber.next(value);
                    !isComplete && startThrottle(value);
                }
            };
            source.subscribe(new OperatorSubscriber(subscriber, function (value) {
                hasValue = true;
                sendValue = value;
                !(throttled && !throttled.closed) && (leading ? send() : startThrottle(value));
            }, function () {
                isComplete = true;
                !(trailing && hasValue && throttled && !throttled.closed) && subscriber.complete();
            }));
        });
    }

    function throttleTime(duration, scheduler, config) {
        if (scheduler === void 0) { scheduler = asyncScheduler; }
        if (config === void 0) { config = defaultThrottleConfig; }
        var duration$ = timer(duration, scheduler);
        return throttle(function () { return duration$; }, config);
    }

    function timeInterval(scheduler) {
        if (scheduler === void 0) { scheduler = async; }
        return function (source) {
            return defer$1(function () {
                return source.pipe(scan(function (_a, value) {
                    var current = _a.current;
                    return ({ value: value, current: scheduler.now(), last: current });
                }, {
                    current: scheduler.now(),
                    value: undefined,
                    last: undefined,
                }), map$8(function (_a) {
                    var current = _a.current, last = _a.last, value = _a.value;
                    return new TimeInterval(value, current - last);
                }));
            });
        };
    }
    var TimeInterval = (function () {
        function TimeInterval(value, interval) {
            this.value = value;
            this.interval = interval;
        }
        return TimeInterval;
    }());

    function timeoutWith(due, withObservable, scheduler) {
        var first;
        var each;
        var _with;
        scheduler = scheduler !== null && scheduler !== void 0 ? scheduler : async;
        if (isValidDate(due)) {
            first = due;
        }
        else if (typeof due === 'number') {
            each = due;
        }
        if (withObservable) {
            _with = function () { return withObservable; };
        }
        else {
            throw new TypeError('No observable provided to switch to');
        }
        if (first == null && each == null) {
            throw new TypeError('No timeout provided.');
        }
        return timeout({
            first: first,
            each: each,
            scheduler: scheduler,
            with: _with,
        });
    }

    function timestamp(timestampProvider) {
        if (timestampProvider === void 0) { timestampProvider = dateTimestampProvider; }
        return map$8(function (value) { return ({ value: value, timestamp: timestampProvider.now() }); });
    }

    function window$1(windowBoundaries) {
        return operate(function (source, subscriber) {
            var windowSubject = new Subject$1();
            subscriber.next(windowSubject.asObservable());
            var errorHandler = function (err) {
                windowSubject.error(err);
                subscriber.error(err);
            };
            source.subscribe(new OperatorSubscriber(subscriber, function (value) { return windowSubject === null || windowSubject === void 0 ? void 0 : windowSubject.next(value); }, function () {
                windowSubject.complete();
                subscriber.complete();
            }, errorHandler));
            windowBoundaries.subscribe(new OperatorSubscriber(subscriber, function () {
                windowSubject.complete();
                subscriber.next((windowSubject = new Subject$1()));
            }, noop$2, errorHandler));
            return function () {
                windowSubject === null || windowSubject === void 0 ? void 0 : windowSubject.unsubscribe();
                windowSubject = null;
            };
        });
    }

    function windowCount(windowSize, startWindowEvery) {
        if (startWindowEvery === void 0) { startWindowEvery = 0; }
        var startEvery = startWindowEvery > 0 ? startWindowEvery : windowSize;
        return operate(function (source, subscriber) {
            var windows = [new Subject$1()];
            var starts = [];
            var count = 0;
            subscriber.next(windows[0].asObservable());
            source.subscribe(new OperatorSubscriber(subscriber, function (value) {
                var e_1, _a;
                try {
                    for (var windows_1 = __values(windows), windows_1_1 = windows_1.next(); !windows_1_1.done; windows_1_1 = windows_1.next()) {
                        var window_1 = windows_1_1.value;
                        window_1.next(value);
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (windows_1_1 && !windows_1_1.done && (_a = windows_1.return)) _a.call(windows_1);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
                var c = count - windowSize + 1;
                if (c >= 0 && c % startEvery === 0) {
                    windows.shift().complete();
                }
                if (++count % startEvery === 0) {
                    var window_2 = new Subject$1();
                    windows.push(window_2);
                    subscriber.next(window_2.asObservable());
                }
            }, function () {
                while (windows.length > 0) {
                    windows.shift().complete();
                }
                subscriber.complete();
            }, function (err) {
                while (windows.length > 0) {
                    windows.shift().error(err);
                }
                subscriber.error(err);
            }, function () {
                starts = null;
                windows = null;
            }));
        });
    }

    function windowTime(windowTimeSpan) {
        var _a, _b;
        var otherArgs = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            otherArgs[_i - 1] = arguments[_i];
        }
        var scheduler = (_a = popScheduler(otherArgs)) !== null && _a !== void 0 ? _a : asyncScheduler;
        var windowCreationInterval = (_b = otherArgs[0]) !== null && _b !== void 0 ? _b : null;
        var maxWindowSize = otherArgs[1] || Infinity;
        return operate(function (source, subscriber) {
            var windowRecords = [];
            var restartOnClose = false;
            var closeWindow = function (record) {
                var window = record.window, subs = record.subs;
                window.complete();
                subs.unsubscribe();
                arrRemove(windowRecords, record);
                restartOnClose && startWindow();
            };
            var startWindow = function () {
                if (windowRecords) {
                    var subs = new Subscription();
                    subscriber.add(subs);
                    var window_1 = new Subject$1();
                    var record_1 = {
                        window: window_1,
                        subs: subs,
                        seen: 0,
                    };
                    windowRecords.push(record_1);
                    subscriber.next(window_1.asObservable());
                    executeSchedule(subs, scheduler, function () { return closeWindow(record_1); }, windowTimeSpan);
                }
            };
            if (windowCreationInterval !== null && windowCreationInterval >= 0) {
                executeSchedule(subscriber, scheduler, startWindow, windowCreationInterval, true);
            }
            else {
                restartOnClose = true;
            }
            startWindow();
            var loop = function (cb) { return windowRecords.slice().forEach(cb); };
            var terminate = function (cb) {
                loop(function (_a) {
                    var window = _a.window;
                    return cb(window);
                });
                cb(subscriber);
                subscriber.unsubscribe();
            };
            source.subscribe(new OperatorSubscriber(subscriber, function (value) {
                loop(function (record) {
                    record.window.next(value);
                    maxWindowSize <= ++record.seen && closeWindow(record);
                });
            }, function () { return terminate(function (consumer) { return consumer.complete(); }); }, function (err) { return terminate(function (consumer) { return consumer.error(err); }); }));
            return function () {
                windowRecords = null;
            };
        });
    }

    function windowToggle(openings, closingSelector) {
        return operate(function (source, subscriber) {
            var windows = [];
            var handleError = function (err) {
                while (0 < windows.length) {
                    windows.shift().error(err);
                }
                subscriber.error(err);
            };
            innerFrom(openings).subscribe(new OperatorSubscriber(subscriber, function (openValue) {
                var window = new Subject$1();
                windows.push(window);
                var closingSubscription = new Subscription();
                var closeWindow = function () {
                    arrRemove(windows, window);
                    window.complete();
                    closingSubscription.unsubscribe();
                };
                var closingNotifier;
                try {
                    closingNotifier = innerFrom(closingSelector(openValue));
                }
                catch (err) {
                    handleError(err);
                    return;
                }
                subscriber.next(window.asObservable());
                closingSubscription.add(closingNotifier.subscribe(new OperatorSubscriber(subscriber, closeWindow, noop$2, handleError)));
            }, noop$2));
            source.subscribe(new OperatorSubscriber(subscriber, function (value) {
                var e_1, _a;
                var windowsCopy = windows.slice();
                try {
                    for (var windowsCopy_1 = __values(windowsCopy), windowsCopy_1_1 = windowsCopy_1.next(); !windowsCopy_1_1.done; windowsCopy_1_1 = windowsCopy_1.next()) {
                        var window_1 = windowsCopy_1_1.value;
                        window_1.next(value);
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (windowsCopy_1_1 && !windowsCopy_1_1.done && (_a = windowsCopy_1.return)) _a.call(windowsCopy_1);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
            }, function () {
                while (0 < windows.length) {
                    windows.shift().complete();
                }
                subscriber.complete();
            }, handleError, function () {
                while (0 < windows.length) {
                    windows.shift().unsubscribe();
                }
            }));
        });
    }

    function windowWhen(closingSelector) {
        return operate(function (source, subscriber) {
            var window;
            var closingSubscriber;
            var handleError = function (err) {
                window.error(err);
                subscriber.error(err);
            };
            var openWindow = function () {
                closingSubscriber === null || closingSubscriber === void 0 ? void 0 : closingSubscriber.unsubscribe();
                window === null || window === void 0 ? void 0 : window.complete();
                window = new Subject$1();
                subscriber.next(window.asObservable());
                var closingNotifier;
                try {
                    closingNotifier = innerFrom(closingSelector());
                }
                catch (err) {
                    handleError(err);
                    return;
                }
                closingNotifier.subscribe((closingSubscriber = new OperatorSubscriber(subscriber, openWindow, openWindow, handleError)));
            };
            openWindow();
            source.subscribe(new OperatorSubscriber(subscriber, function (value) { return window.next(value); }, function () {
                window.complete();
                subscriber.complete();
            }, handleError, function () {
                closingSubscriber === null || closingSubscriber === void 0 ? void 0 : closingSubscriber.unsubscribe();
                window = null;
            }));
        });
    }

    function withLatestFrom() {
        var inputs = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            inputs[_i] = arguments[_i];
        }
        var project = popResultSelector(inputs);
        return operate(function (source, subscriber) {
            var len = inputs.length;
            var otherValues = new Array(len);
            var hasValue = inputs.map(function () { return false; });
            var ready = false;
            var _loop_1 = function (i) {
                innerFrom(inputs[i]).subscribe(new OperatorSubscriber(subscriber, function (value) {
                    otherValues[i] = value;
                    if (!ready && !hasValue[i]) {
                        hasValue[i] = true;
                        (ready = hasValue.every(identity$2)) && (hasValue = null);
                    }
                }, noop$2));
            };
            for (var i = 0; i < len; i++) {
                _loop_1(i);
            }
            source.subscribe(new OperatorSubscriber(subscriber, function (value) {
                if (ready) {
                    var values = __spreadArray([value], __read(otherValues));
                    subscriber.next(project ? project.apply(void 0, __spreadArray([], __read(values))) : values);
                }
            }));
        });
    }

    function zipAll(project) {
        return joinAllInternals(zip$1, project);
    }

    function zip() {
        var sources = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            sources[_i] = arguments[_i];
        }
        return operate(function (source, subscriber) {
            zip$1.apply(void 0, __spreadArray([source], __read(sources))).subscribe(subscriber);
        });
    }

    function zipWith() {
        var otherInputs = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            otherInputs[_i] = arguments[_i];
        }
        return zip.apply(void 0, __spreadArray([], __read(otherInputs)));
    }

    var esm5 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        Observable: Observable,
        ConnectableObservable: ConnectableObservable,
        observable: observable,
        animationFrames: animationFrames,
        Subject: Subject$1,
        BehaviorSubject: BehaviorSubject,
        ReplaySubject: ReplaySubject,
        AsyncSubject: AsyncSubject,
        asap: asap,
        asapScheduler: asapScheduler,
        async: async,
        asyncScheduler: asyncScheduler,
        queue: queue,
        queueScheduler: queueScheduler,
        animationFrame: animationFrame,
        animationFrameScheduler: animationFrameScheduler,
        VirtualTimeScheduler: VirtualTimeScheduler,
        VirtualAction: VirtualAction,
        Scheduler: Scheduler,
        Subscription: Subscription,
        Subscriber: Subscriber,
        Notification: Notification,
        get NotificationKind () { return NotificationKind; },
        pipe: pipe$1,
        noop: noop$2,
        identity: identity$2,
        isObservable: isObservable,
        lastValueFrom: lastValueFrom,
        firstValueFrom: firstValueFrom,
        ArgumentOutOfRangeError: ArgumentOutOfRangeError,
        EmptyError: EmptyError,
        NotFoundError: NotFoundError,
        ObjectUnsubscribedError: ObjectUnsubscribedError,
        SequenceError: SequenceError,
        TimeoutError: TimeoutError,
        UnsubscriptionError: UnsubscriptionError,
        bindCallback: bindCallback,
        bindNodeCallback: bindNodeCallback,
        combineLatest: combineLatest$1,
        concat: concat$1,
        connectable: connectable,
        defer: defer$1,
        empty: empty$1,
        forkJoin: forkJoin,
        from: from$2,
        fromEvent: fromEvent$1,
        fromEventPattern: fromEventPattern,
        generate: generate,
        iif: iif,
        interval: interval,
        merge: merge$1,
        never: never,
        of: of$2,
        onErrorResumeNext: onErrorResumeNext,
        pairs: pairs,
        partition: partition$1,
        race: race$1,
        range: range$1,
        throwError: throwError,
        timer: timer,
        using: using,
        zip: zip$1,
        scheduled: scheduled,
        EMPTY: EMPTY,
        NEVER: NEVER,
        config: config,
        audit: audit,
        auditTime: auditTime,
        buffer: buffer$1,
        bufferCount: bufferCount,
        bufferTime: bufferTime,
        bufferToggle: bufferToggle,
        bufferWhen: bufferWhen,
        catchError: catchError,
        combineAll: combineAll,
        combineLatestAll: combineLatestAll,
        combineLatestWith: combineLatestWith,
        concatAll: concatAll,
        concatMap: concatMap$3,
        concatMapTo: concatMapTo,
        concatWith: concatWith,
        connect: connect,
        count: count,
        debounce: debounce,
        debounceTime: debounceTime,
        defaultIfEmpty: defaultIfEmpty,
        delay: delay,
        delayWhen: delayWhen,
        dematerialize: dematerialize,
        distinct: distinct,
        distinctUntilChanged: distinctUntilChanged,
        distinctUntilKeyChanged: distinctUntilKeyChanged,
        elementAt: elementAt,
        endWith: endWith,
        every: every,
        exhaust: exhaust,
        exhaustAll: exhaustAll,
        exhaustMap: exhaustMap,
        expand: expand$3,
        filter: filter$5,
        finalize: finalize,
        find: find$1,
        findIndex: findIndex$2,
        first: first,
        groupBy: groupBy,
        ignoreElements: ignoreElements,
        isEmpty: isEmpty,
        last: last,
        map: map$8,
        mapTo: mapTo,
        materialize: materialize,
        max: max,
        mergeAll: mergeAll,
        flatMap: flatMap$2,
        mergeMap: mergeMap,
        mergeMapTo: mergeMapTo,
        mergeScan: mergeScan,
        mergeWith: mergeWith,
        min: min,
        multicast: multicast,
        observeOn: observeOn,
        pairwise: pairwise,
        pluck: pluck,
        publish: publish$1,
        publishBehavior: publishBehavior,
        publishLast: publishLast,
        publishReplay: publishReplay,
        raceWith: raceWith,
        reduce: reduce$1,
        repeat: repeat,
        repeatWhen: repeatWhen,
        retry: retry,
        retryWhen: retryWhen,
        refCount: refCount,
        sample: sample$1,
        sampleTime: sampleTime,
        scan: scan,
        sequenceEqual: sequenceEqual,
        share: share$2,
        shareReplay: shareReplay,
        single: single,
        skip: skip,
        skipLast: skipLast,
        skipUntil: skipUntil,
        skipWhile: skipWhile,
        startWith: startWith,
        subscribeOn: subscribeOn,
        switchAll: switchAll,
        switchMap: switchMap,
        switchMapTo: switchMapTo,
        switchScan: switchScan,
        take: take$3,
        takeLast: takeLast,
        takeUntil: takeUntil$9,
        takeWhile: takeWhile,
        tap: tap,
        throttle: throttle,
        throttleTime: throttleTime,
        throwIfEmpty: throwIfEmpty,
        timeInterval: timeInterval,
        timeout: timeout,
        timeoutWith: timeoutWith,
        timestamp: timestamp,
        toArray: toArray,
        window: window$1,
        windowCount: windowCount,
        windowTime: windowTime,
        windowToggle: windowToggle,
        windowWhen: windowWhen,
        withLatestFrom: withLatestFrom,
        zipAll: zipAll,
        zipWith: zipWith
    });

    var require$$4$1 = /*@__PURE__*/getAugmentedNamespace(esm5);

    function partition(predicate, thisArg) {
        return function (source) {
            return [filter$5(predicate, thisArg)(source), filter$5(not(predicate, thisArg))(source)];
        };
    }

    function race() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return raceWith.apply(void 0, __spreadArray([], __read(argsOrArgArray(args))));
    }

    var operators = /*#__PURE__*/Object.freeze({
        __proto__: null,
        audit: audit,
        auditTime: auditTime,
        buffer: buffer$1,
        bufferCount: bufferCount,
        bufferTime: bufferTime,
        bufferToggle: bufferToggle,
        bufferWhen: bufferWhen,
        catchError: catchError,
        combineAll: combineAll,
        combineLatestAll: combineLatestAll,
        combineLatest: combineLatest,
        combineLatestWith: combineLatestWith,
        concat: concat,
        concatAll: concatAll,
        concatMap: concatMap$3,
        concatMapTo: concatMapTo,
        concatWith: concatWith,
        connect: connect,
        count: count,
        debounce: debounce,
        debounceTime: debounceTime,
        defaultIfEmpty: defaultIfEmpty,
        delay: delay,
        delayWhen: delayWhen,
        dematerialize: dematerialize,
        distinct: distinct,
        distinctUntilChanged: distinctUntilChanged,
        distinctUntilKeyChanged: distinctUntilKeyChanged,
        elementAt: elementAt,
        endWith: endWith,
        every: every,
        exhaust: exhaust,
        exhaustAll: exhaustAll,
        exhaustMap: exhaustMap,
        expand: expand$3,
        filter: filter$5,
        finalize: finalize,
        find: find$1,
        findIndex: findIndex$2,
        first: first,
        groupBy: groupBy,
        ignoreElements: ignoreElements,
        isEmpty: isEmpty,
        last: last,
        map: map$8,
        mapTo: mapTo,
        materialize: materialize,
        max: max,
        merge: merge,
        mergeAll: mergeAll,
        flatMap: flatMap$2,
        mergeMap: mergeMap,
        mergeMapTo: mergeMapTo,
        mergeScan: mergeScan,
        mergeWith: mergeWith,
        min: min,
        multicast: multicast,
        observeOn: observeOn,
        onErrorResumeNext: onErrorResumeNext$1,
        pairwise: pairwise,
        partition: partition,
        pluck: pluck,
        publish: publish$1,
        publishBehavior: publishBehavior,
        publishLast: publishLast,
        publishReplay: publishReplay,
        race: race,
        raceWith: raceWith,
        reduce: reduce$1,
        repeat: repeat,
        repeatWhen: repeatWhen,
        retry: retry,
        retryWhen: retryWhen,
        refCount: refCount,
        sample: sample$1,
        sampleTime: sampleTime,
        scan: scan,
        sequenceEqual: sequenceEqual,
        share: share$2,
        shareReplay: shareReplay,
        single: single,
        skip: skip,
        skipLast: skipLast,
        skipUntil: skipUntil,
        skipWhile: skipWhile,
        startWith: startWith,
        subscribeOn: subscribeOn,
        switchAll: switchAll,
        switchMap: switchMap,
        switchMapTo: switchMapTo,
        switchScan: switchScan,
        take: take$3,
        takeLast: takeLast,
        takeUntil: takeUntil$9,
        takeWhile: takeWhile,
        tap: tap,
        throttle: throttle,
        throttleTime: throttleTime,
        throwIfEmpty: throwIfEmpty,
        timeInterval: timeInterval,
        timeout: timeout,
        timeoutWith: timeoutWith,
        timestamp: timestamp,
        toArray: toArray,
        window: window$1,
        windowCount: windowCount,
        windowTime: windowTime,
        windowToggle: windowToggle,
        windowWhen: windowWhen,
        withLatestFrom: withLatestFrom,
        zip: zip,
        zipAll: zipAll,
        zipWith: zipWith
    });

    var require$$1$1 = /*@__PURE__*/getAugmentedNamespace(operators);

    var runAsync$5 = {exports: {}};

    function isPromise(obj) {
      return !!obj && (typeof obj === 'object' || typeof obj === 'function') && typeof obj.then === 'function';
    }

    /**
     * Return a function that will run a function asynchronously or synchronously
     *
     * example:
     * runAsync(wrappedFunction, callback)(...args);
     *
     * @param   {Function} func  Function to run
     * @param   {Function} cb    Callback function passed the `func` returned value
     * @return  {Function(arguments)} Arguments to pass to `func`. This function will in turn
     *                                return a Promise (Node >= 0.12) or call the callbacks.
     */

    var runAsync$4 = runAsync$5.exports = function (func, cb) {
      cb = cb || function () {};

      return function () {

        var args = arguments;

        var promise = new Promise(function (resolve, reject) {
          var resolved = false;
          const wrappedResolve = function (value) {
            if (resolved) {
              console.warn('Run-async promise already resolved.');
            }
            resolved = true;
            resolve(value);
          };

          var rejected = false;
          const wrappedReject = function (value) {
            if (rejected) {
              console.warn('Run-async promise already rejected.');
            }
            rejected = true;
            reject(value);
          };

          var usingCallback = false;
          var callbackConflict = false;
          var contextEnded = false;

          var answer = func.apply({
            async: function () {
              if (contextEnded) {
                console.warn('Run-async async() called outside a valid run-async context, callback will be ignored.');
                return function() {};
              }
              if (callbackConflict) {
                console.warn('Run-async wrapped function (async) returned a promise.\nCalls to async() callback can have unexpected results.');
              }
              usingCallback = true;
              return function (err, value) {
                if (err) {
                  wrappedReject(err);
                } else {
                  wrappedResolve(value);
                }
              };
            }
          }, Array.prototype.slice.call(args));

          if (usingCallback) {
            if (isPromise(answer)) {
              console.warn('Run-async wrapped function (sync) returned a promise but async() callback must be executed to resolve.');
            }
          } else {
            if (isPromise(answer)) {
              callbackConflict = true;
              answer.then(wrappedResolve, wrappedReject);
            } else {
              wrappedResolve(answer);
            }
          }
          contextEnded = true;
        });

        promise.then(cb.bind(null, null), cb);

        return promise;
      }
    };

    runAsync$4.cb = function (func, cb) {
      return runAsync$4(function () {
        var args = Array.prototype.slice.call(arguments);
        if (args.length === func.length - 1) {
          args.push(this.async());
        }
        return func.apply(this, args);
      }, cb);
    };

    var utils$2 = {};

    const _$b = {
      isFunction: isFunction_1,
    };
    const { from: from$1, of: of$1 } = require$$4$1;
    const runAsync$3 = runAsync$5.exports;

    /**
     * Resolve a question property value if it is passed as a function.
     * This method will overwrite the property on the question object with the received value.
     * @param  {Object} question - Question object
     * @param  {String} prop     - Property to fetch name
     * @param  {Object} answers  - Answers object
     * @return {Rx.Observable}   - Observable emitting once value is known
     */

    utils$2.fetchAsyncQuestionProperty = function (question, prop, answers) {
      if (!_$b.isFunction(question[prop])) {
        return of$1(question);
      }

      return from$1(
        runAsync$3(question[prop])(answers).then((value) => {
          question[prop] = value;
          return question;
        })
      );
    };

    const _$a = {
      isPlainObject: isPlainObject_1,
      clone: clone_1,
      isArray: isArray_1,
      get: get_1,
      set: set_1,
      isFunction: isFunction_1,
    };
    const { defer, empty, from, of } = require$$4$1;
    const { concatMap: concatMap$2, filter: filter$4, publish, reduce } = require$$1$1;
    const runAsync$2 = runAsync$5.exports;
    const utils$1 = utils$2;
    const Base$8 = baseUI;

    /**
     * Base interface class other can inherits from
     */

    class PromptUI extends Base$8 {
      constructor(prompts, opt) {
        super(opt);
        this.prompts = prompts;
      }

      run(questions, answers) {
        // Keep global reference to the answers
        if (_$a.isPlainObject(answers)) {
          this.answers = _$a.clone(answers);
        } else {
          this.answers = {};
        }

        // Make sure questions is an array.
        if (_$a.isPlainObject(questions)) {
          // It's either an object of questions or a single question
          questions = Object.values(questions).every(
            (v) => _$a.isPlainObject(v) && v.name === undefined
          )
            ? Object.entries(questions).map(([name, question]) => ({ name, ...question }))
            : [questions];
        }

        // Create an observable, unless we received one as parameter.
        // Note: As this is a public interface, we cannot do an instanceof check as we won't
        // be using the exact same object in memory.
        const obs = _$a.isArray(questions) ? from(questions) : questions;

        this.process = obs.pipe(
          concatMap$2(this.processQuestion.bind(this)),
          publish() // Creates a hot Observable. It prevents duplicating prompts.
        );

        this.process.connect();

        return this.process
          .pipe(
            reduce((answers, answer) => {
              _$a.set(answers, answer.name, answer.answer);
              return answers;
            }, this.answers)
          )
          .toPromise(Promise)
          .then(this.onCompletion.bind(this), this.onError.bind(this));
      }

      /**
       * Once all prompt are over
       */

      onCompletion() {
        this.close();

        return this.answers;
      }

      onError(error) {
        this.close();
        return Promise.reject(error);
      }

      processQuestion(question) {
        question = _$a.clone(question);
        return defer(() => {
          const obs = of(question);

          return obs.pipe(
            concatMap$2(this.setDefaultType.bind(this)),
            concatMap$2(this.filterIfRunnable.bind(this)),
            concatMap$2(() =>
              utils$1.fetchAsyncQuestionProperty(question, 'message', this.answers)
            ),
            concatMap$2(() =>
              utils$1.fetchAsyncQuestionProperty(question, 'default', this.answers)
            ),
            concatMap$2(() =>
              utils$1.fetchAsyncQuestionProperty(question, 'choices', this.answers)
            ),
            concatMap$2(this.fetchAnswer.bind(this))
          );
        });
      }

      fetchAnswer(question) {
        const Prompt = this.prompts[question.type];
        this.activePrompt = new Prompt(question, this.rl, this.answers);
        return defer(() =>
          from(this.activePrompt.run().then((answer) => ({ name: question.name, answer })))
        );
      }

      setDefaultType(question) {
        // Default type to input
        if (!this.prompts[question.type]) {
          question.type = 'input';
        }

        return defer(() => of(question));
      }

      filterIfRunnable(question) {
        if (
          question.askAnswered !== true &&
          _$a.get(this.answers, question.name) !== undefined
        ) {
          return empty();
        }

        if (question.when === false) {
          return empty();
        }

        if (!_$a.isFunction(question.when)) {
          return of(question);
        }

        const { answers } = this;
        return defer(() =>
          from(
            runAsync$2(question.when)(answers).then((shouldRun) => {
              if (shouldRun) {
                return question;
              }
            })
          ).pipe(filter$4((val) => val != null))
        );
      }
    }

    var prompt = PromptUI;

    var baseGetTag$2 = _baseGetTag,
        isObjectLike$3 = isObjectLike_1;

    /** `Object#toString` result references. */
    var numberTag$1 = '[object Number]';

    /**
     * Checks if `value` is classified as a `Number` primitive or object.
     *
     * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
     * classified as numbers, use the `_.isFinite` method.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a number, else `false`.
     * @example
     *
     * _.isNumber(3);
     * // => true
     *
     * _.isNumber(Number.MIN_VALUE);
     * // => true
     *
     * _.isNumber(Infinity);
     * // => true
     *
     * _.isNumber('3');
     * // => false
     */
    function isNumber(value) {
      return typeof value == 'number' ||
        (isObjectLike$3(value) && baseGetTag$2(value) == numberTag$1);
    }

    var isNumber_1 = isNumber;

    /**
     * The base implementation of `_.findIndex` and `_.findLastIndex` without
     * support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} predicate The function invoked per iteration.
     * @param {number} fromIndex The index to search from.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {number} Returns the index of the matched value, else `-1`.
     */

    function baseFindIndex$2(array, predicate, fromIndex, fromRight) {
      var length = array.length,
          index = fromIndex + (fromRight ? 1 : -1);

      while ((fromRight ? index-- : ++index < length)) {
        if (predicate(array[index], index, array)) {
          return index;
        }
      }
      return -1;
    }

    var _baseFindIndex = baseFindIndex$2;

    /** Used to stand-in for `undefined` hash values. */

    var HASH_UNDEFINED = '__lodash_hash_undefined__';

    /**
     * Adds `value` to the array cache.
     *
     * @private
     * @name add
     * @memberOf SetCache
     * @alias push
     * @param {*} value The value to cache.
     * @returns {Object} Returns the cache instance.
     */
    function setCacheAdd$1(value) {
      this.__data__.set(value, HASH_UNDEFINED);
      return this;
    }

    var _setCacheAdd = setCacheAdd$1;

    /**
     * Checks if `value` is in the array cache.
     *
     * @private
     * @name has
     * @memberOf SetCache
     * @param {*} value The value to search for.
     * @returns {number} Returns `true` if `value` is found, else `false`.
     */

    function setCacheHas$1(value) {
      return this.__data__.has(value);
    }

    var _setCacheHas = setCacheHas$1;

    var MapCache = _MapCache,
        setCacheAdd = _setCacheAdd,
        setCacheHas = _setCacheHas;

    /**
     *
     * Creates an array cache object to store unique values.
     *
     * @private
     * @constructor
     * @param {Array} [values] The values to cache.
     */
    function SetCache$2(values) {
      var index = -1,
          length = values == null ? 0 : values.length;

      this.__data__ = new MapCache;
      while (++index < length) {
        this.add(values[index]);
      }
    }

    // Add methods to `SetCache`.
    SetCache$2.prototype.add = SetCache$2.prototype.push = setCacheAdd;
    SetCache$2.prototype.has = setCacheHas;

    var _SetCache = SetCache$2;

    /**
     * A specialized version of `_.some` for arrays without support for iteratee
     * shorthands.
     *
     * @private
     * @param {Array} [array] The array to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     */

    function arraySome$1(array, predicate) {
      var index = -1,
          length = array == null ? 0 : array.length;

      while (++index < length) {
        if (predicate(array[index], index, array)) {
          return true;
        }
      }
      return false;
    }

    var _arraySome = arraySome$1;

    /**
     * Checks if a `cache` value for `key` exists.
     *
     * @private
     * @param {Object} cache The cache to query.
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */

    function cacheHas$2(cache, key) {
      return cache.has(key);
    }

    var _cacheHas = cacheHas$2;

    var SetCache$1 = _SetCache,
        arraySome = _arraySome,
        cacheHas$1 = _cacheHas;

    /** Used to compose bitmasks for value comparisons. */
    var COMPARE_PARTIAL_FLAG$5 = 1,
        COMPARE_UNORDERED_FLAG$3 = 2;

    /**
     * A specialized version of `baseIsEqualDeep` for arrays with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Array} array The array to compare.
     * @param {Array} other The other array to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `array` and `other` objects.
     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
     */
    function equalArrays$2(array, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG$5,
          arrLength = array.length,
          othLength = other.length;

      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
        return false;
      }
      // Check that cyclic values are equal.
      var arrStacked = stack.get(array);
      var othStacked = stack.get(other);
      if (arrStacked && othStacked) {
        return arrStacked == other && othStacked == array;
      }
      var index = -1,
          result = true,
          seen = (bitmask & COMPARE_UNORDERED_FLAG$3) ? new SetCache$1 : undefined;

      stack.set(array, other);
      stack.set(other, array);

      // Ignore non-index properties.
      while (++index < arrLength) {
        var arrValue = array[index],
            othValue = other[index];

        if (customizer) {
          var compared = isPartial
            ? customizer(othValue, arrValue, index, other, array, stack)
            : customizer(arrValue, othValue, index, array, other, stack);
        }
        if (compared !== undefined) {
          if (compared) {
            continue;
          }
          result = false;
          break;
        }
        // Recursively compare arrays (susceptible to call stack limits).
        if (seen) {
          if (!arraySome(other, function(othValue, othIndex) {
                if (!cacheHas$1(seen, othIndex) &&
                    (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
                  return seen.push(othIndex);
                }
              })) {
            result = false;
            break;
          }
        } else if (!(
              arrValue === othValue ||
                equalFunc(arrValue, othValue, bitmask, customizer, stack)
            )) {
          result = false;
          break;
        }
      }
      stack['delete'](array);
      stack['delete'](other);
      return result;
    }

    var _equalArrays = equalArrays$2;

    /**
     * Converts `map` to its key-value pairs.
     *
     * @private
     * @param {Object} map The map to convert.
     * @returns {Array} Returns the key-value pairs.
     */

    function mapToArray$1(map) {
      var index = -1,
          result = Array(map.size);

      map.forEach(function(value, key) {
        result[++index] = [key, value];
      });
      return result;
    }

    var _mapToArray = mapToArray$1;

    /**
     * Converts `set` to an array of its values.
     *
     * @private
     * @param {Object} set The set to convert.
     * @returns {Array} Returns the values.
     */

    function setToArray$3(set) {
      var index = -1,
          result = Array(set.size);

      set.forEach(function(value) {
        result[++index] = value;
      });
      return result;
    }

    var _setToArray = setToArray$3;

    var Symbol$1 = _Symbol,
        Uint8Array$1 = _Uint8Array,
        eq$1 = eq_1,
        equalArrays$1 = _equalArrays,
        mapToArray = _mapToArray,
        setToArray$2 = _setToArray;

    /** Used to compose bitmasks for value comparisons. */
    var COMPARE_PARTIAL_FLAG$4 = 1,
        COMPARE_UNORDERED_FLAG$2 = 2;

    /** `Object#toString` result references. */
    var boolTag$1 = '[object Boolean]',
        dateTag = '[object Date]',
        errorTag = '[object Error]',
        mapTag = '[object Map]',
        numberTag = '[object Number]',
        regexpTag = '[object RegExp]',
        setTag = '[object Set]',
        stringTag$1 = '[object String]',
        symbolTag = '[object Symbol]';

    var arrayBufferTag = '[object ArrayBuffer]',
        dataViewTag = '[object DataView]';

    /** Used to convert symbols to primitives and strings. */
    var symbolProto = Symbol$1 ? Symbol$1.prototype : undefined,
        symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;

    /**
     * A specialized version of `baseIsEqualDeep` for comparing objects of
     * the same `toStringTag`.
     *
     * **Note:** This function only supports comparing values with tags of
     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {string} tag The `toStringTag` of the objects to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalByTag$1(object, other, tag, bitmask, customizer, equalFunc, stack) {
      switch (tag) {
        case dataViewTag:
          if ((object.byteLength != other.byteLength) ||
              (object.byteOffset != other.byteOffset)) {
            return false;
          }
          object = object.buffer;
          other = other.buffer;

        case arrayBufferTag:
          if ((object.byteLength != other.byteLength) ||
              !equalFunc(new Uint8Array$1(object), new Uint8Array$1(other))) {
            return false;
          }
          return true;

        case boolTag$1:
        case dateTag:
        case numberTag:
          // Coerce booleans to `1` or `0` and dates to milliseconds.
          // Invalid dates are coerced to `NaN`.
          return eq$1(+object, +other);

        case errorTag:
          return object.name == other.name && object.message == other.message;

        case regexpTag:
        case stringTag$1:
          // Coerce regexes to strings and treat strings, primitives and objects,
          // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
          // for more details.
          return object == (other + '');

        case mapTag:
          var convert = mapToArray;

        case setTag:
          var isPartial = bitmask & COMPARE_PARTIAL_FLAG$4;
          convert || (convert = setToArray$2);

          if (object.size != other.size && !isPartial) {
            return false;
          }
          // Assume cyclic values are equal.
          var stacked = stack.get(object);
          if (stacked) {
            return stacked == other;
          }
          bitmask |= COMPARE_UNORDERED_FLAG$2;

          // Recursively compare objects (susceptible to call stack limits).
          stack.set(object, other);
          var result = equalArrays$1(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
          stack['delete'](object);
          return result;

        case symbolTag:
          if (symbolValueOf) {
            return symbolValueOf.call(object) == symbolValueOf.call(other);
          }
      }
      return false;
    }

    var _equalByTag = equalByTag$1;

    var getAllKeys = _getAllKeys;

    /** Used to compose bitmasks for value comparisons. */
    var COMPARE_PARTIAL_FLAG$3 = 1;

    /** Used for built-in method references. */
    var objectProto$3 = Object.prototype;

    /** Used to check objects for own properties. */
    var hasOwnProperty$3 = objectProto$3.hasOwnProperty;

    /**
     * A specialized version of `baseIsEqualDeep` for objects with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalObjects$1(object, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG$3,
          objProps = getAllKeys(object),
          objLength = objProps.length,
          othProps = getAllKeys(other),
          othLength = othProps.length;

      if (objLength != othLength && !isPartial) {
        return false;
      }
      var index = objLength;
      while (index--) {
        var key = objProps[index];
        if (!(isPartial ? key in other : hasOwnProperty$3.call(other, key))) {
          return false;
        }
      }
      // Check that cyclic values are equal.
      var objStacked = stack.get(object);
      var othStacked = stack.get(other);
      if (objStacked && othStacked) {
        return objStacked == other && othStacked == object;
      }
      var result = true;
      stack.set(object, other);
      stack.set(other, object);

      var skipCtor = isPartial;
      while (++index < objLength) {
        key = objProps[index];
        var objValue = object[key],
            othValue = other[key];

        if (customizer) {
          var compared = isPartial
            ? customizer(othValue, objValue, key, other, object, stack)
            : customizer(objValue, othValue, key, object, other, stack);
        }
        // Recursively compare objects (susceptible to call stack limits).
        if (!(compared === undefined
              ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))
              : compared
            )) {
          result = false;
          break;
        }
        skipCtor || (skipCtor = key == 'constructor');
      }
      if (result && !skipCtor) {
        var objCtor = object.constructor,
            othCtor = other.constructor;

        // Non `Object` object instances with different constructors are not equal.
        if (objCtor != othCtor &&
            ('constructor' in object && 'constructor' in other) &&
            !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
              typeof othCtor == 'function' && othCtor instanceof othCtor)) {
          result = false;
        }
      }
      stack['delete'](object);
      stack['delete'](other);
      return result;
    }

    var _equalObjects = equalObjects$1;

    var Stack$1 = _Stack,
        equalArrays = _equalArrays,
        equalByTag = _equalByTag,
        equalObjects = _equalObjects,
        getTag = _getTag,
        isArray$6 = isArray_1,
        isBuffer = isBuffer$3.exports,
        isTypedArray = isTypedArray_1;

    /** Used to compose bitmasks for value comparisons. */
    var COMPARE_PARTIAL_FLAG$2 = 1;

    /** `Object#toString` result references. */
    var argsTag = '[object Arguments]',
        arrayTag = '[object Array]',
        objectTag = '[object Object]';

    /** Used for built-in method references. */
    var objectProto$2 = Object.prototype;

    /** Used to check objects for own properties. */
    var hasOwnProperty$2 = objectProto$2.hasOwnProperty;

    /**
     * A specialized version of `baseIsEqual` for arrays and objects which performs
     * deep comparisons and tracks traversed objects enabling objects with circular
     * references to be compared.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} [stack] Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function baseIsEqualDeep$1(object, other, bitmask, customizer, equalFunc, stack) {
      var objIsArr = isArray$6(object),
          othIsArr = isArray$6(other),
          objTag = objIsArr ? arrayTag : getTag(object),
          othTag = othIsArr ? arrayTag : getTag(other);

      objTag = objTag == argsTag ? objectTag : objTag;
      othTag = othTag == argsTag ? objectTag : othTag;

      var objIsObj = objTag == objectTag,
          othIsObj = othTag == objectTag,
          isSameTag = objTag == othTag;

      if (isSameTag && isBuffer(object)) {
        if (!isBuffer(other)) {
          return false;
        }
        objIsArr = true;
        objIsObj = false;
      }
      if (isSameTag && !objIsObj) {
        stack || (stack = new Stack$1);
        return (objIsArr || isTypedArray(object))
          ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)
          : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
      }
      if (!(bitmask & COMPARE_PARTIAL_FLAG$2)) {
        var objIsWrapped = objIsObj && hasOwnProperty$2.call(object, '__wrapped__'),
            othIsWrapped = othIsObj && hasOwnProperty$2.call(other, '__wrapped__');

        if (objIsWrapped || othIsWrapped) {
          var objUnwrapped = objIsWrapped ? object.value() : object,
              othUnwrapped = othIsWrapped ? other.value() : other;

          stack || (stack = new Stack$1);
          return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
        }
      }
      if (!isSameTag) {
        return false;
      }
      stack || (stack = new Stack$1);
      return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
    }

    var _baseIsEqualDeep = baseIsEqualDeep$1;

    var baseIsEqualDeep = _baseIsEqualDeep,
        isObjectLike$2 = isObjectLike_1;

    /**
     * The base implementation of `_.isEqual` which supports partial comparisons
     * and tracks traversed objects.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {boolean} bitmask The bitmask flags.
     *  1 - Unordered comparison
     *  2 - Partial comparison
     * @param {Function} [customizer] The function to customize comparisons.
     * @param {Object} [stack] Tracks traversed `value` and `other` objects.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     */
    function baseIsEqual$2(value, other, bitmask, customizer, stack) {
      if (value === other) {
        return true;
      }
      if (value == null || other == null || (!isObjectLike$2(value) && !isObjectLike$2(other))) {
        return value !== value && other !== other;
      }
      return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual$2, stack);
    }

    var _baseIsEqual = baseIsEqual$2;

    var Stack = _Stack,
        baseIsEqual$1 = _baseIsEqual;

    /** Used to compose bitmasks for value comparisons. */
    var COMPARE_PARTIAL_FLAG$1 = 1,
        COMPARE_UNORDERED_FLAG$1 = 2;

    /**
     * The base implementation of `_.isMatch` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Array} matchData The property names, values, and compare flags to match.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     */
    function baseIsMatch$1(object, source, matchData, customizer) {
      var index = matchData.length,
          length = index,
          noCustomizer = !customizer;

      if (object == null) {
        return !length;
      }
      object = Object(object);
      while (index--) {
        var data = matchData[index];
        if ((noCustomizer && data[2])
              ? data[1] !== object[data[0]]
              : !(data[0] in object)
            ) {
          return false;
        }
      }
      while (++index < length) {
        data = matchData[index];
        var key = data[0],
            objValue = object[key],
            srcValue = data[1];

        if (noCustomizer && data[2]) {
          if (objValue === undefined && !(key in object)) {
            return false;
          }
        } else {
          var stack = new Stack;
          if (customizer) {
            var result = customizer(objValue, srcValue, key, object, source, stack);
          }
          if (!(result === undefined
                ? baseIsEqual$1(srcValue, objValue, COMPARE_PARTIAL_FLAG$1 | COMPARE_UNORDERED_FLAG$1, customizer, stack)
                : result
              )) {
            return false;
          }
        }
      }
      return true;
    }

    var _baseIsMatch = baseIsMatch$1;

    var isObject$1 = isObject_1;

    /**
     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` if suitable for strict
     *  equality comparisons, else `false`.
     */
    function isStrictComparable$2(value) {
      return value === value && !isObject$1(value);
    }

    var _isStrictComparable = isStrictComparable$2;

    var isStrictComparable$1 = _isStrictComparable,
        keys$3 = keys_1;

    /**
     * Gets the property names, values, and compare flags of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the match data of `object`.
     */
    function getMatchData$1(object) {
      var result = keys$3(object),
          length = result.length;

      while (length--) {
        var key = result[length],
            value = object[key];

        result[length] = [key, value, isStrictComparable$1(value)];
      }
      return result;
    }

    var _getMatchData = getMatchData$1;

    /**
     * A specialized version of `matchesProperty` for source values suitable
     * for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {string} key The key of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     */

    function matchesStrictComparable$2(key, srcValue) {
      return function(object) {
        if (object == null) {
          return false;
        }
        return object[key] === srcValue &&
          (srcValue !== undefined || (key in Object(object)));
      };
    }

    var _matchesStrictComparable = matchesStrictComparable$2;

    var baseIsMatch = _baseIsMatch,
        getMatchData = _getMatchData,
        matchesStrictComparable$1 = _matchesStrictComparable;

    /**
     * The base implementation of `_.matches` which doesn't clone `source`.
     *
     * @private
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new spec function.
     */
    function baseMatches$1(source) {
      var matchData = getMatchData(source);
      if (matchData.length == 1 && matchData[0][2]) {
        return matchesStrictComparable$1(matchData[0][0], matchData[0][1]);
      }
      return function(object) {
        return object === source || baseIsMatch(object, source, matchData);
      };
    }

    var _baseMatches = baseMatches$1;

    /**
     * The base implementation of `_.hasIn` without support for deep paths.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {Array|string} key The key to check.
     * @returns {boolean} Returns `true` if `key` exists, else `false`.
     */

    function baseHasIn$1(object, key) {
      return object != null && key in Object(object);
    }

    var _baseHasIn = baseHasIn$1;

    var castPath = _castPath,
        isArguments = isArguments_1,
        isArray$5 = isArray_1,
        isIndex = _isIndex,
        isLength = isLength_1,
        toKey$2 = _toKey;

    /**
     * Checks if `path` exists on `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @param {Function} hasFunc The function to check properties.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     */
    function hasPath$1(object, path, hasFunc) {
      path = castPath(path, object);

      var index = -1,
          length = path.length,
          result = false;

      while (++index < length) {
        var key = toKey$2(path[index]);
        if (!(result = object != null && hasFunc(object, key))) {
          break;
        }
        object = object[key];
      }
      if (result || ++index != length) {
        return result;
      }
      length = object == null ? 0 : object.length;
      return !!length && isLength(length) && isIndex(key, length) &&
        (isArray$5(object) || isArguments(object));
    }

    var _hasPath = hasPath$1;

    var baseHasIn = _baseHasIn,
        hasPath = _hasPath;

    /**
     * Checks if `path` is a direct or inherited property of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     * @example
     *
     * var object = _.create({ 'a': _.create({ 'b': 2 }) });
     *
     * _.hasIn(object, 'a');
     * // => true
     *
     * _.hasIn(object, 'a.b');
     * // => true
     *
     * _.hasIn(object, ['a', 'b']);
     * // => true
     *
     * _.hasIn(object, 'b');
     * // => false
     */
    function hasIn$1(object, path) {
      return object != null && hasPath(object, path, baseHasIn);
    }

    var hasIn_1 = hasIn$1;

    var baseIsEqual = _baseIsEqual,
        get = get_1,
        hasIn = hasIn_1,
        isKey$1 = _isKey,
        isStrictComparable = _isStrictComparable,
        matchesStrictComparable = _matchesStrictComparable,
        toKey$1 = _toKey;

    /** Used to compose bitmasks for value comparisons. */
    var COMPARE_PARTIAL_FLAG = 1,
        COMPARE_UNORDERED_FLAG = 2;

    /**
     * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
     *
     * @private
     * @param {string} path The path of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     */
    function baseMatchesProperty$1(path, srcValue) {
      if (isKey$1(path) && isStrictComparable(srcValue)) {
        return matchesStrictComparable(toKey$1(path), srcValue);
      }
      return function(object) {
        var objValue = get(object, path);
        return (objValue === undefined && objValue === srcValue)
          ? hasIn(object, path)
          : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
      };
    }

    var _baseMatchesProperty = baseMatchesProperty$1;

    /**
     * The base implementation of `_.property` without support for deep paths.
     *
     * @private
     * @param {string} key The key of the property to get.
     * @returns {Function} Returns the new accessor function.
     */

    function baseProperty$1(key) {
      return function(object) {
        return object == null ? undefined : object[key];
      };
    }

    var _baseProperty = baseProperty$1;

    var baseGet = _baseGet;

    /**
     * A specialized version of `baseProperty` which supports deep paths.
     *
     * @private
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new accessor function.
     */
    function basePropertyDeep$1(path) {
      return function(object) {
        return baseGet(object, path);
      };
    }

    var _basePropertyDeep = basePropertyDeep$1;

    var baseProperty = _baseProperty,
        basePropertyDeep = _basePropertyDeep,
        isKey = _isKey,
        toKey = _toKey;

    /**
     * Creates a function that returns the value at `path` of a given object.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Util
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new accessor function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': 2 } },
     *   { 'a': { 'b': 1 } }
     * ];
     *
     * _.map(objects, _.property('a.b'));
     * // => [2, 1]
     *
     * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
     * // => [1, 2]
     */
    function property$1(path) {
      return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
    }

    var property_1 = property$1;

    var baseMatches = _baseMatches,
        baseMatchesProperty = _baseMatchesProperty,
        identity$1 = identity_1,
        isArray$4 = isArray_1,
        property = property_1;

    /**
     * The base implementation of `_.iteratee`.
     *
     * @private
     * @param {*} [value=_.identity] The value to convert to an iteratee.
     * @returns {Function} Returns the iteratee.
     */
    function baseIteratee$4(value) {
      // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
      // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
      if (typeof value == 'function') {
        return value;
      }
      if (value == null) {
        return identity$1;
      }
      if (typeof value == 'object') {
        return isArray$4(value)
          ? baseMatchesProperty(value[0], value[1])
          : baseMatches(value);
      }
      return property(value);
    }

    var _baseIteratee = baseIteratee$4;

    /** Used to match a single whitespace character. */

    var reWhitespace = /\s/;

    /**
     * Used by `_.trim` and `_.trimEnd` to get the index of the last non-whitespace
     * character of `string`.
     *
     * @private
     * @param {string} string The string to inspect.
     * @returns {number} Returns the index of the last non-whitespace character.
     */
    function trimmedEndIndex$1(string) {
      var index = string.length;

      while (index-- && reWhitespace.test(string.charAt(index))) {}
      return index;
    }

    var _trimmedEndIndex = trimmedEndIndex$1;

    var trimmedEndIndex = _trimmedEndIndex;

    /** Used to match leading whitespace. */
    var reTrimStart = /^\s+/;

    /**
     * The base implementation of `_.trim`.
     *
     * @private
     * @param {string} string The string to trim.
     * @returns {string} Returns the trimmed string.
     */
    function baseTrim$1(string) {
      return string
        ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, '')
        : string;
    }

    var _baseTrim = baseTrim$1;

    var baseTrim = _baseTrim,
        isObject = isObject_1,
        isSymbol = isSymbol_1;

    /** Used as references for various `Number` constants. */
    var NAN = 0 / 0;

    /** Used to detect bad signed hexadecimal string values. */
    var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

    /** Used to detect binary string values. */
    var reIsBinary = /^0b[01]+$/i;

    /** Used to detect octal string values. */
    var reIsOctal = /^0o[0-7]+$/i;

    /** Built-in method references without a dependency on `root`. */
    var freeParseInt = parseInt;

    /**
     * Converts `value` to a number.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to process.
     * @returns {number} Returns the number.
     * @example
     *
     * _.toNumber(3.2);
     * // => 3.2
     *
     * _.toNumber(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toNumber(Infinity);
     * // => Infinity
     *
     * _.toNumber('3.2');
     * // => 3.2
     */
    function toNumber$1(value) {
      if (typeof value == 'number') {
        return value;
      }
      if (isSymbol(value)) {
        return NAN;
      }
      if (isObject(value)) {
        var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
        value = isObject(other) ? (other + '') : other;
      }
      if (typeof value != 'string') {
        return value === 0 ? value : +value;
      }
      value = baseTrim(value);
      var isBinary = reIsBinary.test(value);
      return (isBinary || reIsOctal.test(value))
        ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
        : (reIsBadHex.test(value) ? NAN : +value);
    }

    var toNumber_1 = toNumber$1;

    var toNumber = toNumber_1;

    /** Used as references for various `Number` constants. */
    var INFINITY$1 = 1 / 0,
        MAX_INTEGER = 1.7976931348623157e+308;

    /**
     * Converts `value` to a finite number.
     *
     * @static
     * @memberOf _
     * @since 4.12.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted number.
     * @example
     *
     * _.toFinite(3.2);
     * // => 3.2
     *
     * _.toFinite(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toFinite(Infinity);
     * // => 1.7976931348623157e+308
     *
     * _.toFinite('3.2');
     * // => 3.2
     */
    function toFinite$1(value) {
      if (!value) {
        return value === 0 ? value : 0;
      }
      value = toNumber(value);
      if (value === INFINITY$1 || value === -INFINITY$1) {
        var sign = (value < 0 ? -1 : 1);
        return sign * MAX_INTEGER;
      }
      return value === value ? value : 0;
    }

    var toFinite_1 = toFinite$1;

    var toFinite = toFinite_1;

    /**
     * Converts `value` to an integer.
     *
     * **Note:** This method is loosely based on
     * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toInteger(3.2);
     * // => 3
     *
     * _.toInteger(Number.MIN_VALUE);
     * // => 0
     *
     * _.toInteger(Infinity);
     * // => 1.7976931348623157e+308
     *
     * _.toInteger('3.2');
     * // => 3
     */
    function toInteger$1(value) {
      var result = toFinite(value),
          remainder = result % 1;

      return result === result ? (remainder ? result - remainder : result) : 0;
    }

    var toInteger_1 = toInteger$1;

    var baseFindIndex$1 = _baseFindIndex,
        baseIteratee$3 = _baseIteratee,
        toInteger = toInteger_1;

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeMax = Math.max;

    /**
     * This method is like `_.find` except that it returns the index of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.findIndex(users, function(o) { return o.user == 'barney'; });
     * // => 0
     *
     * // The `_.matches` iteratee shorthand.
     * _.findIndex(users, { 'user': 'fred', 'active': false });
     * // => 1
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findIndex(users, ['active', false]);
     * // => 0
     *
     * // The `_.property` iteratee shorthand.
     * _.findIndex(users, 'active');
     * // => 2
     */
    function findIndex$1(array, predicate, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = fromIndex == null ? 0 : toInteger(fromIndex);
      if (index < 0) {
        index = nativeMax(length + index, 0);
      }
      return baseFindIndex$1(array, baseIteratee$3(predicate), index);
    }

    var findIndex_1 = findIndex$1;

    var baseGetTag$1 = _baseGetTag,
        isArray$3 = isArray_1,
        isObjectLike$1 = isObjectLike_1;

    /** `Object#toString` result references. */
    var stringTag = '[object String]';

    /**
     * Checks if `value` is classified as a `String` primitive or object.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a string, else `false`.
     * @example
     *
     * _.isString('abc');
     * // => true
     *
     * _.isString(1);
     * // => false
     */
    function isString(value) {
      return typeof value == 'string' ||
        (!isArray$3(value) && isObjectLike$1(value) && baseGetTag$1(value) == stringTag);
    }

    var isString_1 = isString;

    var cliCursor$3 = {};

    var onetime$2 = {exports: {}};

    var mimicFn$2 = {exports: {}};

    const mimicFn$1 = (to, from) => {
    	for (const prop of Reflect.ownKeys(from)) {
    		Object.defineProperty(to, prop, Object.getOwnPropertyDescriptor(from, prop));
    	}

    	return to;
    };

    mimicFn$2.exports = mimicFn$1;
    // TODO: Remove this for the next major release
    mimicFn$2.exports.default = mimicFn$1;

    const mimicFn = mimicFn$2.exports;

    const calledFunctions = new WeakMap();

    const onetime$1 = (function_, options = {}) => {
    	if (typeof function_ !== 'function') {
    		throw new TypeError('Expected a function');
    	}

    	let returnValue;
    	let callCount = 0;
    	const functionName = function_.displayName || function_.name || '<anonymous>';

    	const onetime = function (...arguments_) {
    		calledFunctions.set(onetime, ++callCount);

    		if (callCount === 1) {
    			returnValue = function_.apply(this, arguments_);
    			function_ = null;
    		} else if (options.throw === true) {
    			throw new Error(`Function \`${functionName}\` can only be called once`);
    		}

    		return returnValue;
    	};

    	mimicFn(onetime, function_);
    	calledFunctions.set(onetime, callCount);

    	return onetime;
    };

    onetime$2.exports = onetime$1;
    // TODO: Remove this for the next major release
    onetime$2.exports.default = onetime$1;

    onetime$2.exports.callCount = function_ => {
    	if (!calledFunctions.has(function_)) {
    		throw new Error(`The given function \`${function_.name}\` is not wrapped by the \`onetime\` package`);
    	}

    	return calledFunctions.get(function_);
    };

    const onetime = onetime$2.exports;
    const signalExit = signalExit$3.exports;

    var restoreCursor = onetime(() => {
    	signalExit(() => {
    		process.stderr.write('\u001B[?25h');
    	}, {alwaysLast: true});
    });

    (function (exports) {
    const restoreCursor$1 = restoreCursor;

    let isHidden = false;

    exports.show = (writableStream = process.stderr) => {
    	if (!writableStream.isTTY) {
    		return;
    	}

    	isHidden = false;
    	writableStream.write('\u001B[?25h');
    };

    exports.hide = (writableStream = process.stderr) => {
    	if (!writableStream.isTTY) {
    		return;
    	}

    	restoreCursor$1();
    	isHidden = true;
    	writableStream.write('\u001B[?25l');
    };

    exports.toggle = (force, writableStream) => {
    	if (force !== undefined) {
    		isHidden = force;
    	}

    	if (isHidden) {
    		exports.show(writableStream);
    	} else {
    		exports.hide(writableStream);
    	}
    };
    }(cliCursor$3));

    var assignValue = _assignValue,
        copyObject = _copyObject,
        createAssigner = _createAssigner,
        isArrayLike$3 = isArrayLike_1,
        isPrototype = _isPrototype,
        keys$2 = keys_1;

    /** Used for built-in method references. */
    var objectProto$1 = Object.prototype;

    /** Used to check objects for own properties. */
    var hasOwnProperty$1 = objectProto$1.hasOwnProperty;

    /**
     * Assigns own enumerable string keyed properties of source objects to the
     * destination object. Source objects are applied from left to right.
     * Subsequent sources overwrite property assignments of previous sources.
     *
     * **Note:** This method mutates `object` and is loosely based on
     * [`Object.assign`](https://mdn.io/Object/assign).
     *
     * @static
     * @memberOf _
     * @since 0.10.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.assignIn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * function Bar() {
     *   this.c = 3;
     * }
     *
     * Foo.prototype.b = 2;
     * Bar.prototype.d = 4;
     *
     * _.assign({ 'a': 0 }, new Foo, new Bar);
     * // => { 'a': 1, 'c': 3 }
     */
    var assign = createAssigner(function(object, source) {
      if (isPrototype(source) || isArrayLike$3(source)) {
        copyObject(source, keys$2(source), object);
        return;
      }
      for (var key in source) {
        if (hasOwnProperty$1.call(source, key)) {
          assignValue(object, key, source[key]);
        }
      }
    });

    var assign_1 = assign;

    var baseRest = _baseRest,
        eq = eq_1,
        isIterateeCall = _isIterateeCall,
        keysIn = keysIn_1;

    /** Used for built-in method references. */
    var objectProto = Object.prototype;

    /** Used to check objects for own properties. */
    var hasOwnProperty = objectProto.hasOwnProperty;

    /**
     * Assigns own and inherited enumerable string keyed properties of source
     * objects to the destination object for all destination properties that
     * resolve to `undefined`. Source objects are applied from left to right.
     * Once a property is set, additional values of the same property are ignored.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.defaultsDeep
     * @example
     *
     * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var defaults$2 = baseRest(function(object, sources) {
      object = Object(object);

      var index = -1;
      var length = sources.length;
      var guard = length > 2 ? sources[2] : undefined;

      if (guard && isIterateeCall(sources[0], sources[1], guard)) {
        length = 1;
      }

      while (++index < length) {
        var source = sources[index];
        var props = keysIn(source);
        var propsIndex = -1;
        var propsLength = props.length;

        while (++propsIndex < propsLength) {
          var key = props[propsIndex];
          var value = object[key];

          if (value === undefined ||
              (eq(value, objectProto[key]) && !hasOwnProperty.call(object, key))) {
            object[key] = source[key];
          }
        }
      }

      return object;
    });

    var defaults_1 = defaults$2;

    /**
     * Creates a base function for methods like `_.forIn` and `_.forOwn`.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */

    function createBaseFor$1(fromRight) {
      return function(object, iteratee, keysFunc) {
        var index = -1,
            iterable = Object(object),
            props = keysFunc(object),
            length = props.length;

        while (length--) {
          var key = props[fromRight ? length : ++index];
          if (iteratee(iterable[key], key, iterable) === false) {
            break;
          }
        }
        return object;
      };
    }

    var _createBaseFor = createBaseFor$1;

    var createBaseFor = _createBaseFor;

    /**
     * The base implementation of `baseForOwn` which iterates over `object`
     * properties returned by `keysFunc` and invokes `iteratee` for each property.
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */
    var baseFor$1 = createBaseFor();

    var _baseFor = baseFor$1;

    var baseFor = _baseFor,
        keys$1 = keys_1;

    /**
     * The base implementation of `_.forOwn` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForOwn$1(object, iteratee) {
      return object && baseFor(object, iteratee, keys$1);
    }

    var _baseForOwn = baseForOwn$1;

    var isArrayLike$2 = isArrayLike_1;

    /**
     * Creates a `baseEach` or `baseEachRight` function.
     *
     * @private
     * @param {Function} eachFunc The function to iterate over a collection.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */
    function createBaseEach$1(eachFunc, fromRight) {
      return function(collection, iteratee) {
        if (collection == null) {
          return collection;
        }
        if (!isArrayLike$2(collection)) {
          return eachFunc(collection, iteratee);
        }
        var length = collection.length,
            index = fromRight ? length : -1,
            iterable = Object(collection);

        while ((fromRight ? index-- : ++index < length)) {
          if (iteratee(iterable[index], index, iterable) === false) {
            break;
          }
        }
        return collection;
      };
    }

    var _createBaseEach = createBaseEach$1;

    var baseForOwn = _baseForOwn,
        createBaseEach = _createBaseEach;

    /**
     * The base implementation of `_.forEach` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     */
    var baseEach$2 = createBaseEach(baseForOwn);

    var _baseEach = baseEach$2;

    var baseEach$1 = _baseEach;

    /**
     * The base implementation of `_.filter` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     */
    function baseFilter$1(collection, predicate) {
      var result = [];
      baseEach$1(collection, function(value, index, collection) {
        if (predicate(value, index, collection)) {
          result.push(value);
        }
      });
      return result;
    }

    var _baseFilter = baseFilter$1;

    var arrayFilter = _arrayFilter,
        baseFilter = _baseFilter,
        baseIteratee$2 = _baseIteratee,
        isArray$2 = isArray_1;

    /**
     * Iterates over elements of `collection`, returning an array of all elements
     * `predicate` returns truthy for. The predicate is invoked with three
     * arguments: (value, index|key, collection).
     *
     * **Note:** Unlike `_.remove`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     * @see _.reject
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * _.filter(users, function(o) { return !o.active; });
     * // => objects for ['fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.filter(users, { 'age': 36, 'active': true });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.filter(users, ['active', false]);
     * // => objects for ['fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.filter(users, 'active');
     * // => objects for ['barney']
     *
     * // Combining several predicates using `_.overEvery` or `_.overSome`.
     * _.filter(users, _.overSome([{ 'age': 36 }, ['age', 40]]));
     * // => objects for ['fred', 'barney']
     */
    function filter$3(collection, predicate) {
      var func = isArray$2(collection) ? arrayFilter : baseFilter;
      return func(collection, baseIteratee$2(predicate));
    }

    var filter_1 = filter$3;

    var baseEach = _baseEach,
        isArrayLike$1 = isArrayLike_1;

    /**
     * The base implementation of `_.map` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     */
    function baseMap$1(collection, iteratee) {
      var index = -1,
          result = isArrayLike$1(collection) ? Array(collection.length) : [];

      baseEach(collection, function(value, key, collection) {
        result[++index] = iteratee(value, key, collection);
      });
      return result;
    }

    var _baseMap = baseMap$1;

    var arrayMap = _arrayMap,
        baseIteratee$1 = _baseIteratee,
        baseMap = _baseMap,
        isArray$1 = isArray_1;

    /**
     * Creates an array of values by running each element in `collection` thru
     * `iteratee`. The iteratee is invoked with three arguments:
     * (value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
     *
     * The guarded methods are:
     * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
     * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
     * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
     * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * _.map([4, 8], square);
     * // => [16, 64]
     *
     * _.map({ 'a': 4, 'b': 8 }, square);
     * // => [16, 64] (iteration order is not guaranteed)
     *
     * var users = [
     *   { 'user': 'barney' },
     *   { 'user': 'fred' }
     * ];
     *
     * // The `_.property` iteratee shorthand.
     * _.map(users, 'user');
     * // => ['barney', 'fred']
     */
    function map$7(collection, iteratee) {
      var func = isArray$1(collection) ? arrayMap : baseMap;
      return func(collection, baseIteratee$1(iteratee));
    }

    var map_1 = map$7;

    var baseIteratee = _baseIteratee,
        isArrayLike = isArrayLike_1,
        keys = keys_1;

    /**
     * Creates a `_.find` or `_.findLast` function.
     *
     * @private
     * @param {Function} findIndexFunc The function to find the collection index.
     * @returns {Function} Returns the new find function.
     */
    function createFind$1(findIndexFunc) {
      return function(collection, predicate, fromIndex) {
        var iterable = Object(collection);
        if (!isArrayLike(collection)) {
          var iteratee = baseIteratee(predicate);
          collection = keys(collection);
          predicate = function(key) { return iteratee(iterable[key], key, iterable); };
        }
        var index = findIndexFunc(collection, predicate, fromIndex);
        return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;
      };
    }

    var _createFind = createFind$1;

    var createFind = _createFind,
        findIndex = findIndex_1;

    /**
     * Iterates over elements of `collection`, returning the first element
     * `predicate` returns truthy for. The predicate is invoked with three
     * arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': true },
     *   { 'user': 'fred',    'age': 40, 'active': false },
     *   { 'user': 'pebbles', 'age': 1,  'active': true }
     * ];
     *
     * _.find(users, function(o) { return o.age < 40; });
     * // => object for 'barney'
     *
     * // The `_.matches` iteratee shorthand.
     * _.find(users, { 'age': 1, 'active': true });
     * // => object for 'pebbles'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.find(users, ['active', false]);
     * // => object for 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.find(users, 'active');
     * // => object for 'barney'
     */
    var find = createFind(findIndex);

    var find_1 = find;

    const _$9 = {
      isString: isString_1,
      isNumber: isNumber_1,
      extend: extend$1,
      isFunction: isFunction_1,
    };

    /**
     * Choice object
     * Normalize input as choice object
     * @constructor
     * @param {Number|String|Object} val  Choice value. If an object is passed, it should contains
     *                                    at least one of `value` or `name` property
     */

    var choice = class Choice {
      constructor(val, answers) {
        // Don't process Choice and Separator object
        if (val instanceof Choice || val.type === 'separator') {
          // eslint-disable-next-line no-constructor-return
          return val;
        }

        if (_$9.isString(val) || _$9.isNumber(val)) {
          this.name = String(val);
          this.value = val;
          this.short = String(val);
        } else {
          _$9.extend(this, val, {
            name: val.name || val.value,
            value: 'value' in val ? val.value : val.name,
            short: val.short || val.name || val.value,
          });
        }

        if (_$9.isFunction(val.disabled)) {
          this.disabled = val.disabled(answers);
        } else {
          this.disabled = val.disabled;
        }
      }
    };

    const assert$2 = require$$0__default$4["default"];
    const _$8 = {
      isNumber: isNumber_1,
      filter: filter_1,
      map: map_1,
      find: find_1,
    };
    const Separator$2 = separator;
    const Choice = choice;

    /**
     * Choices collection
     * Collection of multiple `choice` object
     * @constructor
     * @param {Array} choices  All `choice` to keep in the collection
     */

    var choices = class Choices {
      constructor(choices, answers) {
        this.choices = choices.map((val) => {
          if (val.type === 'separator') {
            if (!(val instanceof Separator$2)) {
              val = new Separator$2(val.line);
            }

            return val;
          }

          return new Choice(val, answers);
        });

        this.realChoices = this.choices
          .filter(Separator$2.exclude)
          .filter((item) => !item.disabled);

        Object.defineProperty(this, 'length', {
          get() {
            return this.choices.length;
          },
          set(val) {
            this.choices.length = val;
          },
        });

        Object.defineProperty(this, 'realLength', {
          get() {
            return this.realChoices.length;
          },
          set() {
            throw new Error('Cannot set `realLength` of a Choices collection');
          },
        });
      }

      /**
       * Get a valid choice from the collection
       * @param  {Number} selector  The selected choice index
       * @return {Choice|Undefined} Return the matched choice or undefined
       */

      getChoice(selector) {
        assert$2(_$8.isNumber(selector));
        return this.realChoices[selector];
      }

      /**
       * Get a raw element from the collection
       * @param  {Number} selector  The selected index value
       * @return {Choice|Undefined} Return the matched choice or undefined
       */

      get(selector) {
        assert$2(_$8.isNumber(selector));
        return this.choices[selector];
      }

      /**
       * Match the valid choices against a where clause
       * @param  {Object} whereClause Lodash `where` clause
       * @return {Array}              Matching choices or empty array
       */

      where(whereClause) {
        return _$8.filter(this.realChoices, whereClause);
      }

      /**
       * Pluck a particular key from the choices
       * @param  {String} propertyName Property name to select
       * @return {Array}               Selected properties
       */

      pluck(propertyName) {
        return _$8.map(this.realChoices, propertyName);
      }

      // Expose usual Array methods
      indexOf(...args) {
        return this.choices.indexOf(...args);
      }

      forEach(...args) {
        return this.choices.forEach(...args);
      }

      filter(...args) {
        return this.choices.filter(...args);
      }

      reduce(...args) {
        return this.choices.reduce(...args);
      }

      find(func) {
        return _$8.find(this.choices, func);
      }

      push(...args) {
        const objs = _$8.map(args, (val) => new Choice(val));
        this.choices.push(...objs);
        this.realChoices = this.choices
          .filter(Separator$2.exclude)
          .filter((item) => !item.disabled);
        return this.choices;
      }
    };

    var cliWidth$1 = {exports: {}};

    (function (module, exports) {

    module.exports = cliWidth;

    function normalizeOpts(options) {
      let defaultOpts = {
        defaultWidth: 0,
        output: process.stdout,
        tty: require$$0__default$8["default"],
      };

      if (!options) {
        return defaultOpts;
      }

      Object.keys(defaultOpts).forEach(function (key) {
        if (!options[key]) {
          options[key] = defaultOpts[key];
        }
      });

      return options;
    }

    function cliWidth(options) {
      let opts = normalizeOpts(options);

      if (opts.output.getWindowSize) {
        return opts.output.getWindowSize()[0] || opts.defaultWidth;
      }

      if (opts.tty.getWindowSize) {
        return opts.tty.getWindowSize()[1] || opts.defaultWidth;
      }

      if (opts.output.columns) {
        return opts.output.columns;
      }

      if (process.env.CLI_WIDTH) {
        let width = parseInt(process.env.CLI_WIDTH, 10);

        if (!isNaN(width) && width !== 0) {
          return width;
        }
      }

      return opts.defaultWidth;
    }
    }(cliWidth$1));

    var ansiRegex$1 = ({onlyFirst = false} = {}) => {
    	const pattern = [
    		'[\\u001B\\u009B][[\\]()#;?]*(?:(?:(?:(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]+)*|[a-zA-Z\\d]+(?:;[-a-zA-Z\\d\\/#&.:=?%@~_]*)*)?\\u0007)',
    		'(?:(?:\\d{1,4}(?:;\\d{0,4})*)?[\\dA-PR-TZcf-ntqry=><~]))'
    	].join('|');

    	return new RegExp(pattern, onlyFirst ? undefined : 'g');
    };

    const ansiRegex = ansiRegex$1;

    var stripAnsi$3 = string => typeof string === 'string' ? string.replace(ansiRegex(), '') : string;

    var stringWidth$2 = {exports: {}};

    var isFullwidthCodePoint$2 = {exports: {}};

    /* eslint-disable yoda */

    const isFullwidthCodePoint$1 = codePoint => {
    	if (Number.isNaN(codePoint)) {
    		return false;
    	}

    	// Code points are derived from:
    	// http://www.unix.org/Public/UNIDATA/EastAsianWidth.txt
    	if (
    		codePoint >= 0x1100 && (
    			codePoint <= 0x115F || // Hangul Jamo
    			codePoint === 0x2329 || // LEFT-POINTING ANGLE BRACKET
    			codePoint === 0x232A || // RIGHT-POINTING ANGLE BRACKET
    			// CJK Radicals Supplement .. Enclosed CJK Letters and Months
    			(0x2E80 <= codePoint && codePoint <= 0x3247 && codePoint !== 0x303F) ||
    			// Enclosed CJK Letters and Months .. CJK Unified Ideographs Extension A
    			(0x3250 <= codePoint && codePoint <= 0x4DBF) ||
    			// CJK Unified Ideographs .. Yi Radicals
    			(0x4E00 <= codePoint && codePoint <= 0xA4C6) ||
    			// Hangul Jamo Extended-A
    			(0xA960 <= codePoint && codePoint <= 0xA97C) ||
    			// Hangul Syllables
    			(0xAC00 <= codePoint && codePoint <= 0xD7A3) ||
    			// CJK Compatibility Ideographs
    			(0xF900 <= codePoint && codePoint <= 0xFAFF) ||
    			// Vertical Forms
    			(0xFE10 <= codePoint && codePoint <= 0xFE19) ||
    			// CJK Compatibility Forms .. Small Form Variants
    			(0xFE30 <= codePoint && codePoint <= 0xFE6B) ||
    			// Halfwidth and Fullwidth Forms
    			(0xFF01 <= codePoint && codePoint <= 0xFF60) ||
    			(0xFFE0 <= codePoint && codePoint <= 0xFFE6) ||
    			// Kana Supplement
    			(0x1B000 <= codePoint && codePoint <= 0x1B001) ||
    			// Enclosed Ideographic Supplement
    			(0x1F200 <= codePoint && codePoint <= 0x1F251) ||
    			// CJK Unified Ideographs Extension B .. Tertiary Ideographic Plane
    			(0x20000 <= codePoint && codePoint <= 0x3FFFD)
    		)
    	) {
    		return true;
    	}

    	return false;
    };

    isFullwidthCodePoint$2.exports = isFullwidthCodePoint$1;
    isFullwidthCodePoint$2.exports.default = isFullwidthCodePoint$1;

    var emojiRegex$1 = function () {
      // https://mths.be/emoji
      return /\uD83C\uDFF4\uDB40\uDC67\uDB40\uDC62(?:\uDB40\uDC65\uDB40\uDC6E\uDB40\uDC67|\uDB40\uDC73\uDB40\uDC63\uDB40\uDC74|\uDB40\uDC77\uDB40\uDC6C\uDB40\uDC73)\uDB40\uDC7F|\uD83D\uDC68(?:\uD83C\uDFFC\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68\uD83C\uDFFB|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFF\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFB-\uDFFE])|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFE\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFB-\uDFFD])|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFD\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFB\uDFFC])|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\u200D(?:\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D)?\uD83D\uDC68|(?:\uD83D[\uDC68\uDC69])\u200D(?:\uD83D\uDC66\u200D\uD83D\uDC66|\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67]))|\uD83D\uDC66\u200D\uD83D\uDC66|\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67])|(?:\uD83D[\uDC68\uDC69])\u200D(?:\uD83D[\uDC66\uDC67])|[\u2695\u2696\u2708]\uFE0F|\uD83D[\uDC66\uDC67]|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|(?:\uD83C\uDFFB\u200D[\u2695\u2696\u2708]|\uD83C\uDFFF\u200D[\u2695\u2696\u2708]|\uD83C\uDFFE\u200D[\u2695\u2696\u2708]|\uD83C\uDFFD\u200D[\u2695\u2696\u2708]|\uD83C\uDFFC\u200D[\u2695\u2696\u2708])\uFE0F|\uD83C\uDFFB\u200D(?:\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C[\uDFFB-\uDFFF])|(?:\uD83E\uDDD1\uD83C\uDFFB\u200D\uD83E\uDD1D\u200D\uD83E\uDDD1|\uD83D\uDC69\uD83C\uDFFC\u200D\uD83E\uDD1D\u200D\uD83D\uDC69)\uD83C\uDFFB|\uD83E\uDDD1(?:\uD83C\uDFFF\u200D\uD83E\uDD1D\u200D\uD83E\uDDD1(?:\uD83C[\uDFFB-\uDFFF])|\u200D\uD83E\uDD1D\u200D\uD83E\uDDD1)|(?:\uD83E\uDDD1\uD83C\uDFFE\u200D\uD83E\uDD1D\u200D\uD83E\uDDD1|\uD83D\uDC69\uD83C\uDFFF\u200D\uD83E\uDD1D\u200D(?:\uD83D[\uDC68\uDC69]))(?:\uD83C[\uDFFB-\uDFFE])|(?:\uD83E\uDDD1\uD83C\uDFFC\u200D\uD83E\uDD1D\u200D\uD83E\uDDD1|\uD83D\uDC69\uD83C\uDFFD\u200D\uD83E\uDD1D\u200D\uD83D\uDC69)(?:\uD83C[\uDFFB\uDFFC])|\uD83D\uDC69(?:\uD83C\uDFFE\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFB-\uDFFD\uDFFF])|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFC\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFB\uDFFD-\uDFFF])|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFB\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFC-\uDFFF])|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFD\u200D(?:\uD83E\uDD1D\u200D\uD83D\uDC68(?:\uD83C[\uDFFB\uDFFC\uDFFE\uDFFF])|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\u200D(?:\u2764\uFE0F\u200D(?:\uD83D\uDC8B\u200D(?:\uD83D[\uDC68\uDC69])|\uD83D[\uDC68\uDC69])|\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD])|\uD83C\uDFFF\u200D(?:\uD83C[\uDF3E\uDF73\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E[\uDDAF-\uDDB3\uDDBC\uDDBD]))|\uD83D\uDC69\u200D\uD83D\uDC69\u200D(?:\uD83D\uDC66\u200D\uD83D\uDC66|\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67]))|(?:\uD83E\uDDD1\uD83C\uDFFD\u200D\uD83E\uDD1D\u200D\uD83E\uDDD1|\uD83D\uDC69\uD83C\uDFFE\u200D\uD83E\uDD1D\u200D\uD83D\uDC69)(?:\uD83C[\uDFFB-\uDFFD])|\uD83D\uDC69\u200D\uD83D\uDC66\u200D\uD83D\uDC66|\uD83D\uDC69\u200D\uD83D\uDC69\u200D(?:\uD83D[\uDC66\uDC67])|(?:\uD83D\uDC41\uFE0F\u200D\uD83D\uDDE8|\uD83D\uDC69(?:\uD83C\uDFFF\u200D[\u2695\u2696\u2708]|\uD83C\uDFFE\u200D[\u2695\u2696\u2708]|\uD83C\uDFFC\u200D[\u2695\u2696\u2708]|\uD83C\uDFFB\u200D[\u2695\u2696\u2708]|\uD83C\uDFFD\u200D[\u2695\u2696\u2708]|\u200D[\u2695\u2696\u2708])|(?:(?:\u26F9|\uD83C[\uDFCB\uDFCC]|\uD83D\uDD75)\uFE0F|\uD83D\uDC6F|\uD83E[\uDD3C\uDDDE\uDDDF])\u200D[\u2640\u2642]|(?:\u26F9|\uD83C[\uDFCB\uDFCC]|\uD83D\uDD75)(?:\uD83C[\uDFFB-\uDFFF])\u200D[\u2640\u2642]|(?:\uD83C[\uDFC3\uDFC4\uDFCA]|\uD83D[\uDC6E\uDC71\uDC73\uDC77\uDC81\uDC82\uDC86\uDC87\uDE45-\uDE47\uDE4B\uDE4D\uDE4E\uDEA3\uDEB4-\uDEB6]|\uD83E[\uDD26\uDD37-\uDD39\uDD3D\uDD3E\uDDB8\uDDB9\uDDCD-\uDDCF\uDDD6-\uDDDD])(?:(?:\uD83C[\uDFFB-\uDFFF])\u200D[\u2640\u2642]|\u200D[\u2640\u2642])|\uD83C\uDFF4\u200D\u2620)\uFE0F|\uD83D\uDC69\u200D\uD83D\uDC67\u200D(?:\uD83D[\uDC66\uDC67])|\uD83C\uDFF3\uFE0F\u200D\uD83C\uDF08|\uD83D\uDC15\u200D\uD83E\uDDBA|\uD83D\uDC69\u200D\uD83D\uDC66|\uD83D\uDC69\u200D\uD83D\uDC67|\uD83C\uDDFD\uD83C\uDDF0|\uD83C\uDDF4\uD83C\uDDF2|\uD83C\uDDF6\uD83C\uDDE6|[#\*0-9]\uFE0F\u20E3|\uD83C\uDDE7(?:\uD83C[\uDDE6\uDDE7\uDDE9-\uDDEF\uDDF1-\uDDF4\uDDF6-\uDDF9\uDDFB\uDDFC\uDDFE\uDDFF])|\uD83C\uDDF9(?:\uD83C[\uDDE6\uDDE8\uDDE9\uDDEB-\uDDED\uDDEF-\uDDF4\uDDF7\uDDF9\uDDFB\uDDFC\uDDFF])|\uD83C\uDDEA(?:\uD83C[\uDDE6\uDDE8\uDDEA\uDDEC\uDDED\uDDF7-\uDDFA])|\uD83E\uDDD1(?:\uD83C[\uDFFB-\uDFFF])|\uD83C\uDDF7(?:\uD83C[\uDDEA\uDDF4\uDDF8\uDDFA\uDDFC])|\uD83D\uDC69(?:\uD83C[\uDFFB-\uDFFF])|\uD83C\uDDF2(?:\uD83C[\uDDE6\uDDE8-\uDDED\uDDF0-\uDDFF])|\uD83C\uDDE6(?:\uD83C[\uDDE8-\uDDEC\uDDEE\uDDF1\uDDF2\uDDF4\uDDF6-\uDDFA\uDDFC\uDDFD\uDDFF])|\uD83C\uDDF0(?:\uD83C[\uDDEA\uDDEC-\uDDEE\uDDF2\uDDF3\uDDF5\uDDF7\uDDFC\uDDFE\uDDFF])|\uD83C\uDDED(?:\uD83C[\uDDF0\uDDF2\uDDF3\uDDF7\uDDF9\uDDFA])|\uD83C\uDDE9(?:\uD83C[\uDDEA\uDDEC\uDDEF\uDDF0\uDDF2\uDDF4\uDDFF])|\uD83C\uDDFE(?:\uD83C[\uDDEA\uDDF9])|\uD83C\uDDEC(?:\uD83C[\uDDE6\uDDE7\uDDE9-\uDDEE\uDDF1-\uDDF3\uDDF5-\uDDFA\uDDFC\uDDFE])|\uD83C\uDDF8(?:\uD83C[\uDDE6-\uDDEA\uDDEC-\uDDF4\uDDF7-\uDDF9\uDDFB\uDDFD-\uDDFF])|\uD83C\uDDEB(?:\uD83C[\uDDEE-\uDDF0\uDDF2\uDDF4\uDDF7])|\uD83C\uDDF5(?:\uD83C[\uDDE6\uDDEA-\uDDED\uDDF0-\uDDF3\uDDF7-\uDDF9\uDDFC\uDDFE])|\uD83C\uDDFB(?:\uD83C[\uDDE6\uDDE8\uDDEA\uDDEC\uDDEE\uDDF3\uDDFA])|\uD83C\uDDF3(?:\uD83C[\uDDE6\uDDE8\uDDEA-\uDDEC\uDDEE\uDDF1\uDDF4\uDDF5\uDDF7\uDDFA\uDDFF])|\uD83C\uDDE8(?:\uD83C[\uDDE6\uDDE8\uDDE9\uDDEB-\uDDEE\uDDF0-\uDDF5\uDDF7\uDDFA-\uDDFF])|\uD83C\uDDF1(?:\uD83C[\uDDE6-\uDDE8\uDDEE\uDDF0\uDDF7-\uDDFB\uDDFE])|\uD83C\uDDFF(?:\uD83C[\uDDE6\uDDF2\uDDFC])|\uD83C\uDDFC(?:\uD83C[\uDDEB\uDDF8])|\uD83C\uDDFA(?:\uD83C[\uDDE6\uDDEC\uDDF2\uDDF3\uDDF8\uDDFE\uDDFF])|\uD83C\uDDEE(?:\uD83C[\uDDE8-\uDDEA\uDDF1-\uDDF4\uDDF6-\uDDF9])|\uD83C\uDDEF(?:\uD83C[\uDDEA\uDDF2\uDDF4\uDDF5])|(?:\uD83C[\uDFC3\uDFC4\uDFCA]|\uD83D[\uDC6E\uDC71\uDC73\uDC77\uDC81\uDC82\uDC86\uDC87\uDE45-\uDE47\uDE4B\uDE4D\uDE4E\uDEA3\uDEB4-\uDEB6]|\uD83E[\uDD26\uDD37-\uDD39\uDD3D\uDD3E\uDDB8\uDDB9\uDDCD-\uDDCF\uDDD6-\uDDDD])(?:\uD83C[\uDFFB-\uDFFF])|(?:\u26F9|\uD83C[\uDFCB\uDFCC]|\uD83D\uDD75)(?:\uD83C[\uDFFB-\uDFFF])|(?:[\u261D\u270A-\u270D]|\uD83C[\uDF85\uDFC2\uDFC7]|\uD83D[\uDC42\uDC43\uDC46-\uDC50\uDC66\uDC67\uDC6B-\uDC6D\uDC70\uDC72\uDC74-\uDC76\uDC78\uDC7C\uDC83\uDC85\uDCAA\uDD74\uDD7A\uDD90\uDD95\uDD96\uDE4C\uDE4F\uDEC0\uDECC]|\uD83E[\uDD0F\uDD18-\uDD1C\uDD1E\uDD1F\uDD30-\uDD36\uDDB5\uDDB6\uDDBB\uDDD2-\uDDD5])(?:\uD83C[\uDFFB-\uDFFF])|(?:[\u231A\u231B\u23E9-\u23EC\u23F0\u23F3\u25FD\u25FE\u2614\u2615\u2648-\u2653\u267F\u2693\u26A1\u26AA\u26AB\u26BD\u26BE\u26C4\u26C5\u26CE\u26D4\u26EA\u26F2\u26F3\u26F5\u26FA\u26FD\u2705\u270A\u270B\u2728\u274C\u274E\u2753-\u2755\u2757\u2795-\u2797\u27B0\u27BF\u2B1B\u2B1C\u2B50\u2B55]|\uD83C[\uDC04\uDCCF\uDD8E\uDD91-\uDD9A\uDDE6-\uDDFF\uDE01\uDE1A\uDE2F\uDE32-\uDE36\uDE38-\uDE3A\uDE50\uDE51\uDF00-\uDF20\uDF2D-\uDF35\uDF37-\uDF7C\uDF7E-\uDF93\uDFA0-\uDFCA\uDFCF-\uDFD3\uDFE0-\uDFF0\uDFF4\uDFF8-\uDFFF]|\uD83D[\uDC00-\uDC3E\uDC40\uDC42-\uDCFC\uDCFF-\uDD3D\uDD4B-\uDD4E\uDD50-\uDD67\uDD7A\uDD95\uDD96\uDDA4\uDDFB-\uDE4F\uDE80-\uDEC5\uDECC\uDED0-\uDED2\uDED5\uDEEB\uDEEC\uDEF4-\uDEFA\uDFE0-\uDFEB]|\uD83E[\uDD0D-\uDD3A\uDD3C-\uDD45\uDD47-\uDD71\uDD73-\uDD76\uDD7A-\uDDA2\uDDA5-\uDDAA\uDDAE-\uDDCA\uDDCD-\uDDFF\uDE70-\uDE73\uDE78-\uDE7A\uDE80-\uDE82\uDE90-\uDE95])|(?:[#\*0-9\xA9\xAE\u203C\u2049\u2122\u2139\u2194-\u2199\u21A9\u21AA\u231A\u231B\u2328\u23CF\u23E9-\u23F3\u23F8-\u23FA\u24C2\u25AA\u25AB\u25B6\u25C0\u25FB-\u25FE\u2600-\u2604\u260E\u2611\u2614\u2615\u2618\u261D\u2620\u2622\u2623\u2626\u262A\u262E\u262F\u2638-\u263A\u2640\u2642\u2648-\u2653\u265F\u2660\u2663\u2665\u2666\u2668\u267B\u267E\u267F\u2692-\u2697\u2699\u269B\u269C\u26A0\u26A1\u26AA\u26AB\u26B0\u26B1\u26BD\u26BE\u26C4\u26C5\u26C8\u26CE\u26CF\u26D1\u26D3\u26D4\u26E9\u26EA\u26F0-\u26F5\u26F7-\u26FA\u26FD\u2702\u2705\u2708-\u270D\u270F\u2712\u2714\u2716\u271D\u2721\u2728\u2733\u2734\u2744\u2747\u274C\u274E\u2753-\u2755\u2757\u2763\u2764\u2795-\u2797\u27A1\u27B0\u27BF\u2934\u2935\u2B05-\u2B07\u2B1B\u2B1C\u2B50\u2B55\u3030\u303D\u3297\u3299]|\uD83C[\uDC04\uDCCF\uDD70\uDD71\uDD7E\uDD7F\uDD8E\uDD91-\uDD9A\uDDE6-\uDDFF\uDE01\uDE02\uDE1A\uDE2F\uDE32-\uDE3A\uDE50\uDE51\uDF00-\uDF21\uDF24-\uDF93\uDF96\uDF97\uDF99-\uDF9B\uDF9E-\uDFF0\uDFF3-\uDFF5\uDFF7-\uDFFF]|\uD83D[\uDC00-\uDCFD\uDCFF-\uDD3D\uDD49-\uDD4E\uDD50-\uDD67\uDD6F\uDD70\uDD73-\uDD7A\uDD87\uDD8A-\uDD8D\uDD90\uDD95\uDD96\uDDA4\uDDA5\uDDA8\uDDB1\uDDB2\uDDBC\uDDC2-\uDDC4\uDDD1-\uDDD3\uDDDC-\uDDDE\uDDE1\uDDE3\uDDE8\uDDEF\uDDF3\uDDFA-\uDE4F\uDE80-\uDEC5\uDECB-\uDED2\uDED5\uDEE0-\uDEE5\uDEE9\uDEEB\uDEEC\uDEF0\uDEF3-\uDEFA\uDFE0-\uDFEB]|\uD83E[\uDD0D-\uDD3A\uDD3C-\uDD45\uDD47-\uDD71\uDD73-\uDD76\uDD7A-\uDDA2\uDDA5-\uDDAA\uDDAE-\uDDCA\uDDCD-\uDDFF\uDE70-\uDE73\uDE78-\uDE7A\uDE80-\uDE82\uDE90-\uDE95])\uFE0F|(?:[\u261D\u26F9\u270A-\u270D]|\uD83C[\uDF85\uDFC2-\uDFC4\uDFC7\uDFCA-\uDFCC]|\uD83D[\uDC42\uDC43\uDC46-\uDC50\uDC66-\uDC78\uDC7C\uDC81-\uDC83\uDC85-\uDC87\uDC8F\uDC91\uDCAA\uDD74\uDD75\uDD7A\uDD90\uDD95\uDD96\uDE45-\uDE47\uDE4B-\uDE4F\uDEA3\uDEB4-\uDEB6\uDEC0\uDECC]|\uD83E[\uDD0F\uDD18-\uDD1F\uDD26\uDD30-\uDD39\uDD3C-\uDD3E\uDDB5\uDDB6\uDDB8\uDDB9\uDDBB\uDDCD-\uDDCF\uDDD1-\uDDDD])/g;
    };

    const stripAnsi$2 = stripAnsi$3;
    const isFullwidthCodePoint = isFullwidthCodePoint$2.exports;
    const emojiRegex = emojiRegex$1;

    const stringWidth$1 = string => {
    	if (typeof string !== 'string' || string.length === 0) {
    		return 0;
    	}

    	string = stripAnsi$2(string);

    	if (string.length === 0) {
    		return 0;
    	}

    	string = string.replace(emojiRegex(), '  ');

    	let width = 0;

    	for (let i = 0; i < string.length; i++) {
    		const code = string.codePointAt(i);

    		// Ignore control characters
    		if (code <= 0x1F || (code >= 0x7F && code <= 0x9F)) {
    			continue;
    		}

    		// Ignore combining characters
    		if (code >= 0x300 && code <= 0x36F) {
    			continue;
    		}

    		// Surrogates
    		if (code > 0xFFFF) {
    			i++;
    		}

    		width += isFullwidthCodePoint(code) ? 2 : 1;
    	}

    	return width;
    };

    stringWidth$2.exports = stringWidth$1;
    // TODO: remove this in the next major version
    stringWidth$2.exports.default = stringWidth$1;

    var ora$1 = {exports: {}};

    var dots = {
    	interval: 80,
    	frames: [
    		"⠋",
    		"⠙",
    		"⠹",
    		"⠸",
    		"⠼",
    		"⠴",
    		"⠦",
    		"⠧",
    		"⠇",
    		"⠏"
    	]
    };
    var dots2 = {
    	interval: 80,
    	frames: [
    		"⣾",
    		"⣽",
    		"⣻",
    		"⢿",
    		"⡿",
    		"⣟",
    		"⣯",
    		"⣷"
    	]
    };
    var dots3 = {
    	interval: 80,
    	frames: [
    		"⠋",
    		"⠙",
    		"⠚",
    		"⠞",
    		"⠖",
    		"⠦",
    		"⠴",
    		"⠲",
    		"⠳",
    		"⠓"
    	]
    };
    var dots4 = {
    	interval: 80,
    	frames: [
    		"⠄",
    		"⠆",
    		"⠇",
    		"⠋",
    		"⠙",
    		"⠸",
    		"⠰",
    		"⠠",
    		"⠰",
    		"⠸",
    		"⠙",
    		"⠋",
    		"⠇",
    		"⠆"
    	]
    };
    var dots5 = {
    	interval: 80,
    	frames: [
    		"⠋",
    		"⠙",
    		"⠚",
    		"⠒",
    		"⠂",
    		"⠂",
    		"⠒",
    		"⠲",
    		"⠴",
    		"⠦",
    		"⠖",
    		"⠒",
    		"⠐",
    		"⠐",
    		"⠒",
    		"⠓",
    		"⠋"
    	]
    };
    var dots6 = {
    	interval: 80,
    	frames: [
    		"⠁",
    		"⠉",
    		"⠙",
    		"⠚",
    		"⠒",
    		"⠂",
    		"⠂",
    		"⠒",
    		"⠲",
    		"⠴",
    		"⠤",
    		"⠄",
    		"⠄",
    		"⠤",
    		"⠴",
    		"⠲",
    		"⠒",
    		"⠂",
    		"⠂",
    		"⠒",
    		"⠚",
    		"⠙",
    		"⠉",
    		"⠁"
    	]
    };
    var dots7 = {
    	interval: 80,
    	frames: [
    		"⠈",
    		"⠉",
    		"⠋",
    		"⠓",
    		"⠒",
    		"⠐",
    		"⠐",
    		"⠒",
    		"⠖",
    		"⠦",
    		"⠤",
    		"⠠",
    		"⠠",
    		"⠤",
    		"⠦",
    		"⠖",
    		"⠒",
    		"⠐",
    		"⠐",
    		"⠒",
    		"⠓",
    		"⠋",
    		"⠉",
    		"⠈"
    	]
    };
    var dots8 = {
    	interval: 80,
    	frames: [
    		"⠁",
    		"⠁",
    		"⠉",
    		"⠙",
    		"⠚",
    		"⠒",
    		"⠂",
    		"⠂",
    		"⠒",
    		"⠲",
    		"⠴",
    		"⠤",
    		"⠄",
    		"⠄",
    		"⠤",
    		"⠠",
    		"⠠",
    		"⠤",
    		"⠦",
    		"⠖",
    		"⠒",
    		"⠐",
    		"⠐",
    		"⠒",
    		"⠓",
    		"⠋",
    		"⠉",
    		"⠈",
    		"⠈"
    	]
    };
    var dots9 = {
    	interval: 80,
    	frames: [
    		"⢹",
    		"⢺",
    		"⢼",
    		"⣸",
    		"⣇",
    		"⡧",
    		"⡗",
    		"⡏"
    	]
    };
    var dots10 = {
    	interval: 80,
    	frames: [
    		"⢄",
    		"⢂",
    		"⢁",
    		"⡁",
    		"⡈",
    		"⡐",
    		"⡠"
    	]
    };
    var dots11 = {
    	interval: 100,
    	frames: [
    		"⠁",
    		"⠂",
    		"⠄",
    		"⡀",
    		"⢀",
    		"⠠",
    		"⠐",
    		"⠈"
    	]
    };
    var dots12 = {
    	interval: 80,
    	frames: [
    		"⢀⠀",
    		"⡀⠀",
    		"⠄⠀",
    		"⢂⠀",
    		"⡂⠀",
    		"⠅⠀",
    		"⢃⠀",
    		"⡃⠀",
    		"⠍⠀",
    		"⢋⠀",
    		"⡋⠀",
    		"⠍⠁",
    		"⢋⠁",
    		"⡋⠁",
    		"⠍⠉",
    		"⠋⠉",
    		"⠋⠉",
    		"⠉⠙",
    		"⠉⠙",
    		"⠉⠩",
    		"⠈⢙",
    		"⠈⡙",
    		"⢈⠩",
    		"⡀⢙",
    		"⠄⡙",
    		"⢂⠩",
    		"⡂⢘",
    		"⠅⡘",
    		"⢃⠨",
    		"⡃⢐",
    		"⠍⡐",
    		"⢋⠠",
    		"⡋⢀",
    		"⠍⡁",
    		"⢋⠁",
    		"⡋⠁",
    		"⠍⠉",
    		"⠋⠉",
    		"⠋⠉",
    		"⠉⠙",
    		"⠉⠙",
    		"⠉⠩",
    		"⠈⢙",
    		"⠈⡙",
    		"⠈⠩",
    		"⠀⢙",
    		"⠀⡙",
    		"⠀⠩",
    		"⠀⢘",
    		"⠀⡘",
    		"⠀⠨",
    		"⠀⢐",
    		"⠀⡐",
    		"⠀⠠",
    		"⠀⢀",
    		"⠀⡀"
    	]
    };
    var dots8Bit = {
    	interval: 80,
    	frames: [
    		"⠀",
    		"⠁",
    		"⠂",
    		"⠃",
    		"⠄",
    		"⠅",
    		"⠆",
    		"⠇",
    		"⡀",
    		"⡁",
    		"⡂",
    		"⡃",
    		"⡄",
    		"⡅",
    		"⡆",
    		"⡇",
    		"⠈",
    		"⠉",
    		"⠊",
    		"⠋",
    		"⠌",
    		"⠍",
    		"⠎",
    		"⠏",
    		"⡈",
    		"⡉",
    		"⡊",
    		"⡋",
    		"⡌",
    		"⡍",
    		"⡎",
    		"⡏",
    		"⠐",
    		"⠑",
    		"⠒",
    		"⠓",
    		"⠔",
    		"⠕",
    		"⠖",
    		"⠗",
    		"⡐",
    		"⡑",
    		"⡒",
    		"⡓",
    		"⡔",
    		"⡕",
    		"⡖",
    		"⡗",
    		"⠘",
    		"⠙",
    		"⠚",
    		"⠛",
    		"⠜",
    		"⠝",
    		"⠞",
    		"⠟",
    		"⡘",
    		"⡙",
    		"⡚",
    		"⡛",
    		"⡜",
    		"⡝",
    		"⡞",
    		"⡟",
    		"⠠",
    		"⠡",
    		"⠢",
    		"⠣",
    		"⠤",
    		"⠥",
    		"⠦",
    		"⠧",
    		"⡠",
    		"⡡",
    		"⡢",
    		"⡣",
    		"⡤",
    		"⡥",
    		"⡦",
    		"⡧",
    		"⠨",
    		"⠩",
    		"⠪",
    		"⠫",
    		"⠬",
    		"⠭",
    		"⠮",
    		"⠯",
    		"⡨",
    		"⡩",
    		"⡪",
    		"⡫",
    		"⡬",
    		"⡭",
    		"⡮",
    		"⡯",
    		"⠰",
    		"⠱",
    		"⠲",
    		"⠳",
    		"⠴",
    		"⠵",
    		"⠶",
    		"⠷",
    		"⡰",
    		"⡱",
    		"⡲",
    		"⡳",
    		"⡴",
    		"⡵",
    		"⡶",
    		"⡷",
    		"⠸",
    		"⠹",
    		"⠺",
    		"⠻",
    		"⠼",
    		"⠽",
    		"⠾",
    		"⠿",
    		"⡸",
    		"⡹",
    		"⡺",
    		"⡻",
    		"⡼",
    		"⡽",
    		"⡾",
    		"⡿",
    		"⢀",
    		"⢁",
    		"⢂",
    		"⢃",
    		"⢄",
    		"⢅",
    		"⢆",
    		"⢇",
    		"⣀",
    		"⣁",
    		"⣂",
    		"⣃",
    		"⣄",
    		"⣅",
    		"⣆",
    		"⣇",
    		"⢈",
    		"⢉",
    		"⢊",
    		"⢋",
    		"⢌",
    		"⢍",
    		"⢎",
    		"⢏",
    		"⣈",
    		"⣉",
    		"⣊",
    		"⣋",
    		"⣌",
    		"⣍",
    		"⣎",
    		"⣏",
    		"⢐",
    		"⢑",
    		"⢒",
    		"⢓",
    		"⢔",
    		"⢕",
    		"⢖",
    		"⢗",
    		"⣐",
    		"⣑",
    		"⣒",
    		"⣓",
    		"⣔",
    		"⣕",
    		"⣖",
    		"⣗",
    		"⢘",
    		"⢙",
    		"⢚",
    		"⢛",
    		"⢜",
    		"⢝",
    		"⢞",
    		"⢟",
    		"⣘",
    		"⣙",
    		"⣚",
    		"⣛",
    		"⣜",
    		"⣝",
    		"⣞",
    		"⣟",
    		"⢠",
    		"⢡",
    		"⢢",
    		"⢣",
    		"⢤",
    		"⢥",
    		"⢦",
    		"⢧",
    		"⣠",
    		"⣡",
    		"⣢",
    		"⣣",
    		"⣤",
    		"⣥",
    		"⣦",
    		"⣧",
    		"⢨",
    		"⢩",
    		"⢪",
    		"⢫",
    		"⢬",
    		"⢭",
    		"⢮",
    		"⢯",
    		"⣨",
    		"⣩",
    		"⣪",
    		"⣫",
    		"⣬",
    		"⣭",
    		"⣮",
    		"⣯",
    		"⢰",
    		"⢱",
    		"⢲",
    		"⢳",
    		"⢴",
    		"⢵",
    		"⢶",
    		"⢷",
    		"⣰",
    		"⣱",
    		"⣲",
    		"⣳",
    		"⣴",
    		"⣵",
    		"⣶",
    		"⣷",
    		"⢸",
    		"⢹",
    		"⢺",
    		"⢻",
    		"⢼",
    		"⢽",
    		"⢾",
    		"⢿",
    		"⣸",
    		"⣹",
    		"⣺",
    		"⣻",
    		"⣼",
    		"⣽",
    		"⣾",
    		"⣿"
    	]
    };
    var line = {
    	interval: 130,
    	frames: [
    		"-",
    		"\\",
    		"|",
    		"/"
    	]
    };
    var line2 = {
    	interval: 100,
    	frames: [
    		"⠂",
    		"-",
    		"–",
    		"—",
    		"–",
    		"-"
    	]
    };
    var pipe = {
    	interval: 100,
    	frames: [
    		"┤",
    		"┘",
    		"┴",
    		"└",
    		"├",
    		"┌",
    		"┬",
    		"┐"
    	]
    };
    var simpleDots = {
    	interval: 400,
    	frames: [
    		".  ",
    		".. ",
    		"...",
    		"   "
    	]
    };
    var simpleDotsScrolling = {
    	interval: 200,
    	frames: [
    		".  ",
    		".. ",
    		"...",
    		" ..",
    		"  .",
    		"   "
    	]
    };
    var star$1 = {
    	interval: 70,
    	frames: [
    		"✶",
    		"✸",
    		"✹",
    		"✺",
    		"✹",
    		"✷"
    	]
    };
    var star2 = {
    	interval: 80,
    	frames: [
    		"+",
    		"x",
    		"*"
    	]
    };
    var flip = {
    	interval: 70,
    	frames: [
    		"_",
    		"_",
    		"_",
    		"-",
    		"`",
    		"`",
    		"'",
    		"´",
    		"-",
    		"_",
    		"_",
    		"_"
    	]
    };
    var hamburger = {
    	interval: 100,
    	frames: [
    		"☱",
    		"☲",
    		"☴"
    	]
    };
    var growVertical = {
    	interval: 120,
    	frames: [
    		"▁",
    		"▃",
    		"▄",
    		"▅",
    		"▆",
    		"▇",
    		"▆",
    		"▅",
    		"▄",
    		"▃"
    	]
    };
    var growHorizontal = {
    	interval: 120,
    	frames: [
    		"▏",
    		"▎",
    		"▍",
    		"▌",
    		"▋",
    		"▊",
    		"▉",
    		"▊",
    		"▋",
    		"▌",
    		"▍",
    		"▎"
    	]
    };
    var balloon = {
    	interval: 140,
    	frames: [
    		" ",
    		".",
    		"o",
    		"O",
    		"@",
    		"*",
    		" "
    	]
    };
    var balloon2 = {
    	interval: 120,
    	frames: [
    		".",
    		"o",
    		"O",
    		"°",
    		"O",
    		"o",
    		"."
    	]
    };
    var noise = {
    	interval: 100,
    	frames: [
    		"▓",
    		"▒",
    		"░"
    	]
    };
    var bounce = {
    	interval: 120,
    	frames: [
    		"⠁",
    		"⠂",
    		"⠄",
    		"⠂"
    	]
    };
    var boxBounce = {
    	interval: 120,
    	frames: [
    		"▖",
    		"▘",
    		"▝",
    		"▗"
    	]
    };
    var boxBounce2 = {
    	interval: 100,
    	frames: [
    		"▌",
    		"▀",
    		"▐",
    		"▄"
    	]
    };
    var triangle = {
    	interval: 50,
    	frames: [
    		"◢",
    		"◣",
    		"◤",
    		"◥"
    	]
    };
    var arc = {
    	interval: 100,
    	frames: [
    		"◜",
    		"◠",
    		"◝",
    		"◞",
    		"◡",
    		"◟"
    	]
    };
    var circle = {
    	interval: 120,
    	frames: [
    		"◡",
    		"⊙",
    		"◠"
    	]
    };
    var squareCorners = {
    	interval: 180,
    	frames: [
    		"◰",
    		"◳",
    		"◲",
    		"◱"
    	]
    };
    var circleQuarters = {
    	interval: 120,
    	frames: [
    		"◴",
    		"◷",
    		"◶",
    		"◵"
    	]
    };
    var circleHalves = {
    	interval: 50,
    	frames: [
    		"◐",
    		"◓",
    		"◑",
    		"◒"
    	]
    };
    var squish = {
    	interval: 100,
    	frames: [
    		"╫",
    		"╪"
    	]
    };
    var toggle = {
    	interval: 250,
    	frames: [
    		"⊶",
    		"⊷"
    	]
    };
    var toggle2 = {
    	interval: 80,
    	frames: [
    		"▫",
    		"▪"
    	]
    };
    var toggle3 = {
    	interval: 120,
    	frames: [
    		"□",
    		"■"
    	]
    };
    var toggle4 = {
    	interval: 100,
    	frames: [
    		"■",
    		"□",
    		"▪",
    		"▫"
    	]
    };
    var toggle5 = {
    	interval: 100,
    	frames: [
    		"▮",
    		"▯"
    	]
    };
    var toggle6 = {
    	interval: 300,
    	frames: [
    		"ဝ",
    		"၀"
    	]
    };
    var toggle7 = {
    	interval: 80,
    	frames: [
    		"⦾",
    		"⦿"
    	]
    };
    var toggle8 = {
    	interval: 100,
    	frames: [
    		"◍",
    		"◌"
    	]
    };
    var toggle9 = {
    	interval: 100,
    	frames: [
    		"◉",
    		"◎"
    	]
    };
    var toggle10 = {
    	interval: 100,
    	frames: [
    		"㊂",
    		"㊀",
    		"㊁"
    	]
    };
    var toggle11 = {
    	interval: 50,
    	frames: [
    		"⧇",
    		"⧆"
    	]
    };
    var toggle12 = {
    	interval: 120,
    	frames: [
    		"☗",
    		"☖"
    	]
    };
    var toggle13 = {
    	interval: 80,
    	frames: [
    		"=",
    		"*",
    		"-"
    	]
    };
    var arrow = {
    	interval: 100,
    	frames: [
    		"←",
    		"↖",
    		"↑",
    		"↗",
    		"→",
    		"↘",
    		"↓",
    		"↙"
    	]
    };
    var arrow2 = {
    	interval: 80,
    	frames: [
    		"⬆️ ",
    		"↗️ ",
    		"➡️ ",
    		"↘️ ",
    		"⬇️ ",
    		"↙️ ",
    		"⬅️ ",
    		"↖️ "
    	]
    };
    var arrow3 = {
    	interval: 120,
    	frames: [
    		"▹▹▹▹▹",
    		"▸▹▹▹▹",
    		"▹▸▹▹▹",
    		"▹▹▸▹▹",
    		"▹▹▹▸▹",
    		"▹▹▹▹▸"
    	]
    };
    var bouncingBar = {
    	interval: 80,
    	frames: [
    		"[    ]",
    		"[=   ]",
    		"[==  ]",
    		"[=== ]",
    		"[ ===]",
    		"[  ==]",
    		"[   =]",
    		"[    ]",
    		"[   =]",
    		"[  ==]",
    		"[ ===]",
    		"[====]",
    		"[=== ]",
    		"[==  ]",
    		"[=   ]"
    	]
    };
    var bouncingBall = {
    	interval: 80,
    	frames: [
    		"( ●    )",
    		"(  ●   )",
    		"(   ●  )",
    		"(    ● )",
    		"(     ●)",
    		"(    ● )",
    		"(   ●  )",
    		"(  ●   )",
    		"( ●    )",
    		"(●     )"
    	]
    };
    var smiley = {
    	interval: 200,
    	frames: [
    		"😄 ",
    		"😝 "
    	]
    };
    var monkey = {
    	interval: 300,
    	frames: [
    		"🙈 ",
    		"🙈 ",
    		"🙉 ",
    		"🙊 "
    	]
    };
    var hearts = {
    	interval: 100,
    	frames: [
    		"💛 ",
    		"💙 ",
    		"💜 ",
    		"💚 ",
    		"❤️ "
    	]
    };
    var clock = {
    	interval: 100,
    	frames: [
    		"🕛 ",
    		"🕐 ",
    		"🕑 ",
    		"🕒 ",
    		"🕓 ",
    		"🕔 ",
    		"🕕 ",
    		"🕖 ",
    		"🕗 ",
    		"🕘 ",
    		"🕙 ",
    		"🕚 "
    	]
    };
    var earth = {
    	interval: 180,
    	frames: [
    		"🌍 ",
    		"🌎 ",
    		"🌏 "
    	]
    };
    var material = {
    	interval: 17,
    	frames: [
    		"█▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁",
    		"██▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁",
    		"███▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁",
    		"████▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁",
    		"██████▁▁▁▁▁▁▁▁▁▁▁▁▁▁",
    		"██████▁▁▁▁▁▁▁▁▁▁▁▁▁▁",
    		"███████▁▁▁▁▁▁▁▁▁▁▁▁▁",
    		"████████▁▁▁▁▁▁▁▁▁▁▁▁",
    		"█████████▁▁▁▁▁▁▁▁▁▁▁",
    		"█████████▁▁▁▁▁▁▁▁▁▁▁",
    		"██████████▁▁▁▁▁▁▁▁▁▁",
    		"███████████▁▁▁▁▁▁▁▁▁",
    		"█████████████▁▁▁▁▁▁▁",
    		"██████████████▁▁▁▁▁▁",
    		"██████████████▁▁▁▁▁▁",
    		"▁██████████████▁▁▁▁▁",
    		"▁██████████████▁▁▁▁▁",
    		"▁██████████████▁▁▁▁▁",
    		"▁▁██████████████▁▁▁▁",
    		"▁▁▁██████████████▁▁▁",
    		"▁▁▁▁█████████████▁▁▁",
    		"▁▁▁▁██████████████▁▁",
    		"▁▁▁▁██████████████▁▁",
    		"▁▁▁▁▁██████████████▁",
    		"▁▁▁▁▁██████████████▁",
    		"▁▁▁▁▁██████████████▁",
    		"▁▁▁▁▁▁██████████████",
    		"▁▁▁▁▁▁██████████████",
    		"▁▁▁▁▁▁▁█████████████",
    		"▁▁▁▁▁▁▁█████████████",
    		"▁▁▁▁▁▁▁▁████████████",
    		"▁▁▁▁▁▁▁▁████████████",
    		"▁▁▁▁▁▁▁▁▁███████████",
    		"▁▁▁▁▁▁▁▁▁███████████",
    		"▁▁▁▁▁▁▁▁▁▁██████████",
    		"▁▁▁▁▁▁▁▁▁▁██████████",
    		"▁▁▁▁▁▁▁▁▁▁▁▁████████",
    		"▁▁▁▁▁▁▁▁▁▁▁▁▁███████",
    		"▁▁▁▁▁▁▁▁▁▁▁▁▁▁██████",
    		"▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁█████",
    		"▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁█████",
    		"█▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁████",
    		"██▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁███",
    		"██▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁███",
    		"███▁▁▁▁▁▁▁▁▁▁▁▁▁▁███",
    		"████▁▁▁▁▁▁▁▁▁▁▁▁▁▁██",
    		"█████▁▁▁▁▁▁▁▁▁▁▁▁▁▁█",
    		"█████▁▁▁▁▁▁▁▁▁▁▁▁▁▁█",
    		"██████▁▁▁▁▁▁▁▁▁▁▁▁▁█",
    		"████████▁▁▁▁▁▁▁▁▁▁▁▁",
    		"█████████▁▁▁▁▁▁▁▁▁▁▁",
    		"█████████▁▁▁▁▁▁▁▁▁▁▁",
    		"█████████▁▁▁▁▁▁▁▁▁▁▁",
    		"█████████▁▁▁▁▁▁▁▁▁▁▁",
    		"███████████▁▁▁▁▁▁▁▁▁",
    		"████████████▁▁▁▁▁▁▁▁",
    		"████████████▁▁▁▁▁▁▁▁",
    		"██████████████▁▁▁▁▁▁",
    		"██████████████▁▁▁▁▁▁",
    		"▁██████████████▁▁▁▁▁",
    		"▁██████████████▁▁▁▁▁",
    		"▁▁▁█████████████▁▁▁▁",
    		"▁▁▁▁▁████████████▁▁▁",
    		"▁▁▁▁▁████████████▁▁▁",
    		"▁▁▁▁▁▁███████████▁▁▁",
    		"▁▁▁▁▁▁▁▁█████████▁▁▁",
    		"▁▁▁▁▁▁▁▁█████████▁▁▁",
    		"▁▁▁▁▁▁▁▁▁█████████▁▁",
    		"▁▁▁▁▁▁▁▁▁█████████▁▁",
    		"▁▁▁▁▁▁▁▁▁▁█████████▁",
    		"▁▁▁▁▁▁▁▁▁▁▁████████▁",
    		"▁▁▁▁▁▁▁▁▁▁▁████████▁",
    		"▁▁▁▁▁▁▁▁▁▁▁▁███████▁",
    		"▁▁▁▁▁▁▁▁▁▁▁▁███████▁",
    		"▁▁▁▁▁▁▁▁▁▁▁▁▁███████",
    		"▁▁▁▁▁▁▁▁▁▁▁▁▁███████",
    		"▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁█████",
    		"▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁████",
    		"▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁████",
    		"▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁████",
    		"▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁███",
    		"▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁███",
    		"▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁██",
    		"▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁██",
    		"▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁██",
    		"▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁█",
    		"▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁█",
    		"▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁█",
    		"▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁",
    		"▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁",
    		"▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁",
    		"▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁▁"
    	]
    };
    var moon = {
    	interval: 80,
    	frames: [
    		"🌑 ",
    		"🌒 ",
    		"🌓 ",
    		"🌔 ",
    		"🌕 ",
    		"🌖 ",
    		"🌗 ",
    		"🌘 "
    	]
    };
    var runner = {
    	interval: 140,
    	frames: [
    		"🚶 ",
    		"🏃 "
    	]
    };
    var pong = {
    	interval: 80,
    	frames: [
    		"▐⠂       ▌",
    		"▐⠈       ▌",
    		"▐ ⠂      ▌",
    		"▐ ⠠      ▌",
    		"▐  ⡀     ▌",
    		"▐  ⠠     ▌",
    		"▐   ⠂    ▌",
    		"▐   ⠈    ▌",
    		"▐    ⠂   ▌",
    		"▐    ⠠   ▌",
    		"▐     ⡀  ▌",
    		"▐     ⠠  ▌",
    		"▐      ⠂ ▌",
    		"▐      ⠈ ▌",
    		"▐       ⠂▌",
    		"▐       ⠠▌",
    		"▐       ⡀▌",
    		"▐      ⠠ ▌",
    		"▐      ⠂ ▌",
    		"▐     ⠈  ▌",
    		"▐     ⠂  ▌",
    		"▐    ⠠   ▌",
    		"▐    ⡀   ▌",
    		"▐   ⠠    ▌",
    		"▐   ⠂    ▌",
    		"▐  ⠈     ▌",
    		"▐  ⠂     ▌",
    		"▐ ⠠      ▌",
    		"▐ ⡀      ▌",
    		"▐⠠       ▌"
    	]
    };
    var shark = {
    	interval: 120,
    	frames: [
    		"▐|\\____________▌",
    		"▐_|\\___________▌",
    		"▐__|\\__________▌",
    		"▐___|\\_________▌",
    		"▐____|\\________▌",
    		"▐_____|\\_______▌",
    		"▐______|\\______▌",
    		"▐_______|\\_____▌",
    		"▐________|\\____▌",
    		"▐_________|\\___▌",
    		"▐__________|\\__▌",
    		"▐___________|\\_▌",
    		"▐____________|\\▌",
    		"▐____________/|▌",
    		"▐___________/|_▌",
    		"▐__________/|__▌",
    		"▐_________/|___▌",
    		"▐________/|____▌",
    		"▐_______/|_____▌",
    		"▐______/|______▌",
    		"▐_____/|_______▌",
    		"▐____/|________▌",
    		"▐___/|_________▌",
    		"▐__/|__________▌",
    		"▐_/|___________▌",
    		"▐/|____________▌"
    	]
    };
    var dqpb = {
    	interval: 100,
    	frames: [
    		"d",
    		"q",
    		"p",
    		"b"
    	]
    };
    var weather = {
    	interval: 100,
    	frames: [
    		"☀️ ",
    		"☀️ ",
    		"☀️ ",
    		"🌤 ",
    		"⛅️ ",
    		"🌥 ",
    		"☁️ ",
    		"🌧 ",
    		"🌨 ",
    		"🌧 ",
    		"🌨 ",
    		"🌧 ",
    		"🌨 ",
    		"⛈ ",
    		"🌨 ",
    		"🌧 ",
    		"🌨 ",
    		"☁️ ",
    		"🌥 ",
    		"⛅️ ",
    		"🌤 ",
    		"☀️ ",
    		"☀️ "
    	]
    };
    var christmas = {
    	interval: 400,
    	frames: [
    		"🌲",
    		"🎄"
    	]
    };
    var grenade = {
    	interval: 80,
    	frames: [
    		"،  ",
    		"′  ",
    		" ´ ",
    		" ‾ ",
    		"  ⸌",
    		"  ⸊",
    		"  |",
    		"  ⁎",
    		"  ⁕",
    		" ෴ ",
    		"  ⁓",
    		"   ",
    		"   ",
    		"   "
    	]
    };
    var point = {
    	interval: 125,
    	frames: [
    		"∙∙∙",
    		"●∙∙",
    		"∙●∙",
    		"∙∙●",
    		"∙∙∙"
    	]
    };
    var layer = {
    	interval: 150,
    	frames: [
    		"-",
    		"=",
    		"≡"
    	]
    };
    var betaWave = {
    	interval: 80,
    	frames: [
    		"ρββββββ",
    		"βρβββββ",
    		"ββρββββ",
    		"βββρβββ",
    		"ββββρββ",
    		"βββββρβ",
    		"ββββββρ"
    	]
    };
    var fingerDance = {
    	interval: 160,
    	frames: [
    		"🤘 ",
    		"🤟 ",
    		"🖖 ",
    		"✋ ",
    		"🤚 ",
    		"👆 "
    	]
    };
    var fistBump = {
    	interval: 80,
    	frames: [
    		"🤜　　　　🤛 ",
    		"🤜　　　　🤛 ",
    		"🤜　　　　🤛 ",
    		"　🤜　　🤛　 ",
    		"　　🤜🤛　　 ",
    		"　🤜✨🤛　　 ",
    		"🤜　✨　🤛　 "
    	]
    };
    var soccerHeader = {
    	interval: 80,
    	frames: [
    		" 🧑⚽️       🧑 ",
    		"🧑  ⚽️      🧑 ",
    		"🧑   ⚽️     🧑 ",
    		"🧑    ⚽️    🧑 ",
    		"🧑     ⚽️   🧑 ",
    		"🧑      ⚽️  🧑 ",
    		"🧑       ⚽️🧑  ",
    		"🧑      ⚽️  🧑 ",
    		"🧑     ⚽️   🧑 ",
    		"🧑    ⚽️    🧑 ",
    		"🧑   ⚽️     🧑 ",
    		"🧑  ⚽️      🧑 "
    	]
    };
    var mindblown = {
    	interval: 160,
    	frames: [
    		"😐 ",
    		"😐 ",
    		"😮 ",
    		"😮 ",
    		"😦 ",
    		"😦 ",
    		"😧 ",
    		"😧 ",
    		"🤯 ",
    		"💥 ",
    		"✨ ",
    		"　 ",
    		"　 ",
    		"　 "
    	]
    };
    var speaker = {
    	interval: 160,
    	frames: [
    		"🔈 ",
    		"🔉 ",
    		"🔊 ",
    		"🔉 "
    	]
    };
    var orangePulse = {
    	interval: 100,
    	frames: [
    		"🔸 ",
    		"🔶 ",
    		"🟠 ",
    		"🟠 ",
    		"🔶 "
    	]
    };
    var bluePulse = {
    	interval: 100,
    	frames: [
    		"🔹 ",
    		"🔷 ",
    		"🔵 ",
    		"🔵 ",
    		"🔷 "
    	]
    };
    var orangeBluePulse = {
    	interval: 100,
    	frames: [
    		"🔸 ",
    		"🔶 ",
    		"🟠 ",
    		"🟠 ",
    		"🔶 ",
    		"🔹 ",
    		"🔷 ",
    		"🔵 ",
    		"🔵 ",
    		"🔷 "
    	]
    };
    var timeTravel = {
    	interval: 100,
    	frames: [
    		"🕛 ",
    		"🕚 ",
    		"🕙 ",
    		"🕘 ",
    		"🕗 ",
    		"🕖 ",
    		"🕕 ",
    		"🕔 ",
    		"🕓 ",
    		"🕒 ",
    		"🕑 ",
    		"🕐 "
    	]
    };
    var aesthetic = {
    	interval: 80,
    	frames: [
    		"▰▱▱▱▱▱▱",
    		"▰▰▱▱▱▱▱",
    		"▰▰▰▱▱▱▱",
    		"▰▰▰▰▱▱▱",
    		"▰▰▰▰▰▱▱",
    		"▰▰▰▰▰▰▱",
    		"▰▰▰▰▰▰▰",
    		"▰▱▱▱▱▱▱"
    	]
    };
    var require$$0$1 = {
    	dots: dots,
    	dots2: dots2,
    	dots3: dots3,
    	dots4: dots4,
    	dots5: dots5,
    	dots6: dots6,
    	dots7: dots7,
    	dots8: dots8,
    	dots9: dots9,
    	dots10: dots10,
    	dots11: dots11,
    	dots12: dots12,
    	dots8Bit: dots8Bit,
    	line: line,
    	line2: line2,
    	pipe: pipe,
    	simpleDots: simpleDots,
    	simpleDotsScrolling: simpleDotsScrolling,
    	star: star$1,
    	star2: star2,
    	flip: flip,
    	hamburger: hamburger,
    	growVertical: growVertical,
    	growHorizontal: growHorizontal,
    	balloon: balloon,
    	balloon2: balloon2,
    	noise: noise,
    	bounce: bounce,
    	boxBounce: boxBounce,
    	boxBounce2: boxBounce2,
    	triangle: triangle,
    	arc: arc,
    	circle: circle,
    	squareCorners: squareCorners,
    	circleQuarters: circleQuarters,
    	circleHalves: circleHalves,
    	squish: squish,
    	toggle: toggle,
    	toggle2: toggle2,
    	toggle3: toggle3,
    	toggle4: toggle4,
    	toggle5: toggle5,
    	toggle6: toggle6,
    	toggle7: toggle7,
    	toggle8: toggle8,
    	toggle9: toggle9,
    	toggle10: toggle10,
    	toggle11: toggle11,
    	toggle12: toggle12,
    	toggle13: toggle13,
    	arrow: arrow,
    	arrow2: arrow2,
    	arrow3: arrow3,
    	bouncingBar: bouncingBar,
    	bouncingBall: bouncingBall,
    	smiley: smiley,
    	monkey: monkey,
    	hearts: hearts,
    	clock: clock,
    	earth: earth,
    	material: material,
    	moon: moon,
    	runner: runner,
    	pong: pong,
    	shark: shark,
    	dqpb: dqpb,
    	weather: weather,
    	christmas: christmas,
    	grenade: grenade,
    	point: point,
    	layer: layer,
    	betaWave: betaWave,
    	fingerDance: fingerDance,
    	fistBump: fistBump,
    	soccerHeader: soccerHeader,
    	mindblown: mindblown,
    	speaker: speaker,
    	orangePulse: orangePulse,
    	bluePulse: bluePulse,
    	orangeBluePulse: orangeBluePulse,
    	timeTravel: timeTravel,
    	aesthetic: aesthetic
    };

    const spinners = Object.assign({}, require$$0$1); // eslint-disable-line import/extensions

    const spinnersList = Object.keys(spinners);

    Object.defineProperty(spinners, 'random', {
    	get() {
    		const randomIndex = Math.floor(Math.random() * spinnersList.length);
    		const spinnerName = spinnersList[randomIndex];
    		return spinners[spinnerName];
    	}
    });

    var cliSpinners$1 = spinners;

    var isUnicodeSupported$2 = () => {
    	if (process.platform !== 'win32') {
    		return true;
    	}

    	return Boolean(process.env.CI) ||
    		Boolean(process.env.WT_SESSION) || // Windows Terminal
    		process.env.TERM_PROGRAM === 'vscode' ||
    		process.env.TERM === 'xterm-256color' ||
    		process.env.TERM === 'alacritty';
    };

    const chalk$b = source;
    const isUnicodeSupported$1 = isUnicodeSupported$2;

    const main$2 = {
    	info: chalk$b.blue('ℹ'),
    	success: chalk$b.green('✔'),
    	warning: chalk$b.yellow('⚠'),
    	error: chalk$b.red('✖')
    };

    const fallback = {
    	info: chalk$b.blue('i'),
    	success: chalk$b.green('√'),
    	warning: chalk$b.yellow('‼'),
    	error: chalk$b.red('×')
    };

    var logSymbols$1 = isUnicodeSupported$1() ? main$2 : fallback;

    var wcwidth$2 = {exports: {}};

    var clone$1 = {exports: {}};

    (function (module) {
    var clone = (function() {

    /**
     * Clones (copies) an Object using deep copying.
     *
     * This function supports circular references by default, but if you are certain
     * there are no circular references in your object, you can save some CPU time
     * by calling clone(obj, false).
     *
     * Caution: if `circular` is false and `parent` contains circular references,
     * your program may enter an infinite loop and crash.
     *
     * @param `parent` - the object to be cloned
     * @param `circular` - set to true if the object to be cloned may contain
     *    circular references. (optional - true by default)
     * @param `depth` - set to a number if the object is only to be cloned to
     *    a particular depth. (optional - defaults to Infinity)
     * @param `prototype` - sets the prototype to be used when cloning an object.
     *    (optional - defaults to parent prototype).
    */
    function clone(parent, circular, depth, prototype) {
      if (typeof circular === 'object') {
        depth = circular.depth;
        prototype = circular.prototype;
        circular = circular.circular;
      }
      // maintain two arrays for circular references, where corresponding parents
      // and children have the same index
      var allParents = [];
      var allChildren = [];

      var useBuffer = typeof Buffer != 'undefined';

      if (typeof circular == 'undefined')
        circular = true;

      if (typeof depth == 'undefined')
        depth = Infinity;

      // recurse this function so we don't reset allParents and allChildren
      function _clone(parent, depth) {
        // cloning null always returns null
        if (parent === null)
          return null;

        if (depth == 0)
          return parent;

        var child;
        var proto;
        if (typeof parent != 'object') {
          return parent;
        }

        if (clone.__isArray(parent)) {
          child = [];
        } else if (clone.__isRegExp(parent)) {
          child = new RegExp(parent.source, __getRegExpFlags(parent));
          if (parent.lastIndex) child.lastIndex = parent.lastIndex;
        } else if (clone.__isDate(parent)) {
          child = new Date(parent.getTime());
        } else if (useBuffer && Buffer.isBuffer(parent)) {
          if (Buffer.allocUnsafe) {
            // Node.js >= 4.5.0
            child = Buffer.allocUnsafe(parent.length);
          } else {
            // Older Node.js versions
            child = new Buffer(parent.length);
          }
          parent.copy(child);
          return child;
        } else {
          if (typeof prototype == 'undefined') {
            proto = Object.getPrototypeOf(parent);
            child = Object.create(proto);
          }
          else {
            child = Object.create(prototype);
            proto = prototype;
          }
        }

        if (circular) {
          var index = allParents.indexOf(parent);

          if (index != -1) {
            return allChildren[index];
          }
          allParents.push(parent);
          allChildren.push(child);
        }

        for (var i in parent) {
          var attrs;
          if (proto) {
            attrs = Object.getOwnPropertyDescriptor(proto, i);
          }

          if (attrs && attrs.set == null) {
            continue;
          }
          child[i] = _clone(parent[i], depth - 1);
        }

        return child;
      }

      return _clone(parent, depth);
    }

    /**
     * Simple flat clone using prototype, accepts only objects, usefull for property
     * override on FLAT configuration object (no nested props).
     *
     * USE WITH CAUTION! This may not behave as you wish if you do not know how this
     * works.
     */
    clone.clonePrototype = function clonePrototype(parent) {
      if (parent === null)
        return null;

      var c = function () {};
      c.prototype = parent;
      return new c();
    };

    // private utility functions

    function __objToStr(o) {
      return Object.prototype.toString.call(o);
    }clone.__objToStr = __objToStr;

    function __isDate(o) {
      return typeof o === 'object' && __objToStr(o) === '[object Date]';
    }clone.__isDate = __isDate;

    function __isArray(o) {
      return typeof o === 'object' && __objToStr(o) === '[object Array]';
    }clone.__isArray = __isArray;

    function __isRegExp(o) {
      return typeof o === 'object' && __objToStr(o) === '[object RegExp]';
    }clone.__isRegExp = __isRegExp;

    function __getRegExpFlags(re) {
      var flags = '';
      if (re.global) flags += 'g';
      if (re.ignoreCase) flags += 'i';
      if (re.multiline) flags += 'm';
      return flags;
    }clone.__getRegExpFlags = __getRegExpFlags;

    return clone;
    })();

    if (module.exports) {
      module.exports = clone;
    }
    }(clone$1));

    var clone = clone$1.exports;

    var defaults$1 = function(options, defaults) {
      options = options || {};

      Object.keys(defaults).forEach(function(key) {
        if (typeof options[key] === 'undefined') {
          options[key] = clone(defaults[key]);
        }
      });

      return options;
    };

    var combining$1 = [
        [ 0x0300, 0x036F ], [ 0x0483, 0x0486 ], [ 0x0488, 0x0489 ],
        [ 0x0591, 0x05BD ], [ 0x05BF, 0x05BF ], [ 0x05C1, 0x05C2 ],
        [ 0x05C4, 0x05C5 ], [ 0x05C7, 0x05C7 ], [ 0x0600, 0x0603 ],
        [ 0x0610, 0x0615 ], [ 0x064B, 0x065E ], [ 0x0670, 0x0670 ],
        [ 0x06D6, 0x06E4 ], [ 0x06E7, 0x06E8 ], [ 0x06EA, 0x06ED ],
        [ 0x070F, 0x070F ], [ 0x0711, 0x0711 ], [ 0x0730, 0x074A ],
        [ 0x07A6, 0x07B0 ], [ 0x07EB, 0x07F3 ], [ 0x0901, 0x0902 ],
        [ 0x093C, 0x093C ], [ 0x0941, 0x0948 ], [ 0x094D, 0x094D ],
        [ 0x0951, 0x0954 ], [ 0x0962, 0x0963 ], [ 0x0981, 0x0981 ],
        [ 0x09BC, 0x09BC ], [ 0x09C1, 0x09C4 ], [ 0x09CD, 0x09CD ],
        [ 0x09E2, 0x09E3 ], [ 0x0A01, 0x0A02 ], [ 0x0A3C, 0x0A3C ],
        [ 0x0A41, 0x0A42 ], [ 0x0A47, 0x0A48 ], [ 0x0A4B, 0x0A4D ],
        [ 0x0A70, 0x0A71 ], [ 0x0A81, 0x0A82 ], [ 0x0ABC, 0x0ABC ],
        [ 0x0AC1, 0x0AC5 ], [ 0x0AC7, 0x0AC8 ], [ 0x0ACD, 0x0ACD ],
        [ 0x0AE2, 0x0AE3 ], [ 0x0B01, 0x0B01 ], [ 0x0B3C, 0x0B3C ],
        [ 0x0B3F, 0x0B3F ], [ 0x0B41, 0x0B43 ], [ 0x0B4D, 0x0B4D ],
        [ 0x0B56, 0x0B56 ], [ 0x0B82, 0x0B82 ], [ 0x0BC0, 0x0BC0 ],
        [ 0x0BCD, 0x0BCD ], [ 0x0C3E, 0x0C40 ], [ 0x0C46, 0x0C48 ],
        [ 0x0C4A, 0x0C4D ], [ 0x0C55, 0x0C56 ], [ 0x0CBC, 0x0CBC ],
        [ 0x0CBF, 0x0CBF ], [ 0x0CC6, 0x0CC6 ], [ 0x0CCC, 0x0CCD ],
        [ 0x0CE2, 0x0CE3 ], [ 0x0D41, 0x0D43 ], [ 0x0D4D, 0x0D4D ],
        [ 0x0DCA, 0x0DCA ], [ 0x0DD2, 0x0DD4 ], [ 0x0DD6, 0x0DD6 ],
        [ 0x0E31, 0x0E31 ], [ 0x0E34, 0x0E3A ], [ 0x0E47, 0x0E4E ],
        [ 0x0EB1, 0x0EB1 ], [ 0x0EB4, 0x0EB9 ], [ 0x0EBB, 0x0EBC ],
        [ 0x0EC8, 0x0ECD ], [ 0x0F18, 0x0F19 ], [ 0x0F35, 0x0F35 ],
        [ 0x0F37, 0x0F37 ], [ 0x0F39, 0x0F39 ], [ 0x0F71, 0x0F7E ],
        [ 0x0F80, 0x0F84 ], [ 0x0F86, 0x0F87 ], [ 0x0F90, 0x0F97 ],
        [ 0x0F99, 0x0FBC ], [ 0x0FC6, 0x0FC6 ], [ 0x102D, 0x1030 ],
        [ 0x1032, 0x1032 ], [ 0x1036, 0x1037 ], [ 0x1039, 0x1039 ],
        [ 0x1058, 0x1059 ], [ 0x1160, 0x11FF ], [ 0x135F, 0x135F ],
        [ 0x1712, 0x1714 ], [ 0x1732, 0x1734 ], [ 0x1752, 0x1753 ],
        [ 0x1772, 0x1773 ], [ 0x17B4, 0x17B5 ], [ 0x17B7, 0x17BD ],
        [ 0x17C6, 0x17C6 ], [ 0x17C9, 0x17D3 ], [ 0x17DD, 0x17DD ],
        [ 0x180B, 0x180D ], [ 0x18A9, 0x18A9 ], [ 0x1920, 0x1922 ],
        [ 0x1927, 0x1928 ], [ 0x1932, 0x1932 ], [ 0x1939, 0x193B ],
        [ 0x1A17, 0x1A18 ], [ 0x1B00, 0x1B03 ], [ 0x1B34, 0x1B34 ],
        [ 0x1B36, 0x1B3A ], [ 0x1B3C, 0x1B3C ], [ 0x1B42, 0x1B42 ],
        [ 0x1B6B, 0x1B73 ], [ 0x1DC0, 0x1DCA ], [ 0x1DFE, 0x1DFF ],
        [ 0x200B, 0x200F ], [ 0x202A, 0x202E ], [ 0x2060, 0x2063 ],
        [ 0x206A, 0x206F ], [ 0x20D0, 0x20EF ], [ 0x302A, 0x302F ],
        [ 0x3099, 0x309A ], [ 0xA806, 0xA806 ], [ 0xA80B, 0xA80B ],
        [ 0xA825, 0xA826 ], [ 0xFB1E, 0xFB1E ], [ 0xFE00, 0xFE0F ],
        [ 0xFE20, 0xFE23 ], [ 0xFEFF, 0xFEFF ], [ 0xFFF9, 0xFFFB ],
        [ 0x10A01, 0x10A03 ], [ 0x10A05, 0x10A06 ], [ 0x10A0C, 0x10A0F ],
        [ 0x10A38, 0x10A3A ], [ 0x10A3F, 0x10A3F ], [ 0x1D167, 0x1D169 ],
        [ 0x1D173, 0x1D182 ], [ 0x1D185, 0x1D18B ], [ 0x1D1AA, 0x1D1AD ],
        [ 0x1D242, 0x1D244 ], [ 0xE0001, 0xE0001 ], [ 0xE0020, 0xE007F ],
        [ 0xE0100, 0xE01EF ]
    ];

    var defaults = defaults$1;
    var combining = combining$1;

    var DEFAULTS = {
      nul: 0,
      control: 0
    };

    wcwidth$2.exports = function wcwidth(str) {
      return wcswidth(str, DEFAULTS)
    };

    wcwidth$2.exports.config = function(opts) {
      opts = defaults(opts || {}, DEFAULTS);
      return function wcwidth(str) {
        return wcswidth(str, opts)
      }
    };

    /*
     *  The following functions define the column width of an ISO 10646
     *  character as follows:
     *  - The null character (U+0000) has a column width of 0.
     *  - Other C0/C1 control characters and DEL will lead to a return value
     *    of -1.
     *  - Non-spacing and enclosing combining characters (general category
     *    code Mn or Me in the
     *    Unicode database) have a column width of 0.
     *  - SOFT HYPHEN (U+00AD) has a column width of 1.
     *  - Other format characters (general category code Cf in the Unicode
     *    database) and ZERO WIDTH
     *    SPACE (U+200B) have a column width of 0.
     *  - Hangul Jamo medial vowels and final consonants (U+1160-U+11FF)
     *    have a column width of 0.
     *  - Spacing characters in the East Asian Wide (W) or East Asian
     *    Full-width (F) category as
     *    defined in Unicode Technical Report #11 have a column width of 2.
     *  - All remaining characters (including all printable ISO 8859-1 and
     *    WGL4 characters, Unicode control characters, etc.) have a column
     *    width of 1.
     *  This implementation assumes that characters are encoded in ISO 10646.
    */

    function wcswidth(str, opts) {
      if (typeof str !== 'string') return wcwidth$1(str, opts)

      var s = 0;
      for (var i = 0; i < str.length; i++) {
        var n = wcwidth$1(str.charCodeAt(i), opts);
        if (n < 0) return -1
        s += n;
      }

      return s
    }

    function wcwidth$1(ucs, opts) {
      // test for 8-bit control characters
      if (ucs === 0) return opts.nul
      if (ucs < 32 || (ucs >= 0x7f && ucs < 0xa0)) return opts.control

      // binary search in table of non-spacing characters
      if (bisearch(ucs)) return 0

      // if we arrive here, ucs is not a combining or C0/C1 control character
      return 1 +
          (ucs >= 0x1100 &&
           (ucs <= 0x115f ||                       // Hangul Jamo init. consonants
            ucs == 0x2329 || ucs == 0x232a ||
            (ucs >= 0x2e80 && ucs <= 0xa4cf &&
             ucs != 0x303f) ||                     // CJK ... Yi
            (ucs >= 0xac00 && ucs <= 0xd7a3) ||    // Hangul Syllables
            (ucs >= 0xf900 && ucs <= 0xfaff) ||    // CJK Compatibility Ideographs
            (ucs >= 0xfe10 && ucs <= 0xfe19) ||    // Vertical forms
            (ucs >= 0xfe30 && ucs <= 0xfe6f) ||    // CJK Compatibility Forms
            (ucs >= 0xff00 && ucs <= 0xff60) ||    // Fullwidth Forms
            (ucs >= 0xffe0 && ucs <= 0xffe6) ||
            (ucs >= 0x20000 && ucs <= 0x2fffd) ||
            (ucs >= 0x30000 && ucs <= 0x3fffd)));
    }

    function bisearch(ucs) {
      var min = 0;
      var max = combining.length - 1;
      var mid;

      if (ucs < combining[0][0] || ucs > combining[max][1]) return false

      while (max >= min) {
        mid = Math.floor((min + max) / 2);
        if (ucs > combining[mid][1]) min = mid + 1;
        else if (ucs < combining[mid][0]) max = mid - 1;
        else return true
      }

      return false
    }

    var isInteractive$1 = ({stream = process.stdout} = {}) => {
    	return Boolean(
    		stream && stream.isTTY &&
    		process.env.TERM !== 'dumb' &&
    		!('CI' in process.env)
    	);
    };

    var bl = {exports: {}};

    const { Buffer: Buffer$9 } = require$$0__default$2["default"];
    const symbol = Symbol.for('BufferList');

    function BufferList$1 (buf) {
      if (!(this instanceof BufferList$1)) {
        return new BufferList$1(buf)
      }

      BufferList$1._init.call(this, buf);
    }

    BufferList$1._init = function _init (buf) {
      Object.defineProperty(this, symbol, { value: true });

      this._bufs = [];
      this.length = 0;

      if (buf) {
        this.append(buf);
      }
    };

    BufferList$1.prototype._new = function _new (buf) {
      return new BufferList$1(buf)
    };

    BufferList$1.prototype._offset = function _offset (offset) {
      if (offset === 0) {
        return [0, 0]
      }

      let tot = 0;

      for (let i = 0; i < this._bufs.length; i++) {
        const _t = tot + this._bufs[i].length;
        if (offset < _t || i === this._bufs.length - 1) {
          return [i, offset - tot]
        }
        tot = _t;
      }
    };

    BufferList$1.prototype._reverseOffset = function (blOffset) {
      const bufferId = blOffset[0];
      let offset = blOffset[1];

      for (let i = 0; i < bufferId; i++) {
        offset += this._bufs[i].length;
      }

      return offset
    };

    BufferList$1.prototype.get = function get (index) {
      if (index > this.length || index < 0) {
        return undefined
      }

      const offset = this._offset(index);

      return this._bufs[offset[0]][offset[1]]
    };

    BufferList$1.prototype.slice = function slice (start, end) {
      if (typeof start === 'number' && start < 0) {
        start += this.length;
      }

      if (typeof end === 'number' && end < 0) {
        end += this.length;
      }

      return this.copy(null, 0, start, end)
    };

    BufferList$1.prototype.copy = function copy (dst, dstStart, srcStart, srcEnd) {
      if (typeof srcStart !== 'number' || srcStart < 0) {
        srcStart = 0;
      }

      if (typeof srcEnd !== 'number' || srcEnd > this.length) {
        srcEnd = this.length;
      }

      if (srcStart >= this.length) {
        return dst || Buffer$9.alloc(0)
      }

      if (srcEnd <= 0) {
        return dst || Buffer$9.alloc(0)
      }

      const copy = !!dst;
      const off = this._offset(srcStart);
      const len = srcEnd - srcStart;
      let bytes = len;
      let bufoff = (copy && dstStart) || 0;
      let start = off[1];

      // copy/slice everything
      if (srcStart === 0 && srcEnd === this.length) {
        if (!copy) {
          // slice, but full concat if multiple buffers
          return this._bufs.length === 1
            ? this._bufs[0]
            : Buffer$9.concat(this._bufs, this.length)
        }

        // copy, need to copy individual buffers
        for (let i = 0; i < this._bufs.length; i++) {
          this._bufs[i].copy(dst, bufoff);
          bufoff += this._bufs[i].length;
        }

        return dst
      }

      // easy, cheap case where it's a subset of one of the buffers
      if (bytes <= this._bufs[off[0]].length - start) {
        return copy
          ? this._bufs[off[0]].copy(dst, dstStart, start, start + bytes)
          : this._bufs[off[0]].slice(start, start + bytes)
      }

      if (!copy) {
        // a slice, we need something to copy in to
        dst = Buffer$9.allocUnsafe(len);
      }

      for (let i = off[0]; i < this._bufs.length; i++) {
        const l = this._bufs[i].length - start;

        if (bytes > l) {
          this._bufs[i].copy(dst, bufoff, start);
          bufoff += l;
        } else {
          this._bufs[i].copy(dst, bufoff, start, start + bytes);
          bufoff += l;
          break
        }

        bytes -= l;

        if (start) {
          start = 0;
        }
      }

      // safeguard so that we don't return uninitialized memory
      if (dst.length > bufoff) return dst.slice(0, bufoff)

      return dst
    };

    BufferList$1.prototype.shallowSlice = function shallowSlice (start, end) {
      start = start || 0;
      end = typeof end !== 'number' ? this.length : end;

      if (start < 0) {
        start += this.length;
      }

      if (end < 0) {
        end += this.length;
      }

      if (start === end) {
        return this._new()
      }

      const startOffset = this._offset(start);
      const endOffset = this._offset(end);
      const buffers = this._bufs.slice(startOffset[0], endOffset[0] + 1);

      if (endOffset[1] === 0) {
        buffers.pop();
      } else {
        buffers[buffers.length - 1] = buffers[buffers.length - 1].slice(0, endOffset[1]);
      }

      if (startOffset[1] !== 0) {
        buffers[0] = buffers[0].slice(startOffset[1]);
      }

      return this._new(buffers)
    };

    BufferList$1.prototype.toString = function toString (encoding, start, end) {
      return this.slice(start, end).toString(encoding)
    };

    BufferList$1.prototype.consume = function consume (bytes) {
      // first, normalize the argument, in accordance with how Buffer does it
      bytes = Math.trunc(bytes);
      // do nothing if not a positive number
      if (Number.isNaN(bytes) || bytes <= 0) return this

      while (this._bufs.length) {
        if (bytes >= this._bufs[0].length) {
          bytes -= this._bufs[0].length;
          this.length -= this._bufs[0].length;
          this._bufs.shift();
        } else {
          this._bufs[0] = this._bufs[0].slice(bytes);
          this.length -= bytes;
          break
        }
      }

      return this
    };

    BufferList$1.prototype.duplicate = function duplicate () {
      const copy = this._new();

      for (let i = 0; i < this._bufs.length; i++) {
        copy.append(this._bufs[i]);
      }

      return copy
    };

    BufferList$1.prototype.append = function append (buf) {
      if (buf == null) {
        return this
      }

      if (buf.buffer) {
        // append a view of the underlying ArrayBuffer
        this._appendBuffer(Buffer$9.from(buf.buffer, buf.byteOffset, buf.byteLength));
      } else if (Array.isArray(buf)) {
        for (let i = 0; i < buf.length; i++) {
          this.append(buf[i]);
        }
      } else if (this._isBufferList(buf)) {
        // unwrap argument into individual BufferLists
        for (let i = 0; i < buf._bufs.length; i++) {
          this.append(buf._bufs[i]);
        }
      } else {
        // coerce number arguments to strings, since Buffer(number) does
        // uninitialized memory allocation
        if (typeof buf === 'number') {
          buf = buf.toString();
        }

        this._appendBuffer(Buffer$9.from(buf));
      }

      return this
    };

    BufferList$1.prototype._appendBuffer = function appendBuffer (buf) {
      this._bufs.push(buf);
      this.length += buf.length;
    };

    BufferList$1.prototype.indexOf = function (search, offset, encoding) {
      if (encoding === undefined && typeof offset === 'string') {
        encoding = offset;
        offset = undefined;
      }

      if (typeof search === 'function' || Array.isArray(search)) {
        throw new TypeError('The "value" argument must be one of type string, Buffer, BufferList, or Uint8Array.')
      } else if (typeof search === 'number') {
        search = Buffer$9.from([search]);
      } else if (typeof search === 'string') {
        search = Buffer$9.from(search, encoding);
      } else if (this._isBufferList(search)) {
        search = search.slice();
      } else if (Array.isArray(search.buffer)) {
        search = Buffer$9.from(search.buffer, search.byteOffset, search.byteLength);
      } else if (!Buffer$9.isBuffer(search)) {
        search = Buffer$9.from(search);
      }

      offset = Number(offset || 0);

      if (isNaN(offset)) {
        offset = 0;
      }

      if (offset < 0) {
        offset = this.length + offset;
      }

      if (offset < 0) {
        offset = 0;
      }

      if (search.length === 0) {
        return offset > this.length ? this.length : offset
      }

      const blOffset = this._offset(offset);
      let blIndex = blOffset[0]; // index of which internal buffer we're working on
      let buffOffset = blOffset[1]; // offset of the internal buffer we're working on

      // scan over each buffer
      for (; blIndex < this._bufs.length; blIndex++) {
        const buff = this._bufs[blIndex];

        while (buffOffset < buff.length) {
          const availableWindow = buff.length - buffOffset;

          if (availableWindow >= search.length) {
            const nativeSearchResult = buff.indexOf(search, buffOffset);

            if (nativeSearchResult !== -1) {
              return this._reverseOffset([blIndex, nativeSearchResult])
            }

            buffOffset = buff.length - search.length + 1; // end of native search window
          } else {
            const revOffset = this._reverseOffset([blIndex, buffOffset]);

            if (this._match(revOffset, search)) {
              return revOffset
            }

            buffOffset++;
          }
        }

        buffOffset = 0;
      }

      return -1
    };

    BufferList$1.prototype._match = function (offset, search) {
      if (this.length - offset < search.length) {
        return false
      }

      for (let searchOffset = 0; searchOffset < search.length; searchOffset++) {
        if (this.get(offset + searchOffset) !== search[searchOffset]) {
          return false
        }
      }
      return true
    }

    ;(function () {
      const methods = {
        readDoubleBE: 8,
        readDoubleLE: 8,
        readFloatBE: 4,
        readFloatLE: 4,
        readInt32BE: 4,
        readInt32LE: 4,
        readUInt32BE: 4,
        readUInt32LE: 4,
        readInt16BE: 2,
        readInt16LE: 2,
        readUInt16BE: 2,
        readUInt16LE: 2,
        readInt8: 1,
        readUInt8: 1,
        readIntBE: null,
        readIntLE: null,
        readUIntBE: null,
        readUIntLE: null
      };

      for (const m in methods) {
        (function (m) {
          if (methods[m] === null) {
            BufferList$1.prototype[m] = function (offset, byteLength) {
              return this.slice(offset, offset + byteLength)[m](0, byteLength)
            };
          } else {
            BufferList$1.prototype[m] = function (offset = 0) {
              return this.slice(offset, offset + methods[m])[m](0)
            };
          }
        }(m));
      }
    }());

    // Used internally by the class and also as an indicator of this object being
    // a `BufferList`. It's not possible to use `instanceof BufferList` in a browser
    // environment because there could be multiple different copies of the
    // BufferList class and some `BufferList`s might be `BufferList`s.
    BufferList$1.prototype._isBufferList = function _isBufferList (b) {
      return b instanceof BufferList$1 || BufferList$1.isBufferList(b)
    };

    BufferList$1.isBufferList = function isBufferList (b) {
      return b != null && b[symbol]
    };

    var BufferList_1 = BufferList$1;

    const DuplexStream = readable$1.exports.Duplex;
    const inherits$1 = inherits$4.exports;
    const BufferList = BufferList_1;

    function BufferListStream$1 (callback) {
      if (!(this instanceof BufferListStream$1)) {
        return new BufferListStream$1(callback)
      }

      if (typeof callback === 'function') {
        this._callback = callback;

        const piper = function piper (err) {
          if (this._callback) {
            this._callback(err);
            this._callback = null;
          }
        }.bind(this);

        this.on('pipe', function onPipe (src) {
          src.on('error', piper);
        });
        this.on('unpipe', function onUnpipe (src) {
          src.removeListener('error', piper);
        });

        callback = null;
      }

      BufferList._init.call(this, callback);
      DuplexStream.call(this);
    }

    inherits$1(BufferListStream$1, DuplexStream);
    Object.assign(BufferListStream$1.prototype, BufferList.prototype);

    BufferListStream$1.prototype._new = function _new (callback) {
      return new BufferListStream$1(callback)
    };

    BufferListStream$1.prototype._write = function _write (buf, encoding, callback) {
      this._appendBuffer(buf);

      if (typeof callback === 'function') {
        callback();
      }
    };

    BufferListStream$1.prototype._read = function _read (size) {
      if (!this.length) {
        return this.push(null)
      }

      size = Math.min(size, this.length);
      this.push(this.slice(0, size));
      this.consume(size);
    };

    BufferListStream$1.prototype.end = function end (chunk) {
      DuplexStream.prototype.end.call(this, chunk);

      if (this._callback) {
        this._callback(null, this.slice());
        this._callback = null;
      }
    };

    BufferListStream$1.prototype._destroy = function _destroy (err, cb) {
      this._bufs.length = 0;
      this.length = 0;
      cb(err);
    };

    BufferListStream$1.prototype._isBufferList = function _isBufferList (b) {
      return b instanceof BufferListStream$1 || b instanceof BufferList || BufferListStream$1.isBufferList(b)
    };

    BufferListStream$1.isBufferList = BufferList.isBufferList;

    bl.exports = BufferListStream$1;
    bl.exports.BufferListStream = BufferListStream$1;
    bl.exports.BufferList = BufferList;

    const readline = require$$3__default["default"];
    const chalk$a = source;
    const cliCursor$2 = cliCursor$3;
    const cliSpinners = cliSpinners$1;
    const logSymbols = logSymbols$1;
    const stripAnsi$1 = stripAnsi$3;
    const wcwidth = wcwidth$2.exports;
    const isInteractive = isInteractive$1;
    const isUnicodeSupported = isUnicodeSupported$2;
    const {BufferListStream} = bl.exports;

    const TEXT = Symbol('text');
    const PREFIX_TEXT = Symbol('prefixText');
    const ASCII_ETX_CODE = 0x03; // Ctrl+C emits this code

    class StdinDiscarder {
    	constructor() {
    		this.requests = 0;

    		this.mutedStream = new BufferListStream();
    		this.mutedStream.pipe(process.stdout);

    		const self = this; // eslint-disable-line unicorn/no-this-assignment
    		this.ourEmit = function (event, data, ...args) {
    			const {stdin} = process;
    			if (self.requests > 0 || stdin.emit === self.ourEmit) {
    				if (event === 'keypress') { // Fixes readline behavior
    					return;
    				}

    				if (event === 'data' && data.includes(ASCII_ETX_CODE)) {
    					process.emit('SIGINT');
    				}

    				Reflect.apply(self.oldEmit, this, [event, data, ...args]);
    			} else {
    				Reflect.apply(process.stdin.emit, this, [event, data, ...args]);
    			}
    		};
    	}

    	start() {
    		this.requests++;

    		if (this.requests === 1) {
    			this.realStart();
    		}
    	}

    	stop() {
    		if (this.requests <= 0) {
    			throw new Error('`stop` called more times than `start`');
    		}

    		this.requests--;

    		if (this.requests === 0) {
    			this.realStop();
    		}
    	}

    	realStart() {
    		// No known way to make it work reliably on Windows
    		if (process.platform === 'win32') {
    			return;
    		}

    		this.rl = readline.createInterface({
    			input: process.stdin,
    			output: this.mutedStream
    		});

    		this.rl.on('SIGINT', () => {
    			if (process.listenerCount('SIGINT') === 0) {
    				process.emit('SIGINT');
    			} else {
    				this.rl.close();
    				process.kill(process.pid, 'SIGINT');
    			}
    		});
    	}

    	realStop() {
    		if (process.platform === 'win32') {
    			return;
    		}

    		this.rl.close();
    		this.rl = undefined;
    	}
    }

    let stdinDiscarder;

    class Ora {
    	constructor(options) {
    		if (!stdinDiscarder) {
    			stdinDiscarder = new StdinDiscarder();
    		}

    		if (typeof options === 'string') {
    			options = {
    				text: options
    			};
    		}

    		this.options = {
    			text: '',
    			color: 'cyan',
    			stream: process.stderr,
    			discardStdin: true,
    			...options
    		};

    		this.spinner = this.options.spinner;

    		this.color = this.options.color;
    		this.hideCursor = this.options.hideCursor !== false;
    		this.interval = this.options.interval || this.spinner.interval || 100;
    		this.stream = this.options.stream;
    		this.id = undefined;
    		this.isEnabled = typeof this.options.isEnabled === 'boolean' ? this.options.isEnabled : isInteractive({stream: this.stream});
    		this.isSilent = typeof this.options.isSilent === 'boolean' ? this.options.isSilent : false;

    		// Set *after* `this.stream`
    		this.text = this.options.text;
    		this.prefixText = this.options.prefixText;
    		this.linesToClear = 0;
    		this.indent = this.options.indent;
    		this.discardStdin = this.options.discardStdin;
    		this.isDiscardingStdin = false;
    	}

    	get indent() {
    		return this._indent;
    	}

    	set indent(indent = 0) {
    		if (!(indent >= 0 && Number.isInteger(indent))) {
    			throw new Error('The `indent` option must be an integer from 0 and up');
    		}

    		this._indent = indent;
    	}

    	_updateInterval(interval) {
    		if (interval !== undefined) {
    			this.interval = interval;
    		}
    	}

    	get spinner() {
    		return this._spinner;
    	}

    	set spinner(spinner) {
    		this.frameIndex = 0;

    		if (typeof spinner === 'object') {
    			if (spinner.frames === undefined) {
    				throw new Error('The given spinner must have a `frames` property');
    			}

    			this._spinner = spinner;
    		} else if (!isUnicodeSupported()) {
    			this._spinner = cliSpinners.line;
    		} else if (spinner === undefined) {
    			// Set default spinner
    			this._spinner = cliSpinners.dots;
    		} else if (spinner !== 'default' && cliSpinners[spinner]) {
    			this._spinner = cliSpinners[spinner];
    		} else {
    			throw new Error(`There is no built-in spinner named '${spinner}'. See https://github.com/sindresorhus/cli-spinners/blob/main/spinners.json for a full list.`);
    		}

    		this._updateInterval(this._spinner.interval);
    	}

    	get text() {
    		return this[TEXT];
    	}

    	set text(value) {
    		this[TEXT] = value;
    		this.updateLineCount();
    	}

    	get prefixText() {
    		return this[PREFIX_TEXT];
    	}

    	set prefixText(value) {
    		this[PREFIX_TEXT] = value;
    		this.updateLineCount();
    	}

    	get isSpinning() {
    		return this.id !== undefined;
    	}

    	getFullPrefixText(prefixText = this[PREFIX_TEXT], postfix = ' ') {
    		if (typeof prefixText === 'string') {
    			return prefixText + postfix;
    		}

    		if (typeof prefixText === 'function') {
    			return prefixText() + postfix;
    		}

    		return '';
    	}

    	updateLineCount() {
    		const columns = this.stream.columns || 80;
    		const fullPrefixText = this.getFullPrefixText(this.prefixText, '-');
    		this.lineCount = 0;
    		for (const line of stripAnsi$1(fullPrefixText + '--' + this[TEXT]).split('\n')) {
    			this.lineCount += Math.max(1, Math.ceil(wcwidth(line) / columns));
    		}
    	}

    	get isEnabled() {
    		return this._isEnabled && !this.isSilent;
    	}

    	set isEnabled(value) {
    		if (typeof value !== 'boolean') {
    			throw new TypeError('The `isEnabled` option must be a boolean');
    		}

    		this._isEnabled = value;
    	}

    	get isSilent() {
    		return this._isSilent;
    	}

    	set isSilent(value) {
    		if (typeof value !== 'boolean') {
    			throw new TypeError('The `isSilent` option must be a boolean');
    		}

    		this._isSilent = value;
    	}

    	frame() {
    		const {frames} = this.spinner;
    		let frame = frames[this.frameIndex];

    		if (this.color) {
    			frame = chalk$a[this.color](frame);
    		}

    		this.frameIndex = ++this.frameIndex % frames.length;
    		const fullPrefixText = (typeof this.prefixText === 'string' && this.prefixText !== '') ? this.prefixText + ' ' : '';
    		const fullText = typeof this.text === 'string' ? ' ' + this.text : '';

    		return fullPrefixText + frame + fullText;
    	}

    	clear() {
    		if (!this.isEnabled || !this.stream.isTTY) {
    			return this;
    		}

    		for (let i = 0; i < this.linesToClear; i++) {
    			if (i > 0) {
    				this.stream.moveCursor(0, -1);
    			}

    			this.stream.clearLine();
    			this.stream.cursorTo(this.indent);
    		}

    		this.linesToClear = 0;

    		return this;
    	}

    	render() {
    		if (this.isSilent) {
    			return this;
    		}

    		this.clear();
    		this.stream.write(this.frame());
    		this.linesToClear = this.lineCount;

    		return this;
    	}

    	start(text) {
    		if (text) {
    			this.text = text;
    		}

    		if (this.isSilent) {
    			return this;
    		}

    		if (!this.isEnabled) {
    			if (this.text) {
    				this.stream.write(`- ${this.text}\n`);
    			}

    			return this;
    		}

    		if (this.isSpinning) {
    			return this;
    		}

    		if (this.hideCursor) {
    			cliCursor$2.hide(this.stream);
    		}

    		if (this.discardStdin && process.stdin.isTTY) {
    			this.isDiscardingStdin = true;
    			stdinDiscarder.start();
    		}

    		this.render();
    		this.id = setInterval(this.render.bind(this), this.interval);

    		return this;
    	}

    	stop() {
    		if (!this.isEnabled) {
    			return this;
    		}

    		clearInterval(this.id);
    		this.id = undefined;
    		this.frameIndex = 0;
    		this.clear();
    		if (this.hideCursor) {
    			cliCursor$2.show(this.stream);
    		}

    		if (this.discardStdin && process.stdin.isTTY && this.isDiscardingStdin) {
    			stdinDiscarder.stop();
    			this.isDiscardingStdin = false;
    		}

    		return this;
    	}

    	succeed(text) {
    		return this.stopAndPersist({symbol: logSymbols.success, text});
    	}

    	fail(text) {
    		return this.stopAndPersist({symbol: logSymbols.error, text});
    	}

    	warn(text) {
    		return this.stopAndPersist({symbol: logSymbols.warning, text});
    	}

    	info(text) {
    		return this.stopAndPersist({symbol: logSymbols.info, text});
    	}

    	stopAndPersist(options = {}) {
    		if (this.isSilent) {
    			return this;
    		}

    		const prefixText = options.prefixText || this.prefixText;
    		const text = options.text || this.text;
    		const fullText = (typeof text === 'string') ? ' ' + text : '';

    		this.stop();
    		this.stream.write(`${this.getFullPrefixText(prefixText, ' ')}${options.symbol || ' '}${fullText}\n`);

    		return this;
    	}
    }

    const oraFactory = function (options) {
    	return new Ora(options);
    };

    ora$1.exports = oraFactory;

    ora$1.exports.promise = (action, options) => {
    	// eslint-disable-next-line promise/prefer-await-to-then
    	if (typeof action.then !== 'function') {
    		throw new TypeError('Parameter `action` must be a Promise');
    	}

    	const spinner = new Ora(options);
    	spinner.start();

    	(async () => {
    		try {
    			await action;
    			spinner.succeed();
    		} catch {
    			spinner.fail();
    		}
    	})();

    	return spinner;
    };

    const _$7 = {
      last: last_1,
      flatten: flatten_1,
    };
    const util = readline$1;
    const cliWidth = cliWidth$1.exports;
    const stripAnsi = stripAnsi$3;
    const stringWidth = stringWidth$2.exports;
    const ora = ora$1.exports;

    function height(content) {
      return content.split('\n').length;
    }

    function lastLine(content) {
      return _$7.last(content.split('\n'));
    }

    class ScreenManager$1 {
      constructor(rl) {
        // These variables are keeping information to allow correct prompt re-rendering
        this.height = 0;
        this.extraLinesUnderPrompt = 0;

        this.rl = rl;
      }

      renderWithSpinner(content, bottomContent) {
        if (this.spinnerId) {
          clearInterval(this.spinnerId);
        }

        let spinner;
        let contentFunc;
        let bottomContentFunc;

        if (bottomContent) {
          spinner = ora(bottomContent);
          contentFunc = () => content;
          bottomContentFunc = () => spinner.frame();
        } else {
          spinner = ora(content);
          contentFunc = () => spinner.frame();
          bottomContentFunc = () => '';
        }

        this.spinnerId = setInterval(
          () => this.render(contentFunc(), bottomContentFunc(), true),
          spinner.interval
        );
      }

      render(content, bottomContent, spinning = false) {
        if (this.spinnerId && !spinning) {
          clearInterval(this.spinnerId);
        }

        this.rl.output.unmute();
        this.clean(this.extraLinesUnderPrompt);

        /**
         * Write message to screen and setPrompt to control backspace
         */

        const promptLine = lastLine(content);
        const rawPromptLine = stripAnsi(promptLine);

        // Remove the rl.line from our prompt. We can't rely on the content of
        // rl.line (mainly because of the password prompt), so just rely on it's
        // length.
        let prompt = rawPromptLine;
        if (this.rl.line.length) {
          prompt = prompt.slice(0, -this.rl.line.length);
        }

        this.rl.setPrompt(prompt);

        // SetPrompt will change cursor position, now we can get correct value
        const cursorPos = this.rl._getCursorPos();
        const width = this.normalizedCliWidth();

        content = this.forceLineReturn(content, width);
        if (bottomContent) {
          bottomContent = this.forceLineReturn(bottomContent, width);
        }

        // Manually insert an extra line if we're at the end of the line.
        // This prevent the cursor from appearing at the beginning of the
        // current line.
        if (rawPromptLine.length % width === 0) {
          content += '\n';
        }

        const fullContent = content + (bottomContent ? '\n' + bottomContent : '');
        this.rl.output.write(fullContent);

        /**
         * Re-adjust the cursor at the correct position.
         */

        // We need to consider parts of the prompt under the cursor as part of the bottom
        // content in order to correctly cleanup and re-render.
        const promptLineUpDiff = Math.floor(rawPromptLine.length / width) - cursorPos.rows;
        const bottomContentHeight =
          promptLineUpDiff + (bottomContent ? height(bottomContent) : 0);
        if (bottomContentHeight > 0) {
          util.up(this.rl, bottomContentHeight);
        }

        // Reset cursor at the beginning of the line
        util.left(this.rl, stringWidth(lastLine(fullContent)));

        // Adjust cursor on the right
        if (cursorPos.cols > 0) {
          util.right(this.rl, cursorPos.cols);
        }

        /**
         * Set up state for next re-rendering
         */
        this.extraLinesUnderPrompt = bottomContentHeight;
        this.height = height(fullContent);

        this.rl.output.mute();
      }

      clean(extraLines) {
        if (extraLines > 0) {
          util.down(this.rl, extraLines);
        }

        util.clearLine(this.rl, this.height);
      }

      done() {
        this.rl.setPrompt('');
        this.rl.output.unmute();
        this.rl.output.write('\n');
      }

      releaseCursor() {
        if (this.extraLinesUnderPrompt > 0) {
          util.down(this.rl, this.extraLinesUnderPrompt);
        }
      }

      normalizedCliWidth() {
        const width = cliWidth({
          defaultWidth: 80,
          output: this.rl.output,
        });
        return width;
      }

      breakLines(lines, width) {
        // Break lines who're longer than the cli width so we can normalize the natural line
        // returns behavior across terminals.
        width = width || this.normalizedCliWidth();
        const regex = new RegExp('(?:(?:\\033[[0-9;]*m)*.?){1,' + width + '}', 'g');
        return lines.map((line) => {
          const chunk = line.match(regex);
          // Last match is always empty
          chunk.pop();
          return chunk || '';
        });
      }

      forceLineReturn(content, width) {
        width = width || this.normalizedCliWidth();
        return _$7.flatten(this.breakLines(content.split('\n'), width)).join('\n');
      }
    }

    var screenManager = ScreenManager$1;

    /**
     * Base prompt implementation
     * Should be extended by prompt types.
     */
    const _$6 = {
      assign: assign_1,
      defaults: defaults_1,
      clone: clone_1,
    };
    const chalk$9 = source;
    const runAsync$1 = runAsync$5.exports;
    const { filter: filter$2, flatMap: flatMap$1, share: share$1, take: take$2, takeUntil: takeUntil$8 } = require$$1$1;
    const Choices = choices;
    const ScreenManager = screenManager;

    class Prompt {
      constructor(question, rl, answers) {
        // Setup instance defaults property
        _$6.assign(this, {
          answers,
          status: 'pending',
        });

        // Set defaults prompt options
        this.opt = _$6.defaults(_$6.clone(question), {
          validate: () => true,
          validatingText: '',
          filter: (val) => val,
          filteringText: '',
          when: () => true,
          suffix: '',
          prefix: chalk$9.green('?'),
        });

        // Make sure name is present
        if (!this.opt.name) {
          this.throwParamError('name');
        }

        // Set default message if no message defined
        if (!this.opt.message) {
          this.opt.message = this.opt.name + ':';
        }

        // Normalize choices
        if (Array.isArray(this.opt.choices)) {
          this.opt.choices = new Choices(this.opt.choices, answers);
        }

        this.rl = rl;
        this.screen = new ScreenManager(this.rl);
      }

      /**
       * Start the Inquiry session and manage output value filtering
       * @return {Promise}
       */

      run() {
        return new Promise((resolve, reject) => {
          this._run(
            (value) => resolve(value),
            (error) => reject(error)
          );
        });
      }

      // Default noop (this one should be overwritten in prompts)
      _run(cb) {
        cb();
      }

      /**
       * Throw an error telling a required parameter is missing
       * @param  {String} name Name of the missing param
       * @return {Throw Error}
       */

      throwParamError(name) {
        throw new Error('You must provide a `' + name + '` parameter');
      }

      /**
       * Called when the UI closes. Override to do any specific cleanup necessary
       */
      close() {
        this.screen.releaseCursor();
      }

      /**
       * Run the provided validation method each time a submit event occur.
       * @param  {Rx.Observable} submit - submit event flow
       * @return {Object}        Object containing two observables: `success` and `error`
       */
      handleSubmitEvents(submit) {
        const self = this;
        const validate = runAsync$1(this.opt.validate);
        const asyncFilter = runAsync$1(this.opt.filter);
        const validation = submit.pipe(
          flatMap$1((value) => {
            this.startSpinner(value, this.opt.filteringText);
            return asyncFilter(value, self.answers).then(
              (filteredValue) => {
                this.startSpinner(filteredValue, this.opt.validatingText);
                return validate(filteredValue, self.answers).then(
                  (isValid) => ({ isValid, value: filteredValue }),
                  (err) => ({ isValid: err, value: filteredValue })
                );
              },
              (err) => ({ isValid: err })
            );
          }),
          share$1()
        );

        const success = validation.pipe(
          filter$2((state) => state.isValid === true),
          take$2(1)
        );
        const error = validation.pipe(
          filter$2((state) => state.isValid !== true),
          takeUntil$8(success)
        );

        return {
          success,
          error,
        };
      }

      startSpinner(value, bottomContent) {
        value = this.getSpinningValue(value);
        // If the question will spin, cut off the prefix (for layout purposes)
        const content = bottomContent
          ? this.getQuestion() + value
          : this.getQuestion().slice(this.opt.prefix.length + 1) + value;

        this.screen.renderWithSpinner(content, bottomContent);
      }

      /**
       * Allow override, e.g. for password prompts
       * See: https://github.com/SBoudrias/Inquirer.js/issues/1022
       *
       * @return {String} value to display while spinning
       */
      getSpinningValue(value) {
        return value;
      }

      /**
       * Generate the prompt question string
       * @return {String} prompt question string
       */
      getQuestion() {
        let message =
          (this.opt.prefix ? this.opt.prefix + ' ' : '') +
          chalk$9.bold(this.opt.message) +
          this.opt.suffix +
          chalk$9.reset(' ');

        // Append the default if available, and if question isn't touched/answered
        if (
          this.opt.default != null &&
          this.status !== 'touched' &&
          this.status !== 'answered'
        ) {
          // If default password is supplied, hide it
          if (this.opt.type === 'password') {
            message += chalk$9.italic.dim('[hidden] ');
          } else {
            message += chalk$9.dim('(' + this.opt.default + ') ');
          }
        }

        return message;
      }
    }

    var base = Prompt;

    const { fromEvent } = require$$4$1;
    const { filter: filter$1, map: map$6, share, takeUntil: takeUntil$7 } = require$$1$1;

    function normalizeKeypressEvents(value, key) {
      return { value, key: key || {} };
    }

    var events = function (rl) {
      const keypress = fromEvent(rl.input, 'keypress', normalizeKeypressEvents)
        .pipe(takeUntil$7(fromEvent(rl, 'close')))
        // Ignore `enter` key. On the readline, we only care about the `line` event.
        .pipe(filter$1(({ key }) => key.name !== 'enter' && key.name !== 'return'));

      return {
        line: fromEvent(rl, 'line'),
        keypress,

        normalizedUpKey: keypress.pipe(
          filter$1(
            ({ key }) =>
              key.name === 'up' || key.name === 'k' || (key.name === 'p' && key.ctrl)
          ),
          share()
        ),

        normalizedDownKey: keypress.pipe(
          filter$1(
            ({ key }) =>
              key.name === 'down' || key.name === 'j' || (key.name === 'n' && key.ctrl)
          ),
          share()
        ),

        numberKey: keypress.pipe(
          filter$1((e) => e.value && '123456789'.indexOf(e.value) >= 0),
          map$6((e) => Number(e.value)),
          share()
        ),

        spaceKey: keypress.pipe(
          filter$1(({ key }) => key && key.name === 'space'),
          share()
        ),
        aKey: keypress.pipe(
          filter$1(({ key }) => key && key.name === 'a'),
          share()
        ),
        iKey: keypress.pipe(
          filter$1(({ key }) => key && key.name === 'i'),
          share()
        ),
      };
    };

    /**
     * The base implementation of `_.sum` and `_.sumBy` without support for
     * iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {number} Returns the sum.
     */

    function baseSum$1(array, iteratee) {
      var result,
          index = -1,
          length = array.length;

      while (++index < length) {
        var current = iteratee(array[index]);
        if (current !== undefined) {
          result = result === undefined ? current : (result + current);
        }
      }
      return result;
    }

    var _baseSum = baseSum$1;

    var baseSum = _baseSum,
        identity = identity_1;

    /**
     * Computes the sum of the values in `array`.
     *
     * @static
     * @memberOf _
     * @since 3.4.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {number} Returns the sum.
     * @example
     *
     * _.sum([4, 2, 8, 6]);
     * // => 20
     */
    function sum(array) {
      return (array && array.length)
        ? baseSum(array, identity)
        : 0;
    }

    var sum_1 = sum;

    const _$5 = {
      sum: sum_1,
      flatten: flatten_1,
    };
    const chalk$8 = source;

    /**
     * The paginator returns a subset of the choices if the list is too long.
     */

    class Paginator$4 {
      constructor(screen, options = {}) {
        const { isInfinite = true } = options;
        this.lastIndex = 0;
        this.screen = screen;
        this.isInfinite = isInfinite;
      }

      paginate(output, active, pageSize) {
        pageSize = pageSize || 7;
        let lines = output.split('\n');

        if (this.screen) {
          lines = this.screen.breakLines(lines);
          active = _$5.sum(lines.map((lineParts) => lineParts.length).splice(0, active));
          lines = _$5.flatten(lines);
        }

        // Make sure there's enough lines to paginate
        if (lines.length <= pageSize) {
          return output;
        }
        const visibleLines = this.isInfinite
          ? this.getInfiniteLines(lines, active, pageSize)
          : this.getFiniteLines(lines, active, pageSize);
        this.lastIndex = active;
        return (
          visibleLines.join('\n') +
          '\n' +
          chalk$8.dim('(Move up and down to reveal more choices)')
        );
      }

      getInfiniteLines(lines, active, pageSize) {
        if (this.pointer === undefined) {
          this.pointer = 0;
        }
        const middleOfList = Math.floor(pageSize / 2);
        // Move the pointer only when the user go down and limit it to the middle of the list
        if (
          this.pointer < middleOfList &&
          this.lastIndex < active &&
          active - this.lastIndex < pageSize
        ) {
          this.pointer = Math.min(middleOfList, this.pointer + active - this.lastIndex);
        }

        // Duplicate the lines so it give an infinite list look
        const infinite = _$5.flatten([lines, lines, lines]);
        const topIndex = Math.max(0, active + lines.length - this.pointer);

        return infinite.splice(topIndex, pageSize);
      }

      getFiniteLines(lines, active, pageSize) {
        let topIndex = active - pageSize / 2;
        if (topIndex < 0) {
          topIndex = 0;
        } else if (topIndex + pageSize > lines.length) {
          topIndex = lines.length - pageSize;
        }
        return lines.splice(topIndex, pageSize);
      }
    }

    var paginator = Paginator$4;

    function incrementListIndex$3(current, dir, opt) {
      const len = opt.choices.realLength;
      const shouldLoop = 'loop' in opt ? Boolean(opt.loop) : true;
      if (dir === 'up') {
        if (current > 0) {
          return current - 1;
        }
        return shouldLoop ? len - 1 : current;
      }
      if (dir === 'down') {
        if (current < len - 1) {
          return current + 1;
        }
        return shouldLoop ? 0 : current;
      }
      throw new Error('dir must be up or down');
    }

    var incrementListIndex_1 = incrementListIndex$3;

    /**
     * `list` type prompt
     */

    const _$4 = {
      isNumber: isNumber_1,
      findIndex: findIndex_1,
      isString: isString_1,
    };
    const chalk$7 = source;
    const figures$1 = figures$4.exports;
    const cliCursor$1 = cliCursor$3;
    const runAsync = runAsync$5.exports;
    const { flatMap, map: map$5, take: take$1, takeUntil: takeUntil$6 } = require$$1$1;
    const Base$7 = base;
    const observe$7 = events;
    const Paginator$3 = paginator;
    const incrementListIndex$2 = incrementListIndex_1;

    class ListPrompt extends Base$7 {
      constructor(questions, rl, answers) {
        super(questions, rl, answers);

        if (!this.opt.choices) {
          this.throwParamError('choices');
        }

        this.firstRender = true;
        this.selected = 0;

        const def = this.opt.default;

        // If def is a Number, then use as index. Otherwise, check for value.
        if (_$4.isNumber(def) && def >= 0 && def < this.opt.choices.realLength) {
          this.selected = def;
        } else if (!_$4.isNumber(def) && def != null) {
          const index = _$4.findIndex(
            this.opt.choices.realChoices,
            ({ value }) => value === def
          );
          this.selected = Math.max(index, 0);
        }

        // Make sure no default is set (so it won't be printed)
        this.opt.default = null;

        const shouldLoop = this.opt.loop === undefined ? true : this.opt.loop;
        this.paginator = new Paginator$3(this.screen, { isInfinite: shouldLoop });
      }

      /**
       * Start the Inquiry session
       * @param  {Function} cb      Callback when prompt is done
       * @return {this}
       */

      _run(cb) {
        this.done = cb;

        const self = this;

        const events = observe$7(this.rl);
        events.normalizedUpKey.pipe(takeUntil$6(events.line)).forEach(this.onUpKey.bind(this));
        events.normalizedDownKey
          .pipe(takeUntil$6(events.line))
          .forEach(this.onDownKey.bind(this));
        events.numberKey.pipe(takeUntil$6(events.line)).forEach(this.onNumberKey.bind(this));
        events.line
          .pipe(
            take$1(1),
            map$5(this.getCurrentValue.bind(this)),
            flatMap((value) =>
              runAsync(self.opt.filter)(value, self.answers).catch((err) => err)
            )
          )
          .forEach(this.onSubmit.bind(this));

        // Init the prompt
        cliCursor$1.hide();
        this.render();

        return this;
      }

      /**
       * Render the prompt to screen
       * @return {ListPrompt} self
       */

      render() {
        // Render question
        let message = this.getQuestion();

        if (this.firstRender) {
          message += chalk$7.dim('(Use arrow keys)');
        }

        // Render choices or answer depending on the state
        if (this.status === 'answered') {
          message += chalk$7.cyan(this.opt.choices.getChoice(this.selected).short);
        } else {
          const choicesStr = listRender(this.opt.choices, this.selected);
          const indexPosition = this.opt.choices.indexOf(
            this.opt.choices.getChoice(this.selected)
          );
          const realIndexPosition =
            this.opt.choices.reduce((acc, value, i) => {
              // Dont count lines past the choice we are looking at
              if (i > indexPosition) {
                return acc;
              }
              // Add line if it's a separator
              if (value.type === 'separator') {
                return acc + 1;
              }

              let l = value.name;
              // Non-strings take up one line
              if (typeof l !== 'string') {
                return acc + 1;
              }

              // Calculate lines taken up by string
              l = l.split('\n');
              return acc + l.length;
            }, 0) - 1;
          message +=
            '\n' + this.paginator.paginate(choicesStr, realIndexPosition, this.opt.pageSize);
        }

        this.firstRender = false;

        this.screen.render(message);
      }

      /**
       * When user press `enter` key
       */

      onSubmit(value) {
        this.status = 'answered';

        // Rerender prompt
        this.render();

        this.screen.done();
        cliCursor$1.show();
        this.done(value);
      }

      getCurrentValue() {
        return this.opt.choices.getChoice(this.selected).value;
      }

      /**
       * When user press a key
       */
      onUpKey() {
        this.selected = incrementListIndex$2(this.selected, 'up', this.opt);
        this.render();
      }

      onDownKey() {
        this.selected = incrementListIndex$2(this.selected, 'down', this.opt);
        this.render();
      }

      onNumberKey(input) {
        if (input <= this.opt.choices.realLength) {
          this.selected = input - 1;
        }

        this.render();
      }
    }

    /**
     * Function for rendering list choices
     * @param  {Number} pointer Position of the pointer
     * @return {String}         Rendered content
     */
    function listRender(choices, pointer) {
      let output = '';
      let separatorOffset = 0;

      choices.forEach((choice, i) => {
        if (choice.type === 'separator') {
          separatorOffset++;
          output += '  ' + choice + '\n';
          return;
        }

        if (choice.disabled) {
          separatorOffset++;
          output += '  - ' + choice.name;
          output += ' (' + (_$4.isString(choice.disabled) ? choice.disabled : 'Disabled') + ')';
          output += '\n';
          return;
        }

        const isSelected = i - separatorOffset === pointer;
        let line = (isSelected ? figures$1.pointer + ' ' : '  ') + choice.name;
        if (isSelected) {
          line = chalk$7.cyan(line);
        }

        output += line + ' \n';
      });

      return output.replace(/\n$/, '');
    }

    var list = ListPrompt;

    /**
     * `input` type prompt
     */

    const chalk$6 = source;
    const { map: map$4, takeUntil: takeUntil$5 } = require$$1$1;
    const Base$6 = base;
    const observe$6 = events;

    class InputPrompt extends Base$6 {
      /**
       * Start the Inquiry session
       * @param  {Function} cb      Callback when prompt is done
       * @return {this}
       */

      _run(cb) {
        this.done = cb;

        // Once user confirm (enter key)
        const events = observe$6(this.rl);
        const submit = events.line.pipe(map$4(this.filterInput.bind(this)));

        const validation = this.handleSubmitEvents(submit);
        validation.success.forEach(this.onEnd.bind(this));
        validation.error.forEach(this.onError.bind(this));

        events.keypress
          .pipe(takeUntil$5(validation.success))
          .forEach(this.onKeypress.bind(this));

        // Init
        this.render();

        return this;
      }

      /**
       * Render the prompt to screen
       * @return {InputPrompt} self
       */

      render(error) {
        let bottomContent = '';
        let appendContent = '';
        let message = this.getQuestion();
        const { transformer } = this.opt;
        const isFinal = this.status === 'answered';

        if (isFinal) {
          appendContent = this.answer;
        } else {
          appendContent = this.rl.line;
        }

        if (transformer) {
          message += transformer(appendContent, this.answers, { isFinal });
        } else {
          message += isFinal ? chalk$6.cyan(appendContent) : appendContent;
        }

        if (error) {
          bottomContent = chalk$6.red('>> ') + error;
        }

        this.screen.render(message, bottomContent);
      }

      /**
       * When user press `enter` key
       */

      filterInput(input) {
        if (!input) {
          return this.opt.default == null ? '' : this.opt.default;
        }

        return input;
      }

      onEnd(state) {
        this.answer = state.value;
        this.status = 'answered';

        // Re-render prompt
        this.render();

        this.screen.done();
        this.done(state.value);
      }

      onError({ value = '', isValid }) {
        this.rl.line += value;
        this.rl.cursor += value.length;
        this.render(isValid);
      }

      /**
       * When user press a key
       */

      onKeypress() {
        this.state = 'touched';

        this.render();
      }
    }

    var input = InputPrompt;

    /**
     * `input` type prompt
     */

    const Input = input;

    /**
     * Extention of the Input prompt specifically for use with number inputs.
     */

    class NumberPrompt extends Input {
      filterInput(input) {
        if (input && typeof input === 'string') {
          input = input.trim();
          // Match a number in the input
          const numberMatch = input.match(/(^-?\d+|^\d+\.\d*|^\d*\.\d+)(e\d+)?$/);
          // If a number is found, return that input.
          if (numberMatch) {
            return Number(numberMatch[0]);
          }
        }

        // If the input was invalid return the default value.
        return this.opt.default == null ? NaN : this.opt.default;
      }
    }

    var number = NumberPrompt;

    var baseGetTag = _baseGetTag,
        isObjectLike = isObjectLike_1;

    /** `Object#toString` result references. */
    var boolTag = '[object Boolean]';

    /**
     * Checks if `value` is classified as a boolean primitive or object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.
     * @example
     *
     * _.isBoolean(false);
     * // => true
     *
     * _.isBoolean(null);
     * // => false
     */
    function isBoolean(value) {
      return value === true || value === false ||
        (isObjectLike(value) && baseGetTag(value) == boolTag);
    }

    var isBoolean_1 = isBoolean;

    /**
     * `confirm` type prompt
     */

    const _$3 = {
      extend: extend$1,
      isBoolean: isBoolean_1,
    };
    const chalk$5 = source;
    const { take, takeUntil: takeUntil$4 } = require$$1$1;
    const Base$5 = base;
    const observe$5 = events;

    class ConfirmPrompt extends Base$5 {
      constructor(questions, rl, answers) {
        super(questions, rl, answers);

        let rawDefault = true;

        _$3.extend(this.opt, {
          filter(input) {
            let value = rawDefault;
            if (input != null && input !== '') {
              value = /^y(es)?/i.test(input);
            }

            return value;
          },
        });

        if (_$3.isBoolean(this.opt.default)) {
          rawDefault = this.opt.default;
        }

        this.opt.default = rawDefault ? 'Y/n' : 'y/N';
      }

      /**
       * Start the Inquiry session
       * @param  {Function} cb   Callback when prompt is done
       * @return {this}
       */

      _run(cb) {
        this.done = cb;

        // Once user confirm (enter key)
        const events = observe$5(this.rl);
        events.keypress.pipe(takeUntil$4(events.line)).forEach(this.onKeypress.bind(this));

        events.line.pipe(take(1)).forEach(this.onEnd.bind(this));

        // Init
        this.render();

        return this;
      }

      /**
       * Render the prompt to screen
       * @return {ConfirmPrompt} self
       */

      render(answer) {
        let message = this.getQuestion();

        if (typeof answer === 'boolean') {
          message += chalk$5.cyan(answer ? 'Yes' : 'No');
        } else {
          message += this.rl.line;
        }

        this.screen.render(message);

        return this;
      }

      /**
       * When user press `enter` key
       */

      onEnd(input) {
        this.status = 'answered';

        const output = this.opt.filter(input);
        this.render(output);

        this.screen.done();
        this.done(output);
      }

      /**
       * When user press a key
       */

      onKeypress() {
        this.render();
      }
    }

    var confirm = ConfirmPrompt;

    /**
     * `rawlist` type prompt
     */

    const _$2 = {
      extend: extend$1,
      isNumber: isNumber_1,
      findIndex: findIndex_1,
    };
    const chalk$4 = source;
    const { map: map$3, takeUntil: takeUntil$3 } = require$$1$1;
    const Base$4 = base;
    const Separator$1 = separator;
    const observe$4 = events;
    const Paginator$2 = paginator;
    const incrementListIndex$1 = incrementListIndex_1;

    class RawListPrompt extends Base$4 {
      constructor(questions, rl, answers) {
        super(questions, rl, answers);

        if (!this.opt.choices) {
          this.throwParamError('choices');
        }

        this.opt.validChoices = this.opt.choices.filter(Separator$1.exclude);

        this.selected = 0;
        this.rawDefault = 0;

        _$2.extend(this.opt, {
          validate(val) {
            return val != null;
          },
        });

        const def = this.opt.default;
        if (_$2.isNumber(def) && def >= 0 && def < this.opt.choices.realLength) {
          this.selected = def;
          this.rawDefault = def;
        } else if (!_$2.isNumber(def) && def != null) {
          const index = _$2.findIndex(
            this.opt.choices.realChoices,
            ({ value }) => value === def
          );
          const safeIndex = Math.max(index, 0);
          this.selected = safeIndex;
          this.rawDefault = safeIndex;
        }

        // Make sure no default is set (so it won't be printed)
        this.opt.default = null;

        const shouldLoop = this.opt.loop === undefined ? true : this.opt.loop;
        this.paginator = new Paginator$2(undefined, { isInfinite: shouldLoop });
      }

      /**
       * Start the Inquiry session
       * @param  {Function} cb      Callback when prompt is done
       * @return {this}
       */

      _run(cb) {
        this.done = cb;

        // Once user confirm (enter key)
        const events = observe$4(this.rl);
        const submit = events.line.pipe(map$3(this.getCurrentValue.bind(this)));

        const validation = this.handleSubmitEvents(submit);
        validation.success.forEach(this.onEnd.bind(this));
        validation.error.forEach(this.onError.bind(this));

        events.normalizedUpKey
          .pipe(takeUntil$3(validation.success))
          .forEach(this.onUpKey.bind(this));
        events.normalizedDownKey
          .pipe(takeUntil$3(validation.success))
          .forEach(this.onDownKey.bind(this));
        events.keypress
          .pipe(takeUntil$3(validation.success))
          .forEach(this.onKeypress.bind(this));
        // Init the prompt
        this.render();

        return this;
      }

      /**
       * Render the prompt to screen
       * @return {RawListPrompt} self
       */

      render(error) {
        // Render question
        let message = this.getQuestion();
        let bottomContent = '';

        if (this.status === 'answered') {
          message += chalk$4.cyan(this.opt.choices.getChoice(this.selected).short);
        } else {
          const choicesStr = renderChoices$2(this.opt.choices, this.selected);
          message +=
            '\n' + this.paginator.paginate(choicesStr, this.selected, this.opt.pageSize);
          message += '\n  Answer: ';
        }
        message += this.rl.line;

        if (error) {
          bottomContent = '\n' + chalk$4.red('>> ') + error;
        }

        this.screen.render(message, bottomContent);
      }

      /**
       * When user press `enter` key
       */

      getCurrentValue(index) {
        if (index == null) {
          index = this.rawDefault;
        } else if (index === '') {
          this.selected = this.selected === undefined ? -1 : this.selected;
          index = this.selected;
        } else {
          index -= 1;
        }

        const choice = this.opt.choices.getChoice(index);
        return choice ? choice.value : null;
      }

      onEnd(state) {
        this.status = 'answered';
        this.answer = state.value;

        // Re-render prompt
        this.render();

        this.screen.done();
        this.done(state.value);
      }

      onError() {
        this.render('Please enter a valid index');
      }

      /**
       * When user press a key
       */

      onKeypress() {
        const index = this.rl.line.length ? Number(this.rl.line) - 1 : 0;

        if (this.opt.choices.getChoice(index)) {
          this.selected = index;
        } else {
          this.selected = undefined;
        }
        this.render();
      }

      /**
       * When user press up key
       */

      onUpKey() {
        this.onArrowKey('up');
      }

      /**
       * When user press down key
       */

      onDownKey() {
        this.onArrowKey('down');
      }

      /**
       * When user press up or down key
       * @param {String} type Arrow type: up or down
       */

      onArrowKey(type) {
        this.selected = incrementListIndex$1(this.selected, type, this.opt);
        this.rl.line = String(this.selected + 1);
      }
    }

    /**
     * Function for rendering list choices
     * @param  {Number} pointer Position of the pointer
     * @return {String}         Rendered content
     */

    function renderChoices$2(choices, pointer) {
      let output = '';
      let separatorOffset = 0;

      choices.forEach((choice, i) => {
        output += '\n  ';

        if (choice.type === 'separator') {
          separatorOffset++;
          output += ' ' + choice;
          return;
        }

        const index = i - separatorOffset;
        let display = index + 1 + ') ' + choice.name;
        if (index === pointer) {
          display = chalk$4.cyan(display);
        }

        output += display;
      });

      return output;
    }

    var rawlist = RawListPrompt;

    /**
     * The base implementation of `_.isNaN` without support for number objects.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
     */

    function baseIsNaN$1(value) {
      return value !== value;
    }

    var _baseIsNaN = baseIsNaN$1;

    /**
     * A specialized version of `_.indexOf` which performs strict equality
     * comparisons of values, i.e. `===`.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} fromIndex The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     */

    function strictIndexOf$1(array, value, fromIndex) {
      var index = fromIndex - 1,
          length = array.length;

      while (++index < length) {
        if (array[index] === value) {
          return index;
        }
      }
      return -1;
    }

    var _strictIndexOf = strictIndexOf$1;

    var baseFindIndex = _baseFindIndex,
        baseIsNaN = _baseIsNaN,
        strictIndexOf = _strictIndexOf;

    /**
     * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} fromIndex The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     */
    function baseIndexOf$1(array, value, fromIndex) {
      return value === value
        ? strictIndexOf(array, value, fromIndex)
        : baseFindIndex(array, baseIsNaN, fromIndex);
    }

    var _baseIndexOf = baseIndexOf$1;

    var baseIndexOf = _baseIndexOf;

    /**
     * A specialized version of `_.includes` for arrays without support for
     * specifying an index to search from.
     *
     * @private
     * @param {Array} [array] The array to inspect.
     * @param {*} target The value to search for.
     * @returns {boolean} Returns `true` if `target` is found, else `false`.
     */
    function arrayIncludes$1(array, value) {
      var length = array == null ? 0 : array.length;
      return !!length && baseIndexOf(array, value, 0) > -1;
    }

    var _arrayIncludes = arrayIncludes$1;

    /**
     * This function is like `arrayIncludes` except that it accepts a comparator.
     *
     * @private
     * @param {Array} [array] The array to inspect.
     * @param {*} target The value to search for.
     * @param {Function} comparator The comparator invoked per element.
     * @returns {boolean} Returns `true` if `target` is found, else `false`.
     */

    function arrayIncludesWith$1(array, value, comparator) {
      var index = -1,
          length = array == null ? 0 : array.length;

      while (++index < length) {
        if (comparator(value, array[index])) {
          return true;
        }
      }
      return false;
    }

    var _arrayIncludesWith = arrayIncludesWith$1;

    /**
     * This method returns `undefined`.
     *
     * @static
     * @memberOf _
     * @since 2.3.0
     * @category Util
     * @example
     *
     * _.times(2, _.noop);
     * // => [undefined, undefined]
     */

    function noop$1() {
      // No operation performed.
    }

    var noop_1 = noop$1;

    var Set$1 = _Set,
        noop = noop_1,
        setToArray$1 = _setToArray;

    /** Used as references for various `Number` constants. */
    var INFINITY = 1 / 0;

    /**
     * Creates a set object of `values`.
     *
     * @private
     * @param {Array} values The values to add to the set.
     * @returns {Object} Returns the new set.
     */
    var createSet$1 = !(Set$1 && (1 / setToArray$1(new Set$1([,-0]))[1]) == INFINITY) ? noop : function(values) {
      return new Set$1(values);
    };

    var _createSet = createSet$1;

    var SetCache = _SetCache,
        arrayIncludes = _arrayIncludes,
        arrayIncludesWith = _arrayIncludesWith,
        cacheHas = _cacheHas,
        createSet = _createSet,
        setToArray = _setToArray;

    /** Used as the size to enable large array optimizations. */
    var LARGE_ARRAY_SIZE = 200;

    /**
     * The base implementation of `_.uniqBy` without support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     */
    function baseUniq$1(array, iteratee, comparator) {
      var index = -1,
          includes = arrayIncludes,
          length = array.length,
          isCommon = true,
          result = [],
          seen = result;

      if (comparator) {
        isCommon = false;
        includes = arrayIncludesWith;
      }
      else if (length >= LARGE_ARRAY_SIZE) {
        var set = iteratee ? null : createSet(array);
        if (set) {
          return setToArray(set);
        }
        isCommon = false;
        includes = cacheHas;
        seen = new SetCache;
      }
      else {
        seen = iteratee ? [] : result;
      }
      outer:
      while (++index < length) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        value = (comparator || value !== 0) ? value : 0;
        if (isCommon && computed === computed) {
          var seenIndex = seen.length;
          while (seenIndex--) {
            if (seen[seenIndex] === computed) {
              continue outer;
            }
          }
          if (iteratee) {
            seen.push(computed);
          }
          result.push(value);
        }
        else if (!includes(seen, computed, comparator)) {
          if (seen !== result) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
      return result;
    }

    var _baseUniq = baseUniq$1;

    var baseUniq = _baseUniq;

    /**
     * Creates a duplicate-free version of an array, using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons, in which only the first occurrence of each element
     * is kept. The order of result values is determined by the order they occur
     * in the array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.uniq([2, 1, 2]);
     * // => [2, 1]
     */
    function uniq(array) {
      return (array && array.length) ? baseUniq(array) : [];
    }

    var uniq_1 = uniq;

    /**
     * `rawlist` type prompt
     */

    const _$1 = {
      uniq: uniq_1,
      isString: isString_1,
      isNumber: isNumber_1,
      findIndex: findIndex_1,
    };
    const chalk$3 = source;
    const { map: map$2, takeUntil: takeUntil$2 } = require$$1$1;
    const Base$3 = base;
    const Separator = separator;
    const observe$3 = events;
    const Paginator$1 = paginator;

    class ExpandPrompt extends Base$3 {
      constructor(questions, rl, answers) {
        super(questions, rl, answers);

        if (!this.opt.choices) {
          this.throwParamError('choices');
        }

        this.validateChoices(this.opt.choices);

        // Add the default `help` (/expand) option
        this.opt.choices.push({
          key: 'h',
          name: 'Help, list all options',
          value: 'help',
        });

        this.opt.validate = (choice) => {
          if (choice == null) {
            return 'Please enter a valid command';
          }

          return choice !== 'help';
        };

        // Setup the default string (capitalize the default key)
        this.opt.default = this.generateChoicesString(this.opt.choices, this.opt.default);

        this.paginator = new Paginator$1(this.screen);
      }

      /**
       * Start the Inquiry session
       * @param  {Function} cb      Callback when prompt is done
       * @return {this}
       */

      _run(cb) {
        this.done = cb;

        // Save user answer and update prompt to show selected option.
        const events = observe$3(this.rl);
        const validation = this.handleSubmitEvents(
          events.line.pipe(map$2(this.getCurrentValue.bind(this)))
        );
        validation.success.forEach(this.onSubmit.bind(this));
        validation.error.forEach(this.onError.bind(this));
        this.keypressObs = events.keypress
          .pipe(takeUntil$2(validation.success))
          .forEach(this.onKeypress.bind(this));

        // Init the prompt
        this.render();

        return this;
      }

      /**
       * Render the prompt to screen
       * @return {ExpandPrompt} self
       */

      render(error, hint) {
        let message = this.getQuestion();
        let bottomContent = '';

        if (this.status === 'answered') {
          message += chalk$3.cyan(this.answer);
        } else if (this.status === 'expanded') {
          const choicesStr = renderChoices$1(this.opt.choices, this.selectedKey);
          message += this.paginator.paginate(choicesStr, this.selectedKey, this.opt.pageSize);
          message += '\n  Answer: ';
        }

        message += this.rl.line;

        if (error) {
          bottomContent = chalk$3.red('>> ') + error;
        }

        if (hint) {
          bottomContent = chalk$3.cyan('>> ') + hint;
        }

        this.screen.render(message, bottomContent);
      }

      getCurrentValue(input) {
        if (!input) {
          input = this.rawDefault;
        }

        const selected = this.opt.choices.where({ key: input.toLowerCase().trim() })[0];
        if (!selected) {
          return null;
        }

        return selected.value;
      }

      /**
       * Generate the prompt choices string
       * @return {String}  Choices string
       */

      getChoices() {
        let output = '';

        this.opt.choices.forEach((choice) => {
          output += '\n  ';

          if (choice.type === 'separator') {
            output += ' ' + choice;
            return;
          }

          let choiceStr = choice.key + ') ' + choice.name;
          if (this.selectedKey === choice.key) {
            choiceStr = chalk$3.cyan(choiceStr);
          }

          output += choiceStr;
        });

        return output;
      }

      onError(state) {
        if (state.value === 'help') {
          this.selectedKey = '';
          this.status = 'expanded';
          this.render();
          return;
        }

        this.render(state.isValid);
      }

      /**
       * When user press `enter` key
       */

      onSubmit(state) {
        this.status = 'answered';
        const choice = this.opt.choices.where({ value: state.value })[0];
        this.answer = choice.short || choice.name;

        // Re-render prompt
        this.render();
        this.screen.done();
        this.done(state.value);
      }

      /**
       * When user press a key
       */

      onKeypress() {
        this.selectedKey = this.rl.line.toLowerCase();
        const selected = this.opt.choices.where({ key: this.selectedKey })[0];
        if (this.status === 'expanded') {
          this.render();
        } else {
          this.render(null, selected ? selected.name : null);
        }
      }

      /**
       * Validate the choices
       * @param {Array} choices
       */

      validateChoices(choices) {
        let formatError;
        const errors = [];
        const keymap = {};
        choices.filter(Separator.exclude).forEach((choice) => {
          if (!choice.key || choice.key.length !== 1) {
            formatError = true;
          }

          choice.key = String(choice.key).toLowerCase();

          if (keymap[choice.key]) {
            errors.push(choice.key);
          }

          keymap[choice.key] = true;
        });

        if (formatError) {
          throw new Error(
            'Format error: `key` param must be a single letter and is required.'
          );
        }

        if (keymap.h) {
          throw new Error(
            'Reserved key error: `key` param cannot be `h` - this value is reserved.'
          );
        }

        if (errors.length) {
          throw new Error(
            'Duplicate key error: `key` param must be unique. Duplicates: ' +
              _$1.uniq(errors).join(', ')
          );
        }
      }

      /**
       * Generate a string out of the choices keys
       * @param  {Array}  choices
       * @param  {Number|String} default - the choice index or name to capitalize
       * @return {String} The rendered choices key string
       */
      generateChoicesString(choices, defaultChoice) {
        let defIndex = choices.realLength - 1;
        if (_$1.isNumber(defaultChoice) && this.opt.choices.getChoice(defaultChoice)) {
          defIndex = defaultChoice;
        } else if (_$1.isString(defaultChoice)) {
          const index = _$1.findIndex(
            choices.realChoices,
            ({ value }) => value === defaultChoice
          );
          defIndex = index === -1 ? defIndex : index;
        }

        const defStr = this.opt.choices.pluck('key');
        this.rawDefault = defStr[defIndex];
        defStr[defIndex] = String(defStr[defIndex]).toUpperCase();
        return defStr.join('');
      }
    }

    /**
     * Function for rendering checkbox choices
     * @param  {String} pointer Selected key
     * @return {String}         Rendered content
     */

    function renderChoices$1(choices, pointer) {
      let output = '';

      choices.forEach((choice) => {
        output += '\n  ';

        if (choice.type === 'separator') {
          output += ' ' + choice;
          return;
        }

        let choiceStr = choice.key + ') ' + choice.name;
        if (pointer === choice.key) {
          choiceStr = chalk$3.cyan(choiceStr);
        }

        output += choiceStr;
      });

      return output;
    }

    var expand$2 = ExpandPrompt;

    /**
     * `list` type prompt
     */

    const _ = {
      isArray: isArray_1,
      map: map_1,
      isString: isString_1,
    };
    const chalk$2 = source;
    const cliCursor = cliCursor$3;
    const figures = figures$4.exports;
    const { map: map$1, takeUntil: takeUntil$1 } = require$$1$1;
    const Base$2 = base;
    const observe$2 = events;
    const Paginator = paginator;
    const incrementListIndex = incrementListIndex_1;

    class CheckboxPrompt extends Base$2 {
      constructor(questions, rl, answers) {
        super(questions, rl, answers);

        if (!this.opt.choices) {
          this.throwParamError('choices');
        }

        if (_.isArray(this.opt.default)) {
          this.opt.choices.forEach(function (choice) {
            if (this.opt.default.indexOf(choice.value) >= 0) {
              choice.checked = true;
            }
          }, this);
        }

        this.pointer = 0;

        // Make sure no default is set (so it won't be printed)
        this.opt.default = null;

        const shouldLoop = this.opt.loop === undefined ? true : this.opt.loop;
        this.paginator = new Paginator(this.screen, { isInfinite: shouldLoop });
      }

      /**
       * Start the Inquiry session
       * @param  {Function} cb      Callback when prompt is done
       * @return {this}
       */

      _run(cb) {
        this.done = cb;

        const events = observe$2(this.rl);

        const validation = this.handleSubmitEvents(
          events.line.pipe(map$1(this.getCurrentValue.bind(this)))
        );
        validation.success.forEach(this.onEnd.bind(this));
        validation.error.forEach(this.onError.bind(this));

        events.normalizedUpKey
          .pipe(takeUntil$1(validation.success))
          .forEach(this.onUpKey.bind(this));
        events.normalizedDownKey
          .pipe(takeUntil$1(validation.success))
          .forEach(this.onDownKey.bind(this));
        events.numberKey
          .pipe(takeUntil$1(validation.success))
          .forEach(this.onNumberKey.bind(this));
        events.spaceKey
          .pipe(takeUntil$1(validation.success))
          .forEach(this.onSpaceKey.bind(this));
        events.aKey.pipe(takeUntil$1(validation.success)).forEach(this.onAllKey.bind(this));
        events.iKey.pipe(takeUntil$1(validation.success)).forEach(this.onInverseKey.bind(this));

        // Init the prompt
        cliCursor.hide();
        this.render();
        this.firstRender = false;

        return this;
      }

      /**
       * Render the prompt to screen
       * @return {CheckboxPrompt} self
       */

      render(error) {
        // Render question
        let message = this.getQuestion();
        let bottomContent = '';

        if (!this.dontShowHints) {
          message +=
            '(Press ' +
            chalk$2.cyan.bold('<space>') +
            ' to select, ' +
            chalk$2.cyan.bold('<a>') +
            ' to toggle all, ' +
            chalk$2.cyan.bold('<i>') +
            ' to invert selection, and ' +
            chalk$2.cyan.bold('<enter>') +
            ' to proceed)';
        }

        // Render choices or answer depending on the state
        if (this.status === 'answered') {
          message += chalk$2.cyan(this.selection.join(', '));
        } else {
          const choicesStr = renderChoices(this.opt.choices, this.pointer);
          const indexPosition = this.opt.choices.indexOf(
            this.opt.choices.getChoice(this.pointer)
          );
          const realIndexPosition =
            this.opt.choices.reduce((acc, value, i) => {
              // Dont count lines past the choice we are looking at
              if (i > indexPosition) {
                return acc;
              }
              // Add line if it's a separator
              if (value.type === 'separator') {
                return acc + 1;
              }

              let l = value.name;
              // Non-strings take up one line
              if (typeof l !== 'string') {
                return acc + 1;
              }

              // Calculate lines taken up by string
              l = l.split('\n');
              return acc + l.length;
            }, 0) - 1;
          message +=
            '\n' + this.paginator.paginate(choicesStr, realIndexPosition, this.opt.pageSize);
        }

        if (error) {
          bottomContent = chalk$2.red('>> ') + error;
        }

        this.screen.render(message, bottomContent);
      }

      /**
       * When user press `enter` key
       */

      onEnd(state) {
        this.status = 'answered';
        this.dontShowHints = true;
        // Rerender prompt (and clean subline error)
        this.render();

        this.screen.done();
        cliCursor.show();
        this.done(state.value);
      }

      onError(state) {
        this.render(state.isValid);
      }

      getCurrentValue() {
        const choices = this.opt.choices.filter(
          (choice) => Boolean(choice.checked) && !choice.disabled
        );

        this.selection = _.map(choices, 'short');
        return _.map(choices, 'value');
      }

      onUpKey() {
        this.pointer = incrementListIndex(this.pointer, 'up', this.opt);
        this.render();
      }

      onDownKey() {
        this.pointer = incrementListIndex(this.pointer, 'down', this.opt);
        this.render();
      }

      onNumberKey(input) {
        if (input <= this.opt.choices.realLength) {
          this.pointer = input - 1;
          this.toggleChoice(this.pointer);
        }

        this.render();
      }

      onSpaceKey() {
        this.toggleChoice(this.pointer);
        this.render();
      }

      onAllKey() {
        const shouldBeChecked = Boolean(
          this.opt.choices.find((choice) => choice.type !== 'separator' && !choice.checked)
        );

        this.opt.choices.forEach((choice) => {
          if (choice.type !== 'separator') {
            choice.checked = shouldBeChecked;
          }
        });

        this.render();
      }

      onInverseKey() {
        this.opt.choices.forEach((choice) => {
          if (choice.type !== 'separator') {
            choice.checked = !choice.checked;
          }
        });

        this.render();
      }

      toggleChoice(index) {
        const item = this.opt.choices.getChoice(index);
        if (item !== undefined) {
          this.opt.choices.getChoice(index).checked = !item.checked;
        }
      }
    }

    /**
     * Function for rendering checkbox choices
     * @param  {Number} pointer Position of the pointer
     * @return {String}         Rendered content
     */

    function renderChoices(choices, pointer) {
      let output = '';
      let separatorOffset = 0;

      choices.forEach((choice, i) => {
        if (choice.type === 'separator') {
          separatorOffset++;
          output += ' ' + choice + '\n';
          return;
        }

        if (choice.disabled) {
          separatorOffset++;
          output += ' - ' + choice.name;
          output += ' (' + (_.isString(choice.disabled) ? choice.disabled : 'Disabled') + ')';
        } else {
          const line = getCheckbox(choice.checked) + ' ' + choice.name;
          if (i - separatorOffset === pointer) {
            output += chalk$2.cyan(figures.pointer + line);
          } else {
            output += ' ' + line;
          }
        }

        output += '\n';
      });

      return output.replace(/\n$/, '');
    }

    /**
     * Get the checkbox
     * @param  {Boolean} checked - add a X or not to the checkbox
     * @return {String} Composited checkbox string
     */

    function getCheckbox(checked) {
      return checked ? chalk$2.green(figures.radioOn) : figures.radioOff;
    }

    var checkbox = CheckboxPrompt;

    /**
     * `password` type prompt
     */

    const chalk$1 = source;
    const { map, takeUntil } = require$$1$1;
    const Base$1 = base;
    const observe$1 = events;

    function mask(input, maskChar) {
      input = String(input);
      maskChar = typeof maskChar === 'string' ? maskChar : '*';
      if (input.length === 0) {
        return '';
      }

      return new Array(input.length + 1).join(maskChar);
    }

    class PasswordPrompt extends Base$1 {
      /**
       * Start the Inquiry session
       * @param  {Function} cb      Callback when prompt is done
       * @return {this}
       */

      _run(cb) {
        this.done = cb;

        const events = observe$1(this.rl);

        // Once user confirm (enter key)
        const submit = events.line.pipe(map(this.filterInput.bind(this)));

        const validation = this.handleSubmitEvents(submit);
        validation.success.forEach(this.onEnd.bind(this));
        validation.error.forEach(this.onError.bind(this));

        events.keypress
          .pipe(takeUntil(validation.success))
          .forEach(this.onKeypress.bind(this));

        // Init
        this.render();

        return this;
      }

      /**
       * Render the prompt to screen
       * @return {PasswordPrompt} self
       */

      render(error) {
        let message = this.getQuestion();
        let bottomContent = '';

        if (this.status === 'answered') {
          message += this.getMaskedValue(this.answer);
        } else {
          message += this.getMaskedValue(this.rl.line || '');
        }

        if (error) {
          bottomContent = '\n' + chalk$1.red('>> ') + error;
        }

        this.screen.render(message, bottomContent);
      }

      getMaskedValue(value) {
        if (this.status === 'answered') {
          return this.opt.mask
            ? chalk$1.cyan(mask(value, this.opt.mask))
            : chalk$1.italic.dim('[hidden]');
        }
        return this.opt.mask
          ? mask(value, this.opt.mask)
          : chalk$1.italic.dim('[input is hidden] ');
      }

      /**
       * Mask value during async filter/validation.
       */
      getSpinningValue(value) {
        return this.getMaskedValue(value);
      }

      /**
       * When user press `enter` key
       */

      filterInput(input) {
        if (!input) {
          return this.opt.default == null ? '' : this.opt.default;
        }

        return input;
      }

      onEnd(state) {
        this.status = 'answered';
        this.answer = state.value;

        // Re-render prompt
        this.render();

        this.screen.done();
        this.done(state.value);
      }

      onError(state) {
        this.render(state.isValid);
      }

      onKeypress() {
        // If user press a key, just clear the default value
        if (this.opt.default) {
          this.opt.default = undefined;
        }

        this.render();
      }
    }

    var password = PasswordPrompt;

    var main$1 = {};

    var chardet = {};

    var match$1 = function(det, rec, confidence, name, lang) {
      this.confidence = confidence;
      this.name = name || rec.name(det);
      this.lang = lang;
    };

    var Match = match$1;

    /**
     * Charset recognizer for UTF-8
     */
    var utf8$1 = function() {
      this.name = function() {
        return 'UTF-8';
      };
      this.match = function(det) {

        var hasBOM = false,
          numValid = 0,
          numInvalid = 0,
          input = det.fRawInput,
          trailBytes = 0,
          confidence;

        if (det.fRawLength >= 3 &&
          (input[0] & 0xff) == 0xef && (input[1] & 0xff) == 0xbb && (input[2] & 0xff) == 0xbf) {
          hasBOM = true;
        }

        // Scan for multi-byte sequences
        for (var i = 0; i < det.fRawLength; i++) {
          var b = input[i];
          if ((b & 0x80) == 0)
            continue; // ASCII

          // Hi bit on char found.  Figure out how long the sequence should be
          if ((b & 0x0e0) == 0x0c0) {
            trailBytes = 1;
          } else if ((b & 0x0f0) == 0x0e0) {
            trailBytes = 2;
          } else if ((b & 0x0f8) == 0xf0) {
            trailBytes = 3;
          } else {
            numInvalid++;
            if (numInvalid > 5)
              break;
            trailBytes = 0;
          }

          // Verify that we've got the right number of trail bytes in the sequence
          for (;;) {
            i++;
            if (i >= det.fRawLength)
              break;

            if ((input[i] & 0xc0) != 0x080) {
              numInvalid++;
              break;
            }
            if (--trailBytes == 0) {
              numValid++;
              break;
            }
          }
        }

        // Cook up some sort of confidence score, based on presense of a BOM
        //    and the existence of valid and/or invalid multi-byte sequences.
        confidence = 0;
        if (hasBOM && numInvalid == 0)
          confidence = 100;
        else if (hasBOM && numValid > numInvalid * 10)
          confidence = 80;
        else if (numValid > 3 && numInvalid == 0)
          confidence = 100;
        else if (numValid > 0 && numInvalid == 0)
          confidence = 80;
        else if (numValid == 0 && numInvalid == 0)
          // Plain ASCII.
          confidence = 10;
        else if (numValid > numInvalid * 10)
          // Probably corruput utf-8 data.  Valid sequences aren't likely by chance.
          confidence = 25;
        else
          return null

        return new Match(det, this, confidence);
      };
    };

    var unicode$1 = {exports: {}};

    (function (module) {
    var util = require$$0__default["default"],
      Match = match$1;

    /**
     * This class matches UTF-16 and UTF-32, both big- and little-endian. The
     * BOM will be used if it is present.
     */
    module.exports.UTF_16BE = function() {
      this.name = function() {
        return 'UTF-16BE';
      };
      this.match = function(det) {
        var input = det.fRawInput;

        if (input.length >= 2 && ((input[0] & 0xff) == 0xfe && (input[1] & 0xff) == 0xff)) {
          return new Match(det, this, 100); // confidence = 100
        }

        // TODO: Do some statistics to check for unsigned UTF-16BE
        return null;
      };
    };

    module.exports.UTF_16LE = function() {
      this.name = function() {
        return 'UTF-16LE';
      };
      this.match = function(det) {
        var input = det.fRawInput;

        if (input.length >= 2 && ((input[0] & 0xff) == 0xff && (input[1] & 0xff) == 0xfe)) {
          // LE BOM is present.
          if (input.length >= 4 && input[2] == 0x00 && input[3] == 0x00) {
            // It is probably UTF-32 LE, not UTF-16
            return null;
          }
          return new Match(det, this, 100); // confidence = 100
        }

        // TODO: Do some statistics to check for unsigned UTF-16LE
        return null;
      };
    };

    function UTF_32() {}UTF_32.prototype.match = function(det) {
      var input      = det.fRawInput,
        limit      = (det.fRawLength / 4) * 4,
        numValid   = 0,
        numInvalid = 0,
        hasBOM     = false,
        confidence = 0;

      if (limit == 0) {
        return null;
      }

      if (this.getChar(input, 0) == 0x0000FEFF) {
        hasBOM = true;
      }

      for (var i = 0; i < limit; i += 4) {
        var ch = this.getChar(input, i);

        if (ch < 0 || ch >= 0x10FFFF || (ch >= 0xD800 && ch <= 0xDFFF)) {
          numInvalid += 1;
        } else {
          numValid += 1;
        }
      }

      // Cook up some sort of confidence score, based on presence of a BOM
      //    and the existence of valid and/or invalid multi-byte sequences.
      if (hasBOM && numInvalid == 0) {
        confidence = 100;
      } else if (hasBOM && numValid > numInvalid * 10) {
        confidence = 80;
      } else if (numValid > 3 && numInvalid == 0) {
        confidence = 100;
      } else if (numValid > 0 && numInvalid == 0) {
        confidence = 80;
      } else if (numValid > numInvalid * 10) {
        // Probably corrupt UTF-32BE data.  Valid sequences aren't likely by chance.
        confidence = 25;
      }

      // return confidence == 0 ? null : new CharsetMatch(det, this, confidence);
      return confidence == 0 ? null : new Match(det, this, confidence);
    };

    module.exports.UTF_32BE = function() {
      this.name = function() {
        return 'UTF-32BE';
      };
      this.getChar = function(input, index) {
        return (input[index + 0] & 0xff) << 24 | (input[index + 1] & 0xff) << 16 |
             (input[index + 2] & 0xff) <<  8 | (input[index + 3] & 0xff);
      };
    };
    util.inherits(module.exports.UTF_32BE, UTF_32);

    module.exports.UTF_32LE = function() {
      this.name = function() {
        return 'UTF-32LE';
      };
      this.getChar = function(input, index) {
        return (input[index + 3] & 0xff) << 24 | (input[index + 2] & 0xff) << 16 |
             (input[index + 1] & 0xff) <<  8 | (input[index + 0] & 0xff);
      };
    };
    util.inherits(module.exports.UTF_32LE, UTF_32);
    }(unicode$1));

    var mbcs$1 = {exports: {}};

    (function (module) {
    var util = require$$0__default["default"],
      Match = match$1;

    /**
     * Binary search implementation (recursive)
     */
    function binarySearch(arr, searchValue) {
      function find(arr, searchValue, left, right) {
        if (right < left)
          return -1;

        /*
        int mid = mid = (left + right) / 2;
        There is a bug in the above line;
        Joshua Bloch suggests the following replacement:
        */
        var mid = Math.floor((left + right) >>> 1);
        if (searchValue > arr[mid])
          return find(arr, searchValue, mid + 1, right);

        if (searchValue < arr[mid])
          return find(arr, searchValue, left, mid - 1);

        return mid;
      }
      return find(arr, searchValue, 0, arr.length - 1);
    }
    // 'Character'  iterated character class.
    //    Recognizers for specific mbcs encodings make their 'characters' available
    //    by providing a nextChar() function that fills in an instance of iteratedChar
    //    with the next char from the input.
    //    The returned characters are not converted to Unicode, but remain as the raw
    //    bytes (concatenated into an int) from the codepage data.
    //
    //  For Asian charsets, use the raw input rather than the input that has been
    //   stripped of markup.  Detection only considers multi-byte chars, effectively
    //   stripping markup anyway, and double byte chars do occur in markup too.
    //
    function IteratedChar() {

      this.charValue = 0; // 1-4 bytes from the raw input data
      this.index     = 0;
      this.nextIndex = 0;
      this.error     = false;
      this.done      = false;

      this.reset = function() {
        this.charValue = 0;
        this.index     = -1;
        this.nextIndex = 0;
        this.error     = false;
        this.done      = false;
      };

      this.nextByte = function(det) {
        if (this.nextIndex >= det.fRawLength) {
          this.done = true;
          return -1;
        }
        var byteValue = det.fRawInput[this.nextIndex++] & 0x00ff;
        return byteValue;
      };
    }


    /**
     * Asian double or multi-byte - charsets.
     * Match is determined mostly by the input data adhering to the
     * encoding scheme for the charset, and, optionally,
     * frequency-of-occurence of characters.
     */

    function mbcs() {}
    /**
     * Test the match of this charset with the input text data
     *      which is obtained via the CharsetDetector object.
     *
     * @param det  The CharsetDetector, which contains the input text
     *             to be checked for being in this charset.
     * @return     Two values packed into one int  (Damn java, anyhow)
     *             bits 0-7:  the match confidence, ranging from 0-100
     *             bits 8-15: The match reason, an enum-like value.
     */
    mbcs.prototype.match = function(det) {

      var doubleByteCharCount = 0,
        commonCharCount     = 0,
        badCharCount        = 0,
        totalCharCount      = 0,
        confidence          = 0;

      var iter = new IteratedChar();

      detectBlock: {
        for (iter.reset(); this.nextChar(iter, det);) {
          totalCharCount++;
          if (iter.error) {
            badCharCount++;
          } else {
            var cv = iter.charValue & 0xFFFFFFFF;

            if (cv <= 0xff) ; else {
              doubleByteCharCount++;
              if (this.commonChars != null) {
                // NOTE: This assumes that there are no 4-byte common chars.
                if (binarySearch(this.commonChars, cv) >= 0) {
                  commonCharCount++;
                }
              }
            }
          }
          if (badCharCount >= 2 && badCharCount * 5 >= doubleByteCharCount) {
            // console.log('its here!')
            // Bail out early if the byte data is not matching the encoding scheme.
            break detectBlock;
          }
        }

        if (doubleByteCharCount <= 10 && badCharCount== 0) {
          // Not many multi-byte chars.
          if (doubleByteCharCount == 0 && totalCharCount < 10) {
            // There weren't any multibyte sequences, and there was a low density of non-ASCII single bytes.
            // We don't have enough data to have any confidence.
            // Statistical analysis of single byte non-ASCII charcters would probably help here.
            confidence = 0;
          }
          else {
            //   ASCII or ISO file?  It's probably not our encoding,
            //   but is not incompatible with our encoding, so don't give it a zero.
            confidence = 10;
          }
          break detectBlock;
        }

        //
        //  No match if there are too many characters that don't fit the encoding scheme.
        //    (should we have zero tolerance for these?)
        //
        if (doubleByteCharCount < 20 * badCharCount) {
          confidence = 0;
          break detectBlock;
        }

        if (this.commonChars == null) {
          // We have no statistics on frequently occuring characters.
          //  Assess confidence purely on having a reasonable number of
          //  multi-byte characters (the more the better
          confidence = 30 + doubleByteCharCount - 20 * badCharCount;
          if (confidence > 100) {
            confidence = 100;
          }
        } else {
          //
          // Frequency of occurence statistics exist.
          //
          var maxVal = Math.log(parseFloat(doubleByteCharCount) / 4);
          var scaleFactor = 90.0 / maxVal;
          confidence = Math.floor(Math.log(commonCharCount + 1) * scaleFactor + 10);
          confidence = Math.min(confidence, 100);
        }
      }   // end of detectBlock:

      return confidence == 0 ? null : new Match(det, this, confidence);
    };

    /**
     * Get the next character (however many bytes it is) from the input data
     *    Subclasses for specific charset encodings must implement this function
     *    to get characters according to the rules of their encoding scheme.
     *
     *  This function is not a method of class iteratedChar only because
     *   that would require a lot of extra derived classes, which is awkward.
     * @param it  The iteratedChar 'struct' into which the returned char is placed.
     * @param det The charset detector, which is needed to get at the input byte data
     *            being iterated over.
     * @return    True if a character was returned, false at end of input.
     */

    mbcs.prototype.nextChar = function(iter, det) {};



    /**
     * Shift-JIS charset recognizer.
     */
    module.exports.sjis = function() {
      this.name = function() {
        return 'Shift-JIS';
      };
      this.language = function() {
        return 'ja';
      };

      // TODO:  This set of data comes from the character frequency-
      //        of-occurence analysis tool.  The data needs to be moved
      //        into a resource and loaded from there.
      this.commonChars = [
        0x8140, 0x8141, 0x8142, 0x8145, 0x815b, 0x8169, 0x816a, 0x8175, 0x8176, 0x82a0,
        0x82a2, 0x82a4, 0x82a9, 0x82aa, 0x82ab, 0x82ad, 0x82af, 0x82b1, 0x82b3, 0x82b5,
        0x82b7, 0x82bd, 0x82be, 0x82c1, 0x82c4, 0x82c5, 0x82c6, 0x82c8, 0x82c9, 0x82cc,
        0x82cd, 0x82dc, 0x82e0, 0x82e7, 0x82e8, 0x82e9, 0x82ea, 0x82f0, 0x82f1, 0x8341,
        0x8343, 0x834e, 0x834f, 0x8358, 0x835e, 0x8362, 0x8367, 0x8375, 0x8376, 0x8389,
        0x838a, 0x838b, 0x838d, 0x8393, 0x8e96, 0x93fa, 0x95aa
      ];

      this.nextChar = function(iter, det) {
        iter.index = iter.nextIndex;
        iter.error = false;

        var firstByte;
        firstByte = iter.charValue = iter.nextByte(det);
        if (firstByte < 0)
          return false;

        if (firstByte <= 0x7f || (firstByte > 0xa0 && firstByte <= 0xdf))
          return true;

        var secondByte = iter.nextByte(det);
        if (secondByte < 0)
          return false;

        iter.charValue = (firstByte << 8) | secondByte;
        if (! ((secondByte >= 0x40 && secondByte <= 0x7f) || (secondByte >= 0x80 && secondByte <= 0xff))) {
          // Illegal second byte value.
          iter.error = true;
        }
        return true;
      };
    };
    util.inherits(module.exports.sjis, mbcs);



    /**
     *   Big5 charset recognizer.
     */
    module.exports.big5 = function() {
      this.name = function() {
        return 'Big5';
      };
      this.language = function() {
        return 'zh';
      };
      // TODO:  This set of data comes from the character frequency-
      //        of-occurence analysis tool.  The data needs to be moved
      //        into a resource and loaded from there.
      this.commonChars = [
        0xa140, 0xa141, 0xa142, 0xa143, 0xa147, 0xa149, 0xa175, 0xa176, 0xa440, 0xa446,
        0xa447, 0xa448, 0xa451, 0xa454, 0xa457, 0xa464, 0xa46a, 0xa46c, 0xa477, 0xa4a3,
        0xa4a4, 0xa4a7, 0xa4c1, 0xa4ce, 0xa4d1, 0xa4df, 0xa4e8, 0xa4fd, 0xa540, 0xa548,
        0xa558, 0xa569, 0xa5cd, 0xa5e7, 0xa657, 0xa661, 0xa662, 0xa668, 0xa670, 0xa6a8,
        0xa6b3, 0xa6b9, 0xa6d3, 0xa6db, 0xa6e6, 0xa6f2, 0xa740, 0xa751, 0xa759, 0xa7da,
        0xa8a3, 0xa8a5, 0xa8ad, 0xa8d1, 0xa8d3, 0xa8e4, 0xa8fc, 0xa9c0, 0xa9d2, 0xa9f3,
        0xaa6b, 0xaaba, 0xaabe, 0xaacc, 0xaafc, 0xac47, 0xac4f, 0xacb0, 0xacd2, 0xad59,
        0xaec9, 0xafe0, 0xb0ea, 0xb16f, 0xb2b3, 0xb2c4, 0xb36f, 0xb44c, 0xb44e, 0xb54c,
        0xb5a5, 0xb5bd, 0xb5d0, 0xb5d8, 0xb671, 0xb7ed, 0xb867, 0xb944, 0xbad8, 0xbb44,
        0xbba1, 0xbdd1, 0xc2c4, 0xc3b9, 0xc440, 0xc45f
      ];
      this.nextChar = function(iter, det) {
        iter.index = iter.nextIndex;
        iter.error = false;

        var firstByte = iter.charValue = iter.nextByte(det);

        if (firstByte < 0)
          return false;

        // single byte character.
        if (firstByte <= 0x7f || firstByte == 0xff)
          return true;

        var secondByte = iter.nextByte(det);

        if (secondByte < 0)
          return false;

        iter.charValue = (iter.charValue << 8) | secondByte;

        if (secondByte < 0x40 || secondByte == 0x7f || secondByte == 0xff)
          iter.error = true;

        return true;
      };
    };
    util.inherits(module.exports.big5, mbcs);



    /**
     *  EUC charset recognizers.  One abstract class that provides the common function
     *  for getting the next character according to the EUC encoding scheme,
     *  and nested derived classes for EUC_KR, EUC_JP, EUC_CN.
     *
     *  Get the next character value for EUC based encodings.
     *  Character 'value' is simply the raw bytes that make up the character
     *     packed into an int.
     */
    function eucNextChar(iter, det) {
      iter.index = iter.nextIndex;
      iter.error = false;
      var firstByte  = 0;
      var secondByte = 0;
      var thirdByte  = 0;
      //int fourthByte = 0;
      buildChar: {
        firstByte = iter.charValue = iter.nextByte(det);
        if (firstByte < 0) {
          // Ran off the end of the input data
          iter.done = true;
          break buildChar;
        }
        if (firstByte <= 0x8d) {
          // single byte char
          break buildChar;
        }
        secondByte = iter.nextByte(det);
        iter.charValue = (iter.charValue << 8) | secondByte;
        if (firstByte >= 0xA1 && firstByte <= 0xfe) {
          // Two byte Char
          if (secondByte < 0xa1) {
            iter.error = true;
          }
          break buildChar;
        }
        if (firstByte == 0x8e) {
          // Code Set 2.
          //   In EUC-JP, total char size is 2 bytes, only one byte of actual char value.
          //   In EUC-TW, total char size is 4 bytes, three bytes contribute to char value.
          // We don't know which we've got.
          // Treat it like EUC-JP.  If the data really was EUC-TW, the following two
          //   bytes will look like a well formed 2 byte char.
          if (secondByte < 0xa1) {
            iter.error = true;
          }
          break buildChar;
        }
        if (firstByte == 0x8f) {
          // Code set 3.
          // Three byte total char size, two bytes of actual char value.
          thirdByte = iter.nextByte(det);
          iter.charValue = (iter.charValue << 8) | thirdByte;
          if (thirdByte < 0xa1) {
            iter.error = true;
          }
        }
      }
      return iter.done == false;
    }


    /**
     * The charset recognize for EUC-JP.  A singleton instance of this class
     *    is created and kept by the public CharsetDetector class
     */
    module.exports.euc_jp = function() {
      this.name = function() {
        return 'EUC-JP';
      };
      this.language = function() {
        return 'ja';
      };

      // TODO:  This set of data comes from the character frequency-
      //        of-occurence analysis tool.  The data needs to be moved
      //        into a resource and loaded from there.
      this.commonChars = [
        0xa1a1, 0xa1a2, 0xa1a3, 0xa1a6, 0xa1bc, 0xa1ca, 0xa1cb, 0xa1d6, 0xa1d7, 0xa4a2,
        0xa4a4, 0xa4a6, 0xa4a8, 0xa4aa, 0xa4ab, 0xa4ac, 0xa4ad, 0xa4af, 0xa4b1, 0xa4b3,
        0xa4b5, 0xa4b7, 0xa4b9, 0xa4bb, 0xa4bd, 0xa4bf, 0xa4c0, 0xa4c1, 0xa4c3, 0xa4c4,
        0xa4c6, 0xa4c7, 0xa4c8, 0xa4c9, 0xa4ca, 0xa4cb, 0xa4ce, 0xa4cf, 0xa4d0, 0xa4de,
        0xa4df, 0xa4e1, 0xa4e2, 0xa4e4, 0xa4e8, 0xa4e9, 0xa4ea, 0xa4eb, 0xa4ec, 0xa4ef,
        0xa4f2, 0xa4f3, 0xa5a2, 0xa5a3, 0xa5a4, 0xa5a6, 0xa5a7, 0xa5aa, 0xa5ad, 0xa5af,
        0xa5b0, 0xa5b3, 0xa5b5, 0xa5b7, 0xa5b8, 0xa5b9, 0xa5bf, 0xa5c3, 0xa5c6, 0xa5c7,
        0xa5c8, 0xa5c9, 0xa5cb, 0xa5d0, 0xa5d5, 0xa5d6, 0xa5d7, 0xa5de, 0xa5e0, 0xa5e1,
        0xa5e5, 0xa5e9, 0xa5ea, 0xa5eb, 0xa5ec, 0xa5ed, 0xa5f3, 0xb8a9, 0xb9d4, 0xbaee,
        0xbbc8, 0xbef0, 0xbfb7, 0xc4ea, 0xc6fc, 0xc7bd, 0xcab8, 0xcaf3, 0xcbdc, 0xcdd1
      ];

      this.nextChar = eucNextChar;
    };
    util.inherits(module.exports.euc_jp, mbcs);



    /**
     * The charset recognize for EUC-KR.  A singleton instance of this class
     *    is created and kept by the public CharsetDetector class
     */
    module.exports.euc_kr = function() {
      this.name = function() {
        return 'EUC-KR';
      };
      this.language = function() {
        return 'ko';
      };

      // TODO:  This set of data comes from the character frequency-
      //        of-occurence analysis tool.  The data needs to be moved
      //        into a resource and loaded from there.
      this.commonChars = [
        0xb0a1, 0xb0b3, 0xb0c5, 0xb0cd, 0xb0d4, 0xb0e6, 0xb0ed, 0xb0f8, 0xb0fa, 0xb0fc,
        0xb1b8, 0xb1b9, 0xb1c7, 0xb1d7, 0xb1e2, 0xb3aa, 0xb3bb, 0xb4c2, 0xb4cf, 0xb4d9,
        0xb4eb, 0xb5a5, 0xb5b5, 0xb5bf, 0xb5c7, 0xb5e9, 0xb6f3, 0xb7af, 0xb7c2, 0xb7ce,
        0xb8a6, 0xb8ae, 0xb8b6, 0xb8b8, 0xb8bb, 0xb8e9, 0xb9ab, 0xb9ae, 0xb9cc, 0xb9ce,
        0xb9fd, 0xbab8, 0xbace, 0xbad0, 0xbaf1, 0xbbe7, 0xbbf3, 0xbbfd, 0xbcad, 0xbcba,
        0xbcd2, 0xbcf6, 0xbdba, 0xbdc0, 0xbdc3, 0xbdc5, 0xbec6, 0xbec8, 0xbedf, 0xbeee,
        0xbef8, 0xbefa, 0xbfa1, 0xbfa9, 0xbfc0, 0xbfe4, 0xbfeb, 0xbfec, 0xbff8, 0xc0a7,
        0xc0af, 0xc0b8, 0xc0ba, 0xc0bb, 0xc0bd, 0xc0c7, 0xc0cc, 0xc0ce, 0xc0cf, 0xc0d6,
        0xc0da, 0xc0e5, 0xc0fb, 0xc0fc, 0xc1a4, 0xc1a6, 0xc1b6, 0xc1d6, 0xc1df, 0xc1f6,
        0xc1f8, 0xc4a1, 0xc5cd, 0xc6ae, 0xc7cf, 0xc7d1, 0xc7d2, 0xc7d8, 0xc7e5, 0xc8ad
      ];

      this.nextChar = eucNextChar;
    };
    util.inherits(module.exports.euc_kr, mbcs);



    /**
     *   GB-18030 recognizer. Uses simplified Chinese statistics.
     */
    module.exports.gb_18030 = function() {
      this.name = function() {
        return 'GB18030';
      };
      this.language = function() {
        return 'zh';
      };

      /*
       *  Get the next character value for EUC based encodings.
       *  Character 'value' is simply the raw bytes that make up the character
       *     packed into an int.
       */
      this.nextChar = function(iter, det) {
        iter.index = iter.nextIndex;
        iter.error = false;
        var firstByte  = 0;
        var secondByte = 0;
        var thirdByte  = 0;
        var fourthByte = 0;
        buildChar: {
          firstByte = iter.charValue = iter.nextByte(det);
          if (firstByte < 0) {
            // Ran off the end of the input data
            iter.done = true;
            break buildChar;
          }
          if (firstByte <= 0x80) {
            // single byte char
            break buildChar;
          }
          secondByte = iter.nextByte(det);
          iter.charValue = (iter.charValue << 8) | secondByte;
          if (firstByte >= 0x81 && firstByte <= 0xFE) {
            // Two byte Char
            if ((secondByte >= 0x40 && secondByte <= 0x7E) || (secondByte >=80 && secondByte <= 0xFE)) {
              break buildChar;
            }
            // Four byte char
            if (secondByte >= 0x30 && secondByte <= 0x39) {
              thirdByte = iter.nextByte(det);
              if (thirdByte >= 0x81 && thirdByte <= 0xFE) {
                fourthByte = iter.nextByte(det);
                if (fourthByte >= 0x30 && fourthByte <= 0x39) {
                  iter.charValue = (iter.charValue << 16) | (thirdByte << 8) | fourthByte;
                  break buildChar;
                }
              }
            }
            iter.error = true;
            break buildChar;
          }
        }
        return iter.done == false;
      };

      // TODO:  This set of data comes from the character frequency-
      //        of-occurence analysis tool.  The data needs to be moved
      //        into a resource and loaded from there.
      this.commonChars = [
        0xa1a1, 0xa1a2, 0xa1a3, 0xa1a4, 0xa1b0, 0xa1b1, 0xa1f1, 0xa1f3, 0xa3a1, 0xa3ac,
        0xa3ba, 0xb1a8, 0xb1b8, 0xb1be, 0xb2bb, 0xb3c9, 0xb3f6, 0xb4f3, 0xb5bd, 0xb5c4,
        0xb5e3, 0xb6af, 0xb6d4, 0xb6e0, 0xb7a2, 0xb7a8, 0xb7bd, 0xb7d6, 0xb7dd, 0xb8b4,
        0xb8df, 0xb8f6, 0xb9ab, 0xb9c9, 0xb9d8, 0xb9fa, 0xb9fd, 0xbacd, 0xbba7, 0xbbd6,
        0xbbe1, 0xbbfa, 0xbcbc, 0xbcdb, 0xbcfe, 0xbdcc, 0xbecd, 0xbedd, 0xbfb4, 0xbfc6,
        0xbfc9, 0xc0b4, 0xc0ed, 0xc1cb, 0xc2db, 0xc3c7, 0xc4dc, 0xc4ea, 0xc5cc, 0xc6f7,
        0xc7f8, 0xc8ab, 0xc8cb, 0xc8d5, 0xc8e7, 0xc9cf, 0xc9fa, 0xcab1, 0xcab5, 0xcac7,
        0xcad0, 0xcad6, 0xcaf5, 0xcafd, 0xccec, 0xcdf8, 0xceaa, 0xcec4, 0xced2, 0xcee5,
        0xcfb5, 0xcfc2, 0xcfd6, 0xd0c2, 0xd0c5, 0xd0d0, 0xd0d4, 0xd1a7, 0xd2aa, 0xd2b2,
        0xd2b5, 0xd2bb, 0xd2d4, 0xd3c3, 0xd3d0, 0xd3fd, 0xd4c2, 0xd4da, 0xd5e2, 0xd6d0
      ];
    };
    util.inherits(module.exports.gb_18030, mbcs);
    }(mbcs$1));

    var sbcs$1 = {exports: {}};

    (function (module) {
    var util = require$$0__default["default"],
      Match = match$1;

    /**
     * This class recognizes single-byte encodings. Because the encoding scheme is so
     * simple, language statistics are used to do the matching.
     */

    function NGramParser(theNgramList, theByteMap) {
      var N_GRAM_MASK = 0xFFFFFF;

      this.byteIndex = 0;
      this.ngram = 0;

      this.ngramList = theNgramList;
      this.byteMap = theByteMap;

      this.ngramCount = 0;
      this.hitCount = 0;

      this.spaceChar;

      /*
       * Binary search for value in table, which must have exactly 64 entries.
       */
      this.search = function(table, value) {
        var index = 0;

        if (table[index + 32] <= value) index += 32;
        if (table[index + 16] <= value) index += 16;
        if (table[index + 8]  <= value) index += 8;
        if (table[index + 4]  <= value) index += 4;
        if (table[index + 2]  <= value) index += 2;
        if (table[index + 1]  <= value) index += 1;
        if (table[index]      > value)  index -= 1;

        if (index < 0 || table[index] != value)
          return -1;

        return index;
      };

      this.lookup = function(thisNgram) {
        this.ngramCount += 1;
        if (this.search(this.ngramList, thisNgram) >= 0) {
          this.hitCount += 1;
        }
      };

      this.addByte = function(b) {
        this.ngram = ((this.ngram << 8) + (b & 0xFF)) & N_GRAM_MASK;
        this.lookup(this.ngram);
      };

      this.nextByte = function(det) {
        if (this.byteIndex >= det.fInputLen)
          return -1;

        return det.fInputBytes[this.byteIndex++] & 0xFF;
      };

      this.parse = function(det, spaceCh) {
        var b, ignoreSpace = false;
        this.spaceChar = spaceCh;

        while ((b = this.nextByte(det)) >= 0) {
          var mb = this.byteMap[b];

          // TODO: 0x20 might not be a space in all character sets...
          if (mb != 0) {
            if (!(mb == this.spaceChar && ignoreSpace)) {
              this.addByte(mb);
            }

            ignoreSpace = (mb == this.spaceChar);
          }
        }

        // TODO: Is this OK? The buffer could have ended in the middle of a word...
        this.addByte(this.spaceChar);

        var rawPercent = this.hitCount / this.ngramCount;

        // TODO - This is a bit of a hack to take care of a case
        // were we were getting a confidence of 135...
        if (rawPercent > 0.33)
          return 98;

        return Math.floor(rawPercent * 300.0);
      };
    }
    function NGramsPlusLang(la, ng) {
      this.fLang = la;
      this.fNGrams = ng;
    }
    function sbcs() {}sbcs.prototype.spaceChar = 0x20;
    sbcs.prototype.ngrams = function() {};
    sbcs.prototype.byteMap = function() {};
    sbcs.prototype.match = function(det) {

      var ngrams = this.ngrams();
      var multiple = (Array.isArray(ngrams) && ngrams[0] instanceof NGramsPlusLang);

      if (!multiple) {
        var parser = new NGramParser(ngrams, this.byteMap());
        var confidence = parser.parse(det, this.spaceChar);
        return confidence <= 0 ? null : new Match(det, this, confidence);
      }

      var bestConfidenceSoFar = -1;
      var lang = null;

      for (var i = ngrams.length - 1; i >= 0; i--) {
        var ngl = ngrams[i];

        var parser = new NGramParser(ngl.fNGrams, this.byteMap());
        var confidence = parser.parse(det, this.spaceChar);
        if (confidence > bestConfidenceSoFar) {
          bestConfidenceSoFar = confidence;
          lang = ngl.fLang;
        }
      }

      var name = this.name(det);
      return bestConfidenceSoFar <= 0 ? null : new Match(det, this, bestConfidenceSoFar, name, lang);
    };


    module.exports.ISO_8859_1 = function() {
      this.byteMap = function() {
        return [
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67,
          0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F,
          0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77,
          0x78, 0x79, 0x7A, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67,
          0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F,
          0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77,
          0x78, 0x79, 0x7A, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0xAA, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0xB5, 0x20, 0x20,
          0x20, 0x20, 0xBA, 0x20, 0x20, 0x20, 0x20, 0x20,
          0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7,
          0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF,
          0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0x20,
          0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0xDF,
          0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7,
          0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF,
          0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0x20,
          0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0xFF
        ];
      };

      this.ngrams = function() {
        return [
          new NGramsPlusLang('da', [
            0x206166, 0x206174, 0x206465, 0x20656E, 0x206572, 0x20666F, 0x206861, 0x206920,
            0x206D65, 0x206F67, 0x2070E5, 0x207369, 0x207374, 0x207469, 0x207669, 0x616620,
            0x616E20, 0x616E64, 0x617220, 0x617420, 0x646520, 0x64656E, 0x646572, 0x646574,
            0x652073, 0x656420, 0x656465, 0x656E20, 0x656E64, 0x657220, 0x657265, 0x657320,
            0x657420, 0x666F72, 0x676520, 0x67656E, 0x676572, 0x696765, 0x696C20, 0x696E67,
            0x6B6520, 0x6B6B65, 0x6C6572, 0x6C6967, 0x6C6C65, 0x6D6564, 0x6E6465, 0x6E6520,
            0x6E6720, 0x6E6765, 0x6F6720, 0x6F6D20, 0x6F7220, 0x70E520, 0x722064, 0x722065,
            0x722073, 0x726520, 0x737465, 0x742073, 0x746520, 0x746572, 0x74696C, 0x766572
          ]),
          new NGramsPlusLang('de', [
            0x20616E, 0x206175, 0x206265, 0x206461, 0x206465, 0x206469, 0x206569, 0x206765,
            0x206861, 0x20696E, 0x206D69, 0x207363, 0x207365, 0x20756E, 0x207665, 0x20766F,
            0x207765, 0x207A75, 0x626572, 0x636820, 0x636865, 0x636874, 0x646173, 0x64656E,
            0x646572, 0x646965, 0x652064, 0x652073, 0x65696E, 0x656974, 0x656E20, 0x657220,
            0x657320, 0x67656E, 0x68656E, 0x687420, 0x696368, 0x696520, 0x696E20, 0x696E65,
            0x697420, 0x6C6963, 0x6C6C65, 0x6E2061, 0x6E2064, 0x6E2073, 0x6E6420, 0x6E6465,
            0x6E6520, 0x6E6720, 0x6E6765, 0x6E7465, 0x722064, 0x726465, 0x726569, 0x736368,
            0x737465, 0x742064, 0x746520, 0x74656E, 0x746572, 0x756E64, 0x756E67, 0x766572
          ]),
          new NGramsPlusLang('en', [
            0x206120, 0x20616E, 0x206265, 0x20636F, 0x20666F, 0x206861, 0x206865, 0x20696E,
            0x206D61, 0x206F66, 0x207072, 0x207265, 0x207361, 0x207374, 0x207468, 0x20746F,
            0x207768, 0x616964, 0x616C20, 0x616E20, 0x616E64, 0x617320, 0x617420, 0x617465,
            0x617469, 0x642061, 0x642074, 0x652061, 0x652073, 0x652074, 0x656420, 0x656E74,
            0x657220, 0x657320, 0x666F72, 0x686174, 0x686520, 0x686572, 0x696420, 0x696E20,
            0x696E67, 0x696F6E, 0x697320, 0x6E2061, 0x6E2074, 0x6E6420, 0x6E6720, 0x6E7420,
            0x6F6620, 0x6F6E20, 0x6F7220, 0x726520, 0x727320, 0x732061, 0x732074, 0x736169,
            0x737420, 0x742074, 0x746572, 0x746861, 0x746865, 0x74696F, 0x746F20, 0x747320
          ]),
          new NGramsPlusLang('es', [
            0x206120, 0x206361, 0x20636F, 0x206465, 0x20656C, 0x20656E, 0x206573, 0x20696E,
            0x206C61, 0x206C6F, 0x207061, 0x20706F, 0x207072, 0x207175, 0x207265, 0x207365,
            0x20756E, 0x207920, 0x612063, 0x612064, 0x612065, 0x61206C, 0x612070, 0x616369,
            0x61646F, 0x616C20, 0x617220, 0x617320, 0x6369F3, 0x636F6E, 0x646520, 0x64656C,
            0x646F20, 0x652064, 0x652065, 0x65206C, 0x656C20, 0x656E20, 0x656E74, 0x657320,
            0x657374, 0x69656E, 0x69F36E, 0x6C6120, 0x6C6F73, 0x6E2065, 0x6E7465, 0x6F2064,
            0x6F2065, 0x6F6E20, 0x6F7220, 0x6F7320, 0x706172, 0x717565, 0x726120, 0x726573,
            0x732064, 0x732065, 0x732070, 0x736520, 0x746520, 0x746F20, 0x756520, 0xF36E20
          ]),
          new NGramsPlusLang('fr', [
            0x206175, 0x20636F, 0x206461, 0x206465, 0x206475, 0x20656E, 0x206574, 0x206C61,
            0x206C65, 0x207061, 0x20706F, 0x207072, 0x207175, 0x207365, 0x20736F, 0x20756E,
            0x20E020, 0x616E74, 0x617469, 0x636520, 0x636F6E, 0x646520, 0x646573, 0x647520,
            0x652061, 0x652063, 0x652064, 0x652065, 0x65206C, 0x652070, 0x652073, 0x656E20,
            0x656E74, 0x657220, 0x657320, 0x657420, 0x657572, 0x696F6E, 0x697320, 0x697420,
            0x6C6120, 0x6C6520, 0x6C6573, 0x6D656E, 0x6E2064, 0x6E6520, 0x6E7320, 0x6E7420,
            0x6F6E20, 0x6F6E74, 0x6F7572, 0x717565, 0x72206C, 0x726520, 0x732061, 0x732064,
            0x732065, 0x73206C, 0x732070, 0x742064, 0x746520, 0x74696F, 0x756520, 0x757220
          ]),
          new NGramsPlusLang('it', [
            0x20616C, 0x206368, 0x20636F, 0x206465, 0x206469, 0x206520, 0x20696C, 0x20696E,
            0x206C61, 0x207065, 0x207072, 0x20756E, 0x612063, 0x612064, 0x612070, 0x612073,
            0x61746F, 0x636865, 0x636F6E, 0x64656C, 0x646920, 0x652061, 0x652063, 0x652064,
            0x652069, 0x65206C, 0x652070, 0x652073, 0x656C20, 0x656C6C, 0x656E74, 0x657220,
            0x686520, 0x692061, 0x692063, 0x692064, 0x692073, 0x696120, 0x696C20, 0x696E20,
            0x696F6E, 0x6C6120, 0x6C6520, 0x6C6920, 0x6C6C61, 0x6E6520, 0x6E6920, 0x6E6F20,
            0x6E7465, 0x6F2061, 0x6F2064, 0x6F2069, 0x6F2073, 0x6F6E20, 0x6F6E65, 0x706572,
            0x726120, 0x726520, 0x736920, 0x746120, 0x746520, 0x746920, 0x746F20, 0x7A696F
          ]),
          new NGramsPlusLang('nl', [
            0x20616C, 0x206265, 0x206461, 0x206465, 0x206469, 0x206565, 0x20656E, 0x206765,
            0x206865, 0x20696E, 0x206D61, 0x206D65, 0x206F70, 0x207465, 0x207661, 0x207665,
            0x20766F, 0x207765, 0x207A69, 0x61616E, 0x616172, 0x616E20, 0x616E64, 0x617220,
            0x617420, 0x636874, 0x646520, 0x64656E, 0x646572, 0x652062, 0x652076, 0x65656E,
            0x656572, 0x656E20, 0x657220, 0x657273, 0x657420, 0x67656E, 0x686574, 0x696520,
            0x696E20, 0x696E67, 0x697320, 0x6E2062, 0x6E2064, 0x6E2065, 0x6E2068, 0x6E206F,
            0x6E2076, 0x6E6465, 0x6E6720, 0x6F6E64, 0x6F6F72, 0x6F7020, 0x6F7220, 0x736368,
            0x737465, 0x742064, 0x746520, 0x74656E, 0x746572, 0x76616E, 0x766572, 0x766F6F
          ]),
          new NGramsPlusLang('no', [
            0x206174, 0x206176, 0x206465, 0x20656E, 0x206572, 0x20666F, 0x206861, 0x206920,
            0x206D65, 0x206F67, 0x2070E5, 0x207365, 0x20736B, 0x20736F, 0x207374, 0x207469,
            0x207669, 0x20E520, 0x616E64, 0x617220, 0x617420, 0x646520, 0x64656E, 0x646574,
            0x652073, 0x656420, 0x656E20, 0x656E65, 0x657220, 0x657265, 0x657420, 0x657474,
            0x666F72, 0x67656E, 0x696B6B, 0x696C20, 0x696E67, 0x6B6520, 0x6B6B65, 0x6C6520,
            0x6C6C65, 0x6D6564, 0x6D656E, 0x6E2073, 0x6E6520, 0x6E6720, 0x6E6765, 0x6E6E65,
            0x6F6720, 0x6F6D20, 0x6F7220, 0x70E520, 0x722073, 0x726520, 0x736F6D, 0x737465,
            0x742073, 0x746520, 0x74656E, 0x746572, 0x74696C, 0x747420, 0x747465, 0x766572
          ]),
          new NGramsPlusLang('pt', [
            0x206120, 0x20636F, 0x206461, 0x206465, 0x20646F, 0x206520, 0x206573, 0x206D61,
            0x206E6F, 0x206F20, 0x207061, 0x20706F, 0x207072, 0x207175, 0x207265, 0x207365,
            0x20756D, 0x612061, 0x612063, 0x612064, 0x612070, 0x616465, 0x61646F, 0x616C20,
            0x617220, 0x617261, 0x617320, 0x636F6D, 0x636F6E, 0x646120, 0x646520, 0x646F20,
            0x646F73, 0x652061, 0x652064, 0x656D20, 0x656E74, 0x657320, 0x657374, 0x696120,
            0x696361, 0x6D656E, 0x6E7465, 0x6E746F, 0x6F2061, 0x6F2063, 0x6F2064, 0x6F2065,
            0x6F2070, 0x6F7320, 0x706172, 0x717565, 0x726120, 0x726573, 0x732061, 0x732064,
            0x732065, 0x732070, 0x737461, 0x746520, 0x746F20, 0x756520, 0xE36F20, 0xE7E36F
          ]),
          new NGramsPlusLang('sv', [
            0x206174, 0x206176, 0x206465, 0x20656E, 0x2066F6, 0x206861, 0x206920, 0x20696E,
            0x206B6F, 0x206D65, 0x206F63, 0x2070E5, 0x20736B, 0x20736F, 0x207374, 0x207469,
            0x207661, 0x207669, 0x20E472, 0x616465, 0x616E20, 0x616E64, 0x617220, 0x617474,
            0x636820, 0x646520, 0x64656E, 0x646572, 0x646574, 0x656420, 0x656E20, 0x657220,
            0x657420, 0x66F672, 0x67656E, 0x696C6C, 0x696E67, 0x6B6120, 0x6C6C20, 0x6D6564,
            0x6E2073, 0x6E6120, 0x6E6465, 0x6E6720, 0x6E6765, 0x6E696E, 0x6F6368, 0x6F6D20,
            0x6F6E20, 0x70E520, 0x722061, 0x722073, 0x726120, 0x736B61, 0x736F6D, 0x742073,
            0x746120, 0x746520, 0x746572, 0x74696C, 0x747420, 0x766172, 0xE47220, 0xF67220,
          ])
        ];
      };

      this.name = function(det) {
        return (det && det.fC1Bytes) ? 'windows-1252' : 'ISO-8859-1';
      };
    };
    util.inherits(module.exports.ISO_8859_1, sbcs);


    module.exports.ISO_8859_2 = function() {
      this.byteMap = function() {
        return [
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67,
          0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F,
          0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77,
          0x78, 0x79, 0x7A, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67,
          0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F,
          0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77,
          0x78, 0x79, 0x7A, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0xB1, 0x20, 0xB3, 0x20, 0xB5, 0xB6, 0x20,
          0x20, 0xB9, 0xBA, 0xBB, 0xBC, 0x20, 0xBE, 0xBF,
          0x20, 0xB1, 0x20, 0xB3, 0x20, 0xB5, 0xB6, 0xB7,
          0x20, 0xB9, 0xBA, 0xBB, 0xBC, 0x20, 0xBE, 0xBF,
          0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7,
          0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF,
          0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0x20,
          0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0xDF,
          0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7,
          0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF,
          0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0x20,
          0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x20
        ];
      };

      this.ngrams = function() {
        return [
          new NGramsPlusLang('cs', [
            0x206120, 0x206279, 0x20646F, 0x206A65, 0x206E61, 0x206E65, 0x206F20, 0x206F64,
            0x20706F, 0x207072, 0x2070F8, 0x20726F, 0x207365, 0x20736F, 0x207374, 0x20746F,
            0x207620, 0x207679, 0x207A61, 0x612070, 0x636520, 0x636820, 0x652070, 0x652073,
            0x652076, 0x656D20, 0x656EED, 0x686F20, 0x686F64, 0x697374, 0x6A6520, 0x6B7465,
            0x6C6520, 0x6C6920, 0x6E6120, 0x6EE920, 0x6EEC20, 0x6EED20, 0x6F2070, 0x6F646E,
            0x6F6A69, 0x6F7374, 0x6F7520, 0x6F7661, 0x706F64, 0x706F6A, 0x70726F, 0x70F865,
            0x736520, 0x736F75, 0x737461, 0x737469, 0x73746E, 0x746572, 0x746EED, 0x746F20,
            0x752070, 0xBE6520, 0xE16EED, 0xE9686F, 0xED2070, 0xED2073, 0xED6D20, 0xF86564,
          ]),
          new NGramsPlusLang('hu', [
            0x206120, 0x20617A, 0x206265, 0x206567, 0x20656C, 0x206665, 0x206861, 0x20686F,
            0x206973, 0x206B65, 0x206B69, 0x206BF6, 0x206C65, 0x206D61, 0x206D65, 0x206D69,
            0x206E65, 0x20737A, 0x207465, 0x20E973, 0x612061, 0x61206B, 0x61206D, 0x612073,
            0x616B20, 0x616E20, 0x617A20, 0x62616E, 0x62656E, 0x656779, 0x656B20, 0x656C20,
            0x656C65, 0x656D20, 0x656E20, 0x657265, 0x657420, 0x657465, 0x657474, 0x677920,
            0x686F67, 0x696E74, 0x697320, 0x6B2061, 0x6BF67A, 0x6D6567, 0x6D696E, 0x6E2061,
            0x6E616B, 0x6E656B, 0x6E656D, 0x6E7420, 0x6F6779, 0x732061, 0x737A65, 0x737A74,
            0x737AE1, 0x73E967, 0x742061, 0x747420, 0x74E173, 0x7A6572, 0xE16E20, 0xE97320,
          ]),
          new NGramsPlusLang('pl', [
            0x20637A, 0x20646F, 0x206920, 0x206A65, 0x206B6F, 0x206D61, 0x206D69, 0x206E61,
            0x206E69, 0x206F64, 0x20706F, 0x207072, 0x207369, 0x207720, 0x207769, 0x207779,
            0x207A20, 0x207A61, 0x612070, 0x612077, 0x616E69, 0x636820, 0x637A65, 0x637A79,
            0x646F20, 0x647A69, 0x652070, 0x652073, 0x652077, 0x65207A, 0x65676F, 0x656A20,
            0x656D20, 0x656E69, 0x676F20, 0x696120, 0x696520, 0x69656A, 0x6B6120, 0x6B6920,
            0x6B6965, 0x6D6965, 0x6E6120, 0x6E6961, 0x6E6965, 0x6F2070, 0x6F7761, 0x6F7769,
            0x706F6C, 0x707261, 0x70726F, 0x70727A, 0x727A65, 0x727A79, 0x7369EA, 0x736B69,
            0x737461, 0x776965, 0x796368, 0x796D20, 0x7A6520, 0x7A6965, 0x7A7920, 0xF37720,
          ]),
          new NGramsPlusLang('ro', [
            0x206120, 0x206163, 0x206361, 0x206365, 0x20636F, 0x206375, 0x206465, 0x206469,
            0x206C61, 0x206D61, 0x207065, 0x207072, 0x207365, 0x2073E3, 0x20756E, 0x20BA69,
            0x20EE6E, 0x612063, 0x612064, 0x617265, 0x617420, 0x617465, 0x617520, 0x636172,
            0x636F6E, 0x637520, 0x63E320, 0x646520, 0x652061, 0x652063, 0x652064, 0x652070,
            0x652073, 0x656120, 0x656920, 0x656C65, 0x656E74, 0x657374, 0x692061, 0x692063,
            0x692064, 0x692070, 0x696520, 0x696920, 0x696E20, 0x6C6120, 0x6C6520, 0x6C6F72,
            0x6C7569, 0x6E6520, 0x6E7472, 0x6F7220, 0x70656E, 0x726520, 0x726561, 0x727520,
            0x73E320, 0x746520, 0x747275, 0x74E320, 0x756920, 0x756C20, 0xBA6920, 0xEE6E20,
          ])
        ];
      };

      this.name = function(det) {
        return (det && det.fC1Bytes) ? 'windows-1250' : 'ISO-8859-2';
      };
    };
    util.inherits(module.exports.ISO_8859_2, sbcs);


    module.exports.ISO_8859_5 = function() {
      this.byteMap = function() {
        return [
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67,
          0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F,
          0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77,
          0x78, 0x79, 0x7A, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67,
          0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F,
          0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77,
          0x78, 0x79, 0x7A, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7,
          0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0x20, 0xFE, 0xFF,
          0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD7,
          0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0xDF,
          0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7,
          0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF,
          0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD7,
          0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0xDF,
          0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7,
          0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF,
          0x20, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7,
          0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0x20, 0xFE, 0xFF
        ];
      };

      this.ngrams = function() {
        return [
          0x20D220, 0x20D2DE, 0x20D4DE, 0x20D7D0, 0x20D820, 0x20DAD0, 0x20DADE, 0x20DDD0,
          0x20DDD5, 0x20DED1, 0x20DFDE, 0x20DFE0, 0x20E0D0, 0x20E1DE, 0x20E1E2, 0x20E2DE,
          0x20E7E2, 0x20EDE2, 0xD0DDD8, 0xD0E2EC, 0xD3DE20, 0xD5DBEC, 0xD5DDD8, 0xD5E1E2,
          0xD5E220, 0xD820DF, 0xD8D520, 0xD8D820, 0xD8EF20, 0xDBD5DD, 0xDBD820, 0xDBECDD,
          0xDDD020, 0xDDD520, 0xDDD8D5, 0xDDD8EF, 0xDDDE20, 0xDDDED2, 0xDE20D2, 0xDE20DF,
          0xDE20E1, 0xDED220, 0xDED2D0, 0xDED3DE, 0xDED920, 0xDEDBEC, 0xDEDC20, 0xDEE1E2,
          0xDFDEDB, 0xDFE0D5, 0xDFE0D8, 0xDFE0DE, 0xE0D0D2, 0xE0D5D4, 0xE1E2D0, 0xE1E2D2,
          0xE1E2D8, 0xE1EF20, 0xE2D5DB, 0xE2DE20, 0xE2DEE0, 0xE2EC20, 0xE7E2DE, 0xEBE520
        ];
      };

      this.name = function(det) {
        return 'ISO-8859-5';
      };

      this.language = function() {
        return 'ru';
      };
    };
    util.inherits(module.exports.ISO_8859_5, sbcs);


    module.exports.ISO_8859_6 = function() {
      this.byteMap = function() {
        return [
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67,
          0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F,
          0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77,
          0x78, 0x79, 0x7A, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67,
          0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F,
          0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77,
          0x78, 0x79, 0x7A, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7,
          0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF,
          0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD7,
          0xD8, 0xD9, 0xDA, 0x20, 0x20, 0x20, 0x20, 0x20,
          0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7,
          0xE8, 0xE9, 0xEA, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20
        ];
      };

      this.ngrams = function() {
        return [
          0x20C7E4, 0x20C7E6, 0x20C8C7, 0x20D9E4, 0x20E1EA, 0x20E4E4, 0x20E5E6, 0x20E8C7,
          0xC720C7, 0xC7C120, 0xC7CA20, 0xC7D120, 0xC7E420, 0xC7E4C3, 0xC7E4C7, 0xC7E4C8,
          0xC7E4CA, 0xC7E4CC, 0xC7E4CD, 0xC7E4CF, 0xC7E4D3, 0xC7E4D9, 0xC7E4E2, 0xC7E4E5,
          0xC7E4E8, 0xC7E4EA, 0xC7E520, 0xC7E620, 0xC7E6CA, 0xC820C7, 0xC920C7, 0xC920E1,
          0xC920E4, 0xC920E5, 0xC920E8, 0xCA20C7, 0xCF20C7, 0xCFC920, 0xD120C7, 0xD1C920,
          0xD320C7, 0xD920C7, 0xD9E4E9, 0xE1EA20, 0xE420C7, 0xE4C920, 0xE4E920, 0xE4EA20,
          0xE520C7, 0xE5C720, 0xE5C920, 0xE5E620, 0xE620C7, 0xE720C7, 0xE7C720, 0xE8C7E4,
          0xE8E620, 0xE920C7, 0xEA20C7, 0xEA20E5, 0xEA20E8, 0xEAC920, 0xEAD120, 0xEAE620
        ];
      };

      this.name = function(det) {
        return 'ISO-8859-6';
      };

      this.language = function() {
        return 'ar';
      };
    };
    util.inherits(module.exports.ISO_8859_6, sbcs);


    module.exports.ISO_8859_7 = function() {
      this.byteMap = function() {
        return [
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67,
          0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F,
          0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77,
          0x78, 0x79, 0x7A, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67,
          0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F,
          0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77,
          0x78, 0x79, 0x7A, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0xA1, 0xA2, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0xDC, 0x20,
          0xDD, 0xDE, 0xDF, 0x20, 0xFC, 0x20, 0xFD, 0xFE,
          0xC0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7,
          0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF,
          0xF0, 0xF1, 0x20, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7,
          0xF8, 0xF9, 0xFA, 0xFB, 0xDC, 0xDD, 0xDE, 0xDF,
          0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7,
          0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF,
          0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7,
          0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x20
        ];
      };

      this.ngrams = function() {
        return [
          0x20E1ED, 0x20E1F0, 0x20E3E9, 0x20E4E9, 0x20E5F0, 0x20E720, 0x20EAE1, 0x20ECE5,
          0x20EDE1, 0x20EF20, 0x20F0E1, 0x20F0EF, 0x20F0F1, 0x20F3F4, 0x20F3F5, 0x20F4E7,
          0x20F4EF, 0xDFE120, 0xE120E1, 0xE120F4, 0xE1E920, 0xE1ED20, 0xE1F0FC, 0xE1F220,
          0xE3E9E1, 0xE5E920, 0xE5F220, 0xE720F4, 0xE7ED20, 0xE7F220, 0xE920F4, 0xE9E120,
          0xE9EADE, 0xE9F220, 0xEAE1E9, 0xEAE1F4, 0xECE520, 0xED20E1, 0xED20E5, 0xED20F0,
          0xEDE120, 0xEFF220, 0xEFF520, 0xF0EFF5, 0xF0F1EF, 0xF0FC20, 0xF220E1, 0xF220E5,
          0xF220EA, 0xF220F0, 0xF220F4, 0xF3E520, 0xF3E720, 0xF3F4EF, 0xF4E120, 0xF4E1E9,
          0xF4E7ED, 0xF4E7F2, 0xF4E9EA, 0xF4EF20, 0xF4EFF5, 0xF4F9ED, 0xF9ED20, 0xFEED20
        ];
      };

      this.name = function(det) {
        return (det && det.fC1Bytes) ? 'windows-1253' : 'ISO-8859-7';
      };

      this.language = function() {
        return 'el';
      };
    };
    util.inherits(module.exports.ISO_8859_7, sbcs);

    module.exports.ISO_8859_8 = function() {

      this.byteMap = function() {
        return [
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67,
          0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F,
          0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77,
          0x78, 0x79, 0x7A, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67,
          0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F,
          0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77,
          0x78, 0x79, 0x7A, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0xB5, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7,
          0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF,
          0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7,
          0xF8, 0xF9, 0xFA, 0x20, 0x20, 0x20, 0x20, 0x20
        ];
      };

      this.ngrams = function() {
        return [
          new NGramsPlusLang('he', [
            0x20E0E5, 0x20E0E7, 0x20E0E9, 0x20E0FA, 0x20E1E9, 0x20E1EE, 0x20E4E0, 0x20E4E5,
            0x20E4E9, 0x20E4EE, 0x20E4F2, 0x20E4F9, 0x20E4FA, 0x20ECE0, 0x20ECE4, 0x20EEE0,
            0x20F2EC, 0x20F9EC, 0xE0FA20, 0xE420E0, 0xE420E1, 0xE420E4, 0xE420EC, 0xE420EE,
            0xE420F9, 0xE4E5E0, 0xE5E020, 0xE5ED20, 0xE5EF20, 0xE5F820, 0xE5FA20, 0xE920E4,
            0xE9E420, 0xE9E5FA, 0xE9E9ED, 0xE9ED20, 0xE9EF20, 0xE9F820, 0xE9FA20, 0xEC20E0,
            0xEC20E4, 0xECE020, 0xECE420, 0xED20E0, 0xED20E1, 0xED20E4, 0xED20EC, 0xED20EE,
            0xED20F9, 0xEEE420, 0xEF20E4, 0xF0E420, 0xF0E920, 0xF0E9ED, 0xF2EC20, 0xF820E4,
            0xF8E9ED, 0xF9EC20, 0xFA20E0, 0xFA20E1, 0xFA20E4, 0xFA20EC, 0xFA20EE, 0xFA20F9,
          ]),
          new NGramsPlusLang('he', [
            0x20E0E5, 0x20E0EC, 0x20E4E9, 0x20E4EC, 0x20E4EE, 0x20E4F0, 0x20E9F0, 0x20ECF2,
            0x20ECF9, 0x20EDE5, 0x20EDE9, 0x20EFE5, 0x20EFE9, 0x20F8E5, 0x20F8E9, 0x20FAE0,
            0x20FAE5, 0x20FAE9, 0xE020E4, 0xE020EC, 0xE020ED, 0xE020FA, 0xE0E420, 0xE0E5E4,
            0xE0EC20, 0xE0EE20, 0xE120E4, 0xE120ED, 0xE120FA, 0xE420E4, 0xE420E9, 0xE420EC,
            0xE420ED, 0xE420EF, 0xE420F8, 0xE420FA, 0xE4EC20, 0xE5E020, 0xE5E420, 0xE7E020,
            0xE9E020, 0xE9E120, 0xE9E420, 0xEC20E4, 0xEC20ED, 0xEC20FA, 0xECF220, 0xECF920,
            0xEDE9E9, 0xEDE9F0, 0xEDE9F8, 0xEE20E4, 0xEE20ED, 0xEE20FA, 0xEEE120, 0xEEE420,
            0xF2E420, 0xF920E4, 0xF920ED, 0xF920FA, 0xF9E420, 0xFAE020, 0xFAE420, 0xFAE5E9,
          ])
        ];
      };

      this.name = function(det) {
        return (det && det.fC1Bytes) ? 'windows-1255' : 'ISO-8859-8';
      };

      this.language = function() {
        return 'he';
      };

    };
    util.inherits(module.exports.ISO_8859_8, sbcs);


    module.exports.ISO_8859_9 = function() {
      this.byteMap = function() {
        return [
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67,
          0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F,
          0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77,
          0x78, 0x79, 0x7A, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67,
          0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F,
          0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77,
          0x78, 0x79, 0x7A, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0xAA, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0xB5, 0x20, 0x20,
          0x20, 0x20, 0xBA, 0x20, 0x20, 0x20, 0x20, 0x20,
          0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7,
          0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF,
          0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0x20,
          0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0x69, 0xFE, 0xDF,
          0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7,
          0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF,
          0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0x20,
          0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0xFF
        ];
      };

      this.ngrams = function() {
        return [
          0x206261, 0x206269, 0x206275, 0x206461, 0x206465, 0x206765, 0x206861, 0x20696C,
          0x206B61, 0x206B6F, 0x206D61, 0x206F6C, 0x207361, 0x207461, 0x207665, 0x207961,
          0x612062, 0x616B20, 0x616C61, 0x616D61, 0x616E20, 0x616EFD, 0x617220, 0x617261,
          0x6172FD, 0x6173FD, 0x617961, 0x626972, 0x646120, 0x646520, 0x646920, 0x652062,
          0x65206B, 0x656469, 0x656E20, 0x657220, 0x657269, 0x657369, 0x696C65, 0x696E20,
          0x696E69, 0x697220, 0x6C616E, 0x6C6172, 0x6C6520, 0x6C6572, 0x6E2061, 0x6E2062,
          0x6E206B, 0x6E6461, 0x6E6465, 0x6E6520, 0x6E6920, 0x6E696E, 0x6EFD20, 0x72696E,
          0x72FD6E, 0x766520, 0x796120, 0x796F72, 0xFD6E20, 0xFD6E64, 0xFD6EFD, 0xFDF0FD
        ];
      };

      this.name = function(det) {
        return (det && det.fC1Bytes) ? 'windows-1254' : 'ISO-8859-9';
      };

      this.language = function() {
        return 'tr';
      };
    };
    util.inherits(module.exports.ISO_8859_9, sbcs);


    module.exports.windows_1251 = function() {
      this.byteMap = function() {
        return [
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67,
          0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F,
          0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77,
          0x78, 0x79, 0x7A, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67,
          0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F,
          0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77,
          0x78, 0x79, 0x7A, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x90, 0x83, 0x20, 0x83, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x9A, 0x20, 0x9C, 0x9D, 0x9E, 0x9F,
          0x90, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x9A, 0x20, 0x9C, 0x9D, 0x9E, 0x9F,
          0x20, 0xA2, 0xA2, 0xBC, 0x20, 0xB4, 0x20, 0x20,
          0xB8, 0x20, 0xBA, 0x20, 0x20, 0x20, 0x20, 0xBF,
          0x20, 0x20, 0xB3, 0xB3, 0xB4, 0xB5, 0x20, 0x20,
          0xB8, 0x20, 0xBA, 0x20, 0xBC, 0xBE, 0xBE, 0xBF,
          0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7,
          0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF,
          0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7,
          0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0xFF,
          0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7,
          0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF,
          0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7,
          0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0xFF
        ];
      };

      this.ngrams = function() {
        return [
          0x20E220, 0x20E2EE, 0x20E4EE, 0x20E7E0, 0x20E820, 0x20EAE0, 0x20EAEE, 0x20EDE0,
          0x20EDE5, 0x20EEE1, 0x20EFEE, 0x20EFF0, 0x20F0E0, 0x20F1EE, 0x20F1F2, 0x20F2EE,
          0x20F7F2, 0x20FDF2, 0xE0EDE8, 0xE0F2FC, 0xE3EE20, 0xE5EBFC, 0xE5EDE8, 0xE5F1F2,
          0xE5F220, 0xE820EF, 0xE8E520, 0xE8E820, 0xE8FF20, 0xEBE5ED, 0xEBE820, 0xEBFCED,
          0xEDE020, 0xEDE520, 0xEDE8E5, 0xEDE8FF, 0xEDEE20, 0xEDEEE2, 0xEE20E2, 0xEE20EF,
          0xEE20F1, 0xEEE220, 0xEEE2E0, 0xEEE3EE, 0xEEE920, 0xEEEBFC, 0xEEEC20, 0xEEF1F2,
          0xEFEEEB, 0xEFF0E5, 0xEFF0E8, 0xEFF0EE, 0xF0E0E2, 0xF0E5E4, 0xF1F2E0, 0xF1F2E2,
          0xF1F2E8, 0xF1FF20, 0xF2E5EB, 0xF2EE20, 0xF2EEF0, 0xF2FC20, 0xF7F2EE, 0xFBF520
        ];
      };

      this.name = function(det) {
        return 'windows-1251';
      };

      this.language = function() {
        return 'ru';
      };
    };
    util.inherits(module.exports.windows_1251, sbcs);


    module.exports.windows_1256 = function() {
      this.byteMap = function() {
        return [
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67,
          0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F,
          0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77,
          0x78, 0x79, 0x7A, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67,
          0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F,
          0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77,
          0x78, 0x79, 0x7A, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x81, 0x20, 0x83, 0x20, 0x20, 0x20, 0x20,
          0x88, 0x20, 0x8A, 0x20, 0x9C, 0x8D, 0x8E, 0x8F,
          0x90, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x98, 0x20, 0x9A, 0x20, 0x9C, 0x20, 0x20, 0x9F,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0xAA, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0xB5, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7,
          0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF,
          0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0x20,
          0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0xDF,
          0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7,
          0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF,
          0x20, 0x20, 0x20, 0x20, 0xF4, 0x20, 0x20, 0x20,
          0x20, 0xF9, 0x20, 0xFB, 0xFC, 0x20, 0x20, 0xFF
        ];
      };

      this.ngrams = function() {
        return [
          0x20C7E1, 0x20C7E4, 0x20C8C7, 0x20DAE1, 0x20DDED, 0x20E1E1, 0x20E3E4, 0x20E6C7,
          0xC720C7, 0xC7C120, 0xC7CA20, 0xC7D120, 0xC7E120, 0xC7E1C3, 0xC7E1C7, 0xC7E1C8,
          0xC7E1CA, 0xC7E1CC, 0xC7E1CD, 0xC7E1CF, 0xC7E1D3, 0xC7E1DA, 0xC7E1DE, 0xC7E1E3,
          0xC7E1E6, 0xC7E1ED, 0xC7E320, 0xC7E420, 0xC7E4CA, 0xC820C7, 0xC920C7, 0xC920DD,
          0xC920E1, 0xC920E3, 0xC920E6, 0xCA20C7, 0xCF20C7, 0xCFC920, 0xD120C7, 0xD1C920,
          0xD320C7, 0xDA20C7, 0xDAE1EC, 0xDDED20, 0xE120C7, 0xE1C920, 0xE1EC20, 0xE1ED20,
          0xE320C7, 0xE3C720, 0xE3C920, 0xE3E420, 0xE420C7, 0xE520C7, 0xE5C720, 0xE6C7E1,
          0xE6E420, 0xEC20C7, 0xED20C7, 0xED20E3, 0xED20E6, 0xEDC920, 0xEDD120, 0xEDE420
        ];
      };

      this.name = function(det) {
        return 'windows-1256';
      };

      this.language = function() {
        return 'ar';
      };
    };
    util.inherits(module.exports.windows_1256, sbcs);


    module.exports.KOI8_R = function() {
      this.byteMap = function() {
        return [
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67,
          0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F,
          0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77,
          0x78, 0x79, 0x7A, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67,
          0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F,
          0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77,
          0x78, 0x79, 0x7A, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0xA3, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0xA3, 0x20, 0x20, 0x20, 0x20,
          0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
          0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7,
          0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF,
          0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD7,
          0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0xDF,
          0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7,
          0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF,
          0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD7,
          0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0xDF
        ];
      };

      this.ngrams = function() {
        return [
          0x20C4CF, 0x20C920, 0x20CBC1, 0x20CBCF, 0x20CEC1, 0x20CEC5, 0x20CFC2, 0x20D0CF,
          0x20D0D2, 0x20D2C1, 0x20D3CF, 0x20D3D4, 0x20D4CF, 0x20D720, 0x20D7CF, 0x20DAC1,
          0x20DCD4, 0x20DED4, 0xC1CEC9, 0xC1D4D8, 0xC5CCD8, 0xC5CEC9, 0xC5D3D4, 0xC5D420,
          0xC7CF20, 0xC920D0, 0xC9C520, 0xC9C920, 0xC9D120, 0xCCC5CE, 0xCCC920, 0xCCD8CE,
          0xCEC120, 0xCEC520, 0xCEC9C5, 0xCEC9D1, 0xCECF20, 0xCECFD7, 0xCF20D0, 0xCF20D3,
          0xCF20D7, 0xCFC7CF, 0xCFCA20, 0xCFCCD8, 0xCFCD20, 0xCFD3D4, 0xCFD720, 0xCFD7C1,
          0xD0CFCC, 0xD0D2C5, 0xD0D2C9, 0xD0D2CF, 0xD2C1D7, 0xD2C5C4, 0xD3D120, 0xD3D4C1,
          0xD3D4C9, 0xD3D4D7, 0xD4C5CC, 0xD4CF20, 0xD4CFD2, 0xD4D820, 0xD9C820, 0xDED4CF
        ];
      };

      this.name = function(det) {
        return 'KOI8-R';
      };

      this.language = function() {
        return 'ru';
      };
    };
    util.inherits(module.exports.KOI8_R, sbcs);


    /*
    module.exports.ISO_8859_7 = function() {
      this.byteMap = function() {
        return [

        ];
      };

      this.ngrams = function() {
        return [

        ];
      };

      this.name = function(det) {
        if (typeof det == 'undefined')
          return 'ISO-8859-7';
        return det.fC1Bytes ? 'windows-1253' : 'ISO-8859-7';
      };

      this.language = function() {
        return 'el';
      };
    };
    util.inherits(module.exports.ISO_8859_7, sbcs);
    */
    }(sbcs$1));

    var iso2022$1 = {exports: {}};

    (function (module) {
    var util = require$$0__default["default"],
      Match = match$1;


    /**
     * This is a superclass for the individual detectors for
     * each of the detectable members of the ISO 2022 family
     * of encodings.
     */

    function ISO_2022() {}

    ISO_2022.prototype.match = function(det) {

      /**
       * Matching function shared among the 2022 detectors JP, CN and KR
       * Counts up the number of legal an unrecognized escape sequences in
       * the sample of text, and computes a score based on the total number &
       * the proportion that fit the encoding.
       *
       *
       * @param text the byte buffer containing text to analyse
       * @param textLen  the size of the text in the byte.
       * @param escapeSequences the byte escape sequences to test for.
       * @return match quality, in the range of 0-100.
       */

      var i, j;
      var escN;
      var hits   = 0;
      var misses = 0;
      var shifts = 0;
      var quality;

      // TODO: refactor me
      var text = det.fInputBytes;
      var textLen = det.fInputLen;

      scanInput:
        for (i = 0; i < textLen; i++) {
          if (text[i] == 0x1b) {
            checkEscapes:
              for (escN = 0; escN < this.escapeSequences.length; escN++) {
                var seq = this.escapeSequences[escN];

                if ((textLen - i) < seq.length)
                  continue checkEscapes;

                for (j = 1; j < seq.length; j++)
                  if (seq[j] != text[i + j])
                    continue checkEscapes;


                hits++;
                i += seq.length - 1;
                continue scanInput;
              }

              misses++;
          }

          // Shift in/out
          if (text[i] == 0x0e || text[i] == 0x0f)
            shifts++;

        }

      if (hits == 0)
        return null;

      //
      // Initial quality is based on relative proportion of recongized vs.
      //   unrecognized escape sequences.
      //   All good:  quality = 100;
      //   half or less good: quality = 0;
      //   linear inbetween.
      quality = (100 * hits - 100 * misses) / (hits + misses);

      // Back off quality if there were too few escape sequences seen.
      //   Include shifts in this computation, so that KR does not get penalized
      //   for having only a single Escape sequence, but many shifts.
      if (hits + shifts < 5)
        quality -= (5 - (hits + shifts)) * 10;

      return quality <= 0 ? null : new Match(det, this, quality);
    };

    module.exports.ISO_2022_JP = function() {
      this.name = function() {
        return 'ISO-2022-JP';
      };
      this.escapeSequences = [
        [ 0x1b, 0x24, 0x28, 0x43 ],   // KS X 1001:1992
        [ 0x1b, 0x24, 0x28, 0x44 ],   // JIS X 212-1990
        [ 0x1b, 0x24, 0x40 ],         // JIS C 6226-1978
        [ 0x1b, 0x24, 0x41 ],         // GB 2312-80
        [ 0x1b, 0x24, 0x42 ],         // JIS X 208-1983
        [ 0x1b, 0x26, 0x40 ],         // JIS X 208 1990, 1997
        [ 0x1b, 0x28, 0x42 ],         // ASCII
        [ 0x1b, 0x28, 0x48 ],         // JIS-Roman
        [ 0x1b, 0x28, 0x49 ],         // Half-width katakana
        [ 0x1b, 0x28, 0x4a ],         // JIS-Roman
        [ 0x1b, 0x2e, 0x41 ],         // ISO 8859-1
        [ 0x1b, 0x2e, 0x46 ]          // ISO 8859-7
      ];
    };
    util.inherits(module.exports.ISO_2022_JP, ISO_2022);



    module.exports.ISO_2022_KR = function() {
      this.name = function() {
        return 'ISO-2022-KR';
      };
      this.escapeSequences = [
        [ 0x1b, 0x24, 0x29, 0x43 ]
      ];
    };
    util.inherits(module.exports.ISO_2022_KR, ISO_2022);



    module.exports.ISO_2022_CN = function() {
      this.name = function() {
        return 'ISO-2022-CN';
      };
      this.escapeSequences = [
        [ 0x1b, 0x24, 0x29, 0x41 ],   // GB 2312-80
        [ 0x1b, 0x24, 0x29, 0x47 ],   // CNS 11643-1992 Plane 1
        [ 0x1b, 0x24, 0x2A, 0x48 ],   // CNS 11643-1992 Plane 2
        [ 0x1b, 0x24, 0x29, 0x45 ],   // ISO-IR-165
        [ 0x1b, 0x24, 0x2B, 0x49 ],   // CNS 11643-1992 Plane 3
        [ 0x1b, 0x24, 0x2B, 0x4A ],   // CNS 11643-1992 Plane 4
        [ 0x1b, 0x24, 0x2B, 0x4B ],   // CNS 11643-1992 Plane 5
        [ 0x1b, 0x24, 0x2B, 0x4C ],   // CNS 11643-1992 Plane 6
        [ 0x1b, 0x24, 0x2B, 0x4D ],   // CNS 11643-1992 Plane 7
        [ 0x1b, 0x4e ],               // SS2
        [ 0x1b, 0x4f ]                // SS3
      ];
    };
    util.inherits(module.exports.ISO_2022_CN, ISO_2022);
    }(iso2022$1));

    var fs$4 = require$$0__default$6["default"];

    var utf8  = utf8$1,
      unicode = unicode$1.exports,
      mbcs    = mbcs$1.exports,
      sbcs    = sbcs$1.exports,
      iso2022 = iso2022$1.exports;

    var self$1 = commonjsGlobal;

    var recognisers = [
      new utf8,
      new unicode.UTF_16BE,
      new unicode.UTF_16LE,
      new unicode.UTF_32BE,
      new unicode.UTF_32LE,
      new mbcs.sjis,
      new mbcs.big5,
      new mbcs.euc_jp,
      new mbcs.euc_kr,
      new mbcs.gb_18030,
      new iso2022.ISO_2022_JP,
      new iso2022.ISO_2022_KR,
      new iso2022.ISO_2022_CN,
      new sbcs.ISO_8859_1,
      new sbcs.ISO_8859_2,
      new sbcs.ISO_8859_5,
      new sbcs.ISO_8859_6,
      new sbcs.ISO_8859_7,
      new sbcs.ISO_8859_8,
      new sbcs.ISO_8859_9,
      new sbcs.windows_1251,
      new sbcs.windows_1256,
      new sbcs.KOI8_R
    ];

    chardet.detect = function(buffer, opts) {

      // Tally up the byte occurence statistics.
      var fByteStats = [];
      for (var i = 0; i < 256; i++)
        fByteStats[i] = 0;

      for (var i = buffer.length - 1; i >= 0; i--)
        fByteStats[buffer[i] & 0x00ff]++;

      var fC1Bytes = false;
      for (var i = 0x80; i <= 0x9F; i += 1) {
        if (fByteStats[i] != 0) {
          fC1Bytes = true;
          break;
        }
      }

      var context = {
        fByteStats:  fByteStats,
        fC1Bytes:    fC1Bytes,
        fRawInput:   buffer,
        fRawLength:  buffer.length,
        fInputBytes: buffer,
        fInputLen:   buffer.length
      };

      var matches = recognisers.map(function(rec) {
        return rec.match(context);
      }).filter(function(match) {
        return !!match;
      }).sort(function(a, b) {
        return b.confidence - a.confidence;
      });

      if (opts && opts.returnAllMatches === true) {
        return matches;
      }
      else {
        return matches.length > 0 ? matches[0].name : null;
      }
    };

    chardet.detectFile = function(filepath, opts, cb) {
      if (typeof opts === 'function') {
        cb = opts;
        opts = undefined;
      }

      var fd;

      var handler = function(err, buffer) {
        if (fd) {
          fs$4.closeSync(fd);
        }

        if (err) return cb(err, null);
        cb(null, self$1.detect(buffer, opts));
      };

      if (opts && opts.sampleSize) {
        fd = fs$4.openSync(filepath, 'r'),
          sample = Buffer.allocUnsafe(opts.sampleSize);

        fs$4.read(fd, sample, 0, opts.sampleSize, null, function(err) {
          handler(err, sample);
        });
        return;
      }

      fs$4.readFile(filepath, handler);
    };

    chardet.detectFileSync = function(filepath, opts) {
      if (opts && opts.sampleSize) {
        var fd = fs$4.openSync(filepath, 'r'),
          sample = Buffer.allocUnsafe(opts.sampleSize);

        fs$4.readSync(fd, sample, 0, opts.sampleSize);
        fs$4.closeSync(fd);
        return self$1.detect(sample, opts);
      }

      return self$1.detect(fs$4.readFileSync(filepath), opts);
    };

    // Wrappers for the previous functions to return all encodings
    chardet.detectAll = function(buffer, opts) {
      if (typeof opts !== 'object') {
        opts = {};
      }
      opts.returnAllMatches = true;
      return self$1.detect(buffer, opts);
    };

    chardet.detectFileAll = function(filepath, opts, cb) {
      if (typeof opts === 'function') {
        cb = opts;
        opts = undefined;
      }
      if (typeof opts !== 'object') {
        opts = {};
      }
      opts.returnAllMatches = true;
      self$1.detectFile(filepath, opts, cb);
    };

    chardet.detectFileAllSync = function(filepath, opts) {
      if (typeof opts !== 'object') {
        opts = {};
      }
      opts.returnAllMatches = true;
      return self$1.detectFileSync(filepath, opts);
    };

    var lib = {exports: {}};

    /* eslint-disable node/no-deprecated-api */

    var buffer = require$$0__default$2["default"];
    var Buffer$8 = buffer.Buffer;

    var safer = {};

    var key;

    for (key in buffer) {
      if (!buffer.hasOwnProperty(key)) continue
      if (key === 'SlowBuffer' || key === 'Buffer') continue
      safer[key] = buffer[key];
    }

    var Safer = safer.Buffer = {};
    for (key in Buffer$8) {
      if (!Buffer$8.hasOwnProperty(key)) continue
      if (key === 'allocUnsafe' || key === 'allocUnsafeSlow') continue
      Safer[key] = Buffer$8[key];
    }

    safer.Buffer.prototype = Buffer$8.prototype;

    if (!Safer.from || Safer.from === Uint8Array.from) {
      Safer.from = function (value, encodingOrOffset, length) {
        if (typeof value === 'number') {
          throw new TypeError('The "value" argument must not be of type number. Received type ' + typeof value)
        }
        if (value && typeof value.length === 'undefined') {
          throw new TypeError('The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type ' + typeof value)
        }
        return Buffer$8(value, encodingOrOffset, length)
      };
    }

    if (!Safer.alloc) {
      Safer.alloc = function (size, fill, encoding) {
        if (typeof size !== 'number') {
          throw new TypeError('The "size" argument must be of type number. Received type ' + typeof size)
        }
        if (size < 0 || size >= 2 * (1 << 30)) {
          throw new RangeError('The value "' + size + '" is invalid for option "size"')
        }
        var buf = Buffer$8(size);
        if (!fill || fill.length === 0) {
          buf.fill(0);
        } else if (typeof encoding === 'string') {
          buf.fill(fill, encoding);
        } else {
          buf.fill(fill);
        }
        return buf
      };
    }

    if (!safer.kStringMaxLength) {
      try {
        safer.kStringMaxLength = process.binding('buffer').kStringMaxLength;
      } catch (e) {
        // we can't determine kStringMaxLength in environments where process.binding
        // is unsupported, so let's not set it
      }
    }

    if (!safer.constants) {
      safer.constants = {
        MAX_LENGTH: safer.kMaxLength
      };
      if (safer.kStringMaxLength) {
        safer.constants.MAX_STRING_LENGTH = safer.kStringMaxLength;
      }
    }

    var safer_1 = safer;

    var bomHandling = {};

    var BOMChar = '\uFEFF';

    bomHandling.PrependBOM = PrependBOMWrapper;
    function PrependBOMWrapper(encoder, options) {
        this.encoder = encoder;
        this.addBOM = true;
    }

    PrependBOMWrapper.prototype.write = function(str) {
        if (this.addBOM) {
            str = BOMChar + str;
            this.addBOM = false;
        }

        return this.encoder.write(str);
    };

    PrependBOMWrapper.prototype.end = function() {
        return this.encoder.end();
    };


    //------------------------------------------------------------------------------

    bomHandling.StripBOM = StripBOMWrapper;
    function StripBOMWrapper(decoder, options) {
        this.decoder = decoder;
        this.pass = false;
        this.options = options || {};
    }

    StripBOMWrapper.prototype.write = function(buf) {
        var res = this.decoder.write(buf);
        if (this.pass || !res)
            return res;

        if (res[0] === BOMChar) {
            res = res.slice(1);
            if (typeof this.options.stripBOM === 'function')
                this.options.stripBOM();
        }

        this.pass = true;
        return res;
    };

    StripBOMWrapper.prototype.end = function() {
        return this.decoder.end();
    };

    var encodings = {};

    var Buffer$7 = safer_1.Buffer;

    // Export Node.js internal encodings.

    var internal = {
        // Encodings
        utf8:   { type: "_internal", bomAware: true},
        cesu8:  { type: "_internal", bomAware: true},
        unicode11utf8: "utf8",

        ucs2:   { type: "_internal", bomAware: true},
        utf16le: "ucs2",

        binary: { type: "_internal" },
        base64: { type: "_internal" },
        hex:    { type: "_internal" },

        // Codec.
        _internal: InternalCodec,
    };

    //------------------------------------------------------------------------------

    function InternalCodec(codecOptions, iconv) {
        this.enc = codecOptions.encodingName;
        this.bomAware = codecOptions.bomAware;

        if (this.enc === "base64")
            this.encoder = InternalEncoderBase64;
        else if (this.enc === "cesu8") {
            this.enc = "utf8"; // Use utf8 for decoding.
            this.encoder = InternalEncoderCesu8;

            // Add decoder for versions of Node not supporting CESU-8
            if (Buffer$7.from('eda0bdedb2a9', 'hex').toString() !== '💩') {
                this.decoder = InternalDecoderCesu8;
                this.defaultCharUnicode = iconv.defaultCharUnicode;
            }
        }
    }

    InternalCodec.prototype.encoder = InternalEncoder;
    InternalCodec.prototype.decoder = InternalDecoder;

    //------------------------------------------------------------------------------

    // We use node.js internal decoder. Its signature is the same as ours.
    var StringDecoder = require$$1__default$2["default"].StringDecoder;

    if (!StringDecoder.prototype.end) // Node v0.8 doesn't have this method.
        StringDecoder.prototype.end = function() {};


    function InternalDecoder(options, codec) {
        StringDecoder.call(this, codec.enc);
    }

    InternalDecoder.prototype = StringDecoder.prototype;


    //------------------------------------------------------------------------------
    // Encoder is mostly trivial

    function InternalEncoder(options, codec) {
        this.enc = codec.enc;
    }

    InternalEncoder.prototype.write = function(str) {
        return Buffer$7.from(str, this.enc);
    };

    InternalEncoder.prototype.end = function() {
    };


    //------------------------------------------------------------------------------
    // Except base64 encoder, which must keep its state.

    function InternalEncoderBase64(options, codec) {
        this.prevStr = '';
    }

    InternalEncoderBase64.prototype.write = function(str) {
        str = this.prevStr + str;
        var completeQuads = str.length - (str.length % 4);
        this.prevStr = str.slice(completeQuads);
        str = str.slice(0, completeQuads);

        return Buffer$7.from(str, "base64");
    };

    InternalEncoderBase64.prototype.end = function() {
        return Buffer$7.from(this.prevStr, "base64");
    };


    //------------------------------------------------------------------------------
    // CESU-8 encoder is also special.

    function InternalEncoderCesu8(options, codec) {
    }

    InternalEncoderCesu8.prototype.write = function(str) {
        var buf = Buffer$7.alloc(str.length * 3), bufIdx = 0;
        for (var i = 0; i < str.length; i++) {
            var charCode = str.charCodeAt(i);
            // Naive implementation, but it works because CESU-8 is especially easy
            // to convert from UTF-16 (which all JS strings are encoded in).
            if (charCode < 0x80)
                buf[bufIdx++] = charCode;
            else if (charCode < 0x800) {
                buf[bufIdx++] = 0xC0 + (charCode >>> 6);
                buf[bufIdx++] = 0x80 + (charCode & 0x3f);
            }
            else { // charCode will always be < 0x10000 in javascript.
                buf[bufIdx++] = 0xE0 + (charCode >>> 12);
                buf[bufIdx++] = 0x80 + ((charCode >>> 6) & 0x3f);
                buf[bufIdx++] = 0x80 + (charCode & 0x3f);
            }
        }
        return buf.slice(0, bufIdx);
    };

    InternalEncoderCesu8.prototype.end = function() {
    };

    //------------------------------------------------------------------------------
    // CESU-8 decoder is not implemented in Node v4.0+

    function InternalDecoderCesu8(options, codec) {
        this.acc = 0;
        this.contBytes = 0;
        this.accBytes = 0;
        this.defaultCharUnicode = codec.defaultCharUnicode;
    }

    InternalDecoderCesu8.prototype.write = function(buf) {
        var acc = this.acc, contBytes = this.contBytes, accBytes = this.accBytes, 
            res = '';
        for (var i = 0; i < buf.length; i++) {
            var curByte = buf[i];
            if ((curByte & 0xC0) !== 0x80) { // Leading byte
                if (contBytes > 0) { // Previous code is invalid
                    res += this.defaultCharUnicode;
                    contBytes = 0;
                }

                if (curByte < 0x80) { // Single-byte code
                    res += String.fromCharCode(curByte);
                } else if (curByte < 0xE0) { // Two-byte code
                    acc = curByte & 0x1F;
                    contBytes = 1; accBytes = 1;
                } else if (curByte < 0xF0) { // Three-byte code
                    acc = curByte & 0x0F;
                    contBytes = 2; accBytes = 1;
                } else { // Four or more are not supported for CESU-8.
                    res += this.defaultCharUnicode;
                }
            } else { // Continuation byte
                if (contBytes > 0) { // We're waiting for it.
                    acc = (acc << 6) | (curByte & 0x3f);
                    contBytes--; accBytes++;
                    if (contBytes === 0) {
                        // Check for overlong encoding, but support Modified UTF-8 (encoding NULL as C0 80)
                        if (accBytes === 2 && acc < 0x80 && acc > 0)
                            res += this.defaultCharUnicode;
                        else if (accBytes === 3 && acc < 0x800)
                            res += this.defaultCharUnicode;
                        else
                            // Actually add character.
                            res += String.fromCharCode(acc);
                    }
                } else { // Unexpected continuation byte
                    res += this.defaultCharUnicode;
                }
            }
        }
        this.acc = acc; this.contBytes = contBytes; this.accBytes = accBytes;
        return res;
    };

    InternalDecoderCesu8.prototype.end = function() {
        var res = 0;
        if (this.contBytes > 0)
            res += this.defaultCharUnicode;
        return res;
    };

    var utf16 = {};

    var Buffer$6 = safer_1.Buffer;

    // Note: UTF16-LE (or UCS2) codec is Node.js native. See encodings/internal.js

    // == UTF16-BE codec. ==========================================================

    utf16.utf16be = Utf16BECodec;
    function Utf16BECodec() {
    }

    Utf16BECodec.prototype.encoder = Utf16BEEncoder;
    Utf16BECodec.prototype.decoder = Utf16BEDecoder;
    Utf16BECodec.prototype.bomAware = true;


    // -- Encoding

    function Utf16BEEncoder() {
    }

    Utf16BEEncoder.prototype.write = function(str) {
        var buf = Buffer$6.from(str, 'ucs2');
        for (var i = 0; i < buf.length; i += 2) {
            var tmp = buf[i]; buf[i] = buf[i+1]; buf[i+1] = tmp;
        }
        return buf;
    };

    Utf16BEEncoder.prototype.end = function() {
    };


    // -- Decoding

    function Utf16BEDecoder() {
        this.overflowByte = -1;
    }

    Utf16BEDecoder.prototype.write = function(buf) {
        if (buf.length == 0)
            return '';

        var buf2 = Buffer$6.alloc(buf.length + 1),
            i = 0, j = 0;

        if (this.overflowByte !== -1) {
            buf2[0] = buf[0];
            buf2[1] = this.overflowByte;
            i = 1; j = 2;
        }

        for (; i < buf.length-1; i += 2, j+= 2) {
            buf2[j] = buf[i+1];
            buf2[j+1] = buf[i];
        }

        this.overflowByte = (i == buf.length-1) ? buf[buf.length-1] : -1;

        return buf2.slice(0, j).toString('ucs2');
    };

    Utf16BEDecoder.prototype.end = function() {
    };


    // == UTF-16 codec =============================================================
    // Decoder chooses automatically from UTF-16LE and UTF-16BE using BOM and space-based heuristic.
    // Defaults to UTF-16LE, as it's prevalent and default in Node.
    // http://en.wikipedia.org/wiki/UTF-16 and http://encoding.spec.whatwg.org/#utf-16le
    // Decoder default can be changed: iconv.decode(buf, 'utf16', {defaultEncoding: 'utf-16be'});

    // Encoder uses UTF-16LE and prepends BOM (which can be overridden with addBOM: false).

    utf16.utf16 = Utf16Codec;
    function Utf16Codec(codecOptions, iconv) {
        this.iconv = iconv;
    }

    Utf16Codec.prototype.encoder = Utf16Encoder;
    Utf16Codec.prototype.decoder = Utf16Decoder;


    // -- Encoding (pass-through)

    function Utf16Encoder(options, codec) {
        options = options || {};
        if (options.addBOM === undefined)
            options.addBOM = true;
        this.encoder = codec.iconv.getEncoder('utf-16le', options);
    }

    Utf16Encoder.prototype.write = function(str) {
        return this.encoder.write(str);
    };

    Utf16Encoder.prototype.end = function() {
        return this.encoder.end();
    };


    // -- Decoding

    function Utf16Decoder(options, codec) {
        this.decoder = null;
        this.initialBytes = [];
        this.initialBytesLen = 0;

        this.options = options || {};
        this.iconv = codec.iconv;
    }

    Utf16Decoder.prototype.write = function(buf) {
        if (!this.decoder) {
            // Codec is not chosen yet. Accumulate initial bytes.
            this.initialBytes.push(buf);
            this.initialBytesLen += buf.length;
            
            if (this.initialBytesLen < 16) // We need more bytes to use space heuristic (see below)
                return '';

            // We have enough bytes -> detect endianness.
            var buf = Buffer$6.concat(this.initialBytes),
                encoding = detectEncoding(buf, this.options.defaultEncoding);
            this.decoder = this.iconv.getDecoder(encoding, this.options);
            this.initialBytes.length = this.initialBytesLen = 0;
        }

        return this.decoder.write(buf);
    };

    Utf16Decoder.prototype.end = function() {
        if (!this.decoder) {
            var buf = Buffer$6.concat(this.initialBytes),
                encoding = detectEncoding(buf, this.options.defaultEncoding);
            this.decoder = this.iconv.getDecoder(encoding, this.options);

            var res = this.decoder.write(buf),
                trail = this.decoder.end();

            return trail ? (res + trail) : res;
        }
        return this.decoder.end();
    };

    function detectEncoding(buf, defaultEncoding) {
        var enc = defaultEncoding || 'utf-16le';

        if (buf.length >= 2) {
            // Check BOM.
            if (buf[0] == 0xFE && buf[1] == 0xFF) // UTF-16BE BOM
                enc = 'utf-16be';
            else if (buf[0] == 0xFF && buf[1] == 0xFE) // UTF-16LE BOM
                enc = 'utf-16le';
            else {
                // No BOM found. Try to deduce encoding from initial content.
                // Most of the time, the content has ASCII chars (U+00**), but the opposite (U+**00) is uncommon.
                // So, we count ASCII as if it was LE or BE, and decide from that.
                var asciiCharsLE = 0, asciiCharsBE = 0, // Counts of chars in both positions
                    _len = Math.min(buf.length - (buf.length % 2), 64); // Len is always even.

                for (var i = 0; i < _len; i += 2) {
                    if (buf[i] === 0 && buf[i+1] !== 0) asciiCharsBE++;
                    if (buf[i] !== 0 && buf[i+1] === 0) asciiCharsLE++;
                }

                if (asciiCharsBE > asciiCharsLE)
                    enc = 'utf-16be';
                else if (asciiCharsBE < asciiCharsLE)
                    enc = 'utf-16le';
            }
        }

        return enc;
    }

    var utf7 = {};

    var Buffer$5 = safer_1.Buffer;

    // UTF-7 codec, according to https://tools.ietf.org/html/rfc2152
    // See also below a UTF-7-IMAP codec, according to http://tools.ietf.org/html/rfc3501#section-5.1.3

    utf7.utf7 = Utf7Codec;
    utf7.unicode11utf7 = 'utf7'; // Alias UNICODE-1-1-UTF-7
    function Utf7Codec(codecOptions, iconv) {
        this.iconv = iconv;
    }
    Utf7Codec.prototype.encoder = Utf7Encoder;
    Utf7Codec.prototype.decoder = Utf7Decoder;
    Utf7Codec.prototype.bomAware = true;


    // -- Encoding

    var nonDirectChars = /[^A-Za-z0-9'\(\),-\.\/:\? \n\r\t]+/g;

    function Utf7Encoder(options, codec) {
        this.iconv = codec.iconv;
    }

    Utf7Encoder.prototype.write = function(str) {
        // Naive implementation.
        // Non-direct chars are encoded as "+<base64>-"; single "+" char is encoded as "+-".
        return Buffer$5.from(str.replace(nonDirectChars, function(chunk) {
            return "+" + (chunk === '+' ? '' : 
                this.iconv.encode(chunk, 'utf16-be').toString('base64').replace(/=+$/, '')) 
                + "-";
        }.bind(this)));
    };

    Utf7Encoder.prototype.end = function() {
    };


    // -- Decoding

    function Utf7Decoder(options, codec) {
        this.iconv = codec.iconv;
        this.inBase64 = false;
        this.base64Accum = '';
    }

    var base64Regex = /[A-Za-z0-9\/+]/;
    var base64Chars = [];
    for (var i$1 = 0; i$1 < 256; i$1++)
        base64Chars[i$1] = base64Regex.test(String.fromCharCode(i$1));

    var plusChar = '+'.charCodeAt(0), 
        minusChar = '-'.charCodeAt(0),
        andChar = '&'.charCodeAt(0);

    Utf7Decoder.prototype.write = function(buf) {
        var res = "", lastI = 0,
            inBase64 = this.inBase64,
            base64Accum = this.base64Accum;

        // The decoder is more involved as we must handle chunks in stream.

        for (var i = 0; i < buf.length; i++) {
            if (!inBase64) { // We're in direct mode.
                // Write direct chars until '+'
                if (buf[i] == plusChar) {
                    res += this.iconv.decode(buf.slice(lastI, i), "ascii"); // Write direct chars.
                    lastI = i+1;
                    inBase64 = true;
                }
            } else { // We decode base64.
                if (!base64Chars[buf[i]]) { // Base64 ended.
                    if (i == lastI && buf[i] == minusChar) {// "+-" -> "+"
                        res += "+";
                    } else {
                        var b64str = base64Accum + buf.slice(lastI, i).toString();
                        res += this.iconv.decode(Buffer$5.from(b64str, 'base64'), "utf16-be");
                    }

                    if (buf[i] != minusChar) // Minus is absorbed after base64.
                        i--;

                    lastI = i+1;
                    inBase64 = false;
                    base64Accum = '';
                }
            }
        }

        if (!inBase64) {
            res += this.iconv.decode(buf.slice(lastI), "ascii"); // Write direct chars.
        } else {
            var b64str = base64Accum + buf.slice(lastI).toString();

            var canBeDecoded = b64str.length - (b64str.length % 8); // Minimal chunk: 2 quads -> 2x3 bytes -> 3 chars.
            base64Accum = b64str.slice(canBeDecoded); // The rest will be decoded in future.
            b64str = b64str.slice(0, canBeDecoded);

            res += this.iconv.decode(Buffer$5.from(b64str, 'base64'), "utf16-be");
        }

        this.inBase64 = inBase64;
        this.base64Accum = base64Accum;

        return res;
    };

    Utf7Decoder.prototype.end = function() {
        var res = "";
        if (this.inBase64 && this.base64Accum.length > 0)
            res = this.iconv.decode(Buffer$5.from(this.base64Accum, 'base64'), "utf16-be");

        this.inBase64 = false;
        this.base64Accum = '';
        return res;
    };


    // UTF-7-IMAP codec.
    // RFC3501 Sec. 5.1.3 Modified UTF-7 (http://tools.ietf.org/html/rfc3501#section-5.1.3)
    // Differences:
    //  * Base64 part is started by "&" instead of "+"
    //  * Direct characters are 0x20-0x7E, except "&" (0x26)
    //  * In Base64, "," is used instead of "/"
    //  * Base64 must not be used to represent direct characters.
    //  * No implicit shift back from Base64 (should always end with '-')
    //  * String must end in non-shifted position.
    //  * "-&" while in base64 is not allowed.


    utf7.utf7imap = Utf7IMAPCodec;
    function Utf7IMAPCodec(codecOptions, iconv) {
        this.iconv = iconv;
    }
    Utf7IMAPCodec.prototype.encoder = Utf7IMAPEncoder;
    Utf7IMAPCodec.prototype.decoder = Utf7IMAPDecoder;
    Utf7IMAPCodec.prototype.bomAware = true;


    // -- Encoding

    function Utf7IMAPEncoder(options, codec) {
        this.iconv = codec.iconv;
        this.inBase64 = false;
        this.base64Accum = Buffer$5.alloc(6);
        this.base64AccumIdx = 0;
    }

    Utf7IMAPEncoder.prototype.write = function(str) {
        var inBase64 = this.inBase64,
            base64Accum = this.base64Accum,
            base64AccumIdx = this.base64AccumIdx,
            buf = Buffer$5.alloc(str.length*5 + 10), bufIdx = 0;

        for (var i = 0; i < str.length; i++) {
            var uChar = str.charCodeAt(i);
            if (0x20 <= uChar && uChar <= 0x7E) { // Direct character or '&'.
                if (inBase64) {
                    if (base64AccumIdx > 0) {
                        bufIdx += buf.write(base64Accum.slice(0, base64AccumIdx).toString('base64').replace(/\//g, ',').replace(/=+$/, ''), bufIdx);
                        base64AccumIdx = 0;
                    }

                    buf[bufIdx++] = minusChar; // Write '-', then go to direct mode.
                    inBase64 = false;
                }

                if (!inBase64) {
                    buf[bufIdx++] = uChar; // Write direct character

                    if (uChar === andChar)  // Ampersand -> '&-'
                        buf[bufIdx++] = minusChar;
                }

            } else { // Non-direct character
                if (!inBase64) {
                    buf[bufIdx++] = andChar; // Write '&', then go to base64 mode.
                    inBase64 = true;
                }
                if (inBase64) {
                    base64Accum[base64AccumIdx++] = uChar >> 8;
                    base64Accum[base64AccumIdx++] = uChar & 0xFF;

                    if (base64AccumIdx == base64Accum.length) {
                        bufIdx += buf.write(base64Accum.toString('base64').replace(/\//g, ','), bufIdx);
                        base64AccumIdx = 0;
                    }
                }
            }
        }

        this.inBase64 = inBase64;
        this.base64AccumIdx = base64AccumIdx;

        return buf.slice(0, bufIdx);
    };

    Utf7IMAPEncoder.prototype.end = function() {
        var buf = Buffer$5.alloc(10), bufIdx = 0;
        if (this.inBase64) {
            if (this.base64AccumIdx > 0) {
                bufIdx += buf.write(this.base64Accum.slice(0, this.base64AccumIdx).toString('base64').replace(/\//g, ',').replace(/=+$/, ''), bufIdx);
                this.base64AccumIdx = 0;
            }

            buf[bufIdx++] = minusChar; // Write '-', then go to direct mode.
            this.inBase64 = false;
        }

        return buf.slice(0, bufIdx);
    };


    // -- Decoding

    function Utf7IMAPDecoder(options, codec) {
        this.iconv = codec.iconv;
        this.inBase64 = false;
        this.base64Accum = '';
    }

    var base64IMAPChars = base64Chars.slice();
    base64IMAPChars[','.charCodeAt(0)] = true;

    Utf7IMAPDecoder.prototype.write = function(buf) {
        var res = "", lastI = 0,
            inBase64 = this.inBase64,
            base64Accum = this.base64Accum;

        // The decoder is more involved as we must handle chunks in stream.
        // It is forgiving, closer to standard UTF-7 (for example, '-' is optional at the end).

        for (var i = 0; i < buf.length; i++) {
            if (!inBase64) { // We're in direct mode.
                // Write direct chars until '&'
                if (buf[i] == andChar) {
                    res += this.iconv.decode(buf.slice(lastI, i), "ascii"); // Write direct chars.
                    lastI = i+1;
                    inBase64 = true;
                }
            } else { // We decode base64.
                if (!base64IMAPChars[buf[i]]) { // Base64 ended.
                    if (i == lastI && buf[i] == minusChar) { // "&-" -> "&"
                        res += "&";
                    } else {
                        var b64str = base64Accum + buf.slice(lastI, i).toString().replace(/,/g, '/');
                        res += this.iconv.decode(Buffer$5.from(b64str, 'base64'), "utf16-be");
                    }

                    if (buf[i] != minusChar) // Minus may be absorbed after base64.
                        i--;

                    lastI = i+1;
                    inBase64 = false;
                    base64Accum = '';
                }
            }
        }

        if (!inBase64) {
            res += this.iconv.decode(buf.slice(lastI), "ascii"); // Write direct chars.
        } else {
            var b64str = base64Accum + buf.slice(lastI).toString().replace(/,/g, '/');

            var canBeDecoded = b64str.length - (b64str.length % 8); // Minimal chunk: 2 quads -> 2x3 bytes -> 3 chars.
            base64Accum = b64str.slice(canBeDecoded); // The rest will be decoded in future.
            b64str = b64str.slice(0, canBeDecoded);

            res += this.iconv.decode(Buffer$5.from(b64str, 'base64'), "utf16-be");
        }

        this.inBase64 = inBase64;
        this.base64Accum = base64Accum;

        return res;
    };

    Utf7IMAPDecoder.prototype.end = function() {
        var res = "";
        if (this.inBase64 && this.base64Accum.length > 0)
            res = this.iconv.decode(Buffer$5.from(this.base64Accum, 'base64'), "utf16-be");

        this.inBase64 = false;
        this.base64Accum = '';
        return res;
    };

    var sbcsCodec = {};

    var Buffer$4 = safer_1.Buffer;

    // Single-byte codec. Needs a 'chars' string parameter that contains 256 or 128 chars that
    // correspond to encoded bytes (if 128 - then lower half is ASCII). 

    sbcsCodec._sbcs = SBCSCodec;
    function SBCSCodec(codecOptions, iconv) {
        if (!codecOptions)
            throw new Error("SBCS codec is called without the data.")
        
        // Prepare char buffer for decoding.
        if (!codecOptions.chars || (codecOptions.chars.length !== 128 && codecOptions.chars.length !== 256))
            throw new Error("Encoding '"+codecOptions.type+"' has incorrect 'chars' (must be of len 128 or 256)");
        
        if (codecOptions.chars.length === 128) {
            var asciiString = "";
            for (var i = 0; i < 128; i++)
                asciiString += String.fromCharCode(i);
            codecOptions.chars = asciiString + codecOptions.chars;
        }

        this.decodeBuf = Buffer$4.from(codecOptions.chars, 'ucs2');
        
        // Encoding buffer.
        var encodeBuf = Buffer$4.alloc(65536, iconv.defaultCharSingleByte.charCodeAt(0));

        for (var i = 0; i < codecOptions.chars.length; i++)
            encodeBuf[codecOptions.chars.charCodeAt(i)] = i;

        this.encodeBuf = encodeBuf;
    }

    SBCSCodec.prototype.encoder = SBCSEncoder;
    SBCSCodec.prototype.decoder = SBCSDecoder;


    function SBCSEncoder(options, codec) {
        this.encodeBuf = codec.encodeBuf;
    }

    SBCSEncoder.prototype.write = function(str) {
        var buf = Buffer$4.alloc(str.length);
        for (var i = 0; i < str.length; i++)
            buf[i] = this.encodeBuf[str.charCodeAt(i)];
        
        return buf;
    };

    SBCSEncoder.prototype.end = function() {
    };


    function SBCSDecoder(options, codec) {
        this.decodeBuf = codec.decodeBuf;
    }

    SBCSDecoder.prototype.write = function(buf) {
        // Strings are immutable in JS -> we use ucs2 buffer to speed up computations.
        var decodeBuf = this.decodeBuf;
        var newBuf = Buffer$4.alloc(buf.length*2);
        var idx1 = 0, idx2 = 0;
        for (var i = 0; i < buf.length; i++) {
            idx1 = buf[i]*2; idx2 = i*2;
            newBuf[idx2] = decodeBuf[idx1];
            newBuf[idx2+1] = decodeBuf[idx1+1];
        }
        return newBuf.toString('ucs2');
    };

    SBCSDecoder.prototype.end = function() {
    };

    // Manually added data to be used by sbcs codec in addition to generated one.

    var sbcsData = {
        // Not supported by iconv, not sure why.
        "10029": "maccenteuro",
        "maccenteuro": {
            "type": "_sbcs",
            "chars": "ÄĀāÉĄÖÜáąČäčĆćéŹźĎíďĒēĖóėôöõúĚěü†°Ę£§•¶ß®©™ę¨≠ģĮįĪ≤≥īĶ∂∑łĻļĽľĹĺŅņŃ¬√ńŇ∆«»… ňŐÕőŌ–—“”‘’÷◊ōŔŕŘ‹›řŖŗŠ‚„šŚśÁŤťÍŽžŪÓÔūŮÚůŰűŲųÝýķŻŁżĢˇ"
        },

        "808": "cp808",
        "ibm808": "cp808",
        "cp808": {
            "type": "_sbcs",
            "chars": "АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмноп░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀рстуфхцчшщъыьэюяЁёЄєЇїЎў°∙·√№€■ "
        },

        "mik": {
            "type": "_sbcs",
            "chars": "АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя└┴┬├─┼╣║╚╔╩╦╠═╬┐░▒▓│┤№§╗╝┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ "
        },

        // Aliases of generated encodings.
        "ascii8bit": "ascii",
        "usascii": "ascii",
        "ansix34": "ascii",
        "ansix341968": "ascii",
        "ansix341986": "ascii",
        "csascii": "ascii",
        "cp367": "ascii",
        "ibm367": "ascii",
        "isoir6": "ascii",
        "iso646us": "ascii",
        "iso646irv": "ascii",
        "us": "ascii",

        "latin1": "iso88591",
        "latin2": "iso88592",
        "latin3": "iso88593",
        "latin4": "iso88594",
        "latin5": "iso88599",
        "latin6": "iso885910",
        "latin7": "iso885913",
        "latin8": "iso885914",
        "latin9": "iso885915",
        "latin10": "iso885916",

        "csisolatin1": "iso88591",
        "csisolatin2": "iso88592",
        "csisolatin3": "iso88593",
        "csisolatin4": "iso88594",
        "csisolatincyrillic": "iso88595",
        "csisolatinarabic": "iso88596",
        "csisolatingreek" : "iso88597",
        "csisolatinhebrew": "iso88598",
        "csisolatin5": "iso88599",
        "csisolatin6": "iso885910",

        "l1": "iso88591",
        "l2": "iso88592",
        "l3": "iso88593",
        "l4": "iso88594",
        "l5": "iso88599",
        "l6": "iso885910",
        "l7": "iso885913",
        "l8": "iso885914",
        "l9": "iso885915",
        "l10": "iso885916",

        "isoir14": "iso646jp",
        "isoir57": "iso646cn",
        "isoir100": "iso88591",
        "isoir101": "iso88592",
        "isoir109": "iso88593",
        "isoir110": "iso88594",
        "isoir144": "iso88595",
        "isoir127": "iso88596",
        "isoir126": "iso88597",
        "isoir138": "iso88598",
        "isoir148": "iso88599",
        "isoir157": "iso885910",
        "isoir166": "tis620",
        "isoir179": "iso885913",
        "isoir199": "iso885914",
        "isoir203": "iso885915",
        "isoir226": "iso885916",

        "cp819": "iso88591",
        "ibm819": "iso88591",

        "cyrillic": "iso88595",

        "arabic": "iso88596",
        "arabic8": "iso88596",
        "ecma114": "iso88596",
        "asmo708": "iso88596",

        "greek" : "iso88597",
        "greek8" : "iso88597",
        "ecma118" : "iso88597",
        "elot928" : "iso88597",

        "hebrew": "iso88598",
        "hebrew8": "iso88598",

        "turkish": "iso88599",
        "turkish8": "iso88599",

        "thai": "iso885911",
        "thai8": "iso885911",

        "celtic": "iso885914",
        "celtic8": "iso885914",
        "isoceltic": "iso885914",

        "tis6200": "tis620",
        "tis62025291": "tis620",
        "tis62025330": "tis620",

        "10000": "macroman",
        "10006": "macgreek",
        "10007": "maccyrillic",
        "10079": "maciceland",
        "10081": "macturkish",

        "cspc8codepage437": "cp437",
        "cspc775baltic": "cp775",
        "cspc850multilingual": "cp850",
        "cspcp852": "cp852",
        "cspc862latinhebrew": "cp862",
        "cpgr": "cp869",

        "msee": "cp1250",
        "mscyrl": "cp1251",
        "msansi": "cp1252",
        "msgreek": "cp1253",
        "msturk": "cp1254",
        "mshebr": "cp1255",
        "msarab": "cp1256",
        "winbaltrim": "cp1257",

        "cp20866": "koi8r",
        "20866": "koi8r",
        "ibm878": "koi8r",
        "cskoi8r": "koi8r",

        "cp21866": "koi8u",
        "21866": "koi8u",
        "ibm1168": "koi8u",

        "strk10482002": "rk1048",

        "tcvn5712": "tcvn",
        "tcvn57121": "tcvn",

        "gb198880": "iso646cn",
        "cn": "iso646cn",

        "csiso14jisc6220ro": "iso646jp",
        "jisc62201969ro": "iso646jp",
        "jp": "iso646jp",

        "cshproman8": "hproman8",
        "r8": "hproman8",
        "roman8": "hproman8",
        "xroman8": "hproman8",
        "ibm1051": "hproman8",

        "mac": "macintosh",
        "csmacintosh": "macintosh",
    };

    // Generated data for sbcs codec. Don't edit manually. Regenerate using generation/gen-sbcs.js script.
    var sbcsDataGenerated = {
      "437": "cp437",
      "737": "cp737",
      "775": "cp775",
      "850": "cp850",
      "852": "cp852",
      "855": "cp855",
      "856": "cp856",
      "857": "cp857",
      "858": "cp858",
      "860": "cp860",
      "861": "cp861",
      "862": "cp862",
      "863": "cp863",
      "864": "cp864",
      "865": "cp865",
      "866": "cp866",
      "869": "cp869",
      "874": "windows874",
      "922": "cp922",
      "1046": "cp1046",
      "1124": "cp1124",
      "1125": "cp1125",
      "1129": "cp1129",
      "1133": "cp1133",
      "1161": "cp1161",
      "1162": "cp1162",
      "1163": "cp1163",
      "1250": "windows1250",
      "1251": "windows1251",
      "1252": "windows1252",
      "1253": "windows1253",
      "1254": "windows1254",
      "1255": "windows1255",
      "1256": "windows1256",
      "1257": "windows1257",
      "1258": "windows1258",
      "28591": "iso88591",
      "28592": "iso88592",
      "28593": "iso88593",
      "28594": "iso88594",
      "28595": "iso88595",
      "28596": "iso88596",
      "28597": "iso88597",
      "28598": "iso88598",
      "28599": "iso88599",
      "28600": "iso885910",
      "28601": "iso885911",
      "28603": "iso885913",
      "28604": "iso885914",
      "28605": "iso885915",
      "28606": "iso885916",
      "windows874": {
        "type": "_sbcs",
        "chars": "€����…�����������‘’“”•–—�������� กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรฤลฦวศษสหฬอฮฯะัาำิีึืฺุู����฿เแโใไๅๆ็่้๊๋์ํ๎๏๐๑๒๓๔๕๖๗๘๙๚๛����"
      },
      "win874": "windows874",
      "cp874": "windows874",
      "windows1250": {
        "type": "_sbcs",
        "chars": "€�‚�„…†‡�‰Š‹ŚŤŽŹ�‘’“”•–—�™š›śťžź ˇ˘Ł¤Ą¦§¨©Ş«¬­®Ż°±˛ł´µ¶·¸ąş»Ľ˝ľżŔÁÂĂÄĹĆÇČÉĘËĚÍÎĎĐŃŇÓÔŐÖ×ŘŮÚŰÜÝŢßŕáâăäĺćçčéęëěíîďđńňóôőö÷řůúűüýţ˙"
      },
      "win1250": "windows1250",
      "cp1250": "windows1250",
      "windows1251": {
        "type": "_sbcs",
        "chars": "ЂЃ‚ѓ„…†‡€‰Љ‹ЊЌЋЏђ‘’“”•–—�™љ›њќћџ ЎўЈ¤Ґ¦§Ё©Є«¬­®Ї°±Ііґµ¶·ё№є»јЅѕїАБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя"
      },
      "win1251": "windows1251",
      "cp1251": "windows1251",
      "windows1252": {
        "type": "_sbcs",
        "chars": "€�‚ƒ„…†‡ˆ‰Š‹Œ�Ž��‘’“”•–—˜™š›œ�žŸ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿ"
      },
      "win1252": "windows1252",
      "cp1252": "windows1252",
      "windows1253": {
        "type": "_sbcs",
        "chars": "€�‚ƒ„…†‡�‰�‹�����‘’“”•–—�™�›���� ΅Ά£¤¥¦§¨©�«¬­®―°±²³΄µ¶·ΈΉΊ»Ό½ΎΏΐΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡ�ΣΤΥΦΧΨΩΪΫάέήίΰαβγδεζηθικλμνξοπρςστυφχψωϊϋόύώ�"
      },
      "win1253": "windows1253",
      "cp1253": "windows1253",
      "windows1254": {
        "type": "_sbcs",
        "chars": "€�‚ƒ„…†‡ˆ‰Š‹Œ����‘’“”•–—˜™š›œ��Ÿ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏĞÑÒÓÔÕÖ×ØÙÚÛÜİŞßàáâãäåæçèéêëìíîïğñòóôõö÷øùúûüışÿ"
      },
      "win1254": "windows1254",
      "cp1254": "windows1254",
      "windows1255": {
        "type": "_sbcs",
        "chars": "€�‚ƒ„…†‡ˆ‰�‹�����‘’“”•–—˜™�›���� ¡¢£₪¥¦§¨©×«¬­®¯°±²³´µ¶·¸¹÷»¼½¾¿ְֱֲֳִֵֶַָֹֺֻּֽ־ֿ׀ׁׂ׃װױײ׳״�������אבגדהוזחטיךכלםמןנסעףפץצקרשת��‎‏�"
      },
      "win1255": "windows1255",
      "cp1255": "windows1255",
      "windows1256": {
        "type": "_sbcs",
        "chars": "€پ‚ƒ„…†‡ˆ‰ٹ‹Œچژڈگ‘’“”•–—ک™ڑ›œ‌‍ں ،¢£¤¥¦§¨©ھ«¬­®¯°±²³´µ¶·¸¹؛»¼½¾؟ہءآأؤإئابةتثجحخدذرزسشصض×طظعغـفقكàلâمنهوçèéêëىيîïًٌٍَôُِ÷ّùْûü‎‏ے"
      },
      "win1256": "windows1256",
      "cp1256": "windows1256",
      "windows1257": {
        "type": "_sbcs",
        "chars": "€�‚�„…†‡�‰�‹�¨ˇ¸�‘’“”•–—�™�›�¯˛� �¢£¤�¦§Ø©Ŗ«¬­®Æ°±²³´µ¶·ø¹ŗ»¼½¾æĄĮĀĆÄÅĘĒČÉŹĖĢĶĪĻŠŃŅÓŌÕÖ×ŲŁŚŪÜŻŽßąįāćäåęēčéźėģķīļšńņóōõö÷ųłśūüżž˙"
      },
      "win1257": "windows1257",
      "cp1257": "windows1257",
      "windows1258": {
        "type": "_sbcs",
        "chars": "€�‚ƒ„…†‡ˆ‰�‹Œ����‘’“”•–—˜™�›œ��Ÿ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂĂÄÅÆÇÈÉÊË̀ÍÎÏĐÑ̉ÓÔƠÖ×ØÙÚÛÜỮßàáâăäåæçèéêë́íîïđṇ̃óôơö÷øùúûüư₫ÿ"
      },
      "win1258": "windows1258",
      "cp1258": "windows1258",
      "iso88591": {
        "type": "_sbcs",
        "chars": " ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿ"
      },
      "cp28591": "iso88591",
      "iso88592": {
        "type": "_sbcs",
        "chars": " Ą˘Ł¤ĽŚ§¨ŠŞŤŹ­ŽŻ°ą˛ł´ľśˇ¸šşťź˝žżŔÁÂĂÄĹĆÇČÉĘËĚÍÎĎĐŃŇÓÔŐÖ×ŘŮÚŰÜÝŢßŕáâăäĺćçčéęëěíîďđńňóôőö÷řůúűüýţ˙"
      },
      "cp28592": "iso88592",
      "iso88593": {
        "type": "_sbcs",
        "chars": " Ħ˘£¤�Ĥ§¨İŞĞĴ­�Ż°ħ²³´µĥ·¸ışğĵ½�żÀÁÂ�ÄĊĈÇÈÉÊËÌÍÎÏ�ÑÒÓÔĠÖ×ĜÙÚÛÜŬŜßàáâ�äċĉçèéêëìíîï�ñòóôġö÷ĝùúûüŭŝ˙"
      },
      "cp28593": "iso88593",
      "iso88594": {
        "type": "_sbcs",
        "chars": " ĄĸŖ¤ĨĻ§¨ŠĒĢŦ­Ž¯°ą˛ŗ´ĩļˇ¸šēģŧŊžŋĀÁÂÃÄÅÆĮČÉĘËĖÍÎĪĐŅŌĶÔÕÖ×ØŲÚÛÜŨŪßāáâãäåæįčéęëėíîīđņōķôõö÷øųúûüũū˙"
      },
      "cp28594": "iso88594",
      "iso88595": {
        "type": "_sbcs",
        "chars": " ЁЂЃЄЅІЇЈЉЊЋЌ­ЎЏАБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя№ёђѓєѕіїјљњћќ§ўџ"
      },
      "cp28595": "iso88595",
      "iso88596": {
        "type": "_sbcs",
        "chars": " ���¤�������،­�������������؛���؟�ءآأؤإئابةتثجحخدذرزسشصضطظعغ�����ـفقكلمنهوىيًٌٍَُِّْ�������������"
      },
      "cp28596": "iso88596",
      "iso88597": {
        "type": "_sbcs",
        "chars": " ‘’£€₯¦§¨©ͺ«¬­�―°±²³΄΅Ά·ΈΉΊ»Ό½ΎΏΐΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡ�ΣΤΥΦΧΨΩΪΫάέήίΰαβγδεζηθικλμνξοπρςστυφχψωϊϋόύώ�"
      },
      "cp28597": "iso88597",
      "iso88598": {
        "type": "_sbcs",
        "chars": " �¢£¤¥¦§¨©×«¬­®¯°±²³´µ¶·¸¹÷»¼½¾��������������������������������‗אבגדהוזחטיךכלםמןנסעףפץצקרשת��‎‏�"
      },
      "cp28598": "iso88598",
      "iso88599": {
        "type": "_sbcs",
        "chars": " ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏĞÑÒÓÔÕÖ×ØÙÚÛÜİŞßàáâãäåæçèéêëìíîïğñòóôõö÷øùúûüışÿ"
      },
      "cp28599": "iso88599",
      "iso885910": {
        "type": "_sbcs",
        "chars": " ĄĒĢĪĨĶ§ĻĐŠŦŽ­ŪŊ°ąēģīĩķ·ļđšŧž―ūŋĀÁÂÃÄÅÆĮČÉĘËĖÍÎÏÐŅŌÓÔÕÖŨØŲÚÛÜÝÞßāáâãäåæįčéęëėíîïðņōóôõöũøųúûüýþĸ"
      },
      "cp28600": "iso885910",
      "iso885911": {
        "type": "_sbcs",
        "chars": " กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรฤลฦวศษสหฬอฮฯะัาำิีึืฺุู����฿เแโใไๅๆ็่้๊๋์ํ๎๏๐๑๒๓๔๕๖๗๘๙๚๛����"
      },
      "cp28601": "iso885911",
      "iso885913": {
        "type": "_sbcs",
        "chars": " ”¢£¤„¦§Ø©Ŗ«¬­®Æ°±²³“µ¶·ø¹ŗ»¼½¾æĄĮĀĆÄÅĘĒČÉŹĖĢĶĪĻŠŃŅÓŌÕÖ×ŲŁŚŪÜŻŽßąįāćäåęēčéźėģķīļšńņóōõö÷ųłśūüżž’"
      },
      "cp28603": "iso885913",
      "iso885914": {
        "type": "_sbcs",
        "chars": " Ḃḃ£ĊċḊ§Ẁ©ẂḋỲ­®ŸḞḟĠġṀṁ¶ṖẁṗẃṠỳẄẅṡÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏŴÑÒÓÔÕÖṪØÙÚÛÜÝŶßàáâãäåæçèéêëìíîïŵñòóôõöṫøùúûüýŷÿ"
      },
      "cp28604": "iso885914",
      "iso885915": {
        "type": "_sbcs",
        "chars": " ¡¢£€¥Š§š©ª«¬­®¯°±²³Žµ¶·ž¹º»ŒœŸ¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿ"
      },
      "cp28605": "iso885915",
      "iso885916": {
        "type": "_sbcs",
        "chars": " ĄąŁ€„Š§š©Ș«Ź­źŻ°±ČłŽ”¶·žčș»ŒœŸżÀÁÂĂÄĆÆÇÈÉÊËÌÍÎÏĐŃÒÓÔŐÖŚŰÙÚÛÜĘȚßàáâăäćæçèéêëìíîïđńòóôőöśűùúûüęțÿ"
      },
      "cp28606": "iso885916",
      "cp437": {
        "type": "_sbcs",
        "chars": "ÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜ¢£¥₧ƒáíóúñÑªº¿⌐¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ "
      },
      "ibm437": "cp437",
      "csibm437": "cp437",
      "cp737": {
        "type": "_sbcs",
        "chars": "ΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡΣΤΥΦΧΨΩαβγδεζηθικλμνξοπρσςτυφχψ░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀ωάέήϊίόύϋώΆΈΉΊΌΎΏ±≥≤ΪΫ÷≈°∙·√ⁿ²■ "
      },
      "ibm737": "cp737",
      "csibm737": "cp737",
      "cp775": {
        "type": "_sbcs",
        "chars": "ĆüéāäģåćłēŖŗīŹÄÅÉæÆōöĢ¢ŚśÖÜø£Ø×¤ĀĪóŻżź”¦©®¬½¼Ł«»░▒▓│┤ĄČĘĖ╣║╗╝ĮŠ┐└┴┬├─┼ŲŪ╚╔╩╦╠═╬Žąčęėįšųūž┘┌█▄▌▐▀ÓßŌŃõÕµńĶķĻļņĒŅ’­±“¾¶§÷„°∙·¹³²■ "
      },
      "ibm775": "cp775",
      "csibm775": "cp775",
      "cp850": {
        "type": "_sbcs",
        "chars": "ÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜø£Ø×ƒáíóúñÑªº¿®¬½¼¡«»░▒▓│┤ÁÂÀ©╣║╗╝¢¥┐└┴┬├─┼ãÃ╚╔╩╦╠═╬¤ðÐÊËÈıÍÎÏ┘┌█▄¦Ì▀ÓßÔÒõÕµþÞÚÛÙýÝ¯´­±‗¾¶§÷¸°¨·¹³²■ "
      },
      "ibm850": "cp850",
      "csibm850": "cp850",
      "cp852": {
        "type": "_sbcs",
        "chars": "ÇüéâäůćçłëŐőîŹÄĆÉĹĺôöĽľŚśÖÜŤťŁ×čáíóúĄąŽžĘę¬źČş«»░▒▓│┤ÁÂĚŞ╣║╗╝Żż┐└┴┬├─┼Ăă╚╔╩╦╠═╬¤đĐĎËďŇÍÎě┘┌█▄ŢŮ▀ÓßÔŃńňŠšŔÚŕŰýÝţ´­˝˛ˇ˘§÷¸°¨˙űŘř■ "
      },
      "ibm852": "cp852",
      "csibm852": "cp852",
      "cp855": {
        "type": "_sbcs",
        "chars": "ђЂѓЃёЁєЄѕЅіІїЇјЈљЉњЊћЋќЌўЎџЏюЮъЪаАбБцЦдДеЕфФгГ«»░▒▓│┤хХиИ╣║╗╝йЙ┐└┴┬├─┼кК╚╔╩╦╠═╬¤лЛмМнНоОп┘┌█▄Пя▀ЯрРсСтТуУжЖвВьЬ№­ыЫзЗшШэЭщЩчЧ§■ "
      },
      "ibm855": "cp855",
      "csibm855": "cp855",
      "cp856": {
        "type": "_sbcs",
        "chars": "אבגדהוזחטיךכלםמןנסעףפץצקרשת�£�×����������®¬½¼�«»░▒▓│┤���©╣║╗╝¢¥┐└┴┬├─┼��╚╔╩╦╠═╬¤���������┘┌█▄¦�▀������µ�������¯´­±‗¾¶§÷¸°¨·¹³²■ "
      },
      "ibm856": "cp856",
      "csibm856": "cp856",
      "cp857": {
        "type": "_sbcs",
        "chars": "ÇüéâäàåçêëèïîıÄÅÉæÆôöòûùİÖÜø£ØŞşáíóúñÑĞğ¿®¬½¼¡«»░▒▓│┤ÁÂÀ©╣║╗╝¢¥┐└┴┬├─┼ãÃ╚╔╩╦╠═╬¤ºªÊËÈ�ÍÎÏ┘┌█▄¦Ì▀ÓßÔÒõÕµ�×ÚÛÙìÿ¯´­±�¾¶§÷¸°¨·¹³²■ "
      },
      "ibm857": "cp857",
      "csibm857": "cp857",
      "cp858": {
        "type": "_sbcs",
        "chars": "ÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜø£Ø×ƒáíóúñÑªº¿®¬½¼¡«»░▒▓│┤ÁÂÀ©╣║╗╝¢¥┐└┴┬├─┼ãÃ╚╔╩╦╠═╬¤ðÐÊËÈ€ÍÎÏ┘┌█▄¦Ì▀ÓßÔÒõÕµþÞÚÛÙýÝ¯´­±‗¾¶§÷¸°¨·¹³²■ "
      },
      "ibm858": "cp858",
      "csibm858": "cp858",
      "cp860": {
        "type": "_sbcs",
        "chars": "ÇüéâãàÁçêÊèÍÔìÃÂÉÀÈôõòÚùÌÕÜ¢£Ù₧ÓáíóúñÑªº¿Ò¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ "
      },
      "ibm860": "cp860",
      "csibm860": "cp860",
      "cp861": {
        "type": "_sbcs",
        "chars": "ÇüéâäàåçêëèÐðÞÄÅÉæÆôöþûÝýÖÜø£Ø₧ƒáíóúÁÍÓÚ¿⌐¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ "
      },
      "ibm861": "cp861",
      "csibm861": "cp861",
      "cp862": {
        "type": "_sbcs",
        "chars": "אבגדהוזחטיךכלםמןנסעףפץצקרשת¢£¥₧ƒáíóúñÑªº¿⌐¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ "
      },
      "ibm862": "cp862",
      "csibm862": "cp862",
      "cp863": {
        "type": "_sbcs",
        "chars": "ÇüéâÂà¶çêëèïî‗À§ÉÈÊôËÏûù¤ÔÜ¢£ÙÛƒ¦´óú¨¸³¯Î⌐¬½¼¾«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ "
      },
      "ibm863": "cp863",
      "csibm863": "cp863",
      "cp864": {
        "type": "_sbcs",
        "chars": "\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000b\f\r\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\"#$٪&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~°·∙√▒─│┼┤┬├┴┐┌└┘β∞φ±½¼≈«»ﻷﻸ��ﻻﻼ� ­ﺂ£¤ﺄ��ﺎﺏﺕﺙ،ﺝﺡﺥ٠١٢٣٤٥٦٧٨٩ﻑ؛ﺱﺵﺹ؟¢ﺀﺁﺃﺅﻊﺋﺍﺑﺓﺗﺛﺟﺣﺧﺩﺫﺭﺯﺳﺷﺻﺿﻁﻅﻋﻏ¦¬÷×ﻉـﻓﻗﻛﻟﻣﻧﻫﻭﻯﻳﺽﻌﻎﻍﻡﹽّﻥﻩﻬﻰﻲﻐﻕﻵﻶﻝﻙﻱ■�"
      },
      "ibm864": "cp864",
      "csibm864": "cp864",
      "cp865": {
        "type": "_sbcs",
        "chars": "ÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜø£Ø₧ƒáíóúñÑªº¿⌐¬½¼¡«¤░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ "
      },
      "ibm865": "cp865",
      "csibm865": "cp865",
      "cp866": {
        "type": "_sbcs",
        "chars": "АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмноп░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀рстуфхцчшщъыьэюяЁёЄєЇїЎў°∙·√№¤■ "
      },
      "ibm866": "cp866",
      "csibm866": "cp866",
      "cp869": {
        "type": "_sbcs",
        "chars": "������Ά�·¬¦‘’Έ―ΉΊΪΌ��ΎΫ©Ώ²³ά£έήίϊΐόύΑΒΓΔΕΖΗ½ΘΙ«»░▒▓│┤ΚΛΜΝ╣║╗╝ΞΟ┐└┴┬├─┼ΠΡ╚╔╩╦╠═╬ΣΤΥΦΧΨΩαβγ┘┌█▄δε▀ζηθικλμνξοπρσςτ΄­±υφχ§ψ΅°¨ωϋΰώ■ "
      },
      "ibm869": "cp869",
      "csibm869": "cp869",
      "cp922": {
        "type": "_sbcs",
        "chars": " ¡¢£¤¥¦§¨©ª«¬­®‾°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏŠÑÒÓÔÕÖ×ØÙÚÛÜÝŽßàáâãäåæçèéêëìíîïšñòóôõö÷øùúûüýžÿ"
      },
      "ibm922": "cp922",
      "csibm922": "cp922",
      "cp1046": {
        "type": "_sbcs",
        "chars": "ﺈ×÷ﹱ■│─┐┌└┘ﹹﹻﹽﹿﹷﺊﻰﻳﻲﻎﻏﻐﻶﻸﻺﻼ ¤ﺋﺑﺗﺛﺟﺣ،­ﺧﺳ٠١٢٣٤٥٦٧٨٩ﺷ؛ﺻﺿﻊ؟ﻋءآأؤإئابةتثجحخدذرزسشصضطﻇعغﻌﺂﺄﺎﻓـفقكلمنهوىيًٌٍَُِّْﻗﻛﻟﻵﻷﻹﻻﻣﻧﻬﻩ�"
      },
      "ibm1046": "cp1046",
      "csibm1046": "cp1046",
      "cp1124": {
        "type": "_sbcs",
        "chars": " ЁЂҐЄЅІЇЈЉЊЋЌ­ЎЏАБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя№ёђґєѕіїјљњћќ§ўџ"
      },
      "ibm1124": "cp1124",
      "csibm1124": "cp1124",
      "cp1125": {
        "type": "_sbcs",
        "chars": "АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмноп░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀рстуфхцчшщъыьэюяЁёҐґЄєІіЇї·√№¤■ "
      },
      "ibm1125": "cp1125",
      "csibm1125": "cp1125",
      "cp1129": {
        "type": "_sbcs",
        "chars": " ¡¢£¤¥¦§œ©ª«¬­®¯°±²³Ÿµ¶·Œ¹º»¼½¾¿ÀÁÂĂÄÅÆÇÈÉÊË̀ÍÎÏĐÑ̉ÓÔƠÖ×ØÙÚÛÜỮßàáâăäåæçèéêë́íîïđṇ̃óôơö÷øùúûüư₫ÿ"
      },
      "ibm1129": "cp1129",
      "csibm1129": "cp1129",
      "cp1133": {
        "type": "_sbcs",
        "chars": " ກຂຄງຈສຊຍດຕຖທນບປຜຝພຟມຢຣລວຫອຮ���ຯະາຳິີຶືຸູຼັົຽ���ເແໂໃໄ່້໊໋໌ໍໆ�ໜໝ₭����������������໐໑໒໓໔໕໖໗໘໙��¢¬¦�"
      },
      "ibm1133": "cp1133",
      "csibm1133": "cp1133",
      "cp1161": {
        "type": "_sbcs",
        "chars": "��������������������������������่กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรฤลฦวศษสหฬอฮฯะัาำิีึืฺุู้๊๋€฿เแโใไๅๆ็่้๊๋์ํ๎๏๐๑๒๓๔๕๖๗๘๙๚๛¢¬¦ "
      },
      "ibm1161": "cp1161",
      "csibm1161": "cp1161",
      "cp1162": {
        "type": "_sbcs",
        "chars": "€…‘’“”•–— กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรฤลฦวศษสหฬอฮฯะัาำิีึืฺุู����฿เแโใไๅๆ็่้๊๋์ํ๎๏๐๑๒๓๔๕๖๗๘๙๚๛����"
      },
      "ibm1162": "cp1162",
      "csibm1162": "cp1162",
      "cp1163": {
        "type": "_sbcs",
        "chars": " ¡¢£€¥¦§œ©ª«¬­®¯°±²³Ÿµ¶·Œ¹º»¼½¾¿ÀÁÂĂÄÅÆÇÈÉÊË̀ÍÎÏĐÑ̉ÓÔƠÖ×ØÙÚÛÜỮßàáâăäåæçèéêë́íîïđṇ̃óôơö÷øùúûüư₫ÿ"
      },
      "ibm1163": "cp1163",
      "csibm1163": "cp1163",
      "maccroatian": {
        "type": "_sbcs",
        "chars": "ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®Š™´¨≠ŽØ∞±≤≥∆µ∂∑∏š∫ªºΩžø¿¡¬√ƒ≈Ć«Č… ÀÃÕŒœĐ—“”‘’÷◊�©⁄¤‹›Æ»–·‚„‰ÂćÁčÈÍÎÏÌÓÔđÒÚÛÙıˆ˜¯πË˚¸Êæˇ"
      },
      "maccyrillic": {
        "type": "_sbcs",
        "chars": "АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ†°¢£§•¶І®©™Ђђ≠Ѓѓ∞±≤≥іµ∂ЈЄєЇїЉљЊњјЅ¬√ƒ≈∆«»… ЋћЌќѕ–—“”‘’÷„ЎўЏџ№Ёёяабвгдежзийклмнопрстуфхцчшщъыьэю¤"
      },
      "macgreek": {
        "type": "_sbcs",
        "chars": "Ä¹²É³ÖÜ΅àâä΄¨çéèêë£™îï•½‰ôö¦­ùûü†ΓΔΘΛΞΠß®©ΣΪ§≠°·Α±≤≥¥ΒΕΖΗΙΚΜΦΫΨΩάΝ¬ΟΡ≈Τ«»… ΥΧΆΈœ–―“”‘’÷ΉΊΌΎέήίόΏύαβψδεφγηιξκλμνοπώρστθωςχυζϊϋΐΰ�"
      },
      "maciceland": {
        "type": "_sbcs",
        "chars": "ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûüÝ°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄¤ÐðÞþý·‚„‰ÂÊÁËÈÍÎÏÌÓÔ�ÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ"
      },
      "macroman": {
        "type": "_sbcs",
        "chars": "ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄¤‹›ﬁﬂ‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔ�ÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ"
      },
      "macromania": {
        "type": "_sbcs",
        "chars": "ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ĂŞ∞±≤≥¥µ∂∑∏π∫ªºΩăş¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄¤‹›Ţţ‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔ�ÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ"
      },
      "macthai": {
        "type": "_sbcs",
        "chars": "«»…“”�•‘’� กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรฤลฦวศษสหฬอฮฯะัาำิีึืฺุู﻿​–—฿เแโใไๅๆ็่้๊๋์ํ™๏๐๑๒๓๔๕๖๗๘๙®©����"
      },
      "macturkish": {
        "type": "_sbcs",
        "chars": "ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸĞğİıŞş‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔ�ÒÚÛÙ�ˆ˜¯˘˙˚¸˝˛ˇ"
      },
      "macukraine": {
        "type": "_sbcs",
        "chars": "АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ†°Ґ£§•¶І®©™Ђђ≠Ѓѓ∞±≤≥іµґЈЄєЇїЉљЊњјЅ¬√ƒ≈∆«»… ЋћЌќѕ–—“”‘’÷„ЎўЏџ№Ёёяабвгдежзийклмнопрстуфхцчшщъыьэю¤"
      },
      "koi8r": {
        "type": "_sbcs",
        "chars": "─│┌┐└┘├┤┬┴┼▀▄█▌▐░▒▓⌠■∙√≈≤≥ ⌡°²·÷═║╒ё╓╔╕╖╗╘╙╚╛╜╝╞╟╠╡Ё╢╣╤╥╦╧╨╩╪╫╬©юабцдефгхийклмнопярстужвьызшэщчъЮАБЦДЕФГХИЙКЛМНОПЯРСТУЖВЬЫЗШЭЩЧЪ"
      },
      "koi8u": {
        "type": "_sbcs",
        "chars": "─│┌┐└┘├┤┬┴┼▀▄█▌▐░▒▓⌠■∙√≈≤≥ ⌡°²·÷═║╒ёє╔ії╗╘╙╚╛ґ╝╞╟╠╡ЁЄ╣ІЇ╦╧╨╩╪Ґ╬©юабцдефгхийклмнопярстужвьызшэщчъЮАБЦДЕФГХИЙКЛМНОПЯРСТУЖВЬЫЗШЭЩЧЪ"
      },
      "koi8ru": {
        "type": "_sbcs",
        "chars": "─│┌┐└┘├┤┬┴┼▀▄█▌▐░▒▓⌠■∙√≈≤≥ ⌡°²·÷═║╒ёє╔ії╗╘╙╚╛ґў╞╟╠╡ЁЄ╣ІЇ╦╧╨╩╪ҐЎ©юабцдефгхийклмнопярстужвьызшэщчъЮАБЦДЕФГХИЙКЛМНОПЯРСТУЖВЬЫЗШЭЩЧЪ"
      },
      "koi8t": {
        "type": "_sbcs",
        "chars": "қғ‚Ғ„…†‡�‰ҳ‹ҲҷҶ�Қ‘’“”•–—�™�›�����ӯӮё¤ӣ¦§���«¬­®�°±²Ё�Ӣ¶·�№�»���©юабцдефгхийклмнопярстужвьызшэщчъЮАБЦДЕФГХИЙКЛМНОПЯРСТУЖВЬЫЗШЭЩЧЪ"
      },
      "armscii8": {
        "type": "_sbcs",
        "chars": " �և։)(»«—.՝,-֊…՜՛՞ԱաԲբԳգԴդԵեԶզԷէԸըԹթԺժԻիԼլԽխԾծԿկՀհՁձՂղՃճՄմՅյՆնՇշՈոՉչՊպՋջՌռՍսՎվՏտՐրՑցՒւՓփՔքՕօՖֆ՚�"
      },
      "rk1048": {
        "type": "_sbcs",
        "chars": "ЂЃ‚ѓ„…†‡€‰Љ‹ЊҚҺЏђ‘’“”•–—�™љ›њқһџ ҰұӘ¤Ө¦§Ё©Ғ«¬­®Ү°±Ііөµ¶·ё№ғ»әҢңүАБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя"
      },
      "tcvn": {
        "type": "_sbcs",
        "chars": "\u0000ÚỤ\u0003ỪỬỮ\u0007\b\t\n\u000b\f\r\u000e\u000f\u0010ỨỰỲỶỸÝỴ\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~ÀẢÃÁẠẶẬÈẺẼÉẸỆÌỈĨÍỊÒỎÕÓỌỘỜỞỠỚỢÙỦŨ ĂÂÊÔƠƯĐăâêôơưđẶ̀̀̉̃́àảãáạẲằẳẵắẴẮẦẨẪẤỀặầẩẫấậèỂẻẽéẹềểễếệìỉỄẾỒĩíịòỔỏõóọồổỗốộờởỡớợùỖủũúụừửữứựỳỷỹýỵỐ"
      },
      "georgianacademy": {
        "type": "_sbcs",
        "chars": "‚ƒ„…†‡ˆ‰Š‹Œ‘’“”•–—˜™š›œŸ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿აბგდევზთიკლმნოპჟრსტუფქღყშჩცძწჭხჯჰჱჲჳჴჵჶçèéêëìíîïðñòóôõö÷øùúûüýþÿ"
      },
      "georgianps": {
        "type": "_sbcs",
        "chars": "‚ƒ„…†‡ˆ‰Š‹Œ‘’“”•–—˜™š›œŸ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿აბგდევზჱთიკლმნჲოპჟრსტჳუფქღყშჩცძწჭხჴჯჰჵæçèéêëìíîïðñòóôõö÷øùúûüýþÿ"
      },
      "pt154": {
        "type": "_sbcs",
        "chars": "ҖҒӮғ„…ҶҮҲүҠӢҢҚҺҸҗ‘’“”•–—ҳҷҡӣңқһҹ ЎўЈӨҘҰ§Ё©Ә«¬ӯ®Ҝ°ұІіҙө¶·ё№ә»јҪҫҝАБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя"
      },
      "viscii": {
        "type": "_sbcs",
        "chars": "\u0000\u0001Ẳ\u0003\u0004ẴẪ\u0007\b\t\n\u000b\f\r\u000e\u000f\u0010\u0011\u0012\u0013Ỷ\u0015\u0016\u0017\u0018Ỹ\u001a\u001b\u001c\u001dỴ\u001f !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~ẠẮẰẶẤẦẨẬẼẸẾỀỂỄỆỐỒỔỖỘỢỚỜỞỊỎỌỈỦŨỤỲÕắằặấầẩậẽẹếềểễệốồổỗỠƠộờởịỰỨỪỬơớƯÀÁÂÃẢĂẳẵÈÉÊẺÌÍĨỳĐứÒÓÔạỷừửÙÚỹỵÝỡưàáâãảăữẫèéêẻìíĩỉđựòóôõỏọụùúũủýợỮ"
      },
      "iso646cn": {
        "type": "_sbcs",
        "chars": "\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000b\f\r\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\"#¥%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}‾��������������������������������������������������������������������������������������������������������������������������������"
      },
      "iso646jp": {
        "type": "_sbcs",
        "chars": "\u0000\u0001\u0002\u0003\u0004\u0005\u0006\u0007\b\t\n\u000b\f\r\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[¥]^_`abcdefghijklmnopqrstuvwxyz{|}‾��������������������������������������������������������������������������������������������������������������������������������"
      },
      "hproman8": {
        "type": "_sbcs",
        "chars": " ÀÂÈÊËÎÏ´ˋˆ¨˜ÙÛ₤¯Ýý°ÇçÑñ¡¿¤£¥§ƒ¢âêôûáéóúàèòùäëöüÅîØÆåíøæÄìÖÜÉïßÔÁÃãÐðÍÌÓÒÕõŠšÚŸÿÞþ·µ¶¾—¼½ªº«■»±�"
      },
      "macintosh": {
        "type": "_sbcs",
        "chars": "ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄¤‹›ﬁﬂ‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔ�ÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ"
      },
      "ascii": {
        "type": "_sbcs",
        "chars": "��������������������������������������������������������������������������������������������������������������������������������"
      },
      "tis620": {
        "type": "_sbcs",
        "chars": "���������������������������������กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรฤลฦวศษสหฬอฮฯะัาำิีึืฺุู����฿เแโใไๅๆ็่้๊๋์ํ๎๏๐๑๒๓๔๕๖๗๘๙๚๛����"
      }
    };

    var dbcsCodec = {};

    var Buffer$3 = safer_1.Buffer;

    // Multibyte codec. In this scheme, a character is represented by 1 or more bytes.
    // Our codec supports UTF-16 surrogates, extensions for GB18030 and unicode sequences.
    // To save memory and loading time, we read table files only when requested.

    dbcsCodec._dbcs = DBCSCodec;

    var UNASSIGNED = -1,
        GB18030_CODE = -2,
        SEQ_START  = -10,
        NODE_START = -1000,
        UNASSIGNED_NODE = new Array(0x100),
        DEF_CHAR = -1;

    for (var i = 0; i < 0x100; i++)
        UNASSIGNED_NODE[i] = UNASSIGNED;


    // Class DBCSCodec reads and initializes mapping tables.
    function DBCSCodec(codecOptions, iconv) {
        this.encodingName = codecOptions.encodingName;
        if (!codecOptions)
            throw new Error("DBCS codec is called without the data.")
        if (!codecOptions.table)
            throw new Error("Encoding '" + this.encodingName + "' has no data.");

        // Load tables.
        var mappingTable = codecOptions.table();


        // Decode tables: MBCS -> Unicode.

        // decodeTables is a trie, encoded as an array of arrays of integers. Internal arrays are trie nodes and all have len = 256.
        // Trie root is decodeTables[0].
        // Values: >=  0 -> unicode character code. can be > 0xFFFF
        //         == UNASSIGNED -> unknown/unassigned sequence.
        //         == GB18030_CODE -> this is the end of a GB18030 4-byte sequence.
        //         <= NODE_START -> index of the next node in our trie to process next byte.
        //         <= SEQ_START  -> index of the start of a character code sequence, in decodeTableSeq.
        this.decodeTables = [];
        this.decodeTables[0] = UNASSIGNED_NODE.slice(0); // Create root node.

        // Sometimes a MBCS char corresponds to a sequence of unicode chars. We store them as arrays of integers here. 
        this.decodeTableSeq = [];

        // Actual mapping tables consist of chunks. Use them to fill up decode tables.
        for (var i = 0; i < mappingTable.length; i++)
            this._addDecodeChunk(mappingTable[i]);

        this.defaultCharUnicode = iconv.defaultCharUnicode;

        
        // Encode tables: Unicode -> DBCS.

        // `encodeTable` is array mapping from unicode char to encoded char. All its values are integers for performance.
        // Because it can be sparse, it is represented as array of buckets by 256 chars each. Bucket can be null.
        // Values: >=  0 -> it is a normal char. Write the value (if <=256 then 1 byte, if <=65536 then 2 bytes, etc.).
        //         == UNASSIGNED -> no conversion found. Output a default char.
        //         <= SEQ_START  -> it's an index in encodeTableSeq, see below. The character starts a sequence.
        this.encodeTable = [];
        
        // `encodeTableSeq` is used when a sequence of unicode characters is encoded as a single code. We use a tree of
        // objects where keys correspond to characters in sequence and leafs are the encoded dbcs values. A special DEF_CHAR key
        // means end of sequence (needed when one sequence is a strict subsequence of another).
        // Objects are kept separately from encodeTable to increase performance.
        this.encodeTableSeq = [];

        // Some chars can be decoded, but need not be encoded.
        var skipEncodeChars = {};
        if (codecOptions.encodeSkipVals)
            for (var i = 0; i < codecOptions.encodeSkipVals.length; i++) {
                var val = codecOptions.encodeSkipVals[i];
                if (typeof val === 'number')
                    skipEncodeChars[val] = true;
                else
                    for (var j = val.from; j <= val.to; j++)
                        skipEncodeChars[j] = true;
            }
            
        // Use decode trie to recursively fill out encode tables.
        this._fillEncodeTable(0, 0, skipEncodeChars);

        // Add more encoding pairs when needed.
        if (codecOptions.encodeAdd) {
            for (var uChar in codecOptions.encodeAdd)
                if (Object.prototype.hasOwnProperty.call(codecOptions.encodeAdd, uChar))
                    this._setEncodeChar(uChar.charCodeAt(0), codecOptions.encodeAdd[uChar]);
        }

        this.defCharSB  = this.encodeTable[0][iconv.defaultCharSingleByte.charCodeAt(0)];
        if (this.defCharSB === UNASSIGNED) this.defCharSB = this.encodeTable[0]['?'];
        if (this.defCharSB === UNASSIGNED) this.defCharSB = "?".charCodeAt(0);


        // Load & create GB18030 tables when needed.
        if (typeof codecOptions.gb18030 === 'function') {
            this.gb18030 = codecOptions.gb18030(); // Load GB18030 ranges.

            // Add GB18030 decode tables.
            var thirdByteNodeIdx = this.decodeTables.length;
            var thirdByteNode = this.decodeTables[thirdByteNodeIdx] = UNASSIGNED_NODE.slice(0);

            var fourthByteNodeIdx = this.decodeTables.length;
            var fourthByteNode = this.decodeTables[fourthByteNodeIdx] = UNASSIGNED_NODE.slice(0);

            for (var i = 0x81; i <= 0xFE; i++) {
                var secondByteNodeIdx = NODE_START - this.decodeTables[0][i];
                var secondByteNode = this.decodeTables[secondByteNodeIdx];
                for (var j = 0x30; j <= 0x39; j++)
                    secondByteNode[j] = NODE_START - thirdByteNodeIdx;
            }
            for (var i = 0x81; i <= 0xFE; i++)
                thirdByteNode[i] = NODE_START - fourthByteNodeIdx;
            for (var i = 0x30; i <= 0x39; i++)
                fourthByteNode[i] = GB18030_CODE;
        }        
    }

    DBCSCodec.prototype.encoder = DBCSEncoder;
    DBCSCodec.prototype.decoder = DBCSDecoder;

    // Decoder helpers
    DBCSCodec.prototype._getDecodeTrieNode = function(addr) {
        var bytes = [];
        for (; addr > 0; addr >>= 8)
            bytes.push(addr & 0xFF);
        if (bytes.length == 0)
            bytes.push(0);

        var node = this.decodeTables[0];
        for (var i = bytes.length-1; i > 0; i--) { // Traverse nodes deeper into the trie.
            var val = node[bytes[i]];

            if (val == UNASSIGNED) { // Create new node.
                node[bytes[i]] = NODE_START - this.decodeTables.length;
                this.decodeTables.push(node = UNASSIGNED_NODE.slice(0));
            }
            else if (val <= NODE_START) { // Existing node.
                node = this.decodeTables[NODE_START - val];
            }
            else
                throw new Error("Overwrite byte in " + this.encodingName + ", addr: " + addr.toString(16));
        }
        return node;
    };


    DBCSCodec.prototype._addDecodeChunk = function(chunk) {
        // First element of chunk is the hex mbcs code where we start.
        var curAddr = parseInt(chunk[0], 16);

        // Choose the decoding node where we'll write our chars.
        var writeTable = this._getDecodeTrieNode(curAddr);
        curAddr = curAddr & 0xFF;

        // Write all other elements of the chunk to the table.
        for (var k = 1; k < chunk.length; k++) {
            var part = chunk[k];
            if (typeof part === "string") { // String, write as-is.
                for (var l = 0; l < part.length;) {
                    var code = part.charCodeAt(l++);
                    if (0xD800 <= code && code < 0xDC00) { // Decode surrogate
                        var codeTrail = part.charCodeAt(l++);
                        if (0xDC00 <= codeTrail && codeTrail < 0xE000)
                            writeTable[curAddr++] = 0x10000 + (code - 0xD800) * 0x400 + (codeTrail - 0xDC00);
                        else
                            throw new Error("Incorrect surrogate pair in "  + this.encodingName + " at chunk " + chunk[0]);
                    }
                    else if (0x0FF0 < code && code <= 0x0FFF) { // Character sequence (our own encoding used)
                        var len = 0xFFF - code + 2;
                        var seq = [];
                        for (var m = 0; m < len; m++)
                            seq.push(part.charCodeAt(l++)); // Simple variation: don't support surrogates or subsequences in seq.

                        writeTable[curAddr++] = SEQ_START - this.decodeTableSeq.length;
                        this.decodeTableSeq.push(seq);
                    }
                    else
                        writeTable[curAddr++] = code; // Basic char
                }
            } 
            else if (typeof part === "number") { // Integer, meaning increasing sequence starting with prev character.
                var charCode = writeTable[curAddr - 1] + 1;
                for (var l = 0; l < part; l++)
                    writeTable[curAddr++] = charCode++;
            }
            else
                throw new Error("Incorrect type '" + typeof part + "' given in "  + this.encodingName + " at chunk " + chunk[0]);
        }
        if (curAddr > 0xFF)
            throw new Error("Incorrect chunk in "  + this.encodingName + " at addr " + chunk[0] + ": too long" + curAddr);
    };

    // Encoder helpers
    DBCSCodec.prototype._getEncodeBucket = function(uCode) {
        var high = uCode >> 8; // This could be > 0xFF because of astral characters.
        if (this.encodeTable[high] === undefined)
            this.encodeTable[high] = UNASSIGNED_NODE.slice(0); // Create bucket on demand.
        return this.encodeTable[high];
    };

    DBCSCodec.prototype._setEncodeChar = function(uCode, dbcsCode) {
        var bucket = this._getEncodeBucket(uCode);
        var low = uCode & 0xFF;
        if (bucket[low] <= SEQ_START)
            this.encodeTableSeq[SEQ_START-bucket[low]][DEF_CHAR] = dbcsCode; // There's already a sequence, set a single-char subsequence of it.
        else if (bucket[low] == UNASSIGNED)
            bucket[low] = dbcsCode;
    };

    DBCSCodec.prototype._setEncodeSequence = function(seq, dbcsCode) {
        
        // Get the root of character tree according to first character of the sequence.
        var uCode = seq[0];
        var bucket = this._getEncodeBucket(uCode);
        var low = uCode & 0xFF;

        var node;
        if (bucket[low] <= SEQ_START) {
            // There's already a sequence with  - use it.
            node = this.encodeTableSeq[SEQ_START-bucket[low]];
        }
        else {
            // There was no sequence object - allocate a new one.
            node = {};
            if (bucket[low] !== UNASSIGNED) node[DEF_CHAR] = bucket[low]; // If a char was set before - make it a single-char subsequence.
            bucket[low] = SEQ_START - this.encodeTableSeq.length;
            this.encodeTableSeq.push(node);
        }

        // Traverse the character tree, allocating new nodes as needed.
        for (var j = 1; j < seq.length-1; j++) {
            var oldVal = node[uCode];
            if (typeof oldVal === 'object')
                node = oldVal;
            else {
                node = node[uCode] = {};
                if (oldVal !== undefined)
                    node[DEF_CHAR] = oldVal;
            }
        }

        // Set the leaf to given dbcsCode.
        uCode = seq[seq.length-1];
        node[uCode] = dbcsCode;
    };

    DBCSCodec.prototype._fillEncodeTable = function(nodeIdx, prefix, skipEncodeChars) {
        var node = this.decodeTables[nodeIdx];
        for (var i = 0; i < 0x100; i++) {
            var uCode = node[i];
            var mbCode = prefix + i;
            if (skipEncodeChars[mbCode])
                continue;

            if (uCode >= 0)
                this._setEncodeChar(uCode, mbCode);
            else if (uCode <= NODE_START)
                this._fillEncodeTable(NODE_START - uCode, mbCode << 8, skipEncodeChars);
            else if (uCode <= SEQ_START)
                this._setEncodeSequence(this.decodeTableSeq[SEQ_START - uCode], mbCode);
        }
    };



    // == Encoder ==================================================================

    function DBCSEncoder(options, codec) {
        // Encoder state
        this.leadSurrogate = -1;
        this.seqObj = undefined;
        
        // Static data
        this.encodeTable = codec.encodeTable;
        this.encodeTableSeq = codec.encodeTableSeq;
        this.defaultCharSingleByte = codec.defCharSB;
        this.gb18030 = codec.gb18030;
    }

    DBCSEncoder.prototype.write = function(str) {
        var newBuf = Buffer$3.alloc(str.length * (this.gb18030 ? 4 : 3)),
            leadSurrogate = this.leadSurrogate,
            seqObj = this.seqObj, nextChar = -1,
            i = 0, j = 0;

        while (true) {
            // 0. Get next character.
            if (nextChar === -1) {
                if (i == str.length) break;
                var uCode = str.charCodeAt(i++);
            }
            else {
                var uCode = nextChar;
                nextChar = -1;    
            }

            // 1. Handle surrogates.
            if (0xD800 <= uCode && uCode < 0xE000) { // Char is one of surrogates.
                if (uCode < 0xDC00) { // We've got lead surrogate.
                    if (leadSurrogate === -1) {
                        leadSurrogate = uCode;
                        continue;
                    } else {
                        leadSurrogate = uCode;
                        // Double lead surrogate found.
                        uCode = UNASSIGNED;
                    }
                } else { // We've got trail surrogate.
                    if (leadSurrogate !== -1) {
                        uCode = 0x10000 + (leadSurrogate - 0xD800) * 0x400 + (uCode - 0xDC00);
                        leadSurrogate = -1;
                    } else {
                        // Incomplete surrogate pair - only trail surrogate found.
                        uCode = UNASSIGNED;
                    }
                    
                }
            }
            else if (leadSurrogate !== -1) {
                // Incomplete surrogate pair - only lead surrogate found.
                nextChar = uCode; uCode = UNASSIGNED; // Write an error, then current char.
                leadSurrogate = -1;
            }

            // 2. Convert uCode character.
            var dbcsCode = UNASSIGNED;
            if (seqObj !== undefined && uCode != UNASSIGNED) { // We are in the middle of the sequence
                var resCode = seqObj[uCode];
                if (typeof resCode === 'object') { // Sequence continues.
                    seqObj = resCode;
                    continue;

                } else if (typeof resCode == 'number') { // Sequence finished. Write it.
                    dbcsCode = resCode;

                } else if (resCode == undefined) { // Current character is not part of the sequence.

                    // Try default character for this sequence
                    resCode = seqObj[DEF_CHAR];
                    if (resCode !== undefined) {
                        dbcsCode = resCode; // Found. Write it.
                        nextChar = uCode; // Current character will be written too in the next iteration.

                    }
                }
                seqObj = undefined;
            }
            else if (uCode >= 0) {  // Regular character
                var subtable = this.encodeTable[uCode >> 8];
                if (subtable !== undefined)
                    dbcsCode = subtable[uCode & 0xFF];
                
                if (dbcsCode <= SEQ_START) { // Sequence start
                    seqObj = this.encodeTableSeq[SEQ_START-dbcsCode];
                    continue;
                }

                if (dbcsCode == UNASSIGNED && this.gb18030) {
                    // Use GB18030 algorithm to find character(s) to write.
                    var idx = findIdx(this.gb18030.uChars, uCode);
                    if (idx != -1) {
                        var dbcsCode = this.gb18030.gbChars[idx] + (uCode - this.gb18030.uChars[idx]);
                        newBuf[j++] = 0x81 + Math.floor(dbcsCode / 12600); dbcsCode = dbcsCode % 12600;
                        newBuf[j++] = 0x30 + Math.floor(dbcsCode / 1260); dbcsCode = dbcsCode % 1260;
                        newBuf[j++] = 0x81 + Math.floor(dbcsCode / 10); dbcsCode = dbcsCode % 10;
                        newBuf[j++] = 0x30 + dbcsCode;
                        continue;
                    }
                }
            }

            // 3. Write dbcsCode character.
            if (dbcsCode === UNASSIGNED)
                dbcsCode = this.defaultCharSingleByte;
            
            if (dbcsCode < 0x100) {
                newBuf[j++] = dbcsCode;
            }
            else if (dbcsCode < 0x10000) {
                newBuf[j++] = dbcsCode >> 8;   // high byte
                newBuf[j++] = dbcsCode & 0xFF; // low byte
            }
            else {
                newBuf[j++] = dbcsCode >> 16;
                newBuf[j++] = (dbcsCode >> 8) & 0xFF;
                newBuf[j++] = dbcsCode & 0xFF;
            }
        }

        this.seqObj = seqObj;
        this.leadSurrogate = leadSurrogate;
        return newBuf.slice(0, j);
    };

    DBCSEncoder.prototype.end = function() {
        if (this.leadSurrogate === -1 && this.seqObj === undefined)
            return; // All clean. Most often case.

        var newBuf = Buffer$3.alloc(10), j = 0;

        if (this.seqObj) { // We're in the sequence.
            var dbcsCode = this.seqObj[DEF_CHAR];
            if (dbcsCode !== undefined) { // Write beginning of the sequence.
                if (dbcsCode < 0x100) {
                    newBuf[j++] = dbcsCode;
                }
                else {
                    newBuf[j++] = dbcsCode >> 8;   // high byte
                    newBuf[j++] = dbcsCode & 0xFF; // low byte
                }
            }
            this.seqObj = undefined;
        }

        if (this.leadSurrogate !== -1) {
            // Incomplete surrogate pair - only lead surrogate found.
            newBuf[j++] = this.defaultCharSingleByte;
            this.leadSurrogate = -1;
        }
        
        return newBuf.slice(0, j);
    };

    // Export for testing
    DBCSEncoder.prototype.findIdx = findIdx;


    // == Decoder ==================================================================

    function DBCSDecoder(options, codec) {
        // Decoder state
        this.nodeIdx = 0;
        this.prevBuf = Buffer$3.alloc(0);

        // Static data
        this.decodeTables = codec.decodeTables;
        this.decodeTableSeq = codec.decodeTableSeq;
        this.defaultCharUnicode = codec.defaultCharUnicode;
        this.gb18030 = codec.gb18030;
    }

    DBCSDecoder.prototype.write = function(buf) {
        var newBuf = Buffer$3.alloc(buf.length*2),
            nodeIdx = this.nodeIdx, 
            prevBuf = this.prevBuf, prevBufOffset = this.prevBuf.length,
            seqStart = -this.prevBuf.length, // idx of the start of current parsed sequence.
            uCode;

        if (prevBufOffset > 0) // Make prev buf overlap a little to make it easier to slice later.
            prevBuf = Buffer$3.concat([prevBuf, buf.slice(0, 10)]);
        
        for (var i = 0, j = 0; i < buf.length; i++) {
            var curByte = (i >= 0) ? buf[i] : prevBuf[i + prevBufOffset];

            // Lookup in current trie node.
            var uCode = this.decodeTables[nodeIdx][curByte];

            if (uCode >= 0) ;
            else if (uCode === UNASSIGNED) { // Unknown char.
                // TODO: Callback with seq.
                //var curSeq = (seqStart >= 0) ? buf.slice(seqStart, i+1) : prevBuf.slice(seqStart + prevBufOffset, i+1 + prevBufOffset);
                i = seqStart; // Try to parse again, after skipping first byte of the sequence ('i' will be incremented by 'for' cycle).
                uCode = this.defaultCharUnicode.charCodeAt(0);
            }
            else if (uCode === GB18030_CODE) {
                var curSeq = (seqStart >= 0) ? buf.slice(seqStart, i+1) : prevBuf.slice(seqStart + prevBufOffset, i+1 + prevBufOffset);
                var ptr = (curSeq[0]-0x81)*12600 + (curSeq[1]-0x30)*1260 + (curSeq[2]-0x81)*10 + (curSeq[3]-0x30);
                var idx = findIdx(this.gb18030.gbChars, ptr);
                uCode = this.gb18030.uChars[idx] + ptr - this.gb18030.gbChars[idx];
            }
            else if (uCode <= NODE_START) { // Go to next trie node.
                nodeIdx = NODE_START - uCode;
                continue;
            }
            else if (uCode <= SEQ_START) { // Output a sequence of chars.
                var seq = this.decodeTableSeq[SEQ_START - uCode];
                for (var k = 0; k < seq.length - 1; k++) {
                    uCode = seq[k];
                    newBuf[j++] = uCode & 0xFF;
                    newBuf[j++] = uCode >> 8;
                }
                uCode = seq[seq.length-1];
            }
            else
                throw new Error("iconv-lite internal error: invalid decoding table value " + uCode + " at " + nodeIdx + "/" + curByte);

            // Write the character to buffer, handling higher planes using surrogate pair.
            if (uCode > 0xFFFF) { 
                uCode -= 0x10000;
                var uCodeLead = 0xD800 + Math.floor(uCode / 0x400);
                newBuf[j++] = uCodeLead & 0xFF;
                newBuf[j++] = uCodeLead >> 8;

                uCode = 0xDC00 + uCode % 0x400;
            }
            newBuf[j++] = uCode & 0xFF;
            newBuf[j++] = uCode >> 8;

            // Reset trie node.
            nodeIdx = 0; seqStart = i+1;
        }

        this.nodeIdx = nodeIdx;
        this.prevBuf = (seqStart >= 0) ? buf.slice(seqStart) : prevBuf.slice(seqStart + prevBufOffset);
        return newBuf.slice(0, j).toString('ucs2');
    };

    DBCSDecoder.prototype.end = function() {
        var ret = '';

        // Try to parse all remaining chars.
        while (this.prevBuf.length > 0) {
            // Skip 1 character in the buffer.
            ret += this.defaultCharUnicode;
            var buf = this.prevBuf.slice(1);

            // Parse remaining as usual.
            this.prevBuf = Buffer$3.alloc(0);
            this.nodeIdx = 0;
            if (buf.length > 0)
                ret += this.write(buf);
        }

        this.nodeIdx = 0;
        return ret;
    };

    // Binary search for GB18030. Returns largest i such that table[i] <= val.
    function findIdx(table, val) {
        if (table[0] > val)
            return -1;

        var l = 0, r = table.length;
        while (l < r-1) { // always table[l] <= val < table[r]
            var mid = l + Math.floor((r-l+1)/2);
            if (table[mid] <= val)
                l = mid;
            else
                r = mid;
        }
        return l;
    }

    var require$$0 = [
    	[
    		"0",
    		"\u0000",
    		128
    	],
    	[
    		"a1",
    		"｡",
    		62
    	],
    	[
    		"8140",
    		"　、。，．・：；？！゛゜´｀¨＾￣＿ヽヾゝゞ〃仝々〆〇ー―‐／＼～∥｜…‥‘’“”（）〔〕［］｛｝〈",
    		9,
    		"＋－±×"
    	],
    	[
    		"8180",
    		"÷＝≠＜＞≦≧∞∴♂♀°′″℃￥＄￠￡％＃＆＊＠§☆★○●◎◇◆□■△▲▽▼※〒→←↑↓〓"
    	],
    	[
    		"81b8",
    		"∈∋⊆⊇⊂⊃∪∩"
    	],
    	[
    		"81c8",
    		"∧∨￢⇒⇔∀∃"
    	],
    	[
    		"81da",
    		"∠⊥⌒∂∇≡≒≪≫√∽∝∵∫∬"
    	],
    	[
    		"81f0",
    		"Å‰♯♭♪†‡¶"
    	],
    	[
    		"81fc",
    		"◯"
    	],
    	[
    		"824f",
    		"０",
    		9
    	],
    	[
    		"8260",
    		"Ａ",
    		25
    	],
    	[
    		"8281",
    		"ａ",
    		25
    	],
    	[
    		"829f",
    		"ぁ",
    		82
    	],
    	[
    		"8340",
    		"ァ",
    		62
    	],
    	[
    		"8380",
    		"ム",
    		22
    	],
    	[
    		"839f",
    		"Α",
    		16,
    		"Σ",
    		6
    	],
    	[
    		"83bf",
    		"α",
    		16,
    		"σ",
    		6
    	],
    	[
    		"8440",
    		"А",
    		5,
    		"ЁЖ",
    		25
    	],
    	[
    		"8470",
    		"а",
    		5,
    		"ёж",
    		7
    	],
    	[
    		"8480",
    		"о",
    		17
    	],
    	[
    		"849f",
    		"─│┌┐┘└├┬┤┴┼━┃┏┓┛┗┣┳┫┻╋┠┯┨┷┿┝┰┥┸╂"
    	],
    	[
    		"8740",
    		"①",
    		19,
    		"Ⅰ",
    		9
    	],
    	[
    		"875f",
    		"㍉㌔㌢㍍㌘㌧㌃㌶㍑㍗㌍㌦㌣㌫㍊㌻㎜㎝㎞㎎㎏㏄㎡"
    	],
    	[
    		"877e",
    		"㍻"
    	],
    	[
    		"8780",
    		"〝〟№㏍℡㊤",
    		4,
    		"㈱㈲㈹㍾㍽㍼≒≡∫∮∑√⊥∠∟⊿∵∩∪"
    	],
    	[
    		"889f",
    		"亜唖娃阿哀愛挨姶逢葵茜穐悪握渥旭葦芦鯵梓圧斡扱宛姐虻飴絢綾鮎或粟袷安庵按暗案闇鞍杏以伊位依偉囲夷委威尉惟意慰易椅為畏異移維緯胃萎衣謂違遺医井亥域育郁磯一壱溢逸稲茨芋鰯允印咽員因姻引飲淫胤蔭"
    	],
    	[
    		"8940",
    		"院陰隠韻吋右宇烏羽迂雨卯鵜窺丑碓臼渦嘘唄欝蔚鰻姥厩浦瓜閏噂云運雲荏餌叡営嬰影映曳栄永泳洩瑛盈穎頴英衛詠鋭液疫益駅悦謁越閲榎厭円"
    	],
    	[
    		"8980",
    		"園堰奄宴延怨掩援沿演炎焔煙燕猿縁艶苑薗遠鉛鴛塩於汚甥凹央奥往応押旺横欧殴王翁襖鴬鴎黄岡沖荻億屋憶臆桶牡乙俺卸恩温穏音下化仮何伽価佳加可嘉夏嫁家寡科暇果架歌河火珂禍禾稼箇花苛茄荷華菓蝦課嘩貨迦過霞蚊俄峨我牙画臥芽蛾賀雅餓駕介会解回塊壊廻快怪悔恢懐戒拐改"
    	],
    	[
    		"8a40",
    		"魁晦械海灰界皆絵芥蟹開階貝凱劾外咳害崖慨概涯碍蓋街該鎧骸浬馨蛙垣柿蛎鈎劃嚇各廓拡撹格核殻獲確穫覚角赫較郭閣隔革学岳楽額顎掛笠樫"
    	],
    	[
    		"8a80",
    		"橿梶鰍潟割喝恰括活渇滑葛褐轄且鰹叶椛樺鞄株兜竃蒲釜鎌噛鴨栢茅萱粥刈苅瓦乾侃冠寒刊勘勧巻喚堪姦完官寛干幹患感慣憾換敢柑桓棺款歓汗漢澗潅環甘監看竿管簡緩缶翰肝艦莞観諌貫還鑑間閑関陥韓館舘丸含岸巌玩癌眼岩翫贋雁頑顔願企伎危喜器基奇嬉寄岐希幾忌揮机旗既期棋棄"
    	],
    	[
    		"8b40",
    		"機帰毅気汽畿祈季稀紀徽規記貴起軌輝飢騎鬼亀偽儀妓宜戯技擬欺犠疑祇義蟻誼議掬菊鞠吉吃喫桔橘詰砧杵黍却客脚虐逆丘久仇休及吸宮弓急救"
    	],
    	[
    		"8b80",
    		"朽求汲泣灸球究窮笈級糾給旧牛去居巨拒拠挙渠虚許距鋸漁禦魚亨享京供侠僑兇競共凶協匡卿叫喬境峡強彊怯恐恭挟教橋況狂狭矯胸脅興蕎郷鏡響饗驚仰凝尭暁業局曲極玉桐粁僅勤均巾錦斤欣欽琴禁禽筋緊芹菌衿襟謹近金吟銀九倶句区狗玖矩苦躯駆駈駒具愚虞喰空偶寓遇隅串櫛釧屑屈"
    	],
    	[
    		"8c40",
    		"掘窟沓靴轡窪熊隈粂栗繰桑鍬勲君薫訓群軍郡卦袈祁係傾刑兄啓圭珪型契形径恵慶慧憩掲携敬景桂渓畦稽系経継繋罫茎荊蛍計詣警軽頚鶏芸迎鯨"
    	],
    	[
    		"8c80",
    		"劇戟撃激隙桁傑欠決潔穴結血訣月件倹倦健兼券剣喧圏堅嫌建憲懸拳捲検権牽犬献研硯絹県肩見謙賢軒遣鍵険顕験鹸元原厳幻弦減源玄現絃舷言諺限乎個古呼固姑孤己庫弧戸故枯湖狐糊袴股胡菰虎誇跨鈷雇顧鼓五互伍午呉吾娯後御悟梧檎瑚碁語誤護醐乞鯉交佼侯候倖光公功効勾厚口向"
    	],
    	[
    		"8d40",
    		"后喉坑垢好孔孝宏工巧巷幸広庚康弘恒慌抗拘控攻昂晃更杭校梗構江洪浩港溝甲皇硬稿糠紅紘絞綱耕考肯肱腔膏航荒行衡講貢購郊酵鉱砿鋼閤降"
    	],
    	[
    		"8d80",
    		"項香高鴻剛劫号合壕拷濠豪轟麹克刻告国穀酷鵠黒獄漉腰甑忽惚骨狛込此頃今困坤墾婚恨懇昏昆根梱混痕紺艮魂些佐叉唆嵯左差査沙瑳砂詐鎖裟坐座挫債催再最哉塞妻宰彩才採栽歳済災采犀砕砦祭斎細菜裁載際剤在材罪財冴坂阪堺榊肴咲崎埼碕鷺作削咋搾昨朔柵窄策索錯桜鮭笹匙冊刷"
    	],
    	[
    		"8e40",
    		"察拶撮擦札殺薩雑皐鯖捌錆鮫皿晒三傘参山惨撒散桟燦珊産算纂蚕讃賛酸餐斬暫残仕仔伺使刺司史嗣四士始姉姿子屍市師志思指支孜斯施旨枝止"
    	],
    	[
    		"8e80",
    		"死氏獅祉私糸紙紫肢脂至視詞詩試誌諮資賜雌飼歯事似侍児字寺慈持時次滋治爾璽痔磁示而耳自蒔辞汐鹿式識鴫竺軸宍雫七叱執失嫉室悉湿漆疾質実蔀篠偲柴芝屡蕊縞舎写射捨赦斜煮社紗者謝車遮蛇邪借勺尺杓灼爵酌釈錫若寂弱惹主取守手朱殊狩珠種腫趣酒首儒受呪寿授樹綬需囚収周"
    	],
    	[
    		"8f40",
    		"宗就州修愁拾洲秀秋終繍習臭舟蒐衆襲讐蹴輯週酋酬集醜什住充十従戎柔汁渋獣縦重銃叔夙宿淑祝縮粛塾熟出術述俊峻春瞬竣舜駿准循旬楯殉淳"
    	],
    	[
    		"8f80",
    		"準潤盾純巡遵醇順処初所暑曙渚庶緒署書薯藷諸助叙女序徐恕鋤除傷償勝匠升召哨商唱嘗奨妾娼宵将小少尚庄床廠彰承抄招掌捷昇昌昭晶松梢樟樵沼消渉湘焼焦照症省硝礁祥称章笑粧紹肖菖蒋蕉衝裳訟証詔詳象賞醤鉦鍾鐘障鞘上丈丞乗冗剰城場壌嬢常情擾条杖浄状畳穣蒸譲醸錠嘱埴飾"
    	],
    	[
    		"9040",
    		"拭植殖燭織職色触食蝕辱尻伸信侵唇娠寝審心慎振新晋森榛浸深申疹真神秦紳臣芯薪親診身辛進針震人仁刃塵壬尋甚尽腎訊迅陣靭笥諏須酢図厨"
    	],
    	[
    		"9080",
    		"逗吹垂帥推水炊睡粋翠衰遂酔錐錘随瑞髄崇嵩数枢趨雛据杉椙菅頗雀裾澄摺寸世瀬畝是凄制勢姓征性成政整星晴棲栖正清牲生盛精聖声製西誠誓請逝醒青静斉税脆隻席惜戚斥昔析石積籍績脊責赤跡蹟碩切拙接摂折設窃節説雪絶舌蝉仙先千占宣専尖川戦扇撰栓栴泉浅洗染潜煎煽旋穿箭線"
    	],
    	[
    		"9140",
    		"繊羨腺舛船薦詮賎践選遷銭銑閃鮮前善漸然全禅繕膳糎噌塑岨措曾曽楚狙疏疎礎祖租粗素組蘇訴阻遡鼠僧創双叢倉喪壮奏爽宋層匝惣想捜掃挿掻"
    	],
    	[
    		"9180",
    		"操早曹巣槍槽漕燥争痩相窓糟総綜聡草荘葬蒼藻装走送遭鎗霜騒像増憎臓蔵贈造促側則即息捉束測足速俗属賊族続卒袖其揃存孫尊損村遜他多太汰詑唾堕妥惰打柁舵楕陀駄騨体堆対耐岱帯待怠態戴替泰滞胎腿苔袋貸退逮隊黛鯛代台大第醍題鷹滝瀧卓啄宅托択拓沢濯琢託鐸濁諾茸凧蛸只"
    	],
    	[
    		"9240",
    		"叩但達辰奪脱巽竪辿棚谷狸鱈樽誰丹単嘆坦担探旦歎淡湛炭短端箪綻耽胆蛋誕鍛団壇弾断暖檀段男談値知地弛恥智池痴稚置致蜘遅馳築畜竹筑蓄"
    	],
    	[
    		"9280",
    		"逐秩窒茶嫡着中仲宙忠抽昼柱注虫衷註酎鋳駐樗瀦猪苧著貯丁兆凋喋寵帖帳庁弔張彫徴懲挑暢朝潮牒町眺聴脹腸蝶調諜超跳銚長頂鳥勅捗直朕沈珍賃鎮陳津墜椎槌追鎚痛通塚栂掴槻佃漬柘辻蔦綴鍔椿潰坪壷嬬紬爪吊釣鶴亭低停偵剃貞呈堤定帝底庭廷弟悌抵挺提梯汀碇禎程締艇訂諦蹄逓"
    	],
    	[
    		"9340",
    		"邸鄭釘鼎泥摘擢敵滴的笛適鏑溺哲徹撤轍迭鉄典填天展店添纏甜貼転顛点伝殿澱田電兎吐堵塗妬屠徒斗杜渡登菟賭途都鍍砥砺努度土奴怒倒党冬"
    	],
    	[
    		"9380",
    		"凍刀唐塔塘套宕島嶋悼投搭東桃梼棟盗淘湯涛灯燈当痘祷等答筒糖統到董蕩藤討謄豆踏逃透鐙陶頭騰闘働動同堂導憧撞洞瞳童胴萄道銅峠鴇匿得徳涜特督禿篤毒独読栃橡凸突椴届鳶苫寅酉瀞噸屯惇敦沌豚遁頓呑曇鈍奈那内乍凪薙謎灘捺鍋楢馴縄畷南楠軟難汝二尼弐迩匂賑肉虹廿日乳入"
    	],
    	[
    		"9440",
    		"如尿韮任妊忍認濡禰祢寧葱猫熱年念捻撚燃粘乃廼之埜嚢悩濃納能脳膿農覗蚤巴把播覇杷波派琶破婆罵芭馬俳廃拝排敗杯盃牌背肺輩配倍培媒梅"
    	],
    	[
    		"9480",
    		"楳煤狽買売賠陪這蝿秤矧萩伯剥博拍柏泊白箔粕舶薄迫曝漠爆縛莫駁麦函箱硲箸肇筈櫨幡肌畑畠八鉢溌発醗髪伐罰抜筏閥鳩噺塙蛤隼伴判半反叛帆搬斑板氾汎版犯班畔繁般藩販範釆煩頒飯挽晩番盤磐蕃蛮匪卑否妃庇彼悲扉批披斐比泌疲皮碑秘緋罷肥被誹費避非飛樋簸備尾微枇毘琵眉美"
    	],
    	[
    		"9540",
    		"鼻柊稗匹疋髭彦膝菱肘弼必畢筆逼桧姫媛紐百謬俵彪標氷漂瓢票表評豹廟描病秒苗錨鋲蒜蛭鰭品彬斌浜瀕貧賓頻敏瓶不付埠夫婦富冨布府怖扶敷"
    	],
    	[
    		"9580",
    		"斧普浮父符腐膚芙譜負賦赴阜附侮撫武舞葡蕪部封楓風葺蕗伏副復幅服福腹複覆淵弗払沸仏物鮒分吻噴墳憤扮焚奮粉糞紛雰文聞丙併兵塀幣平弊柄並蔽閉陛米頁僻壁癖碧別瞥蔑箆偏変片篇編辺返遍便勉娩弁鞭保舗鋪圃捕歩甫補輔穂募墓慕戊暮母簿菩倣俸包呆報奉宝峰峯崩庖抱捧放方朋"
    	],
    	[
    		"9640",
    		"法泡烹砲縫胞芳萌蓬蜂褒訪豊邦鋒飽鳳鵬乏亡傍剖坊妨帽忘忙房暴望某棒冒紡肪膨謀貌貿鉾防吠頬北僕卜墨撲朴牧睦穆釦勃没殆堀幌奔本翻凡盆"
    	],
    	[
    		"9680",
    		"摩磨魔麻埋妹昧枚毎哩槙幕膜枕鮪柾鱒桝亦俣又抹末沫迄侭繭麿万慢満漫蔓味未魅巳箕岬密蜜湊蓑稔脈妙粍民眠務夢無牟矛霧鵡椋婿娘冥名命明盟迷銘鳴姪牝滅免棉綿緬面麺摸模茂妄孟毛猛盲網耗蒙儲木黙目杢勿餅尤戻籾貰問悶紋門匁也冶夜爺耶野弥矢厄役約薬訳躍靖柳薮鑓愉愈油癒"
    	],
    	[
    		"9740",
    		"諭輸唯佑優勇友宥幽悠憂揖有柚湧涌猶猷由祐裕誘遊邑郵雄融夕予余与誉輿預傭幼妖容庸揚揺擁曜楊様洋溶熔用窯羊耀葉蓉要謡踊遥陽養慾抑欲"
    	],
    	[
    		"9780",
    		"沃浴翌翼淀羅螺裸来莱頼雷洛絡落酪乱卵嵐欄濫藍蘭覧利吏履李梨理璃痢裏裡里離陸律率立葎掠略劉流溜琉留硫粒隆竜龍侶慮旅虜了亮僚両凌寮料梁涼猟療瞭稜糧良諒遼量陵領力緑倫厘林淋燐琳臨輪隣鱗麟瑠塁涙累類令伶例冷励嶺怜玲礼苓鈴隷零霊麗齢暦歴列劣烈裂廉恋憐漣煉簾練聯"
    	],
    	[
    		"9840",
    		"蓮連錬呂魯櫓炉賂路露労婁廊弄朗楼榔浪漏牢狼篭老聾蝋郎六麓禄肋録論倭和話歪賄脇惑枠鷲亙亘鰐詫藁蕨椀湾碗腕"
    	],
    	[
    		"989f",
    		"弌丐丕个丱丶丼丿乂乖乘亂亅豫亊舒弍于亞亟亠亢亰亳亶从仍仄仆仂仗仞仭仟价伉佚估佛佝佗佇佶侈侏侘佻佩佰侑佯來侖儘俔俟俎俘俛俑俚俐俤俥倚倨倔倪倥倅伜俶倡倩倬俾俯們倆偃假會偕偐偈做偖偬偸傀傚傅傴傲"
    	],
    	[
    		"9940",
    		"僉僊傳僂僖僞僥僭僣僮價僵儉儁儂儖儕儔儚儡儺儷儼儻儿兀兒兌兔兢竸兩兪兮冀冂囘册冉冏冑冓冕冖冤冦冢冩冪冫决冱冲冰况冽凅凉凛几處凩凭"
    	],
    	[
    		"9980",
    		"凰凵凾刄刋刔刎刧刪刮刳刹剏剄剋剌剞剔剪剴剩剳剿剽劍劔劒剱劈劑辨辧劬劭劼劵勁勍勗勞勣勦飭勠勳勵勸勹匆匈甸匍匐匏匕匚匣匯匱匳匸區卆卅丗卉卍凖卞卩卮夘卻卷厂厖厠厦厥厮厰厶參簒雙叟曼燮叮叨叭叺吁吽呀听吭吼吮吶吩吝呎咏呵咎呟呱呷呰咒呻咀呶咄咐咆哇咢咸咥咬哄哈咨"
    	],
    	[
    		"9a40",
    		"咫哂咤咾咼哘哥哦唏唔哽哮哭哺哢唹啀啣啌售啜啅啖啗唸唳啝喙喀咯喊喟啻啾喘喞單啼喃喩喇喨嗚嗅嗟嗄嗜嗤嗔嘔嗷嘖嗾嗽嘛嗹噎噐營嘴嘶嘲嘸"
    	],
    	[
    		"9a80",
    		"噫噤嘯噬噪嚆嚀嚊嚠嚔嚏嚥嚮嚶嚴囂嚼囁囃囀囈囎囑囓囗囮囹圀囿圄圉圈國圍圓團圖嗇圜圦圷圸坎圻址坏坩埀垈坡坿垉垓垠垳垤垪垰埃埆埔埒埓堊埖埣堋堙堝塲堡塢塋塰毀塒堽塹墅墹墟墫墺壞墻墸墮壅壓壑壗壙壘壥壜壤壟壯壺壹壻壼壽夂夊夐夛梦夥夬夭夲夸夾竒奕奐奎奚奘奢奠奧奬奩"
    	],
    	[
    		"9b40",
    		"奸妁妝佞侫妣妲姆姨姜妍姙姚娥娟娑娜娉娚婀婬婉娵娶婢婪媚媼媾嫋嫂媽嫣嫗嫦嫩嫖嫺嫻嬌嬋嬖嬲嫐嬪嬶嬾孃孅孀孑孕孚孛孥孩孰孳孵學斈孺宀"
    	],
    	[
    		"9b80",
    		"它宦宸寃寇寉寔寐寤實寢寞寥寫寰寶寳尅將專對尓尠尢尨尸尹屁屆屎屓屐屏孱屬屮乢屶屹岌岑岔妛岫岻岶岼岷峅岾峇峙峩峽峺峭嶌峪崋崕崗嵜崟崛崑崔崢崚崙崘嵌嵒嵎嵋嵬嵳嵶嶇嶄嶂嶢嶝嶬嶮嶽嶐嶷嶼巉巍巓巒巖巛巫已巵帋帚帙帑帛帶帷幄幃幀幎幗幔幟幢幤幇幵并幺麼广庠廁廂廈廐廏"
    	],
    	[
    		"9c40",
    		"廖廣廝廚廛廢廡廨廩廬廱廳廰廴廸廾弃弉彝彜弋弑弖弩弭弸彁彈彌彎弯彑彖彗彙彡彭彳彷徃徂彿徊很徑徇從徙徘徠徨徭徼忖忻忤忸忱忝悳忿怡恠"
    	],
    	[
    		"9c80",
    		"怙怐怩怎怱怛怕怫怦怏怺恚恁恪恷恟恊恆恍恣恃恤恂恬恫恙悁悍惧悃悚悄悛悖悗悒悧悋惡悸惠惓悴忰悽惆悵惘慍愕愆惶惷愀惴惺愃愡惻惱愍愎慇愾愨愧慊愿愼愬愴愽慂慄慳慷慘慙慚慫慴慯慥慱慟慝慓慵憙憖憇憬憔憚憊憑憫憮懌懊應懷懈懃懆憺懋罹懍懦懣懶懺懴懿懽懼懾戀戈戉戍戌戔戛"
    	],
    	[
    		"9d40",
    		"戞戡截戮戰戲戳扁扎扞扣扛扠扨扼抂抉找抒抓抖拔抃抔拗拑抻拏拿拆擔拈拜拌拊拂拇抛拉挌拮拱挧挂挈拯拵捐挾捍搜捏掖掎掀掫捶掣掏掉掟掵捫"
    	],
    	[
    		"9d80",
    		"捩掾揩揀揆揣揉插揶揄搖搴搆搓搦搶攝搗搨搏摧摯摶摎攪撕撓撥撩撈撼據擒擅擇撻擘擂擱擧舉擠擡抬擣擯攬擶擴擲擺攀擽攘攜攅攤攣攫攴攵攷收攸畋效敖敕敍敘敞敝敲數斂斃變斛斟斫斷旃旆旁旄旌旒旛旙无旡旱杲昊昃旻杳昵昶昴昜晏晄晉晁晞晝晤晧晨晟晢晰暃暈暎暉暄暘暝曁暹曉暾暼"
    	],
    	[
    		"9e40",
    		"曄暸曖曚曠昿曦曩曰曵曷朏朖朞朦朧霸朮朿朶杁朸朷杆杞杠杙杣杤枉杰枩杼杪枌枋枦枡枅枷柯枴柬枳柩枸柤柞柝柢柮枹柎柆柧檜栞框栩桀桍栲桎"
    	],
    	[
    		"9e80",
    		"梳栫桙档桷桿梟梏梭梔條梛梃檮梹桴梵梠梺椏梍桾椁棊椈棘椢椦棡椌棍棔棧棕椶椒椄棗棣椥棹棠棯椨椪椚椣椡棆楹楷楜楸楫楔楾楮椹楴椽楙椰楡楞楝榁楪榲榮槐榿槁槓榾槎寨槊槝榻槃榧樮榑榠榜榕榴槞槨樂樛槿權槹槲槧樅榱樞槭樔槫樊樒櫁樣樓橄樌橲樶橸橇橢橙橦橈樸樢檐檍檠檄檢檣"
    	],
    	[
    		"9f40",
    		"檗蘗檻櫃櫂檸檳檬櫞櫑櫟檪櫚櫪櫻欅蘖櫺欒欖鬱欟欸欷盜欹飮歇歃歉歐歙歔歛歟歡歸歹歿殀殄殃殍殘殕殞殤殪殫殯殲殱殳殷殼毆毋毓毟毬毫毳毯"
    	],
    	[
    		"9f80",
    		"麾氈氓气氛氤氣汞汕汢汪沂沍沚沁沛汾汨汳沒沐泄泱泓沽泗泅泝沮沱沾沺泛泯泙泪洟衍洶洫洽洸洙洵洳洒洌浣涓浤浚浹浙涎涕濤涅淹渕渊涵淇淦涸淆淬淞淌淨淒淅淺淙淤淕淪淮渭湮渮渙湲湟渾渣湫渫湶湍渟湃渺湎渤滿渝游溂溪溘滉溷滓溽溯滄溲滔滕溏溥滂溟潁漑灌滬滸滾漿滲漱滯漲滌"
    	],
    	[
    		"e040",
    		"漾漓滷澆潺潸澁澀潯潛濳潭澂潼潘澎澑濂潦澳澣澡澤澹濆澪濟濕濬濔濘濱濮濛瀉瀋濺瀑瀁瀏濾瀛瀚潴瀝瀘瀟瀰瀾瀲灑灣炙炒炯烱炬炸炳炮烟烋烝"
    	],
    	[
    		"e080",
    		"烙焉烽焜焙煥煕熈煦煢煌煖煬熏燻熄熕熨熬燗熹熾燒燉燔燎燠燬燧燵燼燹燿爍爐爛爨爭爬爰爲爻爼爿牀牆牋牘牴牾犂犁犇犒犖犢犧犹犲狃狆狄狎狒狢狠狡狹狷倏猗猊猜猖猝猴猯猩猥猾獎獏默獗獪獨獰獸獵獻獺珈玳珎玻珀珥珮珞璢琅瑯琥珸琲琺瑕琿瑟瑙瑁瑜瑩瑰瑣瑪瑶瑾璋璞璧瓊瓏瓔珱"
    	],
    	[
    		"e140",
    		"瓠瓣瓧瓩瓮瓲瓰瓱瓸瓷甄甃甅甌甎甍甕甓甞甦甬甼畄畍畊畉畛畆畚畩畤畧畫畭畸當疆疇畴疊疉疂疔疚疝疥疣痂疳痃疵疽疸疼疱痍痊痒痙痣痞痾痿"
    	],
    	[
    		"e180",
    		"痼瘁痰痺痲痳瘋瘍瘉瘟瘧瘠瘡瘢瘤瘴瘰瘻癇癈癆癜癘癡癢癨癩癪癧癬癰癲癶癸發皀皃皈皋皎皖皓皙皚皰皴皸皹皺盂盍盖盒盞盡盥盧盪蘯盻眈眇眄眩眤眞眥眦眛眷眸睇睚睨睫睛睥睿睾睹瞎瞋瞑瞠瞞瞰瞶瞹瞿瞼瞽瞻矇矍矗矚矜矣矮矼砌砒礦砠礪硅碎硴碆硼碚碌碣碵碪碯磑磆磋磔碾碼磅磊磬"
    	],
    	[
    		"e240",
    		"磧磚磽磴礇礒礑礙礬礫祀祠祗祟祚祕祓祺祿禊禝禧齋禪禮禳禹禺秉秕秧秬秡秣稈稍稘稙稠稟禀稱稻稾稷穃穗穉穡穢穩龝穰穹穽窈窗窕窘窖窩竈窰"
    	],
    	[
    		"e280",
    		"窶竅竄窿邃竇竊竍竏竕竓站竚竝竡竢竦竭竰笂笏笊笆笳笘笙笞笵笨笶筐筺笄筍笋筌筅筵筥筴筧筰筱筬筮箝箘箟箍箜箚箋箒箏筝箙篋篁篌篏箴篆篝篩簑簔篦篥籠簀簇簓篳篷簗簍篶簣簧簪簟簷簫簽籌籃籔籏籀籐籘籟籤籖籥籬籵粃粐粤粭粢粫粡粨粳粲粱粮粹粽糀糅糂糘糒糜糢鬻糯糲糴糶糺紆"
    	],
    	[
    		"e340",
    		"紂紜紕紊絅絋紮紲紿紵絆絳絖絎絲絨絮絏絣經綉絛綏絽綛綺綮綣綵緇綽綫總綢綯緜綸綟綰緘緝緤緞緻緲緡縅縊縣縡縒縱縟縉縋縢繆繦縻縵縹繃縷"
    	],
    	[
    		"e380",
    		"縲縺繧繝繖繞繙繚繹繪繩繼繻纃緕繽辮繿纈纉續纒纐纓纔纖纎纛纜缸缺罅罌罍罎罐网罕罔罘罟罠罨罩罧罸羂羆羃羈羇羌羔羞羝羚羣羯羲羹羮羶羸譱翅翆翊翕翔翡翦翩翳翹飜耆耄耋耒耘耙耜耡耨耿耻聊聆聒聘聚聟聢聨聳聲聰聶聹聽聿肄肆肅肛肓肚肭冐肬胛胥胙胝胄胚胖脉胯胱脛脩脣脯腋"
    	],
    	[
    		"e440",
    		"隋腆脾腓腑胼腱腮腥腦腴膃膈膊膀膂膠膕膤膣腟膓膩膰膵膾膸膽臀臂膺臉臍臑臙臘臈臚臟臠臧臺臻臾舁舂舅與舊舍舐舖舩舫舸舳艀艙艘艝艚艟艤"
    	],
    	[
    		"e480",
    		"艢艨艪艫舮艱艷艸艾芍芒芫芟芻芬苡苣苟苒苴苳苺莓范苻苹苞茆苜茉苙茵茴茖茲茱荀茹荐荅茯茫茗茘莅莚莪莟莢莖茣莎莇莊荼莵荳荵莠莉莨菴萓菫菎菽萃菘萋菁菷萇菠菲萍萢萠莽萸蔆菻葭萪萼蕚蒄葷葫蒭葮蒂葩葆萬葯葹萵蓊葢蒹蒿蒟蓙蓍蒻蓚蓐蓁蓆蓖蒡蔡蓿蓴蔗蔘蔬蔟蔕蔔蓼蕀蕣蕘蕈"
    	],
    	[
    		"e540",
    		"蕁蘂蕋蕕薀薤薈薑薊薨蕭薔薛藪薇薜蕷蕾薐藉薺藏薹藐藕藝藥藜藹蘊蘓蘋藾藺蘆蘢蘚蘰蘿虍乕虔號虧虱蚓蚣蚩蚪蚋蚌蚶蚯蛄蛆蚰蛉蠣蚫蛔蛞蛩蛬"
    	],
    	[
    		"e580",
    		"蛟蛛蛯蜒蜆蜈蜀蜃蛻蜑蜉蜍蛹蜊蜴蜿蜷蜻蜥蜩蜚蝠蝟蝸蝌蝎蝴蝗蝨蝮蝙蝓蝣蝪蠅螢螟螂螯蟋螽蟀蟐雖螫蟄螳蟇蟆螻蟯蟲蟠蠏蠍蟾蟶蟷蠎蟒蠑蠖蠕蠢蠡蠱蠶蠹蠧蠻衄衂衒衙衞衢衫袁衾袞衵衽袵衲袂袗袒袮袙袢袍袤袰袿袱裃裄裔裘裙裝裹褂裼裴裨裲褄褌褊褓襃褞褥褪褫襁襄褻褶褸襌褝襠襞"
    	],
    	[
    		"e640",
    		"襦襤襭襪襯襴襷襾覃覈覊覓覘覡覩覦覬覯覲覺覽覿觀觚觜觝觧觴觸訃訖訐訌訛訝訥訶詁詛詒詆詈詼詭詬詢誅誂誄誨誡誑誥誦誚誣諄諍諂諚諫諳諧"
    	],
    	[
    		"e680",
    		"諤諱謔諠諢諷諞諛謌謇謚諡謖謐謗謠謳鞫謦謫謾謨譁譌譏譎證譖譛譚譫譟譬譯譴譽讀讌讎讒讓讖讙讚谺豁谿豈豌豎豐豕豢豬豸豺貂貉貅貊貍貎貔豼貘戝貭貪貽貲貳貮貶賈賁賤賣賚賽賺賻贄贅贊贇贏贍贐齎贓賍贔贖赧赭赱赳趁趙跂趾趺跏跚跖跌跛跋跪跫跟跣跼踈踉跿踝踞踐踟蹂踵踰踴蹊"
    	],
    	[
    		"e740",
    		"蹇蹉蹌蹐蹈蹙蹤蹠踪蹣蹕蹶蹲蹼躁躇躅躄躋躊躓躑躔躙躪躡躬躰軆躱躾軅軈軋軛軣軼軻軫軾輊輅輕輒輙輓輜輟輛輌輦輳輻輹轅轂輾轌轉轆轎轗轜"
    	],
    	[
    		"e780",
    		"轢轣轤辜辟辣辭辯辷迚迥迢迪迯邇迴逅迹迺逑逕逡逍逞逖逋逧逶逵逹迸遏遐遑遒逎遉逾遖遘遞遨遯遶隨遲邂遽邁邀邊邉邏邨邯邱邵郢郤扈郛鄂鄒鄙鄲鄰酊酖酘酣酥酩酳酲醋醉醂醢醫醯醪醵醴醺釀釁釉釋釐釖釟釡釛釼釵釶鈞釿鈔鈬鈕鈑鉞鉗鉅鉉鉤鉈銕鈿鉋鉐銜銖銓銛鉚鋏銹銷鋩錏鋺鍄錮"
    	],
    	[
    		"e840",
    		"錙錢錚錣錺錵錻鍜鍠鍼鍮鍖鎰鎬鎭鎔鎹鏖鏗鏨鏥鏘鏃鏝鏐鏈鏤鐚鐔鐓鐃鐇鐐鐶鐫鐵鐡鐺鑁鑒鑄鑛鑠鑢鑞鑪鈩鑰鑵鑷鑽鑚鑼鑾钁鑿閂閇閊閔閖閘閙"
    	],
    	[
    		"e880",
    		"閠閨閧閭閼閻閹閾闊濶闃闍闌闕闔闖關闡闥闢阡阨阮阯陂陌陏陋陷陜陞陝陟陦陲陬隍隘隕隗險隧隱隲隰隴隶隸隹雎雋雉雍襍雜霍雕雹霄霆霈霓霎霑霏霖霙霤霪霰霹霽霾靄靆靈靂靉靜靠靤靦靨勒靫靱靹鞅靼鞁靺鞆鞋鞏鞐鞜鞨鞦鞣鞳鞴韃韆韈韋韜韭齏韲竟韶韵頏頌頸頤頡頷頽顆顏顋顫顯顰"
    	],
    	[
    		"e940",
    		"顱顴顳颪颯颱颶飄飃飆飩飫餃餉餒餔餘餡餝餞餤餠餬餮餽餾饂饉饅饐饋饑饒饌饕馗馘馥馭馮馼駟駛駝駘駑駭駮駱駲駻駸騁騏騅駢騙騫騷驅驂驀驃"
    	],
    	[
    		"e980",
    		"騾驕驍驛驗驟驢驥驤驩驫驪骭骰骼髀髏髑髓體髞髟髢髣髦髯髫髮髴髱髷髻鬆鬘鬚鬟鬢鬣鬥鬧鬨鬩鬪鬮鬯鬲魄魃魏魍魎魑魘魴鮓鮃鮑鮖鮗鮟鮠鮨鮴鯀鯊鮹鯆鯏鯑鯒鯣鯢鯤鯔鯡鰺鯲鯱鯰鰕鰔鰉鰓鰌鰆鰈鰒鰊鰄鰮鰛鰥鰤鰡鰰鱇鰲鱆鰾鱚鱠鱧鱶鱸鳧鳬鳰鴉鴈鳫鴃鴆鴪鴦鶯鴣鴟鵄鴕鴒鵁鴿鴾鵆鵈"
    	],
    	[
    		"ea40",
    		"鵝鵞鵤鵑鵐鵙鵲鶉鶇鶫鵯鵺鶚鶤鶩鶲鷄鷁鶻鶸鶺鷆鷏鷂鷙鷓鷸鷦鷭鷯鷽鸚鸛鸞鹵鹹鹽麁麈麋麌麒麕麑麝麥麩麸麪麭靡黌黎黏黐黔黜點黝黠黥黨黯"
    	],
    	[
    		"ea80",
    		"黴黶黷黹黻黼黽鼇鼈皷鼕鼡鼬鼾齊齒齔齣齟齠齡齦齧齬齪齷齲齶龕龜龠堯槇遙瑤凜熙"
    	],
    	[
    		"ed40",
    		"纊褜鍈銈蓜俉炻昱棈鋹曻彅丨仡仼伀伃伹佖侒侊侚侔俍偀倢俿倞偆偰偂傔僴僘兊兤冝冾凬刕劜劦勀勛匀匇匤卲厓厲叝﨎咜咊咩哿喆坙坥垬埈埇﨏"
    	],
    	[
    		"ed80",
    		"塚增墲夋奓奛奝奣妤妺孖寀甯寘寬尞岦岺峵崧嵓﨑嵂嵭嶸嶹巐弡弴彧德忞恝悅悊惞惕愠惲愑愷愰憘戓抦揵摠撝擎敎昀昕昻昉昮昞昤晥晗晙晴晳暙暠暲暿曺朎朗杦枻桒柀栁桄棏﨓楨﨔榘槢樰橫橆橳橾櫢櫤毖氿汜沆汯泚洄涇浯涖涬淏淸淲淼渹湜渧渼溿澈澵濵瀅瀇瀨炅炫焏焄煜煆煇凞燁燾犱"
    	],
    	[
    		"ee40",
    		"犾猤猪獷玽珉珖珣珒琇珵琦琪琩琮瑢璉璟甁畯皂皜皞皛皦益睆劯砡硎硤硺礰礼神祥禔福禛竑竧靖竫箞精絈絜綷綠緖繒罇羡羽茁荢荿菇菶葈蒴蕓蕙"
    	],
    	[
    		"ee80",
    		"蕫﨟薰蘒﨡蠇裵訒訷詹誧誾諟諸諶譓譿賰賴贒赶﨣軏﨤逸遧郞都鄕鄧釚釗釞釭釮釤釥鈆鈐鈊鈺鉀鈼鉎鉙鉑鈹鉧銧鉷鉸鋧鋗鋙鋐﨧鋕鋠鋓錥錡鋻﨨錞鋿錝錂鍰鍗鎤鏆鏞鏸鐱鑅鑈閒隆﨩隝隯霳霻靃靍靏靑靕顗顥飯飼餧館馞驎髙髜魵魲鮏鮱鮻鰀鵰鵫鶴鸙黑"
    	],
    	[
    		"eeef",
    		"ⅰ",
    		9,
    		"￢￤＇＂"
    	],
    	[
    		"f040",
    		"",
    		62
    	],
    	[
    		"f080",
    		"",
    		124
    	],
    	[
    		"f140",
    		"",
    		62
    	],
    	[
    		"f180",
    		"",
    		124
    	],
    	[
    		"f240",
    		"",
    		62
    	],
    	[
    		"f280",
    		"",
    		124
    	],
    	[
    		"f340",
    		"",
    		62
    	],
    	[
    		"f380",
    		"",
    		124
    	],
    	[
    		"f440",
    		"",
    		62
    	],
    	[
    		"f480",
    		"",
    		124
    	],
    	[
    		"f540",
    		"",
    		62
    	],
    	[
    		"f580",
    		"",
    		124
    	],
    	[
    		"f640",
    		"",
    		62
    	],
    	[
    		"f680",
    		"",
    		124
    	],
    	[
    		"f740",
    		"",
    		62
    	],
    	[
    		"f780",
    		"",
    		124
    	],
    	[
    		"f840",
    		"",
    		62
    	],
    	[
    		"f880",
    		"",
    		124
    	],
    	[
    		"f940",
    		""
    	],
    	[
    		"fa40",
    		"ⅰ",
    		9,
    		"Ⅰ",
    		9,
    		"￢￤＇＂㈱№℡∵纊褜鍈銈蓜俉炻昱棈鋹曻彅丨仡仼伀伃伹佖侒侊侚侔俍偀倢俿倞偆偰偂傔僴僘兊"
    	],
    	[
    		"fa80",
    		"兤冝冾凬刕劜劦勀勛匀匇匤卲厓厲叝﨎咜咊咩哿喆坙坥垬埈埇﨏塚增墲夋奓奛奝奣妤妺孖寀甯寘寬尞岦岺峵崧嵓﨑嵂嵭嶸嶹巐弡弴彧德忞恝悅悊惞惕愠惲愑愷愰憘戓抦揵摠撝擎敎昀昕昻昉昮昞昤晥晗晙晴晳暙暠暲暿曺朎朗杦枻桒柀栁桄棏﨓楨﨔榘槢樰橫橆橳橾櫢櫤毖氿汜沆汯泚洄涇浯"
    	],
    	[
    		"fb40",
    		"涖涬淏淸淲淼渹湜渧渼溿澈澵濵瀅瀇瀨炅炫焏焄煜煆煇凞燁燾犱犾猤猪獷玽珉珖珣珒琇珵琦琪琩琮瑢璉璟甁畯皂皜皞皛皦益睆劯砡硎硤硺礰礼神"
    	],
    	[
    		"fb80",
    		"祥禔福禛竑竧靖竫箞精絈絜綷綠緖繒罇羡羽茁荢荿菇菶葈蒴蕓蕙蕫﨟薰蘒﨡蠇裵訒訷詹誧誾諟諸諶譓譿賰賴贒赶﨣軏﨤逸遧郞都鄕鄧釚釗釞釭釮釤釥鈆鈐鈊鈺鉀鈼鉎鉙鉑鈹鉧銧鉷鉸鋧鋗鋙鋐﨧鋕鋠鋓錥錡鋻﨨錞鋿錝錂鍰鍗鎤鏆鏞鏸鐱鑅鑈閒隆﨩隝隯霳霻靃靍靏靑靕顗顥飯飼餧館馞驎髙"
    	],
    	[
    		"fc40",
    		"髜魵魲鮏鮱鮻鰀鵰鵫鶴鸙黑"
    	]
    ];

    var require$$1 = [
    	[
    		"0",
    		"\u0000",
    		127
    	],
    	[
    		"8ea1",
    		"｡",
    		62
    	],
    	[
    		"a1a1",
    		"　、。，．・：；？！゛゜´｀¨＾￣＿ヽヾゝゞ〃仝々〆〇ー―‐／＼～∥｜…‥‘’“”（）〔〕［］｛｝〈",
    		9,
    		"＋－±×÷＝≠＜＞≦≧∞∴♂♀°′″℃￥＄￠￡％＃＆＊＠§☆★○●◎◇"
    	],
    	[
    		"a2a1",
    		"◆□■△▲▽▼※〒→←↑↓〓"
    	],
    	[
    		"a2ba",
    		"∈∋⊆⊇⊂⊃∪∩"
    	],
    	[
    		"a2ca",
    		"∧∨￢⇒⇔∀∃"
    	],
    	[
    		"a2dc",
    		"∠⊥⌒∂∇≡≒≪≫√∽∝∵∫∬"
    	],
    	[
    		"a2f2",
    		"Å‰♯♭♪†‡¶"
    	],
    	[
    		"a2fe",
    		"◯"
    	],
    	[
    		"a3b0",
    		"０",
    		9
    	],
    	[
    		"a3c1",
    		"Ａ",
    		25
    	],
    	[
    		"a3e1",
    		"ａ",
    		25
    	],
    	[
    		"a4a1",
    		"ぁ",
    		82
    	],
    	[
    		"a5a1",
    		"ァ",
    		85
    	],
    	[
    		"a6a1",
    		"Α",
    		16,
    		"Σ",
    		6
    	],
    	[
    		"a6c1",
    		"α",
    		16,
    		"σ",
    		6
    	],
    	[
    		"a7a1",
    		"А",
    		5,
    		"ЁЖ",
    		25
    	],
    	[
    		"a7d1",
    		"а",
    		5,
    		"ёж",
    		25
    	],
    	[
    		"a8a1",
    		"─│┌┐┘└├┬┤┴┼━┃┏┓┛┗┣┳┫┻╋┠┯┨┷┿┝┰┥┸╂"
    	],
    	[
    		"ada1",
    		"①",
    		19,
    		"Ⅰ",
    		9
    	],
    	[
    		"adc0",
    		"㍉㌔㌢㍍㌘㌧㌃㌶㍑㍗㌍㌦㌣㌫㍊㌻㎜㎝㎞㎎㎏㏄㎡"
    	],
    	[
    		"addf",
    		"㍻〝〟№㏍℡㊤",
    		4,
    		"㈱㈲㈹㍾㍽㍼≒≡∫∮∑√⊥∠∟⊿∵∩∪"
    	],
    	[
    		"b0a1",
    		"亜唖娃阿哀愛挨姶逢葵茜穐悪握渥旭葦芦鯵梓圧斡扱宛姐虻飴絢綾鮎或粟袷安庵按暗案闇鞍杏以伊位依偉囲夷委威尉惟意慰易椅為畏異移維緯胃萎衣謂違遺医井亥域育郁磯一壱溢逸稲茨芋鰯允印咽員因姻引飲淫胤蔭"
    	],
    	[
    		"b1a1",
    		"院陰隠韻吋右宇烏羽迂雨卯鵜窺丑碓臼渦嘘唄欝蔚鰻姥厩浦瓜閏噂云運雲荏餌叡営嬰影映曳栄永泳洩瑛盈穎頴英衛詠鋭液疫益駅悦謁越閲榎厭円園堰奄宴延怨掩援沿演炎焔煙燕猿縁艶苑薗遠鉛鴛塩於汚甥凹央奥往応"
    	],
    	[
    		"b2a1",
    		"押旺横欧殴王翁襖鴬鴎黄岡沖荻億屋憶臆桶牡乙俺卸恩温穏音下化仮何伽価佳加可嘉夏嫁家寡科暇果架歌河火珂禍禾稼箇花苛茄荷華菓蝦課嘩貨迦過霞蚊俄峨我牙画臥芽蛾賀雅餓駕介会解回塊壊廻快怪悔恢懐戒拐改"
    	],
    	[
    		"b3a1",
    		"魁晦械海灰界皆絵芥蟹開階貝凱劾外咳害崖慨概涯碍蓋街該鎧骸浬馨蛙垣柿蛎鈎劃嚇各廓拡撹格核殻獲確穫覚角赫較郭閣隔革学岳楽額顎掛笠樫橿梶鰍潟割喝恰括活渇滑葛褐轄且鰹叶椛樺鞄株兜竃蒲釜鎌噛鴨栢茅萱"
    	],
    	[
    		"b4a1",
    		"粥刈苅瓦乾侃冠寒刊勘勧巻喚堪姦完官寛干幹患感慣憾換敢柑桓棺款歓汗漢澗潅環甘監看竿管簡緩缶翰肝艦莞観諌貫還鑑間閑関陥韓館舘丸含岸巌玩癌眼岩翫贋雁頑顔願企伎危喜器基奇嬉寄岐希幾忌揮机旗既期棋棄"
    	],
    	[
    		"b5a1",
    		"機帰毅気汽畿祈季稀紀徽規記貴起軌輝飢騎鬼亀偽儀妓宜戯技擬欺犠疑祇義蟻誼議掬菊鞠吉吃喫桔橘詰砧杵黍却客脚虐逆丘久仇休及吸宮弓急救朽求汲泣灸球究窮笈級糾給旧牛去居巨拒拠挙渠虚許距鋸漁禦魚亨享京"
    	],
    	[
    		"b6a1",
    		"供侠僑兇競共凶協匡卿叫喬境峡強彊怯恐恭挟教橋況狂狭矯胸脅興蕎郷鏡響饗驚仰凝尭暁業局曲極玉桐粁僅勤均巾錦斤欣欽琴禁禽筋緊芹菌衿襟謹近金吟銀九倶句区狗玖矩苦躯駆駈駒具愚虞喰空偶寓遇隅串櫛釧屑屈"
    	],
    	[
    		"b7a1",
    		"掘窟沓靴轡窪熊隈粂栗繰桑鍬勲君薫訓群軍郡卦袈祁係傾刑兄啓圭珪型契形径恵慶慧憩掲携敬景桂渓畦稽系経継繋罫茎荊蛍計詣警軽頚鶏芸迎鯨劇戟撃激隙桁傑欠決潔穴結血訣月件倹倦健兼券剣喧圏堅嫌建憲懸拳捲"
    	],
    	[
    		"b8a1",
    		"検権牽犬献研硯絹県肩見謙賢軒遣鍵険顕験鹸元原厳幻弦減源玄現絃舷言諺限乎個古呼固姑孤己庫弧戸故枯湖狐糊袴股胡菰虎誇跨鈷雇顧鼓五互伍午呉吾娯後御悟梧檎瑚碁語誤護醐乞鯉交佼侯候倖光公功効勾厚口向"
    	],
    	[
    		"b9a1",
    		"后喉坑垢好孔孝宏工巧巷幸広庚康弘恒慌抗拘控攻昂晃更杭校梗構江洪浩港溝甲皇硬稿糠紅紘絞綱耕考肯肱腔膏航荒行衡講貢購郊酵鉱砿鋼閤降項香高鴻剛劫号合壕拷濠豪轟麹克刻告国穀酷鵠黒獄漉腰甑忽惚骨狛込"
    	],
    	[
    		"baa1",
    		"此頃今困坤墾婚恨懇昏昆根梱混痕紺艮魂些佐叉唆嵯左差査沙瑳砂詐鎖裟坐座挫債催再最哉塞妻宰彩才採栽歳済災采犀砕砦祭斎細菜裁載際剤在材罪財冴坂阪堺榊肴咲崎埼碕鷺作削咋搾昨朔柵窄策索錯桜鮭笹匙冊刷"
    	],
    	[
    		"bba1",
    		"察拶撮擦札殺薩雑皐鯖捌錆鮫皿晒三傘参山惨撒散桟燦珊産算纂蚕讃賛酸餐斬暫残仕仔伺使刺司史嗣四士始姉姿子屍市師志思指支孜斯施旨枝止死氏獅祉私糸紙紫肢脂至視詞詩試誌諮資賜雌飼歯事似侍児字寺慈持時"
    	],
    	[
    		"bca1",
    		"次滋治爾璽痔磁示而耳自蒔辞汐鹿式識鴫竺軸宍雫七叱執失嫉室悉湿漆疾質実蔀篠偲柴芝屡蕊縞舎写射捨赦斜煮社紗者謝車遮蛇邪借勺尺杓灼爵酌釈錫若寂弱惹主取守手朱殊狩珠種腫趣酒首儒受呪寿授樹綬需囚収周"
    	],
    	[
    		"bda1",
    		"宗就州修愁拾洲秀秋終繍習臭舟蒐衆襲讐蹴輯週酋酬集醜什住充十従戎柔汁渋獣縦重銃叔夙宿淑祝縮粛塾熟出術述俊峻春瞬竣舜駿准循旬楯殉淳準潤盾純巡遵醇順処初所暑曙渚庶緒署書薯藷諸助叙女序徐恕鋤除傷償"
    	],
    	[
    		"bea1",
    		"勝匠升召哨商唱嘗奨妾娼宵将小少尚庄床廠彰承抄招掌捷昇昌昭晶松梢樟樵沼消渉湘焼焦照症省硝礁祥称章笑粧紹肖菖蒋蕉衝裳訟証詔詳象賞醤鉦鍾鐘障鞘上丈丞乗冗剰城場壌嬢常情擾条杖浄状畳穣蒸譲醸錠嘱埴飾"
    	],
    	[
    		"bfa1",
    		"拭植殖燭織職色触食蝕辱尻伸信侵唇娠寝審心慎振新晋森榛浸深申疹真神秦紳臣芯薪親診身辛進針震人仁刃塵壬尋甚尽腎訊迅陣靭笥諏須酢図厨逗吹垂帥推水炊睡粋翠衰遂酔錐錘随瑞髄崇嵩数枢趨雛据杉椙菅頗雀裾"
    	],
    	[
    		"c0a1",
    		"澄摺寸世瀬畝是凄制勢姓征性成政整星晴棲栖正清牲生盛精聖声製西誠誓請逝醒青静斉税脆隻席惜戚斥昔析石積籍績脊責赤跡蹟碩切拙接摂折設窃節説雪絶舌蝉仙先千占宣専尖川戦扇撰栓栴泉浅洗染潜煎煽旋穿箭線"
    	],
    	[
    		"c1a1",
    		"繊羨腺舛船薦詮賎践選遷銭銑閃鮮前善漸然全禅繕膳糎噌塑岨措曾曽楚狙疏疎礎祖租粗素組蘇訴阻遡鼠僧創双叢倉喪壮奏爽宋層匝惣想捜掃挿掻操早曹巣槍槽漕燥争痩相窓糟総綜聡草荘葬蒼藻装走送遭鎗霜騒像増憎"
    	],
    	[
    		"c2a1",
    		"臓蔵贈造促側則即息捉束測足速俗属賊族続卒袖其揃存孫尊損村遜他多太汰詑唾堕妥惰打柁舵楕陀駄騨体堆対耐岱帯待怠態戴替泰滞胎腿苔袋貸退逮隊黛鯛代台大第醍題鷹滝瀧卓啄宅托択拓沢濯琢託鐸濁諾茸凧蛸只"
    	],
    	[
    		"c3a1",
    		"叩但達辰奪脱巽竪辿棚谷狸鱈樽誰丹単嘆坦担探旦歎淡湛炭短端箪綻耽胆蛋誕鍛団壇弾断暖檀段男談値知地弛恥智池痴稚置致蜘遅馳築畜竹筑蓄逐秩窒茶嫡着中仲宙忠抽昼柱注虫衷註酎鋳駐樗瀦猪苧著貯丁兆凋喋寵"
    	],
    	[
    		"c4a1",
    		"帖帳庁弔張彫徴懲挑暢朝潮牒町眺聴脹腸蝶調諜超跳銚長頂鳥勅捗直朕沈珍賃鎮陳津墜椎槌追鎚痛通塚栂掴槻佃漬柘辻蔦綴鍔椿潰坪壷嬬紬爪吊釣鶴亭低停偵剃貞呈堤定帝底庭廷弟悌抵挺提梯汀碇禎程締艇訂諦蹄逓"
    	],
    	[
    		"c5a1",
    		"邸鄭釘鼎泥摘擢敵滴的笛適鏑溺哲徹撤轍迭鉄典填天展店添纏甜貼転顛点伝殿澱田電兎吐堵塗妬屠徒斗杜渡登菟賭途都鍍砥砺努度土奴怒倒党冬凍刀唐塔塘套宕島嶋悼投搭東桃梼棟盗淘湯涛灯燈当痘祷等答筒糖統到"
    	],
    	[
    		"c6a1",
    		"董蕩藤討謄豆踏逃透鐙陶頭騰闘働動同堂導憧撞洞瞳童胴萄道銅峠鴇匿得徳涜特督禿篤毒独読栃橡凸突椴届鳶苫寅酉瀞噸屯惇敦沌豚遁頓呑曇鈍奈那内乍凪薙謎灘捺鍋楢馴縄畷南楠軟難汝二尼弐迩匂賑肉虹廿日乳入"
    	],
    	[
    		"c7a1",
    		"如尿韮任妊忍認濡禰祢寧葱猫熱年念捻撚燃粘乃廼之埜嚢悩濃納能脳膿農覗蚤巴把播覇杷波派琶破婆罵芭馬俳廃拝排敗杯盃牌背肺輩配倍培媒梅楳煤狽買売賠陪這蝿秤矧萩伯剥博拍柏泊白箔粕舶薄迫曝漠爆縛莫駁麦"
    	],
    	[
    		"c8a1",
    		"函箱硲箸肇筈櫨幡肌畑畠八鉢溌発醗髪伐罰抜筏閥鳩噺塙蛤隼伴判半反叛帆搬斑板氾汎版犯班畔繁般藩販範釆煩頒飯挽晩番盤磐蕃蛮匪卑否妃庇彼悲扉批披斐比泌疲皮碑秘緋罷肥被誹費避非飛樋簸備尾微枇毘琵眉美"
    	],
    	[
    		"c9a1",
    		"鼻柊稗匹疋髭彦膝菱肘弼必畢筆逼桧姫媛紐百謬俵彪標氷漂瓢票表評豹廟描病秒苗錨鋲蒜蛭鰭品彬斌浜瀕貧賓頻敏瓶不付埠夫婦富冨布府怖扶敷斧普浮父符腐膚芙譜負賦赴阜附侮撫武舞葡蕪部封楓風葺蕗伏副復幅服"
    	],
    	[
    		"caa1",
    		"福腹複覆淵弗払沸仏物鮒分吻噴墳憤扮焚奮粉糞紛雰文聞丙併兵塀幣平弊柄並蔽閉陛米頁僻壁癖碧別瞥蔑箆偏変片篇編辺返遍便勉娩弁鞭保舗鋪圃捕歩甫補輔穂募墓慕戊暮母簿菩倣俸包呆報奉宝峰峯崩庖抱捧放方朋"
    	],
    	[
    		"cba1",
    		"法泡烹砲縫胞芳萌蓬蜂褒訪豊邦鋒飽鳳鵬乏亡傍剖坊妨帽忘忙房暴望某棒冒紡肪膨謀貌貿鉾防吠頬北僕卜墨撲朴牧睦穆釦勃没殆堀幌奔本翻凡盆摩磨魔麻埋妹昧枚毎哩槙幕膜枕鮪柾鱒桝亦俣又抹末沫迄侭繭麿万慢満"
    	],
    	[
    		"cca1",
    		"漫蔓味未魅巳箕岬密蜜湊蓑稔脈妙粍民眠務夢無牟矛霧鵡椋婿娘冥名命明盟迷銘鳴姪牝滅免棉綿緬面麺摸模茂妄孟毛猛盲網耗蒙儲木黙目杢勿餅尤戻籾貰問悶紋門匁也冶夜爺耶野弥矢厄役約薬訳躍靖柳薮鑓愉愈油癒"
    	],
    	[
    		"cda1",
    		"諭輸唯佑優勇友宥幽悠憂揖有柚湧涌猶猷由祐裕誘遊邑郵雄融夕予余与誉輿預傭幼妖容庸揚揺擁曜楊様洋溶熔用窯羊耀葉蓉要謡踊遥陽養慾抑欲沃浴翌翼淀羅螺裸来莱頼雷洛絡落酪乱卵嵐欄濫藍蘭覧利吏履李梨理璃"
    	],
    	[
    		"cea1",
    		"痢裏裡里離陸律率立葎掠略劉流溜琉留硫粒隆竜龍侶慮旅虜了亮僚両凌寮料梁涼猟療瞭稜糧良諒遼量陵領力緑倫厘林淋燐琳臨輪隣鱗麟瑠塁涙累類令伶例冷励嶺怜玲礼苓鈴隷零霊麗齢暦歴列劣烈裂廉恋憐漣煉簾練聯"
    	],
    	[
    		"cfa1",
    		"蓮連錬呂魯櫓炉賂路露労婁廊弄朗楼榔浪漏牢狼篭老聾蝋郎六麓禄肋録論倭和話歪賄脇惑枠鷲亙亘鰐詫藁蕨椀湾碗腕"
    	],
    	[
    		"d0a1",
    		"弌丐丕个丱丶丼丿乂乖乘亂亅豫亊舒弍于亞亟亠亢亰亳亶从仍仄仆仂仗仞仭仟价伉佚估佛佝佗佇佶侈侏侘佻佩佰侑佯來侖儘俔俟俎俘俛俑俚俐俤俥倚倨倔倪倥倅伜俶倡倩倬俾俯們倆偃假會偕偐偈做偖偬偸傀傚傅傴傲"
    	],
    	[
    		"d1a1",
    		"僉僊傳僂僖僞僥僭僣僮價僵儉儁儂儖儕儔儚儡儺儷儼儻儿兀兒兌兔兢竸兩兪兮冀冂囘册冉冏冑冓冕冖冤冦冢冩冪冫决冱冲冰况冽凅凉凛几處凩凭凰凵凾刄刋刔刎刧刪刮刳刹剏剄剋剌剞剔剪剴剩剳剿剽劍劔劒剱劈劑辨"
    	],
    	[
    		"d2a1",
    		"辧劬劭劼劵勁勍勗勞勣勦飭勠勳勵勸勹匆匈甸匍匐匏匕匚匣匯匱匳匸區卆卅丗卉卍凖卞卩卮夘卻卷厂厖厠厦厥厮厰厶參簒雙叟曼燮叮叨叭叺吁吽呀听吭吼吮吶吩吝呎咏呵咎呟呱呷呰咒呻咀呶咄咐咆哇咢咸咥咬哄哈咨"
    	],
    	[
    		"d3a1",
    		"咫哂咤咾咼哘哥哦唏唔哽哮哭哺哢唹啀啣啌售啜啅啖啗唸唳啝喙喀咯喊喟啻啾喘喞單啼喃喩喇喨嗚嗅嗟嗄嗜嗤嗔嘔嗷嘖嗾嗽嘛嗹噎噐營嘴嘶嘲嘸噫噤嘯噬噪嚆嚀嚊嚠嚔嚏嚥嚮嚶嚴囂嚼囁囃囀囈囎囑囓囗囮囹圀囿圄圉"
    	],
    	[
    		"d4a1",
    		"圈國圍圓團圖嗇圜圦圷圸坎圻址坏坩埀垈坡坿垉垓垠垳垤垪垰埃埆埔埒埓堊埖埣堋堙堝塲堡塢塋塰毀塒堽塹墅墹墟墫墺壞墻墸墮壅壓壑壗壙壘壥壜壤壟壯壺壹壻壼壽夂夊夐夛梦夥夬夭夲夸夾竒奕奐奎奚奘奢奠奧奬奩"
    	],
    	[
    		"d5a1",
    		"奸妁妝佞侫妣妲姆姨姜妍姙姚娥娟娑娜娉娚婀婬婉娵娶婢婪媚媼媾嫋嫂媽嫣嫗嫦嫩嫖嫺嫻嬌嬋嬖嬲嫐嬪嬶嬾孃孅孀孑孕孚孛孥孩孰孳孵學斈孺宀它宦宸寃寇寉寔寐寤實寢寞寥寫寰寶寳尅將專對尓尠尢尨尸尹屁屆屎屓"
    	],
    	[
    		"d6a1",
    		"屐屏孱屬屮乢屶屹岌岑岔妛岫岻岶岼岷峅岾峇峙峩峽峺峭嶌峪崋崕崗嵜崟崛崑崔崢崚崙崘嵌嵒嵎嵋嵬嵳嵶嶇嶄嶂嶢嶝嶬嶮嶽嶐嶷嶼巉巍巓巒巖巛巫已巵帋帚帙帑帛帶帷幄幃幀幎幗幔幟幢幤幇幵并幺麼广庠廁廂廈廐廏"
    	],
    	[
    		"d7a1",
    		"廖廣廝廚廛廢廡廨廩廬廱廳廰廴廸廾弃弉彝彜弋弑弖弩弭弸彁彈彌彎弯彑彖彗彙彡彭彳彷徃徂彿徊很徑徇從徙徘徠徨徭徼忖忻忤忸忱忝悳忿怡恠怙怐怩怎怱怛怕怫怦怏怺恚恁恪恷恟恊恆恍恣恃恤恂恬恫恙悁悍惧悃悚"
    	],
    	[
    		"d8a1",
    		"悄悛悖悗悒悧悋惡悸惠惓悴忰悽惆悵惘慍愕愆惶惷愀惴惺愃愡惻惱愍愎慇愾愨愧慊愿愼愬愴愽慂慄慳慷慘慙慚慫慴慯慥慱慟慝慓慵憙憖憇憬憔憚憊憑憫憮懌懊應懷懈懃懆憺懋罹懍懦懣懶懺懴懿懽懼懾戀戈戉戍戌戔戛"
    	],
    	[
    		"d9a1",
    		"戞戡截戮戰戲戳扁扎扞扣扛扠扨扼抂抉找抒抓抖拔抃抔拗拑抻拏拿拆擔拈拜拌拊拂拇抛拉挌拮拱挧挂挈拯拵捐挾捍搜捏掖掎掀掫捶掣掏掉掟掵捫捩掾揩揀揆揣揉插揶揄搖搴搆搓搦搶攝搗搨搏摧摯摶摎攪撕撓撥撩撈撼"
    	],
    	[
    		"daa1",
    		"據擒擅擇撻擘擂擱擧舉擠擡抬擣擯攬擶擴擲擺攀擽攘攜攅攤攣攫攴攵攷收攸畋效敖敕敍敘敞敝敲數斂斃變斛斟斫斷旃旆旁旄旌旒旛旙无旡旱杲昊昃旻杳昵昶昴昜晏晄晉晁晞晝晤晧晨晟晢晰暃暈暎暉暄暘暝曁暹曉暾暼"
    	],
    	[
    		"dba1",
    		"曄暸曖曚曠昿曦曩曰曵曷朏朖朞朦朧霸朮朿朶杁朸朷杆杞杠杙杣杤枉杰枩杼杪枌枋枦枡枅枷柯枴柬枳柩枸柤柞柝柢柮枹柎柆柧檜栞框栩桀桍栲桎梳栫桙档桷桿梟梏梭梔條梛梃檮梹桴梵梠梺椏梍桾椁棊椈棘椢椦棡椌棍"
    	],
    	[
    		"dca1",
    		"棔棧棕椶椒椄棗棣椥棹棠棯椨椪椚椣椡棆楹楷楜楸楫楔楾楮椹楴椽楙椰楡楞楝榁楪榲榮槐榿槁槓榾槎寨槊槝榻槃榧樮榑榠榜榕榴槞槨樂樛槿權槹槲槧樅榱樞槭樔槫樊樒櫁樣樓橄樌橲樶橸橇橢橙橦橈樸樢檐檍檠檄檢檣"
    	],
    	[
    		"dda1",
    		"檗蘗檻櫃櫂檸檳檬櫞櫑櫟檪櫚櫪櫻欅蘖櫺欒欖鬱欟欸欷盜欹飮歇歃歉歐歙歔歛歟歡歸歹歿殀殄殃殍殘殕殞殤殪殫殯殲殱殳殷殼毆毋毓毟毬毫毳毯麾氈氓气氛氤氣汞汕汢汪沂沍沚沁沛汾汨汳沒沐泄泱泓沽泗泅泝沮沱沾"
    	],
    	[
    		"dea1",
    		"沺泛泯泙泪洟衍洶洫洽洸洙洵洳洒洌浣涓浤浚浹浙涎涕濤涅淹渕渊涵淇淦涸淆淬淞淌淨淒淅淺淙淤淕淪淮渭湮渮渙湲湟渾渣湫渫湶湍渟湃渺湎渤滿渝游溂溪溘滉溷滓溽溯滄溲滔滕溏溥滂溟潁漑灌滬滸滾漿滲漱滯漲滌"
    	],
    	[
    		"dfa1",
    		"漾漓滷澆潺潸澁澀潯潛濳潭澂潼潘澎澑濂潦澳澣澡澤澹濆澪濟濕濬濔濘濱濮濛瀉瀋濺瀑瀁瀏濾瀛瀚潴瀝瀘瀟瀰瀾瀲灑灣炙炒炯烱炬炸炳炮烟烋烝烙焉烽焜焙煥煕熈煦煢煌煖煬熏燻熄熕熨熬燗熹熾燒燉燔燎燠燬燧燵燼"
    	],
    	[
    		"e0a1",
    		"燹燿爍爐爛爨爭爬爰爲爻爼爿牀牆牋牘牴牾犂犁犇犒犖犢犧犹犲狃狆狄狎狒狢狠狡狹狷倏猗猊猜猖猝猴猯猩猥猾獎獏默獗獪獨獰獸獵獻獺珈玳珎玻珀珥珮珞璢琅瑯琥珸琲琺瑕琿瑟瑙瑁瑜瑩瑰瑣瑪瑶瑾璋璞璧瓊瓏瓔珱"
    	],
    	[
    		"e1a1",
    		"瓠瓣瓧瓩瓮瓲瓰瓱瓸瓷甄甃甅甌甎甍甕甓甞甦甬甼畄畍畊畉畛畆畚畩畤畧畫畭畸當疆疇畴疊疉疂疔疚疝疥疣痂疳痃疵疽疸疼疱痍痊痒痙痣痞痾痿痼瘁痰痺痲痳瘋瘍瘉瘟瘧瘠瘡瘢瘤瘴瘰瘻癇癈癆癜癘癡癢癨癩癪癧癬癰"
    	],
    	[
    		"e2a1",
    		"癲癶癸發皀皃皈皋皎皖皓皙皚皰皴皸皹皺盂盍盖盒盞盡盥盧盪蘯盻眈眇眄眩眤眞眥眦眛眷眸睇睚睨睫睛睥睿睾睹瞎瞋瞑瞠瞞瞰瞶瞹瞿瞼瞽瞻矇矍矗矚矜矣矮矼砌砒礦砠礪硅碎硴碆硼碚碌碣碵碪碯磑磆磋磔碾碼磅磊磬"
    	],
    	[
    		"e3a1",
    		"磧磚磽磴礇礒礑礙礬礫祀祠祗祟祚祕祓祺祿禊禝禧齋禪禮禳禹禺秉秕秧秬秡秣稈稍稘稙稠稟禀稱稻稾稷穃穗穉穡穢穩龝穰穹穽窈窗窕窘窖窩竈窰窶竅竄窿邃竇竊竍竏竕竓站竚竝竡竢竦竭竰笂笏笊笆笳笘笙笞笵笨笶筐"
    	],
    	[
    		"e4a1",
    		"筺笄筍笋筌筅筵筥筴筧筰筱筬筮箝箘箟箍箜箚箋箒箏筝箙篋篁篌篏箴篆篝篩簑簔篦篥籠簀簇簓篳篷簗簍篶簣簧簪簟簷簫簽籌籃籔籏籀籐籘籟籤籖籥籬籵粃粐粤粭粢粫粡粨粳粲粱粮粹粽糀糅糂糘糒糜糢鬻糯糲糴糶糺紆"
    	],
    	[
    		"e5a1",
    		"紂紜紕紊絅絋紮紲紿紵絆絳絖絎絲絨絮絏絣經綉絛綏絽綛綺綮綣綵緇綽綫總綢綯緜綸綟綰緘緝緤緞緻緲緡縅縊縣縡縒縱縟縉縋縢繆繦縻縵縹繃縷縲縺繧繝繖繞繙繚繹繪繩繼繻纃緕繽辮繿纈纉續纒纐纓纔纖纎纛纜缸缺"
    	],
    	[
    		"e6a1",
    		"罅罌罍罎罐网罕罔罘罟罠罨罩罧罸羂羆羃羈羇羌羔羞羝羚羣羯羲羹羮羶羸譱翅翆翊翕翔翡翦翩翳翹飜耆耄耋耒耘耙耜耡耨耿耻聊聆聒聘聚聟聢聨聳聲聰聶聹聽聿肄肆肅肛肓肚肭冐肬胛胥胙胝胄胚胖脉胯胱脛脩脣脯腋"
    	],
    	[
    		"e7a1",
    		"隋腆脾腓腑胼腱腮腥腦腴膃膈膊膀膂膠膕膤膣腟膓膩膰膵膾膸膽臀臂膺臉臍臑臙臘臈臚臟臠臧臺臻臾舁舂舅與舊舍舐舖舩舫舸舳艀艙艘艝艚艟艤艢艨艪艫舮艱艷艸艾芍芒芫芟芻芬苡苣苟苒苴苳苺莓范苻苹苞茆苜茉苙"
    	],
    	[
    		"e8a1",
    		"茵茴茖茲茱荀茹荐荅茯茫茗茘莅莚莪莟莢莖茣莎莇莊荼莵荳荵莠莉莨菴萓菫菎菽萃菘萋菁菷萇菠菲萍萢萠莽萸蔆菻葭萪萼蕚蒄葷葫蒭葮蒂葩葆萬葯葹萵蓊葢蒹蒿蒟蓙蓍蒻蓚蓐蓁蓆蓖蒡蔡蓿蓴蔗蔘蔬蔟蔕蔔蓼蕀蕣蕘蕈"
    	],
    	[
    		"e9a1",
    		"蕁蘂蕋蕕薀薤薈薑薊薨蕭薔薛藪薇薜蕷蕾薐藉薺藏薹藐藕藝藥藜藹蘊蘓蘋藾藺蘆蘢蘚蘰蘿虍乕虔號虧虱蚓蚣蚩蚪蚋蚌蚶蚯蛄蛆蚰蛉蠣蚫蛔蛞蛩蛬蛟蛛蛯蜒蜆蜈蜀蜃蛻蜑蜉蜍蛹蜊蜴蜿蜷蜻蜥蜩蜚蝠蝟蝸蝌蝎蝴蝗蝨蝮蝙"
    	],
    	[
    		"eaa1",
    		"蝓蝣蝪蠅螢螟螂螯蟋螽蟀蟐雖螫蟄螳蟇蟆螻蟯蟲蟠蠏蠍蟾蟶蟷蠎蟒蠑蠖蠕蠢蠡蠱蠶蠹蠧蠻衄衂衒衙衞衢衫袁衾袞衵衽袵衲袂袗袒袮袙袢袍袤袰袿袱裃裄裔裘裙裝裹褂裼裴裨裲褄褌褊褓襃褞褥褪褫襁襄褻褶褸襌褝襠襞"
    	],
    	[
    		"eba1",
    		"襦襤襭襪襯襴襷襾覃覈覊覓覘覡覩覦覬覯覲覺覽覿觀觚觜觝觧觴觸訃訖訐訌訛訝訥訶詁詛詒詆詈詼詭詬詢誅誂誄誨誡誑誥誦誚誣諄諍諂諚諫諳諧諤諱謔諠諢諷諞諛謌謇謚諡謖謐謗謠謳鞫謦謫謾謨譁譌譏譎證譖譛譚譫"
    	],
    	[
    		"eca1",
    		"譟譬譯譴譽讀讌讎讒讓讖讙讚谺豁谿豈豌豎豐豕豢豬豸豺貂貉貅貊貍貎貔豼貘戝貭貪貽貲貳貮貶賈賁賤賣賚賽賺賻贄贅贊贇贏贍贐齎贓賍贔贖赧赭赱赳趁趙跂趾趺跏跚跖跌跛跋跪跫跟跣跼踈踉跿踝踞踐踟蹂踵踰踴蹊"
    	],
    	[
    		"eda1",
    		"蹇蹉蹌蹐蹈蹙蹤蹠踪蹣蹕蹶蹲蹼躁躇躅躄躋躊躓躑躔躙躪躡躬躰軆躱躾軅軈軋軛軣軼軻軫軾輊輅輕輒輙輓輜輟輛輌輦輳輻輹轅轂輾轌轉轆轎轗轜轢轣轤辜辟辣辭辯辷迚迥迢迪迯邇迴逅迹迺逑逕逡逍逞逖逋逧逶逵逹迸"
    	],
    	[
    		"eea1",
    		"遏遐遑遒逎遉逾遖遘遞遨遯遶隨遲邂遽邁邀邊邉邏邨邯邱邵郢郤扈郛鄂鄒鄙鄲鄰酊酖酘酣酥酩酳酲醋醉醂醢醫醯醪醵醴醺釀釁釉釋釐釖釟釡釛釼釵釶鈞釿鈔鈬鈕鈑鉞鉗鉅鉉鉤鉈銕鈿鉋鉐銜銖銓銛鉚鋏銹銷鋩錏鋺鍄錮"
    	],
    	[
    		"efa1",
    		"錙錢錚錣錺錵錻鍜鍠鍼鍮鍖鎰鎬鎭鎔鎹鏖鏗鏨鏥鏘鏃鏝鏐鏈鏤鐚鐔鐓鐃鐇鐐鐶鐫鐵鐡鐺鑁鑒鑄鑛鑠鑢鑞鑪鈩鑰鑵鑷鑽鑚鑼鑾钁鑿閂閇閊閔閖閘閙閠閨閧閭閼閻閹閾闊濶闃闍闌闕闔闖關闡闥闢阡阨阮阯陂陌陏陋陷陜陞"
    	],
    	[
    		"f0a1",
    		"陝陟陦陲陬隍隘隕隗險隧隱隲隰隴隶隸隹雎雋雉雍襍雜霍雕雹霄霆霈霓霎霑霏霖霙霤霪霰霹霽霾靄靆靈靂靉靜靠靤靦靨勒靫靱靹鞅靼鞁靺鞆鞋鞏鞐鞜鞨鞦鞣鞳鞴韃韆韈韋韜韭齏韲竟韶韵頏頌頸頤頡頷頽顆顏顋顫顯顰"
    	],
    	[
    		"f1a1",
    		"顱顴顳颪颯颱颶飄飃飆飩飫餃餉餒餔餘餡餝餞餤餠餬餮餽餾饂饉饅饐饋饑饒饌饕馗馘馥馭馮馼駟駛駝駘駑駭駮駱駲駻駸騁騏騅駢騙騫騷驅驂驀驃騾驕驍驛驗驟驢驥驤驩驫驪骭骰骼髀髏髑髓體髞髟髢髣髦髯髫髮髴髱髷"
    	],
    	[
    		"f2a1",
    		"髻鬆鬘鬚鬟鬢鬣鬥鬧鬨鬩鬪鬮鬯鬲魄魃魏魍魎魑魘魴鮓鮃鮑鮖鮗鮟鮠鮨鮴鯀鯊鮹鯆鯏鯑鯒鯣鯢鯤鯔鯡鰺鯲鯱鯰鰕鰔鰉鰓鰌鰆鰈鰒鰊鰄鰮鰛鰥鰤鰡鰰鱇鰲鱆鰾鱚鱠鱧鱶鱸鳧鳬鳰鴉鴈鳫鴃鴆鴪鴦鶯鴣鴟鵄鴕鴒鵁鴿鴾鵆鵈"
    	],
    	[
    		"f3a1",
    		"鵝鵞鵤鵑鵐鵙鵲鶉鶇鶫鵯鵺鶚鶤鶩鶲鷄鷁鶻鶸鶺鷆鷏鷂鷙鷓鷸鷦鷭鷯鷽鸚鸛鸞鹵鹹鹽麁麈麋麌麒麕麑麝麥麩麸麪麭靡黌黎黏黐黔黜點黝黠黥黨黯黴黶黷黹黻黼黽鼇鼈皷鼕鼡鼬鼾齊齒齔齣齟齠齡齦齧齬齪齷齲齶龕龜龠"
    	],
    	[
    		"f4a1",
    		"堯槇遙瑤凜熙"
    	],
    	[
    		"f9a1",
    		"纊褜鍈銈蓜俉炻昱棈鋹曻彅丨仡仼伀伃伹佖侒侊侚侔俍偀倢俿倞偆偰偂傔僴僘兊兤冝冾凬刕劜劦勀勛匀匇匤卲厓厲叝﨎咜咊咩哿喆坙坥垬埈埇﨏塚增墲夋奓奛奝奣妤妺孖寀甯寘寬尞岦岺峵崧嵓﨑嵂嵭嶸嶹巐弡弴彧德"
    	],
    	[
    		"faa1",
    		"忞恝悅悊惞惕愠惲愑愷愰憘戓抦揵摠撝擎敎昀昕昻昉昮昞昤晥晗晙晴晳暙暠暲暿曺朎朗杦枻桒柀栁桄棏﨓楨﨔榘槢樰橫橆橳橾櫢櫤毖氿汜沆汯泚洄涇浯涖涬淏淸淲淼渹湜渧渼溿澈澵濵瀅瀇瀨炅炫焏焄煜煆煇凞燁燾犱"
    	],
    	[
    		"fba1",
    		"犾猤猪獷玽珉珖珣珒琇珵琦琪琩琮瑢璉璟甁畯皂皜皞皛皦益睆劯砡硎硤硺礰礼神祥禔福禛竑竧靖竫箞精絈絜綷綠緖繒罇羡羽茁荢荿菇菶葈蒴蕓蕙蕫﨟薰蘒﨡蠇裵訒訷詹誧誾諟諸諶譓譿賰賴贒赶﨣軏﨤逸遧郞都鄕鄧釚"
    	],
    	[
    		"fca1",
    		"釗釞釭釮釤釥鈆鈐鈊鈺鉀鈼鉎鉙鉑鈹鉧銧鉷鉸鋧鋗鋙鋐﨧鋕鋠鋓錥錡鋻﨨錞鋿錝錂鍰鍗鎤鏆鏞鏸鐱鑅鑈閒隆﨩隝隯霳霻靃靍靏靑靕顗顥飯飼餧館馞驎髙髜魵魲鮏鮱鮻鰀鵰鵫鶴鸙黑"
    	],
    	[
    		"fcf1",
    		"ⅰ",
    		9,
    		"￢￤＇＂"
    	],
    	[
    		"8fa2af",
    		"˘ˇ¸˙˝¯˛˚～΄΅"
    	],
    	[
    		"8fa2c2",
    		"¡¦¿"
    	],
    	[
    		"8fa2eb",
    		"ºª©®™¤№"
    	],
    	[
    		"8fa6e1",
    		"ΆΈΉΊΪ"
    	],
    	[
    		"8fa6e7",
    		"Ό"
    	],
    	[
    		"8fa6e9",
    		"ΎΫ"
    	],
    	[
    		"8fa6ec",
    		"Ώ"
    	],
    	[
    		"8fa6f1",
    		"άέήίϊΐόςύϋΰώ"
    	],
    	[
    		"8fa7c2",
    		"Ђ",
    		10,
    		"ЎЏ"
    	],
    	[
    		"8fa7f2",
    		"ђ",
    		10,
    		"ўџ"
    	],
    	[
    		"8fa9a1",
    		"ÆĐ"
    	],
    	[
    		"8fa9a4",
    		"Ħ"
    	],
    	[
    		"8fa9a6",
    		"Ĳ"
    	],
    	[
    		"8fa9a8",
    		"ŁĿ"
    	],
    	[
    		"8fa9ab",
    		"ŊØŒ"
    	],
    	[
    		"8fa9af",
    		"ŦÞ"
    	],
    	[
    		"8fa9c1",
    		"æđðħıĳĸłŀŉŋøœßŧþ"
    	],
    	[
    		"8faaa1",
    		"ÁÀÄÂĂǍĀĄÅÃĆĈČÇĊĎÉÈËÊĚĖĒĘ"
    	],
    	[
    		"8faaba",
    		"ĜĞĢĠĤÍÌÏÎǏİĪĮĨĴĶĹĽĻŃŇŅÑÓÒÖÔǑŐŌÕŔŘŖŚŜŠŞŤŢÚÙÜÛŬǓŰŪŲŮŨǗǛǙǕŴÝŸŶŹŽŻ"
    	],
    	[
    		"8faba1",
    		"áàäâăǎāąåãćĉčçċďéèëêěėēęǵĝğ"
    	],
    	[
    		"8fabbd",
    		"ġĥíìïîǐ"
    	],
    	[
    		"8fabc5",
    		"īįĩĵķĺľļńňņñóòöôǒőōõŕřŗśŝšşťţúùüûŭǔűūųůũǘǜǚǖŵýÿŷźžż"
    	],
    	[
    		"8fb0a1",
    		"丂丄丅丌丒丟丣两丨丫丮丯丰丵乀乁乄乇乑乚乜乣乨乩乴乵乹乿亍亖亗亝亯亹仃仐仚仛仠仡仢仨仯仱仳仵份仾仿伀伂伃伈伋伌伒伕伖众伙伮伱你伳伵伷伹伻伾佀佂佈佉佋佌佒佔佖佘佟佣佪佬佮佱佷佸佹佺佽佾侁侂侄"
    	],
    	[
    		"8fb1a1",
    		"侅侉侊侌侎侐侒侓侔侗侙侚侞侟侲侷侹侻侼侽侾俀俁俅俆俈俉俋俌俍俏俒俜俠俢俰俲俼俽俿倀倁倄倇倊倌倎倐倓倗倘倛倜倝倞倢倧倮倰倲倳倵偀偁偂偅偆偊偌偎偑偒偓偗偙偟偠偢偣偦偧偪偭偰偱倻傁傃傄傆傊傎傏傐"
    	],
    	[
    		"8fb2a1",
    		"傒傓傔傖傛傜傞",
    		4,
    		"傪傯傰傹傺傽僀僃僄僇僌僎僐僓僔僘僜僝僟僢僤僦僨僩僯僱僶僺僾儃儆儇儈儋儌儍儎僲儐儗儙儛儜儝儞儣儧儨儬儭儯儱儳儴儵儸儹兂兊兏兓兕兗兘兟兤兦兾冃冄冋冎冘冝冡冣冭冸冺冼冾冿凂"
    	],
    	[
    		"8fb3a1",
    		"凈减凑凒凓凕凘凞凢凥凮凲凳凴凷刁刂刅划刓刕刖刘刢刨刱刲刵刼剅剉剕剗剘剚剜剟剠剡剦剮剷剸剹劀劂劅劊劌劓劕劖劗劘劚劜劤劥劦劧劯劰劶劷劸劺劻劽勀勄勆勈勌勏勑勔勖勛勜勡勥勨勩勪勬勰勱勴勶勷匀匃匊匋"
    	],
    	[
    		"8fb4a1",
    		"匌匑匓匘匛匜匞匟匥匧匨匩匫匬匭匰匲匵匼匽匾卂卌卋卙卛卡卣卥卬卭卲卹卾厃厇厈厎厓厔厙厝厡厤厪厫厯厲厴厵厷厸厺厽叀叅叏叒叓叕叚叝叞叠另叧叵吂吓吚吡吧吨吪启吱吴吵呃呄呇呍呏呞呢呤呦呧呩呫呭呮呴呿"
    	],
    	[
    		"8fb5a1",
    		"咁咃咅咈咉咍咑咕咖咜咟咡咦咧咩咪咭咮咱咷咹咺咻咿哆哊响哎哠哪哬哯哶哼哾哿唀唁唅唈唉唌唍唎唕唪唫唲唵唶唻唼唽啁啇啉啊啍啐啑啘啚啛啞啠啡啤啦啿喁喂喆喈喎喏喑喒喓喔喗喣喤喭喲喿嗁嗃嗆嗉嗋嗌嗎嗑嗒"
    	],
    	[
    		"8fb6a1",
    		"嗓嗗嗘嗛嗞嗢嗩嗶嗿嘅嘈嘊嘍",
    		5,
    		"嘙嘬嘰嘳嘵嘷嘹嘻嘼嘽嘿噀噁噃噄噆噉噋噍噏噔噞噠噡噢噣噦噩噭噯噱噲噵嚄嚅嚈嚋嚌嚕嚙嚚嚝嚞嚟嚦嚧嚨嚩嚫嚬嚭嚱嚳嚷嚾囅囉囊囋囏囐囌囍囙囜囝囟囡囤",
    		4,
    		"囱囫园"
    	],
    	[
    		"8fb7a1",
    		"囶囷圁圂圇圊圌圑圕圚圛圝圠圢圣圤圥圩圪圬圮圯圳圴圽圾圿坅坆坌坍坒坢坥坧坨坫坭",
    		4,
    		"坳坴坵坷坹坺坻坼坾垁垃垌垔垗垙垚垜垝垞垟垡垕垧垨垩垬垸垽埇埈埌埏埕埝埞埤埦埧埩埭埰埵埶埸埽埾埿堃堄堈堉埡"
    	],
    	[
    		"8fb8a1",
    		"堌堍堛堞堟堠堦堧堭堲堹堿塉塌塍塏塐塕塟塡塤塧塨塸塼塿墀墁墇墈墉墊墌墍墏墐墔墖墝墠墡墢墦墩墱墲壄墼壂壈壍壎壐壒壔壖壚壝壡壢壩壳夅夆夋夌夒夓夔虁夝夡夣夤夨夯夰夳夵夶夿奃奆奒奓奙奛奝奞奟奡奣奫奭"
    	],
    	[
    		"8fb9a1",
    		"奯奲奵奶她奻奼妋妌妎妒妕妗妟妤妧妭妮妯妰妳妷妺妼姁姃姄姈姊姍姒姝姞姟姣姤姧姮姯姱姲姴姷娀娄娌娍娎娒娓娞娣娤娧娨娪娭娰婄婅婇婈婌婐婕婞婣婥婧婭婷婺婻婾媋媐媓媖媙媜媞媟媠媢媧媬媱媲媳媵媸媺媻媿"
    	],
    	[
    		"8fbaa1",
    		"嫄嫆嫈嫏嫚嫜嫠嫥嫪嫮嫵嫶嫽嬀嬁嬈嬗嬴嬙嬛嬝嬡嬥嬭嬸孁孋孌孒孖孞孨孮孯孼孽孾孿宁宄宆宊宎宐宑宓宔宖宨宩宬宭宯宱宲宷宺宼寀寁寍寏寖",
    		4,
    		"寠寯寱寴寽尌尗尞尟尣尦尩尫尬尮尰尲尵尶屙屚屜屢屣屧屨屩"
    	],
    	[
    		"8fbba1",
    		"屭屰屴屵屺屻屼屽岇岈岊岏岒岝岟岠岢岣岦岪岲岴岵岺峉峋峒峝峗峮峱峲峴崁崆崍崒崫崣崤崦崧崱崴崹崽崿嵂嵃嵆嵈嵕嵑嵙嵊嵟嵠嵡嵢嵤嵪嵭嵰嵹嵺嵾嵿嶁嶃嶈嶊嶒嶓嶔嶕嶙嶛嶟嶠嶧嶫嶰嶴嶸嶹巃巇巋巐巎巘巙巠巤"
    	],
    	[
    		"8fbca1",
    		"巩巸巹帀帇帍帒帔帕帘帟帠帮帨帲帵帾幋幐幉幑幖幘幛幜幞幨幪",
    		4,
    		"幰庀庋庎庢庤庥庨庪庬庱庳庽庾庿廆廌廋廎廑廒廔廕廜廞廥廫异弆弇弈弎弙弜弝弡弢弣弤弨弫弬弮弰弴弶弻弽弿彀彄彅彇彍彐彔彘彛彠彣彤彧"
    	],
    	[
    		"8fbda1",
    		"彯彲彴彵彸彺彽彾徉徍徏徖徜徝徢徧徫徤徬徯徰徱徸忄忇忈忉忋忐",
    		4,
    		"忞忡忢忨忩忪忬忭忮忯忲忳忶忺忼怇怊怍怓怔怗怘怚怟怤怭怳怵恀恇恈恉恌恑恔恖恗恝恡恧恱恾恿悂悆悈悊悎悑悓悕悘悝悞悢悤悥您悰悱悷"
    	],
    	[
    		"8fbea1",
    		"悻悾惂惄惈惉惊惋惎惏惔惕惙惛惝惞惢惥惲惵惸惼惽愂愇愊愌愐",
    		4,
    		"愖愗愙愜愞愢愪愫愰愱愵愶愷愹慁慅慆慉慞慠慬慲慸慻慼慿憀憁憃憄憋憍憒憓憗憘憜憝憟憠憥憨憪憭憸憹憼懀懁懂懎懏懕懜懝懞懟懡懢懧懩懥"
    	],
    	[
    		"8fbfa1",
    		"懬懭懯戁戃戄戇戓戕戜戠戢戣戧戩戫戹戽扂扃扄扆扌扐扑扒扔扖扚扜扤扭扯扳扺扽抍抎抏抐抦抨抳抶抷抺抾抿拄拎拕拖拚拪拲拴拼拽挃挄挊挋挍挐挓挖挘挩挪挭挵挶挹挼捁捂捃捄捆捊捋捎捒捓捔捘捛捥捦捬捭捱捴捵"
    	],
    	[
    		"8fc0a1",
    		"捸捼捽捿掂掄掇掊掐掔掕掙掚掞掤掦掭掮掯掽揁揅揈揎揑揓揔揕揜揠揥揪揬揲揳揵揸揹搉搊搐搒搔搘搞搠搢搤搥搩搪搯搰搵搽搿摋摏摑摒摓摔摚摛摜摝摟摠摡摣摭摳摴摻摽撅撇撏撐撑撘撙撛撝撟撡撣撦撨撬撳撽撾撿"
    	],
    	[
    		"8fc1a1",
    		"擄擉擊擋擌擎擐擑擕擗擤擥擩擪擭擰擵擷擻擿攁攄攈攉攊攏攓攔攖攙攛攞攟攢攦攩攮攱攺攼攽敃敇敉敐敒敔敟敠敧敫敺敽斁斅斊斒斕斘斝斠斣斦斮斲斳斴斿旂旈旉旎旐旔旖旘旟旰旲旴旵旹旾旿昀昄昈昉昍昑昒昕昖昝"
    	],
    	[
    		"8fc2a1",
    		"昞昡昢昣昤昦昩昪昫昬昮昰昱昳昹昷晀晅晆晊晌晑晎晗晘晙晛晜晠晡曻晪晫晬晾晳晵晿晷晸晹晻暀晼暋暌暍暐暒暙暚暛暜暟暠暤暭暱暲暵暻暿曀曂曃曈曌曎曏曔曛曟曨曫曬曮曺朅朇朎朓朙朜朠朢朳朾杅杇杈杌杔杕杝"
    	],
    	[
    		"8fc3a1",
    		"杦杬杮杴杶杻极构枎枏枑枓枖枘枙枛枰枱枲枵枻枼枽柹柀柂柃柅柈柉柒柗柙柜柡柦柰柲柶柷桒栔栙栝栟栨栧栬栭栯栰栱栳栻栿桄桅桊桌桕桗桘桛桫桮",
    		4,
    		"桵桹桺桻桼梂梄梆梈梖梘梚梜梡梣梥梩梪梮梲梻棅棈棌棏"
    	],
    	[
    		"8fc4a1",
    		"棐棑棓棖棙棜棝棥棨棪棫棬棭棰棱棵棶棻棼棽椆椉椊椐椑椓椖椗椱椳椵椸椻楂楅楉楎楗楛楣楤楥楦楨楩楬楰楱楲楺楻楿榀榍榒榖榘榡榥榦榨榫榭榯榷榸榺榼槅槈槑槖槗槢槥槮槯槱槳槵槾樀樁樃樏樑樕樚樝樠樤樨樰樲"
    	],
    	[
    		"8fc5a1",
    		"樴樷樻樾樿橅橆橉橊橎橐橑橒橕橖橛橤橧橪橱橳橾檁檃檆檇檉檋檑檛檝檞檟檥檫檯檰檱檴檽檾檿櫆櫉櫈櫌櫐櫔櫕櫖櫜櫝櫤櫧櫬櫰櫱櫲櫼櫽欂欃欆欇欉欏欐欑欗欛欞欤欨欫欬欯欵欶欻欿歆歊歍歒歖歘歝歠歧歫歮歰歵歽"
    	],
    	[
    		"8fc6a1",
    		"歾殂殅殗殛殟殠殢殣殨殩殬殭殮殰殸殹殽殾毃毄毉毌毖毚毡毣毦毧毮毱毷毹毿氂氄氅氉氍氎氐氒氙氟氦氧氨氬氮氳氵氶氺氻氿汊汋汍汏汒汔汙汛汜汫汭汯汴汶汸汹汻沅沆沇沉沔沕沗沘沜沟沰沲沴泂泆泍泏泐泑泒泔泖"
    	],
    	[
    		"8fc7a1",
    		"泚泜泠泧泩泫泬泮泲泴洄洇洊洎洏洑洓洚洦洧洨汧洮洯洱洹洼洿浗浞浟浡浥浧浯浰浼涂涇涑涒涔涖涗涘涪涬涴涷涹涽涿淄淈淊淎淏淖淛淝淟淠淢淥淩淯淰淴淶淼渀渄渞渢渧渲渶渹渻渼湄湅湈湉湋湏湑湒湓湔湗湜湝湞"
    	],
    	[
    		"8fc8a1",
    		"湢湣湨湳湻湽溍溓溙溠溧溭溮溱溳溻溿滀滁滃滇滈滊滍滎滏滫滭滮滹滻滽漄漈漊漌漍漖漘漚漛漦漩漪漯漰漳漶漻漼漭潏潑潒潓潗潙潚潝潞潡潢潨潬潽潾澃澇澈澋澌澍澐澒澓澔澖澚澟澠澥澦澧澨澮澯澰澵澶澼濅濇濈濊"
    	],
    	[
    		"8fc9a1",
    		"濚濞濨濩濰濵濹濼濽瀀瀅瀆瀇瀍瀗瀠瀣瀯瀴瀷瀹瀼灃灄灈灉灊灋灔灕灝灞灎灤灥灬灮灵灶灾炁炅炆炔",
    		4,
    		"炛炤炫炰炱炴炷烊烑烓烔烕烖烘烜烤烺焃",
    		4,
    		"焋焌焏焞焠焫焭焯焰焱焸煁煅煆煇煊煋煐煒煗煚煜煞煠"
    	],
    	[
    		"8fcaa1",
    		"煨煹熀熅熇熌熒熚熛熠熢熯熰熲熳熺熿燀燁燄燋燌燓燖燙燚燜燸燾爀爇爈爉爓爗爚爝爟爤爫爯爴爸爹牁牂牃牅牎牏牐牓牕牖牚牜牞牠牣牨牫牮牯牱牷牸牻牼牿犄犉犍犎犓犛犨犭犮犱犴犾狁狇狉狌狕狖狘狟狥狳狴狺狻"
    	],
    	[
    		"8fcba1",
    		"狾猂猄猅猇猋猍猒猓猘猙猞猢猤猧猨猬猱猲猵猺猻猽獃獍獐獒獖獘獝獞獟獠獦獧獩獫獬獮獯獱獷獹獼玀玁玃玅玆玎玐玓玕玗玘玜玞玟玠玢玥玦玪玫玭玵玷玹玼玽玿珅珆珉珋珌珏珒珓珖珙珝珡珣珦珧珩珴珵珷珹珺珻珽"
    	],
    	[
    		"8fcca1",
    		"珿琀琁琄琇琊琑琚琛琤琦琨",
    		9,
    		"琹瑀瑃瑄瑆瑇瑋瑍瑑瑒瑗瑝瑢瑦瑧瑨瑫瑭瑮瑱瑲璀璁璅璆璇璉璏璐璑璒璘璙璚璜璟璠璡璣璦璨璩璪璫璮璯璱璲璵璹璻璿瓈瓉瓌瓐瓓瓘瓚瓛瓞瓟瓤瓨瓪瓫瓯瓴瓺瓻瓼瓿甆"
    	],
    	[
    		"8fcda1",
    		"甒甖甗甠甡甤甧甩甪甯甶甹甽甾甿畀畃畇畈畎畐畒畗畞畟畡畯畱畹",
    		5,
    		"疁疅疐疒疓疕疙疜疢疤疴疺疿痀痁痄痆痌痎痏痗痜痟痠痡痤痧痬痮痯痱痹瘀瘂瘃瘄瘇瘈瘊瘌瘏瘒瘓瘕瘖瘙瘛瘜瘝瘞瘣瘥瘦瘩瘭瘲瘳瘵瘸瘹"
    	],
    	[
    		"8fcea1",
    		"瘺瘼癊癀癁癃癄癅癉癋癕癙癟癤癥癭癮癯癱癴皁皅皌皍皕皛皜皝皟皠皢",
    		6,
    		"皪皭皽盁盅盉盋盌盎盔盙盠盦盨盬盰盱盶盹盼眀眆眊眎眒眔眕眗眙眚眜眢眨眭眮眯眴眵眶眹眽眾睂睅睆睊睍睎睏睒睖睗睜睞睟睠睢"
    	],
    	[
    		"8fcfa1",
    		"睤睧睪睬睰睲睳睴睺睽瞀瞄瞌瞍瞔瞕瞖瞚瞟瞢瞧瞪瞮瞯瞱瞵瞾矃矉矑矒矕矙矞矟矠矤矦矪矬矰矱矴矸矻砅砆砉砍砎砑砝砡砢砣砭砮砰砵砷硃硄硇硈硌硎硒硜硞硠硡硣硤硨硪确硺硾碊碏碔碘碡碝碞碟碤碨碬碭碰碱碲碳"
    	],
    	[
    		"8fd0a1",
    		"碻碽碿磇磈磉磌磎磒磓磕磖磤磛磟磠磡磦磪磲磳礀磶磷磺磻磿礆礌礐礚礜礞礟礠礥礧礩礭礱礴礵礻礽礿祄祅祆祊祋祏祑祔祘祛祜祧祩祫祲祹祻祼祾禋禌禑禓禔禕禖禘禛禜禡禨禩禫禯禱禴禸离秂秄秇秈秊秏秔秖秚秝秞"
    	],
    	[
    		"8fd1a1",
    		"秠秢秥秪秫秭秱秸秼稂稃稇稉稊稌稑稕稛稞稡稧稫稭稯稰稴稵稸稹稺穄穅穇穈穌穕穖穙穜穝穟穠穥穧穪穭穵穸穾窀窂窅窆窊窋窐窑窔窞窠窣窬窳窵窹窻窼竆竉竌竎竑竛竨竩竫竬竱竴竻竽竾笇笔笟笣笧笩笪笫笭笮笯笰"
    	],
    	[
    		"8fd2a1",
    		"笱笴笽笿筀筁筇筎筕筠筤筦筩筪筭筯筲筳筷箄箉箎箐箑箖箛箞箠箥箬箯箰箲箵箶箺箻箼箽篂篅篈篊篔篖篗篙篚篛篨篪篲篴篵篸篹篺篼篾簁簂簃簄簆簉簋簌簎簏簙簛簠簥簦簨簬簱簳簴簶簹簺籆籊籕籑籒籓籙",
    		5
    	],
    	[
    		"8fd3a1",
    		"籡籣籧籩籭籮籰籲籹籼籽粆粇粏粔粞粠粦粰粶粷粺粻粼粿糄糇糈糉糍糏糓糔糕糗糙糚糝糦糩糫糵紃紇紈紉紏紑紒紓紖紝紞紣紦紪紭紱紼紽紾絀絁絇絈絍絑絓絗絙絚絜絝絥絧絪絰絸絺絻絿綁綂綃綅綆綈綋綌綍綑綖綗綝"
    	],
    	[
    		"8fd4a1",
    		"綞綦綧綪綳綶綷綹緂",
    		4,
    		"緌緍緎緗緙縀緢緥緦緪緫緭緱緵緶緹緺縈縐縑縕縗縜縝縠縧縨縬縭縯縳縶縿繄繅繇繎繐繒繘繟繡繢繥繫繮繯繳繸繾纁纆纇纊纍纑纕纘纚纝纞缼缻缽缾缿罃罄罇罏罒罓罛罜罝罡罣罤罥罦罭"
    	],
    	[
    		"8fd5a1",
    		"罱罽罾罿羀羋羍羏羐羑羖羗羜羡羢羦羪羭羴羼羿翀翃翈翎翏翛翟翣翥翨翬翮翯翲翺翽翾翿耇耈耊耍耎耏耑耓耔耖耝耞耟耠耤耦耬耮耰耴耵耷耹耺耼耾聀聄聠聤聦聭聱聵肁肈肎肜肞肦肧肫肸肹胈胍胏胒胔胕胗胘胠胭胮"
    	],
    	[
    		"8fd6a1",
    		"胰胲胳胶胹胺胾脃脋脖脗脘脜脞脠脤脧脬脰脵脺脼腅腇腊腌腒腗腠腡腧腨腩腭腯腷膁膐膄膅膆膋膎膖膘膛膞膢膮膲膴膻臋臃臅臊臎臏臕臗臛臝臞臡臤臫臬臰臱臲臵臶臸臹臽臿舀舃舏舓舔舙舚舝舡舢舨舲舴舺艃艄艅艆"
    	],
    	[
    		"8fd7a1",
    		"艋艎艏艑艖艜艠艣艧艭艴艻艽艿芀芁芃芄芇芉芊芎芑芔芖芘芚芛芠芡芣芤芧芨芩芪芮芰芲芴芷芺芼芾芿苆苐苕苚苠苢苤苨苪苭苯苶苷苽苾茀茁茇茈茊茋荔茛茝茞茟茡茢茬茭茮茰茳茷茺茼茽荂荃荄荇荍荎荑荕荖荗荰荸"
    	],
    	[
    		"8fd8a1",
    		"荽荿莀莂莄莆莍莒莔莕莘莙莛莜莝莦莧莩莬莾莿菀菇菉菏菐菑菔菝荓菨菪菶菸菹菼萁萆萊萏萑萕萙莭萯萹葅葇葈葊葍葏葑葒葖葘葙葚葜葠葤葥葧葪葰葳葴葶葸葼葽蒁蒅蒒蒓蒕蒞蒦蒨蒩蒪蒯蒱蒴蒺蒽蒾蓀蓂蓇蓈蓌蓏蓓"
    	],
    	[
    		"8fd9a1",
    		"蓜蓧蓪蓯蓰蓱蓲蓷蔲蓺蓻蓽蔂蔃蔇蔌蔎蔐蔜蔞蔢蔣蔤蔥蔧蔪蔫蔯蔳蔴蔶蔿蕆蕏",
    		4,
    		"蕖蕙蕜",
    		6,
    		"蕤蕫蕯蕹蕺蕻蕽蕿薁薅薆薉薋薌薏薓薘薝薟薠薢薥薧薴薶薷薸薼薽薾薿藂藇藊藋藎薭藘藚藟藠藦藨藭藳藶藼"
    	],
    	[
    		"8fdaa1",
    		"藿蘀蘄蘅蘍蘎蘐蘑蘒蘘蘙蘛蘞蘡蘧蘩蘶蘸蘺蘼蘽虀虂虆虒虓虖虗虘虙虝虠",
    		4,
    		"虩虬虯虵虶虷虺蚍蚑蚖蚘蚚蚜蚡蚦蚧蚨蚭蚱蚳蚴蚵蚷蚸蚹蚿蛀蛁蛃蛅蛑蛒蛕蛗蛚蛜蛠蛣蛥蛧蚈蛺蛼蛽蜄蜅蜇蜋蜎蜏蜐蜓蜔蜙蜞蜟蜡蜣"
    	],
    	[
    		"8fdba1",
    		"蜨蜮蜯蜱蜲蜹蜺蜼蜽蜾蝀蝃蝅蝍蝘蝝蝡蝤蝥蝯蝱蝲蝻螃",
    		6,
    		"螋螌螐螓螕螗螘螙螞螠螣螧螬螭螮螱螵螾螿蟁蟈蟉蟊蟎蟕蟖蟙蟚蟜蟟蟢蟣蟤蟪蟫蟭蟱蟳蟸蟺蟿蠁蠃蠆蠉蠊蠋蠐蠙蠒蠓蠔蠘蠚蠛蠜蠞蠟蠨蠭蠮蠰蠲蠵"
    	],
    	[
    		"8fdca1",
    		"蠺蠼衁衃衅衈衉衊衋衎衑衕衖衘衚衜衟衠衤衩衱衹衻袀袘袚袛袜袟袠袨袪袺袽袾裀裊",
    		4,
    		"裑裒裓裛裞裧裯裰裱裵裷褁褆褍褎褏褕褖褘褙褚褜褠褦褧褨褰褱褲褵褹褺褾襀襂襅襆襉襏襒襗襚襛襜襡襢襣襫襮襰襳襵襺"
    	],
    	[
    		"8fdda1",
    		"襻襼襽覉覍覐覔覕覛覜覟覠覥覰覴覵覶覷覼觔",
    		4,
    		"觥觩觫觭觱觳觶觹觽觿訄訅訇訏訑訒訔訕訞訠訢訤訦訫訬訯訵訷訽訾詀詃詅詇詉詍詎詓詖詗詘詜詝詡詥詧詵詶詷詹詺詻詾詿誀誃誆誋誏誐誒誖誗誙誟誧誩誮誯誳"
    	],
    	[
    		"8fdea1",
    		"誶誷誻誾諃諆諈諉諊諑諓諔諕諗諝諟諬諰諴諵諶諼諿謅謆謋謑謜謞謟謊謭謰謷謼譂",
    		4,
    		"譈譒譓譔譙譍譞譣譭譶譸譹譼譾讁讄讅讋讍讏讔讕讜讞讟谸谹谽谾豅豇豉豋豏豑豓豔豗豘豛豝豙豣豤豦豨豩豭豳豵豶豻豾貆"
    	],
    	[
    		"8fdfa1",
    		"貇貋貐貒貓貙貛貜貤貹貺賅賆賉賋賏賖賕賙賝賡賨賬賯賰賲賵賷賸賾賿贁贃贉贒贗贛赥赩赬赮赿趂趄趈趍趐趑趕趞趟趠趦趫趬趯趲趵趷趹趻跀跅跆跇跈跊跎跑跔跕跗跙跤跥跧跬跰趼跱跲跴跽踁踄踅踆踋踑踔踖踠踡踢"
    	],
    	[
    		"8fe0a1",
    		"踣踦踧踱踳踶踷踸踹踽蹀蹁蹋蹍蹎蹏蹔蹛蹜蹝蹞蹡蹢蹩蹬蹭蹯蹰蹱蹹蹺蹻躂躃躉躐躒躕躚躛躝躞躢躧躩躭躮躳躵躺躻軀軁軃軄軇軏軑軔軜軨軮軰軱軷軹軺軭輀輂輇輈輏輐輖輗輘輞輠輡輣輥輧輨輬輭輮輴輵輶輷輺轀轁"
    	],
    	[
    		"8fe1a1",
    		"轃轇轏轑",
    		4,
    		"轘轝轞轥辝辠辡辤辥辦辵辶辸达迀迁迆迊迋迍运迒迓迕迠迣迤迨迮迱迵迶迻迾适逄逈逌逘逛逨逩逯逪逬逭逳逴逷逿遃遄遌遛遝遢遦遧遬遰遴遹邅邈邋邌邎邐邕邗邘邙邛邠邡邢邥邰邲邳邴邶邽郌邾郃"
    	],
    	[
    		"8fe2a1",
    		"郄郅郇郈郕郗郘郙郜郝郟郥郒郶郫郯郰郴郾郿鄀鄄鄅鄆鄈鄍鄐鄔鄖鄗鄘鄚鄜鄞鄠鄥鄢鄣鄧鄩鄮鄯鄱鄴鄶鄷鄹鄺鄼鄽酃酇酈酏酓酗酙酚酛酡酤酧酭酴酹酺酻醁醃醅醆醊醎醑醓醔醕醘醞醡醦醨醬醭醮醰醱醲醳醶醻醼醽醿"
    	],
    	[
    		"8fe3a1",
    		"釂釃釅釓釔釗釙釚釞釤釥釩釪釬",
    		5,
    		"釷釹釻釽鈀鈁鈄鈅鈆鈇鈉鈊鈌鈐鈒鈓鈖鈘鈜鈝鈣鈤鈥鈦鈨鈮鈯鈰鈳鈵鈶鈸鈹鈺鈼鈾鉀鉂鉃鉆鉇鉊鉍鉎鉏鉑鉘鉙鉜鉝鉠鉡鉥鉧鉨鉩鉮鉯鉰鉵",
    		4,
    		"鉻鉼鉽鉿銈銉銊銍銎銒銗"
    	],
    	[
    		"8fe4a1",
    		"銙銟銠銤銥銧銨銫銯銲銶銸銺銻銼銽銿",
    		4,
    		"鋅鋆鋇鋈鋋鋌鋍鋎鋐鋓鋕鋗鋘鋙鋜鋝鋟鋠鋡鋣鋥鋧鋨鋬鋮鋰鋹鋻鋿錀錂錈錍錑錔錕錜錝錞錟錡錤錥錧錩錪錳錴錶錷鍇鍈鍉鍐鍑鍒鍕鍗鍘鍚鍞鍤鍥鍧鍩鍪鍭鍯鍰鍱鍳鍴鍶"
    	],
    	[
    		"8fe5a1",
    		"鍺鍽鍿鎀鎁鎂鎈鎊鎋鎍鎏鎒鎕鎘鎛鎞鎡鎣鎤鎦鎨鎫鎴鎵鎶鎺鎩鏁鏄鏅鏆鏇鏉",
    		4,
    		"鏓鏙鏜鏞鏟鏢鏦鏧鏹鏷鏸鏺鏻鏽鐁鐂鐄鐈鐉鐍鐎鐏鐕鐖鐗鐟鐮鐯鐱鐲鐳鐴鐻鐿鐽鑃鑅鑈鑊鑌鑕鑙鑜鑟鑡鑣鑨鑫鑭鑮鑯鑱鑲钄钃镸镹"
    	],
    	[
    		"8fe6a1",
    		"镾閄閈閌閍閎閝閞閟閡閦閩閫閬閴閶閺閽閿闆闈闉闋闐闑闒闓闙闚闝闞闟闠闤闦阝阞阢阤阥阦阬阱阳阷阸阹阺阼阽陁陒陔陖陗陘陡陮陴陻陼陾陿隁隂隃隄隉隑隖隚隝隟隤隥隦隩隮隯隳隺雊雒嶲雘雚雝雞雟雩雯雱雺霂"
    	],
    	[
    		"8fe7a1",
    		"霃霅霉霚霛霝霡霢霣霨霱霳靁靃靊靎靏靕靗靘靚靛靣靧靪靮靳靶靷靸靻靽靿鞀鞉鞕鞖鞗鞙鞚鞞鞟鞢鞬鞮鞱鞲鞵鞶鞸鞹鞺鞼鞾鞿韁韄韅韇韉韊韌韍韎韐韑韔韗韘韙韝韞韠韛韡韤韯韱韴韷韸韺頇頊頙頍頎頔頖頜頞頠頣頦"
    	],
    	[
    		"8fe8a1",
    		"頫頮頯頰頲頳頵頥頾顄顇顊顑顒顓顖顗顙顚顢顣顥顦顪顬颫颭颮颰颴颷颸颺颻颿飂飅飈飌飡飣飥飦飧飪飳飶餂餇餈餑餕餖餗餚餛餜餟餢餦餧餫餱",
    		4,
    		"餹餺餻餼饀饁饆饇饈饍饎饔饘饙饛饜饞饟饠馛馝馟馦馰馱馲馵"
    	],
    	[
    		"8fe9a1",
    		"馹馺馽馿駃駉駓駔駙駚駜駞駧駪駫駬駰駴駵駹駽駾騂騃騄騋騌騐騑騖騞騠騢騣騤騧騭騮騳騵騶騸驇驁驄驊驋驌驎驑驔驖驝骪骬骮骯骲骴骵骶骹骻骾骿髁髃髆髈髎髐髒髕髖髗髛髜髠髤髥髧髩髬髲髳髵髹髺髽髿",
    		4
    	],
    	[
    		"8feaa1",
    		"鬄鬅鬈鬉鬋鬌鬍鬎鬐鬒鬖鬙鬛鬜鬠鬦鬫鬭鬳鬴鬵鬷鬹鬺鬽魈魋魌魕魖魗魛魞魡魣魥魦魨魪",
    		4,
    		"魳魵魷魸魹魿鮀鮄鮅鮆鮇鮉鮊鮋鮍鮏鮐鮔鮚鮝鮞鮦鮧鮩鮬鮰鮱鮲鮷鮸鮻鮼鮾鮿鯁鯇鯈鯎鯐鯗鯘鯝鯟鯥鯧鯪鯫鯯鯳鯷鯸"
    	],
    	[
    		"8feba1",
    		"鯹鯺鯽鯿鰀鰂鰋鰏鰑鰖鰘鰙鰚鰜鰞鰢鰣鰦",
    		4,
    		"鰱鰵鰶鰷鰽鱁鱃鱄鱅鱉鱊鱎鱏鱐鱓鱔鱖鱘鱛鱝鱞鱟鱣鱩鱪鱜鱫鱨鱮鱰鱲鱵鱷鱻鳦鳲鳷鳹鴋鴂鴑鴗鴘鴜鴝鴞鴯鴰鴲鴳鴴鴺鴼鵅鴽鵂鵃鵇鵊鵓鵔鵟鵣鵢鵥鵩鵪鵫鵰鵶鵷鵻"
    	],
    	[
    		"8feca1",
    		"鵼鵾鶃鶄鶆鶊鶍鶎鶒鶓鶕鶖鶗鶘鶡鶪鶬鶮鶱鶵鶹鶼鶿鷃鷇鷉鷊鷔鷕鷖鷗鷚鷞鷟鷠鷥鷧鷩鷫鷮鷰鷳鷴鷾鸊鸂鸇鸎鸐鸑鸒鸕鸖鸙鸜鸝鹺鹻鹼麀麂麃麄麅麇麎麏麖麘麛麞麤麨麬麮麯麰麳麴麵黆黈黋黕黟黤黧黬黭黮黰黱黲黵"
    	],
    	[
    		"8feda1",
    		"黸黿鼂鼃鼉鼏鼐鼑鼒鼔鼖鼗鼙鼚鼛鼟鼢鼦鼪鼫鼯鼱鼲鼴鼷鼹鼺鼼鼽鼿齁齃",
    		4,
    		"齓齕齖齗齘齚齝齞齨齩齭",
    		4,
    		"齳齵齺齽龏龐龑龒龔龖龗龞龡龢龣龥"
    	]
    ];

    var require$$2 = [
    	[
    		"0",
    		"\u0000",
    		127,
    		"€"
    	],
    	[
    		"8140",
    		"丂丄丅丆丏丒丗丟丠両丣並丩丮丯丱丳丵丷丼乀乁乂乄乆乊乑乕乗乚乛乢乣乤乥乧乨乪",
    		5,
    		"乲乴",
    		9,
    		"乿",
    		6,
    		"亇亊"
    	],
    	[
    		"8180",
    		"亐亖亗亙亜亝亞亣亪亯亰亱亴亶亷亸亹亼亽亾仈仌仏仐仒仚仛仜仠仢仦仧仩仭仮仯仱仴仸仹仺仼仾伀伂",
    		6,
    		"伋伌伒",
    		4,
    		"伜伝伡伣伨伩伬伭伮伱伳伵伷伹伻伾",
    		4,
    		"佄佅佇",
    		5,
    		"佒佔佖佡佢佦佨佪佫佭佮佱佲併佷佸佹佺佽侀侁侂侅來侇侊侌侎侐侒侓侕侖侘侙侚侜侞侟価侢"
    	],
    	[
    		"8240",
    		"侤侫侭侰",
    		4,
    		"侶",
    		8,
    		"俀俁係俆俇俈俉俋俌俍俒",
    		4,
    		"俙俛俠俢俤俥俧俫俬俰俲俴俵俶俷俹俻俼俽俿",
    		11
    	],
    	[
    		"8280",
    		"個倎倐們倓倕倖倗倛倝倞倠倢倣値倧倫倯",
    		10,
    		"倻倽倿偀偁偂偄偅偆偉偊偋偍偐",
    		4,
    		"偖偗偘偙偛偝",
    		7,
    		"偦",
    		5,
    		"偭",
    		8,
    		"偸偹偺偼偽傁傂傃傄傆傇傉傊傋傌傎",
    		20,
    		"傤傦傪傫傭",
    		4,
    		"傳",
    		6,
    		"傼"
    	],
    	[
    		"8340",
    		"傽",
    		17,
    		"僐",
    		5,
    		"僗僘僙僛",
    		10,
    		"僨僩僪僫僯僰僱僲僴僶",
    		4,
    		"僼",
    		9,
    		"儈"
    	],
    	[
    		"8380",
    		"儉儊儌",
    		5,
    		"儓",
    		13,
    		"儢",
    		28,
    		"兂兇兊兌兎兏児兒兓兗兘兙兛兝",
    		4,
    		"兣兤兦內兩兪兯兲兺兾兿冃冄円冇冊冋冎冏冐冑冓冔冘冚冝冞冟冡冣冦",
    		4,
    		"冭冮冴冸冹冺冾冿凁凂凃凅凈凊凍凎凐凒",
    		5
    	],
    	[
    		"8440",
    		"凘凙凚凜凞凟凢凣凥",
    		5,
    		"凬凮凱凲凴凷凾刄刅刉刋刌刏刐刓刔刕刜刞刟刡刢刣別刦刧刪刬刯刱刲刴刵刼刾剄",
    		5,
    		"剋剎剏剒剓剕剗剘"
    	],
    	[
    		"8480",
    		"剙剚剛剝剟剠剢剣剤剦剨剫剬剭剮剰剱剳",
    		9,
    		"剾劀劃",
    		4,
    		"劉",
    		6,
    		"劑劒劔",
    		6,
    		"劜劤劥劦劧劮劯劰労",
    		9,
    		"勀勁勂勄勅勆勈勊勌勍勎勏勑勓勔動勗務",
    		5,
    		"勠勡勢勣勥",
    		10,
    		"勱",
    		7,
    		"勻勼勽匁匂匃匄匇匉匊匋匌匎"
    	],
    	[
    		"8540",
    		"匑匒匓匔匘匛匜匞匟匢匤匥匧匨匩匫匬匭匯",
    		9,
    		"匼匽區卂卄卆卋卌卍卐協単卙卛卝卥卨卪卬卭卲卶卹卻卼卽卾厀厁厃厇厈厊厎厏"
    	],
    	[
    		"8580",
    		"厐",
    		4,
    		"厖厗厙厛厜厞厠厡厤厧厪厫厬厭厯",
    		6,
    		"厷厸厹厺厼厽厾叀參",
    		4,
    		"収叏叐叒叓叕叚叜叝叞叡叢叧叴叺叾叿吀吂吅吇吋吔吘吙吚吜吢吤吥吪吰吳吶吷吺吽吿呁呂呄呅呇呉呌呍呎呏呑呚呝",
    		4,
    		"呣呥呧呩",
    		7,
    		"呴呹呺呾呿咁咃咅咇咈咉咊咍咑咓咗咘咜咞咟咠咡"
    	],
    	[
    		"8640",
    		"咢咥咮咰咲咵咶咷咹咺咼咾哃哅哊哋哖哘哛哠",
    		4,
    		"哫哬哯哰哱哴",
    		5,
    		"哻哾唀唂唃唄唅唈唊",
    		4,
    		"唒唓唕",
    		5,
    		"唜唝唞唟唡唥唦"
    	],
    	[
    		"8680",
    		"唨唩唫唭唲唴唵唶唸唹唺唻唽啀啂啅啇啈啋",
    		4,
    		"啑啒啓啔啗",
    		4,
    		"啝啞啟啠啢啣啨啩啫啯",
    		5,
    		"啹啺啽啿喅喆喌喍喎喐喒喓喕喖喗喚喛喞喠",
    		6,
    		"喨",
    		8,
    		"喲喴営喸喺喼喿",
    		4,
    		"嗆嗇嗈嗊嗋嗎嗏嗐嗕嗗",
    		4,
    		"嗞嗠嗢嗧嗩嗭嗮嗰嗱嗴嗶嗸",
    		4,
    		"嗿嘂嘃嘄嘅"
    	],
    	[
    		"8740",
    		"嘆嘇嘊嘋嘍嘐",
    		7,
    		"嘙嘚嘜嘝嘠嘡嘢嘥嘦嘨嘩嘪嘫嘮嘯嘰嘳嘵嘷嘸嘺嘼嘽嘾噀",
    		11,
    		"噏",
    		4,
    		"噕噖噚噛噝",
    		4
    	],
    	[
    		"8780",
    		"噣噥噦噧噭噮噯噰噲噳噴噵噷噸噹噺噽",
    		7,
    		"嚇",
    		6,
    		"嚐嚑嚒嚔",
    		14,
    		"嚤",
    		10,
    		"嚰",
    		6,
    		"嚸嚹嚺嚻嚽",
    		12,
    		"囋",
    		8,
    		"囕囖囘囙囜団囥",
    		5,
    		"囬囮囯囲図囶囷囸囻囼圀圁圂圅圇國",
    		6
    	],
    	[
    		"8840",
    		"園",
    		9,
    		"圝圞圠圡圢圤圥圦圧圫圱圲圴",
    		4,
    		"圼圽圿坁坃坄坅坆坈坉坋坒",
    		4,
    		"坘坙坢坣坥坧坬坮坰坱坲坴坵坸坹坺坽坾坿垀"
    	],
    	[
    		"8880",
    		"垁垇垈垉垊垍",
    		4,
    		"垔",
    		6,
    		"垜垝垞垟垥垨垪垬垯垰垱垳垵垶垷垹",
    		8,
    		"埄",
    		6,
    		"埌埍埐埑埓埖埗埛埜埞埡埢埣埥",
    		7,
    		"埮埰埱埲埳埵埶執埻埼埾埿堁堃堄堅堈堉堊堌堎堏堐堒堓堔堖堗堘堚堛堜堝堟堢堣堥",
    		4,
    		"堫",
    		4,
    		"報堲堳場堶",
    		7
    	],
    	[
    		"8940",
    		"堾",
    		5,
    		"塅",
    		6,
    		"塎塏塐塒塓塕塖塗塙",
    		4,
    		"塟",
    		5,
    		"塦",
    		4,
    		"塭",
    		16,
    		"塿墂墄墆墇墈墊墋墌"
    	],
    	[
    		"8980",
    		"墍",
    		4,
    		"墔",
    		4,
    		"墛墜墝墠",
    		7,
    		"墪",
    		17,
    		"墽墾墿壀壂壃壄壆",
    		10,
    		"壒壓壔壖",
    		13,
    		"壥",
    		5,
    		"壭壯壱売壴壵壷壸壺",
    		7,
    		"夃夅夆夈",
    		4,
    		"夎夐夑夒夓夗夘夛夝夞夠夡夢夣夦夨夬夰夲夳夵夶夻"
    	],
    	[
    		"8a40",
    		"夽夾夿奀奃奅奆奊奌奍奐奒奓奙奛",
    		4,
    		"奡奣奤奦",
    		12,
    		"奵奷奺奻奼奾奿妀妅妉妋妌妎妏妐妑妔妕妘妚妛妜妝妟妠妡妢妦"
    	],
    	[
    		"8a80",
    		"妧妬妭妰妱妳",
    		5,
    		"妺妼妽妿",
    		6,
    		"姇姈姉姌姍姎姏姕姖姙姛姞",
    		4,
    		"姤姦姧姩姪姫姭",
    		11,
    		"姺姼姽姾娀娂娊娋娍娎娏娐娒娔娕娖娗娙娚娛娝娞娡娢娤娦娧娨娪",
    		6,
    		"娳娵娷",
    		4,
    		"娽娾娿婁",
    		4,
    		"婇婈婋",
    		9,
    		"婖婗婘婙婛",
    		5
    	],
    	[
    		"8b40",
    		"婡婣婤婥婦婨婩婫",
    		8,
    		"婸婹婻婼婽婾媀",
    		17,
    		"媓",
    		6,
    		"媜",
    		13,
    		"媫媬"
    	],
    	[
    		"8b80",
    		"媭",
    		4,
    		"媴媶媷媹",
    		4,
    		"媿嫀嫃",
    		5,
    		"嫊嫋嫍",
    		4,
    		"嫓嫕嫗嫙嫚嫛嫝嫞嫟嫢嫤嫥嫧嫨嫪嫬",
    		4,
    		"嫲",
    		22,
    		"嬊",
    		11,
    		"嬘",
    		25,
    		"嬳嬵嬶嬸",
    		7,
    		"孁",
    		6
    	],
    	[
    		"8c40",
    		"孈",
    		7,
    		"孒孖孞孠孡孧孨孫孭孮孯孲孴孶孷學孹孻孼孾孿宂宆宊宍宎宐宑宒宔宖実宧宨宩宬宭宮宯宱宲宷宺宻宼寀寁寃寈寉寊寋寍寎寏"
    	],
    	[
    		"8c80",
    		"寑寔",
    		8,
    		"寠寢寣實寧審",
    		4,
    		"寯寱",
    		6,
    		"寽対尀専尃尅將專尋尌對導尐尒尓尗尙尛尞尟尠尡尣尦尨尩尪尫尭尮尯尰尲尳尵尶尷屃屄屆屇屌屍屒屓屔屖屗屘屚屛屜屝屟屢層屧",
    		6,
    		"屰屲",
    		6,
    		"屻屼屽屾岀岃",
    		4,
    		"岉岊岋岎岏岒岓岕岝",
    		4,
    		"岤",
    		4
    	],
    	[
    		"8d40",
    		"岪岮岯岰岲岴岶岹岺岻岼岾峀峂峃峅",
    		5,
    		"峌",
    		5,
    		"峓",
    		5,
    		"峚",
    		6,
    		"峢峣峧峩峫峬峮峯峱",
    		9,
    		"峼",
    		4
    	],
    	[
    		"8d80",
    		"崁崄崅崈",
    		5,
    		"崏",
    		4,
    		"崕崗崘崙崚崜崝崟",
    		4,
    		"崥崨崪崫崬崯",
    		4,
    		"崵",
    		7,
    		"崿",
    		7,
    		"嵈嵉嵍",
    		10,
    		"嵙嵚嵜嵞",
    		10,
    		"嵪嵭嵮嵰嵱嵲嵳嵵",
    		12,
    		"嶃",
    		21,
    		"嶚嶛嶜嶞嶟嶠"
    	],
    	[
    		"8e40",
    		"嶡",
    		21,
    		"嶸",
    		12,
    		"巆",
    		6,
    		"巎",
    		12,
    		"巜巟巠巣巤巪巬巭"
    	],
    	[
    		"8e80",
    		"巰巵巶巸",
    		4,
    		"巿帀帄帇帉帊帋帍帎帒帓帗帞",
    		7,
    		"帨",
    		4,
    		"帯帰帲",
    		4,
    		"帹帺帾帿幀幁幃幆",
    		5,
    		"幍",
    		6,
    		"幖",
    		4,
    		"幜幝幟幠幣",
    		14,
    		"幵幷幹幾庁庂広庅庈庉庌庍庎庒庘庛庝庡庢庣庤庨",
    		4,
    		"庮",
    		4,
    		"庴庺庻庼庽庿",
    		6
    	],
    	[
    		"8f40",
    		"廆廇廈廋",
    		5,
    		"廔廕廗廘廙廚廜",
    		11,
    		"廩廫",
    		8,
    		"廵廸廹廻廼廽弅弆弇弉弌弍弎弐弒弔弖弙弚弜弝弞弡弢弣弤"
    	],
    	[
    		"8f80",
    		"弨弫弬弮弰弲",
    		6,
    		"弻弽弾弿彁",
    		14,
    		"彑彔彙彚彛彜彞彟彠彣彥彧彨彫彮彯彲彴彵彶彸彺彽彾彿徃徆徍徎徏徑従徔徖徚徛徝從徟徠徢",
    		5,
    		"復徫徬徯",
    		5,
    		"徶徸徹徺徻徾",
    		4,
    		"忇忈忊忋忎忓忔忕忚忛応忞忟忢忣忥忦忨忩忬忯忰忲忳忴忶忷忹忺忼怇"
    	],
    	[
    		"9040",
    		"怈怉怋怌怐怑怓怗怘怚怞怟怢怣怤怬怭怮怰",
    		4,
    		"怶",
    		4,
    		"怽怾恀恄",
    		6,
    		"恌恎恏恑恓恔恖恗恘恛恜恞恟恠恡恥恦恮恱恲恴恵恷恾悀"
    	],
    	[
    		"9080",
    		"悁悂悅悆悇悈悊悋悎悏悐悑悓悕悗悘悙悜悞悡悢悤悥悧悩悪悮悰悳悵悶悷悹悺悽",
    		7,
    		"惇惈惉惌",
    		4,
    		"惒惓惔惖惗惙惛惞惡",
    		4,
    		"惪惱惲惵惷惸惻",
    		4,
    		"愂愃愄愅愇愊愋愌愐",
    		4,
    		"愖愗愘愙愛愜愝愞愡愢愥愨愩愪愬",
    		18,
    		"慀",
    		6
    	],
    	[
    		"9140",
    		"慇慉態慍慏慐慒慓慔慖",
    		6,
    		"慞慟慠慡慣慤慥慦慩",
    		6,
    		"慱慲慳慴慶慸",
    		18,
    		"憌憍憏",
    		4,
    		"憕"
    	],
    	[
    		"9180",
    		"憖",
    		6,
    		"憞",
    		8,
    		"憪憫憭",
    		9,
    		"憸",
    		5,
    		"憿懀懁懃",
    		4,
    		"應懌",
    		4,
    		"懓懕",
    		16,
    		"懧",
    		13,
    		"懶",
    		8,
    		"戀",
    		5,
    		"戇戉戓戔戙戜戝戞戠戣戦戧戨戩戫戭戯戰戱戲戵戶戸",
    		4,
    		"扂扄扅扆扊"
    	],
    	[
    		"9240",
    		"扏扐払扖扗扙扚扜",
    		6,
    		"扤扥扨扱扲扴扵扷扸扺扻扽抁抂抃抅抆抇抈抋",
    		5,
    		"抔抙抜抝択抣抦抧抩抪抭抮抯抰抲抳抴抶抷抸抺抾拀拁"
    	],
    	[
    		"9280",
    		"拃拋拏拑拕拝拞拠拡拤拪拫拰拲拵拸拹拺拻挀挃挄挅挆挊挋挌挍挏挐挒挓挔挕挗挘挙挜挦挧挩挬挭挮挰挱挳",
    		5,
    		"挻挼挾挿捀捁捄捇捈捊捑捒捓捔捖",
    		7,
    		"捠捤捥捦捨捪捫捬捯捰捲捳捴捵捸捹捼捽捾捿掁掃掄掅掆掋掍掑掓掔掕掗掙",
    		6,
    		"採掤掦掫掯掱掲掵掶掹掻掽掿揀"
    	],
    	[
    		"9340",
    		"揁揂揃揅揇揈揊揋揌揑揓揔揕揗",
    		6,
    		"揟揢揤",
    		4,
    		"揫揬揮揯揰揱揳揵揷揹揺揻揼揾搃搄搆",
    		4,
    		"損搎搑搒搕",
    		5,
    		"搝搟搢搣搤"
    	],
    	[
    		"9380",
    		"搥搧搨搩搫搮",
    		5,
    		"搵",
    		4,
    		"搻搼搾摀摂摃摉摋",
    		6,
    		"摓摕摖摗摙",
    		4,
    		"摟",
    		7,
    		"摨摪摫摬摮",
    		9,
    		"摻",
    		6,
    		"撃撆撈",
    		8,
    		"撓撔撗撘撚撛撜撝撟",
    		4,
    		"撥撦撧撨撪撫撯撱撲撳撴撶撹撻撽撾撿擁擃擄擆",
    		6,
    		"擏擑擓擔擕擖擙據"
    	],
    	[
    		"9440",
    		"擛擜擝擟擠擡擣擥擧",
    		24,
    		"攁",
    		7,
    		"攊",
    		7,
    		"攓",
    		4,
    		"攙",
    		8
    	],
    	[
    		"9480",
    		"攢攣攤攦",
    		4,
    		"攬攭攰攱攲攳攷攺攼攽敀",
    		4,
    		"敆敇敊敋敍敎敐敒敓敔敗敘敚敜敟敠敡敤敥敧敨敩敪敭敮敯敱敳敵敶數",
    		14,
    		"斈斉斊斍斎斏斒斔斕斖斘斚斝斞斠斢斣斦斨斪斬斮斱",
    		7,
    		"斺斻斾斿旀旂旇旈旉旊旍旐旑旓旔旕旘",
    		7,
    		"旡旣旤旪旫"
    	],
    	[
    		"9540",
    		"旲旳旴旵旸旹旻",
    		4,
    		"昁昄昅昇昈昉昋昍昐昑昒昖昗昘昚昛昜昞昡昢昣昤昦昩昪昫昬昮昰昲昳昷",
    		4,
    		"昽昿晀時晄",
    		6,
    		"晍晎晐晑晘"
    	],
    	[
    		"9580",
    		"晙晛晜晝晞晠晢晣晥晧晩",
    		4,
    		"晱晲晳晵晸晹晻晼晽晿暀暁暃暅暆暈暉暊暋暍暎暏暐暒暓暔暕暘",
    		4,
    		"暞",
    		8,
    		"暩",
    		4,
    		"暯",
    		4,
    		"暵暶暷暸暺暻暼暽暿",
    		25,
    		"曚曞",
    		7,
    		"曧曨曪",
    		5,
    		"曱曵曶書曺曻曽朁朂會"
    	],
    	[
    		"9640",
    		"朄朅朆朇朌朎朏朑朒朓朖朘朙朚朜朞朠",
    		5,
    		"朧朩朮朰朲朳朶朷朸朹朻朼朾朿杁杄杅杇杊杋杍杒杔杕杗",
    		4,
    		"杝杢杣杤杦杧杫杬杮東杴杶"
    	],
    	[
    		"9680",
    		"杸杹杺杻杽枀枂枃枅枆枈枊枌枍枎枏枑枒枓枔枖枙枛枟枠枡枤枦枩枬枮枱枲枴枹",
    		7,
    		"柂柅",
    		9,
    		"柕柖柗柛柟柡柣柤柦柧柨柪柫柭柮柲柵",
    		7,
    		"柾栁栂栃栄栆栍栐栒栔栕栘",
    		4,
    		"栞栟栠栢",
    		6,
    		"栫",
    		6,
    		"栴栵栶栺栻栿桇桋桍桏桒桖",
    		5
    	],
    	[
    		"9740",
    		"桜桝桞桟桪桬",
    		7,
    		"桵桸",
    		8,
    		"梂梄梇",
    		7,
    		"梐梑梒梔梕梖梘",
    		9,
    		"梣梤梥梩梪梫梬梮梱梲梴梶梷梸"
    	],
    	[
    		"9780",
    		"梹",
    		6,
    		"棁棃",
    		5,
    		"棊棌棎棏棐棑棓棔棖棗棙棛",
    		4,
    		"棡棢棤",
    		9,
    		"棯棲棳棴棶棷棸棻棽棾棿椀椂椃椄椆",
    		4,
    		"椌椏椑椓",
    		11,
    		"椡椢椣椥",
    		7,
    		"椮椯椱椲椳椵椶椷椸椺椻椼椾楀楁楃",
    		16,
    		"楕楖楘楙楛楜楟"
    	],
    	[
    		"9840",
    		"楡楢楤楥楧楨楩楪楬業楯楰楲",
    		4,
    		"楺楻楽楾楿榁榃榅榊榋榌榎",
    		5,
    		"榖榗榙榚榝",
    		9,
    		"榩榪榬榮榯榰榲榳榵榶榸榹榺榼榽"
    	],
    	[
    		"9880",
    		"榾榿槀槂",
    		7,
    		"構槍槏槑槒槓槕",
    		5,
    		"槜槝槞槡",
    		11,
    		"槮槯槰槱槳",
    		9,
    		"槾樀",
    		9,
    		"樋",
    		11,
    		"標",
    		5,
    		"樠樢",
    		5,
    		"権樫樬樭樮樰樲樳樴樶",
    		6,
    		"樿",
    		4,
    		"橅橆橈",
    		7,
    		"橑",
    		6,
    		"橚"
    	],
    	[
    		"9940",
    		"橜",
    		4,
    		"橢橣橤橦",
    		10,
    		"橲",
    		6,
    		"橺橻橽橾橿檁檂檃檅",
    		8,
    		"檏檒",
    		4,
    		"檘",
    		7,
    		"檡",
    		5
    	],
    	[
    		"9980",
    		"檧檨檪檭",
    		114,
    		"欥欦欨",
    		6
    	],
    	[
    		"9a40",
    		"欯欰欱欳欴欵欶欸欻欼欽欿歀歁歂歄歅歈歊歋歍",
    		11,
    		"歚",
    		7,
    		"歨歩歫",
    		13,
    		"歺歽歾歿殀殅殈"
    	],
    	[
    		"9a80",
    		"殌殎殏殐殑殔殕殗殘殙殜",
    		4,
    		"殢",
    		7,
    		"殫",
    		7,
    		"殶殸",
    		6,
    		"毀毃毄毆",
    		4,
    		"毌毎毐毑毘毚毜",
    		4,
    		"毢",
    		7,
    		"毬毭毮毰毱毲毴毶毷毸毺毻毼毾",
    		6,
    		"氈",
    		4,
    		"氎氒気氜氝氞氠氣氥氫氬氭氱氳氶氷氹氺氻氼氾氿汃汄汅汈汋",
    		4,
    		"汑汒汓汖汘"
    	],
    	[
    		"9b40",
    		"汙汚汢汣汥汦汧汫",
    		4,
    		"汱汳汵汷汸決汻汼汿沀沄沇沊沋沍沎沑沒沕沖沗沘沚沜沝沞沠沢沨沬沯沰沴沵沶沷沺泀況泂泃泆泇泈泋泍泎泏泑泒泘"
    	],
    	[
    		"9b80",
    		"泙泚泜泝泟泤泦泧泩泬泭泲泴泹泿洀洂洃洅洆洈洉洊洍洏洐洑洓洔洕洖洘洜洝洟",
    		5,
    		"洦洨洩洬洭洯洰洴洶洷洸洺洿浀浂浄浉浌浐浕浖浗浘浛浝浟浡浢浤浥浧浨浫浬浭浰浱浲浳浵浶浹浺浻浽",
    		4,
    		"涃涄涆涇涊涋涍涏涐涒涖",
    		4,
    		"涜涢涥涬涭涰涱涳涴涶涷涹",
    		5,
    		"淁淂淃淈淉淊"
    	],
    	[
    		"9c40",
    		"淍淎淏淐淒淓淔淕淗淚淛淜淟淢淣淥淧淨淩淪淭淯淰淲淴淵淶淸淺淽",
    		7,
    		"渆渇済渉渋渏渒渓渕渘渙減渜渞渟渢渦渧渨渪測渮渰渱渳渵"
    	],
    	[
    		"9c80",
    		"渶渷渹渻",
    		7,
    		"湅",
    		7,
    		"湏湐湑湒湕湗湙湚湜湝湞湠",
    		10,
    		"湬湭湯",
    		14,
    		"満溁溂溄溇溈溊",
    		4,
    		"溑",
    		6,
    		"溙溚溛溝溞溠溡溣溤溦溨溩溫溬溭溮溰溳溵溸溹溼溾溿滀滃滄滅滆滈滉滊滌滍滎滐滒滖滘滙滛滜滝滣滧滪",
    		5
    	],
    	[
    		"9d40",
    		"滰滱滲滳滵滶滷滸滺",
    		7,
    		"漃漄漅漇漈漊",
    		4,
    		"漐漑漒漖",
    		9,
    		"漡漢漣漥漦漧漨漬漮漰漲漴漵漷",
    		6,
    		"漿潀潁潂"
    	],
    	[
    		"9d80",
    		"潃潄潅潈潉潊潌潎",
    		9,
    		"潙潚潛潝潟潠潡潣潤潥潧",
    		5,
    		"潯潰潱潳潵潶潷潹潻潽",
    		6,
    		"澅澆澇澊澋澏",
    		12,
    		"澝澞澟澠澢",
    		4,
    		"澨",
    		10,
    		"澴澵澷澸澺",
    		5,
    		"濁濃",
    		5,
    		"濊",
    		6,
    		"濓",
    		10,
    		"濟濢濣濤濥"
    	],
    	[
    		"9e40",
    		"濦",
    		7,
    		"濰",
    		32,
    		"瀒",
    		7,
    		"瀜",
    		6,
    		"瀤",
    		6
    	],
    	[
    		"9e80",
    		"瀫",
    		9,
    		"瀶瀷瀸瀺",
    		17,
    		"灍灎灐",
    		13,
    		"灟",
    		11,
    		"灮灱灲灳灴灷灹灺灻災炁炂炃炄炆炇炈炋炌炍炏炐炑炓炗炘炚炛炞",
    		12,
    		"炰炲炴炵炶為炾炿烄烅烆烇烉烋",
    		12,
    		"烚"
    	],
    	[
    		"9f40",
    		"烜烝烞烠烡烢烣烥烪烮烰",
    		6,
    		"烸烺烻烼烾",
    		10,
    		"焋",
    		4,
    		"焑焒焔焗焛",
    		10,
    		"焧",
    		7,
    		"焲焳焴"
    	],
    	[
    		"9f80",
    		"焵焷",
    		13,
    		"煆煇煈煉煋煍煏",
    		12,
    		"煝煟",
    		4,
    		"煥煩",
    		4,
    		"煯煰煱煴煵煶煷煹煻煼煾",
    		5,
    		"熅",
    		4,
    		"熋熌熍熎熐熑熒熓熕熖熗熚",
    		4,
    		"熡",
    		6,
    		"熩熪熫熭",
    		5,
    		"熴熶熷熸熺",
    		8,
    		"燄",
    		9,
    		"燏",
    		4
    	],
    	[
    		"a040",
    		"燖",
    		9,
    		"燡燢燣燤燦燨",
    		5,
    		"燯",
    		9,
    		"燺",
    		11,
    		"爇",
    		19
    	],
    	[
    		"a080",
    		"爛爜爞",
    		9,
    		"爩爫爭爮爯爲爳爴爺爼爾牀",
    		6,
    		"牉牊牋牎牏牐牑牓牔牕牗牘牚牜牞牠牣牤牥牨牪牫牬牭牰牱牳牴牶牷牸牻牼牽犂犃犅",
    		4,
    		"犌犎犐犑犓",
    		11,
    		"犠",
    		11,
    		"犮犱犲犳犵犺",
    		6,
    		"狅狆狇狉狊狋狌狏狑狓狔狕狖狘狚狛"
    	],
    	[
    		"a1a1",
    		"　、。·ˉˇ¨〃々—～‖…‘’“”〔〕〈",
    		7,
    		"〖〗【】±×÷∶∧∨∑∏∪∩∈∷√⊥∥∠⌒⊙∫∮≡≌≈∽∝≠≮≯≤≥∞∵∴♂♀°′″℃＄¤￠￡‰§№☆★○●◎◇◆□■△▲※→←↑↓〓"
    	],
    	[
    		"a2a1",
    		"ⅰ",
    		9
    	],
    	[
    		"a2b1",
    		"⒈",
    		19,
    		"⑴",
    		19,
    		"①",
    		9
    	],
    	[
    		"a2e5",
    		"㈠",
    		9
    	],
    	[
    		"a2f1",
    		"Ⅰ",
    		11
    	],
    	[
    		"a3a1",
    		"！＂＃￥％",
    		88,
    		"￣"
    	],
    	[
    		"a4a1",
    		"ぁ",
    		82
    	],
    	[
    		"a5a1",
    		"ァ",
    		85
    	],
    	[
    		"a6a1",
    		"Α",
    		16,
    		"Σ",
    		6
    	],
    	[
    		"a6c1",
    		"α",
    		16,
    		"σ",
    		6
    	],
    	[
    		"a6e0",
    		"︵︶︹︺︿﹀︽︾﹁﹂﹃﹄"
    	],
    	[
    		"a6ee",
    		"︻︼︷︸︱"
    	],
    	[
    		"a6f4",
    		"︳︴"
    	],
    	[
    		"a7a1",
    		"А",
    		5,
    		"ЁЖ",
    		25
    	],
    	[
    		"a7d1",
    		"а",
    		5,
    		"ёж",
    		25
    	],
    	[
    		"a840",
    		"ˊˋ˙–―‥‵℅℉↖↗↘↙∕∟∣≒≦≧⊿═",
    		35,
    		"▁",
    		6
    	],
    	[
    		"a880",
    		"█",
    		7,
    		"▓▔▕▼▽◢◣◤◥☉⊕〒〝〞"
    	],
    	[
    		"a8a1",
    		"āáǎàēéěèīíǐìōóǒòūúǔùǖǘǚǜüêɑ"
    	],
    	[
    		"a8bd",
    		"ńň"
    	],
    	[
    		"a8c0",
    		"ɡ"
    	],
    	[
    		"a8c5",
    		"ㄅ",
    		36
    	],
    	[
    		"a940",
    		"〡",
    		8,
    		"㊣㎎㎏㎜㎝㎞㎡㏄㏎㏑㏒㏕︰￢￤"
    	],
    	[
    		"a959",
    		"℡㈱"
    	],
    	[
    		"a95c",
    		"‐"
    	],
    	[
    		"a960",
    		"ー゛゜ヽヾ〆ゝゞ﹉",
    		9,
    		"﹔﹕﹖﹗﹙",
    		8
    	],
    	[
    		"a980",
    		"﹢",
    		4,
    		"﹨﹩﹪﹫"
    	],
    	[
    		"a996",
    		"〇"
    	],
    	[
    		"a9a4",
    		"─",
    		75
    	],
    	[
    		"aa40",
    		"狜狝狟狢",
    		5,
    		"狪狫狵狶狹狽狾狿猀猂猄",
    		5,
    		"猋猌猍猏猐猑猒猔猘猙猚猟猠猣猤猦猧猨猭猯猰猲猳猵猶猺猻猼猽獀",
    		8
    	],
    	[
    		"aa80",
    		"獉獊獋獌獎獏獑獓獔獕獖獘",
    		7,
    		"獡",
    		10,
    		"獮獰獱"
    	],
    	[
    		"ab40",
    		"獲",
    		11,
    		"獿",
    		4,
    		"玅玆玈玊玌玍玏玐玒玓玔玕玗玘玙玚玜玝玞玠玡玣",
    		5,
    		"玪玬玭玱玴玵玶玸玹玼玽玾玿珁珃",
    		4
    	],
    	[
    		"ab80",
    		"珋珌珎珒",
    		6,
    		"珚珛珜珝珟珡珢珣珤珦珨珪珫珬珮珯珰珱珳",
    		4
    	],
    	[
    		"ac40",
    		"珸",
    		10,
    		"琄琇琈琋琌琍琎琑",
    		8,
    		"琜",
    		5,
    		"琣琤琧琩琫琭琯琱琲琷",
    		4,
    		"琽琾琿瑀瑂",
    		11
    	],
    	[
    		"ac80",
    		"瑎",
    		6,
    		"瑖瑘瑝瑠",
    		12,
    		"瑮瑯瑱",
    		4,
    		"瑸瑹瑺"
    	],
    	[
    		"ad40",
    		"瑻瑼瑽瑿璂璄璅璆璈璉璊璌璍璏璑",
    		10,
    		"璝璟",
    		7,
    		"璪",
    		15,
    		"璻",
    		12
    	],
    	[
    		"ad80",
    		"瓈",
    		9,
    		"瓓",
    		8,
    		"瓝瓟瓡瓥瓧",
    		6,
    		"瓰瓱瓲"
    	],
    	[
    		"ae40",
    		"瓳瓵瓸",
    		6,
    		"甀甁甂甃甅",
    		7,
    		"甎甐甒甔甕甖甗甛甝甞甠",
    		4,
    		"甦甧甪甮甴甶甹甼甽甿畁畂畃畄畆畇畉畊畍畐畑畒畓畕畖畗畘"
    	],
    	[
    		"ae80",
    		"畝",
    		7,
    		"畧畨畩畫",
    		6,
    		"畳畵當畷畺",
    		4,
    		"疀疁疂疄疅疇"
    	],
    	[
    		"af40",
    		"疈疉疊疌疍疎疐疓疕疘疛疜疞疢疦",
    		4,
    		"疭疶疷疺疻疿痀痁痆痋痌痎痏痐痑痓痗痙痚痜痝痟痠痡痥痩痬痭痮痯痲痳痵痶痷痸痺痻痽痾瘂瘄瘆瘇"
    	],
    	[
    		"af80",
    		"瘈瘉瘋瘍瘎瘏瘑瘒瘓瘔瘖瘚瘜瘝瘞瘡瘣瘧瘨瘬瘮瘯瘱瘲瘶瘷瘹瘺瘻瘽癁療癄"
    	],
    	[
    		"b040",
    		"癅",
    		6,
    		"癎",
    		5,
    		"癕癗",
    		4,
    		"癝癟癠癡癢癤",
    		6,
    		"癬癭癮癰",
    		7,
    		"癹発發癿皀皁皃皅皉皊皌皍皏皐皒皔皕皗皘皚皛"
    	],
    	[
    		"b080",
    		"皜",
    		7,
    		"皥",
    		8,
    		"皯皰皳皵",
    		9,
    		"盀盁盃啊阿埃挨哎唉哀皑癌蔼矮艾碍爱隘鞍氨安俺按暗岸胺案肮昂盎凹敖熬翱袄傲奥懊澳芭捌扒叭吧笆八疤巴拔跋靶把耙坝霸罢爸白柏百摆佰败拜稗斑班搬扳般颁板版扮拌伴瓣半办绊邦帮梆榜膀绑棒磅蚌镑傍谤苞胞包褒剥"
    	],
    	[
    		"b140",
    		"盄盇盉盋盌盓盕盙盚盜盝盞盠",
    		4,
    		"盦",
    		7,
    		"盰盳盵盶盷盺盻盽盿眀眂眃眅眆眊県眎",
    		10,
    		"眛眜眝眞眡眣眤眥眧眪眫"
    	],
    	[
    		"b180",
    		"眬眮眰",
    		4,
    		"眹眻眽眾眿睂睄睅睆睈",
    		7,
    		"睒",
    		7,
    		"睜薄雹保堡饱宝抱报暴豹鲍爆杯碑悲卑北辈背贝钡倍狈备惫焙被奔苯本笨崩绷甭泵蹦迸逼鼻比鄙笔彼碧蓖蔽毕毙毖币庇痹闭敝弊必辟壁臂避陛鞭边编贬扁便变卞辨辩辫遍标彪膘表鳖憋别瘪彬斌濒滨宾摈兵冰柄丙秉饼炳"
    	],
    	[
    		"b240",
    		"睝睞睟睠睤睧睩睪睭",
    		11,
    		"睺睻睼瞁瞂瞃瞆",
    		5,
    		"瞏瞐瞓",
    		11,
    		"瞡瞣瞤瞦瞨瞫瞭瞮瞯瞱瞲瞴瞶",
    		4
    	],
    	[
    		"b280",
    		"瞼瞾矀",
    		12,
    		"矎",
    		8,
    		"矘矙矚矝",
    		4,
    		"矤病并玻菠播拨钵波博勃搏铂箔伯帛舶脖膊渤泊驳捕卜哺补埠不布步簿部怖擦猜裁材才财睬踩采彩菜蔡餐参蚕残惭惨灿苍舱仓沧藏操糙槽曹草厕策侧册测层蹭插叉茬茶查碴搽察岔差诧拆柴豺搀掺蝉馋谗缠铲产阐颤昌猖"
    	],
    	[
    		"b340",
    		"矦矨矪矯矰矱矲矴矵矷矹矺矻矼砃",
    		5,
    		"砊砋砎砏砐砓砕砙砛砞砠砡砢砤砨砪砫砮砯砱砲砳砵砶砽砿硁硂硃硄硆硈硉硊硋硍硏硑硓硔硘硙硚"
    	],
    	[
    		"b380",
    		"硛硜硞",
    		11,
    		"硯",
    		7,
    		"硸硹硺硻硽",
    		6,
    		"场尝常长偿肠厂敞畅唱倡超抄钞朝嘲潮巢吵炒车扯撤掣彻澈郴臣辰尘晨忱沉陈趁衬撑称城橙成呈乘程惩澄诚承逞骋秤吃痴持匙池迟弛驰耻齿侈尺赤翅斥炽充冲虫崇宠抽酬畴踌稠愁筹仇绸瞅丑臭初出橱厨躇锄雏滁除楚"
    	],
    	[
    		"b440",
    		"碄碅碆碈碊碋碏碐碒碔碕碖碙碝碞碠碢碤碦碨",
    		7,
    		"碵碶碷碸確碻碼碽碿磀磂磃磄磆磇磈磌磍磎磏磑磒磓磖磗磘磚",
    		9
    	],
    	[
    		"b480",
    		"磤磥磦磧磩磪磫磭",
    		4,
    		"磳磵磶磸磹磻",
    		5,
    		"礂礃礄礆",
    		6,
    		"础储矗搐触处揣川穿椽传船喘串疮窗幢床闯创吹炊捶锤垂春椿醇唇淳纯蠢戳绰疵茨磁雌辞慈瓷词此刺赐次聪葱囱匆从丛凑粗醋簇促蹿篡窜摧崔催脆瘁粹淬翠村存寸磋撮搓措挫错搭达答瘩打大呆歹傣戴带殆代贷袋待逮"
    	],
    	[
    		"b540",
    		"礍",
    		5,
    		"礔",
    		9,
    		"礟",
    		4,
    		"礥",
    		14,
    		"礵",
    		4,
    		"礽礿祂祃祄祅祇祊",
    		8,
    		"祔祕祘祙祡祣"
    	],
    	[
    		"b580",
    		"祤祦祩祪祫祬祮祰",
    		6,
    		"祹祻",
    		4,
    		"禂禃禆禇禈禉禋禌禍禎禐禑禒怠耽担丹单郸掸胆旦氮但惮淡诞弹蛋当挡党荡档刀捣蹈倒岛祷导到稻悼道盗德得的蹬灯登等瞪凳邓堤低滴迪敌笛狄涤翟嫡抵底地蒂第帝弟递缔颠掂滇碘点典靛垫电佃甸店惦奠淀殿碉叼雕凋刁掉吊钓调跌爹碟蝶迭谍叠"
    	],
    	[
    		"b640",
    		"禓",
    		6,
    		"禛",
    		11,
    		"禨",
    		10,
    		"禴",
    		4,
    		"禼禿秂秄秅秇秈秊秌秎秏秐秓秔秖秗秙",
    		5,
    		"秠秡秢秥秨秪"
    	],
    	[
    		"b680",
    		"秬秮秱",
    		6,
    		"秹秺秼秾秿稁稄稅稇稈稉稊稌稏",
    		4,
    		"稕稖稘稙稛稜丁盯叮钉顶鼎锭定订丢东冬董懂动栋侗恫冻洞兜抖斗陡豆逗痘都督毒犊独读堵睹赌杜镀肚度渡妒端短锻段断缎堆兑队对墩吨蹲敦顿囤钝盾遁掇哆多夺垛躲朵跺舵剁惰堕蛾峨鹅俄额讹娥恶厄扼遏鄂饿恩而儿耳尔饵洱二"
    	],
    	[
    		"b740",
    		"稝稟稡稢稤",
    		14,
    		"稴稵稶稸稺稾穀",
    		5,
    		"穇",
    		9,
    		"穒",
    		4,
    		"穘",
    		16
    	],
    	[
    		"b780",
    		"穩",
    		6,
    		"穱穲穳穵穻穼穽穾窂窅窇窉窊窋窌窎窏窐窓窔窙窚窛窞窡窢贰发罚筏伐乏阀法珐藩帆番翻樊矾钒繁凡烦反返范贩犯饭泛坊芳方肪房防妨仿访纺放菲非啡飞肥匪诽吠肺废沸费芬酚吩氛分纷坟焚汾粉奋份忿愤粪丰封枫蜂峰锋风疯烽逢冯缝讽奉凤佛否夫敷肤孵扶拂辐幅氟符伏俘服"
    	],
    	[
    		"b840",
    		"窣窤窧窩窪窫窮",
    		4,
    		"窴",
    		10,
    		"竀",
    		10,
    		"竌",
    		9,
    		"竗竘竚竛竜竝竡竢竤竧",
    		5,
    		"竮竰竱竲竳"
    	],
    	[
    		"b880",
    		"竴",
    		4,
    		"竻竼竾笀笁笂笅笇笉笌笍笎笐笒笓笖笗笘笚笜笝笟笡笢笣笧笩笭浮涪福袱弗甫抚辅俯釜斧脯腑府腐赴副覆赋复傅付阜父腹负富讣附妇缚咐噶嘎该改概钙盖溉干甘杆柑竿肝赶感秆敢赣冈刚钢缸肛纲岗港杠篙皋高膏羔糕搞镐稿告哥歌搁戈鸽胳疙割革葛格蛤阁隔铬个各给根跟耕更庚羹"
    	],
    	[
    		"b940",
    		"笯笰笲笴笵笶笷笹笻笽笿",
    		5,
    		"筆筈筊筍筎筓筕筗筙筜筞筟筡筣",
    		10,
    		"筯筰筳筴筶筸筺筼筽筿箁箂箃箄箆",
    		6,
    		"箎箏"
    	],
    	[
    		"b980",
    		"箑箒箓箖箘箙箚箛箞箟箠箣箤箥箮箯箰箲箳箵箶箷箹",
    		7,
    		"篂篃範埂耿梗工攻功恭龚供躬公宫弓巩汞拱贡共钩勾沟苟狗垢构购够辜菇咕箍估沽孤姑鼓古蛊骨谷股故顾固雇刮瓜剐寡挂褂乖拐怪棺关官冠观管馆罐惯灌贯光广逛瑰规圭硅归龟闺轨鬼诡癸桂柜跪贵刽辊滚棍锅郭国果裹过哈"
    	],
    	[
    		"ba40",
    		"篅篈築篊篋篍篎篏篐篒篔",
    		4,
    		"篛篜篞篟篠篢篣篤篧篨篩篫篬篭篯篰篲",
    		4,
    		"篸篹篺篻篽篿",
    		7,
    		"簈簉簊簍簎簐",
    		5,
    		"簗簘簙"
    	],
    	[
    		"ba80",
    		"簚",
    		4,
    		"簠",
    		5,
    		"簨簩簫",
    		12,
    		"簹",
    		5,
    		"籂骸孩海氦亥害骇酣憨邯韩含涵寒函喊罕翰撼捍旱憾悍焊汗汉夯杭航壕嚎豪毫郝好耗号浩呵喝荷菏核禾和何合盒貉阂河涸赫褐鹤贺嘿黑痕很狠恨哼亨横衡恒轰哄烘虹鸿洪宏弘红喉侯猴吼厚候后呼乎忽瑚壶葫胡蝴狐糊湖"
    	],
    	[
    		"bb40",
    		"籃",
    		9,
    		"籎",
    		36,
    		"籵",
    		5,
    		"籾",
    		9
    	],
    	[
    		"bb80",
    		"粈粊",
    		6,
    		"粓粔粖粙粚粛粠粡粣粦粧粨粩粫粬粭粯粰粴",
    		4,
    		"粺粻弧虎唬护互沪户花哗华猾滑画划化话槐徊怀淮坏欢环桓还缓换患唤痪豢焕涣宦幻荒慌黄磺蝗簧皇凰惶煌晃幌恍谎灰挥辉徽恢蛔回毁悔慧卉惠晦贿秽会烩汇讳诲绘荤昏婚魂浑混豁活伙火获或惑霍货祸击圾基机畸稽积箕"
    	],
    	[
    		"bc40",
    		"粿糀糂糃糄糆糉糋糎",
    		6,
    		"糘糚糛糝糞糡",
    		6,
    		"糩",
    		5,
    		"糰",
    		7,
    		"糹糺糼",
    		13,
    		"紋",
    		5
    	],
    	[
    		"bc80",
    		"紑",
    		14,
    		"紡紣紤紥紦紨紩紪紬紭紮細",
    		6,
    		"肌饥迹激讥鸡姬绩缉吉极棘辑籍集及急疾汲即嫉级挤几脊己蓟技冀季伎祭剂悸济寄寂计记既忌际妓继纪嘉枷夹佳家加荚颊贾甲钾假稼价架驾嫁歼监坚尖笺间煎兼肩艰奸缄茧检柬碱硷拣捡简俭剪减荐槛鉴践贱见键箭件"
    	],
    	[
    		"bd40",
    		"紷",
    		54,
    		"絯",
    		7
    	],
    	[
    		"bd80",
    		"絸",
    		32,
    		"健舰剑饯渐溅涧建僵姜将浆江疆蒋桨奖讲匠酱降蕉椒礁焦胶交郊浇骄娇嚼搅铰矫侥脚狡角饺缴绞剿教酵轿较叫窖揭接皆秸街阶截劫节桔杰捷睫竭洁结解姐戒藉芥界借介疥诫届巾筋斤金今津襟紧锦仅谨进靳晋禁近烬浸"
    	],
    	[
    		"be40",
    		"継",
    		12,
    		"綧",
    		6,
    		"綯",
    		42
    	],
    	[
    		"be80",
    		"線",
    		32,
    		"尽劲荆兢茎睛晶鲸京惊精粳经井警景颈静境敬镜径痉靖竟竞净炯窘揪究纠玖韭久灸九酒厩救旧臼舅咎就疚鞠拘狙疽居驹菊局咀矩举沮聚拒据巨具距踞锯俱句惧炬剧捐鹃娟倦眷卷绢撅攫抉掘倔爵觉决诀绝均菌钧军君峻"
    	],
    	[
    		"bf40",
    		"緻",
    		62
    	],
    	[
    		"bf80",
    		"縺縼",
    		4,
    		"繂",
    		4,
    		"繈",
    		21,
    		"俊竣浚郡骏喀咖卡咯开揩楷凯慨刊堪勘坎砍看康慷糠扛抗亢炕考拷烤靠坷苛柯棵磕颗科壳咳可渴克刻客课肯啃垦恳坑吭空恐孔控抠口扣寇枯哭窟苦酷库裤夸垮挎跨胯块筷侩快宽款匡筐狂框矿眶旷况亏盔岿窥葵奎魁傀"
    	],
    	[
    		"c040",
    		"繞",
    		35,
    		"纃",
    		23,
    		"纜纝纞"
    	],
    	[
    		"c080",
    		"纮纴纻纼绖绤绬绹缊缐缞缷缹缻",
    		6,
    		"罃罆",
    		9,
    		"罒罓馈愧溃坤昆捆困括扩廓阔垃拉喇蜡腊辣啦莱来赖蓝婪栏拦篮阑兰澜谰揽览懒缆烂滥琅榔狼廊郎朗浪捞劳牢老佬姥酪烙涝勒乐雷镭蕾磊累儡垒擂肋类泪棱楞冷厘梨犁黎篱狸离漓理李里鲤礼莉荔吏栗丽厉励砾历利傈例俐"
    	],
    	[
    		"c140",
    		"罖罙罛罜罝罞罠罣",
    		4,
    		"罫罬罭罯罰罳罵罶罷罸罺罻罼罽罿羀羂",
    		7,
    		"羋羍羏",
    		4,
    		"羕",
    		4,
    		"羛羜羠羢羣羥羦羨",
    		6,
    		"羱"
    	],
    	[
    		"c180",
    		"羳",
    		4,
    		"羺羻羾翀翂翃翄翆翇翈翉翋翍翏",
    		4,
    		"翖翗翙",
    		5,
    		"翢翣痢立粒沥隶力璃哩俩联莲连镰廉怜涟帘敛脸链恋炼练粮凉梁粱良两辆量晾亮谅撩聊僚疗燎寥辽潦了撂镣廖料列裂烈劣猎琳林磷霖临邻鳞淋凛赁吝拎玲菱零龄铃伶羚凌灵陵岭领另令溜琉榴硫馏留刘瘤流柳六龙聋咙笼窿"
    	],
    	[
    		"c240",
    		"翤翧翨翪翫翬翭翯翲翴",
    		6,
    		"翽翾翿耂耇耈耉耊耎耏耑耓耚耛耝耞耟耡耣耤耫",
    		5,
    		"耲耴耹耺耼耾聀聁聄聅聇聈聉聎聏聐聑聓聕聖聗"
    	],
    	[
    		"c280",
    		"聙聛",
    		13,
    		"聫",
    		5,
    		"聲",
    		11,
    		"隆垄拢陇楼娄搂篓漏陋芦卢颅庐炉掳卤虏鲁麓碌露路赂鹿潞禄录陆戮驴吕铝侣旅履屡缕虑氯律率滤绿峦挛孪滦卵乱掠略抡轮伦仑沦纶论萝螺罗逻锣箩骡裸落洛骆络妈麻玛码蚂马骂嘛吗埋买麦卖迈脉瞒馒蛮满蔓曼慢漫"
    	],
    	[
    		"c340",
    		"聾肁肂肅肈肊肍",
    		5,
    		"肔肕肗肙肞肣肦肧肨肬肰肳肵肶肸肹肻胅胇",
    		4,
    		"胏",
    		6,
    		"胘胟胠胢胣胦胮胵胷胹胻胾胿脀脁脃脄脅脇脈脋"
    	],
    	[
    		"c380",
    		"脌脕脗脙脛脜脝脟",
    		12,
    		"脭脮脰脳脴脵脷脹",
    		4,
    		"脿谩芒茫盲氓忙莽猫茅锚毛矛铆卯茂冒帽貌贸么玫枚梅酶霉煤没眉媒镁每美昧寐妹媚门闷们萌蒙檬盟锰猛梦孟眯醚靡糜迷谜弥米秘觅泌蜜密幂棉眠绵冕免勉娩缅面苗描瞄藐秒渺庙妙蔑灭民抿皿敏悯闽明螟鸣铭名命谬摸"
    	],
    	[
    		"c440",
    		"腀",
    		5,
    		"腇腉腍腎腏腒腖腗腘腛",
    		4,
    		"腡腢腣腤腦腨腪腫腬腯腲腳腵腶腷腸膁膃",
    		4,
    		"膉膋膌膍膎膐膒",
    		5,
    		"膙膚膞",
    		4,
    		"膤膥"
    	],
    	[
    		"c480",
    		"膧膩膫",
    		7,
    		"膴",
    		5,
    		"膼膽膾膿臄臅臇臈臉臋臍",
    		6,
    		"摹蘑模膜磨摩魔抹末莫墨默沫漠寞陌谋牟某拇牡亩姆母墓暮幕募慕木目睦牧穆拿哪呐钠那娜纳氖乃奶耐奈南男难囊挠脑恼闹淖呢馁内嫩能妮霓倪泥尼拟你匿腻逆溺蔫拈年碾撵捻念娘酿鸟尿捏聂孽啮镊镍涅您柠狞凝宁"
    	],
    	[
    		"c540",
    		"臔",
    		14,
    		"臤臥臦臨臩臫臮",
    		4,
    		"臵",
    		5,
    		"臽臿舃與",
    		4,
    		"舎舏舑舓舕",
    		5,
    		"舝舠舤舥舦舧舩舮舲舺舼舽舿"
    	],
    	[
    		"c580",
    		"艀艁艂艃艅艆艈艊艌艍艎艐",
    		7,
    		"艙艛艜艝艞艠",
    		7,
    		"艩拧泞牛扭钮纽脓浓农弄奴努怒女暖虐疟挪懦糯诺哦欧鸥殴藕呕偶沤啪趴爬帕怕琶拍排牌徘湃派攀潘盘磐盼畔判叛乓庞旁耪胖抛咆刨炮袍跑泡呸胚培裴赔陪配佩沛喷盆砰抨烹澎彭蓬棚硼篷膨朋鹏捧碰坯砒霹批披劈琵毗"
    	],
    	[
    		"c640",
    		"艪艫艬艭艱艵艶艷艸艻艼芀芁芃芅芆芇芉芌芐芓芔芕芖芚芛芞芠芢芣芧芲芵芶芺芻芼芿苀苂苃苅苆苉苐苖苙苚苝苢苧苨苩苪苬苭苮苰苲苳苵苶苸"
    	],
    	[
    		"c680",
    		"苺苼",
    		4,
    		"茊茋茍茐茒茓茖茘茙茝",
    		9,
    		"茩茪茮茰茲茷茻茽啤脾疲皮匹痞僻屁譬篇偏片骗飘漂瓢票撇瞥拼频贫品聘乒坪苹萍平凭瓶评屏坡泼颇婆破魄迫粕剖扑铺仆莆葡菩蒲埔朴圃普浦谱曝瀑期欺栖戚妻七凄漆柒沏其棋奇歧畦崎脐齐旗祈祁骑起岂乞企启契砌器气迄弃汽泣讫掐"
    	],
    	[
    		"c740",
    		"茾茿荁荂荄荅荈荊",
    		4,
    		"荓荕",
    		4,
    		"荝荢荰",
    		6,
    		"荹荺荾",
    		6,
    		"莇莈莊莋莌莍莏莐莑莔莕莖莗莙莚莝莟莡",
    		6,
    		"莬莭莮"
    	],
    	[
    		"c780",
    		"莯莵莻莾莿菂菃菄菆菈菉菋菍菎菐菑菒菓菕菗菙菚菛菞菢菣菤菦菧菨菫菬菭恰洽牵扦钎铅千迁签仟谦乾黔钱钳前潜遣浅谴堑嵌欠歉枪呛腔羌墙蔷强抢橇锹敲悄桥瞧乔侨巧鞘撬翘峭俏窍切茄且怯窃钦侵亲秦琴勤芹擒禽寝沁青轻氢倾卿清擎晴氰情顷请庆琼穷秋丘邱球求囚酋泅趋区蛆曲躯屈驱渠"
    	],
    	[
    		"c840",
    		"菮華菳",
    		4,
    		"菺菻菼菾菿萀萂萅萇萈萉萊萐萒",
    		5,
    		"萙萚萛萞",
    		5,
    		"萩",
    		7,
    		"萲",
    		5,
    		"萹萺萻萾",
    		7,
    		"葇葈葉"
    	],
    	[
    		"c880",
    		"葊",
    		6,
    		"葒",
    		4,
    		"葘葝葞葟葠葢葤",
    		4,
    		"葪葮葯葰葲葴葷葹葻葼取娶龋趣去圈颧权醛泉全痊拳犬券劝缺炔瘸却鹊榷确雀裙群然燃冉染瓤壤攘嚷让饶扰绕惹热壬仁人忍韧任认刃妊纫扔仍日戎茸蓉荣融熔溶容绒冗揉柔肉茹蠕儒孺如辱乳汝入褥软阮蕊瑞锐闰润若弱撒洒萨腮鳃塞赛三叁"
    	],
    	[
    		"c940",
    		"葽",
    		4,
    		"蒃蒄蒅蒆蒊蒍蒏",
    		7,
    		"蒘蒚蒛蒝蒞蒟蒠蒢",
    		12,
    		"蒰蒱蒳蒵蒶蒷蒻蒼蒾蓀蓂蓃蓅蓆蓇蓈蓋蓌蓎蓏蓒蓔蓕蓗"
    	],
    	[
    		"c980",
    		"蓘",
    		4,
    		"蓞蓡蓢蓤蓧",
    		4,
    		"蓭蓮蓯蓱",
    		10,
    		"蓽蓾蔀蔁蔂伞散桑嗓丧搔骚扫嫂瑟色涩森僧莎砂杀刹沙纱傻啥煞筛晒珊苫杉山删煽衫闪陕擅赡膳善汕扇缮墒伤商赏晌上尚裳梢捎稍烧芍勺韶少哨邵绍奢赊蛇舌舍赦摄射慑涉社设砷申呻伸身深娠绅神沈审婶甚肾慎渗声生甥牲升绳"
    	],
    	[
    		"ca40",
    		"蔃",
    		8,
    		"蔍蔎蔏蔐蔒蔔蔕蔖蔘蔙蔛蔜蔝蔞蔠蔢",
    		8,
    		"蔭",
    		9,
    		"蔾",
    		4,
    		"蕄蕅蕆蕇蕋",
    		10
    	],
    	[
    		"ca80",
    		"蕗蕘蕚蕛蕜蕝蕟",
    		4,
    		"蕥蕦蕧蕩",
    		8,
    		"蕳蕵蕶蕷蕸蕼蕽蕿薀薁省盛剩胜圣师失狮施湿诗尸虱十石拾时什食蚀实识史矢使屎驶始式示士世柿事拭誓逝势是嗜噬适仕侍释饰氏市恃室视试收手首守寿授售受瘦兽蔬枢梳殊抒输叔舒淑疏书赎孰熟薯暑曙署蜀黍鼠属术述树束戍竖墅庶数漱"
    	],
    	[
    		"cb40",
    		"薂薃薆薈",
    		6,
    		"薐",
    		10,
    		"薝",
    		6,
    		"薥薦薧薩薫薬薭薱",
    		5,
    		"薸薺",
    		6,
    		"藂",
    		6,
    		"藊",
    		4,
    		"藑藒"
    	],
    	[
    		"cb80",
    		"藔藖",
    		5,
    		"藝",
    		6,
    		"藥藦藧藨藪",
    		14,
    		"恕刷耍摔衰甩帅栓拴霜双爽谁水睡税吮瞬顺舜说硕朔烁斯撕嘶思私司丝死肆寺嗣四伺似饲巳松耸怂颂送宋讼诵搜艘擞嗽苏酥俗素速粟僳塑溯宿诉肃酸蒜算虽隋随绥髓碎岁穗遂隧祟孙损笋蓑梭唆缩琐索锁所塌他它她塔"
    	],
    	[
    		"cc40",
    		"藹藺藼藽藾蘀",
    		4,
    		"蘆",
    		10,
    		"蘒蘓蘔蘕蘗",
    		15,
    		"蘨蘪",
    		13,
    		"蘹蘺蘻蘽蘾蘿虀"
    	],
    	[
    		"cc80",
    		"虁",
    		11,
    		"虒虓處",
    		4,
    		"虛虜虝號虠虡虣",
    		7,
    		"獭挞蹋踏胎苔抬台泰酞太态汰坍摊贪瘫滩坛檀痰潭谭谈坦毯袒碳探叹炭汤塘搪堂棠膛唐糖倘躺淌趟烫掏涛滔绦萄桃逃淘陶讨套特藤腾疼誊梯剔踢锑提题蹄啼体替嚏惕涕剃屉天添填田甜恬舔腆挑条迢眺跳贴铁帖厅听烃"
    	],
    	[
    		"cd40",
    		"虭虯虰虲",
    		6,
    		"蚃",
    		6,
    		"蚎",
    		4,
    		"蚔蚖",
    		5,
    		"蚞",
    		4,
    		"蚥蚦蚫蚭蚮蚲蚳蚷蚸蚹蚻",
    		4,
    		"蛁蛂蛃蛅蛈蛌蛍蛒蛓蛕蛖蛗蛚蛜"
    	],
    	[
    		"cd80",
    		"蛝蛠蛡蛢蛣蛥蛦蛧蛨蛪蛫蛬蛯蛵蛶蛷蛺蛻蛼蛽蛿蜁蜄蜅蜆蜋蜌蜎蜏蜐蜑蜔蜖汀廷停亭庭挺艇通桐酮瞳同铜彤童桶捅筒统痛偷投头透凸秃突图徒途涂屠土吐兔湍团推颓腿蜕褪退吞屯臀拖托脱鸵陀驮驼椭妥拓唾挖哇蛙洼娃瓦袜歪外豌弯湾玩顽丸烷完碗挽晚皖惋宛婉万腕汪王亡枉网往旺望忘妄威"
    	],
    	[
    		"ce40",
    		"蜙蜛蜝蜟蜠蜤蜦蜧蜨蜪蜫蜬蜭蜯蜰蜲蜳蜵蜶蜸蜹蜺蜼蜽蝀",
    		6,
    		"蝊蝋蝍蝏蝐蝑蝒蝔蝕蝖蝘蝚",
    		5,
    		"蝡蝢蝦",
    		7,
    		"蝯蝱蝲蝳蝵"
    	],
    	[
    		"ce80",
    		"蝷蝸蝹蝺蝿螀螁螄螆螇螉螊螌螎",
    		4,
    		"螔螕螖螘",
    		6,
    		"螠",
    		4,
    		"巍微危韦违桅围唯惟为潍维苇萎委伟伪尾纬未蔚味畏胃喂魏位渭谓尉慰卫瘟温蚊文闻纹吻稳紊问嗡翁瓮挝蜗涡窝我斡卧握沃巫呜钨乌污诬屋无芜梧吾吴毋武五捂午舞伍侮坞戊雾晤物勿务悟误昔熙析西硒矽晰嘻吸锡牺"
    	],
    	[
    		"cf40",
    		"螥螦螧螩螪螮螰螱螲螴螶螷螸螹螻螼螾螿蟁",
    		4,
    		"蟇蟈蟉蟌",
    		4,
    		"蟔",
    		6,
    		"蟜蟝蟞蟟蟡蟢蟣蟤蟦蟧蟨蟩蟫蟬蟭蟯",
    		9
    	],
    	[
    		"cf80",
    		"蟺蟻蟼蟽蟿蠀蠁蠂蠄",
    		5,
    		"蠋",
    		7,
    		"蠔蠗蠘蠙蠚蠜",
    		4,
    		"蠣稀息希悉膝夕惜熄烯溪汐犀檄袭席习媳喜铣洗系隙戏细瞎虾匣霞辖暇峡侠狭下厦夏吓掀锨先仙鲜纤咸贤衔舷闲涎弦嫌显险现献县腺馅羡宪陷限线相厢镶香箱襄湘乡翔祥详想响享项巷橡像向象萧硝霄削哮嚣销消宵淆晓"
    	],
    	[
    		"d040",
    		"蠤",
    		13,
    		"蠳",
    		5,
    		"蠺蠻蠽蠾蠿衁衂衃衆",
    		5,
    		"衎",
    		5,
    		"衕衖衘衚",
    		6,
    		"衦衧衪衭衯衱衳衴衵衶衸衹衺"
    	],
    	[
    		"d080",
    		"衻衼袀袃袆袇袉袊袌袎袏袐袑袓袔袕袗",
    		4,
    		"袝",
    		4,
    		"袣袥",
    		5,
    		"小孝校肖啸笑效楔些歇蝎鞋协挟携邪斜胁谐写械卸蟹懈泄泻谢屑薪芯锌欣辛新忻心信衅星腥猩惺兴刑型形邢行醒幸杏性姓兄凶胸匈汹雄熊休修羞朽嗅锈秀袖绣墟戌需虚嘘须徐许蓄酗叙旭序畜恤絮婿绪续轩喧宣悬旋玄"
    	],
    	[
    		"d140",
    		"袬袮袯袰袲",
    		4,
    		"袸袹袺袻袽袾袿裀裃裄裇裈裊裋裌裍裏裐裑裓裖裗裚",
    		4,
    		"裠裡裦裧裩",
    		6,
    		"裲裵裶裷裺裻製裿褀褁褃",
    		5
    	],
    	[
    		"d180",
    		"褉褋",
    		4,
    		"褑褔",
    		4,
    		"褜",
    		4,
    		"褢褣褤褦褧褨褩褬褭褮褯褱褲褳褵褷选癣眩绚靴薛学穴雪血勋熏循旬询寻驯巡殉汛训讯逊迅压押鸦鸭呀丫芽牙蚜崖衙涯雅哑亚讶焉咽阉烟淹盐严研蜒岩延言颜阎炎沿奄掩眼衍演艳堰燕厌砚雁唁彦焰宴谚验殃央鸯秧杨扬佯疡羊洋阳氧仰痒养样漾邀腰妖瑶"
    	],
    	[
    		"d240",
    		"褸",
    		8,
    		"襂襃襅",
    		24,
    		"襠",
    		5,
    		"襧",
    		19,
    		"襼"
    	],
    	[
    		"d280",
    		"襽襾覀覂覄覅覇",
    		26,
    		"摇尧遥窑谣姚咬舀药要耀椰噎耶爷野冶也页掖业叶曳腋夜液一壹医揖铱依伊衣颐夷遗移仪胰疑沂宜姨彝椅蚁倚已乙矣以艺抑易邑屹亿役臆逸肄疫亦裔意毅忆义益溢诣议谊译异翼翌绎茵荫因殷音阴姻吟银淫寅饮尹引隐"
    	],
    	[
    		"d340",
    		"覢",
    		30,
    		"觃觍觓觔觕觗觘觙觛觝觟觠觡觢觤觧觨觩觪觬觭觮觰觱觲觴",
    		6
    	],
    	[
    		"d380",
    		"觻",
    		4,
    		"訁",
    		5,
    		"計",
    		21,
    		"印英樱婴鹰应缨莹萤营荧蝇迎赢盈影颖硬映哟拥佣臃痈庸雍踊蛹咏泳涌永恿勇用幽优悠忧尤由邮铀犹油游酉有友右佑釉诱又幼迂淤于盂榆虞愚舆余俞逾鱼愉渝渔隅予娱雨与屿禹宇语羽玉域芋郁吁遇喻峪御愈欲狱育誉"
    	],
    	[
    		"d440",
    		"訞",
    		31,
    		"訿",
    		8,
    		"詉",
    		21
    	],
    	[
    		"d480",
    		"詟",
    		25,
    		"詺",
    		6,
    		"浴寓裕预豫驭鸳渊冤元垣袁原援辕园员圆猿源缘远苑愿怨院曰约越跃钥岳粤月悦阅耘云郧匀陨允运蕴酝晕韵孕匝砸杂栽哉灾宰载再在咱攒暂赞赃脏葬遭糟凿藻枣早澡蚤躁噪造皂灶燥责择则泽贼怎增憎曾赠扎喳渣札轧"
    	],
    	[
    		"d540",
    		"誁",
    		7,
    		"誋",
    		7,
    		"誔",
    		46
    	],
    	[
    		"d580",
    		"諃",
    		32,
    		"铡闸眨栅榨咋乍炸诈摘斋宅窄债寨瞻毡詹粘沾盏斩辗崭展蘸栈占战站湛绽樟章彰漳张掌涨杖丈帐账仗胀瘴障招昭找沼赵照罩兆肇召遮折哲蛰辙者锗蔗这浙珍斟真甄砧臻贞针侦枕疹诊震振镇阵蒸挣睁征狰争怔整拯正政"
    	],
    	[
    		"d640",
    		"諤",
    		34,
    		"謈",
    		27
    	],
    	[
    		"d680",
    		"謤謥謧",
    		30,
    		"帧症郑证芝枝支吱蜘知肢脂汁之织职直植殖执值侄址指止趾只旨纸志挚掷至致置帜峙制智秩稚质炙痔滞治窒中盅忠钟衷终种肿重仲众舟周州洲诌粥轴肘帚咒皱宙昼骤珠株蛛朱猪诸诛逐竹烛煮拄瞩嘱主著柱助蛀贮铸筑"
    	],
    	[
    		"d740",
    		"譆",
    		31,
    		"譧",
    		4,
    		"譭",
    		25
    	],
    	[
    		"d780",
    		"讇",
    		24,
    		"讬讱讻诇诐诪谉谞住注祝驻抓爪拽专砖转撰赚篆桩庄装妆撞壮状椎锥追赘坠缀谆准捉拙卓桌琢茁酌啄着灼浊兹咨资姿滋淄孜紫仔籽滓子自渍字鬃棕踪宗综总纵邹走奏揍租足卒族祖诅阻组钻纂嘴醉最罪尊遵昨左佐柞做作坐座"
    	],
    	[
    		"d840",
    		"谸",
    		8,
    		"豂豃豄豅豈豊豋豍",
    		7,
    		"豖豗豘豙豛",
    		5,
    		"豣",
    		6,
    		"豬",
    		6,
    		"豴豵豶豷豻",
    		6,
    		"貃貄貆貇"
    	],
    	[
    		"d880",
    		"貈貋貍",
    		6,
    		"貕貖貗貙",
    		20,
    		"亍丌兀丐廿卅丕亘丞鬲孬噩丨禺丿匕乇夭爻卮氐囟胤馗毓睾鼗丶亟鼐乜乩亓芈孛啬嘏仄厍厝厣厥厮靥赝匚叵匦匮匾赜卦卣刂刈刎刭刳刿剀剌剞剡剜蒯剽劂劁劐劓冂罔亻仃仉仂仨仡仫仞伛仳伢佤仵伥伧伉伫佞佧攸佚佝"
    	],
    	[
    		"d940",
    		"貮",
    		62
    	],
    	[
    		"d980",
    		"賭",
    		32,
    		"佟佗伲伽佶佴侑侉侃侏佾佻侪佼侬侔俦俨俪俅俚俣俜俑俟俸倩偌俳倬倏倮倭俾倜倌倥倨偾偃偕偈偎偬偻傥傧傩傺僖儆僭僬僦僮儇儋仝氽佘佥俎龠汆籴兮巽黉馘冁夔勹匍訇匐凫夙兕亠兖亳衮袤亵脔裒禀嬴蠃羸冫冱冽冼"
    	],
    	[
    		"da40",
    		"贎",
    		14,
    		"贠赑赒赗赟赥赨赩赪赬赮赯赱赲赸",
    		8,
    		"趂趃趆趇趈趉趌",
    		4,
    		"趒趓趕",
    		9,
    		"趠趡"
    	],
    	[
    		"da80",
    		"趢趤",
    		12,
    		"趲趶趷趹趻趽跀跁跂跅跇跈跉跊跍跐跒跓跔凇冖冢冥讠讦讧讪讴讵讷诂诃诋诏诎诒诓诔诖诘诙诜诟诠诤诨诩诮诰诳诶诹诼诿谀谂谄谇谌谏谑谒谔谕谖谙谛谘谝谟谠谡谥谧谪谫谮谯谲谳谵谶卩卺阝阢阡阱阪阽阼陂陉陔陟陧陬陲陴隈隍隗隰邗邛邝邙邬邡邴邳邶邺"
    	],
    	[
    		"db40",
    		"跕跘跙跜跠跡跢跥跦跧跩跭跮跰跱跲跴跶跼跾",
    		6,
    		"踆踇踈踋踍踎踐踑踒踓踕",
    		7,
    		"踠踡踤",
    		4,
    		"踫踭踰踲踳踴踶踷踸踻踼踾"
    	],
    	[
    		"db80",
    		"踿蹃蹅蹆蹌",
    		4,
    		"蹓",
    		5,
    		"蹚",
    		11,
    		"蹧蹨蹪蹫蹮蹱邸邰郏郅邾郐郄郇郓郦郢郜郗郛郫郯郾鄄鄢鄞鄣鄱鄯鄹酃酆刍奂劢劬劭劾哿勐勖勰叟燮矍廴凵凼鬯厶弁畚巯坌垩垡塾墼壅壑圩圬圪圳圹圮圯坜圻坂坩垅坫垆坼坻坨坭坶坳垭垤垌垲埏垧垴垓垠埕埘埚埙埒垸埴埯埸埤埝"
    	],
    	[
    		"dc40",
    		"蹳蹵蹷",
    		4,
    		"蹽蹾躀躂躃躄躆躈",
    		6,
    		"躑躒躓躕",
    		6,
    		"躝躟",
    		11,
    		"躭躮躰躱躳",
    		6,
    		"躻",
    		7
    	],
    	[
    		"dc80",
    		"軃",
    		10,
    		"軏",
    		21,
    		"堋堍埽埭堀堞堙塄堠塥塬墁墉墚墀馨鼙懿艹艽艿芏芊芨芄芎芑芗芙芫芸芾芰苈苊苣芘芷芮苋苌苁芩芴芡芪芟苄苎芤苡茉苷苤茏茇苜苴苒苘茌苻苓茑茚茆茔茕苠苕茜荑荛荜茈莒茼茴茱莛荞茯荏荇荃荟荀茗荠茭茺茳荦荥"
    	],
    	[
    		"dd40",
    		"軥",
    		62
    	],
    	[
    		"dd80",
    		"輤",
    		32,
    		"荨茛荩荬荪荭荮莰荸莳莴莠莪莓莜莅荼莶莩荽莸荻莘莞莨莺莼菁萁菥菘堇萘萋菝菽菖萜萸萑萆菔菟萏萃菸菹菪菅菀萦菰菡葜葑葚葙葳蒇蒈葺蒉葸萼葆葩葶蒌蒎萱葭蓁蓍蓐蓦蒽蓓蓊蒿蒺蓠蒡蒹蒴蒗蓥蓣蔌甍蔸蓰蔹蔟蔺"
    	],
    	[
    		"de40",
    		"轅",
    		32,
    		"轪辀辌辒辝辠辡辢辤辥辦辧辪辬辭辮辯農辳辴辵辷辸辺辻込辿迀迃迆"
    	],
    	[
    		"de80",
    		"迉",
    		4,
    		"迏迒迖迗迚迠迡迣迧迬迯迱迲迴迵迶迺迻迼迾迿逇逈逌逎逓逕逘蕖蔻蓿蓼蕙蕈蕨蕤蕞蕺瞢蕃蕲蕻薤薨薇薏蕹薮薜薅薹薷薰藓藁藜藿蘧蘅蘩蘖蘼廾弈夼奁耷奕奚奘匏尢尥尬尴扌扪抟抻拊拚拗拮挢拶挹捋捃掭揶捱捺掎掴捭掬掊捩掮掼揲揸揠揿揄揞揎摒揆掾摅摁搋搛搠搌搦搡摞撄摭撖"
    	],
    	[
    		"df40",
    		"這逜連逤逥逧",
    		5,
    		"逰",
    		4,
    		"逷逹逺逽逿遀遃遅遆遈",
    		4,
    		"過達違遖遙遚遜",
    		5,
    		"遤遦遧適遪遫遬遯",
    		4,
    		"遶",
    		6,
    		"遾邁"
    	],
    	[
    		"df80",
    		"還邅邆邇邉邊邌",
    		4,
    		"邒邔邖邘邚邜邞邟邠邤邥邧邨邩邫邭邲邷邼邽邿郀摺撷撸撙撺擀擐擗擤擢攉攥攮弋忒甙弑卟叱叽叩叨叻吒吖吆呋呒呓呔呖呃吡呗呙吣吲咂咔呷呱呤咚咛咄呶呦咝哐咭哂咴哒咧咦哓哔呲咣哕咻咿哌哙哚哜咩咪咤哝哏哞唛哧唠哽唔哳唢唣唏唑唧唪啧喏喵啉啭啁啕唿啐唼"
    	],
    	[
    		"e040",
    		"郂郃郆郈郉郋郌郍郒郔郕郖郘郙郚郞郟郠郣郤郥郩郪郬郮郰郱郲郳郵郶郷郹郺郻郼郿鄀鄁鄃鄅",
    		19,
    		"鄚鄛鄜"
    	],
    	[
    		"e080",
    		"鄝鄟鄠鄡鄤",
    		10,
    		"鄰鄲",
    		6,
    		"鄺",
    		8,
    		"酄唷啖啵啶啷唳唰啜喋嗒喃喱喹喈喁喟啾嗖喑啻嗟喽喾喔喙嗪嗷嗉嘟嗑嗫嗬嗔嗦嗝嗄嗯嗥嗲嗳嗌嗍嗨嗵嗤辔嘞嘈嘌嘁嘤嘣嗾嘀嘧嘭噘嘹噗嘬噍噢噙噜噌噔嚆噤噱噫噻噼嚅嚓嚯囔囗囝囡囵囫囹囿圄圊圉圜帏帙帔帑帱帻帼"
    	],
    	[
    		"e140",
    		"酅酇酈酑酓酔酕酖酘酙酛酜酟酠酦酧酨酫酭酳酺酻酼醀",
    		4,
    		"醆醈醊醎醏醓",
    		6,
    		"醜",
    		5,
    		"醤",
    		5,
    		"醫醬醰醱醲醳醶醷醸醹醻"
    	],
    	[
    		"e180",
    		"醼",
    		10,
    		"釈釋釐釒",
    		9,
    		"針",
    		8,
    		"帷幄幔幛幞幡岌屺岍岐岖岈岘岙岑岚岜岵岢岽岬岫岱岣峁岷峄峒峤峋峥崂崃崧崦崮崤崞崆崛嵘崾崴崽嵬嵛嵯嵝嵫嵋嵊嵩嵴嶂嶙嶝豳嶷巅彳彷徂徇徉後徕徙徜徨徭徵徼衢彡犭犰犴犷犸狃狁狎狍狒狨狯狩狲狴狷猁狳猃狺"
    	],
    	[
    		"e240",
    		"釦",
    		62
    	],
    	[
    		"e280",
    		"鈥",
    		32,
    		"狻猗猓猡猊猞猝猕猢猹猥猬猸猱獐獍獗獠獬獯獾舛夥飧夤夂饣饧",
    		5,
    		"饴饷饽馀馄馇馊馍馐馑馓馔馕庀庑庋庖庥庠庹庵庾庳赓廒廑廛廨廪膺忄忉忖忏怃忮怄忡忤忾怅怆忪忭忸怙怵怦怛怏怍怩怫怊怿怡恸恹恻恺恂"
    	],
    	[
    		"e340",
    		"鉆",
    		45,
    		"鉵",
    		16
    	],
    	[
    		"e380",
    		"銆",
    		7,
    		"銏",
    		24,
    		"恪恽悖悚悭悝悃悒悌悛惬悻悱惝惘惆惚悴愠愦愕愣惴愀愎愫慊慵憬憔憧憷懔懵忝隳闩闫闱闳闵闶闼闾阃阄阆阈阊阋阌阍阏阒阕阖阗阙阚丬爿戕氵汔汜汊沣沅沐沔沌汨汩汴汶沆沩泐泔沭泷泸泱泗沲泠泖泺泫泮沱泓泯泾"
    	],
    	[
    		"e440",
    		"銨",
    		5,
    		"銯",
    		24,
    		"鋉",
    		31
    	],
    	[
    		"e480",
    		"鋩",
    		32,
    		"洹洧洌浃浈洇洄洙洎洫浍洮洵洚浏浒浔洳涑浯涞涠浞涓涔浜浠浼浣渚淇淅淞渎涿淠渑淦淝淙渖涫渌涮渫湮湎湫溲湟溆湓湔渲渥湄滟溱溘滠漭滢溥溧溽溻溷滗溴滏溏滂溟潢潆潇漤漕滹漯漶潋潴漪漉漩澉澍澌潸潲潼潺濑"
    	],
    	[
    		"e540",
    		"錊",
    		51,
    		"錿",
    		10
    	],
    	[
    		"e580",
    		"鍊",
    		31,
    		"鍫濉澧澹澶濂濡濮濞濠濯瀚瀣瀛瀹瀵灏灞宀宄宕宓宥宸甯骞搴寤寮褰寰蹇謇辶迓迕迥迮迤迩迦迳迨逅逄逋逦逑逍逖逡逵逶逭逯遄遑遒遐遨遘遢遛暹遴遽邂邈邃邋彐彗彖彘尻咫屐屙孱屣屦羼弪弩弭艴弼鬻屮妁妃妍妩妪妣"
    	],
    	[
    		"e640",
    		"鍬",
    		34,
    		"鎐",
    		27
    	],
    	[
    		"e680",
    		"鎬",
    		29,
    		"鏋鏌鏍妗姊妫妞妤姒妲妯姗妾娅娆姝娈姣姘姹娌娉娲娴娑娣娓婀婧婊婕娼婢婵胬媪媛婷婺媾嫫媲嫒嫔媸嫠嫣嫱嫖嫦嫘嫜嬉嬗嬖嬲嬷孀尕尜孚孥孳孑孓孢驵驷驸驺驿驽骀骁骅骈骊骐骒骓骖骘骛骜骝骟骠骢骣骥骧纟纡纣纥纨纩"
    	],
    	[
    		"e740",
    		"鏎",
    		7,
    		"鏗",
    		54
    	],
    	[
    		"e780",
    		"鐎",
    		32,
    		"纭纰纾绀绁绂绉绋绌绐绔绗绛绠绡绨绫绮绯绱绲缍绶绺绻绾缁缂缃缇缈缋缌缏缑缒缗缙缜缛缟缡",
    		6,
    		"缪缫缬缭缯",
    		4,
    		"缵幺畿巛甾邕玎玑玮玢玟珏珂珑玷玳珀珉珈珥珙顼琊珩珧珞玺珲琏琪瑛琦琥琨琰琮琬"
    	],
    	[
    		"e840",
    		"鐯",
    		14,
    		"鐿",
    		43,
    		"鑬鑭鑮鑯"
    	],
    	[
    		"e880",
    		"鑰",
    		20,
    		"钑钖钘铇铏铓铔铚铦铻锜锠琛琚瑁瑜瑗瑕瑙瑷瑭瑾璜璎璀璁璇璋璞璨璩璐璧瓒璺韪韫韬杌杓杞杈杩枥枇杪杳枘枧杵枨枞枭枋杷杼柰栉柘栊柩枰栌柙枵柚枳柝栀柃枸柢栎柁柽栲栳桠桡桎桢桄桤梃栝桕桦桁桧桀栾桊桉栩梵梏桴桷梓桫棂楮棼椟椠棹"
    	],
    	[
    		"e940",
    		"锧锳锽镃镈镋镕镚镠镮镴镵長",
    		7,
    		"門",
    		42
    	],
    	[
    		"e980",
    		"閫",
    		32,
    		"椤棰椋椁楗棣椐楱椹楠楂楝榄楫榀榘楸椴槌榇榈槎榉楦楣楹榛榧榻榫榭槔榱槁槊槟榕槠榍槿樯槭樗樘橥槲橄樾檠橐橛樵檎橹樽樨橘橼檑檐檩檗檫猷獒殁殂殇殄殒殓殍殚殛殡殪轫轭轱轲轳轵轶轸轷轹轺轼轾辁辂辄辇辋"
    	],
    	[
    		"ea40",
    		"闌",
    		27,
    		"闬闿阇阓阘阛阞阠阣",
    		6,
    		"阫阬阭阯阰阷阸阹阺阾陁陃陊陎陏陑陒陓陖陗"
    	],
    	[
    		"ea80",
    		"陘陙陚陜陝陞陠陣陥陦陫陭",
    		4,
    		"陳陸",
    		12,
    		"隇隉隊辍辎辏辘辚軎戋戗戛戟戢戡戥戤戬臧瓯瓴瓿甏甑甓攴旮旯旰昊昙杲昃昕昀炅曷昝昴昱昶昵耆晟晔晁晏晖晡晗晷暄暌暧暝暾曛曜曦曩贲贳贶贻贽赀赅赆赈赉赇赍赕赙觇觊觋觌觎觏觐觑牮犟牝牦牯牾牿犄犋犍犏犒挈挲掰"
    	],
    	[
    		"eb40",
    		"隌階隑隒隓隕隖隚際隝",
    		9,
    		"隨",
    		7,
    		"隱隲隴隵隷隸隺隻隿雂雃雈雊雋雐雑雓雔雖",
    		9,
    		"雡",
    		6,
    		"雫"
    	],
    	[
    		"eb80",
    		"雬雭雮雰雱雲雴雵雸雺電雼雽雿霂霃霅霊霋霌霐霑霒霔霕霗",
    		4,
    		"霝霟霠搿擘耄毪毳毽毵毹氅氇氆氍氕氘氙氚氡氩氤氪氲攵敕敫牍牒牖爰虢刖肟肜肓肼朊肽肱肫肭肴肷胧胨胩胪胛胂胄胙胍胗朐胝胫胱胴胭脍脎胲胼朕脒豚脶脞脬脘脲腈腌腓腴腙腚腱腠腩腼腽腭腧塍媵膈膂膑滕膣膪臌朦臊膻"
    	],
    	[
    		"ec40",
    		"霡",
    		8,
    		"霫霬霮霯霱霳",
    		4,
    		"霺霻霼霽霿",
    		18,
    		"靔靕靗靘靚靜靝靟靣靤靦靧靨靪",
    		7
    	],
    	[
    		"ec80",
    		"靲靵靷",
    		4,
    		"靽",
    		7,
    		"鞆",
    		4,
    		"鞌鞎鞏鞐鞓鞕鞖鞗鞙",
    		4,
    		"臁膦欤欷欹歃歆歙飑飒飓飕飙飚殳彀毂觳斐齑斓於旆旄旃旌旎旒旖炀炜炖炝炻烀炷炫炱烨烊焐焓焖焯焱煳煜煨煅煲煊煸煺熘熳熵熨熠燠燔燧燹爝爨灬焘煦熹戾戽扃扈扉礻祀祆祉祛祜祓祚祢祗祠祯祧祺禅禊禚禧禳忑忐"
    	],
    	[
    		"ed40",
    		"鞞鞟鞡鞢鞤",
    		6,
    		"鞬鞮鞰鞱鞳鞵",
    		46
    	],
    	[
    		"ed80",
    		"韤韥韨韮",
    		4,
    		"韴韷",
    		23,
    		"怼恝恚恧恁恙恣悫愆愍慝憩憝懋懑戆肀聿沓泶淼矶矸砀砉砗砘砑斫砭砜砝砹砺砻砟砼砥砬砣砩硎硭硖硗砦硐硇硌硪碛碓碚碇碜碡碣碲碹碥磔磙磉磬磲礅磴礓礤礞礴龛黹黻黼盱眄眍盹眇眈眚眢眙眭眦眵眸睐睑睇睃睚睨"
    	],
    	[
    		"ee40",
    		"頏",
    		62
    	],
    	[
    		"ee80",
    		"顎",
    		32,
    		"睢睥睿瞍睽瞀瞌瞑瞟瞠瞰瞵瞽町畀畎畋畈畛畲畹疃罘罡罟詈罨罴罱罹羁罾盍盥蠲钅钆钇钋钊钌钍钏钐钔钗钕钚钛钜钣钤钫钪钭钬钯钰钲钴钶",
    		4,
    		"钼钽钿铄铈",
    		6,
    		"铐铑铒铕铖铗铙铘铛铞铟铠铢铤铥铧铨铪"
    	],
    	[
    		"ef40",
    		"顯",
    		5,
    		"颋颎颒颕颙颣風",
    		37,
    		"飏飐飔飖飗飛飜飝飠",
    		4
    	],
    	[
    		"ef80",
    		"飥飦飩",
    		30,
    		"铩铫铮铯铳铴铵铷铹铼铽铿锃锂锆锇锉锊锍锎锏锒",
    		4,
    		"锘锛锝锞锟锢锪锫锩锬锱锲锴锶锷锸锼锾锿镂锵镄镅镆镉镌镎镏镒镓镔镖镗镘镙镛镞镟镝镡镢镤",
    		8,
    		"镯镱镲镳锺矧矬雉秕秭秣秫稆嵇稃稂稞稔"
    	],
    	[
    		"f040",
    		"餈",
    		4,
    		"餎餏餑",
    		28,
    		"餯",
    		26
    	],
    	[
    		"f080",
    		"饊",
    		9,
    		"饖",
    		12,
    		"饤饦饳饸饹饻饾馂馃馉稹稷穑黏馥穰皈皎皓皙皤瓞瓠甬鸠鸢鸨",
    		4,
    		"鸲鸱鸶鸸鸷鸹鸺鸾鹁鹂鹄鹆鹇鹈鹉鹋鹌鹎鹑鹕鹗鹚鹛鹜鹞鹣鹦",
    		6,
    		"鹱鹭鹳疒疔疖疠疝疬疣疳疴疸痄疱疰痃痂痖痍痣痨痦痤痫痧瘃痱痼痿瘐瘀瘅瘌瘗瘊瘥瘘瘕瘙"
    	],
    	[
    		"f140",
    		"馌馎馚",
    		10,
    		"馦馧馩",
    		47
    	],
    	[
    		"f180",
    		"駙",
    		32,
    		"瘛瘼瘢瘠癀瘭瘰瘿瘵癃瘾瘳癍癞癔癜癖癫癯翊竦穸穹窀窆窈窕窦窠窬窨窭窳衤衩衲衽衿袂袢裆袷袼裉裢裎裣裥裱褚裼裨裾裰褡褙褓褛褊褴褫褶襁襦襻疋胥皲皴矜耒耔耖耜耠耢耥耦耧耩耨耱耋耵聃聆聍聒聩聱覃顸颀颃"
    	],
    	[
    		"f240",
    		"駺",
    		62
    	],
    	[
    		"f280",
    		"騹",
    		32,
    		"颉颌颍颏颔颚颛颞颟颡颢颥颦虍虔虬虮虿虺虼虻蚨蚍蚋蚬蚝蚧蚣蚪蚓蚩蚶蛄蚵蛎蚰蚺蚱蚯蛉蛏蚴蛩蛱蛲蛭蛳蛐蜓蛞蛴蛟蛘蛑蜃蜇蛸蜈蜊蜍蜉蜣蜻蜞蜥蜮蜚蜾蝈蜴蜱蜩蜷蜿螂蜢蝽蝾蝻蝠蝰蝌蝮螋蝓蝣蝼蝤蝙蝥螓螯螨蟒"
    	],
    	[
    		"f340",
    		"驚",
    		17,
    		"驲骃骉骍骎骔骕骙骦骩",
    		6,
    		"骲骳骴骵骹骻骽骾骿髃髄髆",
    		4,
    		"髍髎髏髐髒體髕髖髗髙髚髛髜"
    	],
    	[
    		"f380",
    		"髝髞髠髢髣髤髥髧髨髩髪髬髮髰",
    		8,
    		"髺髼",
    		6,
    		"鬄鬅鬆蟆螈螅螭螗螃螫蟥螬螵螳蟋蟓螽蟑蟀蟊蟛蟪蟠蟮蠖蠓蟾蠊蠛蠡蠹蠼缶罂罄罅舐竺竽笈笃笄笕笊笫笏筇笸笪笙笮笱笠笥笤笳笾笞筘筚筅筵筌筝筠筮筻筢筲筱箐箦箧箸箬箝箨箅箪箜箢箫箴篑篁篌篝篚篥篦篪簌篾篼簏簖簋"
    	],
    	[
    		"f440",
    		"鬇鬉",
    		5,
    		"鬐鬑鬒鬔",
    		10,
    		"鬠鬡鬢鬤",
    		10,
    		"鬰鬱鬳",
    		7,
    		"鬽鬾鬿魀魆魊魋魌魎魐魒魓魕",
    		5
    	],
    	[
    		"f480",
    		"魛",
    		32,
    		"簟簪簦簸籁籀臾舁舂舄臬衄舡舢舣舭舯舨舫舸舻舳舴舾艄艉艋艏艚艟艨衾袅袈裘裟襞羝羟羧羯羰羲籼敉粑粝粜粞粢粲粼粽糁糇糌糍糈糅糗糨艮暨羿翎翕翥翡翦翩翮翳糸絷綦綮繇纛麸麴赳趄趔趑趱赧赭豇豉酊酐酎酏酤"
    	],
    	[
    		"f540",
    		"魼",
    		62
    	],
    	[
    		"f580",
    		"鮻",
    		32,
    		"酢酡酰酩酯酽酾酲酴酹醌醅醐醍醑醢醣醪醭醮醯醵醴醺豕鹾趸跫踅蹙蹩趵趿趼趺跄跖跗跚跞跎跏跛跆跬跷跸跣跹跻跤踉跽踔踝踟踬踮踣踯踺蹀踹踵踽踱蹉蹁蹂蹑蹒蹊蹰蹶蹼蹯蹴躅躏躔躐躜躞豸貂貊貅貘貔斛觖觞觚觜"
    	],
    	[
    		"f640",
    		"鯜",
    		62
    	],
    	[
    		"f680",
    		"鰛",
    		32,
    		"觥觫觯訾謦靓雩雳雯霆霁霈霏霎霪霭霰霾龀龃龅",
    		5,
    		"龌黾鼋鼍隹隼隽雎雒瞿雠銎銮鋈錾鍪鏊鎏鐾鑫鱿鲂鲅鲆鲇鲈稣鲋鲎鲐鲑鲒鲔鲕鲚鲛鲞",
    		5,
    		"鲥",
    		4,
    		"鲫鲭鲮鲰",
    		7,
    		"鲺鲻鲼鲽鳄鳅鳆鳇鳊鳋"
    	],
    	[
    		"f740",
    		"鰼",
    		62
    	],
    	[
    		"f780",
    		"鱻鱽鱾鲀鲃鲄鲉鲊鲌鲏鲓鲖鲗鲘鲙鲝鲪鲬鲯鲹鲾",
    		4,
    		"鳈鳉鳑鳒鳚鳛鳠鳡鳌",
    		4,
    		"鳓鳔鳕鳗鳘鳙鳜鳝鳟鳢靼鞅鞑鞒鞔鞯鞫鞣鞲鞴骱骰骷鹘骶骺骼髁髀髅髂髋髌髑魅魃魇魉魈魍魑飨餍餮饕饔髟髡髦髯髫髻髭髹鬈鬏鬓鬟鬣麽麾縻麂麇麈麋麒鏖麝麟黛黜黝黠黟黢黩黧黥黪黯鼢鼬鼯鼹鼷鼽鼾齄"
    	],
    	[
    		"f840",
    		"鳣",
    		62
    	],
    	[
    		"f880",
    		"鴢",
    		32
    	],
    	[
    		"f940",
    		"鵃",
    		62
    	],
    	[
    		"f980",
    		"鶂",
    		32
    	],
    	[
    		"fa40",
    		"鶣",
    		62
    	],
    	[
    		"fa80",
    		"鷢",
    		32
    	],
    	[
    		"fb40",
    		"鸃",
    		27,
    		"鸤鸧鸮鸰鸴鸻鸼鹀鹍鹐鹒鹓鹔鹖鹙鹝鹟鹠鹡鹢鹥鹮鹯鹲鹴",
    		9,
    		"麀"
    	],
    	[
    		"fb80",
    		"麁麃麄麅麆麉麊麌",
    		5,
    		"麔",
    		8,
    		"麞麠",
    		5,
    		"麧麨麩麪"
    	],
    	[
    		"fc40",
    		"麫",
    		8,
    		"麵麶麷麹麺麼麿",
    		4,
    		"黅黆黇黈黊黋黌黐黒黓黕黖黗黙黚點黡黣黤黦黨黫黬黭黮黰",
    		8,
    		"黺黽黿",
    		6
    	],
    	[
    		"fc80",
    		"鼆",
    		4,
    		"鼌鼏鼑鼒鼔鼕鼖鼘鼚",
    		5,
    		"鼡鼣",
    		8,
    		"鼭鼮鼰鼱"
    	],
    	[
    		"fd40",
    		"鼲",
    		4,
    		"鼸鼺鼼鼿",
    		4,
    		"齅",
    		10,
    		"齒",
    		38
    	],
    	[
    		"fd80",
    		"齹",
    		5,
    		"龁龂龍",
    		11,
    		"龜龝龞龡",
    		4,
    		"郎凉秊裏隣"
    	],
    	[
    		"fe40",
    		"兀嗀﨎﨏﨑﨓﨔礼﨟蘒﨡﨣﨤﨧﨨﨩"
    	]
    ];

    var require$$3$1 = [
    	[
    		"a140",
    		"",
    		62
    	],
    	[
    		"a180",
    		"",
    		32
    	],
    	[
    		"a240",
    		"",
    		62
    	],
    	[
    		"a280",
    		"",
    		32
    	],
    	[
    		"a2ab",
    		"",
    		5
    	],
    	[
    		"a2e3",
    		"€"
    	],
    	[
    		"a2ef",
    		""
    	],
    	[
    		"a2fd",
    		""
    	],
    	[
    		"a340",
    		"",
    		62
    	],
    	[
    		"a380",
    		"",
    		31,
    		"　"
    	],
    	[
    		"a440",
    		"",
    		62
    	],
    	[
    		"a480",
    		"",
    		32
    	],
    	[
    		"a4f4",
    		"",
    		10
    	],
    	[
    		"a540",
    		"",
    		62
    	],
    	[
    		"a580",
    		"",
    		32
    	],
    	[
    		"a5f7",
    		"",
    		7
    	],
    	[
    		"a640",
    		"",
    		62
    	],
    	[
    		"a680",
    		"",
    		32
    	],
    	[
    		"a6b9",
    		"",
    		7
    	],
    	[
    		"a6d9",
    		"",
    		6
    	],
    	[
    		"a6ec",
    		""
    	],
    	[
    		"a6f3",
    		""
    	],
    	[
    		"a6f6",
    		"",
    		8
    	],
    	[
    		"a740",
    		"",
    		62
    	],
    	[
    		"a780",
    		"",
    		32
    	],
    	[
    		"a7c2",
    		"",
    		14
    	],
    	[
    		"a7f2",
    		"",
    		12
    	],
    	[
    		"a896",
    		"",
    		10
    	],
    	[
    		"a8bc",
    		""
    	],
    	[
    		"a8bf",
    		"ǹ"
    	],
    	[
    		"a8c1",
    		""
    	],
    	[
    		"a8ea",
    		"",
    		20
    	],
    	[
    		"a958",
    		""
    	],
    	[
    		"a95b",
    		""
    	],
    	[
    		"a95d",
    		""
    	],
    	[
    		"a989",
    		"〾⿰",
    		11
    	],
    	[
    		"a997",
    		"",
    		12
    	],
    	[
    		"a9f0",
    		"",
    		14
    	],
    	[
    		"aaa1",
    		"",
    		93
    	],
    	[
    		"aba1",
    		"",
    		93
    	],
    	[
    		"aca1",
    		"",
    		93
    	],
    	[
    		"ada1",
    		"",
    		93
    	],
    	[
    		"aea1",
    		"",
    		93
    	],
    	[
    		"afa1",
    		"",
    		93
    	],
    	[
    		"d7fa",
    		"",
    		4
    	],
    	[
    		"f8a1",
    		"",
    		93
    	],
    	[
    		"f9a1",
    		"",
    		93
    	],
    	[
    		"faa1",
    		"",
    		93
    	],
    	[
    		"fba1",
    		"",
    		93
    	],
    	[
    		"fca1",
    		"",
    		93
    	],
    	[
    		"fda1",
    		"",
    		93
    	],
    	[
    		"fe50",
    		"⺁⺄㑳㑇⺈⺋㖞㘚㘎⺌⺗㥮㤘㧏㧟㩳㧐㭎㱮㳠⺧⺪䁖䅟⺮䌷⺳⺶⺷䎱䎬⺻䏝䓖䙡䙌"
    	],
    	[
    		"fe80",
    		"䜣䜩䝼䞍⻊䥇䥺䥽䦂䦃䦅䦆䦟䦛䦷䦶䲣䲟䲠䲡䱷䲢䴓",
    		6,
    		"䶮",
    		93
    	]
    ];

    var uChars = [
    	128,
    	165,
    	169,
    	178,
    	184,
    	216,
    	226,
    	235,
    	238,
    	244,
    	248,
    	251,
    	253,
    	258,
    	276,
    	284,
    	300,
    	325,
    	329,
    	334,
    	364,
    	463,
    	465,
    	467,
    	469,
    	471,
    	473,
    	475,
    	477,
    	506,
    	594,
    	610,
    	712,
    	716,
    	730,
    	930,
    	938,
    	962,
    	970,
    	1026,
    	1104,
    	1106,
    	8209,
    	8215,
    	8218,
    	8222,
    	8231,
    	8241,
    	8244,
    	8246,
    	8252,
    	8365,
    	8452,
    	8454,
    	8458,
    	8471,
    	8482,
    	8556,
    	8570,
    	8596,
    	8602,
    	8713,
    	8720,
    	8722,
    	8726,
    	8731,
    	8737,
    	8740,
    	8742,
    	8748,
    	8751,
    	8760,
    	8766,
    	8777,
    	8781,
    	8787,
    	8802,
    	8808,
    	8816,
    	8854,
    	8858,
    	8870,
    	8896,
    	8979,
    	9322,
    	9372,
    	9548,
    	9588,
    	9616,
    	9622,
    	9634,
    	9652,
    	9662,
    	9672,
    	9676,
    	9680,
    	9702,
    	9735,
    	9738,
    	9793,
    	9795,
    	11906,
    	11909,
    	11913,
    	11917,
    	11928,
    	11944,
    	11947,
    	11951,
    	11956,
    	11960,
    	11964,
    	11979,
    	12284,
    	12292,
    	12312,
    	12319,
    	12330,
    	12351,
    	12436,
    	12447,
    	12535,
    	12543,
    	12586,
    	12842,
    	12850,
    	12964,
    	13200,
    	13215,
    	13218,
    	13253,
    	13263,
    	13267,
    	13270,
    	13384,
    	13428,
    	13727,
    	13839,
    	13851,
    	14617,
    	14703,
    	14801,
    	14816,
    	14964,
    	15183,
    	15471,
    	15585,
    	16471,
    	16736,
    	17208,
    	17325,
    	17330,
    	17374,
    	17623,
    	17997,
    	18018,
    	18212,
    	18218,
    	18301,
    	18318,
    	18760,
    	18811,
    	18814,
    	18820,
    	18823,
    	18844,
    	18848,
    	18872,
    	19576,
    	19620,
    	19738,
    	19887,
    	40870,
    	59244,
    	59336,
    	59367,
    	59413,
    	59417,
    	59423,
    	59431,
    	59437,
    	59443,
    	59452,
    	59460,
    	59478,
    	59493,
    	63789,
    	63866,
    	63894,
    	63976,
    	63986,
    	64016,
    	64018,
    	64021,
    	64025,
    	64034,
    	64037,
    	64042,
    	65074,
    	65093,
    	65107,
    	65112,
    	65127,
    	65132,
    	65375,
    	65510,
    	65536
    ];
    var gbChars = [
    	0,
    	36,
    	38,
    	45,
    	50,
    	81,
    	89,
    	95,
    	96,
    	100,
    	103,
    	104,
    	105,
    	109,
    	126,
    	133,
    	148,
    	172,
    	175,
    	179,
    	208,
    	306,
    	307,
    	308,
    	309,
    	310,
    	311,
    	312,
    	313,
    	341,
    	428,
    	443,
    	544,
    	545,
    	558,
    	741,
    	742,
    	749,
    	750,
    	805,
    	819,
    	820,
    	7922,
    	7924,
    	7925,
    	7927,
    	7934,
    	7943,
    	7944,
    	7945,
    	7950,
    	8062,
    	8148,
    	8149,
    	8152,
    	8164,
    	8174,
    	8236,
    	8240,
    	8262,
    	8264,
    	8374,
    	8380,
    	8381,
    	8384,
    	8388,
    	8390,
    	8392,
    	8393,
    	8394,
    	8396,
    	8401,
    	8406,
    	8416,
    	8419,
    	8424,
    	8437,
    	8439,
    	8445,
    	8482,
    	8485,
    	8496,
    	8521,
    	8603,
    	8936,
    	8946,
    	9046,
    	9050,
    	9063,
    	9066,
    	9076,
    	9092,
    	9100,
    	9108,
    	9111,
    	9113,
    	9131,
    	9162,
    	9164,
    	9218,
    	9219,
    	11329,
    	11331,
    	11334,
    	11336,
    	11346,
    	11361,
    	11363,
    	11366,
    	11370,
    	11372,
    	11375,
    	11389,
    	11682,
    	11686,
    	11687,
    	11692,
    	11694,
    	11714,
    	11716,
    	11723,
    	11725,
    	11730,
    	11736,
    	11982,
    	11989,
    	12102,
    	12336,
    	12348,
    	12350,
    	12384,
    	12393,
    	12395,
    	12397,
    	12510,
    	12553,
    	12851,
    	12962,
    	12973,
    	13738,
    	13823,
    	13919,
    	13933,
    	14080,
    	14298,
    	14585,
    	14698,
    	15583,
    	15847,
    	16318,
    	16434,
    	16438,
    	16481,
    	16729,
    	17102,
    	17122,
    	17315,
    	17320,
    	17402,
    	17418,
    	17859,
    	17909,
    	17911,
    	17915,
    	17916,
    	17936,
    	17939,
    	17961,
    	18664,
    	18703,
    	18814,
    	18962,
    	19043,
    	33469,
    	33470,
    	33471,
    	33484,
    	33485,
    	33490,
    	33497,
    	33501,
    	33505,
    	33513,
    	33520,
    	33536,
    	33550,
    	37845,
    	37921,
    	37948,
    	38029,
    	38038,
    	38064,
    	38065,
    	38066,
    	38069,
    	38075,
    	38076,
    	38078,
    	39108,
    	39109,
    	39113,
    	39114,
    	39115,
    	39116,
    	39265,
    	39394,
    	189000
    ];
    var require$$4 = {
    	uChars: uChars,
    	gbChars: gbChars
    };

    var require$$5 = [
    	[
    		"0",
    		"\u0000",
    		127
    	],
    	[
    		"8141",
    		"갂갃갅갆갋",
    		4,
    		"갘갞갟갡갢갣갥",
    		6,
    		"갮갲갳갴"
    	],
    	[
    		"8161",
    		"갵갶갷갺갻갽갾갿걁",
    		9,
    		"걌걎",
    		5,
    		"걕"
    	],
    	[
    		"8181",
    		"걖걗걙걚걛걝",
    		18,
    		"걲걳걵걶걹걻",
    		4,
    		"겂겇겈겍겎겏겑겒겓겕",
    		6,
    		"겞겢",
    		5,
    		"겫겭겮겱",
    		6,
    		"겺겾겿곀곂곃곅곆곇곉곊곋곍",
    		7,
    		"곖곘",
    		7,
    		"곢곣곥곦곩곫곭곮곲곴곷",
    		4,
    		"곾곿괁괂괃괅괇",
    		4,
    		"괎괐괒괓"
    	],
    	[
    		"8241",
    		"괔괕괖괗괙괚괛괝괞괟괡",
    		7,
    		"괪괫괮",
    		5
    	],
    	[
    		"8261",
    		"괶괷괹괺괻괽",
    		6,
    		"굆굈굊",
    		5,
    		"굑굒굓굕굖굗"
    	],
    	[
    		"8281",
    		"굙",
    		7,
    		"굢굤",
    		7,
    		"굮굯굱굲굷굸굹굺굾궀궃",
    		4,
    		"궊궋궍궎궏궑",
    		10,
    		"궞",
    		5,
    		"궥",
    		17,
    		"궸",
    		7,
    		"귂귃귅귆귇귉",
    		6,
    		"귒귔",
    		7,
    		"귝귞귟귡귢귣귥",
    		18
    	],
    	[
    		"8341",
    		"귺귻귽귾긂",
    		5,
    		"긊긌긎",
    		5,
    		"긕",
    		7
    	],
    	[
    		"8361",
    		"긝",
    		18,
    		"긲긳긵긶긹긻긼"
    	],
    	[
    		"8381",
    		"긽긾긿깂깄깇깈깉깋깏깑깒깓깕깗",
    		4,
    		"깞깢깣깤깦깧깪깫깭깮깯깱",
    		6,
    		"깺깾",
    		5,
    		"꺆",
    		5,
    		"꺍",
    		46,
    		"꺿껁껂껃껅",
    		6,
    		"껎껒",
    		5,
    		"껚껛껝",
    		8
    	],
    	[
    		"8441",
    		"껦껧껩껪껬껮",
    		5,
    		"껵껶껷껹껺껻껽",
    		8
    	],
    	[
    		"8461",
    		"꼆꼉꼊꼋꼌꼎꼏꼑",
    		18
    	],
    	[
    		"8481",
    		"꼤",
    		7,
    		"꼮꼯꼱꼳꼵",
    		6,
    		"꼾꽀꽄꽅꽆꽇꽊",
    		5,
    		"꽑",
    		10,
    		"꽞",
    		5,
    		"꽦",
    		18,
    		"꽺",
    		5,
    		"꾁꾂꾃꾅꾆꾇꾉",
    		6,
    		"꾒꾓꾔꾖",
    		5,
    		"꾝",
    		26,
    		"꾺꾻꾽꾾"
    	],
    	[
    		"8541",
    		"꾿꿁",
    		5,
    		"꿊꿌꿏",
    		4,
    		"꿕",
    		6,
    		"꿝",
    		4
    	],
    	[
    		"8561",
    		"꿢",
    		5,
    		"꿪",
    		5,
    		"꿲꿳꿵꿶꿷꿹",
    		6,
    		"뀂뀃"
    	],
    	[
    		"8581",
    		"뀅",
    		6,
    		"뀍뀎뀏뀑뀒뀓뀕",
    		6,
    		"뀞",
    		9,
    		"뀩",
    		26,
    		"끆끇끉끋끍끏끐끑끒끖끘끚끛끜끞",
    		29,
    		"끾끿낁낂낃낅",
    		6,
    		"낎낐낒",
    		5,
    		"낛낝낞낣낤"
    	],
    	[
    		"8641",
    		"낥낦낧낪낰낲낶낷낹낺낻낽",
    		6,
    		"냆냊",
    		5,
    		"냒"
    	],
    	[
    		"8661",
    		"냓냕냖냗냙",
    		6,
    		"냡냢냣냤냦",
    		10
    	],
    	[
    		"8681",
    		"냱",
    		22,
    		"넊넍넎넏넑넔넕넖넗넚넞",
    		4,
    		"넦넧넩넪넫넭",
    		6,
    		"넶넺",
    		5,
    		"녂녃녅녆녇녉",
    		6,
    		"녒녓녖녗녙녚녛녝녞녟녡",
    		22,
    		"녺녻녽녾녿놁놃",
    		4,
    		"놊놌놎놏놐놑놕놖놗놙놚놛놝"
    	],
    	[
    		"8741",
    		"놞",
    		9,
    		"놩",
    		15
    	],
    	[
    		"8761",
    		"놹",
    		18,
    		"뇍뇎뇏뇑뇒뇓뇕"
    	],
    	[
    		"8781",
    		"뇖",
    		5,
    		"뇞뇠",
    		7,
    		"뇪뇫뇭뇮뇯뇱",
    		7,
    		"뇺뇼뇾",
    		5,
    		"눆눇눉눊눍",
    		6,
    		"눖눘눚",
    		5,
    		"눡",
    		18,
    		"눵",
    		6,
    		"눽",
    		26,
    		"뉙뉚뉛뉝뉞뉟뉡",
    		6,
    		"뉪",
    		4
    	],
    	[
    		"8841",
    		"뉯",
    		4,
    		"뉶",
    		5,
    		"뉽",
    		6,
    		"늆늇늈늊",
    		4
    	],
    	[
    		"8861",
    		"늏늒늓늕늖늗늛",
    		4,
    		"늢늤늧늨늩늫늭늮늯늱늲늳늵늶늷"
    	],
    	[
    		"8881",
    		"늸",
    		15,
    		"닊닋닍닎닏닑닓",
    		4,
    		"닚닜닞닟닠닡닣닧닩닪닰닱닲닶닼닽닾댂댃댅댆댇댉",
    		6,
    		"댒댖",
    		5,
    		"댝",
    		54,
    		"덗덙덚덝덠덡덢덣"
    	],
    	[
    		"8941",
    		"덦덨덪덬덭덯덲덳덵덶덷덹",
    		6,
    		"뎂뎆",
    		5,
    		"뎍"
    	],
    	[
    		"8961",
    		"뎎뎏뎑뎒뎓뎕",
    		10,
    		"뎢",
    		5,
    		"뎩뎪뎫뎭"
    	],
    	[
    		"8981",
    		"뎮",
    		21,
    		"돆돇돉돊돍돏돑돒돓돖돘돚돜돞돟돡돢돣돥돦돧돩",
    		18,
    		"돽",
    		18,
    		"됑",
    		6,
    		"됙됚됛됝됞됟됡",
    		6,
    		"됪됬",
    		7,
    		"됵",
    		15
    	],
    	[
    		"8a41",
    		"둅",
    		10,
    		"둒둓둕둖둗둙",
    		6,
    		"둢둤둦"
    	],
    	[
    		"8a61",
    		"둧",
    		4,
    		"둭",
    		18,
    		"뒁뒂"
    	],
    	[
    		"8a81",
    		"뒃",
    		4,
    		"뒉",
    		19,
    		"뒞",
    		5,
    		"뒥뒦뒧뒩뒪뒫뒭",
    		7,
    		"뒶뒸뒺",
    		5,
    		"듁듂듃듅듆듇듉",
    		6,
    		"듑듒듓듔듖",
    		5,
    		"듞듟듡듢듥듧",
    		4,
    		"듮듰듲",
    		5,
    		"듹",
    		26,
    		"딖딗딙딚딝"
    	],
    	[
    		"8b41",
    		"딞",
    		5,
    		"딦딫",
    		4,
    		"딲딳딵딶딷딹",
    		6,
    		"땂땆"
    	],
    	[
    		"8b61",
    		"땇땈땉땊땎땏땑땒땓땕",
    		6,
    		"땞땢",
    		8
    	],
    	[
    		"8b81",
    		"땫",
    		52,
    		"떢떣떥떦떧떩떬떭떮떯떲떶",
    		4,
    		"떾떿뗁뗂뗃뗅",
    		6,
    		"뗎뗒",
    		5,
    		"뗙",
    		18,
    		"뗭",
    		18
    	],
    	[
    		"8c41",
    		"똀",
    		15,
    		"똒똓똕똖똗똙",
    		4
    	],
    	[
    		"8c61",
    		"똞",
    		6,
    		"똦",
    		5,
    		"똭",
    		6,
    		"똵",
    		5
    	],
    	[
    		"8c81",
    		"똻",
    		12,
    		"뙉",
    		26,
    		"뙥뙦뙧뙩",
    		50,
    		"뚞뚟뚡뚢뚣뚥",
    		5,
    		"뚭뚮뚯뚰뚲",
    		16
    	],
    	[
    		"8d41",
    		"뛃",
    		16,
    		"뛕",
    		8
    	],
    	[
    		"8d61",
    		"뛞",
    		17,
    		"뛱뛲뛳뛵뛶뛷뛹뛺"
    	],
    	[
    		"8d81",
    		"뛻",
    		4,
    		"뜂뜃뜄뜆",
    		33,
    		"뜪뜫뜭뜮뜱",
    		6,
    		"뜺뜼",
    		7,
    		"띅띆띇띉띊띋띍",
    		6,
    		"띖",
    		9,
    		"띡띢띣띥띦띧띩",
    		6,
    		"띲띴띶",
    		5,
    		"띾띿랁랂랃랅",
    		6,
    		"랎랓랔랕랚랛랝랞"
    	],
    	[
    		"8e41",
    		"랟랡",
    		6,
    		"랪랮",
    		5,
    		"랶랷랹",
    		8
    	],
    	[
    		"8e61",
    		"럂",
    		4,
    		"럈럊",
    		19
    	],
    	[
    		"8e81",
    		"럞",
    		13,
    		"럮럯럱럲럳럵",
    		6,
    		"럾렂",
    		4,
    		"렊렋렍렎렏렑",
    		6,
    		"렚렜렞",
    		5,
    		"렦렧렩렪렫렭",
    		6,
    		"렶렺",
    		5,
    		"롁롂롃롅",
    		11,
    		"롒롔",
    		7,
    		"롞롟롡롢롣롥",
    		6,
    		"롮롰롲",
    		5,
    		"롹롺롻롽",
    		7
    	],
    	[
    		"8f41",
    		"뢅",
    		7,
    		"뢎",
    		17
    	],
    	[
    		"8f61",
    		"뢠",
    		7,
    		"뢩",
    		6,
    		"뢱뢲뢳뢵뢶뢷뢹",
    		4
    	],
    	[
    		"8f81",
    		"뢾뢿룂룄룆",
    		5,
    		"룍룎룏룑룒룓룕",
    		7,
    		"룞룠룢",
    		5,
    		"룪룫룭룮룯룱",
    		6,
    		"룺룼룾",
    		5,
    		"뤅",
    		18,
    		"뤙",
    		6,
    		"뤡",
    		26,
    		"뤾뤿륁륂륃륅",
    		6,
    		"륍륎륐륒",
    		5
    	],
    	[
    		"9041",
    		"륚륛륝륞륟륡",
    		6,
    		"륪륬륮",
    		5,
    		"륶륷륹륺륻륽"
    	],
    	[
    		"9061",
    		"륾",
    		5,
    		"릆릈릋릌릏",
    		15
    	],
    	[
    		"9081",
    		"릟",
    		12,
    		"릮릯릱릲릳릵",
    		6,
    		"릾맀맂",
    		5,
    		"맊맋맍맓",
    		4,
    		"맚맜맟맠맢맦맧맩맪맫맭",
    		6,
    		"맶맻",
    		4,
    		"먂",
    		5,
    		"먉",
    		11,
    		"먖",
    		33,
    		"먺먻먽먾먿멁멃멄멅멆"
    	],
    	[
    		"9141",
    		"멇멊멌멏멐멑멒멖멗멙멚멛멝",
    		6,
    		"멦멪",
    		5
    	],
    	[
    		"9161",
    		"멲멳멵멶멷멹",
    		9,
    		"몆몈몉몊몋몍",
    		5
    	],
    	[
    		"9181",
    		"몓",
    		20,
    		"몪몭몮몯몱몳",
    		4,
    		"몺몼몾",
    		5,
    		"뫅뫆뫇뫉",
    		14,
    		"뫚",
    		33,
    		"뫽뫾뫿묁묂묃묅",
    		7,
    		"묎묐묒",
    		5,
    		"묙묚묛묝묞묟묡",
    		6
    	],
    	[
    		"9241",
    		"묨묪묬",
    		7,
    		"묷묹묺묿",
    		4,
    		"뭆뭈뭊뭋뭌뭎뭑뭒"
    	],
    	[
    		"9261",
    		"뭓뭕뭖뭗뭙",
    		7,
    		"뭢뭤",
    		7,
    		"뭭",
    		4
    	],
    	[
    		"9281",
    		"뭲",
    		21,
    		"뮉뮊뮋뮍뮎뮏뮑",
    		18,
    		"뮥뮦뮧뮩뮪뮫뮭",
    		6,
    		"뮵뮶뮸",
    		7,
    		"믁믂믃믅믆믇믉",
    		6,
    		"믑믒믔",
    		35,
    		"믺믻믽믾밁"
    	],
    	[
    		"9341",
    		"밃",
    		4,
    		"밊밎밐밒밓밙밚밠밡밢밣밦밨밪밫밬밮밯밲밳밵"
    	],
    	[
    		"9361",
    		"밶밷밹",
    		6,
    		"뱂뱆뱇뱈뱊뱋뱎뱏뱑",
    		8
    	],
    	[
    		"9381",
    		"뱚뱛뱜뱞",
    		37,
    		"벆벇벉벊벍벏",
    		4,
    		"벖벘벛",
    		4,
    		"벢벣벥벦벩",
    		6,
    		"벲벶",
    		5,
    		"벾벿볁볂볃볅",
    		7,
    		"볎볒볓볔볖볗볙볚볛볝",
    		22,
    		"볷볹볺볻볽"
    	],
    	[
    		"9441",
    		"볾",
    		5,
    		"봆봈봊",
    		5,
    		"봑봒봓봕",
    		8
    	],
    	[
    		"9461",
    		"봞",
    		5,
    		"봥",
    		6,
    		"봭",
    		12
    	],
    	[
    		"9481",
    		"봺",
    		5,
    		"뵁",
    		6,
    		"뵊뵋뵍뵎뵏뵑",
    		6,
    		"뵚",
    		9,
    		"뵥뵦뵧뵩",
    		22,
    		"붂붃붅붆붋",
    		4,
    		"붒붔붖붗붘붛붝",
    		6,
    		"붥",
    		10,
    		"붱",
    		6,
    		"붹",
    		24
    	],
    	[
    		"9541",
    		"뷒뷓뷖뷗뷙뷚뷛뷝",
    		11,
    		"뷪",
    		5,
    		"뷱"
    	],
    	[
    		"9561",
    		"뷲뷳뷵뷶뷷뷹",
    		6,
    		"븁븂븄븆",
    		5,
    		"븎븏븑븒븓"
    	],
    	[
    		"9581",
    		"븕",
    		6,
    		"븞븠",
    		35,
    		"빆빇빉빊빋빍빏",
    		4,
    		"빖빘빜빝빞빟빢빣빥빦빧빩빫",
    		4,
    		"빲빶",
    		4,
    		"빾빿뺁뺂뺃뺅",
    		6,
    		"뺎뺒",
    		5,
    		"뺚",
    		13,
    		"뺩",
    		14
    	],
    	[
    		"9641",
    		"뺸",
    		23,
    		"뻒뻓"
    	],
    	[
    		"9661",
    		"뻕뻖뻙",
    		6,
    		"뻡뻢뻦",
    		5,
    		"뻭",
    		8
    	],
    	[
    		"9681",
    		"뻶",
    		10,
    		"뼂",
    		5,
    		"뼊",
    		13,
    		"뼚뼞",
    		33,
    		"뽂뽃뽅뽆뽇뽉",
    		6,
    		"뽒뽓뽔뽖",
    		44
    	],
    	[
    		"9741",
    		"뾃",
    		16,
    		"뾕",
    		8
    	],
    	[
    		"9761",
    		"뾞",
    		17,
    		"뾱",
    		7
    	],
    	[
    		"9781",
    		"뾹",
    		11,
    		"뿆",
    		5,
    		"뿎뿏뿑뿒뿓뿕",
    		6,
    		"뿝뿞뿠뿢",
    		89,
    		"쀽쀾쀿"
    	],
    	[
    		"9841",
    		"쁀",
    		16,
    		"쁒",
    		5,
    		"쁙쁚쁛"
    	],
    	[
    		"9861",
    		"쁝쁞쁟쁡",
    		6,
    		"쁪",
    		15
    	],
    	[
    		"9881",
    		"쁺",
    		21,
    		"삒삓삕삖삗삙",
    		6,
    		"삢삤삦",
    		5,
    		"삮삱삲삷",
    		4,
    		"삾샂샃샄샆샇샊샋샍샎샏샑",
    		6,
    		"샚샞",
    		5,
    		"샦샧샩샪샫샭",
    		6,
    		"샶샸샺",
    		5,
    		"섁섂섃섅섆섇섉",
    		6,
    		"섑섒섓섔섖",
    		5,
    		"섡섢섥섨섩섪섫섮"
    	],
    	[
    		"9941",
    		"섲섳섴섵섷섺섻섽섾섿셁",
    		6,
    		"셊셎",
    		5,
    		"셖셗"
    	],
    	[
    		"9961",
    		"셙셚셛셝",
    		6,
    		"셦셪",
    		5,
    		"셱셲셳셵셶셷셹셺셻"
    	],
    	[
    		"9981",
    		"셼",
    		8,
    		"솆",
    		5,
    		"솏솑솒솓솕솗",
    		4,
    		"솞솠솢솣솤솦솧솪솫솭솮솯솱",
    		11,
    		"솾",
    		5,
    		"쇅쇆쇇쇉쇊쇋쇍",
    		6,
    		"쇕쇖쇙",
    		6,
    		"쇡쇢쇣쇥쇦쇧쇩",
    		6,
    		"쇲쇴",
    		7,
    		"쇾쇿숁숂숃숅",
    		6,
    		"숎숐숒",
    		5,
    		"숚숛숝숞숡숢숣"
    	],
    	[
    		"9a41",
    		"숤숥숦숧숪숬숮숰숳숵",
    		16
    	],
    	[
    		"9a61",
    		"쉆쉇쉉",
    		6,
    		"쉒쉓쉕쉖쉗쉙",
    		6,
    		"쉡쉢쉣쉤쉦"
    	],
    	[
    		"9a81",
    		"쉧",
    		4,
    		"쉮쉯쉱쉲쉳쉵",
    		6,
    		"쉾슀슂",
    		5,
    		"슊",
    		5,
    		"슑",
    		6,
    		"슙슚슜슞",
    		5,
    		"슦슧슩슪슫슮",
    		5,
    		"슶슸슺",
    		33,
    		"싞싟싡싢싥",
    		5,
    		"싮싰싲싳싴싵싷싺싽싾싿쌁",
    		6,
    		"쌊쌋쌎쌏"
    	],
    	[
    		"9b41",
    		"쌐쌑쌒쌖쌗쌙쌚쌛쌝",
    		6,
    		"쌦쌧쌪",
    		8
    	],
    	[
    		"9b61",
    		"쌳",
    		17,
    		"썆",
    		7
    	],
    	[
    		"9b81",
    		"썎",
    		25,
    		"썪썫썭썮썯썱썳",
    		4,
    		"썺썻썾",
    		5,
    		"쎅쎆쎇쎉쎊쎋쎍",
    		50,
    		"쏁",
    		22,
    		"쏚"
    	],
    	[
    		"9c41",
    		"쏛쏝쏞쏡쏣",
    		4,
    		"쏪쏫쏬쏮",
    		5,
    		"쏶쏷쏹",
    		5
    	],
    	[
    		"9c61",
    		"쏿",
    		8,
    		"쐉",
    		6,
    		"쐑",
    		9
    	],
    	[
    		"9c81",
    		"쐛",
    		8,
    		"쐥",
    		6,
    		"쐭쐮쐯쐱쐲쐳쐵",
    		6,
    		"쐾",
    		9,
    		"쑉",
    		26,
    		"쑦쑧쑩쑪쑫쑭",
    		6,
    		"쑶쑷쑸쑺",
    		5,
    		"쒁",
    		18,
    		"쒕",
    		6,
    		"쒝",
    		12
    	],
    	[
    		"9d41",
    		"쒪",
    		13,
    		"쒹쒺쒻쒽",
    		8
    	],
    	[
    		"9d61",
    		"쓆",
    		25
    	],
    	[
    		"9d81",
    		"쓠",
    		8,
    		"쓪",
    		5,
    		"쓲쓳쓵쓶쓷쓹쓻쓼쓽쓾씂",
    		9,
    		"씍씎씏씑씒씓씕",
    		6,
    		"씝",
    		10,
    		"씪씫씭씮씯씱",
    		6,
    		"씺씼씾",
    		5,
    		"앆앇앋앏앐앑앒앖앚앛앜앟앢앣앥앦앧앩",
    		6,
    		"앲앶",
    		5,
    		"앾앿얁얂얃얅얆얈얉얊얋얎얐얒얓얔"
    	],
    	[
    		"9e41",
    		"얖얙얚얛얝얞얟얡",
    		7,
    		"얪",
    		9,
    		"얶"
    	],
    	[
    		"9e61",
    		"얷얺얿",
    		4,
    		"엋엍엏엒엓엕엖엗엙",
    		6,
    		"엢엤엦엧"
    	],
    	[
    		"9e81",
    		"엨엩엪엫엯엱엲엳엵엸엹엺엻옂옃옄옉옊옋옍옎옏옑",
    		6,
    		"옚옝",
    		6,
    		"옦옧옩옪옫옯옱옲옶옸옺옼옽옾옿왂왃왅왆왇왉",
    		6,
    		"왒왖",
    		5,
    		"왞왟왡",
    		10,
    		"왭왮왰왲",
    		5,
    		"왺왻왽왾왿욁",
    		6,
    		"욊욌욎",
    		5,
    		"욖욗욙욚욛욝",
    		6,
    		"욦"
    	],
    	[
    		"9f41",
    		"욨욪",
    		5,
    		"욲욳욵욶욷욻",
    		4,
    		"웂웄웆",
    		5,
    		"웎"
    	],
    	[
    		"9f61",
    		"웏웑웒웓웕",
    		6,
    		"웞웟웢",
    		5,
    		"웪웫웭웮웯웱웲"
    	],
    	[
    		"9f81",
    		"웳",
    		4,
    		"웺웻웼웾",
    		5,
    		"윆윇윉윊윋윍",
    		6,
    		"윖윘윚",
    		5,
    		"윢윣윥윦윧윩",
    		6,
    		"윲윴윶윸윹윺윻윾윿읁읂읃읅",
    		4,
    		"읋읎읐읙읚읛읝읞읟읡",
    		6,
    		"읩읪읬",
    		7,
    		"읶읷읹읺읻읿잀잁잂잆잋잌잍잏잒잓잕잙잛",
    		4,
    		"잢잧",
    		4,
    		"잮잯잱잲잳잵잶잷"
    	],
    	[
    		"a041",
    		"잸잹잺잻잾쟂",
    		5,
    		"쟊쟋쟍쟏쟑",
    		6,
    		"쟙쟚쟛쟜"
    	],
    	[
    		"a061",
    		"쟞",
    		5,
    		"쟥쟦쟧쟩쟪쟫쟭",
    		13
    	],
    	[
    		"a081",
    		"쟻",
    		4,
    		"젂젃젅젆젇젉젋",
    		4,
    		"젒젔젗",
    		4,
    		"젞젟젡젢젣젥",
    		6,
    		"젮젰젲",
    		5,
    		"젹젺젻젽젾젿졁",
    		6,
    		"졊졋졎",
    		5,
    		"졕",
    		26,
    		"졲졳졵졶졷졹졻",
    		4,
    		"좂좄좈좉좊좎",
    		5,
    		"좕",
    		7,
    		"좞좠좢좣좤"
    	],
    	[
    		"a141",
    		"좥좦좧좩",
    		18,
    		"좾좿죀죁"
    	],
    	[
    		"a161",
    		"죂죃죅죆죇죉죊죋죍",
    		6,
    		"죖죘죚",
    		5,
    		"죢죣죥"
    	],
    	[
    		"a181",
    		"죦",
    		14,
    		"죶",
    		5,
    		"죾죿줁줂줃줇",
    		4,
    		"줎　、。·‥…¨〃­―∥＼∼‘’“”〔〕〈",
    		9,
    		"±×÷≠≤≥∞∴°′″℃Å￠￡￥♂♀∠⊥⌒∂∇≡≒§※☆★○●◎◇◆□■△▲▽▼→←↑↓↔〓≪≫√∽∝∵∫∬∈∋⊆⊇⊂⊃∪∩∧∨￢"
    	],
    	[
    		"a241",
    		"줐줒",
    		5,
    		"줙",
    		18
    	],
    	[
    		"a261",
    		"줭",
    		6,
    		"줵",
    		18
    	],
    	[
    		"a281",
    		"쥈",
    		7,
    		"쥒쥓쥕쥖쥗쥙",
    		6,
    		"쥢쥤",
    		7,
    		"쥭쥮쥯⇒⇔∀∃´～ˇ˘˝˚˙¸˛¡¿ː∮∑∏¤℉‰◁◀▷▶♤♠♡♥♧♣⊙◈▣◐◑▒▤▥▨▧▦▩♨☏☎☜☞¶†‡↕↗↙↖↘♭♩♪♬㉿㈜№㏇™㏂㏘℡€®"
    	],
    	[
    		"a341",
    		"쥱쥲쥳쥵",
    		6,
    		"쥽",
    		10,
    		"즊즋즍즎즏"
    	],
    	[
    		"a361",
    		"즑",
    		6,
    		"즚즜즞",
    		16
    	],
    	[
    		"a381",
    		"즯",
    		16,
    		"짂짃짅짆짉짋",
    		4,
    		"짒짔짗짘짛！",
    		58,
    		"￦］",
    		32,
    		"￣"
    	],
    	[
    		"a441",
    		"짞짟짡짣짥짦짨짩짪짫짮짲",
    		5,
    		"짺짻짽짾짿쨁쨂쨃쨄"
    	],
    	[
    		"a461",
    		"쨅쨆쨇쨊쨎",
    		5,
    		"쨕쨖쨗쨙",
    		12
    	],
    	[
    		"a481",
    		"쨦쨧쨨쨪",
    		28,
    		"ㄱ",
    		93
    	],
    	[
    		"a541",
    		"쩇",
    		4,
    		"쩎쩏쩑쩒쩓쩕",
    		6,
    		"쩞쩢",
    		5,
    		"쩩쩪"
    	],
    	[
    		"a561",
    		"쩫",
    		17,
    		"쩾",
    		5,
    		"쪅쪆"
    	],
    	[
    		"a581",
    		"쪇",
    		16,
    		"쪙",
    		14,
    		"ⅰ",
    		9
    	],
    	[
    		"a5b0",
    		"Ⅰ",
    		9
    	],
    	[
    		"a5c1",
    		"Α",
    		16,
    		"Σ",
    		6
    	],
    	[
    		"a5e1",
    		"α",
    		16,
    		"σ",
    		6
    	],
    	[
    		"a641",
    		"쪨",
    		19,
    		"쪾쪿쫁쫂쫃쫅"
    	],
    	[
    		"a661",
    		"쫆",
    		5,
    		"쫎쫐쫒쫔쫕쫖쫗쫚",
    		5,
    		"쫡",
    		6
    	],
    	[
    		"a681",
    		"쫨쫩쫪쫫쫭",
    		6,
    		"쫵",
    		18,
    		"쬉쬊─│┌┐┘└├┬┤┴┼━┃┏┓┛┗┣┳┫┻╋┠┯┨┷┿┝┰┥┸╂┒┑┚┙┖┕┎┍┞┟┡┢┦┧┩┪┭┮┱┲┵┶┹┺┽┾╀╁╃",
    		7
    	],
    	[
    		"a741",
    		"쬋",
    		4,
    		"쬑쬒쬓쬕쬖쬗쬙",
    		6,
    		"쬢",
    		7
    	],
    	[
    		"a761",
    		"쬪",
    		22,
    		"쭂쭃쭄"
    	],
    	[
    		"a781",
    		"쭅쭆쭇쭊쭋쭍쭎쭏쭑",
    		6,
    		"쭚쭛쭜쭞",
    		5,
    		"쭥",
    		7,
    		"㎕㎖㎗ℓ㎘㏄㎣㎤㎥㎦㎙",
    		9,
    		"㏊㎍㎎㎏㏏㎈㎉㏈㎧㎨㎰",
    		9,
    		"㎀",
    		4,
    		"㎺",
    		5,
    		"㎐",
    		4,
    		"Ω㏀㏁㎊㎋㎌㏖㏅㎭㎮㎯㏛㎩㎪㎫㎬㏝㏐㏓㏃㏉㏜㏆"
    	],
    	[
    		"a841",
    		"쭭",
    		10,
    		"쭺",
    		14
    	],
    	[
    		"a861",
    		"쮉",
    		18,
    		"쮝",
    		6
    	],
    	[
    		"a881",
    		"쮤",
    		19,
    		"쮹",
    		11,
    		"ÆÐªĦ"
    	],
    	[
    		"a8a6",
    		"Ĳ"
    	],
    	[
    		"a8a8",
    		"ĿŁØŒºÞŦŊ"
    	],
    	[
    		"a8b1",
    		"㉠",
    		27,
    		"ⓐ",
    		25,
    		"①",
    		14,
    		"½⅓⅔¼¾⅛⅜⅝⅞"
    	],
    	[
    		"a941",
    		"쯅",
    		14,
    		"쯕",
    		10
    	],
    	[
    		"a961",
    		"쯠쯡쯢쯣쯥쯦쯨쯪",
    		18
    	],
    	[
    		"a981",
    		"쯽",
    		14,
    		"찎찏찑찒찓찕",
    		6,
    		"찞찟찠찣찤æđðħıĳĸŀłøœßþŧŋŉ㈀",
    		27,
    		"⒜",
    		25,
    		"⑴",
    		14,
    		"¹²³⁴ⁿ₁₂₃₄"
    	],
    	[
    		"aa41",
    		"찥찦찪찫찭찯찱",
    		6,
    		"찺찿",
    		4,
    		"챆챇챉챊챋챍챎"
    	],
    	[
    		"aa61",
    		"챏",
    		4,
    		"챖챚",
    		5,
    		"챡챢챣챥챧챩",
    		6,
    		"챱챲"
    	],
    	[
    		"aa81",
    		"챳챴챶",
    		29,
    		"ぁ",
    		82
    	],
    	[
    		"ab41",
    		"첔첕첖첗첚첛첝첞첟첡",
    		6,
    		"첪첮",
    		5,
    		"첶첷첹"
    	],
    	[
    		"ab61",
    		"첺첻첽",
    		6,
    		"쳆쳈쳊",
    		5,
    		"쳑쳒쳓쳕",
    		5
    	],
    	[
    		"ab81",
    		"쳛",
    		8,
    		"쳥",
    		6,
    		"쳭쳮쳯쳱",
    		12,
    		"ァ",
    		85
    	],
    	[
    		"ac41",
    		"쳾쳿촀촂",
    		5,
    		"촊촋촍촎촏촑",
    		6,
    		"촚촜촞촟촠"
    	],
    	[
    		"ac61",
    		"촡촢촣촥촦촧촩촪촫촭",
    		11,
    		"촺",
    		4
    	],
    	[
    		"ac81",
    		"촿",
    		28,
    		"쵝쵞쵟А",
    		5,
    		"ЁЖ",
    		25
    	],
    	[
    		"acd1",
    		"а",
    		5,
    		"ёж",
    		25
    	],
    	[
    		"ad41",
    		"쵡쵢쵣쵥",
    		6,
    		"쵮쵰쵲",
    		5,
    		"쵹",
    		7
    	],
    	[
    		"ad61",
    		"춁",
    		6,
    		"춉",
    		10,
    		"춖춗춙춚춛춝춞춟"
    	],
    	[
    		"ad81",
    		"춠춡춢춣춦춨춪",
    		5,
    		"춱",
    		18,
    		"췅"
    	],
    	[
    		"ae41",
    		"췆",
    		5,
    		"췍췎췏췑",
    		16
    	],
    	[
    		"ae61",
    		"췢",
    		5,
    		"췩췪췫췭췮췯췱",
    		6,
    		"췺췼췾",
    		4
    	],
    	[
    		"ae81",
    		"츃츅츆츇츉츊츋츍",
    		6,
    		"츕츖츗츘츚",
    		5,
    		"츢츣츥츦츧츩츪츫"
    	],
    	[
    		"af41",
    		"츬츭츮츯츲츴츶",
    		19
    	],
    	[
    		"af61",
    		"칊",
    		13,
    		"칚칛칝칞칢",
    		5,
    		"칪칬"
    	],
    	[
    		"af81",
    		"칮",
    		5,
    		"칶칷칹칺칻칽",
    		6,
    		"캆캈캊",
    		5,
    		"캒캓캕캖캗캙"
    	],
    	[
    		"b041",
    		"캚",
    		5,
    		"캢캦",
    		5,
    		"캮",
    		12
    	],
    	[
    		"b061",
    		"캻",
    		5,
    		"컂",
    		19
    	],
    	[
    		"b081",
    		"컖",
    		13,
    		"컦컧컩컪컭",
    		6,
    		"컶컺",
    		5,
    		"가각간갇갈갉갊감",
    		7,
    		"같",
    		4,
    		"갠갤갬갭갯갰갱갸갹갼걀걋걍걔걘걜거걱건걷걸걺검겁것겄겅겆겉겊겋게겐겔겜겝겟겠겡겨격겪견겯결겸겹겻겼경곁계곈곌곕곗고곡곤곧골곪곬곯곰곱곳공곶과곽관괄괆"
    	],
    	[
    		"b141",
    		"켂켃켅켆켇켉",
    		6,
    		"켒켔켖",
    		5,
    		"켝켞켟켡켢켣"
    	],
    	[
    		"b161",
    		"켥",
    		6,
    		"켮켲",
    		5,
    		"켹",
    		11
    	],
    	[
    		"b181",
    		"콅",
    		14,
    		"콖콗콙콚콛콝",
    		6,
    		"콦콨콪콫콬괌괍괏광괘괜괠괩괬괭괴괵괸괼굄굅굇굉교굔굘굡굣구국군굳굴굵굶굻굼굽굿궁궂궈궉권궐궜궝궤궷귀귁귄귈귐귑귓규균귤그극근귿글긁금급긋긍긔기긱긴긷길긺김깁깃깅깆깊까깍깎깐깔깖깜깝깟깠깡깥깨깩깬깰깸"
    	],
    	[
    		"b241",
    		"콭콮콯콲콳콵콶콷콹",
    		6,
    		"쾁쾂쾃쾄쾆",
    		5,
    		"쾍"
    	],
    	[
    		"b261",
    		"쾎",
    		18,
    		"쾢",
    		5,
    		"쾩"
    	],
    	[
    		"b281",
    		"쾪",
    		5,
    		"쾱",
    		18,
    		"쿅",
    		6,
    		"깹깻깼깽꺄꺅꺌꺼꺽꺾껀껄껌껍껏껐껑께껙껜껨껫껭껴껸껼꼇꼈꼍꼐꼬꼭꼰꼲꼴꼼꼽꼿꽁꽂꽃꽈꽉꽐꽜꽝꽤꽥꽹꾀꾄꾈꾐꾑꾕꾜꾸꾹꾼꿀꿇꿈꿉꿋꿍꿎꿔꿜꿨꿩꿰꿱꿴꿸뀀뀁뀄뀌뀐뀔뀜뀝뀨끄끅끈끊끌끎끓끔끕끗끙"
    	],
    	[
    		"b341",
    		"쿌",
    		19,
    		"쿢쿣쿥쿦쿧쿩"
    	],
    	[
    		"b361",
    		"쿪",
    		5,
    		"쿲쿴쿶",
    		5,
    		"쿽쿾쿿퀁퀂퀃퀅",
    		5
    	],
    	[
    		"b381",
    		"퀋",
    		5,
    		"퀒",
    		5,
    		"퀙",
    		19,
    		"끝끼끽낀낄낌낍낏낑나낙낚난낟날낡낢남납낫",
    		4,
    		"낱낳내낵낸낼냄냅냇냈냉냐냑냔냘냠냥너넉넋넌널넒넓넘넙넛넜넝넣네넥넨넬넴넵넷넸넹녀녁년녈념녑녔녕녘녜녠노녹논놀놂놈놉놋농높놓놔놘놜놨뇌뇐뇔뇜뇝"
    	],
    	[
    		"b441",
    		"퀮",
    		5,
    		"퀶퀷퀹퀺퀻퀽",
    		6,
    		"큆큈큊",
    		5
    	],
    	[
    		"b461",
    		"큑큒큓큕큖큗큙",
    		6,
    		"큡",
    		10,
    		"큮큯"
    	],
    	[
    		"b481",
    		"큱큲큳큵",
    		6,
    		"큾큿킀킂",
    		18,
    		"뇟뇨뇩뇬뇰뇹뇻뇽누눅눈눋눌눔눕눗눙눠눴눼뉘뉜뉠뉨뉩뉴뉵뉼늄늅늉느늑는늘늙늚늠늡늣능늦늪늬늰늴니닉닌닐닒님닙닛닝닢다닥닦단닫",
    		4,
    		"닳담답닷",
    		4,
    		"닿대댁댄댈댐댑댓댔댕댜더덕덖던덛덜덞덟덤덥"
    	],
    	[
    		"b541",
    		"킕",
    		14,
    		"킦킧킩킪킫킭",
    		5
    	],
    	[
    		"b561",
    		"킳킶킸킺",
    		5,
    		"탂탃탅탆탇탊",
    		5,
    		"탒탖",
    		4
    	],
    	[
    		"b581",
    		"탛탞탟탡탢탣탥",
    		6,
    		"탮탲",
    		5,
    		"탹",
    		11,
    		"덧덩덫덮데덱덴델뎀뎁뎃뎄뎅뎌뎐뎔뎠뎡뎨뎬도독돈돋돌돎돐돔돕돗동돛돝돠돤돨돼됐되된될됨됩됫됴두둑둔둘둠둡둣둥둬뒀뒈뒝뒤뒨뒬뒵뒷뒹듀듄듈듐듕드득든듣들듦듬듭듯등듸디딕딘딛딜딤딥딧딨딩딪따딱딴딸"
    	],
    	[
    		"b641",
    		"턅",
    		7,
    		"턎",
    		17
    	],
    	[
    		"b661",
    		"턠",
    		15,
    		"턲턳턵턶턷턹턻턼턽턾"
    	],
    	[
    		"b681",
    		"턿텂텆",
    		5,
    		"텎텏텑텒텓텕",
    		6,
    		"텞텠텢",
    		5,
    		"텩텪텫텭땀땁땃땄땅땋때땍땐땔땜땝땟땠땡떠떡떤떨떪떫떰떱떳떴떵떻떼떽뗀뗄뗌뗍뗏뗐뗑뗘뗬또똑똔똘똥똬똴뙈뙤뙨뚜뚝뚠뚤뚫뚬뚱뛔뛰뛴뛸뜀뜁뜅뜨뜩뜬뜯뜰뜸뜹뜻띄띈띌띔띕띠띤띨띰띱띳띵라락란랄람랍랏랐랑랒랖랗"
    	],
    	[
    		"b741",
    		"텮",
    		13,
    		"텽",
    		6,
    		"톅톆톇톉톊"
    	],
    	[
    		"b761",
    		"톋",
    		20,
    		"톢톣톥톦톧"
    	],
    	[
    		"b781",
    		"톩",
    		6,
    		"톲톴톶톷톸톹톻톽톾톿퇁",
    		14,
    		"래랙랜랠램랩랫랬랭랴략랸럇량러럭런럴럼럽럿렀렁렇레렉렌렐렘렙렛렝려력련렬렴렵렷렸령례롄롑롓로록론롤롬롭롯롱롸롼뢍뢨뢰뢴뢸룀룁룃룅료룐룔룝룟룡루룩룬룰룸룹룻룽뤄뤘뤠뤼뤽륀륄륌륏륑류륙륜률륨륩"
    	],
    	[
    		"b841",
    		"퇐",
    		7,
    		"퇙",
    		17
    	],
    	[
    		"b861",
    		"퇫",
    		8,
    		"퇵퇶퇷퇹",
    		13
    	],
    	[
    		"b881",
    		"툈툊",
    		5,
    		"툑",
    		24,
    		"륫륭르륵른를름릅릇릉릊릍릎리릭린릴림립릿링마막만많",
    		4,
    		"맘맙맛망맞맡맣매맥맨맬맴맵맷맸맹맺먀먁먈먕머먹먼멀멂멈멉멋멍멎멓메멕멘멜멤멥멧멨멩며멱면멸몃몄명몇몌모목몫몬몰몲몸몹못몽뫄뫈뫘뫙뫼"
    	],
    	[
    		"b941",
    		"툪툫툮툯툱툲툳툵",
    		6,
    		"툾퉀퉂",
    		5,
    		"퉉퉊퉋퉌"
    	],
    	[
    		"b961",
    		"퉍",
    		14,
    		"퉝",
    		6,
    		"퉥퉦퉧퉨"
    	],
    	[
    		"b981",
    		"퉩",
    		22,
    		"튂튃튅튆튇튉튊튋튌묀묄묍묏묑묘묜묠묩묫무묵묶문묻물묽묾뭄뭅뭇뭉뭍뭏뭐뭔뭘뭡뭣뭬뮈뮌뮐뮤뮨뮬뮴뮷므믄믈믐믓미믹민믿밀밂밈밉밋밌밍및밑바",
    		4,
    		"받",
    		4,
    		"밤밥밧방밭배백밴밸뱀뱁뱃뱄뱅뱉뱌뱍뱐뱝버벅번벋벌벎범법벗"
    	],
    	[
    		"ba41",
    		"튍튎튏튒튓튔튖",
    		5,
    		"튝튞튟튡튢튣튥",
    		6,
    		"튭"
    	],
    	[
    		"ba61",
    		"튮튯튰튲",
    		5,
    		"튺튻튽튾틁틃",
    		4,
    		"틊틌",
    		5
    	],
    	[
    		"ba81",
    		"틒틓틕틖틗틙틚틛틝",
    		6,
    		"틦",
    		9,
    		"틲틳틵틶틷틹틺벙벚베벡벤벧벨벰벱벳벴벵벼벽변별볍볏볐병볕볘볜보복볶본볼봄봅봇봉봐봔봤봬뵀뵈뵉뵌뵐뵘뵙뵤뵨부북분붇불붉붊붐붑붓붕붙붚붜붤붰붸뷔뷕뷘뷜뷩뷰뷴뷸븀븃븅브븍븐블븜븝븟비빅빈빌빎빔빕빗빙빚빛빠빡빤"
    	],
    	[
    		"bb41",
    		"틻",
    		4,
    		"팂팄팆",
    		5,
    		"팏팑팒팓팕팗",
    		4,
    		"팞팢팣"
    	],
    	[
    		"bb61",
    		"팤팦팧팪팫팭팮팯팱",
    		6,
    		"팺팾",
    		5,
    		"퍆퍇퍈퍉"
    	],
    	[
    		"bb81",
    		"퍊",
    		31,
    		"빨빪빰빱빳빴빵빻빼빽뺀뺄뺌뺍뺏뺐뺑뺘뺙뺨뻐뻑뻔뻗뻘뻠뻣뻤뻥뻬뼁뼈뼉뼘뼙뼛뼜뼝뽀뽁뽄뽈뽐뽑뽕뾔뾰뿅뿌뿍뿐뿔뿜뿟뿡쀼쁑쁘쁜쁠쁨쁩삐삑삔삘삠삡삣삥사삭삯산삳살삵삶삼삽삿샀상샅새색샌샐샘샙샛샜생샤"
    	],
    	[
    		"bc41",
    		"퍪",
    		17,
    		"퍾퍿펁펂펃펅펆펇"
    	],
    	[
    		"bc61",
    		"펈펉펊펋펎펒",
    		5,
    		"펚펛펝펞펟펡",
    		6,
    		"펪펬펮"
    	],
    	[
    		"bc81",
    		"펯",
    		4,
    		"펵펶펷펹펺펻펽",
    		6,
    		"폆폇폊",
    		5,
    		"폑",
    		5,
    		"샥샨샬샴샵샷샹섀섄섈섐섕서",
    		4,
    		"섣설섦섧섬섭섯섰성섶세섹센셀셈셉셋셌셍셔셕션셜셤셥셧셨셩셰셴셸솅소속솎손솔솖솜솝솟송솥솨솩솬솰솽쇄쇈쇌쇔쇗쇘쇠쇤쇨쇰쇱쇳쇼쇽숀숄숌숍숏숑수숙순숟술숨숩숫숭"
    	],
    	[
    		"bd41",
    		"폗폙",
    		7,
    		"폢폤",
    		7,
    		"폮폯폱폲폳폵폶폷"
    	],
    	[
    		"bd61",
    		"폸폹폺폻폾퐀퐂",
    		5,
    		"퐉",
    		13
    	],
    	[
    		"bd81",
    		"퐗",
    		5,
    		"퐞",
    		25,
    		"숯숱숲숴쉈쉐쉑쉔쉘쉠쉥쉬쉭쉰쉴쉼쉽쉿슁슈슉슐슘슛슝스슥슨슬슭슴습슷승시식신싣실싫심십싯싱싶싸싹싻싼쌀쌈쌉쌌쌍쌓쌔쌕쌘쌜쌤쌥쌨쌩썅써썩썬썰썲썸썹썼썽쎄쎈쎌쏀쏘쏙쏜쏟쏠쏢쏨쏩쏭쏴쏵쏸쐈쐐쐤쐬쐰"
    	],
    	[
    		"be41",
    		"퐸",
    		7,
    		"푁푂푃푅",
    		14
    	],
    	[
    		"be61",
    		"푔",
    		7,
    		"푝푞푟푡푢푣푥",
    		7,
    		"푮푰푱푲"
    	],
    	[
    		"be81",
    		"푳",
    		4,
    		"푺푻푽푾풁풃",
    		4,
    		"풊풌풎",
    		5,
    		"풕",
    		8,
    		"쐴쐼쐽쑈쑤쑥쑨쑬쑴쑵쑹쒀쒔쒜쒸쒼쓩쓰쓱쓴쓸쓺쓿씀씁씌씐씔씜씨씩씬씰씸씹씻씽아악안앉않알앍앎앓암압앗았앙앝앞애액앤앨앰앱앳앴앵야약얀얄얇얌얍얏양얕얗얘얜얠얩어억언얹얻얼얽얾엄",
    		6,
    		"엌엎"
    	],
    	[
    		"bf41",
    		"풞",
    		10,
    		"풪",
    		14
    	],
    	[
    		"bf61",
    		"풹",
    		18,
    		"퓍퓎퓏퓑퓒퓓퓕"
    	],
    	[
    		"bf81",
    		"퓖",
    		5,
    		"퓝퓞퓠",
    		7,
    		"퓩퓪퓫퓭퓮퓯퓱",
    		6,
    		"퓹퓺퓼에엑엔엘엠엡엣엥여역엮연열엶엷염",
    		5,
    		"옅옆옇예옌옐옘옙옛옜오옥온올옭옮옰옳옴옵옷옹옻와왁완왈왐왑왓왔왕왜왝왠왬왯왱외왹왼욀욈욉욋욍요욕욘욜욤욥욧용우욱운울욹욺움웁웃웅워웍원월웜웝웠웡웨"
    	],
    	[
    		"c041",
    		"퓾",
    		5,
    		"픅픆픇픉픊픋픍",
    		6,
    		"픖픘",
    		5
    	],
    	[
    		"c061",
    		"픞",
    		25
    	],
    	[
    		"c081",
    		"픸픹픺픻픾픿핁핂핃핅",
    		6,
    		"핎핐핒",
    		5,
    		"핚핛핝핞핟핡핢핣웩웬웰웸웹웽위윅윈윌윔윕윗윙유육윤율윰윱윳융윷으윽은을읊음읍읏응",
    		7,
    		"읜읠읨읫이익인일읽읾잃임입잇있잉잊잎자작잔잖잗잘잚잠잡잣잤장잦재잭잰잴잼잽잿쟀쟁쟈쟉쟌쟎쟐쟘쟝쟤쟨쟬저적전절젊"
    	],
    	[
    		"c141",
    		"핤핦핧핪핬핮",
    		5,
    		"핶핷핹핺핻핽",
    		6,
    		"햆햊햋"
    	],
    	[
    		"c161",
    		"햌햍햎햏햑",
    		19,
    		"햦햧"
    	],
    	[
    		"c181",
    		"햨",
    		31,
    		"점접젓정젖제젝젠젤젬젭젯젱져젼졀졈졉졌졍졔조족존졸졺좀좁좃종좆좇좋좌좍좔좝좟좡좨좼좽죄죈죌죔죕죗죙죠죡죤죵주죽준줄줅줆줌줍줏중줘줬줴쥐쥑쥔쥘쥠쥡쥣쥬쥰쥴쥼즈즉즌즐즘즙즛증지직진짇질짊짐집짓"
    	],
    	[
    		"c241",
    		"헊헋헍헎헏헑헓",
    		4,
    		"헚헜헞",
    		5,
    		"헦헧헩헪헫헭헮"
    	],
    	[
    		"c261",
    		"헯",
    		4,
    		"헶헸헺",
    		5,
    		"혂혃혅혆혇혉",
    		6,
    		"혒"
    	],
    	[
    		"c281",
    		"혖",
    		5,
    		"혝혞혟혡혢혣혥",
    		7,
    		"혮",
    		9,
    		"혺혻징짖짙짚짜짝짠짢짤짧짬짭짯짰짱째짹짼쨀쨈쨉쨋쨌쨍쨔쨘쨩쩌쩍쩐쩔쩜쩝쩟쩠쩡쩨쩽쪄쪘쪼쪽쫀쫄쫌쫍쫏쫑쫓쫘쫙쫠쫬쫴쬈쬐쬔쬘쬠쬡쭁쭈쭉쭌쭐쭘쭙쭝쭤쭸쭹쮜쮸쯔쯤쯧쯩찌찍찐찔찜찝찡찢찧차착찬찮찰참찹찻"
    	],
    	[
    		"c341",
    		"혽혾혿홁홂홃홄홆홇홊홌홎홏홐홒홓홖홗홙홚홛홝",
    		4
    	],
    	[
    		"c361",
    		"홢",
    		4,
    		"홨홪",
    		5,
    		"홲홳홵",
    		11
    	],
    	[
    		"c381",
    		"횁횂횄횆",
    		5,
    		"횎횏횑횒횓횕",
    		7,
    		"횞횠횢",
    		5,
    		"횩횪찼창찾채책챈챌챔챕챗챘챙챠챤챦챨챰챵처척천철첨첩첫첬청체첵첸첼쳄쳅쳇쳉쳐쳔쳤쳬쳰촁초촉촌촐촘촙촛총촤촨촬촹최쵠쵤쵬쵭쵯쵱쵸춈추축춘출춤춥춧충춰췄췌췐취췬췰췸췹췻췽츄츈츌츔츙츠측츤츨츰츱츳층"
    	],
    	[
    		"c441",
    		"횫횭횮횯횱",
    		7,
    		"횺횼",
    		7,
    		"훆훇훉훊훋"
    	],
    	[
    		"c461",
    		"훍훎훏훐훒훓훕훖훘훚",
    		5,
    		"훡훢훣훥훦훧훩",
    		4
    	],
    	[
    		"c481",
    		"훮훯훱훲훳훴훶",
    		5,
    		"훾훿휁휂휃휅",
    		11,
    		"휒휓휔치칙친칟칠칡침칩칫칭카칵칸칼캄캅캇캉캐캑캔캘캠캡캣캤캥캬캭컁커컥컨컫컬컴컵컷컸컹케켁켄켈켐켑켓켕켜켠켤켬켭켯켰켱켸코콕콘콜콤콥콧콩콰콱콴콸쾀쾅쾌쾡쾨쾰쿄쿠쿡쿤쿨쿰쿱쿳쿵쿼퀀퀄퀑퀘퀭퀴퀵퀸퀼"
    	],
    	[
    		"c541",
    		"휕휖휗휚휛휝휞휟휡",
    		6,
    		"휪휬휮",
    		5,
    		"휶휷휹"
    	],
    	[
    		"c561",
    		"휺휻휽",
    		6,
    		"흅흆흈흊",
    		5,
    		"흒흓흕흚",
    		4
    	],
    	[
    		"c581",
    		"흟흢흤흦흧흨흪흫흭흮흯흱흲흳흵",
    		6,
    		"흾흿힀힂",
    		5,
    		"힊힋큄큅큇큉큐큔큘큠크큭큰클큼큽킁키킥킨킬킴킵킷킹타탁탄탈탉탐탑탓탔탕태택탠탤탬탭탯탰탱탸턍터턱턴털턺텀텁텃텄텅테텍텐텔템텝텟텡텨텬텼톄톈토톡톤톨톰톱톳통톺톼퇀퇘퇴퇸툇툉툐투툭툰툴툼툽툿퉁퉈퉜"
    	],
    	[
    		"c641",
    		"힍힎힏힑",
    		6,
    		"힚힜힞",
    		5
    	],
    	[
    		"c6a1",
    		"퉤튀튁튄튈튐튑튕튜튠튤튬튱트특튼튿틀틂틈틉틋틔틘틜틤틥티틱틴틸팀팁팃팅파팍팎판팔팖팜팝팟팠팡팥패팩팬팰팸팹팻팼팽퍄퍅퍼퍽펀펄펌펍펏펐펑페펙펜펠펨펩펫펭펴편펼폄폅폈평폐폘폡폣포폭폰폴폼폽폿퐁"
    	],
    	[
    		"c7a1",
    		"퐈퐝푀푄표푠푤푭푯푸푹푼푿풀풂품풉풋풍풔풩퓌퓐퓔퓜퓟퓨퓬퓰퓸퓻퓽프픈플픔픕픗피픽핀필핌핍핏핑하학한할핥함합핫항해핵핸핼햄햅햇했행햐향허헉헌헐헒험헙헛헝헤헥헨헬헴헵헷헹혀혁현혈혐협혓혔형혜혠"
    	],
    	[
    		"c8a1",
    		"혤혭호혹혼홀홅홈홉홋홍홑화확환활홧황홰홱홴횃횅회획횐횔횝횟횡효횬횰횹횻후훅훈훌훑훔훗훙훠훤훨훰훵훼훽휀휄휑휘휙휜휠휨휩휫휭휴휵휸휼흄흇흉흐흑흔흖흗흘흙흠흡흣흥흩희흰흴흼흽힁히힉힌힐힘힙힛힝"
    	],
    	[
    		"caa1",
    		"伽佳假價加可呵哥嘉嫁家暇架枷柯歌珂痂稼苛茄街袈訶賈跏軻迦駕刻却各恪慤殼珏脚覺角閣侃刊墾奸姦干幹懇揀杆柬桿澗癎看磵稈竿簡肝艮艱諫間乫喝曷渴碣竭葛褐蝎鞨勘坎堪嵌感憾戡敢柑橄減甘疳監瞰紺邯鑑鑒龕"
    	],
    	[
    		"cba1",
    		"匣岬甲胛鉀閘剛堈姜岡崗康强彊慷江畺疆糠絳綱羌腔舡薑襁講鋼降鱇介价個凱塏愷愾慨改槪漑疥皆盖箇芥蓋豈鎧開喀客坑更粳羹醵倨去居巨拒据據擧渠炬祛距踞車遽鉅鋸乾件健巾建愆楗腱虔蹇鍵騫乞傑杰桀儉劍劒檢"
    	],
    	[
    		"cca1",
    		"瞼鈐黔劫怯迲偈憩揭擊格檄激膈覡隔堅牽犬甄絹繭肩見譴遣鵑抉決潔結缺訣兼慊箝謙鉗鎌京俓倞傾儆勁勍卿坰境庚徑慶憬擎敬景暻更梗涇炅烱璟璥瓊痙硬磬竟競絅經耕耿脛莖警輕逕鏡頃頸驚鯨係啓堺契季屆悸戒桂械"
    	],
    	[
    		"cda1",
    		"棨溪界癸磎稽系繫繼計誡谿階鷄古叩告呱固姑孤尻庫拷攷故敲暠枯槁沽痼皐睾稿羔考股膏苦苽菰藁蠱袴誥賈辜錮雇顧高鼓哭斛曲梏穀谷鵠困坤崑昆梱棍滾琨袞鯤汨滑骨供公共功孔工恐恭拱控攻珙空蚣貢鞏串寡戈果瓜"
    	],
    	[
    		"cea1",
    		"科菓誇課跨過鍋顆廓槨藿郭串冠官寬慣棺款灌琯瓘管罐菅觀貫關館刮恝括适侊光匡壙廣曠洸炚狂珖筐胱鑛卦掛罫乖傀塊壞怪愧拐槐魁宏紘肱轟交僑咬喬嬌嶠巧攪敎校橋狡皎矯絞翹膠蕎蛟較轎郊餃驕鮫丘久九仇俱具勾"
    	],
    	[
    		"cfa1",
    		"區口句咎嘔坵垢寇嶇廐懼拘救枸柩構歐毆毬求溝灸狗玖球瞿矩究絿耉臼舅舊苟衢謳購軀逑邱鉤銶駒驅鳩鷗龜國局菊鞠鞫麴君窘群裙軍郡堀屈掘窟宮弓穹窮芎躬倦券勸卷圈拳捲權淃眷厥獗蕨蹶闕机櫃潰詭軌饋句晷歸貴"
    	],
    	[
    		"d0a1",
    		"鬼龜叫圭奎揆槻珪硅窺竅糾葵規赳逵閨勻均畇筠菌鈞龜橘克剋劇戟棘極隙僅劤勤懃斤根槿瑾筋芹菫覲謹近饉契今妗擒昑檎琴禁禽芩衾衿襟金錦伋及急扱汲級給亘兢矜肯企伎其冀嗜器圻基埼夔奇妓寄岐崎己幾忌技旗旣"
    	],
    	[
    		"d1a1",
    		"朞期杞棋棄機欺氣汽沂淇玘琦琪璂璣畸畿碁磯祁祇祈祺箕紀綺羈耆耭肌記譏豈起錡錤飢饑騎騏驥麒緊佶吉拮桔金喫儺喇奈娜懦懶拏拿癩",
    		5,
    		"那樂",
    		4,
    		"諾酪駱亂卵暖欄煖爛蘭難鸞捏捺南嵐枏楠湳濫男藍襤拉"
    	],
    	[
    		"d2a1",
    		"納臘蠟衲囊娘廊",
    		4,
    		"乃來內奈柰耐冷女年撚秊念恬拈捻寧寗努勞奴弩怒擄櫓爐瑙盧",
    		5,
    		"駑魯",
    		10,
    		"濃籠聾膿農惱牢磊腦賂雷尿壘",
    		7,
    		"嫩訥杻紐勒",
    		5,
    		"能菱陵尼泥匿溺多茶"
    	],
    	[
    		"d3a1",
    		"丹亶但單團壇彖斷旦檀段湍短端簞緞蛋袒鄲鍛撻澾獺疸達啖坍憺擔曇淡湛潭澹痰聃膽蕁覃談譚錟沓畓答踏遝唐堂塘幢戇撞棠當糖螳黨代垈坮大對岱帶待戴擡玳臺袋貸隊黛宅德悳倒刀到圖堵塗導屠島嶋度徒悼挑掉搗桃"
    	],
    	[
    		"d4a1",
    		"棹櫂淘渡滔濤燾盜睹禱稻萄覩賭跳蹈逃途道都鍍陶韜毒瀆牘犢獨督禿篤纛讀墩惇敦旽暾沌焞燉豚頓乭突仝冬凍動同憧東桐棟洞潼疼瞳童胴董銅兜斗杜枓痘竇荳讀豆逗頭屯臀芚遁遯鈍得嶝橙燈登等藤謄鄧騰喇懶拏癩羅"
    	],
    	[
    		"d5a1",
    		"蘿螺裸邏樂洛烙珞絡落諾酪駱丹亂卵欄欒瀾爛蘭鸞剌辣嵐擥攬欖濫籃纜藍襤覽拉臘蠟廊朗浪狼琅瑯螂郞來崍徠萊冷掠略亮倆兩凉梁樑粮粱糧良諒輛量侶儷勵呂廬慮戾旅櫚濾礪藜蠣閭驢驪麗黎力曆歷瀝礫轢靂憐戀攣漣"
    	],
    	[
    		"d6a1",
    		"煉璉練聯蓮輦連鍊冽列劣洌烈裂廉斂殮濂簾獵令伶囹寧岺嶺怜玲笭羚翎聆逞鈴零靈領齡例澧禮醴隷勞怒撈擄櫓潞瀘爐盧老蘆虜路輅露魯鷺鹵碌祿綠菉錄鹿麓論壟弄朧瀧瓏籠聾儡瀨牢磊賂賚賴雷了僚寮廖料燎療瞭聊蓼"
    	],
    	[
    		"d7a1",
    		"遼鬧龍壘婁屢樓淚漏瘻累縷蔞褸鏤陋劉旒柳榴流溜瀏琉瑠留瘤硫謬類六戮陸侖倫崙淪綸輪律慄栗率隆勒肋凜凌楞稜綾菱陵俚利厘吏唎履悧李梨浬犁狸理璃異痢籬罹羸莉裏裡里釐離鯉吝潾燐璘藺躪隣鱗麟林淋琳臨霖砬"
    	],
    	[
    		"d8a1",
    		"立笠粒摩瑪痲碼磨馬魔麻寞幕漠膜莫邈万卍娩巒彎慢挽晩曼滿漫灣瞞萬蔓蠻輓饅鰻唜抹末沫茉襪靺亡妄忘忙望網罔芒茫莽輞邙埋妹媒寐昧枚梅每煤罵買賣邁魅脈貊陌驀麥孟氓猛盲盟萌冪覓免冕勉棉沔眄眠綿緬面麵滅"
    	],
    	[
    		"d9a1",
    		"蔑冥名命明暝椧溟皿瞑茗蓂螟酩銘鳴袂侮冒募姆帽慕摸摹暮某模母毛牟牡瑁眸矛耗芼茅謀謨貌木沐牧目睦穆鶩歿沒夢朦蒙卯墓妙廟描昴杳渺猫竗苗錨務巫憮懋戊拇撫无楙武毋無珷畝繆舞茂蕪誣貿霧鵡墨默們刎吻問文"
    	],
    	[
    		"daa1",
    		"汶紊紋聞蚊門雯勿沕物味媚尾嵋彌微未梶楣渼湄眉米美薇謎迷靡黴岷悶愍憫敏旻旼民泯玟珉緡閔密蜜謐剝博拍搏撲朴樸泊珀璞箔粕縛膊舶薄迫雹駁伴半反叛拌搬攀斑槃泮潘班畔瘢盤盼磐磻礬絆般蟠返頒飯勃拔撥渤潑"
    	],
    	[
    		"dba1",
    		"發跋醱鉢髮魃倣傍坊妨尨幇彷房放方旁昉枋榜滂磅紡肪膀舫芳蒡蚌訪謗邦防龐倍俳北培徘拜排杯湃焙盃背胚裴裵褙賠輩配陪伯佰帛柏栢白百魄幡樊煩燔番磻繁蕃藩飜伐筏罰閥凡帆梵氾汎泛犯範范法琺僻劈壁擘檗璧癖"
    	],
    	[
    		"dca1",
    		"碧蘗闢霹便卞弁變辨辯邊別瞥鱉鼈丙倂兵屛幷昞昺柄棅炳甁病秉竝輧餠騈保堡報寶普步洑湺潽珤甫菩補褓譜輔伏僕匐卜宓復服福腹茯蔔複覆輹輻馥鰒本乶俸奉封峯峰捧棒烽熢琫縫蓬蜂逢鋒鳳不付俯傅剖副否咐埠夫婦"
    	],
    	[
    		"dda1",
    		"孚孵富府復扶敷斧浮溥父符簿缶腐腑膚艀芙莩訃負賦賻赴趺部釜阜附駙鳧北分吩噴墳奔奮忿憤扮昐汾焚盆粉糞紛芬賁雰不佛弗彿拂崩朋棚硼繃鵬丕備匕匪卑妃婢庇悲憊扉批斐枇榧比毖毗毘沸泌琵痺砒碑秕秘粃緋翡肥"
    	],
    	[
    		"dea1",
    		"脾臂菲蜚裨誹譬費鄙非飛鼻嚬嬪彬斌檳殯浜濱瀕牝玭貧賓頻憑氷聘騁乍事些仕伺似使俟僿史司唆嗣四士奢娑寫寺射巳師徙思捨斜斯柶査梭死沙泗渣瀉獅砂社祀祠私篩紗絲肆舍莎蓑蛇裟詐詞謝賜赦辭邪飼駟麝削數朔索"
    	],
    	[
    		"dfa1",
    		"傘刪山散汕珊産疝算蒜酸霰乷撒殺煞薩三參杉森渗芟蔘衫揷澁鈒颯上傷像償商喪嘗孀尙峠常床庠廂想桑橡湘爽牀狀相祥箱翔裳觴詳象賞霜塞璽賽嗇塞穡索色牲生甥省笙墅壻嶼序庶徐恕抒捿敍暑曙書栖棲犀瑞筮絮緖署"
    	],
    	[
    		"e0a1",
    		"胥舒薯西誓逝鋤黍鼠夕奭席惜昔晳析汐淅潟石碩蓆釋錫仙僊先善嬋宣扇敾旋渲煽琁瑄璇璿癬禪線繕羨腺膳船蘚蟬詵跣選銑鐥饍鮮卨屑楔泄洩渫舌薛褻設說雪齧剡暹殲纖蟾贍閃陝攝涉燮葉城姓宬性惺成星晟猩珹盛省筬"
    	],
    	[
    		"e1a1",
    		"聖聲腥誠醒世勢歲洗稅笹細說貰召嘯塑宵小少巢所掃搔昭梳沼消溯瀟炤燒甦疏疎瘙笑篠簫素紹蔬蕭蘇訴逍遡邵銷韶騷俗屬束涑粟續謖贖速孫巽損蓀遜飡率宋悚松淞訟誦送頌刷殺灑碎鎖衰釗修受嗽囚垂壽嫂守岫峀帥愁"
    	],
    	[
    		"e2a1",
    		"戍手授搜收數樹殊水洙漱燧狩獸琇璲瘦睡秀穗竪粹綏綬繡羞脩茱蒐蓚藪袖誰讐輸遂邃酬銖銹隋隧隨雖需須首髓鬚叔塾夙孰宿淑潚熟琡璹肅菽巡徇循恂旬栒楯橓殉洵淳珣盾瞬筍純脣舜荀蓴蕣詢諄醇錞順馴戌術述鉥崇崧"
    	],
    	[
    		"e3a1",
    		"嵩瑟膝蝨濕拾習褶襲丞乘僧勝升承昇繩蠅陞侍匙嘶始媤尸屎屍市弑恃施是時枾柴猜矢示翅蒔蓍視試詩諡豕豺埴寔式息拭植殖湜熄篒蝕識軾食飾伸侁信呻娠宸愼新晨燼申神紳腎臣莘薪藎蜃訊身辛辰迅失室實悉審尋心沁"
    	],
    	[
    		"e4a1",
    		"沈深瀋甚芯諶什十拾雙氏亞俄兒啞娥峨我牙芽莪蛾衙訝阿雅餓鴉鵝堊岳嶽幄惡愕握樂渥鄂鍔顎鰐齷安岸按晏案眼雁鞍顔鮟斡謁軋閼唵岩巖庵暗癌菴闇壓押狎鴨仰央怏昻殃秧鴦厓哀埃崖愛曖涯碍艾隘靄厄扼掖液縊腋額"
    	],
    	[
    		"e5a1",
    		"櫻罌鶯鸚也倻冶夜惹揶椰爺耶若野弱掠略約若葯蒻藥躍亮佯兩凉壤孃恙揚攘敭暘梁楊樣洋瀁煬痒瘍禳穰糧羊良襄諒讓釀陽量養圄御於漁瘀禦語馭魚齬億憶抑檍臆偃堰彦焉言諺孼蘖俺儼嚴奄掩淹嶪業円予余勵呂女如廬"
    	],
    	[
    		"e6a1",
    		"旅歟汝濾璵礖礪與艅茹輿轝閭餘驪麗黎亦力域役易曆歷疫繹譯轢逆驛嚥堧姸娟宴年延憐戀捐挻撚椽沇沿涎涓淵演漣烟然煙煉燃燕璉硏硯秊筵緣練縯聯衍軟輦蓮連鉛鍊鳶列劣咽悅涅烈熱裂說閱厭廉念捻染殮炎焰琰艶苒"
    	],
    	[
    		"e7a1",
    		"簾閻髥鹽曄獵燁葉令囹塋寧嶺嶸影怜映暎楹榮永泳渶潁濚瀛瀯煐營獰玲瑛瑩瓔盈穎纓羚聆英詠迎鈴鍈零霙靈領乂倪例刈叡曳汭濊猊睿穢芮藝蘂禮裔詣譽豫醴銳隸霓預五伍俉傲午吾吳嗚塢墺奧娛寤悟惡懊敖旿晤梧汚澳"
    	],
    	[
    		"e8a1",
    		"烏熬獒筽蜈誤鰲鼇屋沃獄玉鈺溫瑥瘟穩縕蘊兀壅擁瓮甕癰翁邕雍饔渦瓦窩窪臥蛙蝸訛婉完宛梡椀浣玩琓琬碗緩翫脘腕莞豌阮頑曰往旺枉汪王倭娃歪矮外嵬巍猥畏了僚僥凹堯夭妖姚寥寮尿嶢拗搖撓擾料曜樂橈燎燿瑤療"
    	],
    	[
    		"e9a1",
    		"窈窯繇繞耀腰蓼蟯要謠遙遼邀饒慾欲浴縟褥辱俑傭冗勇埇墉容庸慂榕涌湧溶熔瑢用甬聳茸蓉踊鎔鏞龍于佑偶優又友右宇寓尤愚憂旴牛玗瑀盂祐禑禹紆羽芋藕虞迂遇郵釪隅雨雩勖彧旭昱栯煜稶郁頊云暈橒殞澐熉耘芸蕓"
    	],
    	[
    		"eaa1",
    		"運隕雲韻蔚鬱亐熊雄元原員圓園垣媛嫄寃怨愿援沅洹湲源爰猿瑗苑袁轅遠阮院願鴛月越鉞位偉僞危圍委威尉慰暐渭爲瑋緯胃萎葦蔿蝟衛褘謂違韋魏乳侑儒兪劉唯喩孺宥幼幽庾悠惟愈愉揄攸有杻柔柚柳楡楢油洧流游溜"
    	],
    	[
    		"eba1",
    		"濡猶猷琉瑜由留癒硫紐維臾萸裕誘諛諭踰蹂遊逾遺酉釉鍮類六堉戮毓肉育陸倫允奫尹崙淪潤玧胤贇輪鈗閏律慄栗率聿戎瀜絨融隆垠恩慇殷誾銀隱乙吟淫蔭陰音飮揖泣邑凝應膺鷹依倚儀宜意懿擬椅毅疑矣義艤薏蟻衣誼"
    	],
    	[
    		"eca1",
    		"議醫二以伊利吏夷姨履已弛彛怡易李梨泥爾珥理異痍痢移罹而耳肄苡荑裏裡貽貳邇里離飴餌匿溺瀷益翊翌翼謚人仁刃印吝咽因姻寅引忍湮燐璘絪茵藺蚓認隣靭靷鱗麟一佚佾壹日溢逸鎰馹任壬妊姙恁林淋稔臨荏賃入卄"
    	],
    	[
    		"eda1",
    		"立笠粒仍剩孕芿仔刺咨姉姿子字孜恣慈滋炙煮玆瓷疵磁紫者自茨蔗藉諮資雌作勺嚼斫昨灼炸爵綽芍酌雀鵲孱棧殘潺盞岑暫潛箴簪蠶雜丈仗匠場墻壯奬將帳庄張掌暲杖樟檣欌漿牆狀獐璋章粧腸臟臧莊葬蔣薔藏裝贓醬長"
    	],
    	[
    		"eea1",
    		"障再哉在宰才材栽梓渽滓災縡裁財載齋齎爭箏諍錚佇低儲咀姐底抵杵楮樗沮渚狙猪疽箸紵苧菹著藷詛貯躇這邸雎齟勣吊嫡寂摘敵滴狄炙的積笛籍績翟荻謫賊赤跡蹟迪迹適鏑佃佺傳全典前剪塡塼奠專展廛悛戰栓殿氈澱"
    	],
    	[
    		"efa1",
    		"煎琠田甸畑癲筌箋箭篆纏詮輾轉鈿銓錢鐫電顚顫餞切截折浙癤竊節絶占岾店漸点粘霑鮎點接摺蝶丁井亭停偵呈姃定幀庭廷征情挺政整旌晶晸柾楨檉正汀淀淨渟湞瀞炡玎珽町睛碇禎程穽精綎艇訂諪貞鄭酊釘鉦鋌錠霆靖"
    	],
    	[
    		"f0a1",
    		"靜頂鼎制劑啼堤帝弟悌提梯濟祭第臍薺製諸蹄醍除際霽題齊俎兆凋助嘲弔彫措操早晁曺曹朝條棗槽漕潮照燥爪璪眺祖祚租稠窕粗糟組繰肇藻蚤詔調趙躁造遭釣阻雕鳥族簇足鏃存尊卒拙猝倧宗從悰慫棕淙琮種終綜縱腫"
    	],
    	[
    		"f1a1",
    		"踪踵鍾鐘佐坐左座挫罪主住侏做姝胄呪周嗾奏宙州廚晝朱柱株注洲湊澍炷珠疇籌紂紬綢舟蛛註誅走躊輳週酎酒鑄駐竹粥俊儁准埈寯峻晙樽浚準濬焌畯竣蠢逡遵雋駿茁中仲衆重卽櫛楫汁葺增憎曾拯烝甑症繒蒸證贈之只"
    	],
    	[
    		"f2a1",
    		"咫地址志持指摯支旨智枝枳止池沚漬知砥祉祗紙肢脂至芝芷蜘誌識贄趾遲直稙稷織職唇嗔塵振搢晉晋桭榛殄津溱珍瑨璡畛疹盡眞瞋秦縉縝臻蔯袗診賑軫辰進鎭陣陳震侄叱姪嫉帙桎瓆疾秩窒膣蛭質跌迭斟朕什執潗緝輯"
    	],
    	[
    		"f3a1",
    		"鏶集徵懲澄且侘借叉嗟嵯差次此磋箚茶蹉車遮捉搾着窄錯鑿齪撰澯燦璨瓚竄簒纂粲纘讚贊鑽餐饌刹察擦札紮僭參塹慘慙懺斬站讒讖倉倡創唱娼廠彰愴敞昌昶暢槍滄漲猖瘡窓脹艙菖蒼債埰寀寨彩採砦綵菜蔡采釵冊柵策"
    	],
    	[
    		"f4a1",
    		"責凄妻悽處倜刺剔尺慽戚拓擲斥滌瘠脊蹠陟隻仟千喘天川擅泉淺玔穿舛薦賤踐遷釧闡阡韆凸哲喆徹撤澈綴輟轍鐵僉尖沾添甛瞻簽籤詹諂堞妾帖捷牒疊睫諜貼輒廳晴淸聽菁請靑鯖切剃替涕滯締諦逮遞體初剿哨憔抄招梢"
    	],
    	[
    		"f5a1",
    		"椒楚樵炒焦硝礁礎秒稍肖艸苕草蕉貂超酢醋醮促囑燭矗蜀觸寸忖村邨叢塚寵悤憁摠總聰蔥銃撮催崔最墜抽推椎楸樞湫皺秋芻萩諏趨追鄒酋醜錐錘鎚雛騶鰍丑畜祝竺筑築縮蓄蹙蹴軸逐春椿瑃出朮黜充忠沖蟲衝衷悴膵萃"
    	],
    	[
    		"f6a1",
    		"贅取吹嘴娶就炊翠聚脆臭趣醉驟鷲側仄厠惻測層侈値嗤峙幟恥梔治淄熾痔痴癡稚穉緇緻置致蚩輜雉馳齒則勅飭親七柒漆侵寢枕沈浸琛砧針鍼蟄秤稱快他咤唾墮妥惰打拖朶楕舵陀馱駝倬卓啄坼度托拓擢晫柝濁濯琢琸託"
    	],
    	[
    		"f7a1",
    		"鐸呑嘆坦彈憚歎灘炭綻誕奪脫探眈耽貪塔搭榻宕帑湯糖蕩兌台太怠態殆汰泰笞胎苔跆邰颱宅擇澤撑攄兎吐土討慟桶洞痛筒統通堆槌腿褪退頹偸套妬投透鬪慝特闖坡婆巴把播擺杷波派爬琶破罷芭跛頗判坂板版瓣販辦鈑"
    	],
    	[
    		"f8a1",
    		"阪八叭捌佩唄悖敗沛浿牌狽稗覇貝彭澎烹膨愎便偏扁片篇編翩遍鞭騙貶坪平枰萍評吠嬖幣廢弊斃肺蔽閉陛佈包匍匏咆哺圃布怖抛抱捕暴泡浦疱砲胞脯苞葡蒲袍褒逋鋪飽鮑幅暴曝瀑爆輻俵剽彪慓杓標漂瓢票表豹飇飄驃"
    	],
    	[
    		"f9a1",
    		"品稟楓諷豊風馮彼披疲皮被避陂匹弼必泌珌畢疋筆苾馝乏逼下何厦夏廈昰河瑕荷蝦賀遐霞鰕壑學虐謔鶴寒恨悍旱汗漢澣瀚罕翰閑閒限韓割轄函含咸啣喊檻涵緘艦銜陷鹹合哈盒蛤閤闔陜亢伉姮嫦巷恒抗杭桁沆港缸肛航"
    	],
    	[
    		"faa1",
    		"行降項亥偕咳垓奚孩害懈楷海瀣蟹解該諧邂駭骸劾核倖幸杏荇行享向嚮珦鄕響餉饗香噓墟虛許憲櫶獻軒歇險驗奕爀赫革俔峴弦懸晛泫炫玄玹現眩睍絃絢縣舷衒見賢鉉顯孑穴血頁嫌俠協夾峽挾浹狹脅脇莢鋏頰亨兄刑型"
    	],
    	[
    		"fba1",
    		"形泂滎瀅灐炯熒珩瑩荊螢衡逈邢鎣馨兮彗惠慧暳蕙蹊醯鞋乎互呼壕壺好岵弧戶扈昊晧毫浩淏湖滸澔濠濩灝狐琥瑚瓠皓祜糊縞胡芦葫蒿虎號蝴護豪鎬頀顥惑或酷婚昏混渾琿魂忽惚笏哄弘汞泓洪烘紅虹訌鴻化和嬅樺火畵"
    	],
    	[
    		"fca1",
    		"禍禾花華話譁貨靴廓擴攫確碻穫丸喚奐宦幻患換歡晥桓渙煥環紈還驩鰥活滑猾豁闊凰幌徨恍惶愰慌晃晄榥況湟滉潢煌璜皇篁簧荒蝗遑隍黃匯回廻徊恢悔懷晦會檜淮澮灰獪繪膾茴蛔誨賄劃獲宖橫鐄哮嚆孝效斅曉梟涍淆"
    	],
    	[
    		"fda1",
    		"爻肴酵驍侯候厚后吼喉嗅帿後朽煦珝逅勛勳塤壎焄熏燻薰訓暈薨喧暄煊萱卉喙毁彙徽揮暉煇諱輝麾休携烋畦虧恤譎鷸兇凶匈洶胸黑昕欣炘痕吃屹紇訖欠欽歆吸恰洽翕興僖凞喜噫囍姬嬉希憙憘戱晞曦熙熹熺犧禧稀羲詰"
    	]
    ];

    var require$$6 = [
    	[
    		"0",
    		"\u0000",
    		127
    	],
    	[
    		"a140",
    		"　，、。．‧；：？！︰…‥﹐﹑﹒·﹔﹕﹖﹗｜–︱—︳╴︴﹏（）︵︶｛｝︷︸〔〕︹︺【】︻︼《》︽︾〈〉︿﹀「」﹁﹂『』﹃﹄﹙﹚"
    	],
    	[
    		"a1a1",
    		"﹛﹜﹝﹞‘’“”〝〞‵′＃＆＊※§〃○●△▲◎☆★◇◆□■▽▼㊣℅¯￣＿ˍ﹉﹊﹍﹎﹋﹌﹟﹠﹡＋－×÷±√＜＞＝≦≧≠∞≒≡﹢",
    		4,
    		"～∩∪⊥∠∟⊿㏒㏑∫∮∵∴♀♂⊕⊙↑↓←→↖↗↙↘∥∣／"
    	],
    	[
    		"a240",
    		"＼∕﹨＄￥〒￠￡％＠℃℉﹩﹪﹫㏕㎜㎝㎞㏎㎡㎎㎏㏄°兙兛兞兝兡兣嗧瓩糎▁",
    		7,
    		"▏▎▍▌▋▊▉┼┴┬┤├▔─│▕┌┐└┘╭"
    	],
    	[
    		"a2a1",
    		"╮╰╯═╞╪╡◢◣◥◤╱╲╳０",
    		9,
    		"Ⅰ",
    		9,
    		"〡",
    		8,
    		"十卄卅Ａ",
    		25,
    		"ａ",
    		21
    	],
    	[
    		"a340",
    		"ｗｘｙｚΑ",
    		16,
    		"Σ",
    		6,
    		"α",
    		16,
    		"σ",
    		6,
    		"ㄅ",
    		10
    	],
    	[
    		"a3a1",
    		"ㄐ",
    		25,
    		"˙ˉˊˇˋ"
    	],
    	[
    		"a3e1",
    		"€"
    	],
    	[
    		"a440",
    		"一乙丁七乃九了二人儿入八几刀刁力匕十卜又三下丈上丫丸凡久么也乞于亡兀刃勺千叉口土士夕大女子孑孓寸小尢尸山川工己已巳巾干廾弋弓才"
    	],
    	[
    		"a4a1",
    		"丑丐不中丰丹之尹予云井互五亢仁什仃仆仇仍今介仄元允內六兮公冗凶分切刈勻勾勿化匹午升卅卞厄友及反壬天夫太夭孔少尤尺屯巴幻廿弔引心戈戶手扎支文斗斤方日曰月木欠止歹毋比毛氏水火爪父爻片牙牛犬王丙"
    	],
    	[
    		"a540",
    		"世丕且丘主乍乏乎以付仔仕他仗代令仙仞充兄冉冊冬凹出凸刊加功包匆北匝仟半卉卡占卯卮去可古右召叮叩叨叼司叵叫另只史叱台句叭叻四囚外"
    	],
    	[
    		"a5a1",
    		"央失奴奶孕它尼巨巧左市布平幼弁弘弗必戊打扔扒扑斥旦朮本未末札正母民氐永汁汀氾犯玄玉瓜瓦甘生用甩田由甲申疋白皮皿目矛矢石示禾穴立丞丟乒乓乩亙交亦亥仿伉伙伊伕伍伐休伏仲件任仰仳份企伋光兇兆先全"
    	],
    	[
    		"a640",
    		"共再冰列刑划刎刖劣匈匡匠印危吉吏同吊吐吁吋各向名合吃后吆吒因回囝圳地在圭圬圯圩夙多夷夸妄奸妃好她如妁字存宇守宅安寺尖屹州帆并年"
    	],
    	[
    		"a6a1",
    		"式弛忙忖戎戌戍成扣扛托收早旨旬旭曲曳有朽朴朱朵次此死氖汝汗汙江池汐汕污汛汍汎灰牟牝百竹米糸缶羊羽老考而耒耳聿肉肋肌臣自至臼舌舛舟艮色艾虫血行衣西阡串亨位住佇佗佞伴佛何估佐佑伽伺伸佃佔似但佣"
    	],
    	[
    		"a740",
    		"作你伯低伶余佝佈佚兌克免兵冶冷別判利刪刨劫助努劬匣即卵吝吭吞吾否呎吧呆呃吳呈呂君吩告吹吻吸吮吵吶吠吼呀吱含吟听囪困囤囫坊坑址坍"
    	],
    	[
    		"a7a1",
    		"均坎圾坐坏圻壯夾妝妒妨妞妣妙妖妍妤妓妊妥孝孜孚孛完宋宏尬局屁尿尾岐岑岔岌巫希序庇床廷弄弟彤形彷役忘忌志忍忱快忸忪戒我抄抗抖技扶抉扭把扼找批扳抒扯折扮投抓抑抆改攻攸旱更束李杏材村杜杖杞杉杆杠"
    	],
    	[
    		"a840",
    		"杓杗步每求汞沙沁沈沉沅沛汪決沐汰沌汨沖沒汽沃汲汾汴沆汶沍沔沘沂灶灼災灸牢牡牠狄狂玖甬甫男甸皂盯矣私秀禿究系罕肖肓肝肘肛肚育良芒"
    	],
    	[
    		"a8a1",
    		"芋芍見角言谷豆豕貝赤走足身車辛辰迂迆迅迄巡邑邢邪邦那酉釆里防阮阱阪阬並乖乳事些亞享京佯依侍佳使佬供例來侃佰併侈佩佻侖佾侏侑佺兔兒兕兩具其典冽函刻券刷刺到刮制剁劾劻卒協卓卑卦卷卸卹取叔受味呵"
    	],
    	[
    		"a940",
    		"咖呸咕咀呻呷咄咒咆呼咐呱呶和咚呢周咋命咎固垃坷坪坩坡坦坤坼夜奉奇奈奄奔妾妻委妹妮姑姆姐姍始姓姊妯妳姒姅孟孤季宗定官宜宙宛尚屈居"
    	],
    	[
    		"a9a1",
    		"屆岷岡岸岩岫岱岳帘帚帖帕帛帑幸庚店府底庖延弦弧弩往征彿彼忝忠忽念忿怏怔怯怵怖怪怕怡性怩怫怛或戕房戾所承拉拌拄抿拂抹拒招披拓拔拋拈抨抽押拐拙拇拍抵拚抱拘拖拗拆抬拎放斧於旺昔易昌昆昂明昀昏昕昊"
    	],
    	[
    		"aa40",
    		"昇服朋杭枋枕東果杳杷枇枝林杯杰板枉松析杵枚枓杼杪杲欣武歧歿氓氛泣注泳沱泌泥河沽沾沼波沫法泓沸泄油況沮泗泅泱沿治泡泛泊沬泯泜泖泠"
    	],
    	[
    		"aaa1",
    		"炕炎炒炊炙爬爭爸版牧物狀狎狙狗狐玩玨玟玫玥甽疝疙疚的盂盲直知矽社祀祁秉秈空穹竺糾罔羌羋者肺肥肢肱股肫肩肴肪肯臥臾舍芳芝芙芭芽芟芹花芬芥芯芸芣芰芾芷虎虱初表軋迎返近邵邸邱邶采金長門阜陀阿阻附"
    	],
    	[
    		"ab40",
    		"陂隹雨青非亟亭亮信侵侯便俠俑俏保促侶俘俟俊俗侮俐俄係俚俎俞侷兗冒冑冠剎剃削前剌剋則勇勉勃勁匍南卻厚叛咬哀咨哎哉咸咦咳哇哂咽咪品"
    	],
    	[
    		"aba1",
    		"哄哈咯咫咱咻咩咧咿囿垂型垠垣垢城垮垓奕契奏奎奐姜姘姿姣姨娃姥姪姚姦威姻孩宣宦室客宥封屎屏屍屋峙峒巷帝帥帟幽庠度建弈弭彥很待徊律徇後徉怒思怠急怎怨恍恰恨恢恆恃恬恫恪恤扁拜挖按拼拭持拮拽指拱拷"
    	],
    	[
    		"ac40",
    		"拯括拾拴挑挂政故斫施既春昭映昧是星昨昱昤曷柿染柱柔某柬架枯柵柩柯柄柑枴柚查枸柏柞柳枰柙柢柝柒歪殃殆段毒毗氟泉洋洲洪流津洌洱洞洗"
    	],
    	[
    		"aca1",
    		"活洽派洶洛泵洹洧洸洩洮洵洎洫炫為炳炬炯炭炸炮炤爰牲牯牴狩狠狡玷珊玻玲珍珀玳甚甭畏界畎畋疫疤疥疢疣癸皆皇皈盈盆盃盅省盹相眉看盾盼眇矜砂研砌砍祆祉祈祇禹禺科秒秋穿突竿竽籽紂紅紀紉紇約紆缸美羿耄"
    	],
    	[
    		"ad40",
    		"耐耍耑耶胖胥胚胃胄背胡胛胎胞胤胝致舢苧范茅苣苛苦茄若茂茉苒苗英茁苜苔苑苞苓苟苯茆虐虹虻虺衍衫要觔計訂訃貞負赴赳趴軍軌述迦迢迪迥"
    	],
    	[
    		"ada1",
    		"迭迫迤迨郊郎郁郃酋酊重閂限陋陌降面革韋韭音頁風飛食首香乘亳倌倍倣俯倦倥俸倩倖倆值借倚倒們俺倀倔倨俱倡個候倘俳修倭倪俾倫倉兼冤冥冢凍凌准凋剖剜剔剛剝匪卿原厝叟哨唐唁唷哼哥哲唆哺唔哩哭員唉哮哪"
    	],
    	[
    		"ae40",
    		"哦唧唇哽唏圃圄埂埔埋埃堉夏套奘奚娑娘娜娟娛娓姬娠娣娩娥娌娉孫屘宰害家宴宮宵容宸射屑展屐峭峽峻峪峨峰島崁峴差席師庫庭座弱徒徑徐恙"
    	],
    	[
    		"aea1",
    		"恣恥恐恕恭恩息悄悟悚悍悔悌悅悖扇拳挈拿捎挾振捕捂捆捏捉挺捐挽挪挫挨捍捌效敉料旁旅時晉晏晃晒晌晅晁書朔朕朗校核案框桓根桂桔栩梳栗桌桑栽柴桐桀格桃株桅栓栘桁殊殉殷氣氧氨氦氤泰浪涕消涇浦浸海浙涓"
    	],
    	[
    		"af40",
    		"浬涉浮浚浴浩涌涊浹涅浥涔烊烘烤烙烈烏爹特狼狹狽狸狷玆班琉珮珠珪珞畔畝畜畚留疾病症疲疳疽疼疹痂疸皋皰益盍盎眩真眠眨矩砰砧砸砝破砷"
    	],
    	[
    		"afa1",
    		"砥砭砠砟砲祕祐祠祟祖神祝祗祚秤秣秧租秦秩秘窄窈站笆笑粉紡紗紋紊素索純紐紕級紜納紙紛缺罟羔翅翁耆耘耕耙耗耽耿胱脂胰脅胭胴脆胸胳脈能脊胼胯臭臬舀舐航舫舨般芻茫荒荔荊茸荐草茵茴荏茲茹茶茗荀茱茨荃"
    	],
    	[
    		"b040",
    		"虔蚊蚪蚓蚤蚩蚌蚣蚜衰衷袁袂衽衹記訐討訌訕訊託訓訖訏訑豈豺豹財貢起躬軒軔軏辱送逆迷退迺迴逃追逅迸邕郡郝郢酒配酌釘針釗釜釙閃院陣陡"
    	],
    	[
    		"b0a1",
    		"陛陝除陘陞隻飢馬骨高鬥鬲鬼乾偺偽停假偃偌做偉健偶偎偕偵側偷偏倏偯偭兜冕凰剪副勒務勘動匐匏匙匿區匾參曼商啪啦啄啞啡啃啊唱啖問啕唯啤唸售啜唬啣唳啁啗圈國圉域堅堊堆埠埤基堂堵執培夠奢娶婁婉婦婪婀"
    	],
    	[
    		"b140",
    		"娼婢婚婆婊孰寇寅寄寂宿密尉專將屠屜屝崇崆崎崛崖崢崑崩崔崙崤崧崗巢常帶帳帷康庸庶庵庾張強彗彬彩彫得徙從徘御徠徜恿患悉悠您惋悴惦悽"
    	],
    	[
    		"b1a1",
    		"情悻悵惜悼惘惕惆惟悸惚惇戚戛扈掠控捲掖探接捷捧掘措捱掩掉掃掛捫推掄授掙採掬排掏掀捻捩捨捺敝敖救教敗啟敏敘敕敔斜斛斬族旋旌旎晝晚晤晨晦晞曹勗望梁梯梢梓梵桿桶梱梧梗械梃棄梭梆梅梔條梨梟梡梂欲殺"
    	],
    	[
    		"b240",
    		"毫毬氫涎涼淳淙液淡淌淤添淺清淇淋涯淑涮淞淹涸混淵淅淒渚涵淚淫淘淪深淮淨淆淄涪淬涿淦烹焉焊烽烯爽牽犁猜猛猖猓猙率琅琊球理現琍瓠瓶"
    	],
    	[
    		"b2a1",
    		"瓷甜產略畦畢異疏痔痕疵痊痍皎盔盒盛眷眾眼眶眸眺硫硃硎祥票祭移窒窕笠笨笛第符笙笞笮粒粗粕絆絃統紮紹紼絀細紳組累終紲紱缽羞羚翌翎習耜聊聆脯脖脣脫脩脰脤舂舵舷舶船莎莞莘荸莢莖莽莫莒莊莓莉莠荷荻荼"
    	],
    	[
    		"b340",
    		"莆莧處彪蛇蛀蚶蛄蚵蛆蛋蚱蚯蛉術袞袈被袒袖袍袋覓規訪訝訣訥許設訟訛訢豉豚販責貫貨貪貧赧赦趾趺軛軟這逍通逗連速逝逐逕逞造透逢逖逛途"
    	],
    	[
    		"b3a1",
    		"部郭都酗野釵釦釣釧釭釩閉陪陵陳陸陰陴陶陷陬雀雪雩章竟頂頃魚鳥鹵鹿麥麻傢傍傅備傑傀傖傘傚最凱割剴創剩勞勝勛博厥啻喀喧啼喊喝喘喂喜喪喔喇喋喃喳單喟唾喲喚喻喬喱啾喉喫喙圍堯堪場堤堰報堡堝堠壹壺奠"
    	],
    	[
    		"b440",
    		"婷媚婿媒媛媧孳孱寒富寓寐尊尋就嵌嵐崴嵇巽幅帽幀幃幾廊廁廂廄弼彭復循徨惑惡悲悶惠愜愣惺愕惰惻惴慨惱愎惶愉愀愒戟扉掣掌描揀揩揉揆揍"
    	],
    	[
    		"b4a1",
    		"插揣提握揖揭揮捶援揪換摒揚揹敞敦敢散斑斐斯普晰晴晶景暑智晾晷曾替期朝棺棕棠棘棗椅棟棵森棧棹棒棲棣棋棍植椒椎棉棚楮棻款欺欽殘殖殼毯氮氯氬港游湔渡渲湧湊渠渥渣減湛湘渤湖湮渭渦湯渴湍渺測湃渝渾滋"
    	],
    	[
    		"b540",
    		"溉渙湎湣湄湲湩湟焙焚焦焰無然煮焜牌犄犀猶猥猴猩琺琪琳琢琥琵琶琴琯琛琦琨甥甦畫番痢痛痣痙痘痞痠登發皖皓皴盜睏短硝硬硯稍稈程稅稀窘"
    	],
    	[
    		"b5a1",
    		"窗窖童竣等策筆筐筒答筍筋筏筑粟粥絞結絨絕紫絮絲絡給絢絰絳善翔翕耋聒肅腕腔腋腑腎脹腆脾腌腓腴舒舜菩萃菸萍菠菅萋菁華菱菴著萊菰萌菌菽菲菊萸萎萄菜萇菔菟虛蛟蛙蛭蛔蛛蛤蛐蛞街裁裂袱覃視註詠評詞証詁"
    	],
    	[
    		"b640",
    		"詔詛詐詆訴診訶詖象貂貯貼貳貽賁費賀貴買貶貿貸越超趁跎距跋跚跑跌跛跆軻軸軼辜逮逵週逸進逶鄂郵鄉郾酣酥量鈔鈕鈣鈉鈞鈍鈐鈇鈑閔閏開閑"
    	],
    	[
    		"b6a1",
    		"間閒閎隊階隋陽隅隆隍陲隄雁雅雄集雇雯雲韌項順須飧飪飯飩飲飭馮馭黃黍黑亂傭債傲傳僅傾催傷傻傯僇剿剷剽募勦勤勢勣匯嗟嗨嗓嗦嗎嗜嗇嗑嗣嗤嗯嗚嗡嗅嗆嗥嗉園圓塞塑塘塗塚塔填塌塭塊塢塒塋奧嫁嫉嫌媾媽媼"
    	],
    	[
    		"b740",
    		"媳嫂媲嵩嵯幌幹廉廈弒彙徬微愚意慈感想愛惹愁愈慎慌慄慍愾愴愧愍愆愷戡戢搓搾搞搪搭搽搬搏搜搔損搶搖搗搆敬斟新暗暉暇暈暖暄暘暍會榔業"
    	],
    	[
    		"b7a1",
    		"楚楷楠楔極椰概楊楨楫楞楓楹榆楝楣楛歇歲毀殿毓毽溢溯滓溶滂源溝滇滅溥溘溼溺溫滑準溜滄滔溪溧溴煎煙煩煤煉照煜煬煦煌煥煞煆煨煖爺牒猷獅猿猾瑯瑚瑕瑟瑞瑁琿瑙瑛瑜當畸瘀痰瘁痲痱痺痿痴痳盞盟睛睫睦睞督"
    	],
    	[
    		"b840",
    		"睹睪睬睜睥睨睢矮碎碰碗碘碌碉硼碑碓硿祺祿禁萬禽稜稚稠稔稟稞窟窠筷節筠筮筧粱粳粵經絹綑綁綏絛置罩罪署義羨群聖聘肆肄腱腰腸腥腮腳腫"
    	],
    	[
    		"b8a1",
    		"腹腺腦舅艇蒂葷落萱葵葦葫葉葬葛萼萵葡董葩葭葆虞虜號蛹蜓蜈蜇蜀蛾蛻蜂蜃蜆蜊衙裟裔裙補裘裝裡裊裕裒覜解詫該詳試詩詰誇詼詣誠話誅詭詢詮詬詹詻訾詨豢貊貉賊資賈賄貲賃賂賅跡跟跨路跳跺跪跤跦躲較載軾輊"
    	],
    	[
    		"b940",
    		"辟農運遊道遂達逼違遐遇遏過遍遑逾遁鄒鄗酬酪酩釉鈷鉗鈸鈽鉀鈾鉛鉋鉤鉑鈴鉉鉍鉅鈹鈿鉚閘隘隔隕雍雋雉雊雷電雹零靖靴靶預頑頓頊頒頌飼飴"
    	],
    	[
    		"b9a1",
    		"飽飾馳馱馴髡鳩麂鼎鼓鼠僧僮僥僖僭僚僕像僑僱僎僩兢凳劃劂匱厭嗾嘀嘛嘗嗽嘔嘆嘉嘍嘎嗷嘖嘟嘈嘐嗶團圖塵塾境墓墊塹墅塽壽夥夢夤奪奩嫡嫦嫩嫗嫖嫘嫣孵寞寧寡寥實寨寢寤察對屢嶄嶇幛幣幕幗幔廓廖弊彆彰徹慇"
    	],
    	[
    		"ba40",
    		"愿態慷慢慣慟慚慘慵截撇摘摔撤摸摟摺摑摧搴摭摻敲斡旗旖暢暨暝榜榨榕槁榮槓構榛榷榻榫榴槐槍榭槌榦槃榣歉歌氳漳演滾漓滴漩漾漠漬漏漂漢"
    	],
    	[
    		"baa1",
    		"滿滯漆漱漸漲漣漕漫漯澈漪滬漁滲滌滷熔熙煽熊熄熒爾犒犖獄獐瑤瑣瑪瑰瑭甄疑瘧瘍瘋瘉瘓盡監瞄睽睿睡磁碟碧碳碩碣禎福禍種稱窪窩竭端管箕箋筵算箝箔箏箸箇箄粹粽精綻綰綜綽綾綠緊綴網綱綺綢綿綵綸維緒緇綬"
    	],
    	[
    		"bb40",
    		"罰翠翡翟聞聚肇腐膀膏膈膊腿膂臧臺與舔舞艋蓉蒿蓆蓄蒙蒞蒲蒜蓋蒸蓀蓓蒐蒼蓑蓊蜿蜜蜻蜢蜥蜴蜘蝕蜷蜩裳褂裴裹裸製裨褚裯誦誌語誣認誡誓誤"
    	],
    	[
    		"bba1",
    		"說誥誨誘誑誚誧豪貍貌賓賑賒赫趙趕跼輔輒輕輓辣遠遘遜遣遙遞遢遝遛鄙鄘鄞酵酸酷酴鉸銀銅銘銖鉻銓銜銨鉼銑閡閨閩閣閥閤隙障際雌雒需靼鞅韶頗領颯颱餃餅餌餉駁骯骰髦魁魂鳴鳶鳳麼鼻齊億儀僻僵價儂儈儉儅凜"
    	],
    	[
    		"bc40",
    		"劇劈劉劍劊勰厲嘮嘻嘹嘲嘿嘴嘩噓噎噗噴嘶嘯嘰墀墟增墳墜墮墩墦奭嬉嫻嬋嫵嬌嬈寮寬審寫層履嶝嶔幢幟幡廢廚廟廝廣廠彈影德徵慶慧慮慝慕憂"
    	],
    	[
    		"bca1",
    		"慼慰慫慾憧憐憫憎憬憚憤憔憮戮摩摯摹撞撲撈撐撰撥撓撕撩撒撮播撫撚撬撙撢撳敵敷數暮暫暴暱樣樟槨樁樞標槽模樓樊槳樂樅槭樑歐歎殤毅毆漿潼澄潑潦潔澆潭潛潸潮澎潺潰潤澗潘滕潯潠潟熟熬熱熨牖犛獎獗瑩璋璃"
    	],
    	[
    		"bd40",
    		"瑾璀畿瘠瘩瘟瘤瘦瘡瘢皚皺盤瞎瞇瞌瞑瞋磋磅確磊碾磕碼磐稿稼穀稽稷稻窯窮箭箱範箴篆篇篁箠篌糊締練緯緻緘緬緝編緣線緞緩綞緙緲緹罵罷羯"
    	],
    	[
    		"bda1",
    		"翩耦膛膜膝膠膚膘蔗蔽蔚蓮蔬蔭蔓蔑蔣蔡蔔蓬蔥蓿蔆螂蝴蝶蝠蝦蝸蝨蝙蝗蝌蝓衛衝褐複褒褓褕褊誼諒談諄誕請諸課諉諂調誰論諍誶誹諛豌豎豬賠賞賦賤賬賭賢賣賜質賡赭趟趣踫踐踝踢踏踩踟踡踞躺輝輛輟輩輦輪輜輞"
    	],
    	[
    		"be40",
    		"輥適遮遨遭遷鄰鄭鄧鄱醇醉醋醃鋅銻銷鋪銬鋤鋁銳銼鋒鋇鋰銲閭閱霄霆震霉靠鞍鞋鞏頡頫頜颳養餓餒餘駝駐駟駛駑駕駒駙骷髮髯鬧魅魄魷魯鴆鴉"
    	],
    	[
    		"bea1",
    		"鴃麩麾黎墨齒儒儘儔儐儕冀冪凝劑劓勳噙噫噹噩噤噸噪器噥噱噯噬噢噶壁墾壇壅奮嬝嬴學寰導彊憲憑憩憊懍憶憾懊懈戰擅擁擋撻撼據擄擇擂操撿擒擔撾整曆曉暹曄曇暸樽樸樺橙橫橘樹橄橢橡橋橇樵機橈歙歷氅濂澱澡"
    	],
    	[
    		"bf40",
    		"濃澤濁澧澳激澹澶澦澠澴熾燉燐燒燈燕熹燎燙燜燃燄獨璜璣璘璟璞瓢甌甍瘴瘸瘺盧盥瞠瞞瞟瞥磨磚磬磧禦積穎穆穌穋窺篙簑築篤篛篡篩篦糕糖縊"
    	],
    	[
    		"bfa1",
    		"縑縈縛縣縞縝縉縐罹羲翰翱翮耨膳膩膨臻興艘艙蕊蕙蕈蕨蕩蕃蕉蕭蕪蕞螃螟螞螢融衡褪褲褥褫褡親覦諦諺諫諱謀諜諧諮諾謁謂諷諭諳諶諼豫豭貓賴蹄踱踴蹂踹踵輻輯輸輳辨辦遵遴選遲遼遺鄴醒錠錶鋸錳錯錢鋼錫錄錚"
    	],
    	[
    		"c040",
    		"錐錦錡錕錮錙閻隧隨險雕霎霑霖霍霓霏靛靜靦鞘頰頸頻頷頭頹頤餐館餞餛餡餚駭駢駱骸骼髻髭鬨鮑鴕鴣鴦鴨鴒鴛默黔龍龜優償儡儲勵嚎嚀嚐嚅嚇"
    	],
    	[
    		"c0a1",
    		"嚏壕壓壑壎嬰嬪嬤孺尷屨嶼嶺嶽嶸幫彌徽應懂懇懦懋戲戴擎擊擘擠擰擦擬擱擢擭斂斃曙曖檀檔檄檢檜櫛檣橾檗檐檠歜殮毚氈濘濱濟濠濛濤濫濯澀濬濡濩濕濮濰燧營燮燦燥燭燬燴燠爵牆獰獲璩環璦璨癆療癌盪瞳瞪瞰瞬"
    	],
    	[
    		"c140",
    		"瞧瞭矯磷磺磴磯礁禧禪穗窿簇簍篾篷簌篠糠糜糞糢糟糙糝縮績繆縷縲繃縫總縱繅繁縴縹繈縵縿縯罄翳翼聱聲聰聯聳臆臃膺臂臀膿膽臉膾臨舉艱薪"
    	],
    	[
    		"c1a1",
    		"薄蕾薜薑薔薯薛薇薨薊虧蟀蟑螳蟒蟆螫螻螺蟈蟋褻褶襄褸褽覬謎謗謙講謊謠謝謄謐豁谿豳賺賽購賸賻趨蹉蹋蹈蹊轄輾轂轅輿避遽還邁邂邀鄹醣醞醜鍍鎂錨鍵鍊鍥鍋錘鍾鍬鍛鍰鍚鍔闊闋闌闈闆隱隸雖霜霞鞠韓顆颶餵騁"
    	],
    	[
    		"c240",
    		"駿鮮鮫鮪鮭鴻鴿麋黏點黜黝黛鼾齋叢嚕嚮壙壘嬸彝懣戳擴擲擾攆擺擻擷斷曜朦檳檬櫃檻檸櫂檮檯歟歸殯瀉瀋濾瀆濺瀑瀏燻燼燾燸獷獵璧璿甕癖癘"
    	],
    	[
    		"c2a1",
    		"癒瞽瞿瞻瞼礎禮穡穢穠竄竅簫簧簪簞簣簡糧織繕繞繚繡繒繙罈翹翻職聶臍臏舊藏薩藍藐藉薰薺薹薦蟯蟬蟲蟠覆覲觴謨謹謬謫豐贅蹙蹣蹦蹤蹟蹕軀轉轍邇邃邈醫醬釐鎔鎊鎖鎢鎳鎮鎬鎰鎘鎚鎗闔闖闐闕離雜雙雛雞霤鞣鞦"
    	],
    	[
    		"c340",
    		"鞭韹額顏題顎顓颺餾餿餽餮馥騎髁鬃鬆魏魎魍鯊鯉鯽鯈鯀鵑鵝鵠黠鼕鼬儳嚥壞壟壢寵龐廬懲懷懶懵攀攏曠曝櫥櫝櫚櫓瀛瀟瀨瀚瀝瀕瀘爆爍牘犢獸"
    	],
    	[
    		"c3a1",
    		"獺璽瓊瓣疇疆癟癡矇礙禱穫穩簾簿簸簽簷籀繫繭繹繩繪羅繳羶羹羸臘藩藝藪藕藤藥藷蟻蠅蠍蟹蟾襠襟襖襞譁譜識證譚譎譏譆譙贈贊蹼蹲躇蹶蹬蹺蹴轔轎辭邊邋醱醮鏡鏑鏟鏃鏈鏜鏝鏖鏢鏍鏘鏤鏗鏨關隴難霪霧靡韜韻類"
    	],
    	[
    		"c440",
    		"願顛颼饅饉騖騙鬍鯨鯧鯖鯛鶉鵡鵲鵪鵬麒麗麓麴勸嚨嚷嚶嚴嚼壤孀孃孽寶巉懸懺攘攔攙曦朧櫬瀾瀰瀲爐獻瓏癢癥礦礪礬礫竇競籌籃籍糯糰辮繽繼"
    	],
    	[
    		"c4a1",
    		"纂罌耀臚艦藻藹蘑藺蘆蘋蘇蘊蠔蠕襤覺觸議譬警譯譟譫贏贍躉躁躅躂醴釋鐘鐃鏽闡霰飄饒饑馨騫騰騷騵鰓鰍鹹麵黨鼯齟齣齡儷儸囁囀囂夔屬巍懼懾攝攜斕曩櫻欄櫺殲灌爛犧瓖瓔癩矓籐纏續羼蘗蘭蘚蠣蠢蠡蠟襪襬覽譴"
    	],
    	[
    		"c540",
    		"護譽贓躊躍躋轟辯醺鐮鐳鐵鐺鐸鐲鐫闢霸霹露響顧顥饗驅驃驀騾髏魔魑鰭鰥鶯鶴鷂鶸麝黯鼙齜齦齧儼儻囈囊囉孿巔巒彎懿攤權歡灑灘玀瓤疊癮癬"
    	],
    	[
    		"c5a1",
    		"禳籠籟聾聽臟襲襯觼讀贖贗躑躓轡酈鑄鑑鑒霽霾韃韁顫饕驕驍髒鬚鱉鰱鰾鰻鷓鷗鼴齬齪龔囌巖戀攣攫攪曬欐瓚竊籤籣籥纓纖纔臢蘸蘿蠱變邐邏鑣鑠鑤靨顯饜驚驛驗髓體髑鱔鱗鱖鷥麟黴囑壩攬灞癱癲矗罐羈蠶蠹衢讓讒"
    	],
    	[
    		"c640",
    		"讖艷贛釀鑪靂靈靄韆顰驟鬢魘鱟鷹鷺鹼鹽鼇齷齲廳欖灣籬籮蠻觀躡釁鑲鑰顱饞髖鬣黌灤矚讚鑷韉驢驥纜讜躪釅鑽鑾鑼鱷鱸黷豔鑿鸚爨驪鬱鸛鸞籲"
    	],
    	[
    		"c940",
    		"乂乜凵匚厂万丌乇亍囗兀屮彳丏冇与丮亓仂仉仈冘勼卬厹圠夃夬尐巿旡殳毌气爿丱丼仨仜仩仡仝仚刌匜卌圢圣夗夯宁宄尒尻屴屳帄庀庂忉戉扐氕"
    	],
    	[
    		"c9a1",
    		"氶汃氿氻犮犰玊禸肊阞伎优伬仵伔仱伀价伈伝伂伅伢伓伄仴伒冱刓刉刐劦匢匟卍厊吇囡囟圮圪圴夼妀奼妅奻奾奷奿孖尕尥屼屺屻屾巟幵庄异弚彴忕忔忏扜扞扤扡扦扢扙扠扚扥旯旮朾朹朸朻机朿朼朳氘汆汒汜汏汊汔汋"
    	],
    	[
    		"ca40",
    		"汌灱牞犴犵玎甪癿穵网艸艼芀艽艿虍襾邙邗邘邛邔阢阤阠阣佖伻佢佉体佤伾佧佒佟佁佘伭伳伿佡冏冹刜刞刡劭劮匉卣卲厎厏吰吷吪呔呅吙吜吥吘"
    	],
    	[
    		"caa1",
    		"吽呏呁吨吤呇囮囧囥坁坅坌坉坋坒夆奀妦妘妠妗妎妢妐妏妧妡宎宒尨尪岍岏岈岋岉岒岊岆岓岕巠帊帎庋庉庌庈庍弅弝彸彶忒忑忐忭忨忮忳忡忤忣忺忯忷忻怀忴戺抃抌抎抏抔抇扱扻扺扰抁抈扷扽扲扴攷旰旴旳旲旵杅杇"
    	],
    	[
    		"cb40",
    		"杙杕杌杈杝杍杚杋毐氙氚汸汧汫沄沋沏汱汯汩沚汭沇沕沜汦汳汥汻沎灴灺牣犿犽狃狆狁犺狅玕玗玓玔玒町甹疔疕皁礽耴肕肙肐肒肜芐芏芅芎芑芓"
    	],
    	[
    		"cba1",
    		"芊芃芄豸迉辿邟邡邥邞邧邠阰阨阯阭丳侘佼侅佽侀侇佶佴侉侄佷佌侗佪侚佹侁佸侐侜侔侞侒侂侕佫佮冞冼冾刵刲刳剆刱劼匊匋匼厒厔咇呿咁咑咂咈呫呺呾呥呬呴呦咍呯呡呠咘呣呧呤囷囹坯坲坭坫坱坰坶垀坵坻坳坴坢"
    	],
    	[
    		"cc40",
    		"坨坽夌奅妵妺姏姎妲姌姁妶妼姃姖妱妽姀姈妴姇孢孥宓宕屄屇岮岤岠岵岯岨岬岟岣岭岢岪岧岝岥岶岰岦帗帔帙弨弢弣弤彔徂彾彽忞忥怭怦怙怲怋"
    	],
    	[
    		"cca1",
    		"怴怊怗怳怚怞怬怢怍怐怮怓怑怌怉怜戔戽抭抴拑抾抪抶拊抮抳抯抻抩抰抸攽斨斻昉旼昄昒昈旻昃昋昍昅旽昑昐曶朊枅杬枎枒杶杻枘枆构杴枍枌杺枟枑枙枃杽极杸杹枔欥殀歾毞氝沓泬泫泮泙沶泔沭泧沷泐泂沺泃泆泭泲"
    	],
    	[
    		"cd40",
    		"泒泝沴沊沝沀泞泀洰泍泇沰泹泏泩泑炔炘炅炓炆炄炑炖炂炚炃牪狖狋狘狉狜狒狔狚狌狑玤玡玭玦玢玠玬玝瓝瓨甿畀甾疌疘皯盳盱盰盵矸矼矹矻矺"
    	],
    	[
    		"cda1",
    		"矷祂礿秅穸穻竻籵糽耵肏肮肣肸肵肭舠芠苀芫芚芘芛芵芧芮芼芞芺芴芨芡芩苂芤苃芶芢虰虯虭虮豖迒迋迓迍迖迕迗邲邴邯邳邰阹阽阼阺陃俍俅俓侲俉俋俁俔俜俙侻侳俛俇俖侺俀侹俬剄剉勀勂匽卼厗厖厙厘咺咡咭咥哏"
    	],
    	[
    		"ce40",
    		"哃茍咷咮哖咶哅哆咠呰咼咢咾呲哞咰垵垞垟垤垌垗垝垛垔垘垏垙垥垚垕壴复奓姡姞姮娀姱姝姺姽姼姶姤姲姷姛姩姳姵姠姾姴姭宨屌峐峘峌峗峋峛"
    	],
    	[
    		"cea1",
    		"峞峚峉峇峊峖峓峔峏峈峆峎峟峸巹帡帢帣帠帤庰庤庢庛庣庥弇弮彖徆怷怹恔恲恞恅恓恇恉恛恌恀恂恟怤恄恘恦恮扂扃拏挍挋拵挎挃拫拹挏挌拸拶挀挓挔拺挕拻拰敁敃斪斿昶昡昲昵昜昦昢昳昫昺昝昴昹昮朏朐柁柲柈枺"
    	],
    	[
    		"cf40",
    		"柜枻柸柘柀枷柅柫柤柟枵柍枳柷柶柮柣柂枹柎柧柰枲柼柆柭柌枮柦柛柺柉柊柃柪柋欨殂殄殶毖毘毠氠氡洨洴洭洟洼洿洒洊泚洳洄洙洺洚洑洀洝浂"
    	],
    	[
    		"cfa1",
    		"洁洘洷洃洏浀洇洠洬洈洢洉洐炷炟炾炱炰炡炴炵炩牁牉牊牬牰牳牮狊狤狨狫狟狪狦狣玅珌珂珈珅玹玶玵玴珫玿珇玾珃珆玸珋瓬瓮甮畇畈疧疪癹盄眈眃眄眅眊盷盻盺矧矨砆砑砒砅砐砏砎砉砃砓祊祌祋祅祄秕种秏秖秎窀"
    	],
    	[
    		"d040",
    		"穾竑笀笁籺籸籹籿粀粁紃紈紁罘羑羍羾耇耎耏耔耷胘胇胠胑胈胂胐胅胣胙胜胊胕胉胏胗胦胍臿舡芔苙苾苹茇苨茀苕茺苫苖苴苬苡苲苵茌苻苶苰苪"
    	],
    	[
    		"d0a1",
    		"苤苠苺苳苭虷虴虼虳衁衎衧衪衩觓訄訇赲迣迡迮迠郱邽邿郕郅邾郇郋郈釔釓陔陏陑陓陊陎倞倅倇倓倢倰倛俵俴倳倷倬俶俷倗倜倠倧倵倯倱倎党冔冓凊凄凅凈凎剡剚剒剞剟剕剢勍匎厞唦哢唗唒哧哳哤唚哿唄唈哫唑唅哱"
    	],
    	[
    		"d140",
    		"唊哻哷哸哠唎唃唋圁圂埌堲埕埒垺埆垽垼垸垶垿埇埐垹埁夎奊娙娖娭娮娕娏娗娊娞娳孬宧宭宬尃屖屔峬峿峮峱峷崀峹帩帨庨庮庪庬弳弰彧恝恚恧"
    	],
    	[
    		"d1a1",
    		"恁悢悈悀悒悁悝悃悕悛悗悇悜悎戙扆拲挐捖挬捄捅挶捃揤挹捋捊挼挩捁挴捘捔捙挭捇挳捚捑挸捗捀捈敊敆旆旃旄旂晊晟晇晑朒朓栟栚桉栲栳栻桋桏栖栱栜栵栫栭栯桎桄栴栝栒栔栦栨栮桍栺栥栠欬欯欭欱欴歭肂殈毦毤"
    	],
    	[
    		"d240",
    		"毨毣毢毧氥浺浣浤浶洍浡涒浘浢浭浯涑涍淯浿涆浞浧浠涗浰浼浟涂涘洯浨涋浾涀涄洖涃浻浽浵涐烜烓烑烝烋缹烢烗烒烞烠烔烍烅烆烇烚烎烡牂牸"
    	],
    	[
    		"d2a1",
    		"牷牶猀狺狴狾狶狳狻猁珓珙珥珖玼珧珣珩珜珒珛珔珝珚珗珘珨瓞瓟瓴瓵甡畛畟疰痁疻痄痀疿疶疺皊盉眝眛眐眓眒眣眑眕眙眚眢眧砣砬砢砵砯砨砮砫砡砩砳砪砱祔祛祏祜祓祒祑秫秬秠秮秭秪秜秞秝窆窉窅窋窌窊窇竘笐"
    	],
    	[
    		"d340",
    		"笄笓笅笏笈笊笎笉笒粄粑粊粌粈粍粅紞紝紑紎紘紖紓紟紒紏紌罜罡罞罠罝罛羖羒翃翂翀耖耾耹胺胲胹胵脁胻脀舁舯舥茳茭荄茙荑茥荖茿荁茦茜茢"
    	],
    	[
    		"d3a1",
    		"荂荎茛茪茈茼荍茖茤茠茷茯茩荇荅荌荓茞茬荋茧荈虓虒蚢蚨蚖蚍蚑蚞蚇蚗蚆蚋蚚蚅蚥蚙蚡蚧蚕蚘蚎蚝蚐蚔衃衄衭衵衶衲袀衱衿衯袃衾衴衼訒豇豗豻貤貣赶赸趵趷趶軑軓迾迵适迿迻逄迼迶郖郠郙郚郣郟郥郘郛郗郜郤酐"
    	],
    	[
    		"d440",
    		"酎酏釕釢釚陜陟隼飣髟鬯乿偰偪偡偞偠偓偋偝偲偈偍偁偛偊偢倕偅偟偩偫偣偤偆偀偮偳偗偑凐剫剭剬剮勖勓匭厜啵啶唼啍啐唴唪啑啢唶唵唰啒啅"
    	],
    	[
    		"d4a1",
    		"唌唲啥啎唹啈唭唻啀啋圊圇埻堔埢埶埜埴堀埭埽堈埸堋埳埏堇埮埣埲埥埬埡堎埼堐埧堁堌埱埩埰堍堄奜婠婘婕婧婞娸娵婭婐婟婥婬婓婤婗婃婝婒婄婛婈媎娾婍娹婌婰婩婇婑婖婂婜孲孮寁寀屙崞崋崝崚崠崌崨崍崦崥崏"
    	],
    	[
    		"d540",
    		"崰崒崣崟崮帾帴庱庴庹庲庳弶弸徛徖徟悊悐悆悾悰悺惓惔惏惤惙惝惈悱惛悷惊悿惃惍惀挲捥掊掂捽掽掞掭掝掗掫掎捯掇掐据掯捵掜捭掮捼掤挻掟"
    	],
    	[
    		"d5a1",
    		"捸掅掁掑掍捰敓旍晥晡晛晙晜晢朘桹梇梐梜桭桮梮梫楖桯梣梬梩桵桴梲梏桷梒桼桫桲梪梀桱桾梛梖梋梠梉梤桸桻梑梌梊桽欶欳欷欸殑殏殍殎殌氪淀涫涴涳湴涬淩淢涷淶淔渀淈淠淟淖涾淥淜淝淛淴淊涽淭淰涺淕淂淏淉"
    	],
    	[
    		"d640",
    		"淐淲淓淽淗淍淣涻烺焍烷焗烴焌烰焄烳焐烼烿焆焓焀烸烶焋焂焎牾牻牼牿猝猗猇猑猘猊猈狿猏猞玈珶珸珵琄琁珽琇琀珺珼珿琌琋珴琈畤畣痎痒痏"
    	],
    	[
    		"d6a1",
    		"痋痌痑痐皏皉盓眹眯眭眱眲眴眳眽眥眻眵硈硒硉硍硊硌砦硅硐祤祧祩祪祣祫祡离秺秸秶秷窏窔窐笵筇笴笥笰笢笤笳笘笪笝笱笫笭笯笲笸笚笣粔粘粖粣紵紽紸紶紺絅紬紩絁絇紾紿絊紻紨罣羕羜羝羛翊翋翍翐翑翇翏翉耟"
    	],
    	[
    		"d740",
    		"耞耛聇聃聈脘脥脙脛脭脟脬脞脡脕脧脝脢舑舸舳舺舴舲艴莐莣莨莍荺荳莤荴莏莁莕莙荵莔莩荽莃莌莝莛莪莋荾莥莯莈莗莰荿莦莇莮荶莚虙虖蚿蚷"
    	],
    	[
    		"d7a1",
    		"蛂蛁蛅蚺蚰蛈蚹蚳蚸蛌蚴蚻蚼蛃蚽蚾衒袉袕袨袢袪袚袑袡袟袘袧袙袛袗袤袬袌袓袎覂觖觙觕訰訧訬訞谹谻豜豝豽貥赽赻赹趼跂趹趿跁軘軞軝軜軗軠軡逤逋逑逜逌逡郯郪郰郴郲郳郔郫郬郩酖酘酚酓酕釬釴釱釳釸釤釹釪"
    	],
    	[
    		"d840",
    		"釫釷釨釮镺閆閈陼陭陫陱陯隿靪頄飥馗傛傕傔傞傋傣傃傌傎傝偨傜傒傂傇兟凔匒匑厤厧喑喨喥喭啷噅喢喓喈喏喵喁喣喒喤啽喌喦啿喕喡喎圌堩堷"
    	],
    	[
    		"d8a1",
    		"堙堞堧堣堨埵塈堥堜堛堳堿堶堮堹堸堭堬堻奡媯媔媟婺媢媞婸媦婼媥媬媕媮娷媄媊媗媃媋媩婻婽媌媜媏媓媝寪寍寋寔寑寊寎尌尰崷嵃嵫嵁嵋崿崵嵑嵎嵕崳崺嵒崽崱嵙嵂崹嵉崸崼崲崶嵀嵅幄幁彘徦徥徫惉悹惌惢惎惄愔"
    	],
    	[
    		"d940",
    		"惲愊愖愅惵愓惸惼惾惁愃愘愝愐惿愄愋扊掔掱掰揎揥揨揯揃撝揳揊揠揶揕揲揵摡揟掾揝揜揄揘揓揂揇揌揋揈揰揗揙攲敧敪敤敜敨敥斌斝斞斮旐旒"
    	],
    	[
    		"d9a1",
    		"晼晬晻暀晱晹晪晲朁椌棓椄棜椪棬棪棱椏棖棷棫棤棶椓椐棳棡椇棌椈楰梴椑棯棆椔棸棐棽棼棨椋椊椗棎棈棝棞棦棴棑椆棔棩椕椥棇欹欻欿欼殔殗殙殕殽毰毲毳氰淼湆湇渟湉溈渼渽湅湢渫渿湁湝湳渜渳湋湀湑渻渃渮湞"
    	],
    	[
    		"da40",
    		"湨湜湡渱渨湠湱湫渹渢渰湓湥渧湸湤湷湕湹湒湦渵渶湚焠焞焯烻焮焱焣焥焢焲焟焨焺焛牋牚犈犉犆犅犋猒猋猰猢猱猳猧猲猭猦猣猵猌琮琬琰琫琖"
    	],
    	[
    		"daa1",
    		"琚琡琭琱琤琣琝琩琠琲瓻甯畯畬痧痚痡痦痝痟痤痗皕皒盚睆睇睄睍睅睊睎睋睌矞矬硠硤硥硜硭硱硪确硰硩硨硞硢祴祳祲祰稂稊稃稌稄窙竦竤筊笻筄筈筌筎筀筘筅粢粞粨粡絘絯絣絓絖絧絪絏絭絜絫絒絔絩絑絟絎缾缿罥"
    	],
    	[
    		"db40",
    		"罦羢羠羡翗聑聏聐胾胔腃腊腒腏腇脽腍脺臦臮臷臸臹舄舼舽舿艵茻菏菹萣菀菨萒菧菤菼菶萐菆菈菫菣莿萁菝菥菘菿菡菋菎菖菵菉萉萏菞萑萆菂菳"
    	],
    	[
    		"dba1",
    		"菕菺菇菑菪萓菃菬菮菄菻菗菢萛菛菾蛘蛢蛦蛓蛣蛚蛪蛝蛫蛜蛬蛩蛗蛨蛑衈衖衕袺裗袹袸裀袾袶袼袷袽袲褁裉覕覘覗觝觚觛詎詍訹詙詀詗詘詄詅詒詈詑詊詌詏豟貁貀貺貾貰貹貵趄趀趉跘跓跍跇跖跜跏跕跙跈跗跅軯軷軺"
    	],
    	[
    		"dc40",
    		"軹軦軮軥軵軧軨軶軫軱軬軴軩逭逴逯鄆鄬鄄郿郼鄈郹郻鄁鄀鄇鄅鄃酡酤酟酢酠鈁鈊鈥鈃鈚鈦鈏鈌鈀鈒釿釽鈆鈄鈧鈂鈜鈤鈙鈗鈅鈖镻閍閌閐隇陾隈"
    	],
    	[
    		"dca1",
    		"隉隃隀雂雈雃雱雰靬靰靮頇颩飫鳦黹亃亄亶傽傿僆傮僄僊傴僈僂傰僁傺傱僋僉傶傸凗剺剸剻剼嗃嗛嗌嗐嗋嗊嗝嗀嗔嗄嗩喿嗒喍嗏嗕嗢嗖嗈嗲嗍嗙嗂圔塓塨塤塏塍塉塯塕塎塝塙塥塛堽塣塱壼嫇嫄嫋媺媸媱媵媰媿嫈媻嫆"
    	],
    	[
    		"dd40",
    		"媷嫀嫊媴媶嫍媹媐寖寘寙尟尳嵱嵣嵊嵥嵲嵬嵞嵨嵧嵢巰幏幎幊幍幋廅廌廆廋廇彀徯徭惷慉慊愫慅愶愲愮慆愯慏愩慀戠酨戣戥戤揅揱揫搐搒搉搠搤"
    	],
    	[
    		"dda1",
    		"搳摃搟搕搘搹搷搢搣搌搦搰搨摁搵搯搊搚摀搥搧搋揧搛搮搡搎敯斒旓暆暌暕暐暋暊暙暔晸朠楦楟椸楎楢楱椿楅楪椹楂楗楙楺楈楉椵楬椳椽楥棰楸椴楩楀楯楄楶楘楁楴楌椻楋椷楜楏楑椲楒椯楻椼歆歅歃歂歈歁殛嗀毻毼"
    	],
    	[
    		"de40",
    		"毹毷毸溛滖滈溏滀溟溓溔溠溱溹滆滒溽滁溞滉溷溰滍溦滏溲溾滃滜滘溙溒溎溍溤溡溿溳滐滊溗溮溣煇煔煒煣煠煁煝煢煲煸煪煡煂煘煃煋煰煟煐煓"
    	],
    	[
    		"dea1",
    		"煄煍煚牏犍犌犑犐犎猼獂猻猺獀獊獉瑄瑊瑋瑒瑑瑗瑀瑏瑐瑎瑂瑆瑍瑔瓡瓿瓾瓽甝畹畷榃痯瘏瘃痷痾痼痹痸瘐痻痶痭痵痽皙皵盝睕睟睠睒睖睚睩睧睔睙睭矠碇碚碔碏碄碕碅碆碡碃硹碙碀碖硻祼禂祽祹稑稘稙稒稗稕稢稓"
    	],
    	[
    		"df40",
    		"稛稐窣窢窞竫筦筤筭筴筩筲筥筳筱筰筡筸筶筣粲粴粯綈綆綀綍絿綅絺綎絻綃絼綌綔綄絽綒罭罫罧罨罬羦羥羧翛翜耡腤腠腷腜腩腛腢腲朡腞腶腧腯"
    	],
    	[
    		"dfa1",
    		"腄腡舝艉艄艀艂艅蓱萿葖葶葹蒏蒍葥葑葀蒆葧萰葍葽葚葙葴葳葝蔇葞萷萺萴葺葃葸萲葅萩菙葋萯葂萭葟葰萹葎葌葒葯蓅蒎萻葇萶萳葨葾葄萫葠葔葮葐蜋蜄蛷蜌蛺蛖蛵蝍蛸蜎蜉蜁蛶蜍蜅裖裋裍裎裞裛裚裌裐覅覛觟觥觤"
    	],
    	[
    		"e040",
    		"觡觠觢觜触詶誆詿詡訿詷誂誄詵誃誁詴詺谼豋豊豥豤豦貆貄貅賌赨赩趑趌趎趏趍趓趔趐趒跰跠跬跱跮跐跩跣跢跧跲跫跴輆軿輁輀輅輇輈輂輋遒逿"
    	],
    	[
    		"e0a1",
    		"遄遉逽鄐鄍鄏鄑鄖鄔鄋鄎酮酯鉈鉒鈰鈺鉦鈳鉥鉞銃鈮鉊鉆鉭鉬鉏鉠鉧鉯鈶鉡鉰鈱鉔鉣鉐鉲鉎鉓鉌鉖鈲閟閜閞閛隒隓隑隗雎雺雽雸雵靳靷靸靲頏頍頎颬飶飹馯馲馰馵骭骫魛鳪鳭鳧麀黽僦僔僗僨僳僛僪僝僤僓僬僰僯僣僠"
    	],
    	[
    		"e140",
    		"凘劀劁勩勫匰厬嘧嘕嘌嘒嗼嘏嘜嘁嘓嘂嗺嘝嘄嗿嗹墉塼墐墘墆墁塿塴墋塺墇墑墎塶墂墈塻墔墏壾奫嫜嫮嫥嫕嫪嫚嫭嫫嫳嫢嫠嫛嫬嫞嫝嫙嫨嫟孷寠"
    	],
    	[
    		"e1a1",
    		"寣屣嶂嶀嵽嶆嵺嶁嵷嶊嶉嶈嵾嵼嶍嵹嵿幘幙幓廘廑廗廎廜廕廙廒廔彄彃彯徶愬愨慁慞慱慳慒慓慲慬憀慴慔慺慛慥愻慪慡慖戩戧戫搫摍摛摝摴摶摲摳摽摵摦撦摎撂摞摜摋摓摠摐摿搿摬摫摙摥摷敳斠暡暠暟朅朄朢榱榶槉"
    	],
    	[
    		"e240",
    		"榠槎榖榰榬榼榑榙榎榧榍榩榾榯榿槄榽榤槔榹槊榚槏榳榓榪榡榞槙榗榐槂榵榥槆歊歍歋殞殟殠毃毄毾滎滵滱漃漥滸漷滻漮漉潎漙漚漧漘漻漒滭漊"
    	],
    	[
    		"e2a1",
    		"漶潳滹滮漭潀漰漼漵滫漇漎潃漅滽滶漹漜滼漺漟漍漞漈漡熇熐熉熀熅熂熏煻熆熁熗牄牓犗犕犓獃獍獑獌瑢瑳瑱瑵瑲瑧瑮甀甂甃畽疐瘖瘈瘌瘕瘑瘊瘔皸瞁睼瞅瞂睮瞀睯睾瞃碲碪碴碭碨硾碫碞碥碠碬碢碤禘禊禋禖禕禔禓"
    	],
    	[
    		"e340",
    		"禗禈禒禐稫穊稰稯稨稦窨窫窬竮箈箜箊箑箐箖箍箌箛箎箅箘劄箙箤箂粻粿粼粺綧綷緂綣綪緁緀緅綝緎緄緆緋緌綯綹綖綼綟綦綮綩綡緉罳翢翣翥翞"
    	],
    	[
    		"e3a1",
    		"耤聝聜膉膆膃膇膍膌膋舕蒗蒤蒡蒟蒺蓎蓂蒬蒮蒫蒹蒴蓁蓍蒪蒚蒱蓐蒝蒧蒻蒢蒔蓇蓌蒛蒩蒯蒨蓖蒘蒶蓏蒠蓗蓔蓒蓛蒰蒑虡蜳蜣蜨蝫蝀蜮蜞蜡蜙蜛蝃蜬蝁蜾蝆蜠蜲蜪蜭蜼蜒蜺蜱蜵蝂蜦蜧蜸蜤蜚蜰蜑裷裧裱裲裺裾裮裼裶裻"
    	],
    	[
    		"e440",
    		"裰裬裫覝覡覟覞觩觫觨誫誙誋誒誏誖谽豨豩賕賏賗趖踉踂跿踍跽踊踃踇踆踅跾踀踄輐輑輎輍鄣鄜鄠鄢鄟鄝鄚鄤鄡鄛酺酲酹酳銥銤鉶銛鉺銠銔銪銍"
    	],
    	[
    		"e4a1",
    		"銦銚銫鉹銗鉿銣鋮銎銂銕銢鉽銈銡銊銆銌銙銧鉾銇銩銝銋鈭隞隡雿靘靽靺靾鞃鞀鞂靻鞄鞁靿韎韍頖颭颮餂餀餇馝馜駃馹馻馺駂馽駇骱髣髧鬾鬿魠魡魟鳱鳲鳵麧僿儃儰僸儆儇僶僾儋儌僽儊劋劌勱勯噈噂噌嘵噁噊噉噆噘"
    	],
    	[
    		"e540",
    		"噚噀嘳嘽嘬嘾嘸嘪嘺圚墫墝墱墠墣墯墬墥墡壿嫿嫴嫽嫷嫶嬃嫸嬂嫹嬁嬇嬅嬏屧嶙嶗嶟嶒嶢嶓嶕嶠嶜嶡嶚嶞幩幝幠幜緳廛廞廡彉徲憋憃慹憱憰憢憉"
    	],
    	[
    		"e5a1",
    		"憛憓憯憭憟憒憪憡憍慦憳戭摮摰撖撠撅撗撜撏撋撊撌撣撟摨撱撘敶敺敹敻斲斳暵暰暩暲暷暪暯樀樆樗槥槸樕槱槤樠槿槬槢樛樝槾樧槲槮樔槷槧橀樈槦槻樍槼槫樉樄樘樥樏槶樦樇槴樖歑殥殣殢殦氁氀毿氂潁漦潾澇濆澒"
    	],
    	[
    		"e640",
    		"澍澉澌潢潏澅潚澖潶潬澂潕潲潒潐潗澔澓潝漀潡潫潽潧澐潓澋潩潿澕潣潷潪潻熲熯熛熰熠熚熩熵熝熥熞熤熡熪熜熧熳犘犚獘獒獞獟獠獝獛獡獚獙"
    	],
    	[
    		"e6a1",
    		"獢璇璉璊璆璁瑽璅璈瑼瑹甈甇畾瘥瘞瘙瘝瘜瘣瘚瘨瘛皜皝皞皛瞍瞏瞉瞈磍碻磏磌磑磎磔磈磃磄磉禚禡禠禜禢禛歶稹窲窴窳箷篋箾箬篎箯箹篊箵糅糈糌糋緷緛緪緧緗緡縃緺緦緶緱緰緮緟罶羬羰羭翭翫翪翬翦翨聤聧膣膟"
    	],
    	[
    		"e740",
    		"膞膕膢膙膗舖艏艓艒艐艎艑蔤蔻蔏蔀蔩蔎蔉蔍蔟蔊蔧蔜蓻蔫蓺蔈蔌蓴蔪蓲蔕蓷蓫蓳蓼蔒蓪蓩蔖蓾蔨蔝蔮蔂蓽蔞蓶蔱蔦蓧蓨蓰蓯蓹蔘蔠蔰蔋蔙蔯虢"
    	],
    	[
    		"e7a1",
    		"蝖蝣蝤蝷蟡蝳蝘蝔蝛蝒蝡蝚蝑蝞蝭蝪蝐蝎蝟蝝蝯蝬蝺蝮蝜蝥蝏蝻蝵蝢蝧蝩衚褅褌褔褋褗褘褙褆褖褑褎褉覢覤覣觭觰觬諏諆誸諓諑諔諕誻諗誾諀諅諘諃誺誽諙谾豍貏賥賟賙賨賚賝賧趠趜趡趛踠踣踥踤踮踕踛踖踑踙踦踧"
    	],
    	[
    		"e840",
    		"踔踒踘踓踜踗踚輬輤輘輚輠輣輖輗遳遰遯遧遫鄯鄫鄩鄪鄲鄦鄮醅醆醊醁醂醄醀鋐鋃鋄鋀鋙銶鋏鋱鋟鋘鋩鋗鋝鋌鋯鋂鋨鋊鋈鋎鋦鋍鋕鋉鋠鋞鋧鋑鋓"
    	],
    	[
    		"e8a1",
    		"銵鋡鋆銴镼閬閫閮閰隤隢雓霅霈霂靚鞊鞎鞈韐韏頞頝頦頩頨頠頛頧颲餈飺餑餔餖餗餕駜駍駏駓駔駎駉駖駘駋駗駌骳髬髫髳髲髱魆魃魧魴魱魦魶魵魰魨魤魬鳼鳺鳽鳿鳷鴇鴀鳹鳻鴈鴅鴄麃黓鼏鼐儜儓儗儚儑凞匴叡噰噠噮"
    	],
    	[
    		"e940",
    		"噳噦噣噭噲噞噷圜圛壈墽壉墿墺壂墼壆嬗嬙嬛嬡嬔嬓嬐嬖嬨嬚嬠嬞寯嶬嶱嶩嶧嶵嶰嶮嶪嶨嶲嶭嶯嶴幧幨幦幯廩廧廦廨廥彋徼憝憨憖懅憴懆懁懌憺"
    	],
    	[
    		"e9a1",
    		"憿憸憌擗擖擐擏擉撽撉擃擛擳擙攳敿敼斢曈暾曀曊曋曏暽暻暺曌朣樴橦橉橧樲橨樾橝橭橶橛橑樨橚樻樿橁橪橤橐橏橔橯橩橠樼橞橖橕橍橎橆歕歔歖殧殪殫毈毇氄氃氆澭濋澣濇澼濎濈潞濄澽澞濊澨瀄澥澮澺澬澪濏澿澸"
    	],
    	[
    		"ea40",
    		"澢濉澫濍澯澲澰燅燂熿熸燖燀燁燋燔燊燇燏熽燘熼燆燚燛犝犞獩獦獧獬獥獫獪瑿璚璠璔璒璕璡甋疀瘯瘭瘱瘽瘳瘼瘵瘲瘰皻盦瞚瞝瞡瞜瞛瞢瞣瞕瞙"
    	],
    	[
    		"eaa1",
    		"瞗磝磩磥磪磞磣磛磡磢磭磟磠禤穄穈穇窶窸窵窱窷篞篣篧篝篕篥篚篨篹篔篪篢篜篫篘篟糒糔糗糐糑縒縡縗縌縟縠縓縎縜縕縚縢縋縏縖縍縔縥縤罃罻罼罺羱翯耪耩聬膱膦膮膹膵膫膰膬膴膲膷膧臲艕艖艗蕖蕅蕫蕍蕓蕡蕘"
    	],
    	[
    		"eb40",
    		"蕀蕆蕤蕁蕢蕄蕑蕇蕣蔾蕛蕱蕎蕮蕵蕕蕧蕠薌蕦蕝蕔蕥蕬虣虥虤螛螏螗螓螒螈螁螖螘蝹螇螣螅螐螑螝螄螔螜螚螉褞褦褰褭褮褧褱褢褩褣褯褬褟觱諠"
    	],
    	[
    		"eba1",
    		"諢諲諴諵諝謔諤諟諰諈諞諡諨諿諯諻貑貒貐賵賮賱賰賳赬赮趥趧踳踾踸蹀蹅踶踼踽蹁踰踿躽輶輮輵輲輹輷輴遶遹遻邆郺鄳鄵鄶醓醐醑醍醏錧錞錈錟錆錏鍺錸錼錛錣錒錁鍆錭錎錍鋋錝鋺錥錓鋹鋷錴錂錤鋿錩錹錵錪錔錌"
    	],
    	[
    		"ec40",
    		"錋鋾錉錀鋻錖閼闍閾閹閺閶閿閵閽隩雔霋霒霐鞙鞗鞔韰韸頵頯頲餤餟餧餩馞駮駬駥駤駰駣駪駩駧骹骿骴骻髶髺髹髷鬳鮀鮅鮇魼魾魻鮂鮓鮒鮐魺鮕"
    	],
    	[
    		"eca1",
    		"魽鮈鴥鴗鴠鴞鴔鴩鴝鴘鴢鴐鴙鴟麈麆麇麮麭黕黖黺鼒鼽儦儥儢儤儠儩勴嚓嚌嚍嚆嚄嚃噾嚂噿嚁壖壔壏壒嬭嬥嬲嬣嬬嬧嬦嬯嬮孻寱寲嶷幬幪徾徻懃憵憼懧懠懥懤懨懞擯擩擣擫擤擨斁斀斶旚曒檍檖檁檥檉檟檛檡檞檇檓檎"
    	],
    	[
    		"ed40",
    		"檕檃檨檤檑橿檦檚檅檌檒歛殭氉濌澩濴濔濣濜濭濧濦濞濲濝濢濨燡燱燨燲燤燰燢獳獮獯璗璲璫璐璪璭璱璥璯甐甑甒甏疄癃癈癉癇皤盩瞵瞫瞲瞷瞶"
    	],
    	[
    		"eda1",
    		"瞴瞱瞨矰磳磽礂磻磼磲礅磹磾礄禫禨穜穛穖穘穔穚窾竀竁簅簏篲簀篿篻簎篴簋篳簂簉簃簁篸篽簆篰篱簐簊糨縭縼繂縳顈縸縪繉繀繇縩繌縰縻縶繄縺罅罿罾罽翴翲耬膻臄臌臊臅臇膼臩艛艚艜薃薀薏薧薕薠薋薣蕻薤薚薞"
    	],
    	[
    		"ee40",
    		"蕷蕼薉薡蕺蕸蕗薎薖薆薍薙薝薁薢薂薈薅蕹蕶薘薐薟虨螾螪螭蟅螰螬螹螵螼螮蟉蟃蟂蟌螷螯蟄蟊螴螶螿螸螽蟞螲褵褳褼褾襁襒褷襂覭覯覮觲觳謞"
    	],
    	[
    		"eea1",
    		"謘謖謑謅謋謢謏謒謕謇謍謈謆謜謓謚豏豰豲豱豯貕貔賹赯蹎蹍蹓蹐蹌蹇轃轀邅遾鄸醚醢醛醙醟醡醝醠鎡鎃鎯鍤鍖鍇鍼鍘鍜鍶鍉鍐鍑鍠鍭鎏鍌鍪鍹鍗鍕鍒鍏鍱鍷鍻鍡鍞鍣鍧鎀鍎鍙闇闀闉闃闅閷隮隰隬霠霟霘霝霙鞚鞡鞜"
    	],
    	[
    		"ef40",
    		"鞞鞝韕韔韱顁顄顊顉顅顃餥餫餬餪餳餲餯餭餱餰馘馣馡騂駺駴駷駹駸駶駻駽駾駼騃骾髾髽鬁髼魈鮚鮨鮞鮛鮦鮡鮥鮤鮆鮢鮠鮯鴳鵁鵧鴶鴮鴯鴱鴸鴰"
    	],
    	[
    		"efa1",
    		"鵅鵂鵃鴾鴷鵀鴽翵鴭麊麉麍麰黈黚黻黿鼤鼣鼢齔龠儱儭儮嚘嚜嚗嚚嚝嚙奰嬼屩屪巀幭幮懘懟懭懮懱懪懰懫懖懩擿攄擽擸攁攃擼斔旛曚曛曘櫅檹檽櫡櫆檺檶檷櫇檴檭歞毉氋瀇瀌瀍瀁瀅瀔瀎濿瀀濻瀦濼濷瀊爁燿燹爃燽獶"
    	],
    	[
    		"f040",
    		"璸瓀璵瓁璾璶璻瓂甔甓癜癤癙癐癓癗癚皦皽盬矂瞺磿礌礓礔礉礐礒礑禭禬穟簜簩簙簠簟簭簝簦簨簢簥簰繜繐繖繣繘繢繟繑繠繗繓羵羳翷翸聵臑臒"
    	],
    	[
    		"f0a1",
    		"臐艟艞薴藆藀藃藂薳薵薽藇藄薿藋藎藈藅薱薶藒蘤薸薷薾虩蟧蟦蟢蟛蟫蟪蟥蟟蟳蟤蟔蟜蟓蟭蟘蟣螤蟗蟙蠁蟴蟨蟝襓襋襏襌襆襐襑襉謪謧謣謳謰謵譇謯謼謾謱謥謷謦謶謮謤謻謽謺豂豵貙貘貗賾贄贂贀蹜蹢蹠蹗蹖蹞蹥蹧"
    	],
    	[
    		"f140",
    		"蹛蹚蹡蹝蹩蹔轆轇轈轋鄨鄺鄻鄾醨醥醧醯醪鎵鎌鎒鎷鎛鎝鎉鎧鎎鎪鎞鎦鎕鎈鎙鎟鎍鎱鎑鎲鎤鎨鎴鎣鎥闒闓闑隳雗雚巂雟雘雝霣霢霥鞬鞮鞨鞫鞤鞪"
    	],
    	[
    		"f1a1",
    		"鞢鞥韗韙韖韘韺顐顑顒颸饁餼餺騏騋騉騍騄騑騊騅騇騆髀髜鬈鬄鬅鬩鬵魊魌魋鯇鯆鯃鮿鯁鮵鮸鯓鮶鯄鮹鮽鵜鵓鵏鵊鵛鵋鵙鵖鵌鵗鵒鵔鵟鵘鵚麎麌黟鼁鼀鼖鼥鼫鼪鼩鼨齌齕儴儵劖勷厴嚫嚭嚦嚧嚪嚬壚壝壛夒嬽嬾嬿巃幰"
    	],
    	[
    		"f240",
    		"徿懻攇攐攍攉攌攎斄旞旝曞櫧櫠櫌櫑櫙櫋櫟櫜櫐櫫櫏櫍櫞歠殰氌瀙瀧瀠瀖瀫瀡瀢瀣瀩瀗瀤瀜瀪爌爊爇爂爅犥犦犤犣犡瓋瓅璷瓃甖癠矉矊矄矱礝礛"
    	],
    	[
    		"f2a1",
    		"礡礜礗礞禰穧穨簳簼簹簬簻糬糪繶繵繸繰繷繯繺繲繴繨罋罊羃羆羷翽翾聸臗臕艤艡艣藫藱藭藙藡藨藚藗藬藲藸藘藟藣藜藑藰藦藯藞藢蠀蟺蠃蟶蟷蠉蠌蠋蠆蟼蠈蟿蠊蠂襢襚襛襗襡襜襘襝襙覈覷覶觶譐譈譊譀譓譖譔譋譕"
    	],
    	[
    		"f340",
    		"譑譂譒譗豃豷豶貚贆贇贉趬趪趭趫蹭蹸蹳蹪蹯蹻軂轒轑轏轐轓辴酀鄿醰醭鏞鏇鏏鏂鏚鏐鏹鏬鏌鏙鎩鏦鏊鏔鏮鏣鏕鏄鏎鏀鏒鏧镽闚闛雡霩霫霬霨霦"
    	],
    	[
    		"f3a1",
    		"鞳鞷鞶韝韞韟顜顙顝顗颿颽颻颾饈饇饃馦馧騚騕騥騝騤騛騢騠騧騣騞騜騔髂鬋鬊鬎鬌鬷鯪鯫鯠鯞鯤鯦鯢鯰鯔鯗鯬鯜鯙鯥鯕鯡鯚鵷鶁鶊鶄鶈鵱鶀鵸鶆鶋鶌鵽鵫鵴鵵鵰鵩鶅鵳鵻鶂鵯鵹鵿鶇鵨麔麑黀黼鼭齀齁齍齖齗齘匷嚲"
    	],
    	[
    		"f440",
    		"嚵嚳壣孅巆巇廮廯忀忁懹攗攖攕攓旟曨曣曤櫳櫰櫪櫨櫹櫱櫮櫯瀼瀵瀯瀷瀴瀱灂瀸瀿瀺瀹灀瀻瀳灁爓爔犨獽獼璺皫皪皾盭矌矎矏矍矲礥礣礧礨礤礩"
    	],
    	[
    		"f4a1",
    		"禲穮穬穭竷籉籈籊籇籅糮繻繾纁纀羺翿聹臛臙舋艨艩蘢藿蘁藾蘛蘀藶蘄蘉蘅蘌藽蠙蠐蠑蠗蠓蠖襣襦覹觷譠譪譝譨譣譥譧譭趮躆躈躄轙轖轗轕轘轚邍酃酁醷醵醲醳鐋鐓鏻鐠鐏鐔鏾鐕鐐鐨鐙鐍鏵鐀鏷鐇鐎鐖鐒鏺鐉鏸鐊鏿"
    	],
    	[
    		"f540",
    		"鏼鐌鏶鐑鐆闞闠闟霮霯鞹鞻韽韾顠顢顣顟飁飂饐饎饙饌饋饓騲騴騱騬騪騶騩騮騸騭髇髊髆鬐鬒鬑鰋鰈鯷鰅鰒鯸鱀鰇鰎鰆鰗鰔鰉鶟鶙鶤鶝鶒鶘鶐鶛"
    	],
    	[
    		"f5a1",
    		"鶠鶔鶜鶪鶗鶡鶚鶢鶨鶞鶣鶿鶩鶖鶦鶧麙麛麚黥黤黧黦鼰鼮齛齠齞齝齙龑儺儹劘劗囃嚽嚾孈孇巋巏廱懽攛欂櫼欃櫸欀灃灄灊灈灉灅灆爝爚爙獾甗癪矐礭礱礯籔籓糲纊纇纈纋纆纍罍羻耰臝蘘蘪蘦蘟蘣蘜蘙蘧蘮蘡蘠蘩蘞蘥"
    	],
    	[
    		"f640",
    		"蠩蠝蠛蠠蠤蠜蠫衊襭襩襮襫觺譹譸譅譺譻贐贔趯躎躌轞轛轝酆酄酅醹鐿鐻鐶鐩鐽鐼鐰鐹鐪鐷鐬鑀鐱闥闤闣霵霺鞿韡顤飉飆飀饘饖騹騽驆驄驂驁騺"
    	],
    	[
    		"f6a1",
    		"騿髍鬕鬗鬘鬖鬺魒鰫鰝鰜鰬鰣鰨鰩鰤鰡鶷鶶鶼鷁鷇鷊鷏鶾鷅鷃鶻鶵鷎鶹鶺鶬鷈鶱鶭鷌鶳鷍鶲鹺麜黫黮黭鼛鼘鼚鼱齎齥齤龒亹囆囅囋奱孋孌巕巑廲攡攠攦攢欋欈欉氍灕灖灗灒爞爟犩獿瓘瓕瓙瓗癭皭礵禴穰穱籗籜籙籛籚"
    	],
    	[
    		"f740",
    		"糴糱纑罏羇臞艫蘴蘵蘳蘬蘲蘶蠬蠨蠦蠪蠥襱覿覾觻譾讄讂讆讅譿贕躕躔躚躒躐躖躗轠轢酇鑌鑐鑊鑋鑏鑇鑅鑈鑉鑆霿韣顪顩飋饔饛驎驓驔驌驏驈驊"
    	],
    	[
    		"f7a1",
    		"驉驒驐髐鬙鬫鬻魖魕鱆鱈鰿鱄鰹鰳鱁鰼鰷鰴鰲鰽鰶鷛鷒鷞鷚鷋鷐鷜鷑鷟鷩鷙鷘鷖鷵鷕鷝麶黰鼵鼳鼲齂齫龕龢儽劙壨壧奲孍巘蠯彏戁戃戄攩攥斖曫欑欒欏毊灛灚爢玂玁玃癰矔籧籦纕艬蘺虀蘹蘼蘱蘻蘾蠰蠲蠮蠳襶襴襳觾"
    	],
    	[
    		"f840",
    		"讌讎讋讈豅贙躘轤轣醼鑢鑕鑝鑗鑞韄韅頀驖驙鬞鬟鬠鱒鱘鱐鱊鱍鱋鱕鱙鱌鱎鷻鷷鷯鷣鷫鷸鷤鷶鷡鷮鷦鷲鷰鷢鷬鷴鷳鷨鷭黂黐黲黳鼆鼜鼸鼷鼶齃齏"
    	],
    	[
    		"f8a1",
    		"齱齰齮齯囓囍孎屭攭曭曮欓灟灡灝灠爣瓛瓥矕礸禷禶籪纗羉艭虃蠸蠷蠵衋讔讕躞躟躠躝醾醽釂鑫鑨鑩雥靆靃靇韇韥驞髕魙鱣鱧鱦鱢鱞鱠鸂鷾鸇鸃鸆鸅鸀鸁鸉鷿鷽鸄麠鼞齆齴齵齶囔攮斸欘欙欗欚灢爦犪矘矙礹籩籫糶纚"
    	],
    	[
    		"f940",
    		"纘纛纙臠臡虆虇虈襹襺襼襻觿讘讙躥躤躣鑮鑭鑯鑱鑳靉顲饟鱨鱮鱭鸋鸍鸐鸏鸒鸑麡黵鼉齇齸齻齺齹圞灦籯蠼趲躦釃鑴鑸鑶鑵驠鱴鱳鱱鱵鸔鸓黶鼊"
    	],
    	[
    		"f9a1",
    		"龤灨灥糷虪蠾蠽蠿讞貜躩軉靋顳顴飌饡馫驤驦驧鬤鸕鸗齈戇欞爧虌躨钂钀钁驩驨鬮鸙爩虋讟钃鱹麷癵驫鱺鸝灩灪麤齾齉龘碁銹裏墻恒粧嫺╔╦╗╠╬╣╚╩╝╒╤╕╞╪╡╘╧╛╓╥╖╟╫╢╙╨╜║═╭╮╰╯▓"
    	]
    ];

    var require$$7 = [
    	[
    		"8740",
    		"䏰䰲䘃䖦䕸𧉧䵷䖳𧲱䳢𧳅㮕䜶䝄䱇䱀𤊿𣘗𧍒𦺋𧃒䱗𪍑䝏䗚䲅𧱬䴇䪤䚡𦬣爥𥩔𡩣𣸆𣽡晍囻"
    	],
    	[
    		"8767",
    		"綕夝𨮹㷴霴𧯯寛𡵞媤㘥𩺰嫑宷峼杮薓𩥅瑡璝㡵𡵓𣚞𦀡㻬"
    	],
    	[
    		"87a1",
    		"𥣞㫵竼龗𤅡𨤍𣇪𠪊𣉞䌊蒄龖鐯䤰蘓墖靊鈘秐稲晠権袝瑌篅枂稬剏遆㓦珄𥶹瓆鿇垳䤯呌䄱𣚎堘穲𧭥讏䚮𦺈䆁𥶙箮𢒼鿈𢓁𢓉𢓌鿉蔄𣖻䂴鿊䓡𪷿拁灮鿋"
    	],
    	[
    		"8840",
    		"㇀",
    		4,
    		"𠄌㇅𠃑𠃍㇆㇇𠃋𡿨㇈𠃊㇉㇊㇋㇌𠄎㇍㇎ĀÁǍÀĒÉĚÈŌÓǑÒ࿿Ê̄Ế࿿Ê̌ỀÊāáǎàɑēéěèīíǐìōóǒòūúǔùǖǘǚ"
    	],
    	[
    		"88a1",
    		"ǜü࿿ê̄ế࿿ê̌ềêɡ⏚⏛"
    	],
    	[
    		"8940",
    		"𪎩𡅅"
    	],
    	[
    		"8943",
    		"攊"
    	],
    	[
    		"8946",
    		"丽滝鵎釟"
    	],
    	[
    		"894c",
    		"𧜵撑会伨侨兖兴农凤务动医华发变团声处备夲头学实実岚庆总斉柾栄桥济炼电纤纬纺织经统缆缷艺苏药视设询车轧轮"
    	],
    	[
    		"89a1",
    		"琑糼緍楆竉刧"
    	],
    	[
    		"89ab",
    		"醌碸酞肼"
    	],
    	[
    		"89b0",
    		"贋胶𠧧"
    	],
    	[
    		"89b5",
    		"肟黇䳍鷉鸌䰾𩷶𧀎鸊𪄳㗁"
    	],
    	[
    		"89c1",
    		"溚舾甙"
    	],
    	[
    		"89c5",
    		"䤑马骏龙禇𨑬𡷊𠗐𢫦两亁亀亇亿仫伷㑌侽㹈倃傈㑽㒓㒥円夅凛凼刅争剹劐匧㗇厩㕑厰㕓参吣㕭㕲㚁咓咣咴咹哐哯唘唣唨㖘唿㖥㖿嗗㗅"
    	],
    	[
    		"8a40",
    		"𧶄唥"
    	],
    	[
    		"8a43",
    		"𠱂𠴕𥄫喐𢳆㧬𠍁蹆𤶸𩓥䁓𨂾睺𢰸㨴䟕𨅝𦧲𤷪擝𠵼𠾴𠳕𡃴撍蹾𠺖𠰋𠽤𢲩𨉖𤓓"
    	],
    	[
    		"8a64",
    		"𠵆𩩍𨃩䟴𤺧𢳂骲㩧𩗴㿭㔆𥋇𩟔𧣈𢵄鵮頕"
    	],
    	[
    		"8a76",
    		"䏙𦂥撴哣𢵌𢯊𡁷㧻𡁯"
    	],
    	[
    		"8aa1",
    		"𦛚𦜖𧦠擪𥁒𠱃蹨𢆡𨭌𠜱"
    	],
    	[
    		"8aac",
    		"䠋𠆩㿺塳𢶍"
    	],
    	[
    		"8ab2",
    		"𤗈𠓼𦂗𠽌𠶖啹䂻䎺"
    	],
    	[
    		"8abb",
    		"䪴𢩦𡂝膪飵𠶜捹㧾𢝵跀嚡摼㹃"
    	],
    	[
    		"8ac9",
    		"𪘁𠸉𢫏𢳉"
    	],
    	[
    		"8ace",
    		"𡃈𣧂㦒㨆𨊛㕸𥹉𢃇噒𠼱𢲲𩜠㒼氽𤸻"
    	],
    	[
    		"8adf",
    		"𧕴𢺋𢈈𪙛𨳍𠹺𠰴𦠜羓𡃏𢠃𢤹㗻𥇣𠺌𠾍𠺪㾓𠼰𠵇𡅏𠹌"
    	],
    	[
    		"8af6",
    		"𠺫𠮩𠵈𡃀𡄽㿹𢚖搲𠾭"
    	],
    	[
    		"8b40",
    		"𣏴𧘹𢯎𠵾𠵿𢱑𢱕㨘𠺘𡃇𠼮𪘲𦭐𨳒𨶙𨳊閪哌苄喹"
    	],
    	[
    		"8b55",
    		"𩻃鰦骶𧝞𢷮煀腭胬尜𦕲脴㞗卟𨂽醶𠻺𠸏𠹷𠻻㗝𤷫㘉𠳖嚯𢞵𡃉𠸐𠹸𡁸𡅈𨈇𡑕𠹹𤹐𢶤婔𡀝𡀞𡃵𡃶垜𠸑"
    	],
    	[
    		"8ba1",
    		"𧚔𨋍𠾵𠹻𥅾㜃𠾶𡆀𥋘𪊽𤧚𡠺𤅷𨉼墙剨㘚𥜽箲孨䠀䬬鼧䧧鰟鮍𥭴𣄽嗻㗲嚉丨夂𡯁屮靑𠂆乛亻㔾尣彑忄㣺扌攵歺氵氺灬爫丬犭𤣩罒礻糹罓𦉪㓁"
    	],
    	[
    		"8bde",
    		"𦍋耂肀𦘒𦥑卝衤见𧢲讠贝钅镸长门𨸏韦页风飞饣𩠐鱼鸟黄歯龜丷𠂇阝户钢"
    	],
    	[
    		"8c40",
    		"倻淾𩱳龦㷉袏𤅎灷峵䬠𥇍㕙𥴰愢𨨲辧釶熑朙玺𣊁𪄇㲋𡦀䬐磤琂冮𨜏䀉橣𪊺䈣蘏𠩯稪𩥇𨫪靕灍匤𢁾鏴盙𨧣龧矝亣俰傼丯众龨吴綋墒壐𡶶庒庙忂𢜒斋"
    	],
    	[
    		"8ca1",
    		"𣏹椙橃𣱣泿"
    	],
    	[
    		"8ca7",
    		"爀𤔅玌㻛𤨓嬕璹讃𥲤𥚕窓篬糃繬苸薗龩袐龪躹龫迏蕟駠鈡龬𨶹𡐿䁱䊢娚"
    	],
    	[
    		"8cc9",
    		"顨杫䉶圽"
    	],
    	[
    		"8cce",
    		"藖𤥻芿𧄍䲁𦵴嵻𦬕𦾾龭龮宖龯曧繛湗秊㶈䓃𣉖𢞖䎚䔶"
    	],
    	[
    		"8ce6",
    		"峕𣬚諹屸㴒𣕑嵸龲煗䕘𤃬𡸣䱷㥸㑊𠆤𦱁諌侴𠈹妿腬顖𩣺弻"
    	],
    	[
    		"8d40",
    		"𠮟"
    	],
    	[
    		"8d42",
    		"𢇁𨥭䄂䚻𩁹㼇龳𪆵䃸㟖䛷𦱆䅼𨚲𧏿䕭㣔𥒚䕡䔛䶉䱻䵶䗪㿈𤬏㙡䓞䒽䇭崾嵈嵖㷼㠏嶤嶹㠠㠸幂庽弥徃㤈㤔㤿㥍惗愽峥㦉憷憹懏㦸戬抐拥挘㧸嚱"
    	],
    	[
    		"8da1",
    		"㨃揢揻搇摚㩋擀崕嘡龟㪗斆㪽旿晓㫲暒㬢朖㭂枤栀㭘桊梄㭲㭱㭻椉楃牜楤榟榅㮼槖㯝橥橴橱檂㯬檙㯲檫檵櫔櫶殁毁毪汵沪㳋洂洆洦涁㳯涤涱渕渘温溆𨧀溻滢滚齿滨滩漤漴㵆𣽁澁澾㵪㵵熷岙㶊瀬㶑灐灔灯灿炉𠌥䏁㗱𠻘"
    	],
    	[
    		"8e40",
    		"𣻗垾𦻓焾𥟠㙎榢𨯩孴穉𥣡𩓙穥穽𥦬窻窰竂竃燑𦒍䇊竚竝竪䇯咲𥰁笋筕笩𥌎𥳾箢筯莜𥮴𦱿篐萡箒箸𥴠㶭𥱥蒒篺簆簵𥳁籄粃𤢂粦晽𤕸糉糇糦籴糳糵糎"
    	],
    	[
    		"8ea1",
    		"繧䔝𦹄絝𦻖璍綉綫焵綳緒𤁗𦀩緤㴓緵𡟹緥𨍭縝𦄡𦅚繮纒䌫鑬縧罀罁罇礶𦋐駡羗𦍑羣𡙡𠁨䕜𣝦䔃𨌺翺𦒉者耈耝耨耯𪂇𦳃耻耼聡𢜔䦉𦘦𣷣𦛨朥肧𨩈脇脚墰𢛶汿𦒘𤾸擧𡒊舘𡡞橓𤩥𤪕䑺舩𠬍𦩒𣵾俹𡓽蓢荢𦬊𤦧𣔰𡝳𣷸芪椛芳䇛"
    	],
    	[
    		"8f40",
    		"蕋苐茚𠸖𡞴㛁𣅽𣕚艻苢茘𣺋𦶣𦬅𦮗𣗎㶿茝嗬莅䔋𦶥莬菁菓㑾𦻔橗蕚㒖𦹂𢻯葘𥯤葱㷓䓤檧葊𣲵祘蒨𦮖𦹷𦹃蓞萏莑䒠蒓蓤𥲑䉀𥳀䕃蔴嫲𦺙䔧蕳䔖枿蘖"
    	],
    	[
    		"8fa1",
    		"𨘥𨘻藁𧂈蘂𡖂𧃍䕫䕪蘨㙈𡢢号𧎚虾蝱𪃸蟮𢰧螱蟚蠏噡虬桖䘏衅衆𧗠𣶹𧗤衞袜䙛袴袵揁装睷𧜏覇覊覦覩覧覼𨨥觧𧤤𧪽誜瞓釾誐𧩙竩𧬺𣾏䜓𧬸煼謌謟𥐰𥕥謿譌譍誩𤩺讐讛誯𡛟䘕衏貛𧵔𧶏貫㜥𧵓賖𧶘𧶽贒贃𡤐賛灜贑𤳉㻐起"
    	],
    	[
    		"9040",
    		"趩𨀂𡀔𤦊㭼𨆼𧄌竧躭躶軃鋔輙輭𨍥𨐒辥錃𪊟𠩐辳䤪𨧞𨔽𣶻廸𣉢迹𪀔𨚼𨔁𢌥㦀𦻗逷𨔼𧪾遡𨕬𨘋邨𨜓郄𨛦邮都酧㫰醩釄粬𨤳𡺉鈎沟鉁鉢𥖹銹𨫆𣲛𨬌𥗛"
    	],
    	[
    		"90a1",
    		"𠴱錬鍫𨫡𨯫炏嫃𨫢𨫥䥥鉄𨯬𨰹𨯿鍳鑛躼閅閦鐦閠濶䊹𢙺𨛘𡉼𣸮䧟氜陻隖䅬隣𦻕懚隶磵𨫠隽双䦡𦲸𠉴𦐐𩂯𩃥𤫑𡤕𣌊霱虂霶䨏䔽䖅𤫩灵孁霛靜𩇕靗孊𩇫靟鐥僐𣂷𣂼鞉鞟鞱鞾韀韒韠𥑬韮琜𩐳響韵𩐝𧥺䫑頴頳顋顦㬎𧅵㵑𠘰𤅜"
    	],
    	[
    		"9140",
    		"𥜆飊颷飈飇䫿𦴧𡛓喰飡飦飬鍸餹𤨩䭲𩡗𩤅駵騌騻騐驘𥜥㛄𩂱𩯕髠髢𩬅髴䰎鬔鬭𨘀倴鬴𦦨㣃𣁽魐魀𩴾婅𡡣鮎𤉋鰂鯿鰌𩹨鷔𩾷𪆒𪆫𪃡𪄣𪇟鵾鶃𪄴鸎梈"
    	],
    	[
    		"91a1",
    		"鷄𢅛𪆓𪈠𡤻𪈳鴹𪂹𪊴麐麕麞麢䴴麪麯𤍤黁㭠㧥㴝伲㞾𨰫鼂鼈䮖鐤𦶢鼗鼖鼹嚟嚊齅馸𩂋韲葿齢齩竜龎爖䮾𤥵𤦻煷𤧸𤍈𤩑玞𨯚𡣺禟𨥾𨸶鍩鏳𨩄鋬鎁鏋𨥬𤒹爗㻫睲穃烐𤑳𤏸煾𡟯炣𡢾𣖙㻇𡢅𥐯𡟸㜢𡛻𡠹㛡𡝴𡣑𥽋㜣𡛀坛𤨥𡏾𡊨"
    	],
    	[
    		"9240",
    		"𡏆𡒶蔃𣚦蔃葕𤦔𧅥𣸱𥕜𣻻𧁒䓴𣛮𩦝𦼦柹㜳㰕㷧塬𡤢栐䁗𣜿𤃡𤂋𤄏𦰡哋嚞𦚱嚒𠿟𠮨𠸍鏆𨬓鎜仸儫㠙𤐶亼𠑥𠍿佋侊𥙑婨𠆫𠏋㦙𠌊𠐔㐵伩𠋀𨺳𠉵諚𠈌亘"
    	],
    	[
    		"92a1",
    		"働儍侢伃𤨎𣺊佂倮偬傁俌俥偘僼兙兛兝兞湶𣖕𣸹𣺿浲𡢄𣺉冨凃𠗠䓝𠒣𠒒𠒑赺𨪜𠜎剙劤𠡳勡鍮䙺熌𤎌𠰠𤦬𡃤槑𠸝瑹㻞璙琔瑖玘䮎𤪼𤂍叐㖄爏𤃉喴𠍅响𠯆圝鉝雴鍦埝垍坿㘾壋媙𨩆𡛺𡝯𡜐娬妸銏婾嫏娒𥥆𡧳𡡡𤊕㛵洅瑃娡𥺃"
    	],
    	[
    		"9340",
    		"媁𨯗𠐓鏠璌𡌃焅䥲鐈𨧻鎽㞠尞岞幞幈𡦖𡥼𣫮廍孏𡤃𡤄㜁𡢠㛝𡛾㛓脪𨩇𡶺𣑲𨦨弌弎𡤧𡞫婫𡜻孄蘔𧗽衠恾𢡠𢘫忛㺸𢖯𢖾𩂈𦽳懀𠀾𠁆𢘛憙憘恵𢲛𢴇𤛔𩅍"
    	],
    	[
    		"93a1",
    		"摱𤙥𢭪㨩𢬢𣑐𩣪𢹸挷𪑛撶挱揑𤧣𢵧护𢲡搻敫楲㯴𣂎𣊭𤦉𣊫唍𣋠𡣙𩐿曎𣊉𣆳㫠䆐𥖄𨬢𥖏𡛼𥕛𥐥磮𣄃𡠪𣈴㑤𣈏𣆂𤋉暎𦴤晫䮓昰𧡰𡷫晣𣋒𣋡昞𥡲㣑𣠺𣞼㮙𣞢𣏾瓐㮖枏𤘪梶栞㯄檾㡣𣟕𤒇樳橒櫉欅𡤒攑梘橌㯗橺歗𣿀𣲚鎠鋲𨯪𨫋"
    	],
    	[
    		"9440",
    		"銉𨀞𨧜鑧涥漋𤧬浧𣽿㶏渄𤀼娽渊塇洤硂焻𤌚𤉶烱牐犇犔𤞏𤜥兹𤪤𠗫瑺𣻸𣙟𤩊𤤗𥿡㼆㺱𤫟𨰣𣼵悧㻳瓌琼鎇琷䒟𦷪䕑疃㽣𤳙𤴆㽘畕癳𪗆㬙瑨𨫌𤦫𤦎㫻"
    	],
    	[
    		"94a1",
    		"㷍𤩎㻿𤧅𤣳釺圲鍂𨫣𡡤僟𥈡𥇧睸𣈲眎眏睻𤚗𣞁㩞𤣰琸璛㺿𤪺𤫇䃈𤪖𦆮錇𥖁砞碍碈磒珐祙𧝁𥛣䄎禛蒖禥樭𣻺稺秴䅮𡛦䄲鈵秱𠵌𤦌𠊙𣶺𡝮㖗啫㕰㚪𠇔𠰍竢婙𢛵𥪯𥪜娍𠉛磰娪𥯆竾䇹籝籭䈑𥮳𥺼𥺦糍𤧹𡞰粎籼粮檲緜縇緓罎𦉡"
    	],
    	[
    		"9540",
    		"𦅜𧭈綗𥺂䉪𦭵𠤖柖𠁎𣗏埄𦐒𦏸𤥢翝笧𠠬𥫩𥵃笌𥸎駦虅驣樜𣐿㧢𤧷𦖭騟𦖠蒀𧄧𦳑䓪脷䐂胆脉腂𦞴飃𦩂艢艥𦩑葓𦶧蘐𧈛媆䅿𡡀嬫𡢡嫤𡣘蚠蜨𣶏蠭𧐢娂"
    	],
    	[
    		"95a1",
    		"衮佅袇袿裦襥襍𥚃襔𧞅𧞄𨯵𨯙𨮜𨧹㺭蒣䛵䛏㟲訽訜𩑈彍鈫𤊄旔焩烄𡡅鵭貟賩𧷜妚矃姰䍮㛔踪躧𤰉輰轊䋴汘澻𢌡䢛潹溋𡟚鯩㚵𤤯邻邗啱䤆醻鐄𨩋䁢𨫼鐧𨰝𨰻蓥訫閙閧閗閖𨴴瑅㻂𤣿𤩂𤏪㻧𣈥随𨻧𨹦𨹥㻌𤧭𤩸𣿮琒瑫㻼靁𩂰"
    	],
    	[
    		"9640",
    		"桇䨝𩂓𥟟靝鍨𨦉𨰦𨬯𦎾銺嬑譩䤼珹𤈛鞛靱餸𠼦巁𨯅𤪲頟𩓚鋶𩗗釥䓀𨭐𤩧𨭤飜𨩅㼀鈪䤥萔餻饍𧬆㷽馛䭯馪驜𨭥𥣈檏騡嫾騯𩣱䮐𩥈馼䮽䮗鍽塲𡌂堢𤦸"
    	],
    	[
    		"96a1",
    		"𡓨硄𢜟𣶸棅㵽鑘㤧慐𢞁𢥫愇鱏鱓鱻鰵鰐魿鯏𩸭鮟𪇵𪃾鴡䲮𤄄鸘䲰鴌𪆴𪃭𪃳𩤯鶥蒽𦸒𦿟𦮂藼䔳𦶤𦺄𦷰萠藮𦸀𣟗𦁤秢𣖜𣙀䤭𤧞㵢鏛銾鍈𠊿碹鉷鑍俤㑀遤𥕝砽硔碶硋𡝗𣇉𤥁㚚佲濚濙瀞瀞吔𤆵垻壳垊鴖埗焴㒯𤆬燫𦱀𤾗嬨𡞵𨩉"
    	],
    	[
    		"9740",
    		"愌嫎娋䊼𤒈㜬䭻𨧼鎻鎸𡣖𠼝葲𦳀𡐓𤋺𢰦𤏁妔𣶷𦝁綨𦅛𦂤𤦹𤦋𨧺鋥珢㻩璴𨭣𡢟㻡𤪳櫘珳珻㻖𤨾𤪔𡟙𤩦𠎧𡐤𤧥瑈𤤖炥𤥶銄珦鍟𠓾錱𨫎𨨖鎆𨯧𥗕䤵𨪂煫"
    	],
    	[
    		"97a1",
    		"𤥃𠳿嚤𠘚𠯫𠲸唂秄𡟺緾𡛂𤩐𡡒䔮鐁㜊𨫀𤦭妰𡢿𡢃𧒄媡㛢𣵛㚰鉟婹𨪁𡡢鍴㳍𠪴䪖㦊僴㵩㵌𡎜煵䋻𨈘渏𩃤䓫浗𧹏灧沯㳖𣿭𣸭渂漌㵯𠏵畑㚼㓈䚀㻚䡱姄鉮䤾轁𨰜𦯀堒埈㛖𡑒烾𤍢𤩱𢿣𡊰𢎽梹楧𡎘𣓥𧯴𣛟𨪃𣟖𣏺𤲟樚𣚭𦲷萾䓟䓎"
    	],
    	[
    		"9840",
    		"𦴦𦵑𦲂𦿞漗𧄉茽𡜺菭𦲀𧁓𡟛妉媂𡞳婡婱𡤅𤇼㜭姯𡜼㛇熎鎐暚𤊥婮娫𤊓樫𣻹𧜶𤑛𤋊焝𤉙𨧡侰𦴨峂𤓎𧹍𤎽樌𤉖𡌄炦焳𤏩㶥泟勇𤩏繥姫崯㷳彜𤩝𡟟綤萦"
    	],
    	[
    		"98a1",
    		"咅𣫺𣌀𠈔坾𠣕𠘙㿥𡾞𪊶瀃𩅛嵰玏糓𨩙𩐠俈翧狍猐𧫴猸猹𥛶獁獈㺩𧬘遬燵𤣲珡臶㻊県㻑沢国琙琞琟㻢㻰㻴㻺瓓㼎㽓畂畭畲疍㽼痈痜㿀癍㿗癴㿜発𤽜熈嘣覀塩䀝睃䀹条䁅㗛瞘䁪䁯属瞾矋売砘点砜䂨砹硇硑硦葈𥔵礳栃礲䄃"
    	],
    	[
    		"9940",
    		"䄉禑禙辻稆込䅧窑䆲窼艹䇄竏竛䇏両筢筬筻簒簛䉠䉺类粜䊌粸䊔糭输烀𠳏総緔緐緽羮羴犟䎗耠耥笹耮耱联㷌垴炠肷胩䏭脌猪脎脒畠脔䐁㬹腖腙腚"
    	],
    	[
    		"99a1",
    		"䐓堺腼膄䐥膓䐭膥埯臁臤艔䒏芦艶苊苘苿䒰荗险榊萅烵葤惣蒈䔄蒾蓡蓸蔐蔸蕒䔻蕯蕰藠䕷虲蚒蚲蛯际螋䘆䘗袮裿褤襇覑𧥧訩訸誔誴豑賔賲贜䞘塟跃䟭仮踺嗘坔蹱嗵躰䠷軎転軤軭軲辷迁迊迌逳駄䢭飠鈓䤞鈨鉘鉫銱銮銿"
    	],
    	[
    		"9a40",
    		"鋣鋫鋳鋴鋽鍃鎄鎭䥅䥑麿鐗匁鐝鐭鐾䥪鑔鑹锭関䦧间阳䧥枠䨤靀䨵鞲韂噔䫤惨颹䬙飱塄餎餙冴餜餷饂饝饢䭰駅䮝騼鬏窃魩鮁鯝鯱鯴䱭鰠㝯𡯂鵉鰺"
    	],
    	[
    		"9aa1",
    		"黾噐鶓鶽鷀鷼银辶鹻麬麱麽黆铜黢黱黸竈齄𠂔𠊷𠎠椚铃妬𠓗塀铁㞹𠗕𠘕𠙶𡚺块煳𠫂𠫍𠮿呪吆𠯋咞𠯻𠰻𠱓𠱥𠱼惧𠲍噺𠲵𠳝𠳭𠵯𠶲𠷈楕鰯螥𠸄𠸎𠻗𠾐𠼭𠹳尠𠾼帋𡁜𡁏𡁶朞𡁻𡂈𡂖㙇𡂿𡃓𡄯𡄻卤蒭𡋣𡍵𡌶讁𡕷𡘙𡟃𡟇乸炻𡠭𡥪"
    	],
    	[
    		"9b40",
    		"𡨭𡩅𡰪𡱰𡲬𡻈拃𡻕𡼕熘桕𢁅槩㛈𢉼𢏗𢏺𢜪𢡱𢥏苽𢥧𢦓𢫕覥𢫨辠𢬎鞸𢬿顇骽𢱌"
    	],
    	[
    		"9b62",
    		"𢲈𢲷𥯨𢴈𢴒𢶷𢶕𢹂𢽴𢿌𣀳𣁦𣌟𣏞徱晈暿𧩹𣕧𣗳爁𤦺矗𣘚𣜖纇𠍆墵朎"
    	],
    	[
    		"9ba1",
    		"椘𣪧𧙗𥿢𣸑𣺹𧗾𢂚䣐䪸𤄙𨪚𤋮𤌍𤀻𤌴𤎖𤩅𠗊凒𠘑妟𡺨㮾𣳿𤐄𤓖垈𤙴㦛𤜯𨗨𩧉㝢𢇃譞𨭎駖𤠒𤣻𤨕爉𤫀𠱸奥𤺥𤾆𠝹軚𥀬劏圿煱𥊙𥐙𣽊𤪧喼𥑆𥑮𦭒釔㑳𥔿𧘲𥕞䜘𥕢𥕦𥟇𤤿𥡝偦㓻𣏌惞𥤃䝼𨥈𥪮𥮉𥰆𡶐垡煑澶𦄂𧰒遖𦆲𤾚譢𦐂𦑊"
    	],
    	[
    		"9c40",
    		"嵛𦯷輶𦒄𡤜諪𤧶𦒈𣿯𦔒䯀𦖿𦚵𢜛鑥𥟡憕娧晉侻嚹𤔡𦛼乪𤤴陖涏𦲽㘘襷𦞙𦡮𦐑𦡞營𦣇筂𩃀𠨑𦤦鄄𦤹穅鷰𦧺騦𦨭㙟𦑩𠀡禃𦨴𦭛崬𣔙菏𦮝䛐𦲤画补𦶮墶"
    	],
    	[
    		"9ca1",
    		"㜜𢖍𧁋𧇍㱔𧊀𧊅銁𢅺𧊋錰𧋦𤧐氹钟𧑐𠻸蠧裵𢤦𨑳𡞱溸𤨪𡠠㦤㚹尐秣䔿暶𩲭𩢤襃𧟌𧡘囖䃟𡘊㦡𣜯𨃨𡏅熭荦𧧝𩆨婧䲷𧂯𨦫𧧽𧨊𧬋𧵦𤅺筃祾𨀉澵𪋟樃𨌘厢𦸇鎿栶靝𨅯𨀣𦦵𡏭𣈯𨁈嶅𨰰𨂃圕頣𨥉嶫𤦈斾槕叒𤪥𣾁㰑朶𨂐𨃴𨄮𡾡𨅏"
    	],
    	[
    		"9d40",
    		"𨆉𨆯𨈚𨌆𨌯𨎊㗊𨑨𨚪䣺揦𨥖砈鉕𨦸䏲𨧧䏟𨧨𨭆𨯔姸𨰉輋𨿅𩃬筑𩄐𩄼㷷𩅞𤫊运犏嚋𩓧𩗩𩖰𩖸𩜲𩣑𩥉𩥪𩧃𩨨𩬎𩵚𩶛纟𩻸𩼣䲤镇𪊓熢𪋿䶑递𪗋䶜𠲜达嗁"
    	],
    	[
    		"9da1",
    		"辺𢒰边𤪓䔉繿潖檱仪㓤𨬬𧢝㜺躀𡟵𨀤𨭬𨮙𧨾𦚯㷫𧙕𣲷𥘵𥥖亚𥺁𦉘嚿𠹭踎孭𣺈𤲞揞拐𡟶𡡻攰嘭𥱊吚𥌑㷆𩶘䱽嘢嘞罉𥻘奵𣵀蝰东𠿪𠵉𣚺脗鵞贘瘻鱅癎瞹鍅吲腈苷嘥脲萘肽嗪祢噃吖𠺝㗎嘅嗱曱𨋢㘭甴嗰喺咗啲𠱁𠲖廐𥅈𠹶𢱢"
    	],
    	[
    		"9e40",
    		"𠺢麫絚嗞𡁵抝靭咔賍燶酶揼掹揾啩𢭃鱲𢺳冚㓟𠶧冧呍唞唓癦踭𦢊疱肶蠄螆裇膶萜𡃁䓬猄𤜆宐茋𦢓噻𢛴𧴯𤆣𧵳𦻐𧊶酰𡇙鈈𣳼𪚩𠺬𠻹牦𡲢䝎𤿂𧿹𠿫䃺"
    	],
    	[
    		"9ea1",
    		"鱝攟𢶠䣳𤟠𩵼𠿬𠸊恢𧖣𠿭"
    	],
    	[
    		"9ead",
    		"𦁈𡆇熣纎鵐业丄㕷嬍沲卧㚬㧜卽㚥𤘘墚𤭮舭呋垪𥪕𠥹"
    	],
    	[
    		"9ec5",
    		"㩒𢑥獴𩺬䴉鯭𣳾𩼰䱛𤾩𩖞𩿞葜𣶶𧊲𦞳𣜠挮紥𣻷𣸬㨪逈勌㹴㙺䗩𠒎癀嫰𠺶硺𧼮墧䂿噼鮋嵴癔𪐴麅䳡痹㟻愙𣃚𤏲"
    	],
    	[
    		"9ef5",
    		"噝𡊩垧𤥣𩸆刴𧂮㖭汊鵼"
    	],
    	[
    		"9f40",
    		"籖鬹埞𡝬屓擓𩓐𦌵𧅤蚭𠴨𦴢𤫢𠵱"
    	],
    	[
    		"9f4f",
    		"凾𡼏嶎霃𡷑麁遌笟鬂峑箣扨挵髿篏鬪籾鬮籂粆鰕篼鬉鼗鰛𤤾齚啳寃俽麘俲剠㸆勑坧偖妷帒韈鶫轜呩鞴饀鞺匬愰"
    	],
    	[
    		"9fa1",
    		"椬叚鰊鴂䰻陁榀傦畆𡝭駚剳"
    	],
    	[
    		"9fae",
    		"酙隁酜"
    	],
    	[
    		"9fb2",
    		"酑𨺗捿𦴣櫊嘑醎畺抅𠏼獏籰𥰡𣳽"
    	],
    	[
    		"9fc1",
    		"𤤙盖鮝个𠳔莾衂"
    	],
    	[
    		"9fc9",
    		"届槀僭坺刟巵从氱𠇲伹咜哚劚趂㗾弌㗳"
    	],
    	[
    		"9fdb",
    		"歒酼龥鮗頮颴骺麨麄煺笔"
    	],
    	[
    		"9fe7",
    		"毺蠘罸"
    	],
    	[
    		"9feb",
    		"嘠𪙊蹷齓"
    	],
    	[
    		"9ff0",
    		"跔蹏鸜踁抂𨍽踨蹵竓𤩷稾磘泪詧瘇"
    	],
    	[
    		"a040",
    		"𨩚鼦泎蟖痃𪊲硓咢贌狢獱謭猂瓱賫𤪻蘯徺袠䒷"
    	],
    	[
    		"a055",
    		"𡠻𦸅"
    	],
    	[
    		"a058",
    		"詾𢔛"
    	],
    	[
    		"a05b",
    		"惽癧髗鵄鍮鮏蟵"
    	],
    	[
    		"a063",
    		"蠏賷猬霡鮰㗖犲䰇籑饊𦅙慙䰄麖慽"
    	],
    	[
    		"a073",
    		"坟慯抦戹拎㩜懢厪𣏵捤栂㗒"
    	],
    	[
    		"a0a1",
    		"嵗𨯂迚𨸹"
    	],
    	[
    		"a0a6",
    		"僙𡵆礆匲阸𠼻䁥"
    	],
    	[
    		"a0ae",
    		"矾"
    	],
    	[
    		"a0b0",
    		"糂𥼚糚稭聦聣絍甅瓲覔舚朌聢𧒆聛瓰脃眤覉𦟌畓𦻑螩蟎臈螌詉貭譃眫瓸蓚㘵榲趦"
    	],
    	[
    		"a0d4",
    		"覩瑨涹蟁𤀑瓧㷛煶悤憜㳑煢恷"
    	],
    	[
    		"a0e2",
    		"罱𨬭牐惩䭾删㰘𣳇𥻗𧙖𥔱𡥄𡋾𩤃𦷜𧂭峁𦆭𨨏𣙷𠃮𦡆𤼎䕢嬟𦍌齐麦𦉫"
    	],
    	[
    		"a3c0",
    		"␀",
    		31,
    		"␡"
    	],
    	[
    		"c6a1",
    		"①",
    		9,
    		"⑴",
    		9,
    		"ⅰ",
    		9,
    		"丶丿亅亠冂冖冫勹匸卩厶夊宀巛⼳广廴彐彡攴无疒癶辵隶¨ˆヽヾゝゞ〃仝々〆〇ー［］✽ぁ",
    		23
    	],
    	[
    		"c740",
    		"す",
    		58,
    		"ァアィイ"
    	],
    	[
    		"c7a1",
    		"ゥ",
    		81,
    		"А",
    		5,
    		"ЁЖ",
    		4
    	],
    	[
    		"c840",
    		"Л",
    		26,
    		"ёж",
    		25,
    		"⇧↸↹㇏𠃌乚𠂊刂䒑"
    	],
    	[
    		"c8a1",
    		"龰冈龱𧘇"
    	],
    	[
    		"c8cd",
    		"￢￤＇＂㈱№℡゛゜⺀⺄⺆⺇⺈⺊⺌⺍⺕⺜⺝⺥⺧⺪⺬⺮⺶⺼⺾⻆⻊⻌⻍⻏⻖⻗⻞⻣"
    	],
    	[
    		"c8f5",
    		"ʃɐɛɔɵœøŋʊɪ"
    	],
    	[
    		"f9fe",
    		"￭"
    	],
    	[
    		"fa40",
    		"𠕇鋛𠗟𣿅蕌䊵珯况㙉𤥂𨧤鍄𡧛苮𣳈砼杄拟𤤳𨦪𠊠𦮳𡌅侫𢓭倈𦴩𧪄𣘀𤪱𢔓倩𠍾徤𠎀𠍇滛𠐟偽儁㑺儎顬㝃萖𤦤𠒇兠𣎴兪𠯿𢃼𠋥𢔰𠖎𣈳𡦃宂蝽𠖳𣲙冲冸"
    	],
    	[
    		"faa1",
    		"鴴凉减凑㳜凓𤪦决凢卂凭菍椾𣜭彻刋刦刼劵剗劔効勅簕蕂勠蘍𦬓包𨫞啉滙𣾀𠥔𣿬匳卄𠯢泋𡜦栛珕恊㺪㣌𡛨燝䒢卭却𨚫卾卿𡖖𡘓矦厓𨪛厠厫厮玧𥝲㽙玜叁叅汉义埾叙㪫𠮏叠𣿫𢶣叶𠱷吓灹唫晗浛呭𦭓𠵴啝咏咤䞦𡜍𠻝㶴𠵍"
    	],
    	[
    		"fb40",
    		"𨦼𢚘啇䳭启琗喆喩嘅𡣗𤀺䕒𤐵暳𡂴嘷曍𣊊暤暭噍噏磱囱鞇叾圀囯园𨭦㘣𡉏坆𤆥汮炋坂㚱𦱾埦𡐖堃𡑔𤍣堦𤯵塜墪㕡壠壜𡈼壻寿坃𪅐𤉸鏓㖡够梦㛃湙"
    	],
    	[
    		"fba1",
    		"𡘾娤啓𡚒蔅姉𠵎𦲁𦴪𡟜姙𡟻𡞲𦶦浱𡠨𡛕姹𦹅媫婣㛦𤦩婷㜈媖瑥嫓𦾡𢕔㶅𡤑㜲𡚸広勐孶斈孼𧨎䀄䡝𠈄寕慠𡨴𥧌𠖥寳宝䴐尅𡭄尓珎尔𡲥𦬨屉䣝岅峩峯嶋𡷹𡸷崐崘嵆𡺤岺巗苼㠭𤤁𢁉𢅳芇㠶㯂帮檊幵幺𤒼𠳓厦亷廐厨𡝱帉廴𨒂"
    	],
    	[
    		"fc40",
    		"廹廻㢠廼栾鐛弍𠇁弢㫞䢮𡌺强𦢈𢏐彘𢑱彣鞽𦹮彲鍀𨨶徧嶶㵟𥉐𡽪𧃸𢙨釖𠊞𨨩怱暅𡡷㥣㷇㘹垐𢞴祱㹀悞悤悳𤦂𤦏𧩓璤僡媠慤萤慂慈𦻒憁凴𠙖憇宪𣾷"
    	],
    	[
    		"fca1",
    		"𢡟懓𨮝𩥝懐㤲𢦀𢣁怣慜攞掋𠄘担𡝰拕𢸍捬𤧟㨗搸揸𡎎𡟼撐澊𢸶頔𤂌𥜝擡擥鑻㩦携㩗敍漖𤨨𤨣斅敭敟𣁾斵𤥀䬷旑䃘𡠩无旣忟𣐀昘𣇷𣇸晄𣆤𣆥晋𠹵晧𥇦晳晴𡸽𣈱𨗴𣇈𥌓矅𢣷馤朂𤎜𤨡㬫槺𣟂杞杧杢𤇍𩃭柗䓩栢湐鈼栁𣏦𦶠桝"
    	],
    	[
    		"fd40",
    		"𣑯槡樋𨫟楳棃𣗍椁椀㴲㨁𣘼㮀枬楡𨩊䋼椶榘㮡𠏉荣傐槹𣙙𢄪橅𣜃檝㯳枱櫈𩆜㰍欝𠤣惞欵歴𢟍溵𣫛𠎵𡥘㝀吡𣭚毡𣻼毜氷𢒋𤣱𦭑汚舦汹𣶼䓅𣶽𤆤𤤌𤤀"
    	],
    	[
    		"fda1",
    		"𣳉㛥㳫𠴲鮃𣇹𢒑羏样𦴥𦶡𦷫涖浜湼漄𤥿𤂅𦹲蔳𦽴凇沜渝萮𨬡港𣸯瑓𣾂秌湏媑𣁋濸㜍澝𣸰滺𡒗𤀽䕕鏰潄潜㵎潴𩅰㴻澟𤅄濓𤂑𤅕𤀹𣿰𣾴𤄿凟𤅖𤅗𤅀𦇝灋灾炧炁烌烕烖烟䄄㷨熴熖𤉷焫煅媈煊煮岜𤍥煏鍢𤋁焬𤑚𤨧𤨢熺𨯨炽爎"
    	],
    	[
    		"fe40",
    		"鑂爕夑鑃爤鍁𥘅爮牀𤥴梽牕牗㹕𣁄栍漽犂猪猫𤠣𨠫䣭𨠄猨献珏玪𠰺𦨮珉瑉𤇢𡛧𤨤昣㛅𤦷𤦍𤧻珷琕椃𤨦琹𠗃㻗瑜𢢭瑠𨺲瑇珤瑶莹瑬㜰瑴鏱樬璂䥓𤪌"
    	],
    	[
    		"fea1",
    		"𤅟𤩹𨮏孆𨰃𡢞瓈𡦈甎瓩甞𨻙𡩋寗𨺬鎅畍畊畧畮𤾂㼄𤴓疎瑝疞疴瘂瘬癑癏癯癶𦏵皐臯㟸𦤑𦤎皡皥皷盌𦾟葢𥂝𥅽𡸜眞眦着撯𥈠睘𣊬瞯𨥤𨥨𡛁矴砉𡍶𤨒棊碯磇磓隥礮𥗠磗礴碱𧘌辸袄𨬫𦂃𢘜禆褀椂禀𥡗禝𧬹礼禩渪𧄦㺨秆𩄍秔"
    	]
    ];

    // Description of supported double byte encodings and aliases.
    // Tables are not require()-d until they are needed to speed up library load.
    // require()-s are direct to support Browserify.

    var dbcsData = {
        
        // == Japanese/ShiftJIS ====================================================
        // All japanese encodings are based on JIS X set of standards:
        // JIS X 0201 - Single-byte encoding of ASCII + ¥ + Kana chars at 0xA1-0xDF.
        // JIS X 0208 - Main set of 6879 characters, placed in 94x94 plane, to be encoded by 2 bytes. 
        //              Has several variations in 1978, 1983, 1990 and 1997.
        // JIS X 0212 - Supplementary plane of 6067 chars in 94x94 plane. 1990. Effectively dead.
        // JIS X 0213 - Extension and modern replacement of 0208 and 0212. Total chars: 11233.
        //              2 planes, first is superset of 0208, second - revised 0212.
        //              Introduced in 2000, revised 2004. Some characters are in Unicode Plane 2 (0x2xxxx)

        // Byte encodings are:
        //  * Shift_JIS: Compatible with 0201, uses not defined chars in top half as lead bytes for double-byte
        //               encoding of 0208. Lead byte ranges: 0x81-0x9F, 0xE0-0xEF; Trail byte ranges: 0x40-0x7E, 0x80-0x9E, 0x9F-0xFC.
        //               Windows CP932 is a superset of Shift_JIS. Some companies added more chars, notably KDDI.
        //  * EUC-JP:    Up to 3 bytes per character. Used mostly on *nixes.
        //               0x00-0x7F       - lower part of 0201
        //               0x8E, 0xA1-0xDF - upper part of 0201
        //               (0xA1-0xFE)x2   - 0208 plane (94x94).
        //               0x8F, (0xA1-0xFE)x2 - 0212 plane (94x94).
        //  * JIS X 208: 7-bit, direct encoding of 0208. Byte ranges: 0x21-0x7E (94 values). Uncommon.
        //               Used as-is in ISO2022 family.
        //  * ISO2022-JP: Stateful encoding, with escape sequences to switch between ASCII, 
        //                0201-1976 Roman, 0208-1978, 0208-1983.
        //  * ISO2022-JP-1: Adds esc seq for 0212-1990.
        //  * ISO2022-JP-2: Adds esc seq for GB2313-1980, KSX1001-1992, ISO8859-1, ISO8859-7.
        //  * ISO2022-JP-3: Adds esc seq for 0201-1976 Kana set, 0213-2000 Planes 1, 2.
        //  * ISO2022-JP-2004: Adds 0213-2004 Plane 1.
        //
        // After JIS X 0213 appeared, Shift_JIS-2004, EUC-JISX0213 and ISO2022-JP-2004 followed, with just changing the planes.
        //
        // Overall, it seems that it's a mess :( http://www8.plala.or.jp/tkubota1/unicode-symbols-map2.html

        'shiftjis': {
            type: '_dbcs',
            table: function() { return require$$0 },
            encodeAdd: {'\u00a5': 0x5C, '\u203E': 0x7E},
            encodeSkipVals: [{from: 0xED40, to: 0xF940}],
        },
        'csshiftjis': 'shiftjis',
        'mskanji': 'shiftjis',
        'sjis': 'shiftjis',
        'windows31j': 'shiftjis',
        'ms31j': 'shiftjis',
        'xsjis': 'shiftjis',
        'windows932': 'shiftjis',
        'ms932': 'shiftjis',
        '932': 'shiftjis',
        'cp932': 'shiftjis',

        'eucjp': {
            type: '_dbcs',
            table: function() { return require$$1 },
            encodeAdd: {'\u00a5': 0x5C, '\u203E': 0x7E},
        },

        // TODO: KDDI extension to Shift_JIS
        // TODO: IBM CCSID 942 = CP932, but F0-F9 custom chars and other char changes.
        // TODO: IBM CCSID 943 = Shift_JIS = CP932 with original Shift_JIS lower 128 chars.


        // == Chinese/GBK ==========================================================
        // http://en.wikipedia.org/wiki/GBK
        // We mostly implement W3C recommendation: https://www.w3.org/TR/encoding/#gbk-encoder

        // Oldest GB2312 (1981, ~7600 chars) is a subset of CP936
        'gb2312': 'cp936',
        'gb231280': 'cp936',
        'gb23121980': 'cp936',
        'csgb2312': 'cp936',
        'csiso58gb231280': 'cp936',
        'euccn': 'cp936',

        // Microsoft's CP936 is a subset and approximation of GBK.
        'windows936': 'cp936',
        'ms936': 'cp936',
        '936': 'cp936',
        'cp936': {
            type: '_dbcs',
            table: function() { return require$$2 },
        },

        // GBK (~22000 chars) is an extension of CP936 that added user-mapped chars and some other.
        'gbk': {
            type: '_dbcs',
            table: function() { return require$$2.concat(require$$3$1) },
        },
        'xgbk': 'gbk',
        'isoir58': 'gbk',

        // GB18030 is an algorithmic extension of GBK.
        // Main source: https://www.w3.org/TR/encoding/#gbk-encoder
        // http://icu-project.org/docs/papers/gb18030.html
        // http://source.icu-project.org/repos/icu/data/trunk/charset/data/xml/gb-18030-2000.xml
        // http://www.khngai.com/chinese/charmap/tblgbk.php?page=0
        'gb18030': {
            type: '_dbcs',
            table: function() { return require$$2.concat(require$$3$1) },
            gb18030: function() { return require$$4 },
            encodeSkipVals: [0x80],
            encodeAdd: {'€': 0xA2E3},
        },

        'chinese': 'gb18030',


        // == Korean ===============================================================
        // EUC-KR, KS_C_5601 and KS X 1001 are exactly the same.
        'windows949': 'cp949',
        'ms949': 'cp949',
        '949': 'cp949',
        'cp949': {
            type: '_dbcs',
            table: function() { return require$$5 },
        },

        'cseuckr': 'cp949',
        'csksc56011987': 'cp949',
        'euckr': 'cp949',
        'isoir149': 'cp949',
        'korean': 'cp949',
        'ksc56011987': 'cp949',
        'ksc56011989': 'cp949',
        'ksc5601': 'cp949',


        // == Big5/Taiwan/Hong Kong ================================================
        // There are lots of tables for Big5 and cp950. Please see the following links for history:
        // http://moztw.org/docs/big5/  http://www.haible.de/bruno/charsets/conversion-tables/Big5.html
        // Variations, in roughly number of defined chars:
        //  * Windows CP 950: Microsoft variant of Big5. Canonical: http://www.unicode.org/Public/MAPPINGS/VENDORS/MICSFT/WINDOWS/CP950.TXT
        //  * Windows CP 951: Microsoft variant of Big5-HKSCS-2001. Seems to be never public. http://me.abelcheung.org/articles/research/what-is-cp951/
        //  * Big5-2003 (Taiwan standard) almost superset of cp950.
        //  * Unicode-at-on (UAO) / Mozilla 1.8. Falling out of use on the Web. Not supported by other browsers.
        //  * Big5-HKSCS (-2001, -2004, -2008). Hong Kong standard. 
        //    many unicode code points moved from PUA to Supplementary plane (U+2XXXX) over the years.
        //    Plus, it has 4 combining sequences.
        //    Seems that Mozilla refused to support it for 10 yrs. https://bugzilla.mozilla.org/show_bug.cgi?id=162431 https://bugzilla.mozilla.org/show_bug.cgi?id=310299
        //    because big5-hkscs is the only encoding to include astral characters in non-algorithmic way.
        //    Implementations are not consistent within browsers; sometimes labeled as just big5.
        //    MS Internet Explorer switches from big5 to big5-hkscs when a patch applied.
        //    Great discussion & recap of what's going on https://bugzilla.mozilla.org/show_bug.cgi?id=912470#c31
        //    In the encoder, it might make sense to support encoding old PUA mappings to Big5 bytes seq-s.
        //    Official spec: http://www.ogcio.gov.hk/en/business/tech_promotion/ccli/terms/doc/2003cmp_2008.txt
        //                   http://www.ogcio.gov.hk/tc/business/tech_promotion/ccli/terms/doc/hkscs-2008-big5-iso.txt
        // 
        // Current understanding of how to deal with Big5(-HKSCS) is in the Encoding Standard, http://encoding.spec.whatwg.org/#big5-encoder
        // Unicode mapping (http://www.unicode.org/Public/MAPPINGS/OBSOLETE/EASTASIA/OTHER/BIG5.TXT) is said to be wrong.

        'windows950': 'cp950',
        'ms950': 'cp950',
        '950': 'cp950',
        'cp950': {
            type: '_dbcs',
            table: function() { return require$$6 },
        },

        // Big5 has many variations and is an extension of cp950. We use Encoding Standard's as a consensus.
        'big5': 'big5hkscs',
        'big5hkscs': {
            type: '_dbcs',
            table: function() { return require$$6.concat(require$$7) },
            encodeSkipVals: [0xa2cc],
        },

        'cnbig5': 'big5hkscs',
        'csbig5': 'big5hkscs',
        'xxbig5': 'big5hkscs',
    };

    (function (exports) {

    // Update this array if you add/rename/remove files in this directory.
    // We support Browserify by skipping automatic module discovery and requiring modules directly.
    var modules = [
        internal,
        utf16,
        utf7,
        sbcsCodec,
        sbcsData,
        sbcsDataGenerated,
        dbcsCodec,
        dbcsData,
    ];

    // Put all encoding/alias/codec definitions to single object and export it. 
    for (var i = 0; i < modules.length; i++) {
        var module = modules[i];
        for (var enc in module)
            if (Object.prototype.hasOwnProperty.call(module, enc))
                exports[enc] = module[enc];
    }
    }(encodings));

    var Buffer$2 = require$$0__default$2["default"].Buffer,
        Transform = require$$0__default$1["default"].Transform;


    // == Exports ==================================================================
    var streams = function(iconv) {
        
        // Additional Public API.
        iconv.encodeStream = function encodeStream(encoding, options) {
            return new IconvLiteEncoderStream(iconv.getEncoder(encoding, options), options);
        };

        iconv.decodeStream = function decodeStream(encoding, options) {
            return new IconvLiteDecoderStream(iconv.getDecoder(encoding, options), options);
        };

        iconv.supportsStreams = true;


        // Not published yet.
        iconv.IconvLiteEncoderStream = IconvLiteEncoderStream;
        iconv.IconvLiteDecoderStream = IconvLiteDecoderStream;
        iconv._collect = IconvLiteDecoderStream.prototype.collect;
    };


    // == Encoder stream =======================================================
    function IconvLiteEncoderStream(conv, options) {
        this.conv = conv;
        options = options || {};
        options.decodeStrings = false; // We accept only strings, so we don't need to decode them.
        Transform.call(this, options);
    }

    IconvLiteEncoderStream.prototype = Object.create(Transform.prototype, {
        constructor: { value: IconvLiteEncoderStream }
    });

    IconvLiteEncoderStream.prototype._transform = function(chunk, encoding, done) {
        if (typeof chunk != 'string')
            return done(new Error("Iconv encoding stream needs strings as its input."));
        try {
            var res = this.conv.write(chunk);
            if (res && res.length) this.push(res);
            done();
        }
        catch (e) {
            done(e);
        }
    };

    IconvLiteEncoderStream.prototype._flush = function(done) {
        try {
            var res = this.conv.end();
            if (res && res.length) this.push(res);
            done();
        }
        catch (e) {
            done(e);
        }
    };

    IconvLiteEncoderStream.prototype.collect = function(cb) {
        var chunks = [];
        this.on('error', cb);
        this.on('data', function(chunk) { chunks.push(chunk); });
        this.on('end', function() {
            cb(null, Buffer$2.concat(chunks));
        });
        return this;
    };


    // == Decoder stream =======================================================
    function IconvLiteDecoderStream(conv, options) {
        this.conv = conv;
        options = options || {};
        options.encoding = this.encoding = 'utf8'; // We output strings.
        Transform.call(this, options);
    }

    IconvLiteDecoderStream.prototype = Object.create(Transform.prototype, {
        constructor: { value: IconvLiteDecoderStream }
    });

    IconvLiteDecoderStream.prototype._transform = function(chunk, encoding, done) {
        if (!Buffer$2.isBuffer(chunk))
            return done(new Error("Iconv decoding stream needs buffers as its input."));
        try {
            var res = this.conv.write(chunk);
            if (res && res.length) this.push(res, this.encoding);
            done();
        }
        catch (e) {
            done(e);
        }
    };

    IconvLiteDecoderStream.prototype._flush = function(done) {
        try {
            var res = this.conv.end();
            if (res && res.length) this.push(res, this.encoding);                
            done();
        }
        catch (e) {
            done(e);
        }
    };

    IconvLiteDecoderStream.prototype.collect = function(cb) {
        var res = '';
        this.on('error', cb);
        this.on('data', function(chunk) { res += chunk; });
        this.on('end', function() {
            cb(null, res);
        });
        return this;
    };

    var Buffer$1 = require$$0__default$2["default"].Buffer;
    // Note: not polyfilled with safer-buffer on a purpose, as overrides Buffer

    // == Extend Node primitives to use iconv-lite =================================

    var extendNode = function (iconv) {
        var original = undefined; // Place to keep original methods.

        // Node authors rewrote Buffer internals to make it compatible with
        // Uint8Array and we cannot patch key functions since then.
        // Note: this does use older Buffer API on a purpose
        iconv.supportsNodeEncodingsExtension = !(Buffer$1.from || new Buffer$1(0) instanceof Uint8Array);

        iconv.extendNodeEncodings = function extendNodeEncodings() {
            if (original) return;
            original = {};

            if (!iconv.supportsNodeEncodingsExtension) {
                console.error("ACTION NEEDED: require('iconv-lite').extendNodeEncodings() is not supported in your version of Node");
                console.error("See more info at https://github.com/ashtuchkin/iconv-lite/wiki/Node-v4-compatibility");
                return;
            }

            var nodeNativeEncodings = {
                'hex': true, 'utf8': true, 'utf-8': true, 'ascii': true, 'binary': true, 
                'base64': true, 'ucs2': true, 'ucs-2': true, 'utf16le': true, 'utf-16le': true,
            };

            Buffer$1.isNativeEncoding = function(enc) {
                return enc && nodeNativeEncodings[enc.toLowerCase()];
            };

            // -- SlowBuffer -----------------------------------------------------------
            var SlowBuffer = require$$0__default$2["default"].SlowBuffer;

            original.SlowBufferToString = SlowBuffer.prototype.toString;
            SlowBuffer.prototype.toString = function(encoding, start, end) {
                encoding = String(encoding || 'utf8').toLowerCase();

                // Use native conversion when possible
                if (Buffer$1.isNativeEncoding(encoding))
                    return original.SlowBufferToString.call(this, encoding, start, end);

                // Otherwise, use our decoding method.
                if (typeof start == 'undefined') start = 0;
                if (typeof end == 'undefined') end = this.length;
                return iconv.decode(this.slice(start, end), encoding);
            };

            original.SlowBufferWrite = SlowBuffer.prototype.write;
            SlowBuffer.prototype.write = function(string, offset, length, encoding) {
                // Support both (string, offset, length, encoding)
                // and the legacy (string, encoding, offset, length)
                if (isFinite(offset)) {
                    if (!isFinite(length)) {
                        encoding = length;
                        length = undefined;
                    }
                } else {  // legacy
                    var swap = encoding;
                    encoding = offset;
                    offset = length;
                    length = swap;
                }

                offset = +offset || 0;
                var remaining = this.length - offset;
                if (!length) {
                    length = remaining;
                } else {
                    length = +length;
                    if (length > remaining) {
                        length = remaining;
                    }
                }
                encoding = String(encoding || 'utf8').toLowerCase();

                // Use native conversion when possible
                if (Buffer$1.isNativeEncoding(encoding))
                    return original.SlowBufferWrite.call(this, string, offset, length, encoding);

                if (string.length > 0 && (length < 0 || offset < 0))
                    throw new RangeError('attempt to write beyond buffer bounds');

                // Otherwise, use our encoding method.
                var buf = iconv.encode(string, encoding);
                if (buf.length < length) length = buf.length;
                buf.copy(this, offset, 0, length);
                return length;
            };

            // -- Buffer ---------------------------------------------------------------

            original.BufferIsEncoding = Buffer$1.isEncoding;
            Buffer$1.isEncoding = function(encoding) {
                return Buffer$1.isNativeEncoding(encoding) || iconv.encodingExists(encoding);
            };

            original.BufferByteLength = Buffer$1.byteLength;
            Buffer$1.byteLength = SlowBuffer.byteLength = function(str, encoding) {
                encoding = String(encoding || 'utf8').toLowerCase();

                // Use native conversion when possible
                if (Buffer$1.isNativeEncoding(encoding))
                    return original.BufferByteLength.call(this, str, encoding);

                // Slow, I know, but we don't have a better way yet.
                return iconv.encode(str, encoding).length;
            };

            original.BufferToString = Buffer$1.prototype.toString;
            Buffer$1.prototype.toString = function(encoding, start, end) {
                encoding = String(encoding || 'utf8').toLowerCase();

                // Use native conversion when possible
                if (Buffer$1.isNativeEncoding(encoding))
                    return original.BufferToString.call(this, encoding, start, end);

                // Otherwise, use our decoding method.
                if (typeof start == 'undefined') start = 0;
                if (typeof end == 'undefined') end = this.length;
                return iconv.decode(this.slice(start, end), encoding);
            };

            original.BufferWrite = Buffer$1.prototype.write;
            Buffer$1.prototype.write = function(string, offset, length, encoding) {
                var _offset = offset, _length = length, _encoding = encoding;
                // Support both (string, offset, length, encoding)
                // and the legacy (string, encoding, offset, length)
                if (isFinite(offset)) {
                    if (!isFinite(length)) {
                        encoding = length;
                        length = undefined;
                    }
                } else {  // legacy
                    var swap = encoding;
                    encoding = offset;
                    offset = length;
                    length = swap;
                }

                encoding = String(encoding || 'utf8').toLowerCase();

                // Use native conversion when possible
                if (Buffer$1.isNativeEncoding(encoding))
                    return original.BufferWrite.call(this, string, _offset, _length, _encoding);

                offset = +offset || 0;
                var remaining = this.length - offset;
                if (!length) {
                    length = remaining;
                } else {
                    length = +length;
                    if (length > remaining) {
                        length = remaining;
                    }
                }

                if (string.length > 0 && (length < 0 || offset < 0))
                    throw new RangeError('attempt to write beyond buffer bounds');

                // Otherwise, use our encoding method.
                var buf = iconv.encode(string, encoding);
                if (buf.length < length) length = buf.length;
                buf.copy(this, offset, 0, length);
                return length;

                // TODO: Set _charsWritten.
            };


            // -- Readable -------------------------------------------------------------
            if (iconv.supportsStreams) {
                var Readable = require$$0__default$1["default"].Readable;

                original.ReadableSetEncoding = Readable.prototype.setEncoding;
                Readable.prototype.setEncoding = function setEncoding(enc, options) {
                    // Use our own decoder, it has the same interface.
                    // We cannot use original function as it doesn't handle BOM-s.
                    this._readableState.decoder = iconv.getDecoder(enc, options);
                    this._readableState.encoding = enc;
                };

                Readable.prototype.collect = iconv._collect;
            }
        };

        // Remove iconv-lite Node primitive extensions.
        iconv.undoExtendNodeEncodings = function undoExtendNodeEncodings() {
            if (!iconv.supportsNodeEncodingsExtension)
                return;
            if (!original)
                throw new Error("require('iconv-lite').undoExtendNodeEncodings(): Nothing to undo; extendNodeEncodings() is not called.")

            delete Buffer$1.isNativeEncoding;

            var SlowBuffer = require$$0__default$2["default"].SlowBuffer;

            SlowBuffer.prototype.toString = original.SlowBufferToString;
            SlowBuffer.prototype.write = original.SlowBufferWrite;

            Buffer$1.isEncoding = original.BufferIsEncoding;
            Buffer$1.byteLength = original.BufferByteLength;
            Buffer$1.prototype.toString = original.BufferToString;
            Buffer$1.prototype.write = original.BufferWrite;

            if (iconv.supportsStreams) {
                var Readable = require$$0__default$1["default"].Readable;

                Readable.prototype.setEncoding = original.ReadableSetEncoding;
                delete Readable.prototype.collect;
            }

            original = undefined;
        };
    };

    (function (module) {

    // Some environments don't have global Buffer (e.g. React Native).
    // Solution would be installing npm modules "buffer" and "stream" explicitly.
    var Buffer = safer_1.Buffer;

    var bomHandling$1 = bomHandling,
        iconv = module.exports;

    // All codecs and aliases are kept here, keyed by encoding name/alias.
    // They are lazy loaded in `iconv.getCodec` from `encodings/index.js`.
    iconv.encodings = null;

    // Characters emitted in case of error.
    iconv.defaultCharUnicode = '�';
    iconv.defaultCharSingleByte = '?';

    // Public API.
    iconv.encode = function encode(str, encoding, options) {
        str = "" + (str || ""); // Ensure string.

        var encoder = iconv.getEncoder(encoding, options);

        var res = encoder.write(str);
        var trail = encoder.end();
        
        return (trail && trail.length > 0) ? Buffer.concat([res, trail]) : res;
    };

    iconv.decode = function decode(buf, encoding, options) {
        if (typeof buf === 'string') {
            if (!iconv.skipDecodeWarning) {
                console.error('Iconv-lite warning: decode()-ing strings is deprecated. Refer to https://github.com/ashtuchkin/iconv-lite/wiki/Use-Buffers-when-decoding');
                iconv.skipDecodeWarning = true;
            }

            buf = Buffer.from("" + (buf || ""), "binary"); // Ensure buffer.
        }

        var decoder = iconv.getDecoder(encoding, options);

        var res = decoder.write(buf);
        var trail = decoder.end();

        return trail ? (res + trail) : res;
    };

    iconv.encodingExists = function encodingExists(enc) {
        try {
            iconv.getCodec(enc);
            return true;
        } catch (e) {
            return false;
        }
    };

    // Legacy aliases to convert functions
    iconv.toEncoding = iconv.encode;
    iconv.fromEncoding = iconv.decode;

    // Search for a codec in iconv.encodings. Cache codec data in iconv._codecDataCache.
    iconv._codecDataCache = {};
    iconv.getCodec = function getCodec(encoding) {
        if (!iconv.encodings)
            iconv.encodings = encodings; // Lazy load all encoding definitions.
        
        // Canonicalize encoding name: strip all non-alphanumeric chars and appended year.
        var enc = iconv._canonicalizeEncoding(encoding);

        // Traverse iconv.encodings to find actual codec.
        var codecOptions = {};
        while (true) {
            var codec = iconv._codecDataCache[enc];
            if (codec)
                return codec;

            var codecDef = iconv.encodings[enc];

            switch (typeof codecDef) {
                case "string": // Direct alias to other encoding.
                    enc = codecDef;
                    break;

                case "object": // Alias with options. Can be layered.
                    for (var key in codecDef)
                        codecOptions[key] = codecDef[key];

                    if (!codecOptions.encodingName)
                        codecOptions.encodingName = enc;
                    
                    enc = codecDef.type;
                    break;

                case "function": // Codec itself.
                    if (!codecOptions.encodingName)
                        codecOptions.encodingName = enc;

                    // The codec function must load all tables and return object with .encoder and .decoder methods.
                    // It'll be called only once (for each different options object).
                    codec = new codecDef(codecOptions, iconv);

                    iconv._codecDataCache[codecOptions.encodingName] = codec; // Save it to be reused later.
                    return codec;

                default:
                    throw new Error("Encoding not recognized: '" + encoding + "' (searched as: '"+enc+"')");
            }
        }
    };

    iconv._canonicalizeEncoding = function(encoding) {
        // Canonicalize encoding name: strip all non-alphanumeric chars and appended year.
        return (''+encoding).toLowerCase().replace(/:\d{4}$|[^0-9a-z]/g, "");
    };

    iconv.getEncoder = function getEncoder(encoding, options) {
        var codec = iconv.getCodec(encoding),
            encoder = new codec.encoder(options, codec);

        if (codec.bomAware && options && options.addBOM)
            encoder = new bomHandling$1.PrependBOM(encoder, options);

        return encoder;
    };

    iconv.getDecoder = function getDecoder(encoding, options) {
        var codec = iconv.getCodec(encoding),
            decoder = new codec.decoder(options, codec);

        if (codec.bomAware && !(options && options.stripBOM === false))
            decoder = new bomHandling$1.StripBOM(decoder, options);

        return decoder;
    };


    // Load extensions in Node. All of them are omitted in Browserify build via 'browser' field in package.json.
    var nodeVer = typeof process !== 'undefined' && process.versions && process.versions.node;
    if (nodeVer) {

        // Load streaming support in Node v0.10+
        var nodeVerArr = nodeVer.split(".").map(Number);
        if (nodeVerArr[0] > 0 || nodeVerArr[1] >= 10) {
            streams(iconv);
        }

        // Load Node primitive extensions.
        extendNode(iconv);
    }
    }(lib));

    var tmp = {};

    var isWindows$1 = process.platform === 'win32';
    var trailingSlashRe = isWindows$1 ? /[^:]\\$/ : /.\/$/;

    // https://github.com/nodejs/node/blob/3e7a14381497a3b73dda68d05b5130563cdab420/lib/os.js#L25-L43
    var osTmpdir = function () {
    	var path;

    	if (isWindows$1) {
    		path = process.env.TEMP ||
    			process.env.TMP ||
    			(process.env.SystemRoot || process.env.windir) + '\\temp';
    	} else {
    		path = process.env.TMPDIR ||
    			process.env.TMP ||
    			process.env.TEMP ||
    			'/tmp';
    	}

    	if (trailingSlashRe.test(path)) {
    		path = path.slice(0, -1);
    	}

    	return path;
    };

    /*!
     * Tmp
     *
     * Copyright (c) 2011-2017 KARASZI Istvan <github@spam.raszi.hu>
     *
     * MIT Licensed
     */

    /*
     * Module dependencies.
     */
    const fs$3 = require$$0__default$6["default"];
    const path$4 = path__default["default"];
    const crypto = require$$2__default$2["default"];
    const osTmpDir = osTmpdir;
    const _c = process.binding('constants');

    /*
     * The working inner variables.
     */
    const
      /**
       * The temporary directory.
       * @type {string}
       */
      tmpDir = osTmpDir(),

      // the random characters to choose from
      RANDOM_CHARS = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz',

      TEMPLATE_PATTERN = /XXXXXX/,

      DEFAULT_TRIES = 3,

      CREATE_FLAGS = (_c.O_CREAT || _c.fs.O_CREAT) | (_c.O_EXCL || _c.fs.O_EXCL) | (_c.O_RDWR || _c.fs.O_RDWR),

      EBADF = _c.EBADF || _c.os.errno.EBADF,
      ENOENT = _c.ENOENT || _c.os.errno.ENOENT,

      DIR_MODE = 448 /* 0o700 */,
      FILE_MODE = 384 /* 0o600 */,

      // this will hold the objects need to be removed on exit
      _removeObjects = [];

    var
      _gracefulCleanup = false,
      _uncaughtException = false;

    /**
     * Random name generator based on crypto.
     * Adapted from http://blog.tompawlak.org/how-to-generate-random-values-nodejs-javascript
     *
     * @param {number} howMany
     * @returns {string} the generated random name
     * @private
     */
    function _randomChars(howMany) {
      var
        value = [],
        rnd = null;

      // make sure that we do not fail because we ran out of entropy
      try {
        rnd = crypto.randomBytes(howMany);
      } catch (e) {
        rnd = crypto.pseudoRandomBytes(howMany);
      }

      for (var i = 0; i < howMany; i++) {
        value.push(RANDOM_CHARS[rnd[i] % RANDOM_CHARS.length]);
      }

      return value.join('');
    }

    /**
     * Checks whether the `obj` parameter is defined or not.
     *
     * @param {Object} obj
     * @returns {boolean} true if the object is undefined
     * @private
     */
    function _isUndefined(obj) {
      return typeof obj === 'undefined';
    }

    /**
     * Parses the function arguments.
     *
     * This function helps to have optional arguments.
     *
     * @param {(Options|Function)} options
     * @param {Function} callback
     * @returns {Array} parsed arguments
     * @private
     */
    function _parseArguments(options, callback) {
      if (typeof options == 'function') {
        return [callback || {}, options];
      }

      if (_isUndefined(options)) {
        return [{}, callback];
      }

      return [options, callback];
    }

    /**
     * Generates a new temporary name.
     *
     * @param {Object} opts
     * @returns {string} the new random name according to opts
     * @private
     */
    function _generateTmpName(opts) {
      if (opts.name) {
        return path$4.join(opts.dir || tmpDir, opts.name);
      }

      // mkstemps like template
      if (opts.template) {
        return opts.template.replace(TEMPLATE_PATTERN, _randomChars(6));
      }

      // prefix and postfix
      const name = [
        opts.prefix || 'tmp-',
        process.pid,
        _randomChars(12),
        opts.postfix || ''
      ].join('');

      return path$4.join(opts.dir || tmpDir, name);
    }

    /**
     * Gets a temporary file name.
     *
     * @param {(Options|tmpNameCallback)} options options or callback
     * @param {?tmpNameCallback} callback the callback function
     */
    function tmpName(options, callback) {
      var
        args = _parseArguments(options, callback),
        opts = args[0],
        cb = args[1],
        tries = opts.name ? 1 : opts.tries || DEFAULT_TRIES;

      if (isNaN(tries) || tries < 0)
        return cb(new Error('Invalid tries'));

      if (opts.template && !opts.template.match(TEMPLATE_PATTERN))
        return cb(new Error('Invalid template provided'));

      (function _getUniqueName() {
        const name = _generateTmpName(opts);

        // check whether the path exists then retry if needed
        fs$3.stat(name, function (err) {
          if (!err) {
            if (tries-- > 0) return _getUniqueName();

            return cb(new Error('Could not get a unique tmp filename, max tries reached ' + name));
          }

          cb(null, name);
        });
      }());
    }

    /**
     * Synchronous version of tmpName.
     *
     * @param {Object} options
     * @returns {string} the generated random name
     * @throws {Error} if the options are invalid or could not generate a filename
     */
    function tmpNameSync(options) {
      var
        args = _parseArguments(options),
        opts = args[0],
        tries = opts.name ? 1 : opts.tries || DEFAULT_TRIES;

      if (isNaN(tries) || tries < 0)
        throw new Error('Invalid tries');

      if (opts.template && !opts.template.match(TEMPLATE_PATTERN))
        throw new Error('Invalid template provided');

      do {
        const name = _generateTmpName(opts);
        try {
          fs$3.statSync(name);
        } catch (e) {
          return name;
        }
      } while (tries-- > 0);

      throw new Error('Could not get a unique tmp filename, max tries reached');
    }

    /**
     * Creates and opens a temporary file.
     *
     * @param {(Options|fileCallback)} options the config options or the callback function
     * @param {?fileCallback} callback
     */
    function file(options, callback) {
      var
        args = _parseArguments(options, callback),
        opts = args[0],
        cb = args[1];

      opts.postfix = (_isUndefined(opts.postfix)) ? '.tmp' : opts.postfix;

      // gets a temporary filename
      tmpName(opts, function _tmpNameCreated(err, name) {
        if (err) return cb(err);

        // create and open the file
        fs$3.open(name, CREATE_FLAGS, opts.mode || FILE_MODE, function _fileCreated(err, fd) {
          if (err) return cb(err);

          if (opts.discardDescriptor) {
            return fs$3.close(fd, function _discardCallback(err) {
              if (err) {
                // Low probability, and the file exists, so this could be
                // ignored.  If it isn't we certainly need to unlink the
                // file, and if that fails too its error is more
                // important.
                try {
                  fs$3.unlinkSync(name);
                } catch (e) {
                  if (!isENOENT(e)) {
                    err = e;
                  }
                }
                return cb(err);
              }
              cb(null, name, undefined, _prepareTmpFileRemoveCallback(name, -1, opts));
            });
          }
          if (opts.detachDescriptor) {
            return cb(null, name, fd, _prepareTmpFileRemoveCallback(name, -1, opts));
          }
          cb(null, name, fd, _prepareTmpFileRemoveCallback(name, fd, opts));
        });
      });
    }

    /**
     * Synchronous version of file.
     *
     * @param {Options} options
     * @returns {FileSyncObject} object consists of name, fd and removeCallback
     * @throws {Error} if cannot create a file
     */
    function fileSync(options) {
      var
        args = _parseArguments(options),
        opts = args[0];

      opts.postfix = opts.postfix || '.tmp';

      const discardOrDetachDescriptor = opts.discardDescriptor || opts.detachDescriptor;
      const name = tmpNameSync(opts);
      var fd = fs$3.openSync(name, CREATE_FLAGS, opts.mode || FILE_MODE);
      if (opts.discardDescriptor) {
        fs$3.closeSync(fd); 
        fd = undefined;
      }

      return {
        name: name,
        fd: fd,
        removeCallback: _prepareTmpFileRemoveCallback(name, discardOrDetachDescriptor ? -1 : fd, opts)
      };
    }

    /**
     * Removes files and folders in a directory recursively.
     *
     * @param {string} root
     * @private
     */
    function _rmdirRecursiveSync(root) {
      const dirs = [root];

      do {
        var
          dir = dirs.pop(),
          deferred = false,
          files = fs$3.readdirSync(dir);

        for (var i = 0, length = files.length; i < length; i++) {
          var
            file = path$4.join(dir, files[i]),
            stat = fs$3.lstatSync(file); // lstat so we don't recurse into symlinked directories

          if (stat.isDirectory()) {
            if (!deferred) {
              deferred = true;
              dirs.push(dir);
            }
            dirs.push(file);
          } else {
            fs$3.unlinkSync(file);
          }
        }

        if (!deferred) {
          fs$3.rmdirSync(dir);
        }
      } while (dirs.length !== 0);
    }

    /**
     * Creates a temporary directory.
     *
     * @param {(Options|dirCallback)} options the options or the callback function
     * @param {?dirCallback} callback
     */
    function dir(options, callback) {
      var
        args = _parseArguments(options, callback),
        opts = args[0],
        cb = args[1];

      // gets a temporary filename
      tmpName(opts, function _tmpNameCreated(err, name) {
        if (err) return cb(err);

        // create the directory
        fs$3.mkdir(name, opts.mode || DIR_MODE, function _dirCreated(err) {
          if (err) return cb(err);

          cb(null, name, _prepareTmpDirRemoveCallback(name, opts));
        });
      });
    }

    /**
     * Synchronous version of dir.
     *
     * @param {Options} options
     * @returns {DirSyncObject} object consists of name and removeCallback
     * @throws {Error} if it cannot create a directory
     */
    function dirSync(options) {
      var
        args = _parseArguments(options),
        opts = args[0];

      const name = tmpNameSync(opts);
      fs$3.mkdirSync(name, opts.mode || DIR_MODE);

      return {
        name: name,
        removeCallback: _prepareTmpDirRemoveCallback(name, opts)
      };
    }

    /**
     * Prepares the callback for removal of the temporary file.
     *
     * @param {string} name the path of the file
     * @param {number} fd file descriptor
     * @param {Object} opts
     * @returns {fileCallback}
     * @private
     */
    function _prepareTmpFileRemoveCallback(name, fd, opts) {
      const removeCallback = _prepareRemoveCallback(function _removeCallback(fdPath) {
        try {
          if (0 <= fdPath[0]) {
            fs$3.closeSync(fdPath[0]);
          }
        }
        catch (e) {
          // under some node/windows related circumstances, a temporary file
          // may have not be created as expected or the file was already closed
          // by the user, in which case we will simply ignore the error
          if (!isEBADF(e) && !isENOENT(e)) {
            // reraise any unanticipated error
            throw e;
          }
        }
        try {
          fs$3.unlinkSync(fdPath[1]);
        }
        catch (e) {
          if (!isENOENT(e)) {
            // reraise any unanticipated error
            throw e;
          }
        }
      }, [fd, name]);

      if (!opts.keep) {
        _removeObjects.unshift(removeCallback);
      }

      return removeCallback;
    }

    /**
     * Prepares the callback for removal of the temporary directory.
     *
     * @param {string} name
     * @param {Object} opts
     * @returns {Function} the callback
     * @private
     */
    function _prepareTmpDirRemoveCallback(name, opts) {
      const removeFunction = opts.unsafeCleanup ? _rmdirRecursiveSync : fs$3.rmdirSync.bind(fs$3);
      const removeCallback = _prepareRemoveCallback(removeFunction, name);

      if (!opts.keep) {
        _removeObjects.unshift(removeCallback);
      }

      return removeCallback;
    }

    /**
     * Creates a guarded function wrapping the removeFunction call.
     *
     * @param {Function} removeFunction
     * @param {Object} arg
     * @returns {Function}
     * @private
     */
    function _prepareRemoveCallback(removeFunction, arg) {
      var called = false;

      return function _cleanupCallback(next) {
        if (!called) {
          const index = _removeObjects.indexOf(_cleanupCallback);
          if (index >= 0) {
            _removeObjects.splice(index, 1);
          }

          called = true;
          removeFunction(arg);
        }

        if (next) next(null);
      };
    }

    /**
     * The garbage collector.
     *
     * @private
     */
    function _garbageCollector() {
      if (_uncaughtException && !_gracefulCleanup) {
        return;
      }

      // the function being called removes itself from _removeObjects,
      // loop until _removeObjects is empty
      while (_removeObjects.length) {
        try {
          _removeObjects[0].call(null);
        } catch (e) {
          // already removed?
        }
      }
    }

    /**
     * Helper for testing against EBADF to compensate changes made to Node 7.x under Windows.
     */
    function isEBADF(error) {
      return isExpectedError(error, -EBADF, 'EBADF');
    }

    /**
     * Helper for testing against ENOENT to compensate changes made to Node 7.x under Windows.
     */
    function isENOENT(error) {
      return isExpectedError(error, -ENOENT, 'ENOENT');
    }

    /**
     * Helper to determine whether the expected error code matches the actual code and errno,
     * which will differ between the supported node versions.
     *
     * - Node >= 7.0:
     *   error.code {String}
     *   error.errno {String|Number} any numerical value will be negated
     *
     * - Node >= 6.0 < 7.0:
     *   error.code {String}
     *   error.errno {Number} negated
     *
     * - Node >= 4.0 < 6.0: introduces SystemError
     *   error.code {String}
     *   error.errno {Number} negated
     *
     * - Node >= 0.10 < 4.0:
     *   error.code {Number} negated
     *   error.errno n/a
     */
    function isExpectedError(error, code, errno) {
      return error.code == code || error.code == errno;
    }

    /**
     * Sets the graceful cleanup.
     *
     * Also removes the created files and directories when an uncaught exception occurs.
     */
    function setGracefulCleanup() {
      _gracefulCleanup = true;
    }

    const version$2 = process.versions.node.split('.').map(function (value) {
      return parseInt(value, 10);
    });

    if (version$2[0] === 0 && (version$2[1] < 9 || version$2[1] === 9 && version$2[2] < 5)) {
      process.addListener('uncaughtException', function _uncaughtExceptionThrown(err) {
        _uncaughtException = true;
        _garbageCollector();

        throw err;
      });
    }

    process.addListener('exit', function _exit(code) {
      if (code) _uncaughtException = true;
      _garbageCollector();
    });

    /**
     * Configuration options.
     *
     * @typedef {Object} Options
     * @property {?number} tries the number of tries before give up the name generation
     * @property {?string} template the "mkstemp" like filename template
     * @property {?string} name fix name
     * @property {?string} dir the tmp directory to use
     * @property {?string} prefix prefix for the generated name
     * @property {?string} postfix postfix for the generated name
     */

    /**
     * @typedef {Object} FileSyncObject
     * @property {string} name the name of the file
     * @property {string} fd the file descriptor
     * @property {fileCallback} removeCallback the callback function to remove the file
     */

    /**
     * @typedef {Object} DirSyncObject
     * @property {string} name the name of the directory
     * @property {fileCallback} removeCallback the callback function to remove the directory
     */

    /**
     * @callback tmpNameCallback
     * @param {?Error} err the error object if anything goes wrong
     * @param {string} name the temporary file name
     */

    /**
     * @callback fileCallback
     * @param {?Error} err the error object if anything goes wrong
     * @param {string} name the temporary file name
     * @param {number} fd the file descriptor
     * @param {cleanupCallback} fn the cleanup callback function
     */

    /**
     * @callback dirCallback
     * @param {?Error} err the error object if anything goes wrong
     * @param {string} name the temporary file name
     * @param {cleanupCallback} fn the cleanup callback function
     */

    /**
     * Removes the temporary created file or directory.
     *
     * @callback cleanupCallback
     * @param {simpleCallback} [next] function to call after entry was removed
     */

    /**
     * Callback function for function composition.
     * @see {@link https://github.com/raszi/node-tmp/issues/57|raszi/node-tmp#57}
     *
     * @callback simpleCallback
     */

    // exporting all the needed methods
    tmp.tmpdir = tmpDir;

    tmp.dir = dir;
    tmp.dirSync = dirSync;

    tmp.file = file;
    tmp.fileSync = fileSync;

    tmp.tmpName = tmpName;
    tmp.tmpNameSync = tmpNameSync;

    tmp.setGracefulCleanup = setGracefulCleanup;

    var CreateFileError$1 = {};

    /***
     * Node External Editor
     *
     * Kevin Gravier <kevin@mrkmg.com>
     * MIT 2018
     */
    var __extends$3 = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    Object.defineProperty(CreateFileError$1, "__esModule", { value: true });
    var CreateFileError = /** @class */ (function (_super) {
        __extends$3(CreateFileError, _super);
        function CreateFileError(originalError) {
            var _newTarget = this.constructor;
            var _this = _super.call(this, "Failed to create temporary file for editor") || this;
            _this.originalError = originalError;
            var proto = _newTarget.prototype;
            if (Object.setPrototypeOf) {
                Object.setPrototypeOf(_this, proto);
            }
            else {
                _this.__proto__ = _newTarget.prototype;
            }
            return _this;
        }
        return CreateFileError;
    }(Error));
    CreateFileError$1.CreateFileError = CreateFileError;

    var LaunchEditorError$1 = {};

    /***
     * Node External Editor
     *
     * Kevin Gravier <kevin@mrkmg.com>
     * MIT 2018
     */
    var __extends$2 = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    Object.defineProperty(LaunchEditorError$1, "__esModule", { value: true });
    var LaunchEditorError = /** @class */ (function (_super) {
        __extends$2(LaunchEditorError, _super);
        function LaunchEditorError(originalError) {
            var _newTarget = this.constructor;
            var _this = _super.call(this, "Failed launch editor") || this;
            _this.originalError = originalError;
            var proto = _newTarget.prototype;
            if (Object.setPrototypeOf) {
                Object.setPrototypeOf(_this, proto);
            }
            else {
                _this.__proto__ = _newTarget.prototype;
            }
            return _this;
        }
        return LaunchEditorError;
    }(Error));
    LaunchEditorError$1.LaunchEditorError = LaunchEditorError;

    var ReadFileError$1 = {};

    /***
     * Node External Editor
     *
     * Kevin Gravier <kevin@mrkmg.com>
     * MIT 2018
     */
    var __extends$1 = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    Object.defineProperty(ReadFileError$1, "__esModule", { value: true });
    var ReadFileError = /** @class */ (function (_super) {
        __extends$1(ReadFileError, _super);
        function ReadFileError(originalError) {
            var _newTarget = this.constructor;
            var _this = _super.call(this, "Failed to read temporary file") || this;
            _this.originalError = originalError;
            var proto = _newTarget.prototype;
            if (Object.setPrototypeOf) {
                Object.setPrototypeOf(_this, proto);
            }
            else {
                _this.__proto__ = _newTarget.prototype;
            }
            return _this;
        }
        return ReadFileError;
    }(Error));
    ReadFileError$1.ReadFileError = ReadFileError;

    var RemoveFileError$1 = {};

    /***
     * Node External Editor
     *
     * Kevin Gravier <kevin@mrkmg.com>
     * MIT 2018
     */
    var __extends = (commonjsGlobal && commonjsGlobal.__extends) || (function () {
        var extendStatics = function (d, b) {
            extendStatics = Object.setPrototypeOf ||
                ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
            return extendStatics(d, b);
        };
        return function (d, b) {
            extendStatics(d, b);
            function __() { this.constructor = d; }
            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
        };
    })();
    Object.defineProperty(RemoveFileError$1, "__esModule", { value: true });
    var RemoveFileError = /** @class */ (function (_super) {
        __extends(RemoveFileError, _super);
        function RemoveFileError(originalError) {
            var _newTarget = this.constructor;
            var _this = _super.call(this, "Failed to cleanup temporary file") || this;
            _this.originalError = originalError;
            var proto = _newTarget.prototype;
            if (Object.setPrototypeOf) {
                Object.setPrototypeOf(_this, proto);
            }
            else {
                _this.__proto__ = _newTarget.prototype;
            }
            return _this;
        }
        return RemoveFileError;
    }(Error));
    RemoveFileError$1.RemoveFileError = RemoveFileError;

    /***
     * Node External Editor
     *
     * Kevin Gravier <kevin@mrkmg.com>
     * MIT 2019
     */
    Object.defineProperty(main$1, "__esModule", { value: true });
    var chardet_1 = chardet;
    var child_process_1 = require$$1__default$1["default"];
    var fs_1 = require$$0__default$6["default"];
    var iconv_lite_1 = lib.exports;
    var tmp_1 = tmp;
    var CreateFileError_1 = CreateFileError$1;
    main$1.CreateFileError = CreateFileError_1.CreateFileError;
    var LaunchEditorError_1 = LaunchEditorError$1;
    main$1.LaunchEditorError = LaunchEditorError_1.LaunchEditorError;
    var ReadFileError_1 = ReadFileError$1;
    main$1.ReadFileError = ReadFileError_1.ReadFileError;
    var RemoveFileError_1 = RemoveFileError$1;
    main$1.RemoveFileError = RemoveFileError_1.RemoveFileError;
    function edit(text, fileOptions) {
        if (text === void 0) { text = ""; }
        var editor = new ExternalEditor(text, fileOptions);
        editor.run();
        editor.cleanup();
        return editor.text;
    }
    main$1.edit = edit;
    function editAsync$1(text, callback, fileOptions) {
        if (text === void 0) { text = ""; }
        var editor = new ExternalEditor(text, fileOptions);
        editor.runAsync(function (err, result) {
            if (err) {
                setImmediate(callback, err, null);
            }
            else {
                try {
                    editor.cleanup();
                    setImmediate(callback, null, result);
                }
                catch (cleanupError) {
                    setImmediate(callback, cleanupError, null);
                }
            }
        });
    }
    main$1.editAsync = editAsync$1;
    var ExternalEditor = /** @class */ (function () {
        function ExternalEditor(text, fileOptions) {
            if (text === void 0) { text = ""; }
            this.text = "";
            this.fileOptions = {};
            this.text = text;
            if (fileOptions) {
                this.fileOptions = fileOptions;
            }
            this.determineEditor();
            this.createTemporaryFile();
        }
        ExternalEditor.splitStringBySpace = function (str) {
            var pieces = [];
            var currentString = "";
            for (var strIndex = 0; strIndex < str.length; strIndex++) {
                var currentLetter = str[strIndex];
                if (strIndex > 0 && currentLetter === " " && str[strIndex - 1] !== "\\" && currentString.length > 0) {
                    pieces.push(currentString);
                    currentString = "";
                }
                else {
                    currentString += currentLetter;
                }
            }
            if (currentString.length > 0) {
                pieces.push(currentString);
            }
            return pieces;
        };
        Object.defineProperty(ExternalEditor.prototype, "temp_file", {
            get: function () {
                console.log("DEPRECATED: temp_file. Use tempFile moving forward.");
                return this.tempFile;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ExternalEditor.prototype, "last_exit_status", {
            get: function () {
                console.log("DEPRECATED: last_exit_status. Use lastExitStatus moving forward.");
                return this.lastExitStatus;
            },
            enumerable: true,
            configurable: true
        });
        ExternalEditor.prototype.run = function () {
            this.launchEditor();
            this.readTemporaryFile();
            return this.text;
        };
        ExternalEditor.prototype.runAsync = function (callback) {
            var _this = this;
            try {
                this.launchEditorAsync(function () {
                    try {
                        _this.readTemporaryFile();
                        setImmediate(callback, null, _this.text);
                    }
                    catch (readError) {
                        setImmediate(callback, readError, null);
                    }
                });
            }
            catch (launchError) {
                setImmediate(callback, launchError, null);
            }
        };
        ExternalEditor.prototype.cleanup = function () {
            this.removeTemporaryFile();
        };
        ExternalEditor.prototype.determineEditor = function () {
            var editor = process.env.VISUAL ? process.env.VISUAL :
                process.env.EDITOR ? process.env.EDITOR :
                    /^win/.test(process.platform) ? "notepad" :
                        "vim";
            var editorOpts = ExternalEditor.splitStringBySpace(editor).map(function (piece) { return piece.replace("\\ ", " "); });
            var bin = editorOpts.shift();
            this.editor = { args: editorOpts, bin: bin };
        };
        ExternalEditor.prototype.createTemporaryFile = function () {
            try {
                this.tempFile = tmp_1.tmpNameSync(this.fileOptions);
                var opt = { encoding: "utf8" };
                if (this.fileOptions.hasOwnProperty("mode")) {
                    opt.mode = this.fileOptions.mode;
                }
                fs_1.writeFileSync(this.tempFile, this.text, opt);
            }
            catch (createFileError) {
                throw new CreateFileError_1.CreateFileError(createFileError);
            }
        };
        ExternalEditor.prototype.readTemporaryFile = function () {
            try {
                var tempFileBuffer = fs_1.readFileSync(this.tempFile);
                if (tempFileBuffer.length === 0) {
                    this.text = "";
                }
                else {
                    var encoding = chardet_1.detect(tempFileBuffer).toString();
                    if (!iconv_lite_1.encodingExists(encoding)) {
                        // Probably a bad idea, but will at least prevent crashing
                        encoding = "utf8";
                    }
                    this.text = iconv_lite_1.decode(tempFileBuffer, encoding);
                }
            }
            catch (readFileError) {
                throw new ReadFileError_1.ReadFileError(readFileError);
            }
        };
        ExternalEditor.prototype.removeTemporaryFile = function () {
            try {
                fs_1.unlinkSync(this.tempFile);
            }
            catch (removeFileError) {
                throw new RemoveFileError_1.RemoveFileError(removeFileError);
            }
        };
        ExternalEditor.prototype.launchEditor = function () {
            try {
                var editorProcess = child_process_1.spawnSync(this.editor.bin, this.editor.args.concat([this.tempFile]), { stdio: "inherit" });
                this.lastExitStatus = editorProcess.status;
            }
            catch (launchError) {
                throw new LaunchEditorError_1.LaunchEditorError(launchError);
            }
        };
        ExternalEditor.prototype.launchEditorAsync = function (callback) {
            var _this = this;
            try {
                var editorProcess = child_process_1.spawn(this.editor.bin, this.editor.args.concat([this.tempFile]), { stdio: "inherit" });
                editorProcess.on("exit", function (code) {
                    _this.lastExitStatus = code;
                    setImmediate(callback);
                });
            }
            catch (launchError) {
                throw new LaunchEditorError_1.LaunchEditorError(launchError);
            }
        };
        return ExternalEditor;
    }());
    main$1.ExternalEditor = ExternalEditor;

    /**
     * `editor` type prompt
     */

    const chalk = source;
    const { editAsync } = main$1;
    const Base = base;
    const observe = events;
    const { Subject } = require$$4$1;

    class EditorPrompt extends Base {
      /**
       * Start the Inquiry session
       * @param  {Function} cb      Callback when prompt is done
       * @return {this}
       */

      _run(cb) {
        this.done = cb;

        this.editorResult = new Subject();

        // Open Editor on "line" (Enter Key)
        const events = observe(this.rl);
        this.lineSubscription = events.line.subscribe(this.startExternalEditor.bind(this));

        // Trigger Validation when editor closes
        const validation = this.handleSubmitEvents(this.editorResult);
        validation.success.forEach(this.onEnd.bind(this));
        validation.error.forEach(this.onError.bind(this));

        // Prevents default from being printed on screen (can look weird with multiple lines)
        this.currentText = this.opt.default;
        this.opt.default = null;

        // Init
        this.render();

        return this;
      }

      /**
       * Render the prompt to screen
       * @return {EditorPrompt} self
       */

      render(error) {
        let bottomContent = '';
        let message = this.getQuestion();

        if (this.status === 'answered') {
          message += chalk.dim('Received');
        } else {
          message += chalk.dim('Press <enter> to launch your preferred editor.');
        }

        if (error) {
          bottomContent = chalk.red('>> ') + error;
        }

        this.screen.render(message, bottomContent);
      }

      /**
       * Launch $EDITOR on user press enter
       */

      startExternalEditor() {
        // Pause Readline to prevent stdin and stdout from being modified while the editor is showing
        this.rl.pause();
        editAsync(this.currentText, this.endExternalEditor.bind(this));
      }

      endExternalEditor(error, result) {
        this.rl.resume();
        if (error) {
          this.editorResult.error(error);
        } else {
          this.editorResult.next(result);
        }
      }

      onEnd(state) {
        this.editorResult.unsubscribe();
        this.lineSubscription.unsubscribe();
        this.answer = state.value;
        this.status = 'answered';
        // Re-render prompt
        this.render();
        this.screen.done();
        this.done(this.answer);
      }

      onError(state) {
        this.render(state.isValid);
      }
    }

    var editor = EditorPrompt;

    (function (module) {
    /**
     * Inquirer.js
     * A collection of common interactive command line user interfaces.
     */

    const inquirer = module.exports;

    /**
     * Client interfaces
     */

    inquirer.prompts = {};

    inquirer.Separator = separator;

    inquirer.ui = {
      BottomBar: bottomBar,
      Prompt: prompt,
    };

    /**
     * Create a new self-contained prompt module.
     */
    inquirer.createPromptModule = function (opt) {
      const promptModule = function (questions, answers) {
        let ui;
        try {
          ui = new inquirer.ui.Prompt(promptModule.prompts, opt);
        } catch (error) {
          return Promise.reject(error);
        }
        const promise = ui.run(questions, answers);

        // Monkey patch the UI on the promise object so
        // that it remains publicly accessible.
        promise.ui = ui;

        return promise;
      };

      promptModule.prompts = {};

      /**
       * Register a prompt type
       * @param {String} name     Prompt type name
       * @param {Function} prompt Prompt constructor
       * @return {inquirer}
       */

      promptModule.registerPrompt = function (name, prompt) {
        promptModule.prompts[name] = prompt;
        return this;
      };

      /**
       * Register the defaults provider prompts
       */

      promptModule.restoreDefaultPrompts = function () {
        this.registerPrompt('list', list);
        this.registerPrompt('input', input);
        this.registerPrompt('number', number);
        this.registerPrompt('confirm', confirm);
        this.registerPrompt('rawlist', rawlist);
        this.registerPrompt('expand', expand$2);
        this.registerPrompt('checkbox', checkbox);
        this.registerPrompt('password', password);
        this.registerPrompt('editor', editor);
      };

      promptModule.restoreDefaultPrompts();

      return promptModule;
    };

    /**
     * Public CLI helper interface
     * @param  {Array|Object|Rx.Observable} questions - Questions settings array
     * @param  {Function} cb - Callback being passed the user answers
     * @return {inquirer.ui.Prompt}
     */

    inquirer.prompt = inquirer.createPromptModule();

    // Expose helper functions on the top level for easiest usage by common users
    inquirer.registerPrompt = function (name, prompt) {
      inquirer.prompt.registerPrompt(name, prompt);
    };

    inquirer.restoreDefaultPrompts = function () {
      inquirer.prompt.restoreDefaultPrompts();
    };
    }(inquirer$1));

    var inquirer = inquirer$1.exports;

    var old$1 = {};

    // Copyright Joyent, Inc. and other Node contributors.
    //
    // Permission is hereby granted, free of charge, to any person obtaining a
    // copy of this software and associated documentation files (the
    // "Software"), to deal in the Software without restriction, including
    // without limitation the rights to use, copy, modify, merge, publish,
    // distribute, sublicense, and/or sell copies of the Software, and to permit
    // persons to whom the Software is furnished to do so, subject to the
    // following conditions:
    //
    // The above copyright notice and this permission notice shall be included
    // in all copies or substantial portions of the Software.
    //
    // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
    // OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    // MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
    // NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
    // DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
    // OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
    // USE OR OTHER DEALINGS IN THE SOFTWARE.

    var pathModule = path__default["default"];
    var isWindows = process.platform === 'win32';
    var fs$2 = require$$0__default$6["default"];

    // JavaScript implementation of realpath, ported from node pre-v6

    var DEBUG = process.env.NODE_DEBUG && /fs/.test(process.env.NODE_DEBUG);

    function rethrow() {
      // Only enable in debug mode. A backtrace uses ~1000 bytes of heap space and
      // is fairly slow to generate.
      var callback;
      if (DEBUG) {
        var backtrace = new Error;
        callback = debugCallback;
      } else
        callback = missingCallback;

      return callback;

      function debugCallback(err) {
        if (err) {
          backtrace.message = err.message;
          err = backtrace;
          missingCallback(err);
        }
      }

      function missingCallback(err) {
        if (err) {
          if (process.throwDeprecation)
            throw err;  // Forgot a callback but don't know where? Use NODE_DEBUG=fs
          else if (!process.noDeprecation) {
            var msg = 'fs: missing callback ' + (err.stack || err.message);
            if (process.traceDeprecation)
              console.trace(msg);
            else
              console.error(msg);
          }
        }
      }
    }

    function maybeCallback(cb) {
      return typeof cb === 'function' ? cb : rethrow();
    }

    pathModule.normalize;

    // Regexp that finds the next partion of a (partial) path
    // result is [base_with_slash, base], e.g. ['somedir/', 'somedir']
    if (isWindows) {
      var nextPartRe = /(.*?)(?:[\/\\]+|$)/g;
    } else {
      var nextPartRe = /(.*?)(?:[\/]+|$)/g;
    }

    // Regex to find the device root, including trailing slash. E.g. 'c:\\'.
    if (isWindows) {
      var splitRootRe = /^(?:[a-zA-Z]:|[\\\/]{2}[^\\\/]+[\\\/][^\\\/]+)?[\\\/]*/;
    } else {
      var splitRootRe = /^[\/]*/;
    }

    old$1.realpathSync = function realpathSync(p, cache) {
      // make p is absolute
      p = pathModule.resolve(p);

      if (cache && Object.prototype.hasOwnProperty.call(cache, p)) {
        return cache[p];
      }

      var original = p,
          seenLinks = {},
          knownHard = {};

      // current character position in p
      var pos;
      // the partial path so far, including a trailing slash if any
      var current;
      // the partial path without a trailing slash (except when pointing at a root)
      var base;
      // the partial path scanned in the previous round, with slash
      var previous;

      start();

      function start() {
        // Skip over roots
        var m = splitRootRe.exec(p);
        pos = m[0].length;
        current = m[0];
        base = m[0];
        previous = '';

        // On windows, check that the root exists. On unix there is no need.
        if (isWindows && !knownHard[base]) {
          fs$2.lstatSync(base);
          knownHard[base] = true;
        }
      }

      // walk down the path, swapping out linked pathparts for their real
      // values
      // NB: p.length changes.
      while (pos < p.length) {
        // find the next part
        nextPartRe.lastIndex = pos;
        var result = nextPartRe.exec(p);
        previous = current;
        current += result[0];
        base = previous + result[1];
        pos = nextPartRe.lastIndex;

        // continue if not a symlink
        if (knownHard[base] || (cache && cache[base] === base)) {
          continue;
        }

        var resolvedLink;
        if (cache && Object.prototype.hasOwnProperty.call(cache, base)) {
          // some known symbolic link.  no need to stat again.
          resolvedLink = cache[base];
        } else {
          var stat = fs$2.lstatSync(base);
          if (!stat.isSymbolicLink()) {
            knownHard[base] = true;
            if (cache) cache[base] = base;
            continue;
          }

          // read the link if it wasn't read before
          // dev/ino always return 0 on windows, so skip the check.
          var linkTarget = null;
          if (!isWindows) {
            var id = stat.dev.toString(32) + ':' + stat.ino.toString(32);
            if (seenLinks.hasOwnProperty(id)) {
              linkTarget = seenLinks[id];
            }
          }
          if (linkTarget === null) {
            fs$2.statSync(base);
            linkTarget = fs$2.readlinkSync(base);
          }
          resolvedLink = pathModule.resolve(previous, linkTarget);
          // track this, if given a cache.
          if (cache) cache[base] = resolvedLink;
          if (!isWindows) seenLinks[id] = linkTarget;
        }

        // resolve the link, then start over
        p = pathModule.resolve(resolvedLink, p.slice(pos));
        start();
      }

      if (cache) cache[original] = p;

      return p;
    };


    old$1.realpath = function realpath(p, cache, cb) {
      if (typeof cb !== 'function') {
        cb = maybeCallback(cache);
        cache = null;
      }

      // make p is absolute
      p = pathModule.resolve(p);

      if (cache && Object.prototype.hasOwnProperty.call(cache, p)) {
        return process.nextTick(cb.bind(null, null, cache[p]));
      }

      var original = p,
          seenLinks = {},
          knownHard = {};

      // current character position in p
      var pos;
      // the partial path so far, including a trailing slash if any
      var current;
      // the partial path without a trailing slash (except when pointing at a root)
      var base;
      // the partial path scanned in the previous round, with slash
      var previous;

      start();

      function start() {
        // Skip over roots
        var m = splitRootRe.exec(p);
        pos = m[0].length;
        current = m[0];
        base = m[0];
        previous = '';

        // On windows, check that the root exists. On unix there is no need.
        if (isWindows && !knownHard[base]) {
          fs$2.lstat(base, function(err) {
            if (err) return cb(err);
            knownHard[base] = true;
            LOOP();
          });
        } else {
          process.nextTick(LOOP);
        }
      }

      // walk down the path, swapping out linked pathparts for their real
      // values
      function LOOP() {
        // stop if scanned past end of path
        if (pos >= p.length) {
          if (cache) cache[original] = p;
          return cb(null, p);
        }

        // find the next part
        nextPartRe.lastIndex = pos;
        var result = nextPartRe.exec(p);
        previous = current;
        current += result[0];
        base = previous + result[1];
        pos = nextPartRe.lastIndex;

        // continue if not a symlink
        if (knownHard[base] || (cache && cache[base] === base)) {
          return process.nextTick(LOOP);
        }

        if (cache && Object.prototype.hasOwnProperty.call(cache, base)) {
          // known symbolic link.  no need to stat again.
          return gotResolvedLink(cache[base]);
        }

        return fs$2.lstat(base, gotStat);
      }

      function gotStat(err, stat) {
        if (err) return cb(err);

        // if not a symlink, skip to the next path part
        if (!stat.isSymbolicLink()) {
          knownHard[base] = true;
          if (cache) cache[base] = base;
          return process.nextTick(LOOP);
        }

        // stat & read the link if not read before
        // call gotTarget as soon as the link target is known
        // dev/ino always return 0 on windows, so skip the check.
        if (!isWindows) {
          var id = stat.dev.toString(32) + ':' + stat.ino.toString(32);
          if (seenLinks.hasOwnProperty(id)) {
            return gotTarget(null, seenLinks[id], base);
          }
        }
        fs$2.stat(base, function(err) {
          if (err) return cb(err);

          fs$2.readlink(base, function(err, target) {
            if (!isWindows) seenLinks[id] = target;
            gotTarget(err, target);
          });
        });
      }

      function gotTarget(err, target, base) {
        if (err) return cb(err);

        var resolvedLink = pathModule.resolve(previous, target);
        if (cache) cache[base] = resolvedLink;
        gotResolvedLink(resolvedLink);
      }

      function gotResolvedLink(resolvedLink) {
        // resolve the link, then start over
        p = pathModule.resolve(resolvedLink, p.slice(pos));
        start();
      }
    };

    var fs_realpath = realpath;
    realpath.realpath = realpath;
    realpath.sync = realpathSync;
    realpath.realpathSync = realpathSync;
    realpath.monkeypatch = monkeypatch;
    realpath.unmonkeypatch = unmonkeypatch;

    var fs$1 = require$$0__default$6["default"];
    var origRealpath = fs$1.realpath;
    var origRealpathSync = fs$1.realpathSync;

    var version$1 = process.version;
    var ok = /^v[0-5]\./.test(version$1);
    var old = old$1;

    function newError (er) {
      return er && er.syscall === 'realpath' && (
        er.code === 'ELOOP' ||
        er.code === 'ENOMEM' ||
        er.code === 'ENAMETOOLONG'
      )
    }

    function realpath (p, cache, cb) {
      if (ok) {
        return origRealpath(p, cache, cb)
      }

      if (typeof cache === 'function') {
        cb = cache;
        cache = null;
      }
      origRealpath(p, cache, function (er, result) {
        if (newError(er)) {
          old.realpath(p, cache, cb);
        } else {
          cb(er, result);
        }
      });
    }

    function realpathSync (p, cache) {
      if (ok) {
        return origRealpathSync(p, cache)
      }

      try {
        return origRealpathSync(p, cache)
      } catch (er) {
        if (newError(er)) {
          return old.realpathSync(p, cache)
        } else {
          throw er
        }
      }
    }

    function monkeypatch () {
      fs$1.realpath = realpath;
      fs$1.realpathSync = realpathSync;
    }

    function unmonkeypatch () {
      fs$1.realpath = origRealpath;
      fs$1.realpathSync = origRealpathSync;
    }

    var concatMap$1 = function (xs, fn) {
        var res = [];
        for (var i = 0; i < xs.length; i++) {
            var x = fn(xs[i], i);
            if (isArray(x)) res.push.apply(res, x);
            else res.push(x);
        }
        return res;
    };

    var isArray = Array.isArray || function (xs) {
        return Object.prototype.toString.call(xs) === '[object Array]';
    };

    var balancedMatch = balanced$1;
    function balanced$1(a, b, str) {
      if (a instanceof RegExp) a = maybeMatch(a, str);
      if (b instanceof RegExp) b = maybeMatch(b, str);

      var r = range(a, b, str);

      return r && {
        start: r[0],
        end: r[1],
        pre: str.slice(0, r[0]),
        body: str.slice(r[0] + a.length, r[1]),
        post: str.slice(r[1] + b.length)
      };
    }

    function maybeMatch(reg, str) {
      var m = str.match(reg);
      return m ? m[0] : null;
    }

    balanced$1.range = range;
    function range(a, b, str) {
      var begs, beg, left, right, result;
      var ai = str.indexOf(a);
      var bi = str.indexOf(b, ai + 1);
      var i = ai;

      if (ai >= 0 && bi > 0) {
        if(a===b) {
          return [ai, bi];
        }
        begs = [];
        left = str.length;

        while (i >= 0 && !result) {
          if (i == ai) {
            begs.push(i);
            ai = str.indexOf(a, i + 1);
          } else if (begs.length == 1) {
            result = [ begs.pop(), bi ];
          } else {
            beg = begs.pop();
            if (beg < left) {
              left = beg;
              right = bi;
            }

            bi = str.indexOf(b, i + 1);
          }

          i = ai < bi && ai >= 0 ? ai : bi;
        }

        if (begs.length) {
          result = [ left, right ];
        }
      }

      return result;
    }

    var concatMap = concatMap$1;
    var balanced = balancedMatch;

    var braceExpansion = expandTop;

    var escSlash = '\0SLASH'+Math.random()+'\0';
    var escOpen = '\0OPEN'+Math.random()+'\0';
    var escClose = '\0CLOSE'+Math.random()+'\0';
    var escComma = '\0COMMA'+Math.random()+'\0';
    var escPeriod = '\0PERIOD'+Math.random()+'\0';

    function numeric(str) {
      return parseInt(str, 10) == str
        ? parseInt(str, 10)
        : str.charCodeAt(0);
    }

    function escapeBraces(str) {
      return str.split('\\\\').join(escSlash)
                .split('\\{').join(escOpen)
                .split('\\}').join(escClose)
                .split('\\,').join(escComma)
                .split('\\.').join(escPeriod);
    }

    function unescapeBraces(str) {
      return str.split(escSlash).join('\\')
                .split(escOpen).join('{')
                .split(escClose).join('}')
                .split(escComma).join(',')
                .split(escPeriod).join('.');
    }


    // Basically just str.split(","), but handling cases
    // where we have nested braced sections, which should be
    // treated as individual members, like {a,{b,c},d}
    function parseCommaParts(str) {
      if (!str)
        return [''];

      var parts = [];
      var m = balanced('{', '}', str);

      if (!m)
        return str.split(',');

      var pre = m.pre;
      var body = m.body;
      var post = m.post;
      var p = pre.split(',');

      p[p.length-1] += '{' + body + '}';
      var postParts = parseCommaParts(post);
      if (post.length) {
        p[p.length-1] += postParts.shift();
        p.push.apply(p, postParts);
      }

      parts.push.apply(parts, p);

      return parts;
    }

    function expandTop(str) {
      if (!str)
        return [];

      // I don't know why Bash 4.3 does this, but it does.
      // Anything starting with {} will have the first two bytes preserved
      // but *only* at the top level, so {},a}b will not expand to anything,
      // but a{},b}c will be expanded to [a}c,abc].
      // One could argue that this is a bug in Bash, but since the goal of
      // this module is to match Bash's rules, we escape a leading {}
      if (str.substr(0, 2) === '{}') {
        str = '\\{\\}' + str.substr(2);
      }

      return expand$1(escapeBraces(str), true).map(unescapeBraces);
    }

    function embrace(str) {
      return '{' + str + '}';
    }
    function isPadded(el) {
      return /^-?0\d/.test(el);
    }

    function lte(i, y) {
      return i <= y;
    }
    function gte(i, y) {
      return i >= y;
    }

    function expand$1(str, isTop) {
      var expansions = [];

      var m = balanced('{', '}', str);
      if (!m || /\$$/.test(m.pre)) return [str];

      var isNumericSequence = /^-?\d+\.\.-?\d+(?:\.\.-?\d+)?$/.test(m.body);
      var isAlphaSequence = /^[a-zA-Z]\.\.[a-zA-Z](?:\.\.-?\d+)?$/.test(m.body);
      var isSequence = isNumericSequence || isAlphaSequence;
      var isOptions = m.body.indexOf(',') >= 0;
      if (!isSequence && !isOptions) {
        // {a},b}
        if (m.post.match(/,.*\}/)) {
          str = m.pre + '{' + m.body + escClose + m.post;
          return expand$1(str);
        }
        return [str];
      }

      var n;
      if (isSequence) {
        n = m.body.split(/\.\./);
      } else {
        n = parseCommaParts(m.body);
        if (n.length === 1) {
          // x{{a,b}}y ==> x{a}y x{b}y
          n = expand$1(n[0], false).map(embrace);
          if (n.length === 1) {
            var post = m.post.length
              ? expand$1(m.post, false)
              : [''];
            return post.map(function(p) {
              return m.pre + n[0] + p;
            });
          }
        }
      }

      // at this point, n is the parts, and we know it's not a comma set
      // with a single entry.

      // no need to expand pre, since it is guaranteed to be free of brace-sets
      var pre = m.pre;
      var post = m.post.length
        ? expand$1(m.post, false)
        : [''];

      var N;

      if (isSequence) {
        var x = numeric(n[0]);
        var y = numeric(n[1]);
        var width = Math.max(n[0].length, n[1].length);
        var incr = n.length == 3
          ? Math.abs(numeric(n[2]))
          : 1;
        var test = lte;
        var reverse = y < x;
        if (reverse) {
          incr *= -1;
          test = gte;
        }
        var pad = n.some(isPadded);

        N = [];

        for (var i = x; test(i, y); i += incr) {
          var c;
          if (isAlphaSequence) {
            c = String.fromCharCode(i);
            if (c === '\\')
              c = '';
          } else {
            c = String(i);
            if (pad) {
              var need = width - c.length;
              if (need > 0) {
                var z = new Array(need + 1).join('0');
                if (i < 0)
                  c = '-' + z + c.slice(1);
                else
                  c = z + c;
              }
            }
          }
          N.push(c);
        }
      } else {
        N = concatMap(n, function(el) { return expand$1(el, false) });
      }

      for (var j = 0; j < N.length; j++) {
        for (var k = 0; k < post.length; k++) {
          var expansion = pre + N[j] + post[k];
          if (!isTop || isSequence || expansion)
            expansions.push(expansion);
        }
      }

      return expansions;
    }

    var minimatch_1 = minimatch$3;
    minimatch$3.Minimatch = Minimatch$1;

    var path$3 = { sep: '/' };
    try {
      path$3 = require('path');
    } catch (er) {}

    var GLOBSTAR = minimatch$3.GLOBSTAR = Minimatch$1.GLOBSTAR = {};
    var expand = braceExpansion;

    var plTypes = {
      '!': { open: '(?:(?!(?:', close: '))[^/]*?)'},
      '?': { open: '(?:', close: ')?' },
      '+': { open: '(?:', close: ')+' },
      '*': { open: '(?:', close: ')*' },
      '@': { open: '(?:', close: ')' }
    };

    // any single thing other than /
    // don't need to escape / when using new RegExp()
    var qmark = '[^/]';

    // * => any number of characters
    var star = qmark + '*?';

    // ** when dots are allowed.  Anything goes, except .. and .
    // not (^ or / followed by one or two dots followed by $ or /),
    // followed by anything, any number of times.
    var twoStarDot = '(?:(?!(?:\\\/|^)(?:\\.{1,2})($|\\\/)).)*?';

    // not a ^ or / followed by a dot,
    // followed by anything, any number of times.
    var twoStarNoDot = '(?:(?!(?:\\\/|^)\\.).)*?';

    // characters that need to be escaped in RegExp.
    var reSpecials = charSet('().*{}+?[]^$\\!');

    // "abc" -> { a:true, b:true, c:true }
    function charSet (s) {
      return s.split('').reduce(function (set, c) {
        set[c] = true;
        return set
      }, {})
    }

    // normalizes slashes.
    var slashSplit = /\/+/;

    minimatch$3.filter = filter;
    function filter (pattern, options) {
      options = options || {};
      return function (p, i, list) {
        return minimatch$3(p, pattern, options)
      }
    }

    function ext (a, b) {
      a = a || {};
      b = b || {};
      var t = {};
      Object.keys(b).forEach(function (k) {
        t[k] = b[k];
      });
      Object.keys(a).forEach(function (k) {
        t[k] = a[k];
      });
      return t
    }

    minimatch$3.defaults = function (def) {
      if (!def || !Object.keys(def).length) return minimatch$3

      var orig = minimatch$3;

      var m = function minimatch (p, pattern, options) {
        return orig.minimatch(p, pattern, ext(def, options))
      };

      m.Minimatch = function Minimatch (pattern, options) {
        return new orig.Minimatch(pattern, ext(def, options))
      };

      return m
    };

    Minimatch$1.defaults = function (def) {
      if (!def || !Object.keys(def).length) return Minimatch$1
      return minimatch$3.defaults(def).Minimatch
    };

    function minimatch$3 (p, pattern, options) {
      if (typeof pattern !== 'string') {
        throw new TypeError('glob pattern string required')
      }

      if (!options) options = {};

      // shortcut: comments match nothing.
      if (!options.nocomment && pattern.charAt(0) === '#') {
        return false
      }

      // "" only matches ""
      if (pattern.trim() === '') return p === ''

      return new Minimatch$1(pattern, options).match(p)
    }

    function Minimatch$1 (pattern, options) {
      if (!(this instanceof Minimatch$1)) {
        return new Minimatch$1(pattern, options)
      }

      if (typeof pattern !== 'string') {
        throw new TypeError('glob pattern string required')
      }

      if (!options) options = {};
      pattern = pattern.trim();

      // windows support: need to use /, not \
      if (path$3.sep !== '/') {
        pattern = pattern.split(path$3.sep).join('/');
      }

      this.options = options;
      this.set = [];
      this.pattern = pattern;
      this.regexp = null;
      this.negate = false;
      this.comment = false;
      this.empty = false;

      // make the set of regexps etc.
      this.make();
    }

    Minimatch$1.prototype.debug = function () {};

    Minimatch$1.prototype.make = make;
    function make () {
      // don't do it more than once.
      if (this._made) return

      var pattern = this.pattern;
      var options = this.options;

      // empty patterns and comments match nothing.
      if (!options.nocomment && pattern.charAt(0) === '#') {
        this.comment = true;
        return
      }
      if (!pattern) {
        this.empty = true;
        return
      }

      // step 1: figure out negation, etc.
      this.parseNegate();

      // step 2: expand braces
      var set = this.globSet = this.braceExpand();

      if (options.debug) this.debug = console.error;

      this.debug(this.pattern, set);

      // step 3: now we have a set, so turn each one into a series of path-portion
      // matching patterns.
      // These will be regexps, except in the case of "**", which is
      // set to the GLOBSTAR object for globstar behavior,
      // and will not contain any / characters
      set = this.globParts = set.map(function (s) {
        return s.split(slashSplit)
      });

      this.debug(this.pattern, set);

      // glob --> regexps
      set = set.map(function (s, si, set) {
        return s.map(this.parse, this)
      }, this);

      this.debug(this.pattern, set);

      // filter out everything that didn't compile properly.
      set = set.filter(function (s) {
        return s.indexOf(false) === -1
      });

      this.debug(this.pattern, set);

      this.set = set;
    }

    Minimatch$1.prototype.parseNegate = parseNegate;
    function parseNegate () {
      var pattern = this.pattern;
      var negate = false;
      var options = this.options;
      var negateOffset = 0;

      if (options.nonegate) return

      for (var i = 0, l = pattern.length
        ; i < l && pattern.charAt(i) === '!'
        ; i++) {
        negate = !negate;
        negateOffset++;
      }

      if (negateOffset) this.pattern = pattern.substr(negateOffset);
      this.negate = negate;
    }

    // Brace expansion:
    // a{b,c}d -> abd acd
    // a{b,}c -> abc ac
    // a{0..3}d -> a0d a1d a2d a3d
    // a{b,c{d,e}f}g -> abg acdfg acefg
    // a{b,c}d{e,f}g -> abdeg acdeg abdeg abdfg
    //
    // Invalid sets are not expanded.
    // a{2..}b -> a{2..}b
    // a{b}c -> a{b}c
    minimatch$3.braceExpand = function (pattern, options) {
      return braceExpand(pattern, options)
    };

    Minimatch$1.prototype.braceExpand = braceExpand;

    function braceExpand (pattern, options) {
      if (!options) {
        if (this instanceof Minimatch$1) {
          options = this.options;
        } else {
          options = {};
        }
      }

      pattern = typeof pattern === 'undefined'
        ? this.pattern : pattern;

      if (typeof pattern === 'undefined') {
        throw new TypeError('undefined pattern')
      }

      if (options.nobrace ||
        !pattern.match(/\{.*\}/)) {
        // shortcut. no need to expand.
        return [pattern]
      }

      return expand(pattern)
    }

    // parse a component of the expanded set.
    // At this point, no pattern may contain "/" in it
    // so we're going to return a 2d array, where each entry is the full
    // pattern, split on '/', and then turned into a regular expression.
    // A regexp is made at the end which joins each array with an
    // escaped /, and another full one which joins each regexp with |.
    //
    // Following the lead of Bash 4.1, note that "**" only has special meaning
    // when it is the *only* thing in a path portion.  Otherwise, any series
    // of * is equivalent to a single *.  Globstar behavior is enabled by
    // default, and can be disabled by setting options.noglobstar.
    Minimatch$1.prototype.parse = parse;
    var SUBPARSE = {};
    function parse (pattern, isSub) {
      if (pattern.length > 1024 * 64) {
        throw new TypeError('pattern is too long')
      }

      var options = this.options;

      // shortcuts
      if (!options.noglobstar && pattern === '**') return GLOBSTAR
      if (pattern === '') return ''

      var re = '';
      var hasMagic = !!options.nocase;
      var escaping = false;
      // ? => one single character
      var patternListStack = [];
      var negativeLists = [];
      var stateChar;
      var inClass = false;
      var reClassStart = -1;
      var classStart = -1;
      // . and .. never match anything that doesn't start with .,
      // even when options.dot is set.
      var patternStart = pattern.charAt(0) === '.' ? '' // anything
      // not (start or / followed by . or .. followed by / or end)
      : options.dot ? '(?!(?:^|\\\/)\\.{1,2}(?:$|\\\/))'
      : '(?!\\.)';
      var self = this;

      function clearStateChar () {
        if (stateChar) {
          // we had some state-tracking character
          // that wasn't consumed by this pass.
          switch (stateChar) {
            case '*':
              re += star;
              hasMagic = true;
            break
            case '?':
              re += qmark;
              hasMagic = true;
            break
            default:
              re += '\\' + stateChar;
            break
          }
          self.debug('clearStateChar %j %j', stateChar, re);
          stateChar = false;
        }
      }

      for (var i = 0, len = pattern.length, c
        ; (i < len) && (c = pattern.charAt(i))
        ; i++) {
        this.debug('%s\t%s %s %j', pattern, i, re, c);

        // skip over any that are escaped.
        if (escaping && reSpecials[c]) {
          re += '\\' + c;
          escaping = false;
          continue
        }

        switch (c) {
          case '/':
            // completely not allowed, even escaped.
            // Should already be path-split by now.
            return false

          case '\\':
            clearStateChar();
            escaping = true;
          continue

          // the various stateChar values
          // for the "extglob" stuff.
          case '?':
          case '*':
          case '+':
          case '@':
          case '!':
            this.debug('%s\t%s %s %j <-- stateChar', pattern, i, re, c);

            // all of those are literals inside a class, except that
            // the glob [!a] means [^a] in regexp
            if (inClass) {
              this.debug('  in class');
              if (c === '!' && i === classStart + 1) c = '^';
              re += c;
              continue
            }

            // if we already have a stateChar, then it means
            // that there was something like ** or +? in there.
            // Handle the stateChar, then proceed with this one.
            self.debug('call clearStateChar %j', stateChar);
            clearStateChar();
            stateChar = c;
            // if extglob is disabled, then +(asdf|foo) isn't a thing.
            // just clear the statechar *now*, rather than even diving into
            // the patternList stuff.
            if (options.noext) clearStateChar();
          continue

          case '(':
            if (inClass) {
              re += '(';
              continue
            }

            if (!stateChar) {
              re += '\\(';
              continue
            }

            patternListStack.push({
              type: stateChar,
              start: i - 1,
              reStart: re.length,
              open: plTypes[stateChar].open,
              close: plTypes[stateChar].close
            });
            // negation is (?:(?!js)[^/]*)
            re += stateChar === '!' ? '(?:(?!(?:' : '(?:';
            this.debug('plType %j %j', stateChar, re);
            stateChar = false;
          continue

          case ')':
            if (inClass || !patternListStack.length) {
              re += '\\)';
              continue
            }

            clearStateChar();
            hasMagic = true;
            var pl = patternListStack.pop();
            // negation is (?:(?!js)[^/]*)
            // The others are (?:<pattern>)<type>
            re += pl.close;
            if (pl.type === '!') {
              negativeLists.push(pl);
            }
            pl.reEnd = re.length;
          continue

          case '|':
            if (inClass || !patternListStack.length || escaping) {
              re += '\\|';
              escaping = false;
              continue
            }

            clearStateChar();
            re += '|';
          continue

          // these are mostly the same in regexp and glob
          case '[':
            // swallow any state-tracking char before the [
            clearStateChar();

            if (inClass) {
              re += '\\' + c;
              continue
            }

            inClass = true;
            classStart = i;
            reClassStart = re.length;
            re += c;
          continue

          case ']':
            //  a right bracket shall lose its special
            //  meaning and represent itself in
            //  a bracket expression if it occurs
            //  first in the list.  -- POSIX.2 2.8.3.2
            if (i === classStart + 1 || !inClass) {
              re += '\\' + c;
              escaping = false;
              continue
            }

            // handle the case where we left a class open.
            // "[z-a]" is valid, equivalent to "\[z-a\]"
            if (inClass) {
              // split where the last [ was, make sure we don't have
              // an invalid re. if so, re-walk the contents of the
              // would-be class to re-translate any characters that
              // were passed through as-is
              // TODO: It would probably be faster to determine this
              // without a try/catch and a new RegExp, but it's tricky
              // to do safely.  For now, this is safe and works.
              var cs = pattern.substring(classStart + 1, i);
              try {
                RegExp('[' + cs + ']');
              } catch (er) {
                // not a valid class!
                var sp = this.parse(cs, SUBPARSE);
                re = re.substr(0, reClassStart) + '\\[' + sp[0] + '\\]';
                hasMagic = hasMagic || sp[1];
                inClass = false;
                continue
              }
            }

            // finish up the class.
            hasMagic = true;
            inClass = false;
            re += c;
          continue

          default:
            // swallow any state char that wasn't consumed
            clearStateChar();

            if (escaping) {
              // no need
              escaping = false;
            } else if (reSpecials[c]
              && !(c === '^' && inClass)) {
              re += '\\';
            }

            re += c;

        } // switch
      } // for

      // handle the case where we left a class open.
      // "[abc" is valid, equivalent to "\[abc"
      if (inClass) {
        // split where the last [ was, and escape it
        // this is a huge pita.  We now have to re-walk
        // the contents of the would-be class to re-translate
        // any characters that were passed through as-is
        cs = pattern.substr(classStart + 1);
        sp = this.parse(cs, SUBPARSE);
        re = re.substr(0, reClassStart) + '\\[' + sp[0];
        hasMagic = hasMagic || sp[1];
      }

      // handle the case where we had a +( thing at the *end*
      // of the pattern.
      // each pattern list stack adds 3 chars, and we need to go through
      // and escape any | chars that were passed through as-is for the regexp.
      // Go through and escape them, taking care not to double-escape any
      // | chars that were already escaped.
      for (pl = patternListStack.pop(); pl; pl = patternListStack.pop()) {
        var tail = re.slice(pl.reStart + pl.open.length);
        this.debug('setting tail', re, pl);
        // maybe some even number of \, then maybe 1 \, followed by a |
        tail = tail.replace(/((?:\\{2}){0,64})(\\?)\|/g, function (_, $1, $2) {
          if (!$2) {
            // the | isn't already escaped, so escape it.
            $2 = '\\';
          }

          // need to escape all those slashes *again*, without escaping the
          // one that we need for escaping the | character.  As it works out,
          // escaping an even number of slashes can be done by simply repeating
          // it exactly after itself.  That's why this trick works.
          //
          // I am sorry that you have to see this.
          return $1 + $1 + $2 + '|'
        });

        this.debug('tail=%j\n   %s', tail, tail, pl, re);
        var t = pl.type === '*' ? star
          : pl.type === '?' ? qmark
          : '\\' + pl.type;

        hasMagic = true;
        re = re.slice(0, pl.reStart) + t + '\\(' + tail;
      }

      // handle trailing things that only matter at the very end.
      clearStateChar();
      if (escaping) {
        // trailing \\
        re += '\\\\';
      }

      // only need to apply the nodot start if the re starts with
      // something that could conceivably capture a dot
      var addPatternStart = false;
      switch (re.charAt(0)) {
        case '.':
        case '[':
        case '(': addPatternStart = true;
      }

      // Hack to work around lack of negative lookbehind in JS
      // A pattern like: *.!(x).!(y|z) needs to ensure that a name
      // like 'a.xyz.yz' doesn't match.  So, the first negative
      // lookahead, has to look ALL the way ahead, to the end of
      // the pattern.
      for (var n = negativeLists.length - 1; n > -1; n--) {
        var nl = negativeLists[n];

        var nlBefore = re.slice(0, nl.reStart);
        var nlFirst = re.slice(nl.reStart, nl.reEnd - 8);
        var nlLast = re.slice(nl.reEnd - 8, nl.reEnd);
        var nlAfter = re.slice(nl.reEnd);

        nlLast += nlAfter;

        // Handle nested stuff like *(*.js|!(*.json)), where open parens
        // mean that we should *not* include the ) in the bit that is considered
        // "after" the negated section.
        var openParensBefore = nlBefore.split('(').length - 1;
        var cleanAfter = nlAfter;
        for (i = 0; i < openParensBefore; i++) {
          cleanAfter = cleanAfter.replace(/\)[+*?]?/, '');
        }
        nlAfter = cleanAfter;

        var dollar = '';
        if (nlAfter === '' && isSub !== SUBPARSE) {
          dollar = '$';
        }
        var newRe = nlBefore + nlFirst + nlAfter + dollar + nlLast;
        re = newRe;
      }

      // if the re is not "" at this point, then we need to make sure
      // it doesn't match against an empty path part.
      // Otherwise a/* will match a/, which it should not.
      if (re !== '' && hasMagic) {
        re = '(?=.)' + re;
      }

      if (addPatternStart) {
        re = patternStart + re;
      }

      // parsing just a piece of a larger pattern.
      if (isSub === SUBPARSE) {
        return [re, hasMagic]
      }

      // skip the regexp for non-magical patterns
      // unescape anything in it, though, so that it'll be
      // an exact match against a file etc.
      if (!hasMagic) {
        return globUnescape(pattern)
      }

      var flags = options.nocase ? 'i' : '';
      try {
        var regExp = new RegExp('^' + re + '$', flags);
      } catch (er) {
        // If it was an invalid regular expression, then it can't match
        // anything.  This trick looks for a character after the end of
        // the string, which is of course impossible, except in multi-line
        // mode, but it's not a /m regex.
        return new RegExp('$.')
      }

      regExp._glob = pattern;
      regExp._src = re;

      return regExp
    }

    minimatch$3.makeRe = function (pattern, options) {
      return new Minimatch$1(pattern, options || {}).makeRe()
    };

    Minimatch$1.prototype.makeRe = makeRe;
    function makeRe () {
      if (this.regexp || this.regexp === false) return this.regexp

      // at this point, this.set is a 2d array of partial
      // pattern strings, or "**".
      //
      // It's better to use .match().  This function shouldn't
      // be used, really, but it's pretty convenient sometimes,
      // when you just want to work with a regex.
      var set = this.set;

      if (!set.length) {
        this.regexp = false;
        return this.regexp
      }
      var options = this.options;

      var twoStar = options.noglobstar ? star
        : options.dot ? twoStarDot
        : twoStarNoDot;
      var flags = options.nocase ? 'i' : '';

      var re = set.map(function (pattern) {
        return pattern.map(function (p) {
          return (p === GLOBSTAR) ? twoStar
          : (typeof p === 'string') ? regExpEscape(p)
          : p._src
        }).join('\\\/')
      }).join('|');

      // must match entire pattern
      // ending in a * or ** will make it less strict.
      re = '^(?:' + re + ')$';

      // can match anything, as long as it's not this.
      if (this.negate) re = '^(?!' + re + ').*$';

      try {
        this.regexp = new RegExp(re, flags);
      } catch (ex) {
        this.regexp = false;
      }
      return this.regexp
    }

    minimatch$3.match = function (list, pattern, options) {
      options = options || {};
      var mm = new Minimatch$1(pattern, options);
      list = list.filter(function (f) {
        return mm.match(f)
      });
      if (mm.options.nonull && !list.length) {
        list.push(pattern);
      }
      return list
    };

    Minimatch$1.prototype.match = match;
    function match (f, partial) {
      this.debug('match', f, this.pattern);
      // short-circuit in the case of busted things.
      // comments, etc.
      if (this.comment) return false
      if (this.empty) return f === ''

      if (f === '/' && partial) return true

      var options = this.options;

      // windows: need to use /, not \
      if (path$3.sep !== '/') {
        f = f.split(path$3.sep).join('/');
      }

      // treat the test path as a set of pathparts.
      f = f.split(slashSplit);
      this.debug(this.pattern, 'split', f);

      // just ONE of the pattern sets in this.set needs to match
      // in order for it to be valid.  If negating, then just one
      // match means that we have failed.
      // Either way, return on the first hit.

      var set = this.set;
      this.debug(this.pattern, 'set', set);

      // Find the basename of the path by looking for the last non-empty segment
      var filename;
      var i;
      for (i = f.length - 1; i >= 0; i--) {
        filename = f[i];
        if (filename) break
      }

      for (i = 0; i < set.length; i++) {
        var pattern = set[i];
        var file = f;
        if (options.matchBase && pattern.length === 1) {
          file = [filename];
        }
        var hit = this.matchOne(file, pattern, partial);
        if (hit) {
          if (options.flipNegate) return true
          return !this.negate
        }
      }

      // didn't get any hits.  this is success if it's a negative
      // pattern, failure otherwise.
      if (options.flipNegate) return false
      return this.negate
    }

    // set partial to true to test if, for example,
    // "/a/b" matches the start of "/*/b/*/d"
    // Partial means, if you run out of file before you run
    // out of pattern, then that's fine, as long as all
    // the parts match.
    Minimatch$1.prototype.matchOne = function (file, pattern, partial) {
      var options = this.options;

      this.debug('matchOne',
        { 'this': this, file: file, pattern: pattern });

      this.debug('matchOne', file.length, pattern.length);

      for (var fi = 0,
          pi = 0,
          fl = file.length,
          pl = pattern.length
          ; (fi < fl) && (pi < pl)
          ; fi++, pi++) {
        this.debug('matchOne loop');
        var p = pattern[pi];
        var f = file[fi];

        this.debug(pattern, p, f);

        // should be impossible.
        // some invalid regexp stuff in the set.
        if (p === false) return false

        if (p === GLOBSTAR) {
          this.debug('GLOBSTAR', [pattern, p, f]);

          // "**"
          // a/**/b/**/c would match the following:
          // a/b/x/y/z/c
          // a/x/y/z/b/c
          // a/b/x/b/x/c
          // a/b/c
          // To do this, take the rest of the pattern after
          // the **, and see if it would match the file remainder.
          // If so, return success.
          // If not, the ** "swallows" a segment, and try again.
          // This is recursively awful.
          //
          // a/**/b/**/c matching a/b/x/y/z/c
          // - a matches a
          // - doublestar
          //   - matchOne(b/x/y/z/c, b/**/c)
          //     - b matches b
          //     - doublestar
          //       - matchOne(x/y/z/c, c) -> no
          //       - matchOne(y/z/c, c) -> no
          //       - matchOne(z/c, c) -> no
          //       - matchOne(c, c) yes, hit
          var fr = fi;
          var pr = pi + 1;
          if (pr === pl) {
            this.debug('** at the end');
            // a ** at the end will just swallow the rest.
            // We have found a match.
            // however, it will not swallow /.x, unless
            // options.dot is set.
            // . and .. are *never* matched by **, for explosively
            // exponential reasons.
            for (; fi < fl; fi++) {
              if (file[fi] === '.' || file[fi] === '..' ||
                (!options.dot && file[fi].charAt(0) === '.')) return false
            }
            return true
          }

          // ok, let's see if we can swallow whatever we can.
          while (fr < fl) {
            var swallowee = file[fr];

            this.debug('\nglobstar while', file, fr, pattern, pr, swallowee);

            // XXX remove this slice.  Just pass the start index.
            if (this.matchOne(file.slice(fr), pattern.slice(pr), partial)) {
              this.debug('globstar found match!', fr, fl, swallowee);
              // found a match.
              return true
            } else {
              // can't swallow "." or ".." ever.
              // can only swallow ".foo" when explicitly asked.
              if (swallowee === '.' || swallowee === '..' ||
                (!options.dot && swallowee.charAt(0) === '.')) {
                this.debug('dot detected!', file, fr, pattern, pr);
                break
              }

              // ** swallows a segment, and continue.
              this.debug('globstar swallow a segment, and continue');
              fr++;
            }
          }

          // no match was found.
          // However, in partial mode, we can't say this is necessarily over.
          // If there's more *pattern* left, then
          if (partial) {
            // ran out of file
            this.debug('\n>>> no match, partial?', file, fr, pattern, pr);
            if (fr === fl) return true
          }
          return false
        }

        // something other than **
        // non-magic patterns just have to match exactly
        // patterns with magic have been turned into regexps.
        var hit;
        if (typeof p === 'string') {
          if (options.nocase) {
            hit = f.toLowerCase() === p.toLowerCase();
          } else {
            hit = f === p;
          }
          this.debug('string match', p, f, hit);
        } else {
          hit = f.match(p);
          this.debug('pattern match', p, f, hit);
        }

        if (!hit) return false
      }

      // Note: ending in / means that we'll get a final ""
      // at the end of the pattern.  This can only match a
      // corresponding "" at the end of the file.
      // If the file ends in /, then it can only match a
      // a pattern that ends in /, unless the pattern just
      // doesn't have any more for it. But, a/b/ should *not*
      // match "a/b/*", even though "" matches against the
      // [^/]*? pattern, except in partial mode, where it might
      // simply not be reached yet.
      // However, a/b/ should still satisfy a/*

      // now either we fell off the end of the pattern, or we're done.
      if (fi === fl && pi === pl) {
        // ran out of pattern and filename at the same time.
        // an exact hit!
        return true
      } else if (fi === fl) {
        // ran out of file, but still had pattern left.
        // this is ok if we're doing the match as part of
        // a glob fs traversal.
        return partial
      } else if (pi === pl) {
        // ran out of pattern, still have file left.
        // this is only acceptable if we're on the very last
        // empty segment of a file with a trailing slash.
        // a/* should match a/b/
        var emptyFileEnd = (fi === fl - 1) && (file[fi] === '');
        return emptyFileEnd
      }

      // should be unreachable.
      throw new Error('wtf?')
    };

    // replace stuff like \* with *
    function globUnescape (s) {
      return s.replace(/\\(.)/g, '$1')
    }

    function regExpEscape (s) {
      return s.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, '\\$&')
    }

    var pathIsAbsolute = {exports: {}};

    function posix(path) {
    	return path.charAt(0) === '/';
    }

    function win32(path) {
    	// https://github.com/nodejs/node/blob/b3fcc245fb25539909ef1d5eaa01dbf92e168633/lib/path.js#L56
    	var splitDeviceRe = /^([a-zA-Z]:|[\\\/]{2}[^\\\/]+[\\\/]+[^\\\/]+)?([\\\/])?([\s\S]*?)$/;
    	var result = splitDeviceRe.exec(path);
    	var device = result[1] || '';
    	var isUnc = Boolean(device && device.charAt(1) !== ':');

    	// UNC paths are always absolute
    	return Boolean(result[2] || isUnc);
    }

    pathIsAbsolute.exports = process.platform === 'win32' ? win32 : posix;
    pathIsAbsolute.exports.posix = posix;
    pathIsAbsolute.exports.win32 = win32;

    var common$2 = {};

    common$2.setopts = setopts$2;
    common$2.ownProp = ownProp$2;
    common$2.makeAbs = makeAbs;
    common$2.finish = finish;
    common$2.mark = mark;
    common$2.isIgnored = isIgnored$2;
    common$2.childrenIgnored = childrenIgnored$2;

    function ownProp$2 (obj, field) {
      return Object.prototype.hasOwnProperty.call(obj, field)
    }

    var fs = require$$0__default$6["default"];
    var path$2 = path__default["default"];
    var minimatch$2 = minimatch_1;
    var isAbsolute$2 = pathIsAbsolute.exports;
    var Minimatch = minimatch$2.Minimatch;

    function alphasort (a, b) {
      return a.localeCompare(b, 'en')
    }

    function setupIgnores (self, options) {
      self.ignore = options.ignore || [];

      if (!Array.isArray(self.ignore))
        self.ignore = [self.ignore];

      if (self.ignore.length) {
        self.ignore = self.ignore.map(ignoreMap);
      }
    }

    // ignore patterns are always in dot:true mode.
    function ignoreMap (pattern) {
      var gmatcher = null;
      if (pattern.slice(-3) === '/**') {
        var gpattern = pattern.replace(/(\/\*\*)+$/, '');
        gmatcher = new Minimatch(gpattern, { dot: true });
      }

      return {
        matcher: new Minimatch(pattern, { dot: true }),
        gmatcher: gmatcher
      }
    }

    function setopts$2 (self, pattern, options) {
      if (!options)
        options = {};

      // base-matching: just use globstar for that.
      if (options.matchBase && -1 === pattern.indexOf("/")) {
        if (options.noglobstar) {
          throw new Error("base matching requires globstar")
        }
        pattern = "**/" + pattern;
      }

      self.silent = !!options.silent;
      self.pattern = pattern;
      self.strict = options.strict !== false;
      self.realpath = !!options.realpath;
      self.realpathCache = options.realpathCache || Object.create(null);
      self.follow = !!options.follow;
      self.dot = !!options.dot;
      self.mark = !!options.mark;
      self.nodir = !!options.nodir;
      if (self.nodir)
        self.mark = true;
      self.sync = !!options.sync;
      self.nounique = !!options.nounique;
      self.nonull = !!options.nonull;
      self.nosort = !!options.nosort;
      self.nocase = !!options.nocase;
      self.stat = !!options.stat;
      self.noprocess = !!options.noprocess;
      self.absolute = !!options.absolute;
      self.fs = options.fs || fs;

      self.maxLength = options.maxLength || Infinity;
      self.cache = options.cache || Object.create(null);
      self.statCache = options.statCache || Object.create(null);
      self.symlinks = options.symlinks || Object.create(null);

      setupIgnores(self, options);

      self.changedCwd = false;
      var cwd = process.cwd();
      if (!ownProp$2(options, "cwd"))
        self.cwd = cwd;
      else {
        self.cwd = path$2.resolve(options.cwd);
        self.changedCwd = self.cwd !== cwd;
      }

      self.root = options.root || path$2.resolve(self.cwd, "/");
      self.root = path$2.resolve(self.root);
      if (process.platform === "win32")
        self.root = self.root.replace(/\\/g, "/");

      // TODO: is an absolute `cwd` supposed to be resolved against `root`?
      // e.g. { cwd: '/test', root: __dirname } === path.join(__dirname, '/test')
      self.cwdAbs = isAbsolute$2(self.cwd) ? self.cwd : makeAbs(self, self.cwd);
      if (process.platform === "win32")
        self.cwdAbs = self.cwdAbs.replace(/\\/g, "/");
      self.nomount = !!options.nomount;

      // disable comments and negation in Minimatch.
      // Note that they are not supported in Glob itself anyway.
      options.nonegate = true;
      options.nocomment = true;

      self.minimatch = new Minimatch(pattern, options);
      self.options = self.minimatch.options;
    }

    function finish (self) {
      var nou = self.nounique;
      var all = nou ? [] : Object.create(null);

      for (var i = 0, l = self.matches.length; i < l; i ++) {
        var matches = self.matches[i];
        if (!matches || Object.keys(matches).length === 0) {
          if (self.nonull) {
            // do like the shell, and spit out the literal glob
            var literal = self.minimatch.globSet[i];
            if (nou)
              all.push(literal);
            else
              all[literal] = true;
          }
        } else {
          // had matches
          var m = Object.keys(matches);
          if (nou)
            all.push.apply(all, m);
          else
            m.forEach(function (m) {
              all[m] = true;
            });
        }
      }

      if (!nou)
        all = Object.keys(all);

      if (!self.nosort)
        all = all.sort(alphasort);

      // at *some* point we statted all of these
      if (self.mark) {
        for (var i = 0; i < all.length; i++) {
          all[i] = self._mark(all[i]);
        }
        if (self.nodir) {
          all = all.filter(function (e) {
            var notDir = !(/\/$/.test(e));
            var c = self.cache[e] || self.cache[makeAbs(self, e)];
            if (notDir && c)
              notDir = c !== 'DIR' && !Array.isArray(c);
            return notDir
          });
        }
      }

      if (self.ignore.length)
        all = all.filter(function(m) {
          return !isIgnored$2(self, m)
        });

      self.found = all;
    }

    function mark (self, p) {
      var abs = makeAbs(self, p);
      var c = self.cache[abs];
      var m = p;
      if (c) {
        var isDir = c === 'DIR' || Array.isArray(c);
        var slash = p.slice(-1) === '/';

        if (isDir && !slash)
          m += '/';
        else if (!isDir && slash)
          m = m.slice(0, -1);

        if (m !== p) {
          var mabs = makeAbs(self, m);
          self.statCache[mabs] = self.statCache[abs];
          self.cache[mabs] = self.cache[abs];
        }
      }

      return m
    }

    // lotta situps...
    function makeAbs (self, f) {
      var abs = f;
      if (f.charAt(0) === '/') {
        abs = path$2.join(self.root, f);
      } else if (isAbsolute$2(f) || f === '') {
        abs = f;
      } else if (self.changedCwd) {
        abs = path$2.resolve(self.cwd, f);
      } else {
        abs = path$2.resolve(f);
      }

      if (process.platform === 'win32')
        abs = abs.replace(/\\/g, '/');

      return abs
    }


    // Return true, if pattern ends with globstar '**', for the accompanying parent directory.
    // Ex:- If node_modules/** is the pattern, add 'node_modules' to ignore list along with it's contents
    function isIgnored$2 (self, path) {
      if (!self.ignore.length)
        return false

      return self.ignore.some(function(item) {
        return item.matcher.match(path) || !!(item.gmatcher && item.gmatcher.match(path))
      })
    }

    function childrenIgnored$2 (self, path) {
      if (!self.ignore.length)
        return false

      return self.ignore.some(function(item) {
        return !!(item.gmatcher && item.gmatcher.match(path))
      })
    }

    var sync = globSync$1;
    globSync$1.GlobSync = GlobSync$1;

    var rp$1 = fs_realpath;
    var minimatch$1 = minimatch_1;
    glob_1.Glob;
    var path$1 = path__default["default"];
    var assert$1 = require$$0__default$4["default"];
    var isAbsolute$1 = pathIsAbsolute.exports;
    var common$1 = common$2;
    var setopts$1 = common$1.setopts;
    var ownProp$1 = common$1.ownProp;
    var childrenIgnored$1 = common$1.childrenIgnored;
    var isIgnored$1 = common$1.isIgnored;

    function globSync$1 (pattern, options) {
      if (typeof options === 'function' || arguments.length === 3)
        throw new TypeError('callback provided to sync glob\n'+
                            'See: https://github.com/isaacs/node-glob/issues/167')

      return new GlobSync$1(pattern, options).found
    }

    function GlobSync$1 (pattern, options) {
      if (!pattern)
        throw new Error('must provide pattern')

      if (typeof options === 'function' || arguments.length === 3)
        throw new TypeError('callback provided to sync glob\n'+
                            'See: https://github.com/isaacs/node-glob/issues/167')

      if (!(this instanceof GlobSync$1))
        return new GlobSync$1(pattern, options)

      setopts$1(this, pattern, options);

      if (this.noprocess)
        return this

      var n = this.minimatch.set.length;
      this.matches = new Array(n);
      for (var i = 0; i < n; i ++) {
        this._process(this.minimatch.set[i], i, false);
      }
      this._finish();
    }

    GlobSync$1.prototype._finish = function () {
      assert$1(this instanceof GlobSync$1);
      if (this.realpath) {
        var self = this;
        this.matches.forEach(function (matchset, index) {
          var set = self.matches[index] = Object.create(null);
          for (var p in matchset) {
            try {
              p = self._makeAbs(p);
              var real = rp$1.realpathSync(p, self.realpathCache);
              set[real] = true;
            } catch (er) {
              if (er.syscall === 'stat')
                set[self._makeAbs(p)] = true;
              else
                throw er
            }
          }
        });
      }
      common$1.finish(this);
    };


    GlobSync$1.prototype._process = function (pattern, index, inGlobStar) {
      assert$1(this instanceof GlobSync$1);

      // Get the first [n] parts of pattern that are all strings.
      var n = 0;
      while (typeof pattern[n] === 'string') {
        n ++;
      }
      // now n is the index of the first one that is *not* a string.

      // See if there's anything else
      var prefix;
      switch (n) {
        // if not, then this is rather simple
        case pattern.length:
          this._processSimple(pattern.join('/'), index);
          return

        case 0:
          // pattern *starts* with some non-trivial item.
          // going to readdir(cwd), but not include the prefix in matches.
          prefix = null;
          break

        default:
          // pattern has some string bits in the front.
          // whatever it starts with, whether that's 'absolute' like /foo/bar,
          // or 'relative' like '../baz'
          prefix = pattern.slice(0, n).join('/');
          break
      }

      var remain = pattern.slice(n);

      // get the list of entries.
      var read;
      if (prefix === null)
        read = '.';
      else if (isAbsolute$1(prefix) || isAbsolute$1(pattern.join('/'))) {
        if (!prefix || !isAbsolute$1(prefix))
          prefix = '/' + prefix;
        read = prefix;
      } else
        read = prefix;

      var abs = this._makeAbs(read);

      //if ignored, skip processing
      if (childrenIgnored$1(this, read))
        return

      var isGlobStar = remain[0] === minimatch$1.GLOBSTAR;
      if (isGlobStar)
        this._processGlobStar(prefix, read, abs, remain, index, inGlobStar);
      else
        this._processReaddir(prefix, read, abs, remain, index, inGlobStar);
    };


    GlobSync$1.prototype._processReaddir = function (prefix, read, abs, remain, index, inGlobStar) {
      var entries = this._readdir(abs, inGlobStar);

      // if the abs isn't a dir, then nothing can match!
      if (!entries)
        return

      // It will only match dot entries if it starts with a dot, or if
      // dot is set.  Stuff like @(.foo|.bar) isn't allowed.
      var pn = remain[0];
      var negate = !!this.minimatch.negate;
      var rawGlob = pn._glob;
      var dotOk = this.dot || rawGlob.charAt(0) === '.';

      var matchedEntries = [];
      for (var i = 0; i < entries.length; i++) {
        var e = entries[i];
        if (e.charAt(0) !== '.' || dotOk) {
          var m;
          if (negate && !prefix) {
            m = !e.match(pn);
          } else {
            m = e.match(pn);
          }
          if (m)
            matchedEntries.push(e);
        }
      }

      var len = matchedEntries.length;
      // If there are no matched entries, then nothing matches.
      if (len === 0)
        return

      // if this is the last remaining pattern bit, then no need for
      // an additional stat *unless* the user has specified mark or
      // stat explicitly.  We know they exist, since readdir returned
      // them.

      if (remain.length === 1 && !this.mark && !this.stat) {
        if (!this.matches[index])
          this.matches[index] = Object.create(null);

        for (var i = 0; i < len; i ++) {
          var e = matchedEntries[i];
          if (prefix) {
            if (prefix.slice(-1) !== '/')
              e = prefix + '/' + e;
            else
              e = prefix + e;
          }

          if (e.charAt(0) === '/' && !this.nomount) {
            e = path$1.join(this.root, e);
          }
          this._emitMatch(index, e);
        }
        // This was the last one, and no stats were needed
        return
      }

      // now test all matched entries as stand-ins for that part
      // of the pattern.
      remain.shift();
      for (var i = 0; i < len; i ++) {
        var e = matchedEntries[i];
        var newPattern;
        if (prefix)
          newPattern = [prefix, e];
        else
          newPattern = [e];
        this._process(newPattern.concat(remain), index, inGlobStar);
      }
    };


    GlobSync$1.prototype._emitMatch = function (index, e) {
      if (isIgnored$1(this, e))
        return

      var abs = this._makeAbs(e);

      if (this.mark)
        e = this._mark(e);

      if (this.absolute) {
        e = abs;
      }

      if (this.matches[index][e])
        return

      if (this.nodir) {
        var c = this.cache[abs];
        if (c === 'DIR' || Array.isArray(c))
          return
      }

      this.matches[index][e] = true;

      if (this.stat)
        this._stat(e);
    };


    GlobSync$1.prototype._readdirInGlobStar = function (abs) {
      // follow all symlinked directories forever
      // just proceed as if this is a non-globstar situation
      if (this.follow)
        return this._readdir(abs, false)

      var entries;
      var lstat;
      try {
        lstat = this.fs.lstatSync(abs);
      } catch (er) {
        if (er.code === 'ENOENT') {
          // lstat failed, doesn't exist
          return null
        }
      }

      var isSym = lstat && lstat.isSymbolicLink();
      this.symlinks[abs] = isSym;

      // If it's not a symlink or a dir, then it's definitely a regular file.
      // don't bother doing a readdir in that case.
      if (!isSym && lstat && !lstat.isDirectory())
        this.cache[abs] = 'FILE';
      else
        entries = this._readdir(abs, false);

      return entries
    };

    GlobSync$1.prototype._readdir = function (abs, inGlobStar) {

      if (inGlobStar && !ownProp$1(this.symlinks, abs))
        return this._readdirInGlobStar(abs)

      if (ownProp$1(this.cache, abs)) {
        var c = this.cache[abs];
        if (!c || c === 'FILE')
          return null

        if (Array.isArray(c))
          return c
      }

      try {
        return this._readdirEntries(abs, this.fs.readdirSync(abs))
      } catch (er) {
        this._readdirError(abs, er);
        return null
      }
    };

    GlobSync$1.prototype._readdirEntries = function (abs, entries) {
      // if we haven't asked to stat everything, then just
      // assume that everything in there exists, so we can avoid
      // having to stat it a second time.
      if (!this.mark && !this.stat) {
        for (var i = 0; i < entries.length; i ++) {
          var e = entries[i];
          if (abs === '/')
            e = abs + e;
          else
            e = abs + '/' + e;
          this.cache[e] = true;
        }
      }

      this.cache[abs] = entries;

      // mark and cache dir-ness
      return entries
    };

    GlobSync$1.prototype._readdirError = function (f, er) {
      // handle errors, and cache the information
      switch (er.code) {
        case 'ENOTSUP': // https://github.com/isaacs/node-glob/issues/205
        case 'ENOTDIR': // totally normal. means it *does* exist.
          var abs = this._makeAbs(f);
          this.cache[abs] = 'FILE';
          if (abs === this.cwdAbs) {
            var error = new Error(er.code + ' invalid cwd ' + this.cwd);
            error.path = this.cwd;
            error.code = er.code;
            throw error
          }
          break

        case 'ENOENT': // not terribly unusual
        case 'ELOOP':
        case 'ENAMETOOLONG':
        case 'UNKNOWN':
          this.cache[this._makeAbs(f)] = false;
          break

        default: // some unusual error.  Treat as failure.
          this.cache[this._makeAbs(f)] = false;
          if (this.strict)
            throw er
          if (!this.silent)
            console.error('glob error', er);
          break
      }
    };

    GlobSync$1.prototype._processGlobStar = function (prefix, read, abs, remain, index, inGlobStar) {

      var entries = this._readdir(abs, inGlobStar);

      // no entries means not a dir, so it can never have matches
      // foo.txt/** doesn't match foo.txt
      if (!entries)
        return

      // test without the globstar, and with every child both below
      // and replacing the globstar.
      var remainWithoutGlobStar = remain.slice(1);
      var gspref = prefix ? [ prefix ] : [];
      var noGlobStar = gspref.concat(remainWithoutGlobStar);

      // the noGlobStar pattern exits the inGlobStar state
      this._process(noGlobStar, index, false);

      var len = entries.length;
      var isSym = this.symlinks[abs];

      // If it's a symlink, and we're in a globstar, then stop
      if (isSym && inGlobStar)
        return

      for (var i = 0; i < len; i++) {
        var e = entries[i];
        if (e.charAt(0) === '.' && !this.dot)
          continue

        // these two cases enter the inGlobStar state
        var instead = gspref.concat(entries[i], remainWithoutGlobStar);
        this._process(instead, index, true);

        var below = gspref.concat(entries[i], remain);
        this._process(below, index, true);
      }
    };

    GlobSync$1.prototype._processSimple = function (prefix, index) {
      // XXX review this.  Shouldn't it be doing the mounting etc
      // before doing stat?  kinda weird?
      var exists = this._stat(prefix);

      if (!this.matches[index])
        this.matches[index] = Object.create(null);

      // If it doesn't exist, then just mark the lack of results
      if (!exists)
        return

      if (prefix && isAbsolute$1(prefix) && !this.nomount) {
        var trail = /[\/\\]$/.test(prefix);
        if (prefix.charAt(0) === '/') {
          prefix = path$1.join(this.root, prefix);
        } else {
          prefix = path$1.resolve(this.root, prefix);
          if (trail)
            prefix += '/';
        }
      }

      if (process.platform === 'win32')
        prefix = prefix.replace(/\\/g, '/');

      // Mark this as a match
      this._emitMatch(index, prefix);
    };

    // Returns either 'DIR', 'FILE', or false
    GlobSync$1.prototype._stat = function (f) {
      var abs = this._makeAbs(f);
      var needDir = f.slice(-1) === '/';

      if (f.length > this.maxLength)
        return false

      if (!this.stat && ownProp$1(this.cache, abs)) {
        var c = this.cache[abs];

        if (Array.isArray(c))
          c = 'DIR';

        // It exists, but maybe not how we need it
        if (!needDir || c === 'DIR')
          return c

        if (needDir && c === 'FILE')
          return false

        // otherwise we have to stat, because maybe c=true
        // if we know it exists, but not what it is.
      }
      var stat = this.statCache[abs];
      if (!stat) {
        var lstat;
        try {
          lstat = this.fs.lstatSync(abs);
        } catch (er) {
          if (er && (er.code === 'ENOENT' || er.code === 'ENOTDIR')) {
            this.statCache[abs] = false;
            return false
          }
        }

        if (lstat && lstat.isSymbolicLink()) {
          try {
            stat = this.fs.statSync(abs);
          } catch (er) {
            stat = lstat;
          }
        } else {
          stat = lstat;
        }
      }

      this.statCache[abs] = stat;

      var c = true;
      if (stat)
        c = stat.isDirectory() ? 'DIR' : 'FILE';

      this.cache[abs] = this.cache[abs] || c;

      if (needDir && c === 'FILE')
        return false

      return c
    };

    GlobSync$1.prototype._mark = function (p) {
      return common$1.mark(this, p)
    };

    GlobSync$1.prototype._makeAbs = function (f) {
      return common$1.makeAbs(this, f)
    };

    // Returns a wrapper function that returns a wrapped callback
    // The wrapper function should do some stuff, and return a
    // presumably different callback function.
    // This makes sure that own properties are retained, so that
    // decorations and such are not lost along the way.
    var wrappy_1 = wrappy$2;
    function wrappy$2 (fn, cb) {
      if (fn && cb) return wrappy$2(fn)(cb)

      if (typeof fn !== 'function')
        throw new TypeError('need wrapper function')

      Object.keys(fn).forEach(function (k) {
        wrapper[k] = fn[k];
      });

      return wrapper

      function wrapper() {
        var args = new Array(arguments.length);
        for (var i = 0; i < args.length; i++) {
          args[i] = arguments[i];
        }
        var ret = fn.apply(this, args);
        var cb = args[args.length-1];
        if (typeof ret === 'function' && ret !== cb) {
          Object.keys(cb).forEach(function (k) {
            ret[k] = cb[k];
          });
        }
        return ret
      }
    }

    var once$3 = {exports: {}};

    var wrappy$1 = wrappy_1;
    once$3.exports = wrappy$1(once$2);
    once$3.exports.strict = wrappy$1(onceStrict);

    once$2.proto = once$2(function () {
      Object.defineProperty(Function.prototype, 'once', {
        value: function () {
          return once$2(this)
        },
        configurable: true
      });

      Object.defineProperty(Function.prototype, 'onceStrict', {
        value: function () {
          return onceStrict(this)
        },
        configurable: true
      });
    });

    function once$2 (fn) {
      var f = function () {
        if (f.called) return f.value
        f.called = true;
        return f.value = fn.apply(this, arguments)
      };
      f.called = false;
      return f
    }

    function onceStrict (fn) {
      var f = function () {
        if (f.called)
          throw new Error(f.onceError)
        f.called = true;
        return f.value = fn.apply(this, arguments)
      };
      var name = fn.name || 'Function wrapped with `once`';
      f.onceError = name + " shouldn't be called more than once";
      f.called = false;
      return f
    }

    var wrappy = wrappy_1;
    var reqs = Object.create(null);
    var once$1 = once$3.exports;

    var inflight_1 = wrappy(inflight$1);

    function inflight$1 (key, cb) {
      if (reqs[key]) {
        reqs[key].push(cb);
        return null
      } else {
        reqs[key] = [cb];
        return makeres(key)
      }
    }

    function makeres (key) {
      return once$1(function RES () {
        var cbs = reqs[key];
        var len = cbs.length;
        var args = slice(arguments);

        // XXX It's somewhat ambiguous whether a new callback added in this
        // pass should be queued for later execution if something in the
        // list of callbacks throws, or if it should just be discarded.
        // However, it's such an edge case that it hardly matters, and either
        // choice is likely as surprising as the other.
        // As it happens, we do go ahead and schedule it for later execution.
        try {
          for (var i = 0; i < len; i++) {
            cbs[i].apply(null, args);
          }
        } finally {
          if (cbs.length > len) {
            // added more in the interim.
            // de-zalgo, just in case, but don't call again.
            cbs.splice(0, len);
            process.nextTick(function () {
              RES.apply(null, args);
            });
          } else {
            delete reqs[key];
          }
        }
      })
    }

    function slice (args) {
      var length = args.length;
      var array = [];

      for (var i = 0; i < length; i++) array[i] = args[i];
      return array
    }

    // Approach:
    //
    // 1. Get the minimatch set
    // 2. For each pattern in the set, PROCESS(pattern, false)
    // 3. Store matches per-set, then uniq them
    //
    // PROCESS(pattern, inGlobStar)
    // Get the first [n] items from pattern that are all strings
    // Join these together.  This is PREFIX.
    //   If there is no more remaining, then stat(PREFIX) and
    //   add to matches if it succeeds.  END.
    //
    // If inGlobStar and PREFIX is symlink and points to dir
    //   set ENTRIES = []
    // else readdir(PREFIX) as ENTRIES
    //   If fail, END
    //
    // with ENTRIES
    //   If pattern[n] is GLOBSTAR
    //     // handle the case where the globstar match is empty
    //     // by pruning it out, and testing the resulting pattern
    //     PROCESS(pattern[0..n] + pattern[n+1 .. $], false)
    //     // handle other cases.
    //     for ENTRY in ENTRIES (not dotfiles)
    //       // attach globstar + tail onto the entry
    //       // Mark that this entry is a globstar match
    //       PROCESS(pattern[0..n] + ENTRY + pattern[n .. $], true)
    //
    //   else // not globstar
    //     for ENTRY in ENTRIES (not dotfiles, unless pattern[n] is dot)
    //       Test ENTRY against pattern[n]
    //       If fails, continue
    //       If passes, PROCESS(pattern[0..n] + item + pattern[n+1 .. $])
    //
    // Caveat:
    //   Cache all stats and readdirs results to minimize syscall.  Since all
    //   we ever care about is existence and directory-ness, we can just keep
    //   `true` for files, and [children,...] for directories, or `false` for
    //   things that don't exist.

    var glob_1 = glob;

    var rp = fs_realpath;
    var minimatch = minimatch_1;
    var inherits = inherits$4.exports;
    var EE = require$$2__default["default"].EventEmitter;
    var path = path__default["default"];
    var assert = require$$0__default$4["default"];
    var isAbsolute = pathIsAbsolute.exports;
    var globSync = sync;
    var common = common$2;
    var setopts = common.setopts;
    var ownProp = common.ownProp;
    var inflight = inflight_1;
    var childrenIgnored = common.childrenIgnored;
    var isIgnored = common.isIgnored;

    var once = once$3.exports;

    function glob (pattern, options, cb) {
      if (typeof options === 'function') cb = options, options = {};
      if (!options) options = {};

      if (options.sync) {
        if (cb)
          throw new TypeError('callback provided to sync glob')
        return globSync(pattern, options)
      }

      return new Glob(pattern, options, cb)
    }

    glob.sync = globSync;
    var GlobSync = glob.GlobSync = globSync.GlobSync;

    // old api surface
    glob.glob = glob;

    function extend (origin, add) {
      if (add === null || typeof add !== 'object') {
        return origin
      }

      var keys = Object.keys(add);
      var i = keys.length;
      while (i--) {
        origin[keys[i]] = add[keys[i]];
      }
      return origin
    }

    glob.hasMagic = function (pattern, options_) {
      var options = extend({}, options_);
      options.noprocess = true;

      var g = new Glob(pattern, options);
      var set = g.minimatch.set;

      if (!pattern)
        return false

      if (set.length > 1)
        return true

      for (var j = 0; j < set[0].length; j++) {
        if (typeof set[0][j] !== 'string')
          return true
      }

      return false
    };

    glob.Glob = Glob;
    inherits(Glob, EE);
    function Glob (pattern, options, cb) {
      if (typeof options === 'function') {
        cb = options;
        options = null;
      }

      if (options && options.sync) {
        if (cb)
          throw new TypeError('callback provided to sync glob')
        return new GlobSync(pattern, options)
      }

      if (!(this instanceof Glob))
        return new Glob(pattern, options, cb)

      setopts(this, pattern, options);
      this._didRealPath = false;

      // process each pattern in the minimatch set
      var n = this.minimatch.set.length;

      // The matches are stored as {<filename>: true,...} so that
      // duplicates are automagically pruned.
      // Later, we do an Object.keys() on these.
      // Keep them as a list so we can fill in when nonull is set.
      this.matches = new Array(n);

      if (typeof cb === 'function') {
        cb = once(cb);
        this.on('error', cb);
        this.on('end', function (matches) {
          cb(null, matches);
        });
      }

      var self = this;
      this._processing = 0;

      this._emitQueue = [];
      this._processQueue = [];
      this.paused = false;

      if (this.noprocess)
        return this

      if (n === 0)
        return done()

      var sync = true;
      for (var i = 0; i < n; i ++) {
        this._process(this.minimatch.set[i], i, false, done);
      }
      sync = false;

      function done () {
        --self._processing;
        if (self._processing <= 0) {
          if (sync) {
            process.nextTick(function () {
              self._finish();
            });
          } else {
            self._finish();
          }
        }
      }
    }

    Glob.prototype._finish = function () {
      assert(this instanceof Glob);
      if (this.aborted)
        return

      if (this.realpath && !this._didRealpath)
        return this._realpath()

      common.finish(this);
      this.emit('end', this.found);
    };

    Glob.prototype._realpath = function () {
      if (this._didRealpath)
        return

      this._didRealpath = true;

      var n = this.matches.length;
      if (n === 0)
        return this._finish()

      var self = this;
      for (var i = 0; i < this.matches.length; i++)
        this._realpathSet(i, next);

      function next () {
        if (--n === 0)
          self._finish();
      }
    };

    Glob.prototype._realpathSet = function (index, cb) {
      var matchset = this.matches[index];
      if (!matchset)
        return cb()

      var found = Object.keys(matchset);
      var self = this;
      var n = found.length;

      if (n === 0)
        return cb()

      var set = this.matches[index] = Object.create(null);
      found.forEach(function (p, i) {
        // If there's a problem with the stat, then it means that
        // one or more of the links in the realpath couldn't be
        // resolved.  just return the abs value in that case.
        p = self._makeAbs(p);
        rp.realpath(p, self.realpathCache, function (er, real) {
          if (!er)
            set[real] = true;
          else if (er.syscall === 'stat')
            set[p] = true;
          else
            self.emit('error', er); // srsly wtf right here

          if (--n === 0) {
            self.matches[index] = set;
            cb();
          }
        });
      });
    };

    Glob.prototype._mark = function (p) {
      return common.mark(this, p)
    };

    Glob.prototype._makeAbs = function (f) {
      return common.makeAbs(this, f)
    };

    Glob.prototype.abort = function () {
      this.aborted = true;
      this.emit('abort');
    };

    Glob.prototype.pause = function () {
      if (!this.paused) {
        this.paused = true;
        this.emit('pause');
      }
    };

    Glob.prototype.resume = function () {
      if (this.paused) {
        this.emit('resume');
        this.paused = false;
        if (this._emitQueue.length) {
          var eq = this._emitQueue.slice(0);
          this._emitQueue.length = 0;
          for (var i = 0; i < eq.length; i ++) {
            var e = eq[i];
            this._emitMatch(e[0], e[1]);
          }
        }
        if (this._processQueue.length) {
          var pq = this._processQueue.slice(0);
          this._processQueue.length = 0;
          for (var i = 0; i < pq.length; i ++) {
            var p = pq[i];
            this._processing--;
            this._process(p[0], p[1], p[2], p[3]);
          }
        }
      }
    };

    Glob.prototype._process = function (pattern, index, inGlobStar, cb) {
      assert(this instanceof Glob);
      assert(typeof cb === 'function');

      if (this.aborted)
        return

      this._processing++;
      if (this.paused) {
        this._processQueue.push([pattern, index, inGlobStar, cb]);
        return
      }

      //console.error('PROCESS %d', this._processing, pattern)

      // Get the first [n] parts of pattern that are all strings.
      var n = 0;
      while (typeof pattern[n] === 'string') {
        n ++;
      }
      // now n is the index of the first one that is *not* a string.

      // see if there's anything else
      var prefix;
      switch (n) {
        // if not, then this is rather simple
        case pattern.length:
          this._processSimple(pattern.join('/'), index, cb);
          return

        case 0:
          // pattern *starts* with some non-trivial item.
          // going to readdir(cwd), but not include the prefix in matches.
          prefix = null;
          break

        default:
          // pattern has some string bits in the front.
          // whatever it starts with, whether that's 'absolute' like /foo/bar,
          // or 'relative' like '../baz'
          prefix = pattern.slice(0, n).join('/');
          break
      }

      var remain = pattern.slice(n);

      // get the list of entries.
      var read;
      if (prefix === null)
        read = '.';
      else if (isAbsolute(prefix) || isAbsolute(pattern.join('/'))) {
        if (!prefix || !isAbsolute(prefix))
          prefix = '/' + prefix;
        read = prefix;
      } else
        read = prefix;

      var abs = this._makeAbs(read);

      //if ignored, skip _processing
      if (childrenIgnored(this, read))
        return cb()

      var isGlobStar = remain[0] === minimatch.GLOBSTAR;
      if (isGlobStar)
        this._processGlobStar(prefix, read, abs, remain, index, inGlobStar, cb);
      else
        this._processReaddir(prefix, read, abs, remain, index, inGlobStar, cb);
    };

    Glob.prototype._processReaddir = function (prefix, read, abs, remain, index, inGlobStar, cb) {
      var self = this;
      this._readdir(abs, inGlobStar, function (er, entries) {
        return self._processReaddir2(prefix, read, abs, remain, index, inGlobStar, entries, cb)
      });
    };

    Glob.prototype._processReaddir2 = function (prefix, read, abs, remain, index, inGlobStar, entries, cb) {

      // if the abs isn't a dir, then nothing can match!
      if (!entries)
        return cb()

      // It will only match dot entries if it starts with a dot, or if
      // dot is set.  Stuff like @(.foo|.bar) isn't allowed.
      var pn = remain[0];
      var negate = !!this.minimatch.negate;
      var rawGlob = pn._glob;
      var dotOk = this.dot || rawGlob.charAt(0) === '.';

      var matchedEntries = [];
      for (var i = 0; i < entries.length; i++) {
        var e = entries[i];
        if (e.charAt(0) !== '.' || dotOk) {
          var m;
          if (negate && !prefix) {
            m = !e.match(pn);
          } else {
            m = e.match(pn);
          }
          if (m)
            matchedEntries.push(e);
        }
      }

      //console.error('prd2', prefix, entries, remain[0]._glob, matchedEntries)

      var len = matchedEntries.length;
      // If there are no matched entries, then nothing matches.
      if (len === 0)
        return cb()

      // if this is the last remaining pattern bit, then no need for
      // an additional stat *unless* the user has specified mark or
      // stat explicitly.  We know they exist, since readdir returned
      // them.

      if (remain.length === 1 && !this.mark && !this.stat) {
        if (!this.matches[index])
          this.matches[index] = Object.create(null);

        for (var i = 0; i < len; i ++) {
          var e = matchedEntries[i];
          if (prefix) {
            if (prefix !== '/')
              e = prefix + '/' + e;
            else
              e = prefix + e;
          }

          if (e.charAt(0) === '/' && !this.nomount) {
            e = path.join(this.root, e);
          }
          this._emitMatch(index, e);
        }
        // This was the last one, and no stats were needed
        return cb()
      }

      // now test all matched entries as stand-ins for that part
      // of the pattern.
      remain.shift();
      for (var i = 0; i < len; i ++) {
        var e = matchedEntries[i];
        if (prefix) {
          if (prefix !== '/')
            e = prefix + '/' + e;
          else
            e = prefix + e;
        }
        this._process([e].concat(remain), index, inGlobStar, cb);
      }
      cb();
    };

    Glob.prototype._emitMatch = function (index, e) {
      if (this.aborted)
        return

      if (isIgnored(this, e))
        return

      if (this.paused) {
        this._emitQueue.push([index, e]);
        return
      }

      var abs = isAbsolute(e) ? e : this._makeAbs(e);

      if (this.mark)
        e = this._mark(e);

      if (this.absolute)
        e = abs;

      if (this.matches[index][e])
        return

      if (this.nodir) {
        var c = this.cache[abs];
        if (c === 'DIR' || Array.isArray(c))
          return
      }

      this.matches[index][e] = true;

      var st = this.statCache[abs];
      if (st)
        this.emit('stat', e, st);

      this.emit('match', e);
    };

    Glob.prototype._readdirInGlobStar = function (abs, cb) {
      if (this.aborted)
        return

      // follow all symlinked directories forever
      // just proceed as if this is a non-globstar situation
      if (this.follow)
        return this._readdir(abs, false, cb)

      var lstatkey = 'lstat\0' + abs;
      var self = this;
      var lstatcb = inflight(lstatkey, lstatcb_);

      if (lstatcb)
        self.fs.lstat(abs, lstatcb);

      function lstatcb_ (er, lstat) {
        if (er && er.code === 'ENOENT')
          return cb()

        var isSym = lstat && lstat.isSymbolicLink();
        self.symlinks[abs] = isSym;

        // If it's not a symlink or a dir, then it's definitely a regular file.
        // don't bother doing a readdir in that case.
        if (!isSym && lstat && !lstat.isDirectory()) {
          self.cache[abs] = 'FILE';
          cb();
        } else
          self._readdir(abs, false, cb);
      }
    };

    Glob.prototype._readdir = function (abs, inGlobStar, cb) {
      if (this.aborted)
        return

      cb = inflight('readdir\0'+abs+'\0'+inGlobStar, cb);
      if (!cb)
        return

      //console.error('RD %j %j', +inGlobStar, abs)
      if (inGlobStar && !ownProp(this.symlinks, abs))
        return this._readdirInGlobStar(abs, cb)

      if (ownProp(this.cache, abs)) {
        var c = this.cache[abs];
        if (!c || c === 'FILE')
          return cb()

        if (Array.isArray(c))
          return cb(null, c)
      }

      var self = this;
      self.fs.readdir(abs, readdirCb(this, abs, cb));
    };

    function readdirCb (self, abs, cb) {
      return function (er, entries) {
        if (er)
          self._readdirError(abs, er, cb);
        else
          self._readdirEntries(abs, entries, cb);
      }
    }

    Glob.prototype._readdirEntries = function (abs, entries, cb) {
      if (this.aborted)
        return

      // if we haven't asked to stat everything, then just
      // assume that everything in there exists, so we can avoid
      // having to stat it a second time.
      if (!this.mark && !this.stat) {
        for (var i = 0; i < entries.length; i ++) {
          var e = entries[i];
          if (abs === '/')
            e = abs + e;
          else
            e = abs + '/' + e;
          this.cache[e] = true;
        }
      }

      this.cache[abs] = entries;
      return cb(null, entries)
    };

    Glob.prototype._readdirError = function (f, er, cb) {
      if (this.aborted)
        return

      // handle errors, and cache the information
      switch (er.code) {
        case 'ENOTSUP': // https://github.com/isaacs/node-glob/issues/205
        case 'ENOTDIR': // totally normal. means it *does* exist.
          var abs = this._makeAbs(f);
          this.cache[abs] = 'FILE';
          if (abs === this.cwdAbs) {
            var error = new Error(er.code + ' invalid cwd ' + this.cwd);
            error.path = this.cwd;
            error.code = er.code;
            this.emit('error', error);
            this.abort();
          }
          break

        case 'ENOENT': // not terribly unusual
        case 'ELOOP':
        case 'ENAMETOOLONG':
        case 'UNKNOWN':
          this.cache[this._makeAbs(f)] = false;
          break

        default: // some unusual error.  Treat as failure.
          this.cache[this._makeAbs(f)] = false;
          if (this.strict) {
            this.emit('error', er);
            // If the error is handled, then we abort
            // if not, we threw out of here
            this.abort();
          }
          if (!this.silent)
            console.error('glob error', er);
          break
      }

      return cb()
    };

    Glob.prototype._processGlobStar = function (prefix, read, abs, remain, index, inGlobStar, cb) {
      var self = this;
      this._readdir(abs, inGlobStar, function (er, entries) {
        self._processGlobStar2(prefix, read, abs, remain, index, inGlobStar, entries, cb);
      });
    };


    Glob.prototype._processGlobStar2 = function (prefix, read, abs, remain, index, inGlobStar, entries, cb) {
      //console.error('pgs2', prefix, remain[0], entries)

      // no entries means not a dir, so it can never have matches
      // foo.txt/** doesn't match foo.txt
      if (!entries)
        return cb()

      // test without the globstar, and with every child both below
      // and replacing the globstar.
      var remainWithoutGlobStar = remain.slice(1);
      var gspref = prefix ? [ prefix ] : [];
      var noGlobStar = gspref.concat(remainWithoutGlobStar);

      // the noGlobStar pattern exits the inGlobStar state
      this._process(noGlobStar, index, false, cb);

      var isSym = this.symlinks[abs];
      var len = entries.length;

      // If it's a symlink, and we're in a globstar, then stop
      if (isSym && inGlobStar)
        return cb()

      for (var i = 0; i < len; i++) {
        var e = entries[i];
        if (e.charAt(0) === '.' && !this.dot)
          continue

        // these two cases enter the inGlobStar state
        var instead = gspref.concat(entries[i], remainWithoutGlobStar);
        this._process(instead, index, true, cb);

        var below = gspref.concat(entries[i], remain);
        this._process(below, index, true, cb);
      }

      cb();
    };

    Glob.prototype._processSimple = function (prefix, index, cb) {
      // XXX review this.  Shouldn't it be doing the mounting etc
      // before doing stat?  kinda weird?
      var self = this;
      this._stat(prefix, function (er, exists) {
        self._processSimple2(prefix, index, er, exists, cb);
      });
    };
    Glob.prototype._processSimple2 = function (prefix, index, er, exists, cb) {

      //console.error('ps2', prefix, exists)

      if (!this.matches[index])
        this.matches[index] = Object.create(null);

      // If it doesn't exist, then just mark the lack of results
      if (!exists)
        return cb()

      if (prefix && isAbsolute(prefix) && !this.nomount) {
        var trail = /[\/\\]$/.test(prefix);
        if (prefix.charAt(0) === '/') {
          prefix = path.join(this.root, prefix);
        } else {
          prefix = path.resolve(this.root, prefix);
          if (trail)
            prefix += '/';
        }
      }

      if (process.platform === 'win32')
        prefix = prefix.replace(/\\/g, '/');

      // Mark this as a match
      this._emitMatch(index, prefix);
      cb();
    };

    // Returns either 'DIR', 'FILE', or false
    Glob.prototype._stat = function (f, cb) {
      var abs = this._makeAbs(f);
      var needDir = f.slice(-1) === '/';

      if (f.length > this.maxLength)
        return cb()

      if (!this.stat && ownProp(this.cache, abs)) {
        var c = this.cache[abs];

        if (Array.isArray(c))
          c = 'DIR';

        // It exists, but maybe not how we need it
        if (!needDir || c === 'DIR')
          return cb(null, c)

        if (needDir && c === 'FILE')
          return cb()

        // otherwise we have to stat, because maybe c=true
        // if we know it exists, but not what it is.
      }
      var stat = this.statCache[abs];
      if (stat !== undefined) {
        if (stat === false)
          return cb(null, stat)
        else {
          var type = stat.isDirectory() ? 'DIR' : 'FILE';
          if (needDir && type === 'FILE')
            return cb()
          else
            return cb(null, type, stat)
        }
      }

      var self = this;
      var statcb = inflight('stat\0' + abs, lstatcb_);
      if (statcb)
        self.fs.lstat(abs, statcb);

      function lstatcb_ (er, lstat) {
        if (lstat && lstat.isSymbolicLink()) {
          // If it's a symlink, then treat it as the target, unless
          // the target does not exist, then treat it as a file.
          return self.fs.stat(abs, function (er, stat) {
            if (er)
              self._stat2(f, abs, null, lstat, cb);
            else
              self._stat2(f, abs, er, stat, cb);
          })
        } else {
          self._stat2(f, abs, er, lstat, cb);
        }
      }
    };

    Glob.prototype._stat2 = function (f, abs, er, stat, cb) {
      if (er && (er.code === 'ENOENT' || er.code === 'ENOTDIR')) {
        this.statCache[abs] = false;
        return cb()
      }

      var needDir = f.slice(-1) === '/';
      this.statCache[abs] = stat;

      if (abs.slice(-1) === '/' && stat && !stat.isDirectory())
        return cb(null, false, stat)

      var c = true;
      if (stat)
        c = stat.isDirectory() ? 'DIR' : 'FILE';
      this.cache[abs] = this.cache[abs] || c;

      if (needDir && c === 'FILE')
        return cb()

      return cb(null, c, stat)
    };

    var ejs = {};

    var utils = {};

    /*
     * EJS Embedded JavaScript templates
     * Copyright 2112 Matthew Eernisse (mde@fleegix.org)
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *         http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     *
    */

    (function (exports) {

    var regExpChars = /[|\\{}()[\]^$+*?.]/g;

    /**
     * Escape characters reserved in regular expressions.
     *
     * If `string` is `undefined` or `null`, the empty string is returned.
     *
     * @param {String} string Input string
     * @return {String} Escaped string
     * @static
     * @private
     */
    exports.escapeRegExpChars = function (string) {
      // istanbul ignore if
      if (!string) {
        return '';
      }
      return String(string).replace(regExpChars, '\\$&');
    };

    var _ENCODE_HTML_RULES = {
      '&': '&amp;',
      '<': '&lt;',
      '>': '&gt;',
      '"': '&#34;',
      "'": '&#39;'
    };
    var _MATCH_HTML = /[&<>'"]/g;

    function encode_char(c) {
      return _ENCODE_HTML_RULES[c] || c;
    }

    /**
     * Stringified version of constants used by {@link module:utils.escapeXML}.
     *
     * It is used in the process of generating {@link ClientFunction}s.
     *
     * @readonly
     * @type {String}
     */

    var escapeFuncStr =
      'var _ENCODE_HTML_RULES = {\n'
    + '      "&": "&amp;"\n'
    + '    , "<": "&lt;"\n'
    + '    , ">": "&gt;"\n'
    + '    , \'"\': "&#34;"\n'
    + '    , "\'": "&#39;"\n'
    + '    }\n'
    + '  , _MATCH_HTML = /[&<>\'"]/g;\n'
    + 'function encode_char(c) {\n'
    + '  return _ENCODE_HTML_RULES[c] || c;\n'
    + '};\n';

    /**
     * Escape characters reserved in XML.
     *
     * If `markup` is `undefined` or `null`, the empty string is returned.
     *
     * @implements {EscapeCallback}
     * @param {String} markup Input string
     * @return {String} Escaped string
     * @static
     * @private
     */

    exports.escapeXML = function (markup) {
      return markup == undefined
        ? ''
        : String(markup)
          .replace(_MATCH_HTML, encode_char);
    };
    exports.escapeXML.toString = function () {
      return Function.prototype.toString.call(this) + ';\n' + escapeFuncStr;
    };

    /**
     * Naive copy of properties from one object to another.
     * Does not recurse into non-scalar properties
     * Does not check to see if the property has a value before copying
     *
     * @param  {Object} to   Destination object
     * @param  {Object} from Source object
     * @return {Object}      Destination object
     * @static
     * @private
     */
    exports.shallowCopy = function (to, from) {
      from = from || {};
      for (var p in from) {
        to[p] = from[p];
      }
      return to;
    };

    /**
     * Naive copy of a list of key names, from one object to another.
     * Only copies property if it is actually defined
     * Does not recurse into non-scalar properties
     *
     * @param  {Object} to   Destination object
     * @param  {Object} from Source object
     * @param  {Array} list List of properties to copy
     * @return {Object}      Destination object
     * @static
     * @private
     */
    exports.shallowCopyFromList = function (to, from, list) {
      for (var i = 0; i < list.length; i++) {
        var p = list[i];
        if (typeof from[p] != 'undefined') {
          to[p] = from[p];
        }
      }
      return to;
    };

    /**
     * Simple in-process cache implementation. Does not implement limits of any
     * sort.
     *
     * @implements {Cache}
     * @static
     * @private
     */
    exports.cache = {
      _data: {},
      set: function (key, val) {
        this._data[key] = val;
      },
      get: function (key) {
        return this._data[key];
      },
      remove: function (key) {
        delete this._data[key];
      },
      reset: function () {
        this._data = {};
      }
    };

    /**
     * Transforms hyphen case variable into camel case.
     *
     * @param {String} string Hyphen case string
     * @return {String} Camel case string
     * @static
     * @private
     */
    exports.hyphenToCamel = function (str) {
      return str.replace(/-[a-z]/g, function (match) { return match[1].toUpperCase(); });
    };
    }(utils));

    var name = "ejs";
    var description = "Embedded JavaScript templates";
    var keywords = [
    	"template",
    	"engine",
    	"ejs"
    ];
    var version = "3.1.6";
    var author = "Matthew Eernisse <mde@fleegix.org> (http://fleegix.org)";
    var license = "Apache-2.0";
    var bin = {
    	ejs: "./bin/cli.js"
    };
    var main = "./lib/ejs.js";
    var jsdelivr = "ejs.min.js";
    var unpkg = "ejs.min.js";
    var repository = {
    	type: "git",
    	url: "git://github.com/mde/ejs.git"
    };
    var bugs = "https://github.com/mde/ejs/issues";
    var homepage = "https://github.com/mde/ejs";
    var dependencies = {
    	jake: "^10.6.1"
    };
    var devDependencies = {
    	browserify: "^16.5.1",
    	eslint: "^6.8.0",
    	"git-directory-deploy": "^1.5.1",
    	jsdoc: "^3.6.4",
    	"lru-cache": "^4.0.1",
    	mocha: "^7.1.1",
    	"uglify-js": "^3.3.16"
    };
    var engines = {
    	node: ">=0.10.0"
    };
    var scripts = {
    	test: "mocha"
    };
    var require$$3 = {
    	name: name,
    	description: description,
    	keywords: keywords,
    	version: version,
    	author: author,
    	license: license,
    	bin: bin,
    	main: main,
    	jsdelivr: jsdelivr,
    	unpkg: unpkg,
    	repository: repository,
    	bugs: bugs,
    	homepage: homepage,
    	dependencies: dependencies,
    	devDependencies: devDependencies,
    	engines: engines,
    	scripts: scripts
    };

    /*
     * EJS Embedded JavaScript templates
     * Copyright 2112 Matthew Eernisse (mde@fleegix.org)
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *         http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     *
    */

    (function (exports) {

    /**
     * @file Embedded JavaScript templating engine. {@link http://ejs.co}
     * @author Matthew Eernisse <mde@fleegix.org>
     * @author Tiancheng "Timothy" Gu <timothygu99@gmail.com>
     * @project EJS
     * @license {@link http://www.apache.org/licenses/LICENSE-2.0 Apache License, Version 2.0}
     */

    /**
     * EJS internal functions.
     *
     * Technically this "module" lies in the same file as {@link module:ejs}, for
     * the sake of organization all the private functions re grouped into this
     * module.
     *
     * @module ejs-internal
     * @private
     */

    /**
     * Embedded JavaScript templating engine.
     *
     * @module ejs
     * @public
     */

    var fs = require$$0__default$6["default"];
    var path = path__default["default"];
    var utils$1 = utils;

    var scopeOptionWarned = false;
    /** @type {string} */
    var _VERSION_STRING = require$$3.version;
    var _DEFAULT_OPEN_DELIMITER = '<';
    var _DEFAULT_CLOSE_DELIMITER = '>';
    var _DEFAULT_DELIMITER = '%';
    var _DEFAULT_LOCALS_NAME = 'locals';
    var _NAME = 'ejs';
    var _REGEX_STRING = '(<%%|%%>|<%=|<%-|<%_|<%#|<%|%>|-%>|_%>)';
    var _OPTS_PASSABLE_WITH_DATA = ['delimiter', 'scope', 'context', 'debug', 'compileDebug',
      'client', '_with', 'rmWhitespace', 'strict', 'filename', 'async'];
    // We don't allow 'cache' option to be passed in the data obj for
    // the normal `render` call, but this is where Express 2 & 3 put it
    // so we make an exception for `renderFile`
    var _OPTS_PASSABLE_WITH_DATA_EXPRESS = _OPTS_PASSABLE_WITH_DATA.concat('cache');
    var _BOM = /^\uFEFF/;

    /**
     * EJS template function cache. This can be a LRU object from lru-cache NPM
     * module. By default, it is {@link module:utils.cache}, a simple in-process
     * cache that grows continuously.
     *
     * @type {Cache}
     */

    exports.cache = utils$1.cache;

    /**
     * Custom file loader. Useful for template preprocessing or restricting access
     * to a certain part of the filesystem.
     *
     * @type {fileLoader}
     */

    exports.fileLoader = fs.readFileSync;

    /**
     * Name of the object containing the locals.
     *
     * This variable is overridden by {@link Options}`.localsName` if it is not
     * `undefined`.
     *
     * @type {String}
     * @public
     */

    exports.localsName = _DEFAULT_LOCALS_NAME;

    /**
     * Promise implementation -- defaults to the native implementation if available
     * This is mostly just for testability
     *
     * @type {PromiseConstructorLike}
     * @public
     */

    exports.promiseImpl = (new Function('return this;'))().Promise;

    /**
     * Get the path to the included file from the parent file path and the
     * specified path.
     *
     * @param {String}  name     specified path
     * @param {String}  filename parent file path
     * @param {Boolean} [isDir=false] whether the parent file path is a directory
     * @return {String}
     */
    exports.resolveInclude = function(name, filename, isDir) {
      var dirname = path.dirname;
      var extname = path.extname;
      var resolve = path.resolve;
      var includePath = resolve(isDir ? filename : dirname(filename), name);
      var ext = extname(name);
      if (!ext) {
        includePath += '.ejs';
      }
      return includePath;
    };

    /**
     * Try to resolve file path on multiple directories
     *
     * @param  {String}        name  specified path
     * @param  {Array<String>} paths list of possible parent directory paths
     * @return {String}
     */
    function resolvePaths(name, paths) {
      var filePath;
      if (paths.some(function (v) {
        filePath = exports.resolveInclude(name, v, true);
        return fs.existsSync(filePath);
      })) {
        return filePath;
      }
    }

    /**
     * Get the path to the included file by Options
     *
     * @param  {String}  path    specified path
     * @param  {Options} options compilation options
     * @return {String}
     */
    function getIncludePath(path, options) {
      var includePath;
      var filePath;
      var views = options.views;
      var match = /^[A-Za-z]+:\\|^\//.exec(path);

      // Abs path
      if (match && match.length) {
        path = path.replace(/^\/*/, '');
        if (Array.isArray(options.root)) {
          includePath = resolvePaths(path, options.root);
        } else {
          includePath = exports.resolveInclude(path, options.root || '/', true);
        }
      }
      // Relative paths
      else {
        // Look relative to a passed filename first
        if (options.filename) {
          filePath = exports.resolveInclude(path, options.filename);
          if (fs.existsSync(filePath)) {
            includePath = filePath;
          }
        }
        // Then look in any views directories
        if (!includePath && Array.isArray(views)) {
          includePath = resolvePaths(path, views);
        }
        if (!includePath && typeof options.includer !== 'function') {
          throw new Error('Could not find the include file "' +
              options.escapeFunction(path) + '"');
        }
      }
      return includePath;
    }

    /**
     * Get the template from a string or a file, either compiled on-the-fly or
     * read from cache (if enabled), and cache the template if needed.
     *
     * If `template` is not set, the file specified in `options.filename` will be
     * read.
     *
     * If `options.cache` is true, this function reads the file from
     * `options.filename` so it must be set prior to calling this function.
     *
     * @memberof module:ejs-internal
     * @param {Options} options   compilation options
     * @param {String} [template] template source
     * @return {(TemplateFunction|ClientFunction)}
     * Depending on the value of `options.client`, either type might be returned.
     * @static
     */

    function handleCache(options, template) {
      var func;
      var filename = options.filename;
      var hasTemplate = arguments.length > 1;

      if (options.cache) {
        if (!filename) {
          throw new Error('cache option requires a filename');
        }
        func = exports.cache.get(filename);
        if (func) {
          return func;
        }
        if (!hasTemplate) {
          template = fileLoader(filename).toString().replace(_BOM, '');
        }
      }
      else if (!hasTemplate) {
        // istanbul ignore if: should not happen at all
        if (!filename) {
          throw new Error('Internal EJS error: no file name or template '
                        + 'provided');
        }
        template = fileLoader(filename).toString().replace(_BOM, '');
      }
      func = exports.compile(template, options);
      if (options.cache) {
        exports.cache.set(filename, func);
      }
      return func;
    }

    /**
     * Try calling handleCache with the given options and data and call the
     * callback with the result. If an error occurs, call the callback with
     * the error. Used by renderFile().
     *
     * @memberof module:ejs-internal
     * @param {Options} options    compilation options
     * @param {Object} data        template data
     * @param {RenderFileCallback} cb callback
     * @static
     */

    function tryHandleCache(options, data, cb) {
      var result;
      if (!cb) {
        if (typeof exports.promiseImpl == 'function') {
          return new exports.promiseImpl(function (resolve, reject) {
            try {
              result = handleCache(options)(data);
              resolve(result);
            }
            catch (err) {
              reject(err);
            }
          });
        }
        else {
          throw new Error('Please provide a callback function');
        }
      }
      else {
        try {
          result = handleCache(options)(data);
        }
        catch (err) {
          return cb(err);
        }

        cb(null, result);
      }
    }

    /**
     * fileLoader is independent
     *
     * @param {String} filePath ejs file path.
     * @return {String} The contents of the specified file.
     * @static
     */

    function fileLoader(filePath){
      return exports.fileLoader(filePath);
    }

    /**
     * Get the template function.
     *
     * If `options.cache` is `true`, then the template is cached.
     *
     * @memberof module:ejs-internal
     * @param {String}  path    path for the specified file
     * @param {Options} options compilation options
     * @return {(TemplateFunction|ClientFunction)}
     * Depending on the value of `options.client`, either type might be returned
     * @static
     */

    function includeFile(path, options) {
      var opts = utils$1.shallowCopy({}, options);
      opts.filename = getIncludePath(path, opts);
      if (typeof options.includer === 'function') {
        var includerResult = options.includer(path, opts.filename);
        if (includerResult) {
          if (includerResult.filename) {
            opts.filename = includerResult.filename;
          }
          if (includerResult.template) {
            return handleCache(opts, includerResult.template);
          }
        }
      }
      return handleCache(opts);
    }

    /**
     * Re-throw the given `err` in context to the `str` of ejs, `filename`, and
     * `lineno`.
     *
     * @implements {RethrowCallback}
     * @memberof module:ejs-internal
     * @param {Error}  err      Error object
     * @param {String} str      EJS source
     * @param {String} flnm     file name of the EJS file
     * @param {Number} lineno   line number of the error
     * @param {EscapeCallback} esc
     * @static
     */

    function rethrow(err, str, flnm, lineno, esc) {
      var lines = str.split('\n');
      var start = Math.max(lineno - 3, 0);
      var end = Math.min(lines.length, lineno + 3);
      var filename = esc(flnm);
      // Error context
      var context = lines.slice(start, end).map(function (line, i){
        var curr = i + start + 1;
        return (curr == lineno ? ' >> ' : '    ')
          + curr
          + '| '
          + line;
      }).join('\n');

      // Alter exception message
      err.path = filename;
      err.message = (filename || 'ejs') + ':'
        + lineno + '\n'
        + context + '\n\n'
        + err.message;

      throw err;
    }

    function stripSemi(str){
      return str.replace(/;(\s*$)/, '$1');
    }

    /**
     * Compile the given `str` of ejs into a template function.
     *
     * @param {String}  template EJS template
     *
     * @param {Options} [opts] compilation options
     *
     * @return {(TemplateFunction|ClientFunction)}
     * Depending on the value of `opts.client`, either type might be returned.
     * Note that the return type of the function also depends on the value of `opts.async`.
     * @public
     */

    exports.compile = function compile(template, opts) {
      var templ;

      // v1 compat
      // 'scope' is 'context'
      // FIXME: Remove this in a future version
      if (opts && opts.scope) {
        if (!scopeOptionWarned){
          console.warn('`scope` option is deprecated and will be removed in EJS 3');
          scopeOptionWarned = true;
        }
        if (!opts.context) {
          opts.context = opts.scope;
        }
        delete opts.scope;
      }
      templ = new Template(template, opts);
      return templ.compile();
    };

    /**
     * Render the given `template` of ejs.
     *
     * If you would like to include options but not data, you need to explicitly
     * call this function with `data` being an empty object or `null`.
     *
     * @param {String}   template EJS template
     * @param {Object}  [data={}] template data
     * @param {Options} [opts={}] compilation and rendering options
     * @return {(String|Promise<String>)}
     * Return value type depends on `opts.async`.
     * @public
     */

    exports.render = function (template, d, o) {
      var data = d || {};
      var opts = o || {};

      // No options object -- if there are optiony names
      // in the data, copy them to options
      if (arguments.length == 2) {
        utils$1.shallowCopyFromList(opts, data, _OPTS_PASSABLE_WITH_DATA);
      }

      return handleCache(opts, template)(data);
    };

    /**
     * Render an EJS file at the given `path` and callback `cb(err, str)`.
     *
     * If you would like to include options but not data, you need to explicitly
     * call this function with `data` being an empty object or `null`.
     *
     * @param {String}             path     path to the EJS file
     * @param {Object}            [data={}] template data
     * @param {Options}           [opts={}] compilation and rendering options
     * @param {RenderFileCallback} cb callback
     * @public
     */

    exports.renderFile = function () {
      var args = Array.prototype.slice.call(arguments);
      var filename = args.shift();
      var cb;
      var opts = {filename: filename};
      var data;
      var viewOpts;

      // Do we have a callback?
      if (typeof arguments[arguments.length - 1] == 'function') {
        cb = args.pop();
      }
      // Do we have data/opts?
      if (args.length) {
        // Should always have data obj
        data = args.shift();
        // Normal passed opts (data obj + opts obj)
        if (args.length) {
          // Use shallowCopy so we don't pollute passed in opts obj with new vals
          utils$1.shallowCopy(opts, args.pop());
        }
        // Special casing for Express (settings + opts-in-data)
        else {
          // Express 3 and 4
          if (data.settings) {
            // Pull a few things from known locations
            if (data.settings.views) {
              opts.views = data.settings.views;
            }
            if (data.settings['view cache']) {
              opts.cache = true;
            }
            // Undocumented after Express 2, but still usable, esp. for
            // items that are unsafe to be passed along with data, like `root`
            viewOpts = data.settings['view options'];
            if (viewOpts) {
              utils$1.shallowCopy(opts, viewOpts);
            }
          }
          // Express 2 and lower, values set in app.locals, or people who just
          // want to pass options in their data. NOTE: These values will override
          // anything previously set in settings  or settings['view options']
          utils$1.shallowCopyFromList(opts, data, _OPTS_PASSABLE_WITH_DATA_EXPRESS);
        }
        opts.filename = filename;
      }
      else {
        data = {};
      }

      return tryHandleCache(opts, data, cb);
    };

    /**
     * Clear intermediate JavaScript cache. Calls {@link Cache#reset}.
     * @public
     */

    /**
     * EJS template class
     * @public
     */
    exports.Template = Template;

    exports.clearCache = function () {
      exports.cache.reset();
    };

    function Template(text, opts) {
      opts = opts || {};
      var options = {};
      this.templateText = text;
      /** @type {string | null} */
      this.mode = null;
      this.truncate = false;
      this.currentLine = 1;
      this.source = '';
      options.client = opts.client || false;
      options.escapeFunction = opts.escape || opts.escapeFunction || utils$1.escapeXML;
      options.compileDebug = opts.compileDebug !== false;
      options.debug = !!opts.debug;
      options.filename = opts.filename;
      options.openDelimiter = opts.openDelimiter || exports.openDelimiter || _DEFAULT_OPEN_DELIMITER;
      options.closeDelimiter = opts.closeDelimiter || exports.closeDelimiter || _DEFAULT_CLOSE_DELIMITER;
      options.delimiter = opts.delimiter || exports.delimiter || _DEFAULT_DELIMITER;
      options.strict = opts.strict || false;
      options.context = opts.context;
      options.cache = opts.cache || false;
      options.rmWhitespace = opts.rmWhitespace;
      options.root = opts.root;
      options.includer = opts.includer;
      options.outputFunctionName = opts.outputFunctionName;
      options.localsName = opts.localsName || exports.localsName || _DEFAULT_LOCALS_NAME;
      options.views = opts.views;
      options.async = opts.async;
      options.destructuredLocals = opts.destructuredLocals;
      options.legacyInclude = typeof opts.legacyInclude != 'undefined' ? !!opts.legacyInclude : true;

      if (options.strict) {
        options._with = false;
      }
      else {
        options._with = typeof opts._with != 'undefined' ? opts._with : true;
      }

      this.opts = options;

      this.regex = this.createRegex();
    }

    Template.modes = {
      EVAL: 'eval',
      ESCAPED: 'escaped',
      RAW: 'raw',
      COMMENT: 'comment',
      LITERAL: 'literal'
    };

    Template.prototype = {
      createRegex: function () {
        var str = _REGEX_STRING;
        var delim = utils$1.escapeRegExpChars(this.opts.delimiter);
        var open = utils$1.escapeRegExpChars(this.opts.openDelimiter);
        var close = utils$1.escapeRegExpChars(this.opts.closeDelimiter);
        str = str.replace(/%/g, delim)
          .replace(/</g, open)
          .replace(/>/g, close);
        return new RegExp(str);
      },

      compile: function () {
        /** @type {string} */
        var src;
        /** @type {ClientFunction} */
        var fn;
        var opts = this.opts;
        var prepended = '';
        var appended = '';
        /** @type {EscapeCallback} */
        var escapeFn = opts.escapeFunction;
        /** @type {FunctionConstructor} */
        var ctor;
        /** @type {string} */
        var sanitizedFilename = opts.filename ? JSON.stringify(opts.filename) : 'undefined';

        if (!this.source) {
          this.generateSource();
          prepended +=
            '  var __output = "";\n' +
            '  function __append(s) { if (s !== undefined && s !== null) __output += s }\n';
          if (opts.outputFunctionName) {
            prepended += '  var ' + opts.outputFunctionName + ' = __append;' + '\n';
          }
          if (opts.destructuredLocals && opts.destructuredLocals.length) {
            var destructuring = '  var __locals = (' + opts.localsName + ' || {}),\n';
            for (var i = 0; i < opts.destructuredLocals.length; i++) {
              var name = opts.destructuredLocals[i];
              if (i > 0) {
                destructuring += ',\n  ';
              }
              destructuring += name + ' = __locals.' + name;
            }
            prepended += destructuring + ';\n';
          }
          if (opts._with !== false) {
            prepended +=  '  with (' + opts.localsName + ' || {}) {' + '\n';
            appended += '  }' + '\n';
          }
          appended += '  return __output;' + '\n';
          this.source = prepended + this.source + appended;
        }

        if (opts.compileDebug) {
          src = 'var __line = 1' + '\n'
            + '  , __lines = ' + JSON.stringify(this.templateText) + '\n'
            + '  , __filename = ' + sanitizedFilename + ';' + '\n'
            + 'try {' + '\n'
            + this.source
            + '} catch (e) {' + '\n'
            + '  rethrow(e, __lines, __filename, __line, escapeFn);' + '\n'
            + '}' + '\n';
        }
        else {
          src = this.source;
        }

        if (opts.client) {
          src = 'escapeFn = escapeFn || ' + escapeFn.toString() + ';' + '\n' + src;
          if (opts.compileDebug) {
            src = 'rethrow = rethrow || ' + rethrow.toString() + ';' + '\n' + src;
          }
        }

        if (opts.strict) {
          src = '"use strict";\n' + src;
        }
        if (opts.debug) {
          console.log(src);
        }
        if (opts.compileDebug && opts.filename) {
          src = src + '\n'
            + '//# sourceURL=' + sanitizedFilename + '\n';
        }

        try {
          if (opts.async) {
            // Have to use generated function for this, since in envs without support,
            // it breaks in parsing
            try {
              ctor = (new Function('return (async function(){}).constructor;'))();
            }
            catch(e) {
              if (e instanceof SyntaxError) {
                throw new Error('This environment does not support async/await');
              }
              else {
                throw e;
              }
            }
          }
          else {
            ctor = Function;
          }
          fn = new ctor(opts.localsName + ', escapeFn, include, rethrow', src);
        }
        catch(e) {
          // istanbul ignore else
          if (e instanceof SyntaxError) {
            if (opts.filename) {
              e.message += ' in ' + opts.filename;
            }
            e.message += ' while compiling ejs\n\n';
            e.message += 'If the above error is not helpful, you may want to try EJS-Lint:\n';
            e.message += 'https://github.com/RyanZim/EJS-Lint';
            if (!opts.async) {
              e.message += '\n';
              e.message += 'Or, if you meant to create an async function, pass `async: true` as an option.';
            }
          }
          throw e;
        }

        // Return a callable function which will execute the function
        // created by the source-code, with the passed data as locals
        // Adds a local `include` function which allows full recursive include
        var returnedFn = opts.client ? fn : function anonymous(data) {
          var include = function (path, includeData) {
            var d = utils$1.shallowCopy({}, data);
            if (includeData) {
              d = utils$1.shallowCopy(d, includeData);
            }
            return includeFile(path, opts)(d);
          };
          return fn.apply(opts.context, [data || {}, escapeFn, include, rethrow]);
        };
        if (opts.filename && typeof Object.defineProperty === 'function') {
          var filename = opts.filename;
          var basename = path.basename(filename, path.extname(filename));
          try {
            Object.defineProperty(returnedFn, 'name', {
              value: basename,
              writable: false,
              enumerable: false,
              configurable: true
            });
          } catch (e) {/* ignore */}
        }
        return returnedFn;
      },

      generateSource: function () {
        var opts = this.opts;

        if (opts.rmWhitespace) {
          // Have to use two separate replace here as `^` and `$` operators don't
          // work well with `\r` and empty lines don't work well with the `m` flag.
          this.templateText =
            this.templateText.replace(/[\r\n]+/g, '\n').replace(/^\s+|\s+$/gm, '');
        }

        // Slurp spaces and tabs before <%_ and after _%>
        this.templateText =
          this.templateText.replace(/[ \t]*<%_/gm, '<%_').replace(/_%>[ \t]*/gm, '_%>');

        var self = this;
        var matches = this.parseTemplateText();
        var d = this.opts.delimiter;
        var o = this.opts.openDelimiter;
        var c = this.opts.closeDelimiter;

        if (matches && matches.length) {
          matches.forEach(function (line, index) {
            var closing;
            // If this is an opening tag, check for closing tags
            // FIXME: May end up with some false positives here
            // Better to store modes as k/v with openDelimiter + delimiter as key
            // Then this can simply check against the map
            if ( line.indexOf(o + d) === 0        // If it is a tag
              && line.indexOf(o + d + d) !== 0) { // and is not escaped
              closing = matches[index + 2];
              if (!(closing == d + c || closing == '-' + d + c || closing == '_' + d + c)) {
                throw new Error('Could not find matching close tag for "' + line + '".');
              }
            }
            self.scanLine(line);
          });
        }

      },

      parseTemplateText: function () {
        var str = this.templateText;
        var pat = this.regex;
        var result = pat.exec(str);
        var arr = [];
        var firstPos;

        while (result) {
          firstPos = result.index;

          if (firstPos !== 0) {
            arr.push(str.substring(0, firstPos));
            str = str.slice(firstPos);
          }

          arr.push(result[0]);
          str = str.slice(result[0].length);
          result = pat.exec(str);
        }

        if (str) {
          arr.push(str);
        }

        return arr;
      },

      _addOutput: function (line) {
        if (this.truncate) {
          // Only replace single leading linebreak in the line after
          // -%> tag -- this is the single, trailing linebreak
          // after the tag that the truncation mode replaces
          // Handle Win / Unix / old Mac linebreaks -- do the \r\n
          // combo first in the regex-or
          line = line.replace(/^(?:\r\n|\r|\n)/, '');
          this.truncate = false;
        }
        if (!line) {
          return line;
        }

        // Preserve literal slashes
        line = line.replace(/\\/g, '\\\\');

        // Convert linebreaks
        line = line.replace(/\n/g, '\\n');
        line = line.replace(/\r/g, '\\r');

        // Escape double-quotes
        // - this will be the delimiter during execution
        line = line.replace(/"/g, '\\"');
        this.source += '    ; __append("' + line + '")' + '\n';
      },

      scanLine: function (line) {
        var self = this;
        var d = this.opts.delimiter;
        var o = this.opts.openDelimiter;
        var c = this.opts.closeDelimiter;
        var newLineCount = 0;

        newLineCount = (line.split('\n').length - 1);

        switch (line) {
        case o + d:
        case o + d + '_':
          this.mode = Template.modes.EVAL;
          break;
        case o + d + '=':
          this.mode = Template.modes.ESCAPED;
          break;
        case o + d + '-':
          this.mode = Template.modes.RAW;
          break;
        case o + d + '#':
          this.mode = Template.modes.COMMENT;
          break;
        case o + d + d:
          this.mode = Template.modes.LITERAL;
          this.source += '    ; __append("' + line.replace(o + d + d, o + d) + '")' + '\n';
          break;
        case d + d + c:
          this.mode = Template.modes.LITERAL;
          this.source += '    ; __append("' + line.replace(d + d + c, d + c) + '")' + '\n';
          break;
        case d + c:
        case '-' + d + c:
        case '_' + d + c:
          if (this.mode == Template.modes.LITERAL) {
            this._addOutput(line);
          }

          this.mode = null;
          this.truncate = line.indexOf('-') === 0 || line.indexOf('_') === 0;
          break;
        default:
          // In script mode, depends on type of tag
          if (this.mode) {
            // If '//' is found without a line break, add a line break.
            switch (this.mode) {
            case Template.modes.EVAL:
            case Template.modes.ESCAPED:
            case Template.modes.RAW:
              if (line.lastIndexOf('//') > line.lastIndexOf('\n')) {
                line += '\n';
              }
            }
            switch (this.mode) {
            // Just executing code
            case Template.modes.EVAL:
              this.source += '    ; ' + line + '\n';
              break;
              // Exec, esc, and output
            case Template.modes.ESCAPED:
              this.source += '    ; __append(escapeFn(' + stripSemi(line) + '))' + '\n';
              break;
              // Exec and output
            case Template.modes.RAW:
              this.source += '    ; __append(' + stripSemi(line) + ')' + '\n';
              break;
            case Template.modes.COMMENT:
              // Do nothing
              break;
              // Literal <%% mode, append as raw output
            case Template.modes.LITERAL:
              this._addOutput(line);
              break;
            }
          }
          // In string mode, just add the output
          else {
            this._addOutput(line);
          }
        }

        if (self.opts.compileDebug && newLineCount) {
          this.currentLine += newLineCount;
          this.source += '    ; __line = ' + this.currentLine + '\n';
        }
      }
    };

    /**
     * Escape characters reserved in XML.
     *
     * This is simply an export of {@link module:utils.escapeXML}.
     *
     * If `markup` is `undefined` or `null`, the empty string is returned.
     *
     * @param {String} markup Input string
     * @return {String} Escaped string
     * @public
     * @func
     * */
    exports.escapeXML = utils$1.escapeXML;

    /**
     * Express.js support.
     *
     * This is an alias for {@link module:ejs.renderFile}, in order to support
     * Express.js out-of-the-box.
     *
     * @func
     */

    exports.__express = exports.renderFile;

    /**
     * Version of EJS.
     *
     * @readonly
     * @type {String}
     * @public
     */

    exports.VERSION = _VERSION_STRING;

    /**
     * Name for detection of EJS.
     *
     * @readonly
     * @type {String}
     * @public
     */

    exports.name = _NAME;

    /* istanbul ignore if */
    if (typeof window != 'undefined') {
      window.ejs = exports;
    }
    }(ejs));

    function getProjectTemplate () {
        return request({
            url: '/project/template'
        });
    }

    const TYPE_PROJECT = 'project';
    const TYPE_COMPONENT = 'component';
    const TEMPLATE_TYPE_NORMAL = 'normal';
    const TEMPLATE_TYPE_CUSTOM = 'custom';
    const WHITE_COMMAND = ['npm', 'cnpm'];
    const userHome = require$$0__default$3["default"].homedir();
    class InitCommand extends Command {
        constructor(args) {
            super(args);
            this.projectName = '';
            this.force = false;
            this.projectInfo = {};
            this.template = [];
        }
        init() {
            this.projectName = this._argv[0] || '';
            this.force = !!this._cmd.force;
            log.verbose('projectName', this.projectName);
            log.verbose('force', this.force.toString());
        }
        exec() {
            return __awaiter$4(this, void 0, void 0, function* () {
                try {
                    const projectInfo = yield this.prepare();
                    if (projectInfo) {
                        this.projectInfo = projectInfo;
                        yield this.downloadTemplate();
                        yield this.installTemplate();
                    }
                }
                catch (e) {
                    log.error('exec', e.message);
                    if (process.env.LOG_LEVEL === 'verbose') {
                        console.log(e);
                    }
                }
            });
        }
        downloadTemplate() {
            return __awaiter$4(this, void 0, void 0, function* () {
                const { projectTemplate } = this.projectInfo;
                this.templateInfo = this.template.find(item => item.npmName === projectTemplate);
                const targetPath = path__default["default"].resolve(userHome, '.js-cli', 'template');
                const storeDir = path__default["default"].resolve(userHome, '.js-cli', 'template', 'node_modules');
                const { npmName, version } = this.templateInfo;
                this.templateNpm = new Package({
                    targetPath,
                    storeDir,
                    packageName: npmName,
                    packageVersion: version
                });
                if (!(yield this.templateNpm.exists())) {
                    const spinner = spinnerStart('正在下载模板...');
                    yield sleep();
                    try {
                        yield this.templateNpm.install();
                    }
                    catch (e) {
                        throw e;
                    }
                    finally {
                        spinner.stop(true);
                        if (yield this.templateNpm.exists()) {
                            log.success('下载模板成功');
                        }
                    }
                }
                else {
                    const spinner = spinnerStart('正在更新模板...');
                    yield sleep();
                    try {
                        yield this.templateNpm.update();
                    }
                    catch (e) {
                        throw e;
                    }
                    finally {
                        spinner.stop(true);
                        if (yield this.templateNpm.exists()) {
                            log.success('模板更新成功');
                        }
                    }
                }
            });
        }
        installTemplate() {
            return __awaiter$4(this, void 0, void 0, function* () {
                if (this.templateInfo) {
                    if (this.templateInfo.type) {
                        if (!this.templateInfo.type) {
                            this.templateInfo.type = TEMPLATE_TYPE_NORMAL;
                        }
                        if (this.templateInfo.type === TEMPLATE_TYPE_NORMAL) {
                            yield this.installNormalTemplate();
                        }
                        else if (this.templateInfo.type === TEMPLATE_TYPE_CUSTOM) {
                            yield this.installCustomTemplate();
                        }
                        else {
                            throw new Error('无法识别项目模板类型');
                        }
                    }
                }
                else {
                    throw new Error('项目模板信息不存在！');
                }
            });
        }
        installNormalTemplate() {
            return __awaiter$4(this, void 0, void 0, function* () {
                // 拷贝模板至当前目录
                let spinner = spinnerStart('正在安装模板');
                try {
                    const templatePath = path__default["default"].resolve(this.templateNpm.cacheFilePath, 'template');
                    const targetPath = process.cwd();
                    lib$2.ensureDirSync(templatePath);
                    lib$2.ensureDirSync(targetPath);
                    lib$2.copySync(templatePath, targetPath);
                }
                catch (e) {
                    throw e;
                }
                finally {
                    spinner.stop(true);
                    log.success('模板安装成功');
                }
                const { installCommand, startCommand } = this.templateInfo;
                const templateIgnore = this.templateInfo.ignore || [];
                const ignore = ['**/node_modules/**', ...templateIgnore];
                yield this.ejsRender({ ignore });
                yield this.execCommand(installCommand, '依赖安装失败');
                yield this.execCommand(startCommand, '项目启动失败');
            });
        }
        installCustomTemplate() {
            return __awaiter$4(this, void 0, void 0, function* () {
                // 查询自定义模版入口信息
                if (yield this.templateNpm.exists()) {
                    const rootFile = this.templateNpm.getRootFilePath();
                    if (rootFile && require$$0__default$6["default"].existsSync(rootFile)) {
                        log.notice('', '开始执行自定义模板');
                        const templatePath = path__default["default"].resolve(this.templateNpm.cacheFilePath, 'template');
                        const options = {
                            templateInfo: this.templateInfo,
                            projectInfo: this.projectInfo,
                            sourcePath: templatePath,
                            targetPath: process.cwd()
                        };
                        const code = `require('${rootFile}').call(null, ${JSON.stringify(options)})`;
                        yield execSpawn('node', ['-e', code], {
                            stdio: 'inherit',
                            cwd: process.cwd()
                        });
                        log.success('自定义模板安装成功');
                    }
                    else {
                        throw new Error('自定义模板入口文件不存在');
                    }
                }
            });
        }
        execCommand(command, errMsg) {
            return __awaiter$4(this, void 0, void 0, function* () {
                let ret;
                if (command) {
                    const cmdArray = command.split(' ');
                    const cmd = this.checkCommand(cmdArray[0]);
                    if (!cmd) {
                        throw new Error('命令不存在：' + command);
                    }
                    const args = cmdArray.slice(1);
                    ret = yield execSpawn(cmd, args, {
                        stdio: 'inherit',
                        cwd: process.cwd()
                    });
                    if (ret !== 0) {
                        throw new Error(errMsg);
                    }
                }
            });
        }
        checkCommand(cmd) {
            if (WHITE_COMMAND.includes(cmd)) {
                return cmd;
            }
            return null;
        }
        ejsRender(options) {
            return __awaiter$4(this, void 0, void 0, function* () {
                const dir = process.cwd();
                const projectInfo = this.projectInfo;
                return new Promise((resolve, reject) => {
                    glob_1('**', {
                        cwd: dir,
                        ignore: options.ignore || '',
                        nodir: true
                    }, (err, files) => {
                        if (err) {
                            reject(err);
                        }
                        Promise.all(files.map(file => {
                            const filePath = path__default["default"].join(dir, file);
                            return new Promise((resolve1, reject1) => {
                                ejs.renderFile(filePath, projectInfo, {}, (err, result) => {
                                    if (err) {
                                        log.verbose('ejsRender', err.toString());
                                        reject1(err);
                                    }
                                    else {
                                        lib$2.writeFileSync(filePath, result);
                                        resolve1(result);
                                    }
                                });
                            });
                        })).then(() => {
                            resolve(null);
                        }).catch(() => {
                            reject(err);
                        });
                    });
                });
            });
        }
        createTemplateChoices() {
            return this.template.map(item => ({
                value: item.npmName,
                name: item.name
            }));
        }
        prepare() {
            return __awaiter$4(this, void 0, void 0, function* () {
                const localPath = process.cwd();
                const spinner = spinnerStart('从远程仓库获取模版');
                const template = (yield getProjectTemplate());
                spinner.stop(true);
                if (!template || template.length === 0) {
                    throw new Error('项目模版不存在');
                }
                this.template = template;
                if (!this.isDirEmpty(localPath)) {
                    let ifContinue = false;
                    if (!this.force) {
                        ifContinue = (yield inquirer.prompt({
                            type: 'confirm',
                            name: 'ifContinue',
                            default: false,
                            message: '当前文件夹不为空，是否继续创建项目？'
                        })).ifContinue;
                        if (!ifContinue)
                            return;
                    }
                    if (ifContinue || this.force) {
                        const { confirmDelete } = yield inquirer.prompt({
                            type: 'confirm',
                            name: 'confirmDelete',
                            default: false,
                            message: '是否确认清空当前目录下对所有文件？'
                        });
                        if (confirmDelete) {
                            lib$2.emptyDirSync(localPath);
                        }
                    }
                }
                return yield this.getProjectInfo();
            });
        }
        getProjectInfo() {
            return __awaiter$4(this, void 0, void 0, function* () {
                function isValidName(v) {
                    return /^[@a-zA-Z]+([-][a-zA-Z][a-zA-Z0-9]*|[_][a-zA-Z][a-zA-Z0-9]*|[\/][a-zA-Z][a-zA-Z0-9]*|[a-zA-Z0-9])*$/.test(v);
                }
                let projectInfo = {};
                let isProjectNameValid = false;
                if (isValidName(this.projectName)) {
                    isProjectNameValid = true;
                    projectInfo.projectName = this.projectName;
                }
                // 选择项目或组件
                const { type } = yield inquirer.prompt({
                    type: 'list',
                    name: 'type',
                    default: TYPE_PROJECT,
                    choices: [{
                            name: '项目',
                            value: TYPE_PROJECT
                        }, {
                            name: '组件',
                            value: TYPE_COMPONENT
                        }],
                    message: '请选择初始化类型'
                });
                this.template = this.template.filter(template => template.tag.includes(type));
                const title = type === TYPE_PROJECT ? '项目' : '组件';
                const projectNamePrompt = {
                    type: 'input',
                    name: 'projectName',
                    message: `请输入${title}名称`,
                    default: '',
                    validate: function (v) {
                        return new Promise((resolve, reject) => {
                            setTimeout(() => {
                                if (!isValidName(v)) {
                                    reject(`合法${title}名称需满足：1.首字符必需为英文字母或@字符; 2.尾字符必需为英文或数字，不能为字符; 3.字符仅允许'-_@/'`);
                                    return;
                                }
                                resolve(true);
                            }, 0);
                        });
                    },
                    filter: (v) => {
                        return v;
                    }
                };
                const projectPrompt = [];
                if (!isProjectNameValid) {
                    projectPrompt.push(projectNamePrompt);
                }
                projectPrompt.push({
                    type: 'input',
                    name: 'projectVersion',
                    message: `请输入${title}版本号`,
                    default: '1.0.0',
                    validate: function (v) {
                        return new Promise((resolve, reject) => {
                            setTimeout(() => {
                                if (!(!!semver$2.valid(v))) {
                                    reject('请输入合法对版本号');
                                    return;
                                }
                                resolve(true);
                            }, 0);
                        });
                    },
                    filter: (v) => {
                        if (!!semver$2.valid(v)) {
                            return semver$2.valid(v);
                        }
                        else {
                            return v;
                        }
                    }
                }, {
                    type: 'list',
                    name: 'projectTemplate',
                    message: `请选择${title}模版`,
                    choices: this.createTemplateChoices(),
                });
                if (type === TYPE_PROJECT) {
                    const project = yield inquirer.prompt(projectPrompt);
                    projectInfo = Object.assign(Object.assign(Object.assign({}, projectInfo), { type }), project);
                }
                else if (type === TYPE_COMPONENT) {
                    const descriptionPrompt = {
                        type: 'input',
                        name: 'componentDescription',
                        message: '请输入组件描述信息',
                        default: '',
                        validate: function (v) {
                            return new Promise((resolve, reject) => {
                                setTimeout(() => {
                                    if (!v) {
                                        reject('请输入组件描述信息');
                                        return;
                                    }
                                    resolve(true);
                                }, 0);
                            });
                        },
                    };
                    projectPrompt.push(descriptionPrompt);
                    // 2.获取组件基本信息
                    const component = yield inquirer.prompt(projectPrompt);
                    projectInfo = Object.assign(Object.assign(Object.assign({}, projectInfo), { type }), component);
                }
                // 生成 className
                if (projectInfo.projectName) {
                    projectInfo.name = projectInfo.projectName;
                    projectInfo.className = kebabCase(projectInfo.projectName).replace(/^-/, '');
                }
                if (projectInfo.projectVersion) {
                    projectInfo.version = projectInfo.projectVersion;
                }
                if (projectInfo.componentDescription) {
                    projectInfo.description = projectInfo.componentDescription;
                }
                console.log('projectInfo', projectInfo);
                return projectInfo;
            });
        }
        isDirEmpty(localPath) {
            let fileList = require$$0__default$6["default"].readdirSync(localPath);
            fileList = fileList.filter(file => !file.startsWith('.') && ['node_modules'].indexOf(file) < 0);
            return !fileList || fileList.length <= 0;
        }
    }
    const init = (...args) => {
        return new InitCommand(args);
    };

    exports["default"] = init;
    exports.init = init;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
